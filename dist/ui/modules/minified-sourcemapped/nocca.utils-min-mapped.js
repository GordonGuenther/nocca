!function(){"use strict";angular.module("nocca.utils",[])}(),angular.module("nocca.utils").run(["$templateCache",function(t){t.put("download-dialog.directive.html",'<div> <md-content> <md-input-container flex="33"> <label>Filename</label> <input ng-model="download.filename"> </md-input-container> </md-content> <div class="md-actions"> <md-button ng-click="cancel()">Cancel</md-button> <md-button ng-click="save()">Save</md-button> </div> </div>')}]),function(){"use strict";function t(){function t(){return"undefined"!=typeof navigator&&navigator.msSaveOrOpenBlob&&navigator.msSaveOrOpenBlob.bind(navigator)||function(t){if("undefined"==typeof navigator||!/MSIE [1-9]\./.test(navigator.userAgent)){var e=t.document,n=function(){return t.URL||t.webkitURL||t},o=e.createElementNS("http://www.w3.org/1999/xhtml","a"),a="download"in o,i=function(n){var o=e.createEvent("MouseEvents");o.initMouseEvent("click",!0,!1,t,0,0,0,0,0,!1,!1,!1,!1,0,null),n.dispatchEvent(o)},r=t.webkitRequestFileSystem,c=t.requestFileSystem||r||t.mozRequestFileSystem,l=function(e){(t.setImmediate||t.setTimeout)(function(){throw e},0)},u="application/octet-stream",d=0,s=500,f=function(e){var o=function(){"string"==typeof e?n().revokeObjectURL(e):e.remove()};t.chrome?o():setTimeout(o,s)},v=function(t,e,n){e=[].concat(e);for(var o=e.length;o--;){var a=t["on"+e[o]];if("function"==typeof a)try{a.call(t,n||t)}catch(i){l(i)}}},m=function(e,l){var s,m,g,p=this,w=e.type,h=!1,y=function(){v(p,"writestart progress write writeend".split(" "))},S=function(){if((h||!s)&&(s=n().createObjectURL(e)),m)m.location.href=s;else{var o=t.open(s,"_blank");void 0==o&&"undefined"!=typeof safari&&(t.location.href=s)}p.readyState=p.DONE,y(),f(s)},b=function(t){return function(){return p.readyState!==p.DONE?t.apply(this,arguments):void 0}},O={create:!0,exclusive:!1};return p.readyState=p.INIT,l||(l="download"),a?(s=n().createObjectURL(e),o.href=s,o.download=l,i(o),p.readyState=p.DONE,y(),void f(s)):(t.chrome&&w&&w!==u&&(g=e.slice||e.webkitSlice,e=g.call(e,0,e.size,u),h=!0),r&&"download"!==l&&(l+=".download"),(w===u||r)&&(m=t),c?(d+=e.size,void c(t.TEMPORARY,d,b(function(t){t.root.getDirectory("saved",O,b(function(t){var n=function(){t.getFile(l,O,b(function(t){t.createWriter(b(function(n){n.onwriteend=function(e){m.location.href=t.toURL(),p.readyState=p.DONE,v(p,"writeend",e),f(t)},n.onerror=function(){var t=n.error;t.code!==t.ABORT_ERR&&S()},"writestart progress write abort".split(" ").forEach(function(t){n["on"+t]=p["on"+t]}),n.write(e),p.abort=function(){n.abort(),p.readyState=p.DONE},p.readyState=p.WRITING}),S)}),S)};t.getFile(l,{create:!1},b(function(t){t.remove(),n()}),b(function(t){t.code===t.NOT_FOUND_ERR?n():S()}))}),S)}),S)):void S())},g=m.prototype,p=function(t,e){return new m(t,e)};return g.abort=function(){var t=this;t.readyState=t.DONE,v(t,"abort")},g.readyState=g.INIT=0,g.WRITING=1,g.DONE=2,g.error=g.onwritestart=g.onprogress=g.onwrite=g.onabort=g.onerror=g.onwriteend=null,p}}("undefined"!=typeof self&&self||"undefined"!=typeof window&&window||this.content)}var e=t();return e}angular.module("nocca.utils").factory("noccaUtilsSaveAs",t)}(),function(){"use strict";function t(t,e,n){function o(){a().then(i).then(r)}function a(){return e({url:"http://localhost:3005/caches/package",method:"post"}).then(function(t){return{type:t.headers("Content-Type"),data:t.data}})}function i(t){return n.show({template:"<md-dialog nocca-utils-download-dialog></md-dialog>"}).then(function(e){return t.fileName=e,t},function(){n.hide()})}function r(e){var n=new Blob([JSON.stringify(e.data,null,4)],{type:e.type+";charset=utf-8;"});t(n,e.fileName)}var c={createPackageAndSave:o,createPackage:a,saveDialog:i};return c}angular.module("nocca.utils").factory("noccaUtilsDownload",t),t.$inject=["noccaUtilsSaveAs","$http","$mdDialog","localStorageService"]}(),function(){"use strict";function t(){function t(t,e,n){function o(){e.hide(n.get("download").filename)}function a(){e.hide(!1)}n.bind(t,"download",{filename:"caches.json"}),t.save=o,t.cancel=a}var e={restrict:"EA",templateUrl:"download-dialog.directive.html",controller:t};return t.$inject=["$scope","$mdDialog","localStorageService"],e}angular.module("nocca.utils").directive("noccaUtilsDownloadDialog",t)}();
//# sourceMappingURL=data:application/json;base64,