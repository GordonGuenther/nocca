/**
 * @license AngularJS v1.3.13
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
function mdMediaFactory(e,t,n){function r(e){var t=c[e];angular.isUndefined(t)&&(t=c[e]=i(e));var n=s[t];return angular.isUndefined(n)&&(n=o(t)),n}function i(t){return e.MEDIA[t]||("("!==t.charAt(0)?"("+t+")":t)}function o(e){var t=n.matchMedia(e);return t.addListener(a),s[t.media]=!!t.matches}function a(){var e=this;t.$evalAsync(function(){s[e.media]=!!e.matches})}var c={},s={};return r}!function(e,t,n){"use strict";function r(e,t){return t=t||Error,function(){var n,r,i=arguments[0],o="["+(e?e+":":"")+i+"] ",a=arguments[1],c=arguments;for(n=o+a.replace(/\{\d+\}/g,function(e){var t=+e.slice(1,-1);return t+2<c.length?ft(c[t+2]):e}),n=n+"\nhttp://errors.angularjs.org/1.3.13/"+(e?e+"/":"")+i,r=2;r<arguments.length;r++)n=n+(2==r?"?":"&")+"p"+(r-2)+"="+encodeURIComponent(ft(arguments[r]));return new t(n)}}function i(e){if(null==e||M(e))return!1;var t=e.length;return e.nodeType===gi&&t?!0:y(e)||li(e)||0===t||"number"==typeof t&&t>0&&t-1 in e}function o(e,t,n){var r,a;if(e)if(A(e))for(r in e)"prototype"==r||"length"==r||"name"==r||e.hasOwnProperty&&!e.hasOwnProperty(r)||t.call(n,e[r],r,e);else if(li(e)||i(e)){var c="object"!=typeof e;for(r=0,a=e.length;a>r;r++)(c||r in e)&&t.call(n,e[r],r,e)}else if(e.forEach&&e.forEach!==o)e.forEach(t,n,e);else for(r in e)e.hasOwnProperty(r)&&t.call(n,e[r],r,e);return e}function a(e){return Object.keys(e).sort()}function c(e,t,n){for(var r=a(e),i=0;i<r.length;i++)t.call(n,e[r[i]],r[i]);return r}function s(e){return function(t,n){e(n,t)}}function u(){return++si}function l(e,t){t?e.$$hashKey=t:delete e.$$hashKey}function d(e){for(var t=e.$$hashKey,n=1,r=arguments.length;r>n;n++){var i=arguments[n];if(i)for(var o=Object.keys(i),a=0,c=o.length;c>a;a++){var s=o[a];e[s]=i[s]}}return l(e,t),e}function f(e){return parseInt(e,10)}function m(e,t){return d(Object.create(e),t)}function p(){}function h(e){return e}function $(e){return function(){return e}}function g(e){return"undefined"==typeof e}function v(e){return"undefined"!=typeof e}function b(e){return null!==e&&"object"==typeof e}function y(e){return"string"==typeof e}function E(e){return"number"==typeof e}function w(e){return"[object Date]"===oi.call(e)}function A(e){return"function"==typeof e}function x(e){return"[object RegExp]"===oi.call(e)}function M(e){return e&&e.window===e}function C(e){return e&&e.$evalAsync&&e.$watch}function k(e){return"[object File]"===oi.call(e)}function T(e){return"[object FormData]"===oi.call(e)}function S(e){return"[object Blob]"===oi.call(e)}function N(e){return"boolean"==typeof e}function O(e){return e&&A(e.then)}function _(e){return!(!e||!(e.nodeName||e.prop&&e.attr&&e.find))}function D(e){var t,n={},r=e.split(",");for(t=0;t<r.length;t++)n[r[t]]=!0;return n}function H(e){return Wr(e.nodeName||e[0]&&e[0].nodeName)}function I(e,t){var n=e.indexOf(t);return n>=0&&e.splice(n,1),t}function R(e,t,n,r){if(M(e)||C(e))throw ai("cpws","Can't copy! Making copies of Window or Scope instances is not supported.");if(t){if(e===t)throw ai("cpi","Can't copy! Source and destination are identical.");if(n=n||[],r=r||[],b(e)){var i=n.indexOf(e);if(-1!==i)return r[i];n.push(e),r.push(t)}var a;if(li(e)){t.length=0;for(var c=0;c<e.length;c++)a=R(e[c],null,n,r),b(e[c])&&(n.push(e[c]),r.push(a)),t.push(a)}else{var s=t.$$hashKey;li(t)?t.length=0:o(t,function(e,n){delete t[n]});for(var u in e)e.hasOwnProperty(u)&&(a=R(e[u],null,n,r),b(e[u])&&(n.push(e[u]),r.push(a)),t[u]=a);l(t,s)}}else if(t=e,e)if(li(e))t=R(e,[],n,r);else if(w(e))t=new Date(e.getTime());else if(x(e))t=new RegExp(e.source,e.toString().match(/[^\/]*$/)[0]),t.lastIndex=e.lastIndex;else if(b(e)){var d=Object.create(Object.getPrototypeOf(e));t=R(e,d,n,r)}return t}function P(e,t){if(li(e)){t=t||[];for(var n=0,r=e.length;r>n;n++)t[n]=e[n]}else if(b(e)){t=t||{};for(var i in e)("$"!==i.charAt(0)||"$"!==i.charAt(1))&&(t[i]=e[i])}return t||e}function j(e,t){if(e===t)return!0;if(null===e||null===t)return!1;if(e!==e&&t!==t)return!0;var r,i,o,a=typeof e,c=typeof t;if(a==c&&"object"==a){if(!li(e)){if(w(e))return w(t)?j(e.getTime(),t.getTime()):!1;if(x(e)&&x(t))return e.toString()==t.toString();if(C(e)||C(t)||M(e)||M(t)||li(t))return!1;o={};for(i in e)if("$"!==i.charAt(0)&&!A(e[i])){if(!j(e[i],t[i]))return!1;o[i]=!0}for(i in t)if(!o.hasOwnProperty(i)&&"$"!==i.charAt(0)&&t[i]!==n&&!A(t[i]))return!1;return!0}if(!li(t))return!1;if((r=e.length)==t.length){for(i=0;r>i;i++)if(!j(e[i],t[i]))return!1;return!0}}return!1}function q(e,t,n){return e.concat(ni.call(t,n))}function V(e,t){return ni.call(e,t||0)}function F(e,t){var n=arguments.length>2?V(arguments,2):[];return!A(t)||t instanceof RegExp?t:n.length?function(){return arguments.length?t.apply(e,q(n,arguments,0)):t.apply(e,n)}:function(){return arguments.length?t.apply(e,arguments):t.call(e)}}function L(e,r){var i=r;return"string"==typeof e&&"$"===e.charAt(0)&&"$"===e.charAt(1)?i=n:M(r)?i="$WINDOW":r&&t===r?i="$DOCUMENT":C(r)&&(i="$SCOPE"),i}function U(e,t){return"undefined"==typeof e?n:(E(t)||(t=t?2:null),JSON.stringify(e,L,t))}function B(e){return y(e)?JSON.parse(e):e}function G(e){e=Qr(e).clone();try{e.empty()}catch(t){}var n=Qr("<div>").append(e).html();try{return e[0].nodeType===vi?Wr(n):n.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/,function(e,t){return"<"+Wr(t)})}catch(t){return Wr(n)}}function z(e){try{return decodeURIComponent(e)}catch(t){}}function W(e){var t,n,r={};return o((e||"").split("&"),function(e){if(e&&(t=e.replace(/\+/g,"%20").split("="),n=z(t[0]),v(n))){var i=v(t[1])?z(t[1]):!0;Yr.call(r,n)?li(r[n])?r[n].push(i):r[n]=[r[n],i]:r[n]=i}}),r}function Y(e){var t=[];return o(e,function(e,n){li(e)?o(e,function(e){t.push(X(n,!0)+(e===!0?"":"="+X(e,!0)))}):t.push(X(n,!0)+(e===!0?"":"="+X(e,!0)))}),t.length?t.join("&"):""}function K(e){return X(e,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function X(e,t){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%20/g,t?"%20":"+")}function J(e,t){var n,r,i=pi.length;for(e=Qr(e),r=0;i>r;++r)if(n=pi[r]+t,y(n=e.attr(n)))return n;return null}function Z(e,t){var n,r,i={};o(pi,function(t){var i=t+"app";!n&&e.hasAttribute&&e.hasAttribute(i)&&(n=e,r=e.getAttribute(i))}),o(pi,function(t){var i,o=t+"app";!n&&(i=e.querySelector("["+o.replace(":","\\:")+"]"))&&(n=i,r=i.getAttribute(o))}),n&&(i.strictDi=null!==J(n,"strict-di"),t(n,r?[r]:[],i))}function Q(n,r,i){b(i)||(i={});var a={strictDi:!1};i=d(a,i);var c=function(){if(n=Qr(n),n.injector()){var e=n[0]===t?"document":G(n);throw ai("btstrpd","App Already Bootstrapped with this Element '{0}'",e.replace(/</,"&lt;").replace(/>/,"&gt;"))}r=r||[],r.unshift(["$provide",function(e){e.value("$rootElement",n)}]),i.debugInfoEnabled&&r.push(["$compileProvider",function(e){e.debugInfoEnabled(!0)}]),r.unshift("ng");var o=Bt(r,i.strictDi);return o.invoke(["$rootScope","$rootElement","$compile","$injector",function(e,t,n,r){e.$apply(function(){t.data("$injector",r),n(t)(e)})}]),o},s=/^NG_ENABLE_DEBUG_INFO!/,u=/^NG_DEFER_BOOTSTRAP!/;return e&&s.test(e.name)&&(i.debugInfoEnabled=!0,e.name=e.name.replace(s,"")),e&&!u.test(e.name)?c():(e.name=e.name.replace(u,""),ci.resumeBootstrap=function(e){return o(e,function(e){r.push(e)}),c()},void(A(ci.resumeDeferredBootstrap)&&ci.resumeDeferredBootstrap()))}function et(){e.name="NG_ENABLE_DEBUG_INFO!"+e.name,e.location.reload()}function tt(e){var t=ci.element(e).injector();if(!t)throw ai("test","no injector found for element argument to getTestability");return t.get("$$testability")}function nt(e,t){return t=t||"_",e.replace(hi,function(e,n){return(n?t:"")+e.toLowerCase()})}function rt(){var t;$i||(ei=e.jQuery,ei&&ei.fn.on?(Qr=ei,d(ei.fn,{scope:Ri.scope,isolateScope:Ri.isolateScope,controller:Ri.controller,injector:Ri.injector,inheritedData:Ri.inheritedData}),t=ei.cleanData,ei.cleanData=function(e){var n;if(ui)ui=!1;else for(var r,i=0;null!=(r=e[i]);i++)n=ei._data(r,"events"),n&&n.$destroy&&ei(r).triggerHandler("$destroy");t(e)}):Qr=yt,ci.element=Qr,$i=!0)}function it(e,t,n){if(!e)throw ai("areq","Argument '{0}' is {1}",t||"?",n||"required");return e}function ot(e,t,n){return n&&li(e)&&(e=e[e.length-1]),it(A(e),t,"not a function, got "+(e&&"object"==typeof e?e.constructor.name||"Object":typeof e)),e}function at(e,t){if("hasOwnProperty"===e)throw ai("badname","hasOwnProperty is not a valid {0} name",t)}function ct(e,t,n){if(!t)return e;for(var r,i=t.split("."),o=e,a=i.length,c=0;a>c;c++)r=i[c],e&&(e=(o=e)[r]);return!n&&A(e)?F(o,e):e}function st(e){var t=e[0],n=e[e.length-1],r=[t];do{if(t=t.nextSibling,!t)break;r.push(t)}while(t!==n);return Qr(r)}function ut(){return Object.create(null)}function lt(e){function t(e,t,n){return e[t]||(e[t]=n())}var n=r("$injector"),i=r("ng"),o=t(e,"angular",Object);return o.$$minErr=o.$$minErr||r,t(o,"module",function(){var e={};return function(r,o,a){var c=function(e,t){if("hasOwnProperty"===e)throw i("badname","hasOwnProperty is not a valid {0} name",t)};return c(r,"module"),o&&e.hasOwnProperty(r)&&(e[r]=null),t(e,r,function(){function e(e,n,r,i){return i||(i=t),function(){return i[r||"push"]([e,n,arguments]),u}}if(!o)throw n("nomod","Module '{0}' is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.",r);var t=[],i=[],c=[],s=e("$injector","invoke","push",i),u={_invokeQueue:t,_configBlocks:i,_runBlocks:c,requires:o,name:r,provider:e("$provide","provider"),factory:e("$provide","factory"),service:e("$provide","service"),value:e("$provide","value"),constant:e("$provide","constant","unshift"),animation:e("$animateProvider","register"),filter:e("$filterProvider","register"),controller:e("$controllerProvider","register"),directive:e("$compileProvider","directive"),config:s,run:function(e){return c.push(e),this}};return a&&s(a),u})}})}function dt(e){var t=[];return JSON.stringify(e,function(e,n){if(n=L(e,n),b(n)){if(t.indexOf(n)>=0)return"<<already seen>>";t.push(n)}return n})}function ft(e){return"function"==typeof e?e.toString().replace(/ \{[\s\S]*$/,""):"undefined"==typeof e?"undefined":"string"!=typeof e?dt(e):e}function mt(t){d(t,{bootstrap:Q,copy:R,extend:d,equals:j,element:Qr,forEach:o,injector:Bt,noop:p,bind:F,toJson:U,fromJson:B,identity:h,isUndefined:g,isDefined:v,isString:y,isFunction:A,isObject:b,isNumber:E,isElement:_,isArray:li,version:wi,isDate:w,lowercase:Wr,uppercase:Kr,callbacks:{counter:0},getTestability:tt,$$minErr:r,$$csp:mi,reloadWithDebugInfo:et}),ti=lt(e);try{ti("ngLocale")}catch(n){ti("ngLocale",[]).provider("$locale",gn)}ti("ng",["ngLocale"],["$provide",function(e){e.provider({$$sanitizeUri:Kn}),e.provider("$compile",Jt).directive({a:So,input:zo,textarea:zo,form:Ho,script:Ia,select:ja,style:Va,option:qa,ngBind:Ko,ngBindHtml:Jo,ngBindTemplate:Xo,ngClass:Qo,ngClassEven:ta,ngClassOdd:ea,ngCloak:na,ngController:ra,ngForm:Io,ngHide:Sa,ngIf:aa,ngInclude:ca,ngInit:ua,ngNonBindable:Aa,ngPluralize:xa,ngRepeat:Ma,ngShow:Ta,ngStyle:Na,ngSwitch:Oa,ngSwitchWhen:_a,ngSwitchDefault:Da,ngOptions:Pa,ngTransclude:Ha,ngModel:ya,ngList:la,ngChange:Zo,pattern:La,ngPattern:La,required:Fa,ngRequired:Fa,minlength:Ba,ngMinlength:Ba,maxlength:Ua,ngMaxlength:Ua,ngValue:Yo,ngModelOptions:wa}).directive({ngInclude:sa}).directive(No).directive(ia),e.provider({$anchorScroll:Gt,$animate:zi,$browser:Yt,$cacheFactory:Kt,$controller:tn,$document:nn,$exceptionHandler:rn,$filter:cr,$interpolate:hn,$interval:$n,$http:dn,$httpBackend:mn,$location:On,$log:_n,$parse:Un,$rootScope:Yn,$q:Bn,$$q:Gn,$sce:Qn,$sceDelegate:Zn,$sniffer:er,$templateCache:Xt,$templateRequest:tr,$$testability:nr,$timeout:rr,$window:ar,$$rAF:Wn,$$asyncCallback:zt,$$jqLite:qt})}])}function pt(){return++xi}function ht(e){return e.replace(ki,function(e,t,n,r){return r?n.toUpperCase():n}).replace(Ti,"Moz$1")}function $t(e){return!_i.test(e)}function gt(e){var t=e.nodeType;return t===gi||!t||t===yi}function vt(e,t){var n,r,i,a,c=t.createDocumentFragment(),s=[];if($t(e))s.push(t.createTextNode(e));else{for(n=n||c.appendChild(t.createElement("div")),r=(Di.exec(e)||["",""])[1].toLowerCase(),i=Ii[r]||Ii._default,n.innerHTML=i[1]+e.replace(Hi,"<$1></$2>")+i[2],a=i[0];a--;)n=n.lastChild;s=q(s,n.childNodes),n=c.firstChild,n.textContent=""}return c.textContent="",c.innerHTML="",o(s,function(e){c.appendChild(e)}),c}function bt(e,n){n=n||t;var r;return(r=Oi.exec(e))?[n.createElement(r[1])]:(r=vt(e,n))?r.childNodes:[]}function yt(e){if(e instanceof yt)return e;var t;if(y(e)&&(e=di(e),t=!0),!(this instanceof yt)){if(t&&"<"!=e.charAt(0))throw Ni("nosel","Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element");return new yt(e)}t?Nt(this,bt(e)):Nt(this,e)}function Et(e){return e.cloneNode(!0)}function wt(e,t){if(t||xt(e),e.querySelectorAll)for(var n=e.querySelectorAll("*"),r=0,i=n.length;i>r;r++)xt(n[r])}function At(e,t,n,r){if(v(r))throw Ni("offargs","jqLite#off() does not support the `selector` argument");var i=Mt(e),a=i&&i.events,c=i&&i.handle;if(c)if(t)o(t.split(" "),function(t){if(v(n)){var r=a[t];if(I(r||[],n),r&&r.length>0)return}Ci(e,t,c),delete a[t]});else for(t in a)"$destroy"!==t&&Ci(e,t,c),delete a[t]}function xt(e,t){var r=e.ng339,i=r&&Ai[r];if(i){if(t)return void delete i.data[t];i.handle&&(i.events.$destroy&&i.handle({},"$destroy"),At(e)),delete Ai[r],e.ng339=n}}function Mt(e,t){var r=e.ng339,i=r&&Ai[r];return t&&!i&&(e.ng339=r=pt(),i=Ai[r]={events:{},data:{},handle:n}),i}function Ct(e,t,n){if(gt(e)){var r=v(n),i=!r&&t&&!b(t),o=!t,a=Mt(e,!i),c=a&&a.data;if(r)c[t]=n;else{if(o)return c;if(i)return c&&c[t];d(c,t)}}}function kt(e,t){return e.getAttribute?(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+t+" ")>-1:!1}function Tt(e,t){t&&e.setAttribute&&o(t.split(" "),function(t){e.setAttribute("class",di((" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").replace(" "+di(t)+" "," ")))})}function St(e,t){if(t&&e.setAttribute){var n=(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ");o(t.split(" "),function(e){e=di(e),-1===n.indexOf(" "+e+" ")&&(n+=e+" ")}),e.setAttribute("class",di(n))}}function Nt(e,t){if(t)if(t.nodeType)e[e.length++]=t;else{var n=t.length;if("number"==typeof n&&t.window!==t){if(n)for(var r=0;n>r;r++)e[e.length++]=t[r]}else e[e.length++]=t}}function Ot(e,t){return _t(e,"$"+(t||"ngController")+"Controller")}function _t(e,t,r){e.nodeType==yi&&(e=e.documentElement);for(var i=li(t)?t:[t];e;){for(var o=0,a=i.length;a>o;o++)if((r=Qr.data(e,i[o]))!==n)return r;e=e.parentNode||e.nodeType===Ei&&e.host}}function Dt(e){for(wt(e,!0);e.firstChild;)e.removeChild(e.firstChild)}function Ht(e,t){t||wt(e);var n=e.parentNode;n&&n.removeChild(e)}function It(t,n){n=n||e,"complete"===n.document.readyState?n.setTimeout(t):Qr(n).on("load",t)}function Rt(e,t){var n=Pi[t.toLowerCase()];return n&&ji[H(e)]&&n}function Pt(e,t){var n=e.nodeName;return("INPUT"===n||"TEXTAREA"===n)&&qi[t]}function jt(e,t){var n=function(n,r){n.isDefaultPrevented=function(){return n.defaultPrevented};var i=t[r||n.type],o=i?i.length:0;if(o){if(g(n.immediatePropagationStopped)){var a=n.stopImmediatePropagation;n.stopImmediatePropagation=function(){n.immediatePropagationStopped=!0,n.stopPropagation&&n.stopPropagation(),a&&a.call(n)}}n.isImmediatePropagationStopped=function(){return n.immediatePropagationStopped===!0},o>1&&(i=P(i));for(var c=0;o>c;c++)n.isImmediatePropagationStopped()||i[c].call(e,n)}};return n.elem=e,n}function qt(){this.$get=function(){return d(yt,{hasClass:function(e,t){return e.attr&&(e=e[0]),kt(e,t)},addClass:function(e,t){return e.attr&&(e=e[0]),St(e,t)},removeClass:function(e,t){return e.attr&&(e=e[0]),Tt(e,t)}})}}function Vt(e,t){var n=e&&e.$$hashKey;if(n)return"function"==typeof n&&(n=e.$$hashKey()),n;var r=typeof e;return n="function"==r||"object"==r&&null!==e?e.$$hashKey=r+":"+(t||u)():r+":"+e}function Ft(e,t){if(t){var n=0;this.nextUid=function(){return++n}}o(e,this.put,this)}function Lt(e){var t=e.toString().replace(Ui,""),n=t.match(Vi);return n?"function("+(n[1]||"").replace(/[\s\r\n]+/," ")+")":"fn"}function Ut(e,t,n){var r,i,a,c;if("function"==typeof e){if(!(r=e.$inject)){if(r=[],e.length){if(t)throw y(n)&&n||(n=e.name||Lt(e)),Bi("strictdi","{0} is not using explicit annotation and cannot be invoked in strict mode",n);i=e.toString().replace(Ui,""),a=i.match(Vi),o(a[1].split(Fi),function(e){e.replace(Li,function(e,t,n){r.push(n)})})}e.$inject=r}}else li(e)?(c=e.length-1,ot(e[c],"fn"),r=e.slice(0,c)):ot(e,"fn",!0);return r}function Bt(e,t){function r(e){return function(t,n){return b(t)?void o(t,s(e)):e(t,n)}}function i(e,t){if(at(e,"service"),(A(t)||li(t))&&(t=C.instantiate(t)),!t.$get)throw Bi("pget","Provider '{0}' must define $get factory method.",e);return M[e+E]=t}function a(e,t){return function(){var n=T.invoke(t,this);if(g(n))throw Bi("undef","Provider '{0}' must return a value from $get factory method.",e);return n}}function c(e,t,n){return i(e,{$get:n!==!1?a(e,t):t})}function u(e,t){return c(e,["$injector",function(e){return e.instantiate(t)}])}function l(e,t){return c(e,$(t),!1)}function d(e,t){at(e,"constant"),M[e]=t,k[e]=t}function f(e,t){var n=C.get(e+E),r=n.$get;n.$get=function(){var e=T.invoke(r,n);return T.invoke(t,null,{$delegate:e})}}function m(e){var t,n=[];return o(e,function(e){function r(e){var t,n;for(t=0,n=e.length;n>t;t++){var r=e[t],i=C.get(r[0]);i[r[1]].apply(i,r[2])}}if(!x.get(e)){x.put(e,!0);try{y(e)?(t=ti(e),n=n.concat(m(t.requires)).concat(t._runBlocks),r(t._invokeQueue),r(t._configBlocks)):A(e)?n.push(C.invoke(e)):li(e)?n.push(C.invoke(e)):ot(e,"module")}catch(i){throw li(e)&&(e=e[e.length-1]),i.message&&i.stack&&-1==i.stack.indexOf(i.message)&&(i=i.message+"\n"+i.stack),Bi("modulerr","Failed to instantiate module {0} due to:\n{1}",e,i.stack||i.message||i)}}}),n}function h(e,n){function r(t,r){if(e.hasOwnProperty(t)){if(e[t]===v)throw Bi("cdep","Circular dependency found: {0}",t+" <- "+w.join(" <- "));return e[t]}try{return w.unshift(t),e[t]=v,e[t]=n(t,r)}catch(i){throw e[t]===v&&delete e[t],i}finally{w.shift()}}function i(e,n,i,o){"string"==typeof i&&(o=i,i=null);var a,c,s,u=[],l=Bt.$$annotate(e,t,o);for(c=0,a=l.length;a>c;c++){if(s=l[c],"string"!=typeof s)throw Bi("itkn","Incorrect injection token! Expected service name as string, got {0}",s);u.push(i&&i.hasOwnProperty(s)?i[s]:r(s,o))}return li(e)&&(e=e[a]),e.apply(n,u)}function o(e,t,n){var r=Object.create((li(e)?e[e.length-1]:e).prototype||null),o=i(e,r,t,n);return b(o)||A(o)?o:r}return{invoke:i,instantiate:o,get:r,annotate:Bt.$$annotate,has:function(t){return M.hasOwnProperty(t+E)||e.hasOwnProperty(t)}}}t=t===!0;var v={},E="Provider",w=[],x=new Ft([],!0),M={$provide:{provider:r(i),factory:r(c),service:r(u),value:r(l),constant:r(d),decorator:f}},C=M.$injector=h(M,function(e,t){throw ci.isString(t)&&w.push(t),Bi("unpr","Unknown provider: {0}",w.join(" <- "))}),k={},T=k.$injector=h(k,function(e,t){var r=C.get(e+E,t);return T.invoke(r.$get,r,n,e)});return o(m(e),function(e){T.invoke(e||p)}),T}function Gt(){var e=!0;this.disableAutoScrolling=function(){e=!1},this.$get=["$window","$location","$rootScope",function(t,n,r){function i(e){var t=null;return Array.prototype.some.call(e,function(e){return"a"===H(e)?(t=e,!0):void 0}),t}function o(){var e=c.yOffset;if(A(e))e=e();else if(_(e)){var n=e[0],r=t.getComputedStyle(n);e="fixed"!==r.position?0:n.getBoundingClientRect().bottom}else E(e)||(e=0);return e}function a(e){if(e){e.scrollIntoView();var n=o();if(n){var r=e.getBoundingClientRect().top;t.scrollBy(0,r-n)}}else t.scrollTo(0,0)}function c(){var e,t=n.hash();t?(e=s.getElementById(t))?a(e):(e=i(s.getElementsByName(t)))?a(e):"top"===t&&a(null):a(null)}var s=t.document;return e&&r.$watch(function(){return n.hash()},function(e,t){(e!==t||""!==e)&&It(function(){r.$evalAsync(c)})}),c}]}function zt(){this.$get=["$$rAF","$timeout",function(e,t){return e.supported?function(t){return e(t)}:function(e){return t(e,0,!1)}}]}function Wt(e,t,r,i){function a(e){try{e.apply(null,V(arguments,1))}finally{if(A--,0===A)for(;x.length;)try{x.pop()()}catch(t){r.error(t)}}}function c(e){var t=e.indexOf("#");return-1===t?"":e.substr(t+1)}function s(e,t){!function n(){o(C,function(e){e()}),M=t(n,e)}()}function u(){l(),d()}function l(){k=e.history.state,k=g(k)?null:k,j(k,H)&&(k=H),H=k}function d(){(S!==m.url()||T!==k)&&(S=m.url(),T=k,o(_,function(e){e(m.url(),k)}))}function f(e){try{return decodeURIComponent(e)}catch(t){return e}}var m=this,h=t[0],$=e.location,v=e.history,b=e.setTimeout,E=e.clearTimeout,w={};m.isMock=!1;var A=0,x=[];m.$$completeOutstandingRequest=a,m.$$incOutstandingRequestCount=function(){A++},m.notifyWhenNoOutstandingRequests=function(e){o(C,function(e){e()}),0===A?e():x.push(e)};var M,C=[];m.addPollFn=function(e){return g(M)&&s(100,b),C.push(e),e};var k,T,S=$.href,N=t.find("base"),O=null;l(),T=k,m.url=function(t,n,r){if(g(r)&&(r=null),$!==e.location&&($=e.location),v!==e.history&&(v=e.history),t){var o=T===r;if(S===t&&(!i.history||o))return m;var a=S&&wn(S)===wn(t);return S=t,T=r,!i.history||a&&o?(a||(O=t),n?$.replace(t):a?$.hash=c(t):$.href=t):(v[n?"replaceState":"pushState"](r,"",t),l(),T=k),m}return O||$.href.replace(/%27/g,"'")},m.state=function(){return k};var _=[],D=!1,H=null;m.onUrlChange=function(t){return D||(i.history&&Qr(e).on("popstate",u),Qr(e).on("hashchange",u),D=!0),_.push(t),t},m.$$checkUrlChange=d,m.baseHref=function(){var e=N.attr("href");return e?e.replace(/^(https?\:)?\/\/[^\/]*/,""):""};var I={},R="",P=m.baseHref();m.cookies=function(e,t){var i,o,a,c,s;if(!e){if(h.cookie!==R)for(R=h.cookie,o=R.split("; "),I={},c=0;c<o.length;c++)a=o[c],s=a.indexOf("="),s>0&&(e=f(a.substring(0,s)),I[e]===n&&(I[e]=f(a.substring(s+1))));return I}t===n?h.cookie=encodeURIComponent(e)+"=;path="+P+";expires=Thu, 01 Jan 1970 00:00:00 GMT":y(t)&&(i=(h.cookie=encodeURIComponent(e)+"="+encodeURIComponent(t)+";path="+P).length+1,i>4096&&r.warn("Cookie '"+e+"' possibly not set or overflowed because it was too large ("+i+" > 4096 bytes)!"))},m.defer=function(e,t){var n;return A++,n=b(function(){delete w[n],a(e)},t||0),w[n]=!0,n},m.defer.cancel=function(e){return w[e]?(delete w[e],E(e),a(p),!0):!1}}function Yt(){this.$get=["$window","$log","$sniffer","$document",function(e,t,n,r){return new Wt(e,r,t,n)}]}function Kt(){this.$get=function(){function e(e,n){function i(e){e!=f&&(m?m==e&&(m=e.n):m=e,o(e.n,e.p),o(e,f),f=e,f.n=null)}function o(e,t){e!=t&&(e&&(e.p=t),t&&(t.n=e))}if(e in t)throw r("$cacheFactory")("iid","CacheId '{0}' is already taken!",e);var a=0,c=d({},n,{id:e}),s={},u=n&&n.capacity||Number.MAX_VALUE,l={},f=null,m=null;return t[e]={put:function(e,t){if(u<Number.MAX_VALUE){var n=l[e]||(l[e]={key:e});i(n)}if(!g(t))return e in s||a++,s[e]=t,a>u&&this.remove(m.key),t},get:function(e){if(u<Number.MAX_VALUE){var t=l[e];if(!t)return;i(t)}return s[e]},remove:function(e){if(u<Number.MAX_VALUE){var t=l[e];if(!t)return;t==f&&(f=t.p),t==m&&(m=t.n),o(t.n,t.p),delete l[e]}delete s[e],a--},removeAll:function(){s={},a=0,l={},f=m=null},destroy:function(){s=null,c=null,l=null,delete t[e]},info:function(){return d({},c,{size:a})}}}var t={};return e.info=function(){var e={};return o(t,function(t,n){e[n]=t.info()}),e},e.get=function(e){return t[e]},e}}function Xt(){this.$get=["$cacheFactory",function(e){return e("templates")}]}function Jt(e,r){function i(e,t){var n=/^\s*([@&]|=(\*?))(\??)\s*(\w*)\s*$/,r={};return o(e,function(e,i){var o=e.match(n);if(!o)throw Wi("iscp","Invalid isolate scope definition for directive '{0}'. Definition: {... {1}: '{2}' ...}",t,i,e);r[i]={mode:o[1][0],collection:"*"===o[2],optional:"?"===o[3],attrName:o[4]||i}}),r}var a={},c="Directive",u=/^\s*directive\:\s*([\w\-]+)\s+(.*)$/,l=/(([\w\-]+)(?:\:([^;]+))?;?)/,f=D("ngSrc,ngSrcset,src,srcset"),g=/^(?:(\^\^?)?(\?)?(\^\^?)?)?/,E=/^(on[a-z]+|formaction)$/;this.directive=function x(t,n){return at(t,"directive"),y(t)?(it(n,"directiveFactory"),a.hasOwnProperty(t)||(a[t]=[],e.factory(t+c,["$injector","$exceptionHandler",function(e,n){var r=[];return o(a[t],function(o,a){try{var c=e.invoke(o);A(c)?c={compile:$(c)}:!c.compile&&c.link&&(c.compile=$(c.link)),c.priority=c.priority||0,c.index=a,c.name=c.name||t,c.require=c.require||c.controller&&c.name,c.restrict=c.restrict||"EA",b(c.scope)&&(c.$$isolateBindings=i(c.scope,c.name)),r.push(c)}catch(s){n(s)}}),r}])),a[t].push(n)):o(t,s(x)),this},this.aHrefSanitizationWhitelist=function(e){return v(e)?(r.aHrefSanitizationWhitelist(e),this):r.aHrefSanitizationWhitelist()},this.imgSrcSanitizationWhitelist=function(e){return v(e)?(r.imgSrcSanitizationWhitelist(e),this):r.imgSrcSanitizationWhitelist()};var w=!0;this.debugInfoEnabled=function(e){return v(e)?(w=e,this):w},this.$get=["$injector","$interpolate","$exceptionHandler","$templateRequest","$parse","$controller","$rootScope","$document","$sce","$animate","$$sanitizeUri",function(e,r,i,s,$,v,x,M,k,T,S){function N(e,t){try{e.addClass(t)}catch(n){}}function O(e,t,n,r,i){e instanceof Qr||(e=Qr(e)),o(e,function(t,n){t.nodeType==vi&&t.nodeValue.match(/\S+/)&&(e[n]=Qr(t).wrap("<span></span>").parent()[0])});var a=D(e,t,e,n,r,i);O.$$addScopeClass(e);var c=null;return function(t,n,r){it(t,"scope"),r=r||{};var i=r.parentBoundTranscludeFn,o=r.transcludeControllers,s=r.futureParentElement;i&&i.$$boundTransclude&&(i=i.$$boundTransclude),c||(c=_(s));var u;if(u="html"!==c?Qr(Z(c,Qr("<div>").append(e).html())):n?Ri.clone.call(e):e,o)for(var l in o)u.data("$"+l+"Controller",o[l].instance);return O.$$addScopeInfo(u,t),n&&n(u,t),a&&a(t,u,u,i),u}}function _(e){var t=e&&e[0];return t&&"foreignobject"!==H(t)&&t.toString().match(/SVG/)?"svg":"html"}function D(e,t,r,i,o,a){function c(e,r,i,o){var a,c,s,u,l,d,f,m,$;if(p){var g=r.length;for($=new Array(g),l=0;l<h.length;l+=3)f=h[l],$[f]=r[f]}else $=r;for(l=0,d=h.length;d>l;)s=$[h[l++]],a=h[l++],c=h[l++],a?(a.scope?(u=e.$new(),O.$$addScopeInfo(Qr(s),u)):u=e,m=a.transcludeOnThisElement?R(e,a.transclude,o,a.elementTranscludeOnThisElement):!a.templateOnThisElement&&o?o:!o&&t?R(e,t):null,a(c,u,s,i,m)):c&&c(e,s.childNodes,n,o)}for(var s,u,l,d,f,m,p,h=[],$=0;$<e.length;$++)s=new at,u=P(e[$],[],s,0===$?i:n,o),l=u.length?L(u,e[$],s,t,r,null,[],[],a):null,l&&l.scope&&O.$$addScopeClass(s.$$element),f=l&&l.terminal||!(d=e[$].childNodes)||!d.length?null:D(d,l?(l.transcludeOnThisElement||!l.templateOnThisElement)&&l.transclude:t),(l||f)&&(h.push($,l,f),m=!0,p=p||l),a=null;return m?c:null}function R(e,t,n){var r=function(r,i,o,a,c){return r||(r=e.$new(!1,c),r.$$transcluded=!0),t(r,i,{parentBoundTranscludeFn:n,transcludeControllers:o,futureParentElement:a})};return r}function P(e,t,n,r,i){var o,a,c=e.nodeType,s=n.$attr;switch(c){case gi:B(t,Zt(H(e)),"E",r,i);for(var d,f,m,p,h,$,g=e.attributes,v=0,E=g&&g.length;E>v;v++){var w=!1,A=!1;d=g[v],f=d.name,h=di(d.value),p=Zt(f),($=dt.test(p))&&(f=f.replace(Yi,"").substr(8).replace(/_(.)/g,function(e,t){return t.toUpperCase()}));var x=p.replace(/(Start|End)$/,"");z(x)&&p===x+"Start"&&(w=f,A=f.substr(0,f.length-5)+"end",f=f.substr(0,f.length-6)),m=Zt(f.toLowerCase()),s[m]=f,($||!n.hasOwnProperty(m))&&(n[m]=h,Rt(e,m)&&(n[m]=!0)),et(e,t,h,m,$),B(t,m,"A",r,i,w,A)}if(a=e.className,b(a)&&(a=a.animVal),y(a)&&""!==a)for(;o=l.exec(a);)m=Zt(o[2]),B(t,m,"C",r,i)&&(n[m]=di(o[3])),a=a.substr(o.index+o[0].length);break;case vi:J(t,e.nodeValue);break;case bi:try{o=u.exec(e.nodeValue),o&&(m=Zt(o[1]),B(t,m,"M",r,i)&&(n[m]=di(o[2])))}catch(M){}}return t.sort(K),t}function q(e,t,n){var r=[],i=0;if(t&&e.hasAttribute&&e.hasAttribute(t)){do{if(!e)throw Wi("uterdir","Unterminated attribute, found '{0}' but no matching '{1}' found.",t,n);e.nodeType==gi&&(e.hasAttribute(t)&&i++,e.hasAttribute(n)&&i--),r.push(e),e=e.nextSibling}while(i>0)}else r.push(e);return Qr(r)}function F(e,t,n){return function(r,i,o,a,c){return i=q(i[0],t,n),e(r,i,o,a,c)}}function L(e,a,c,s,u,l,d,f,m){function p(e,t,n,r){e&&(n&&(e=F(e,n,r)),e.require=M.require,e.directiveName=k,(H===M||M.$$isolateScope)&&(e=rt(e,{isolateScope:!0})),d.push(e)),t&&(n&&(t=F(t,n,r)),t.require=M.require,t.directiveName=k,(H===M||M.$$isolateScope)&&(t=rt(t,{isolateScope:!0})),f.push(t))}function h(e,t,n,r){var i,a,c="data",s=!1,u=n;if(y(t)){if(a=t.match(g),t=t.substring(a[0].length),a[3]&&(a[1]?a[3]=null:a[1]=a[3]),"^"===a[1]?c="inheritedData":"^^"===a[1]&&(c="inheritedData",u=n.parent()),"?"===a[2]&&(s=!0),i=null,r&&"data"===c&&(i=r[t])&&(i=i.instance),i=i||u[c]("$"+t+"Controller"),!i&&!s)throw Wi("ctreq","Controller '{0}', required by directive '{1}', can't be found!",t,e);return i||null}return li(t)&&(i=[],o(t,function(t){i.push(h(e,t,n,r))})),i}function E(e,t,i,s,u){function l(e,t,r){var i;return C(e)||(r=t,t=e,e=n),z&&(i=E),r||(r=z?A.parent():A),u(e,t,i,r,S)}var m,p,g,b,y,E,w,A,M;if(a===i?(M=c,A=c.$$element):(A=Qr(i),M=new at(A,c)),H&&(y=t.$new(!0)),u&&(w=l,w.$$boundTransclude=u),D&&(x={},E={},o(D,function(e){var n,r={$scope:e===H||e.$$isolateScope?y:t,$element:A,$attrs:M,$transclude:w};b=e.controller,"@"==b&&(b=M[e.name]),n=v(b,r,!0,e.controllerAs),E[e.name]=n,z||A.data("$"+e.name+"Controller",n.instance),x[e.name]=n})),H){O.$$addScopeInfo(A,y,!0,!(I&&(I===H||I===H.$$originalDirective))),O.$$addScopeClass(A,!0);var k=x&&x[H.name],T=y;k&&k.identifier&&H.bindToController===!0&&(T=k.instance),o(y.$$isolateBindings=H.$$isolateBindings,function(e,n){var i,o,a,c,s=e.attrName,u=e.optional,l=e.mode;switch(l){case"@":M.$observe(s,function(e){T[n]=e}),M.$$observers[s].$$scope=t,M[s]&&(T[n]=r(M[s])(t));break;case"=":if(u&&!M[s])return;o=$(M[s]),c=o.literal?j:function(e,t){return e===t||e!==e&&t!==t},a=o.assign||function(){throw i=T[n]=o(t),Wi("nonassign","Expression '{0}' used with directive '{1}' is non-assignable!",M[s],H.name)},i=T[n]=o(t);var d=function(e){return c(e,T[n])||(c(e,i)?a(t,e=T[n]):T[n]=e),i=e};d.$stateful=!0;var f;f=e.collection?t.$watchCollection(M[s],d):t.$watch($(M[s],d),null,o.literal),y.$on("$destroy",f);break;case"&":o=$(M[s]),T[n]=function(e){return o(t,e)}}})}for(x&&(o(x,function(e){e()}),x=null),m=0,p=d.length;p>m;m++)g=d[m],ot(g,g.isolateScope?y:t,A,M,g.require&&h(g.directiveName,g.require,A,E),w);var S=t;for(H&&(H.template||null===H.templateUrl)&&(S=y),e&&e(S,i.childNodes,n,u),m=f.length-1;m>=0;m--)g=f[m],ot(g,g.isolateScope?y:t,A,M,g.require&&h(g.directiveName,g.require,A,E),w)}m=m||{};for(var w,x,M,k,T,S,N,_=-Number.MAX_VALUE,D=m.controllerDirectives,H=m.newIsolateScopeDirective,I=m.templateDirective,R=m.nonTlbTranscludeDirective,L=!1,B=!1,z=m.hasElementTranscludeDirective,K=c.$$element=Qr(a),J=l,Q=s,et=0,nt=e.length;nt>et;et++){M=e[et];var it=M.$$start,ct=M.$$end;if(it&&(K=q(a,it,ct)),T=n,_>M.priority)break;if((N=M.scope)&&(M.templateUrl||(b(N)?(X("new/isolated scope",H||w,M,K),H=M):X("new/isolated scope",H,M,K)),w=w||M),k=M.name,!M.templateUrl&&M.controller&&(N=M.controller,D=D||{},X("'"+k+"' controller",D[k],M,K),D[k]=M),(N=M.transclude)&&(L=!0,M.$$tlb||(X("transclusion",R,M,K),R=M),"element"==N?(z=!0,_=M.priority,T=K,K=c.$$element=Qr(t.createComment(" "+k+": "+c[k]+" ")),a=K[0],tt(u,V(T),a),Q=O(T,s,_,J&&J.name,{nonTlbTranscludeDirective:R})):(T=Qr(Et(a)).contents(),K.empty(),Q=O(T,s))),M.template)if(B=!0,X("template",I,M,K),I=M,N=A(M.template)?M.template(K,c):M.template,N=lt(N),M.replace){if(J=M,T=$t(N)?[]:en(Z(M.templateNamespace,di(N))),a=T[0],1!=T.length||a.nodeType!==gi)throw Wi("tplrt","Template for directive '{0}' must have exactly one root element. {1}",k,"");tt(u,K,a);var st={$attr:{}},ut=P(a,[],st),dt=e.splice(et+1,e.length-(et+1));H&&U(ut),e=e.concat(ut).concat(dt),W(c,st),nt=e.length}else K.html(N);if(M.templateUrl)B=!0,X("template",I,M,K),I=M,M.replace&&(J=M),E=Y(e.splice(et,e.length-et),K,c,u,L&&Q,d,f,{controllerDirectives:D,newIsolateScopeDirective:H,templateDirective:I,nonTlbTranscludeDirective:R}),nt=e.length;else if(M.compile)try{S=M.compile(K,c,Q),A(S)?p(null,S,it,ct):S&&p(S.pre,S.post,it,ct)}catch(ft){i(ft,G(K))}M.terminal&&(E.terminal=!0,_=Math.max(_,M.priority))}return E.scope=w&&w.scope===!0,E.transcludeOnThisElement=L,E.elementTranscludeOnThisElement=z,E.templateOnThisElement=B,E.transclude=Q,m.hasElementTranscludeDirective=z,E
}function U(e){for(var t=0,n=e.length;n>t;t++)e[t]=m(e[t],{$$isolateScope:!0})}function B(t,r,o,s,u,l,d){if(r===u)return null;var f=null;if(a.hasOwnProperty(r))for(var p,h=e.get(r+c),$=0,g=h.length;g>$;$++)try{p=h[$],(s===n||s>p.priority)&&-1!=p.restrict.indexOf(o)&&(l&&(p=m(p,{$$start:l,$$end:d})),t.push(p),f=p)}catch(v){i(v)}return f}function z(t){if(a.hasOwnProperty(t))for(var n,r=e.get(t+c),i=0,o=r.length;o>i;i++)if(n=r[i],n.multiElement)return!0;return!1}function W(e,t){var n=t.$attr,r=e.$attr,i=e.$$element;o(e,function(r,i){"$"!=i.charAt(0)&&(t[i]&&t[i]!==r&&(r+=("style"===i?";":" ")+t[i]),e.$set(i,r,!0,n[i]))}),o(t,function(t,o){"class"==o?(N(i,t),e["class"]=(e["class"]?e["class"]+" ":"")+t):"style"==o?(i.attr("style",i.attr("style")+";"+t),e.style=(e.style?e.style+";":"")+t):"$"==o.charAt(0)||e.hasOwnProperty(o)||(e[o]=t,r[o]=n[o])})}function Y(e,t,n,r,i,a,c,u){var l,d,f=[],p=t[0],h=e.shift(),$=m(h,{templateUrl:null,transclude:null,replace:null,$$originalDirective:h}),g=A(h.templateUrl)?h.templateUrl(t,n):h.templateUrl,v=h.templateNamespace;return t.empty(),s(k.getTrustedResourceUrl(g)).then(function(s){var m,y,E,w;if(s=lt(s),h.replace){if(E=$t(s)?[]:en(Z(v,di(s))),m=E[0],1!=E.length||m.nodeType!==gi)throw Wi("tplrt","Template for directive '{0}' must have exactly one root element. {1}",h.name,g);y={$attr:{}},tt(r,t,m);var A=P(m,[],y);b(h.scope)&&U(A),e=A.concat(e),W(n,y)}else m=p,t.html(s);for(e.unshift($),l=L(e,m,n,i,t,h,a,c,u),o(r,function(e,n){e==m&&(r[n]=t[0])}),d=D(t[0].childNodes,i);f.length;){var x=f.shift(),M=f.shift(),C=f.shift(),k=f.shift(),T=t[0];if(!x.$$destroyed){if(M!==p){var S=M.className;u.hasElementTranscludeDirective&&h.replace||(T=Et(m)),tt(C,Qr(M),T),N(Qr(T),S)}w=l.transcludeOnThisElement?R(x,l.transclude,k):k,l(d,x,T,r,w)}}f=null}),function(e,t,n,r,i){var o=i;t.$$destroyed||(f?f.push(t,n,r,o):(l.transcludeOnThisElement&&(o=R(t,l.transclude,i)),l(d,t,n,r,o)))}}function K(e,t){var n=t.priority-e.priority;return 0!==n?n:e.name!==t.name?e.name<t.name?-1:1:e.index-t.index}function X(e,t,n,r){if(t)throw Wi("multidir","Multiple directives [{0}, {1}] asking for {2} on: {3}",t.name,n.name,e,G(r))}function J(e,t){var n=r(t,!0);n&&e.push({priority:0,compile:function(e){var t=e.parent(),r=!!t.length;return r&&O.$$addBindingClass(t),function(e,t){var i=t.parent();r||O.$$addBindingClass(i),O.$$addBindingInfo(i,n.expressions),e.$watch(n,function(e){t[0].nodeValue=e})}}})}function Z(e,n){switch(e=Wr(e||"html")){case"svg":case"math":var r=t.createElement("div");return r.innerHTML="<"+e+">"+n+"</"+e+">",r.childNodes[0].childNodes;default:return n}}function Q(e,t){if("srcdoc"==t)return k.HTML;var n=H(e);return"xlinkHref"==t||"form"==n&&"action"==t||"img"!=n&&("src"==t||"ngSrc"==t)?k.RESOURCE_URL:void 0}function et(e,t,n,i,o){var a=Q(e,i);o=f[i]||o;var c=r(n,!0,a,o);if(c){if("multiple"===i&&"select"===H(e))throw Wi("selmulti","Binding to the 'multiple' attribute is not supported. Element: {0}",G(e));t.push({priority:100,compile:function(){return{pre:function(e,t,s){var u=s.$$observers||(s.$$observers={});if(E.test(i))throw Wi("nodomevents","Interpolations for HTML DOM event attributes are disallowed.  Please use the ng- versions (such as ng-click instead of onclick) instead.");var l=s[i];l!==n&&(c=l&&r(l,!0,a,o),n=l),c&&(s[i]=c(e),(u[i]||(u[i]=[])).$$inter=!0,(s.$$observers&&s.$$observers[i].$$scope||e).$watch(c,function(e,t){"class"===i&&e!=t?s.$updateClass(e,t):s.$set(i,e)}))}}}})}}function tt(e,n,r){var i,o,a=n[0],c=n.length,s=a.parentNode;if(e)for(i=0,o=e.length;o>i;i++)if(e[i]==a){e[i++]=r;for(var u=i,l=u+c-1,d=e.length;d>u;u++,l++)d>l?e[u]=e[l]:delete e[u];e.length-=c-1,e.context===a&&(e.context=r);break}s&&s.replaceChild(r,a);var f=t.createDocumentFragment();f.appendChild(a),Qr(r).data(Qr(a).data()),ei?(ui=!0,ei.cleanData([a])):delete Qr.cache[a[Qr.expando]];for(var m=1,p=n.length;p>m;m++){var h=n[m];Qr(h).remove(),f.appendChild(h),delete n[m]}n[0]=r,n.length=1}function rt(e,t){return d(function(){return e.apply(null,arguments)},e,t)}function ot(e,t,n,r,o,a){try{e(t,n,r,o,a)}catch(c){i(c,G(n))}}var at=function(e,t){if(t){var n,r,i,o=Object.keys(t);for(n=0,r=o.length;r>n;n++)i=o[n],this[i]=t[i]}else this.$attr={};this.$$element=e};at.prototype={$normalize:Zt,$addClass:function(e){e&&e.length>0&&T.addClass(this.$$element,e)},$removeClass:function(e){e&&e.length>0&&T.removeClass(this.$$element,e)},$updateClass:function(e,t){var n=Qt(e,t);n&&n.length&&T.addClass(this.$$element,n);var r=Qt(t,e);r&&r.length&&T.removeClass(this.$$element,r)},$set:function(e,t,r,a){var c,s=this.$$element[0],u=Rt(s,e),l=Pt(s,e),d=e;if(u?(this.$$element.prop(e,t),a=u):l&&(this[l]=t,d=l),this[e]=t,a?this.$attr[e]=a:(a=this.$attr[e],a||(this.$attr[e]=a=nt(e,"-"))),c=H(this.$$element),"a"===c&&"href"===e||"img"===c&&"src"===e)this[e]=t=S(t,"src"===e);else if("img"===c&&"srcset"===e){for(var f="",m=di(t),p=/(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/,h=/\s/.test(m)?p:/(,)/,$=m.split(h),g=Math.floor($.length/2),v=0;g>v;v++){var b=2*v;f+=S(di($[b]),!0),f+=" "+di($[b+1])}var y=di($[2*v]).split(/\s/);f+=S(di(y[0]),!0),2===y.length&&(f+=" "+di(y[1])),this[e]=t=f}r!==!1&&(null===t||t===n?this.$$element.removeAttr(a):this.$$element.attr(a,t));var E=this.$$observers;E&&o(E[d],function(e){try{e(t)}catch(n){i(n)}})},$observe:function(e,t){var n=this,r=n.$$observers||(n.$$observers=ut()),i=r[e]||(r[e]=[]);return i.push(t),x.$evalAsync(function(){!i.$$inter&&n.hasOwnProperty(e)&&t(n[e])}),function(){I(i,t)}}};var ct=r.startSymbol(),st=r.endSymbol(),lt="{{"==ct||"}}"==st?h:function(e){return e.replace(/\{\{/g,ct).replace(/}}/g,st)},dt=/^ngAttr[A-Z]/;return O.$$addBindingInfo=w?function(e,t){var n=e.data("$binding")||[];li(t)?n=n.concat(t):n.push(t),e.data("$binding",n)}:p,O.$$addBindingClass=w?function(e){N(e,"ng-binding")}:p,O.$$addScopeInfo=w?function(e,t,n,r){var i=n?r?"$isolateScopeNoTemplate":"$isolateScope":"$scope";e.data(i,t)}:p,O.$$addScopeClass=w?function(e,t){N(e,t?"ng-isolate-scope":"ng-scope")}:p,O}]}function Zt(e){return ht(e.replace(Yi,""))}function Qt(e,t){var n="",r=e.split(/\s+/),i=t.split(/\s+/);e:for(var o=0;o<r.length;o++){for(var a=r[o],c=0;c<i.length;c++)if(a==i[c])continue e;n+=(n.length>0?" ":"")+a}return n}function en(e){e=Qr(e);var t=e.length;if(1>=t)return e;for(;t--;){var n=e[t];n.nodeType===bi&&ri.call(e,t,1)}return e}function tn(){var e={},t=!1,i=/^(\S+)(\s+as\s+(\w+))?$/;this.register=function(t,n){at(t,"controller"),b(t)?d(e,t):e[t]=n},this.allowGlobals=function(){t=!0},this.$get=["$injector","$window",function(o,a){function c(e,t,n,i){if(!e||!b(e.$scope))throw r("$controller")("noscp","Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",i,t);e.$scope[t]=n}return function(r,s,u,l){var f,m,p,h;if(u=u===!0,l&&y(l)&&(h=l),y(r)){if(m=r.match(i),!m)throw Ki("ctrlfmt","Badly formed controller string '{0}'. Must match `__name__ as __id__` or `__name__`.",r);p=m[1],h=h||m[3],r=e.hasOwnProperty(p)?e[p]:ct(s.$scope,p,!0)||(t?ct(a,p,!0):n),ot(r,p,!0)}if(u){var $=(li(r)?r[r.length-1]:r).prototype;return f=Object.create($||null),h&&c(s,h,f,p||r.name),d(function(){return o.invoke(r,f,s,p),f},{instance:f,identifier:h})}return f=o.instantiate(r,s,p),h&&c(s,h,f,p||r.name),f}}]}function nn(){this.$get=["$window",function(e){return Qr(e.document)}]}function rn(){this.$get=["$log",function(e){return function(){e.error.apply(e,arguments)}}]}function on(e,t){if(y(e)){var n=e.replace(eo,"").trim();if(n){var r=t("Content-Type");(r&&0===r.indexOf(Xi)||an(n))&&(e=B(n))}}return e}function an(e){var t=e.match(Zi);return t&&Qi[t[0]].test(e)}function cn(e){var t,n,r,i=ut();return e?(o(e.split("\n"),function(e){r=e.indexOf(":"),t=Wr(di(e.substr(0,r))),n=di(e.substr(r+1)),t&&(i[t]=i[t]?i[t]+", "+n:n)}),i):i}function sn(e){var t=b(e)?e:n;return function(n){if(t||(t=cn(e)),n){var r=t[Wr(n)];return void 0===r&&(r=null),r}return t}}function un(e,t,n,r){return A(r)?r(e,t,n):(o(r,function(r){e=r(e,t,n)}),e)}function ln(e){return e>=200&&300>e}function dn(){var e=this.defaults={transformResponse:[on],transformRequest:[function(e){return!b(e)||k(e)||S(e)||T(e)?e:U(e)}],headers:{common:{Accept:"application/json, text/plain, */*"},post:P(Ji),put:P(Ji),patch:P(Ji)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN"},t=!1;this.useApplyAsync=function(e){return v(e)?(t=!!e,this):t};var i=this.interceptors=[];this.$get=["$httpBackend","$browser","$cacheFactory","$rootScope","$q","$injector",function(a,s,u,l,f,m){function p(t){function i(e){var t=d({},e);return t.data=e.data?un(e.data,e.headers,e.status,s.transformResponse):e.data,ln(e.status)?t:f.reject(t)}function a(e){var t,n={};return o(e,function(e,r){A(e)?(t=e(),null!=t&&(n[r]=t)):n[r]=e}),n}function c(t){var n,r,i,o=e.headers,c=d({},t.headers);o=d({},o.common,o[Wr(t.method)]);e:for(n in o){r=Wr(n);for(i in c)if(Wr(i)===r)continue e;c[n]=o[n]}return a(c)}if(!ci.isObject(t))throw r("$http")("badreq","Http request configuration must be an object.  Received: {0}",t);var s=d({method:"get",transformRequest:e.transformRequest,transformResponse:e.transformResponse},t);s.headers=c(t),s.method=Kr(s.method);var u=function(t){var r=t.headers,a=un(t.data,sn(r),n,t.transformRequest);return g(a)&&o(r,function(e,t){"content-type"===Wr(t)&&delete r[t]}),g(t.withCredentials)&&!g(e.withCredentials)&&(t.withCredentials=e.withCredentials),E(t,a).then(i,i)},l=[u,n],m=f.when(s);for(o(C,function(e){(e.request||e.requestError)&&l.unshift(e.request,e.requestError),(e.response||e.responseError)&&l.push(e.response,e.responseError)});l.length;){var p=l.shift(),h=l.shift();m=m.then(p,h)}return m.success=function(e){return m.then(function(t){e(t.data,t.status,t.headers,s)}),m},m.error=function(e){return m.then(null,function(t){e(t.data,t.status,t.headers,s)}),m},m}function h(){o(arguments,function(e){p[e]=function(t,n){return p(d(n||{},{method:e,url:t}))}})}function $(){o(arguments,function(e){p[e]=function(t,n,r){return p(d(r||{},{method:e,url:t,data:n}))}})}function E(r,i){function o(e,n,r,i){function o(){c(n,e,r,i)}m&&(ln(e)?m.put(w,[e,n,cn(r),i]):m.remove(w)),t?l.$applyAsync(o):(o(),l.$$phase||l.$apply())}function c(e,t,n,i){t=Math.max(t,0),(ln(t)?$.resolve:$.reject)({data:e,status:t,headers:sn(n),config:r,statusText:i})}function u(e){c(e.data,e.status,P(e.headers()),e.statusText)}function d(){var e=p.pendingRequests.indexOf(r);-1!==e&&p.pendingRequests.splice(e,1)}var m,h,$=f.defer(),y=$.promise,E=r.headers,w=x(r.url,r.params);if(p.pendingRequests.push(r),y.then(d,d),!r.cache&&!e.cache||r.cache===!1||"GET"!==r.method&&"JSONP"!==r.method||(m=b(r.cache)?r.cache:b(e.cache)?e.cache:M),m&&(h=m.get(w),v(h)?O(h)?h.then(u,u):li(h)?c(h[1],h[0],P(h[2]),h[3]):c(h,200,{},"OK"):m.put(w,y)),g(h)){var A=or(r.url)?s.cookies()[r.xsrfCookieName||e.xsrfCookieName]:n;A&&(E[r.xsrfHeaderName||e.xsrfHeaderName]=A),a(r.method,w,i,o,E,r.timeout,r.withCredentials,r.responseType)}return y}function x(e,t){if(!t)return e;var n=[];return c(t,function(e,t){null===e||g(e)||(li(e)||(e=[e]),o(e,function(e){b(e)&&(e=w(e)?e.toISOString():U(e)),n.push(X(t)+"="+X(e))}))}),n.length>0&&(e+=(-1==e.indexOf("?")?"?":"&")+n.join("&")),e}var M=u("$http"),C=[];return o(i,function(e){C.unshift(y(e)?m.get(e):m.invoke(e))}),p.pendingRequests=[],h("get","delete","head","jsonp"),$("post","put","patch"),p.defaults=e,p}]}function fn(){return new e.XMLHttpRequest}function mn(){this.$get=["$browser","$window","$document",function(e,t,n){return pn(e,fn,e.defer,t.angular.callbacks,n[0])}]}function pn(e,t,r,i,a){function c(e,t,n){var r=a.createElement("script"),o=null;return r.type="text/javascript",r.src=e,r.async=!0,o=function(e){Ci(r,"load",o),Ci(r,"error",o),a.body.removeChild(r),r=null;var c=-1,s="unknown";e&&("load"!==e.type||i[t].called||(e={type:"error"}),s=e.type,c="error"===e.type?404:200),n&&n(c,s)},Mi(r,"load",o),Mi(r,"error",o),a.body.appendChild(r),o}return function(a,s,u,l,d,f,m,h){function $(){y&&y(),E&&E.abort()}function g(t,i,o,a,c){x!==n&&r.cancel(x),y=E=null,t(i,o,a,c),e.$$completeOutstandingRequest(p)}if(e.$$incOutstandingRequestCount(),s=s||e.url(),"jsonp"==Wr(a)){var b="_"+(i.counter++).toString(36);i[b]=function(e){i[b].data=e,i[b].called=!0};var y=c(s.replace("JSON_CALLBACK","angular.callbacks."+b),b,function(e,t){g(l,e,i[b].data,"",t),i[b]=p})}else{var E=t();E.open(a,s,!0),o(d,function(e,t){v(e)&&E.setRequestHeader(t,e)}),E.onload=function(){var e=E.statusText||"",t="response"in E?E.response:E.responseText,n=1223===E.status?204:E.status;0===n&&(n=t?200:"file"==ir(s).protocol?404:0),g(l,n,t,E.getAllResponseHeaders(),e)};var w=function(){g(l,-1,null,null,"")};if(E.onerror=w,E.onabort=w,m&&(E.withCredentials=!0),h)try{E.responseType=h}catch(A){if("json"!==h)throw A}E.send(u||null)}if(f>0)var x=r($,f);else O(f)&&f.then($)}}function hn(){var e="{{",t="}}";this.startSymbol=function(t){return t?(e=t,this):e},this.endSymbol=function(e){return e?(t=e,this):t},this.$get=["$parse","$exceptionHandler","$sce",function(n,r,i){function o(e){return"\\\\\\"+e}function a(o,a,f,m){function p(n){return n.replace(u,e).replace(l,t)}function h(e){try{return e=S(e),m&&!v(e)?e:N(e)}catch(t){var n=to("interr","Can't interpolate: {0}\n{1}",o,t.toString());r(n)}}m=!!m;for(var $,b,y,E=0,w=[],x=[],M=o.length,C=[],k=[];M>E;){if(-1==($=o.indexOf(e,E))||-1==(b=o.indexOf(t,$+c))){E!==M&&C.push(p(o.substring(E)));break}E!==$&&C.push(p(o.substring(E,$))),y=o.substring($+c,b),w.push(y),x.push(n(y,h)),E=b+s,k.push(C.length),C.push("")}if(f&&C.length>1)throw to("noconcat","Error while interpolating: {0}\nStrict Contextual Escaping disallows interpolations that concatenate multiple expressions when a trusted value is required.  See http://docs.angularjs.org/api/ng.$sce",o);if(!a||w.length){var T=function(e){for(var t=0,n=w.length;n>t;t++){if(m&&g(e[t]))return;C[k[t]]=e[t]}return C.join("")},S=function(e){return f?i.getTrusted(f,e):i.valueOf(e)},N=function(e){if(null==e)return"";switch(typeof e){case"string":break;case"number":e=""+e;break;default:e=U(e)}return e};return d(function(e){var t=0,n=w.length,i=new Array(n);try{for(;n>t;t++)i[t]=x[t](e);return T(i)}catch(a){var c=to("interr","Can't interpolate: {0}\n{1}",o,a.toString());r(c)}},{exp:o,expressions:w,$$watchDelegate:function(e,t,n){var r;return e.$watchGroup(x,function(n,i){var o=T(n);A(t)&&t.call(this,o,n!==i?r:o,e),r=o},n)}})}}var c=e.length,s=t.length,u=new RegExp(e.replace(/./g,o),"g"),l=new RegExp(t.replace(/./g,o),"g");return a.startSymbol=function(){return e},a.endSymbol=function(){return t},a}]}function $n(){this.$get=["$rootScope","$window","$q","$$q",function(e,t,n,r){function i(i,a,c,s){var u=t.setInterval,l=t.clearInterval,d=0,f=v(s)&&!s,m=(f?r:n).defer(),p=m.promise;return c=v(c)?c:0,p.then(null,null,i),p.$$intervalId=u(function(){m.notify(d++),c>0&&d>=c&&(m.resolve(d),l(p.$$intervalId),delete o[p.$$intervalId]),f||e.$apply()},a),o[p.$$intervalId]=m,p}var o={};return i.cancel=function(e){return e&&e.$$intervalId in o?(o[e.$$intervalId].reject("canceled"),t.clearInterval(e.$$intervalId),delete o[e.$$intervalId],!0):!1},i}]}function gn(){this.$get=function(){return{id:"en-us",NUMBER_FORMATS:{DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{minInt:1,minFrac:0,maxFrac:3,posPre:"",posSuf:"",negPre:"-",negSuf:"",gSize:3,lgSize:3},{minInt:1,minFrac:2,maxFrac:2,posPre:"¤",posSuf:"",negPre:"(¤",negSuf:")",gSize:3,lgSize:3}],CURRENCY_SYM:"$"},DATETIME_FORMATS:{MONTH:"January,February,March,April,May,June,July,August,September,October,November,December".split(","),SHORTMONTH:"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec".split(","),DAY:"Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday".split(","),SHORTDAY:"Sun,Mon,Tue,Wed,Thu,Fri,Sat".split(","),AMPMS:["AM","PM"],medium:"MMM d, y h:mm:ss a","short":"M/d/yy h:mm a",fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",mediumDate:"MMM d, y",shortDate:"M/d/yy",mediumTime:"h:mm:ss a",shortTime:"h:mm a"},pluralCat:function(e){return 1===e?"one":"other"}}}}function vn(e){for(var t=e.split("/"),n=t.length;n--;)t[n]=K(t[n]);return t.join("/")}function bn(e,t){var n=ir(e);t.$$protocol=n.protocol,t.$$host=n.hostname,t.$$port=f(n.port)||ro[n.protocol]||null}function yn(e,t){var n="/"!==e.charAt(0);n&&(e="/"+e);var r=ir(e);t.$$path=decodeURIComponent(n&&"/"===r.pathname.charAt(0)?r.pathname.substring(1):r.pathname),t.$$search=W(r.search),t.$$hash=decodeURIComponent(r.hash),t.$$path&&"/"!=t.$$path.charAt(0)&&(t.$$path="/"+t.$$path)}function En(e,t){return 0===t.indexOf(e)?t.substr(e.length):void 0}function wn(e){var t=e.indexOf("#");return-1==t?e:e.substr(0,t)}function An(e){return e.replace(/(#.+)|#$/,"$1")}function xn(e){return e.substr(0,wn(e).lastIndexOf("/")+1)}function Mn(e){return e.substring(0,e.indexOf("/",e.indexOf("//")+2))}function Cn(e,t){this.$$html5=!0,t=t||"";var r=xn(e);bn(e,this),this.$$parse=function(e){var t=En(r,e);if(!y(t))throw io("ipthprfx",'Invalid url "{0}", missing path prefix "{1}".',e,r);yn(t,this),this.$$path||(this.$$path="/"),this.$$compose()},this.$$compose=function(){var e=Y(this.$$search),t=this.$$hash?"#"+K(this.$$hash):"";this.$$url=vn(this.$$path)+(e?"?"+e:"")+t,this.$$absUrl=r+this.$$url.substr(1)},this.$$parseLinkUrl=function(i,o){if(o&&"#"===o[0])return this.hash(o.slice(1)),!0;var a,c,s;return(a=En(e,i))!==n?(c=a,s=(a=En(t,a))!==n?r+(En("/",a)||a):e+c):(a=En(r,i))!==n?s=r+a:r==i+"/"&&(s=r),s&&this.$$parse(s),!!s}}function kn(e,t){var n=xn(e);bn(e,this),this.$$parse=function(r){function i(e,t,n){var r,i=/^\/[A-Z]:(\/.*)/;return 0===t.indexOf(n)&&(t=t.replace(n,"")),i.exec(t)?e:(r=i.exec(e),r?r[1]:e)}var o,a=En(e,r)||En(n,r);"#"===a.charAt(0)?(o=En(t,a),g(o)&&(o=a)):o=this.$$html5?a:"",yn(o,this),this.$$path=i(this.$$path,o,e),this.$$compose()},this.$$compose=function(){var n=Y(this.$$search),r=this.$$hash?"#"+K(this.$$hash):"";this.$$url=vn(this.$$path)+(n?"?"+n:"")+r,this.$$absUrl=e+(this.$$url?t+this.$$url:"")},this.$$parseLinkUrl=function(t){return wn(e)==wn(t)?(this.$$parse(t),!0):!1}}function Tn(e,t){this.$$html5=!0,kn.apply(this,arguments);var n=xn(e);this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,a;return e==wn(r)?o=r:(a=En(n,r))?o=e+t+a:n===r+"/"&&(o=n),o&&this.$$parse(o),!!o},this.$$compose=function(){var n=Y(this.$$search),r=this.$$hash?"#"+K(this.$$hash):"";this.$$url=vn(this.$$path)+(n?"?"+n:"")+r,this.$$absUrl=e+t+this.$$url}}function Sn(e){return function(){return this[e]}}function Nn(e,t){return function(n){return g(n)?this[e]:(this[e]=t(n),this.$$compose(),this)}}function On(){var e="",t={enabled:!1,requireBase:!0,rewriteLinks:!0};this.hashPrefix=function(t){return v(t)?(e=t,this):e},this.html5Mode=function(e){return N(e)?(t.enabled=e,this):b(e)?(N(e.enabled)&&(t.enabled=e.enabled),N(e.requireBase)&&(t.requireBase=e.requireBase),N(e.rewriteLinks)&&(t.rewriteLinks=e.rewriteLinks),this):t},this.$get=["$rootScope","$browser","$sniffer","$rootElement","$window",function(n,r,i,o,a){function c(e,t,n){var i=u.url(),o=u.$$state;try{r.url(e,t,n),u.$$state=r.state()}catch(a){throw u.url(i),u.$$state=o,a}}function s(e,t){n.$broadcast("$locationChangeSuccess",u.absUrl(),e,u.$$state,t)}var u,l,d,f=r.baseHref(),m=r.url();if(t.enabled){if(!f&&t.requireBase)throw io("nobase","$location in HTML5 mode requires a <base> tag to be present!");d=Mn(m)+(f||"/"),l=i.history?Cn:Tn}else d=wn(m),l=kn;u=new l(d,"#"+e),u.$$parseLinkUrl(m,m),u.$$state=r.state();var p=/^\s*(javascript|mailto):/i;o.on("click",function(e){if(t.rewriteLinks&&!e.ctrlKey&&!e.metaKey&&!e.shiftKey&&2!=e.which&&2!=e.button){for(var i=Qr(e.target);"a"!==H(i[0]);)if(i[0]===o[0]||!(i=i.parent())[0])return;var c=i.prop("href"),s=i.attr("href")||i.attr("xlink:href");b(c)&&"[object SVGAnimatedString]"===c.toString()&&(c=ir(c.animVal).href),p.test(c)||!c||i.attr("target")||e.isDefaultPrevented()||u.$$parseLinkUrl(c,s)&&(e.preventDefault(),u.absUrl()!=r.url()&&(n.$apply(),a.angular["ff-684208-preventDefault"]=!0))}}),An(u.absUrl())!=An(m)&&r.url(u.absUrl(),!0);var h=!0;return r.onUrlChange(function(e,t){n.$evalAsync(function(){var r,i=u.absUrl(),o=u.$$state;u.$$parse(e),u.$$state=t,r=n.$broadcast("$locationChangeStart",e,i,t,o).defaultPrevented,u.absUrl()===e&&(r?(u.$$parse(i),u.$$state=o,c(i,!1,o)):(h=!1,s(i,o)))}),n.$$phase||n.$digest()}),n.$watch(function(){var e=An(r.url()),t=An(u.absUrl()),o=r.state(),a=u.$$replace,l=e!==t||u.$$html5&&i.history&&o!==u.$$state;(h||l)&&(h=!1,n.$evalAsync(function(){var t=u.absUrl(),r=n.$broadcast("$locationChangeStart",t,e,u.$$state,o).defaultPrevented;u.absUrl()===t&&(r?(u.$$parse(e),u.$$state=o):(l&&c(t,a,o===u.$$state?null:u.$$state),s(e,o)))})),u.$$replace=!1}),u}]}function _n(){var e=!0,t=this;this.debugEnabled=function(t){return v(t)?(e=t,this):e},this.$get=["$window",function(n){function r(e){return e instanceof Error&&(e.stack?e=e.message&&-1===e.stack.indexOf(e.message)?"Error: "+e.message+"\n"+e.stack:e.stack:e.sourceURL&&(e=e.message+"\n"+e.sourceURL+":"+e.line)),e}function i(e){var t=n.console||{},i=t[e]||t.log||p,a=!1;try{a=!!i.apply}catch(c){}return a?function(){var e=[];return o(arguments,function(t){e.push(r(t))}),i.apply(t,e)}:function(e,t){i(e,null==t?"":t)}}return{log:i("log"),info:i("info"),warn:i("warn"),error:i("error"),debug:function(){var n=i("debug");return function(){e&&n.apply(t,arguments)}}()}}]}function Dn(e,t){if("__defineGetter__"===e||"__defineSetter__"===e||"__lookupGetter__"===e||"__lookupSetter__"===e||"__proto__"===e)throw ao("isecfld","Attempting to access a disallowed field in Angular expressions! Expression: {0}",t);return e}function Hn(e,t){if(e){if(e.constructor===e)throw ao("isecfn","Referencing Function in Angular expressions is disallowed! Expression: {0}",t);if(e.window===e)throw ao("isecwindow","Referencing the Window in Angular expressions is disallowed! Expression: {0}",t);if(e.children&&(e.nodeName||e.prop&&e.attr&&e.find))throw ao("isecdom","Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}",t);if(e===Object)throw ao("isecobj","Referencing Object in Angular expressions is disallowed! Expression: {0}",t)}return e}function In(e,t){if(e){if(e.constructor===e)throw ao("isecfn","Referencing Function in Angular expressions is disallowed! Expression: {0}",t);if(e===co||e===so||e===uo)throw ao("isecff","Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}",t)}}function Rn(e){return e.constant}function Pn(e,t,n,r,i){Hn(e,i),Hn(t,i);for(var o,a=n.split("."),c=0;a.length>1;c++){o=Dn(a.shift(),i);var s=0===c&&t&&t[o]||e[o];s||(s={},e[o]=s),e=Hn(s,i)}return o=Dn(a.shift(),i),Hn(e[o],i),e[o]=r,r}function jn(e){return"constructor"==e}function qn(e,t,r,i,o,a,c){Dn(e,a),Dn(t,a),Dn(r,a),Dn(i,a),Dn(o,a);var s=function(e){return Hn(e,a)},u=c||jn(e)?s:h,l=c||jn(t)?s:h,d=c||jn(r)?s:h,f=c||jn(i)?s:h,m=c||jn(o)?s:h;return function(a,c){var s=c&&c.hasOwnProperty(e)?c:a;return null==s?s:(s=u(s[e]),t?null==s?n:(s=l(s[t]),r?null==s?n:(s=d(s[r]),i?null==s?n:(s=f(s[i]),o?null==s?n:s=m(s[o]):s):s):s):s)}}function Vn(e,t){return function(n,r){return e(n,r,Hn,t)}}function Fn(e,t,r){var i=t.expensiveChecks,a=i?go:$o,c=a[e];if(c)return c;var s=e.split("."),u=s.length;if(t.csp)c=6>u?qn(s[0],s[1],s[2],s[3],s[4],r,i):function(e,t){var o,a=0;do o=qn(s[a++],s[a++],s[a++],s[a++],s[a++],r,i)(e,t),t=n,e=o;while(u>a);return o};else{var l="";i&&(l+="s = eso(s, fe);\nl = eso(l, fe);\n");var d=i;o(s,function(e,t){Dn(e,r);var n=(t?"s":'((l&&l.hasOwnProperty("'+e+'"))?l:s)')+"."+e;(i||jn(e))&&(n="eso("+n+", fe)",d=!0),l+="if(s == null) return undefined;\ns="+n+";\n"}),l+="return s;";var f=new Function("s","l","eso","fe",l);f.toString=$(l),d&&(f=Vn(f,r)),c=f}return c.sharedGetter=!0,c.assign=function(t,n,r){return Pn(t,r,e,n,e)},a[e]=c,c}function Ln(e){return A(e.valueOf)?e.valueOf():vo.call(e)}function Un(){var e=ut(),t=ut();this.$get=["$filter","$sniffer",function(n,r){function i(e){var t=e;return e.sharedGetter&&(t=function(t,n){return e(t,n)},t.literal=e.literal,t.constant=e.constant,t.assign=e.assign),t}function a(e,t){for(var n=0,r=e.length;r>n;n++){var i=e[n];i.constant||(i.inputs?a(i.inputs,t):-1===t.indexOf(i)&&t.push(i))}return t}function c(e,t){return null==e||null==t?e===t:"object"==typeof e&&(e=Ln(e),"object"==typeof e)?!1:e===t||e!==e&&t!==t}function s(e,t,n,r){var i,o=r.$$inputs||(r.$$inputs=a(r.inputs,[]));if(1===o.length){var s=c;return o=o[0],e.$watch(function(e){var t=o(e);return c(t,s)||(i=r(e),s=t&&Ln(t)),i},t,n)}for(var u=[],l=0,d=o.length;d>l;l++)u[l]=c;return e.$watch(function(e){for(var t=!1,n=0,a=o.length;a>n;n++){var s=o[n](e);(t||(t=!c(s,u[n])))&&(u[n]=s&&Ln(s))}return t&&(i=r(e)),i},t,n)}function u(e,t,n,r){var i,o;return i=e.$watch(function(e){return r(e)},function(e,n,r){o=e,A(t)&&t.apply(this,arguments),v(e)&&r.$$postDigest(function(){v(o)&&i()})},n)}function l(e,t,n,r){function i(e){var t=!0;return o(e,function(e){v(e)||(t=!1)}),t}var a,c;return a=e.$watch(function(e){return r(e)},function(e,n,r){c=e,A(t)&&t.call(this,e,n,r),i(e)&&r.$$postDigest(function(){i(c)&&a()})},n)}function d(e,t,n,r){var i;return i=e.$watch(function(e){return r(e)},function(){A(t)&&t.apply(this,arguments),i()},n)}function f(e,t){if(!t)return e;var n=e.$$watchDelegate,r=n!==l&&n!==u,i=r?function(n,r){var i=e(n,r);return t(i,n,r)}:function(n,r){var i=e(n,r),o=t(i,n,r);return v(i)?o:i};return e.$$watchDelegate&&e.$$watchDelegate!==s?i.$$watchDelegate=e.$$watchDelegate:t.$stateful||(i.$$watchDelegate=s,i.inputs=[e]),i}var m={csp:r.csp,expensiveChecks:!1},h={csp:r.csp,expensiveChecks:!0};return function(r,o,a){var c,$,g;switch(typeof r){case"string":g=r=r.trim();var v=a?t:e;if(c=v[g],!c){":"===r.charAt(0)&&":"===r.charAt(1)&&($=!0,r=r.substring(2));var b=a?h:m,y=new po(b),E=new ho(y,n,b);c=E.parse(r),c.constant?c.$$watchDelegate=d:$?(c=i(c),c.$$watchDelegate=c.literal?l:u):c.inputs&&(c.$$watchDelegate=s),v[g]=c}return f(c,o);case"function":return f(r,o);default:return f(p,o)}}}]}function Bn(){this.$get=["$rootScope","$exceptionHandler",function(e,t){return zn(function(t){e.$evalAsync(t)},t)}]}function Gn(){this.$get=["$browser","$exceptionHandler",function(e,t){return zn(function(t){e.defer(t)},t)}]}function zn(e,t){function i(e,t,n){function r(t){return function(n){i||(i=!0,t.call(e,n))}}var i=!1;return[r(t),r(n)]}function a(){this.$$state={status:0}}function c(e,t){return function(n){t.call(e,n)}}function s(e){var r,i,o;o=e.pending,e.processScheduled=!1,e.pending=n;for(var a=0,c=o.length;c>a;++a){i=o[a][0],r=o[a][e.status];try{A(r)?i.resolve(r(e.value)):1===e.status?i.resolve(e.value):i.reject(e.value)}catch(s){i.reject(s),t(s)}}}function u(t){!t.processScheduled&&t.pending&&(t.processScheduled=!0,e(function(){s(t)}))}function l(){this.promise=new a,this.resolve=c(this,this.resolve),this.reject=c(this,this.reject),this.notify=c(this,this.notify)}function d(e){var t=new l,n=0,r=li(e)?[]:{};return o(e,function(e,i){n++,g(e).then(function(e){r.hasOwnProperty(i)||(r[i]=e,--n||t.resolve(r))},function(e){r.hasOwnProperty(i)||t.reject(e)})}),0===n&&t.resolve(r),t.promise}var f=r("$q",TypeError),m=function(){return new l};a.prototype={then:function(e,t,n){var r=new l;return this.$$state.pending=this.$$state.pending||[],this.$$state.pending.push([r,e,t,n]),this.$$state.status>0&&u(this.$$state),r.promise},"catch":function(e){return this.then(null,e)},"finally":function(e,t){return this.then(function(t){return $(t,!0,e)},function(t){return $(t,!1,e)},t)}},l.prototype={resolve:function(e){this.promise.$$state.status||(e===this.promise?this.$$reject(f("qcycle","Expected promise to be resolved with value other than itself '{0}'",e)):this.$$resolve(e))},$$resolve:function(e){var n,r;r=i(this,this.$$resolve,this.$$reject);try{(b(e)||A(e))&&(n=e&&e.then),A(n)?(this.promise.$$state.status=-1,n.call(e,r[0],r[1],this.notify)):(this.promise.$$state.value=e,this.promise.$$state.status=1,u(this.promise.$$state))}catch(o){r[1](o),t(o)}},reject:function(e){this.promise.$$state.status||this.$$reject(e)},$$reject:function(e){this.promise.$$state.value=e,this.promise.$$state.status=2,u(this.promise.$$state)},notify:function(n){var r=this.promise.$$state.pending;this.promise.$$state.status<=0&&r&&r.length&&e(function(){for(var e,i,o=0,a=r.length;a>o;o++){i=r[o][0],e=r[o][3];try{i.notify(A(e)?e(n):n)}catch(c){t(c)}}})}};var p=function(e){var t=new l;return t.reject(e),t.promise},h=function(e,t){var n=new l;return t?n.resolve(e):n.reject(e),n.promise},$=function(e,t,n){var r=null;try{A(n)&&(r=n())}catch(i){return h(i,!1)}return O(r)?r.then(function(){return h(e,t)},function(e){return h(e,!1)}):h(e,t)},g=function(e,t,n,r){var i=new l;return i.resolve(e),i.promise.then(t,n,r)},v=function y(e){function t(e){r.resolve(e)}function n(e){r.reject(e)}if(!A(e))throw f("norslvr","Expected resolverFn, got '{0}'",e);if(!(this instanceof y))return new y(e);var r=new l;return e(t,n),r.promise};return v.defer=m,v.reject=p,v.when=g,v.all=d,v}function Wn(){this.$get=["$window","$timeout",function(e,t){var n=e.requestAnimationFrame||e.webkitRequestAnimationFrame,r=e.cancelAnimationFrame||e.webkitCancelAnimationFrame||e.webkitCancelRequestAnimationFrame,i=!!n,o=i?function(e){var t=n(e);return function(){r(t)}}:function(e){var n=t(e,16.66,!1);return function(){t.cancel(n)}};return o.supported=i,o}]}function Yn(){var e=10,t=r("$rootScope"),n=null,a=null;this.digestTtl=function(t){return arguments.length&&(e=t),e},this.$get=["$injector","$exceptionHandler","$parse","$browser",function(r,c,s,l){function d(){this.$id=u(),this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null,this.$root=this,this.$$destroyed=!1,this.$$listeners={},this.$$listenerCount={},this.$$isolateBindings=null}function f(e){if(E.$$phase)throw t("inprog","{0} already in progress",E.$$phase);E.$$phase=e}function m(){E.$$phase=null}function h(e,t,n){do e.$$listenerCount[n]-=t,0===e.$$listenerCount[n]&&delete e.$$listenerCount[n];while(e=e.$parent)}function $(){}function v(){for(;M.length;)try{M.shift()()}catch(e){c(e)}a=null}function y(){null===a&&(a=l.defer(function(){E.$apply(v)}))}d.prototype={constructor:d,$new:function(e,t){function n(){r.$$destroyed=!0}var r;return t=t||this,e?(r=new d,r.$root=this.$root):(this.$$ChildScope||(this.$$ChildScope=function(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null,this.$$listeners={},this.$$listenerCount={},this.$id=u(),this.$$ChildScope=null},this.$$ChildScope.prototype=this),r=new this.$$ChildScope),r.$parent=t,r.$$prevSibling=t.$$childTail,t.$$childHead?(t.$$childTail.$$nextSibling=r,t.$$childTail=r):t.$$childHead=t.$$childTail=r,(e||t!=this)&&r.$on("$destroy",n),r},$watch:function(e,t,r){var i=s(e);if(i.$$watchDelegate)return i.$$watchDelegate(this,t,r,i);var o=this,a=o.$$watchers,c={fn:t,last:$,get:i,exp:e,eq:!!r};return n=null,A(t)||(c.fn=p),a||(a=o.$$watchers=[]),a.unshift(c),function(){I(a,c),n=null}},$watchGroup:function(e,t){function n(){s=!1,u?(u=!1,t(i,i,c)):t(i,r,c)}var r=new Array(e.length),i=new Array(e.length),a=[],c=this,s=!1,u=!0;if(!e.length){var l=!0;return c.$evalAsync(function(){l&&t(i,i,c)}),function(){l=!1}}return 1===e.length?this.$watch(e[0],function(e,n,o){i[0]=e,r[0]=n,t(i,e===n?i:r,o)}):(o(e,function(e,t){var o=c.$watch(e,function(e,o){i[t]=e,r[t]=o,s||(s=!0,c.$evalAsync(n))});a.push(o)}),function(){for(;a.length;)a.shift()()})},$watchCollection:function(e,t){function n(e){o=e;var t,n,r,c,s;if(!g(o)){if(b(o))if(i(o)){a!==m&&(a=m,$=a.length=0,d++),t=o.length,$!==t&&(d++,a.length=$=t);for(var u=0;t>u;u++)s=a[u],c=o[u],r=s!==s&&c!==c,r||s===c||(d++,a[u]=c)}else{a!==p&&(a=p={},$=0,d++),t=0;for(n in o)o.hasOwnProperty(n)&&(t++,c=o[n],s=a[n],n in a?(r=s!==s&&c!==c,r||s===c||(d++,a[n]=c)):($++,a[n]=c,d++));if($>t){d++;for(n in a)o.hasOwnProperty(n)||($--,delete a[n])}}else a!==o&&(a=o,d++);return d}}function r(){if(h?(h=!1,t(o,o,u)):t(o,c,u),l)if(b(o))if(i(o)){c=new Array(o.length);for(var e=0;e<o.length;e++)c[e]=o[e]}else{c={};for(var n in o)Yr.call(o,n)&&(c[n]=o[n])}else c=o}n.$stateful=!0;var o,a,c,u=this,l=t.length>1,d=0,f=s(e,n),m=[],p={},h=!0,$=0;
return this.$watch(f,r)},$digest:function(){var r,i,o,s,u,d,p,h,g,b,y=e,M=this,C=[];f("$digest"),l.$$checkUrlChange(),this===E&&null!==a&&(l.defer.cancel(a),v()),n=null;do{for(d=!1,h=M;w.length;){try{b=w.shift(),b.scope.$eval(b.expression,b.locals)}catch(k){c(k)}n=null}e:do{if(s=h.$$watchers)for(u=s.length;u--;)try{if(r=s[u])if((i=r.get(h))===(o=r.last)||(r.eq?j(i,o):"number"==typeof i&&"number"==typeof o&&isNaN(i)&&isNaN(o))){if(r===n){d=!1;break e}}else d=!0,n=r,r.last=r.eq?R(i,null):i,r.fn(i,o===$?i:o,h),5>y&&(g=4-y,C[g]||(C[g]=[]),C[g].push({msg:A(r.exp)?"fn: "+(r.exp.name||r.exp.toString()):r.exp,newVal:i,oldVal:o}))}catch(k){c(k)}if(!(p=h.$$childHead||h!==M&&h.$$nextSibling))for(;h!==M&&!(p=h.$$nextSibling);)h=h.$parent}while(h=p);if((d||w.length)&&!y--)throw m(),t("infdig","{0} $digest() iterations reached. Aborting!\nWatchers fired in the last 5 iterations: {1}",e,C)}while(d||w.length);for(m();x.length;)try{x.shift()()}catch(k){c(k)}},$destroy:function(){if(!this.$$destroyed){var e=this.$parent;if(this.$broadcast("$destroy"),this.$$destroyed=!0,this!==E){for(var t in this.$$listenerCount)h(this,this.$$listenerCount[t],t);e.$$childHead==this&&(e.$$childHead=this.$$nextSibling),e.$$childTail==this&&(e.$$childTail=this.$$prevSibling),this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling),this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling),this.$destroy=this.$digest=this.$apply=this.$evalAsync=this.$applyAsync=p,this.$on=this.$watch=this.$watchGroup=function(){return p},this.$$listeners={},this.$parent=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=this.$root=this.$$watchers=null}}},$eval:function(e,t){return s(e)(this,t)},$evalAsync:function(e,t){E.$$phase||w.length||l.defer(function(){w.length&&E.$digest()}),w.push({scope:this,expression:e,locals:t})},$$postDigest:function(e){x.push(e)},$apply:function(e){try{return f("$apply"),this.$eval(e)}catch(t){c(t)}finally{m();try{E.$digest()}catch(t){throw c(t),t}}},$applyAsync:function(e){function t(){n.$eval(e)}var n=this;e&&M.push(t),y()},$on:function(e,t){var n=this.$$listeners[e];n||(this.$$listeners[e]=n=[]),n.push(t);var r=this;do r.$$listenerCount[e]||(r.$$listenerCount[e]=0),r.$$listenerCount[e]++;while(r=r.$parent);var i=this;return function(){var r=n.indexOf(t);-1!==r&&(n[r]=null,h(i,1,e))}},$emit:function(e){var t,n,r,i=[],o=this,a=!1,s={name:e,targetScope:o,stopPropagation:function(){a=!0},preventDefault:function(){s.defaultPrevented=!0},defaultPrevented:!1},u=q([s],arguments,1);do{for(t=o.$$listeners[e]||i,s.currentScope=o,n=0,r=t.length;r>n;n++)if(t[n])try{t[n].apply(null,u)}catch(l){c(l)}else t.splice(n,1),n--,r--;if(a)return s.currentScope=null,s;o=o.$parent}while(o);return s.currentScope=null,s},$broadcast:function(e){var t=this,n=t,r=t,i={name:e,targetScope:t,preventDefault:function(){i.defaultPrevented=!0},defaultPrevented:!1};if(!t.$$listenerCount[e])return i;for(var o,a,s,u=q([i],arguments,1);n=r;){for(i.currentScope=n,o=n.$$listeners[e]||[],a=0,s=o.length;s>a;a++)if(o[a])try{o[a].apply(null,u)}catch(l){c(l)}else o.splice(a,1),a--,s--;if(!(r=n.$$listenerCount[e]&&n.$$childHead||n!==t&&n.$$nextSibling))for(;n!==t&&!(r=n.$$nextSibling);)n=n.$parent}return i.currentScope=null,i}};var E=new d,w=E.$$asyncQueue=[],x=E.$$postDigestQueue=[],M=E.$$applyAsyncQueue=[];return E}]}function Kn(){var e=/^\s*(https?|ftp|mailto|tel|file):/,t=/^\s*((https?|ftp|file|blob):|data:image\/)/;this.aHrefSanitizationWhitelist=function(t){return v(t)?(e=t,this):e},this.imgSrcSanitizationWhitelist=function(e){return v(e)?(t=e,this):t},this.$get=function(){return function(n,r){var i,o=r?t:e;return i=ir(n).href,""===i||i.match(o)?n:"unsafe:"+i}}}function Xn(e){if("self"===e)return e;if(y(e)){if(e.indexOf("***")>-1)throw bo("iwcard","Illegal sequence *** in string matcher.  String: {0}",e);return e=fi(e).replace("\\*\\*",".*").replace("\\*","[^:/.?&;]*"),new RegExp("^"+e+"$")}if(x(e))return new RegExp("^"+e.source+"$");throw bo("imatcher",'Matchers may only be "self", string patterns or RegExp objects')}function Jn(e){var t=[];return v(e)&&o(e,function(e){t.push(Xn(e))}),t}function Zn(){this.SCE_CONTEXTS=yo;var e=["self"],t=[];this.resourceUrlWhitelist=function(t){return arguments.length&&(e=Jn(t)),e},this.resourceUrlBlacklist=function(e){return arguments.length&&(t=Jn(e)),t},this.$get=["$injector",function(r){function i(e,t){return"self"===e?or(t):!!e.exec(t.href)}function o(n){var r,o,a=ir(n.toString()),c=!1;for(r=0,o=e.length;o>r;r++)if(i(e[r],a)){c=!0;break}if(c)for(r=0,o=t.length;o>r;r++)if(i(t[r],a)){c=!1;break}return c}function a(e){var t=function(e){this.$$unwrapTrustedValue=function(){return e}};return e&&(t.prototype=new e),t.prototype.valueOf=function(){return this.$$unwrapTrustedValue()},t.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()},t}function c(e,t){var r=f.hasOwnProperty(e)?f[e]:null;if(!r)throw bo("icontext","Attempted to trust a value in invalid context. Context: {0}; Value: {1}",e,t);if(null===t||t===n||""===t)return t;if("string"!=typeof t)throw bo("itype","Attempted to trust a non-string value in a content requiring a string: Context: {0}",e);return new r(t)}function s(e){return e instanceof d?e.$$unwrapTrustedValue():e}function u(e,t){if(null===t||t===n||""===t)return t;var r=f.hasOwnProperty(e)?f[e]:null;if(r&&t instanceof r)return t.$$unwrapTrustedValue();if(e===yo.RESOURCE_URL){if(o(t))return t;throw bo("insecurl","Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}",t.toString())}if(e===yo.HTML)return l(t);throw bo("unsafe","Attempting to use an unsafe value in a safe context.")}var l=function(){throw bo("unsafe","Attempting to use an unsafe value in a safe context.")};r.has("$sanitize")&&(l=r.get("$sanitize"));var d=a(),f={};return f[yo.HTML]=a(d),f[yo.CSS]=a(d),f[yo.URL]=a(d),f[yo.JS]=a(d),f[yo.RESOURCE_URL]=a(f[yo.URL]),{trustAs:c,getTrusted:u,valueOf:s}}]}function Qn(){var e=!0;this.enabled=function(t){return arguments.length&&(e=!!t),e},this.$get=["$parse","$sceDelegate",function(t,n){if(e&&8>Zr)throw bo("iequirks","Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks mode.  You can fix this by adding the text <!doctype html> to the top of your HTML document.  See http://docs.angularjs.org/api/ng.$sce for more information.");var r=P(yo);r.isEnabled=function(){return e},r.trustAs=n.trustAs,r.getTrusted=n.getTrusted,r.valueOf=n.valueOf,e||(r.trustAs=r.getTrusted=function(e,t){return t},r.valueOf=h),r.parseAs=function(e,n){var i=t(n);return i.literal&&i.constant?i:t(n,function(t){return r.getTrusted(e,t)})};var i=r.parseAs,a=r.getTrusted,c=r.trustAs;return o(yo,function(e,t){var n=Wr(t);r[ht("parse_as_"+n)]=function(t){return i(e,t)},r[ht("get_trusted_"+n)]=function(t){return a(e,t)},r[ht("trust_as_"+n)]=function(t){return c(e,t)}}),r}]}function er(){this.$get=["$window","$document",function(e,t){var n,r,i={},o=f((/android (\d+)/.exec(Wr((e.navigator||{}).userAgent))||[])[1]),a=/Boxee/i.test((e.navigator||{}).userAgent),c=t[0]||{},s=/^(Moz|webkit|ms)(?=[A-Z])/,u=c.body&&c.body.style,l=!1,d=!1;if(u){for(var m in u)if(r=s.exec(m)){n=r[0],n=n.substr(0,1).toUpperCase()+n.substr(1);break}n||(n="WebkitOpacity"in u&&"webkit"),l=!!("transition"in u||n+"Transition"in u),d=!!("animation"in u||n+"Animation"in u),!o||l&&d||(l=y(c.body.style.webkitTransition),d=y(c.body.style.webkitAnimation))}return{history:!(!e.history||!e.history.pushState||4>o||a),hasEvent:function(e){if("input"===e&&11>=Zr)return!1;if(g(i[e])){var t=c.createElement("div");i[e]="on"+e in t}return i[e]},csp:mi(),vendorPrefix:n,transitions:l,animations:d,android:o}}]}function tr(){this.$get=["$templateCache","$http","$q",function(e,t,n){function r(i,o){function a(e){if(!o)throw Wi("tpload","Failed to load template: {0}",i);return n.reject(e)}r.totalPendingRequests++;var c=t.defaults&&t.defaults.transformResponse;li(c)?c=c.filter(function(e){return e!==on}):c===on&&(c=null);var s={cache:e,transformResponse:c};return t.get(i,s)["finally"](function(){r.totalPendingRequests--}).then(function(e){return e.data},a)}return r.totalPendingRequests=0,r}]}function nr(){this.$get=["$rootScope","$browser","$location",function(e,t,n){var r={};return r.findBindings=function(e,t,n){var r=e.getElementsByClassName("ng-binding"),i=[];return o(r,function(e){var r=ci.element(e).data("$binding");r&&o(r,function(r){if(n){var o=new RegExp("(^|\\s)"+fi(t)+"(\\s|\\||$)");o.test(r)&&i.push(e)}else-1!=r.indexOf(t)&&i.push(e)})}),i},r.findModels=function(e,t,n){for(var r=["ng-","data-ng-","ng\\:"],i=0;i<r.length;++i){var o=n?"=":"*=",a="["+r[i]+"model"+o+'"'+t+'"]',c=e.querySelectorAll(a);if(c.length)return c}},r.getLocation=function(){return n.url()},r.setLocation=function(t){t!==n.url()&&(n.url(t),e.$digest())},r.whenStable=function(e){t.notifyWhenNoOutstandingRequests(e)},r}]}function rr(){this.$get=["$rootScope","$browser","$q","$$q","$exceptionHandler",function(e,t,n,r,i){function o(o,c,s){var u,l=v(s)&&!s,d=(l?r:n).defer(),f=d.promise;return u=t.defer(function(){try{d.resolve(o())}catch(t){d.reject(t),i(t)}finally{delete a[f.$$timeoutId]}l||e.$apply()},c),f.$$timeoutId=u,a[u]=d,f}var a={};return o.cancel=function(e){return e&&e.$$timeoutId in a?(a[e.$$timeoutId].reject("canceled"),delete a[e.$$timeoutId],t.defer.cancel(e.$$timeoutId)):!1},o}]}function ir(e){var t=e;return Zr&&(Eo.setAttribute("href",t),t=Eo.href),Eo.setAttribute("href",t),{href:Eo.href,protocol:Eo.protocol?Eo.protocol.replace(/:$/,""):"",host:Eo.host,search:Eo.search?Eo.search.replace(/^\?/,""):"",hash:Eo.hash?Eo.hash.replace(/^#/,""):"",hostname:Eo.hostname,port:Eo.port,pathname:"/"===Eo.pathname.charAt(0)?Eo.pathname:"/"+Eo.pathname}}function or(e){var t=y(e)?ir(e):e;return t.protocol===wo.protocol&&t.host===wo.host}function ar(){this.$get=$(e)}function cr(e){function t(r,i){if(b(r)){var a={};return o(r,function(e,n){a[n]=t(n,e)}),a}return e.factory(r+n,i)}var n="Filter";this.register=t,this.$get=["$injector",function(e){return function(t){return e.get(t+n)}}],t("currency",dr),t("date",wr),t("filter",sr),t("json",Ar),t("limitTo",xr),t("lowercase",ko),t("number",fr),t("orderBy",Mr),t("uppercase",To)}function sr(){return function(e,t,n){if(!li(e))return e;var r,i;switch(typeof t){case"function":r=t;break;case"boolean":case"number":case"string":i=!0;case"object":r=ur(t,n,i);break;default:return e}return e.filter(r)}}function ur(e,t,n){var r,i=b(e)&&"$"in e;return t===!0?t=j:A(t)||(t=function(e,t){return b(e)||b(t)?!1:(e=Wr(""+e),t=Wr(""+t),-1!==e.indexOf(t))}),r=function(r){return i&&!b(r)?lr(r,e.$,t,!1):lr(r,e,t,n)}}function lr(e,t,n,r,i){var o=typeof e,a=typeof t;if("string"===a&&"!"===t.charAt(0))return!lr(e,t.substring(1),n,r);if(li(e))return e.some(function(e){return lr(e,t,n,r)});switch(o){case"object":var c;if(r){for(c in e)if("$"!==c.charAt(0)&&lr(e[c],t,n,!0))return!0;return i?!1:lr(e,t,n,!1)}if("object"===a){for(c in t){var s=t[c];if(!A(s)){var u="$"===c,l=u?e:e[c];if(!lr(l,s,n,u,u))return!1}}return!0}return n(e,t);case"function":return!1;default:return n(e,t)}}function dr(e){var t=e.NUMBER_FORMATS;return function(e,n,r){return g(n)&&(n=t.CURRENCY_SYM),g(r)&&(r=t.PATTERNS[1].maxFrac),null==e?e:mr(e,t.PATTERNS[1],t.GROUP_SEP,t.DECIMAL_SEP,r).replace(/\u00A4/g,n)}}function fr(e){var t=e.NUMBER_FORMATS;return function(e,n){return null==e?e:mr(e,t.PATTERNS[0],t.GROUP_SEP,t.DECIMAL_SEP,n)}}function mr(e,t,n,r,i){if(!isFinite(e)||b(e))return"";var o=0>e;e=Math.abs(e);var a=e+"",c="",s=[],u=!1;if(-1!==a.indexOf("e")){var l=a.match(/([\d\.]+)e(-?)(\d+)/);l&&"-"==l[2]&&l[3]>i+1?e=0:(c=a,u=!0)}if(u)i>0&&1>e&&(c=e.toFixed(i),e=parseFloat(c));else{var d=(a.split(Ao)[1]||"").length;g(i)&&(i=Math.min(Math.max(t.minFrac,d),t.maxFrac)),e=+(Math.round(+(e.toString()+"e"+i)).toString()+"e"+-i);var f=(""+e).split(Ao),m=f[0];f=f[1]||"";var p,h=0,$=t.lgSize,v=t.gSize;if(m.length>=$+v)for(h=m.length-$,p=0;h>p;p++)(h-p)%v===0&&0!==p&&(c+=n),c+=m.charAt(p);for(p=h;p<m.length;p++)(m.length-p)%$===0&&0!==p&&(c+=n),c+=m.charAt(p);for(;f.length<i;)f+="0";i&&"0"!==i&&(c+=r+f.substr(0,i))}return 0===e&&(o=!1),s.push(o?t.negPre:t.posPre,c,o?t.negSuf:t.posSuf),s.join("")}function pr(e,t,n){var r="";for(0>e&&(r="-",e=-e),e=""+e;e.length<t;)e="0"+e;return n&&(e=e.substr(e.length-t)),r+e}function hr(e,t,n,r){return n=n||0,function(i){var o=i["get"+e]();return(n>0||o>-n)&&(o+=n),0===o&&-12==n&&(o=12),pr(o,t,r)}}function $r(e,t){return function(n,r){var i=n["get"+e](),o=Kr(t?"SHORT"+e:e);return r[o][i]}}function gr(e){var t=-1*e.getTimezoneOffset(),n=t>=0?"+":"";return n+=pr(Math[t>0?"floor":"ceil"](t/60),2)+pr(Math.abs(t%60),2)}function vr(e){var t=new Date(e,0,1).getDay();return new Date(e,0,(4>=t?5:12)-t)}function br(e){return new Date(e.getFullYear(),e.getMonth(),e.getDate()+(4-e.getDay()))}function yr(e){return function(t){var n=vr(t.getFullYear()),r=br(t),i=+r-+n,o=1+Math.round(i/6048e5);return pr(o,e)}}function Er(e,t){return e.getHours()<12?t.AMPMS[0]:t.AMPMS[1]}function wr(e){function t(e){var t;if(t=e.match(n)){var r=new Date(0),i=0,o=0,a=t[8]?r.setUTCFullYear:r.setFullYear,c=t[8]?r.setUTCHours:r.setHours;t[9]&&(i=f(t[9]+t[10]),o=f(t[9]+t[11])),a.call(r,f(t[1]),f(t[2])-1,f(t[3]));var s=f(t[4]||0)-i,u=f(t[5]||0)-o,l=f(t[6]||0),d=Math.round(1e3*parseFloat("0."+(t[7]||0)));return c.call(r,s,u,l,d),r}return e}var n=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(n,r,i){var a,c,s="",u=[];if(r=r||"mediumDate",r=e.DATETIME_FORMATS[r]||r,y(n)&&(n=Co.test(n)?f(n):t(n)),E(n)&&(n=new Date(n)),!w(n))return n;for(;r;)c=Mo.exec(r),c?(u=q(u,c,1),r=u.pop()):(u.push(r),r=null);return i&&"UTC"===i&&(n=new Date(n.getTime()),n.setMinutes(n.getMinutes()+n.getTimezoneOffset())),o(u,function(t){a=xo[t],s+=a?a(n,e.DATETIME_FORMATS):t.replace(/(^'|'$)/g,"").replace(/''/g,"'")}),s}}function Ar(){return function(e,t){return g(t)&&(t=2),U(e,t)}}function xr(){return function(e,t){return E(e)&&(e=e.toString()),li(e)||y(e)?(t=1/0===Math.abs(Number(t))?Number(t):f(t),t?t>0?e.slice(0,t):e.slice(t):y(e)?"":[]):e}}function Mr(e){return function(t,n,r){function o(e,t){for(var r=0;r<n.length;r++){var i=n[r](e,t);if(0!==i)return i}return 0}function a(e,t){return t?function(t,n){return e(n,t)}:e}function c(e){switch(typeof e){case"number":case"boolean":case"string":return!0;default:return!1}}function s(e){return null===e?"null":"function"==typeof e.valueOf&&(e=e.valueOf(),c(e))?e:"function"==typeof e.toString&&(e=e.toString(),c(e))?e:""}function u(e,t){var n=typeof e,r=typeof t;return n===r&&"object"===n&&(e=s(e),t=s(t)),n===r?("string"===n&&(e=e.toLowerCase(),t=t.toLowerCase()),e===t?0:t>e?-1:1):r>n?-1:1}return i(t)?(n=li(n)?n:[n],0===n.length&&(n=["+"]),n=n.map(function(t){var n=!1,r=t||h;if(y(t)){if(("+"==t.charAt(0)||"-"==t.charAt(0))&&(n="-"==t.charAt(0),t=t.substring(1)),""===t)return a(u,n);if(r=e(t),r.constant){var i=r();return a(function(e,t){return u(e[i],t[i])},n)}}return a(function(e,t){return u(r(e),r(t))},n)}),ni.call(t).sort(a(o,r))):t}}function Cr(e){return A(e)&&(e={link:e}),e.restrict=e.restrict||"AC",$(e)}function kr(e,t){e.$name=t}function Tr(e,t,r,i,a){var c=this,s=[],u=c.$$parentForm=e.parent().controller("form")||Oo;c.$error={},c.$$success={},c.$pending=n,c.$name=a(t.name||t.ngForm||"")(r),c.$dirty=!1,c.$pristine=!0,c.$valid=!0,c.$invalid=!1,c.$submitted=!1,u.$addControl(c),c.$rollbackViewValue=function(){o(s,function(e){e.$rollbackViewValue()})},c.$commitViewValue=function(){o(s,function(e){e.$commitViewValue()})},c.$addControl=function(e){at(e.$name,"input"),s.push(e),e.$name&&(c[e.$name]=e)},c.$$renameControl=function(e,t){var n=e.$name;c[n]===e&&delete c[n],c[t]=e,e.$name=t},c.$removeControl=function(e){e.$name&&c[e.$name]===e&&delete c[e.$name],o(c.$pending,function(t,n){c.$setValidity(n,null,e)}),o(c.$error,function(t,n){c.$setValidity(n,null,e)}),o(c.$$success,function(t,n){c.$setValidity(n,null,e)}),I(s,e)},Ur({ctrl:this,$element:e,set:function(e,t,n){var r=e[t];if(r){var i=r.indexOf(n);-1===i&&r.push(n)}else e[t]=[n]},unset:function(e,t,n){var r=e[t];r&&(I(r,n),0===r.length&&delete e[t])},parentForm:u,$animate:i}),c.$setDirty=function(){i.removeClass(e,ma),i.addClass(e,pa),c.$dirty=!0,c.$pristine=!1,u.$setDirty()},c.$setPristine=function(){i.setClass(e,ma,pa+" "+_o),c.$dirty=!1,c.$pristine=!0,c.$submitted=!1,o(s,function(e){e.$setPristine()})},c.$setUntouched=function(){o(s,function(e){e.$setUntouched()})},c.$setSubmitted=function(){i.addClass(e,_o),c.$submitted=!0,u.$setSubmitted()}}function Sr(e){e.$formatters.push(function(t){return e.$isEmpty(t)?t:t.toString()})}function Nr(e,t,n,r,i,o){Or(e,t,n,r,i,o),Sr(r)}function Or(e,t,n,r,i,o){var a=Wr(t[0].type);if(!i.android){var c=!1;t.on("compositionstart",function(){c=!0}),t.on("compositionend",function(){c=!1,s()})}var s=function(e){if(u&&(o.defer.cancel(u),u=null),!c){var i=t.val(),s=e&&e.type;"password"===a||n.ngTrim&&"false"===n.ngTrim||(i=di(i)),(r.$viewValue!==i||""===i&&r.$$hasNativeValidators)&&r.$setViewValue(i,s)}};if(i.hasEvent("input"))t.on("input",s);else{var u,l=function(e,t,n){u||(u=o.defer(function(){u=null,t&&t.value===n||s(e)}))};t.on("keydown",function(e){var t=e.keyCode;91===t||t>15&&19>t||t>=37&&40>=t||l(e,this,this.value)}),i.hasEvent("paste")&&t.on("paste cut",l)}t.on("change",s),r.$render=function(){t.val(r.$isEmpty(r.$viewValue)?"":r.$viewValue)}}function _r(e,t){if(w(e))return e;if(y(e)){Lo.lastIndex=0;var n=Lo.exec(e);if(n){var r=+n[1],i=+n[2],o=0,a=0,c=0,s=0,u=vr(r),l=7*(i-1);return t&&(o=t.getHours(),a=t.getMinutes(),c=t.getSeconds(),s=t.getMilliseconds()),new Date(r,0,u.getDate()+l,o,a,c,s)}}return 0/0}function Dr(e,t){return function(n,r){var i,a;if(w(n))return n;if(y(n)){if('"'==n.charAt(0)&&'"'==n.charAt(n.length-1)&&(n=n.substring(1,n.length-1)),Ro.test(n))return new Date(n);if(e.lastIndex=0,i=e.exec(n))return i.shift(),a=r?{yyyy:r.getFullYear(),MM:r.getMonth()+1,dd:r.getDate(),HH:r.getHours(),mm:r.getMinutes(),ss:r.getSeconds(),sss:r.getMilliseconds()/1e3}:{yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0},o(i,function(e,n){n<t.length&&(a[t[n]]=+e)}),new Date(a.yyyy,a.MM-1,a.dd,a.HH,a.mm,a.ss||0,1e3*a.sss||0)}return 0/0}}function Hr(e,t,r,i){return function(o,a,c,s,u,l,d){function f(e){return e&&!(e.getTime&&e.getTime()!==e.getTime())}function m(e){return v(e)?w(e)?e:r(e):n}Ir(o,a,c,s),Or(o,a,c,s,u,l);var p,h=s&&s.$options&&s.$options.timezone;if(s.$$parserName=e,s.$parsers.push(function(e){if(s.$isEmpty(e))return null;if(t.test(e)){var i=r(e,p);return"UTC"===h&&i.setMinutes(i.getMinutes()-i.getTimezoneOffset()),i}return n}),s.$formatters.push(function(e){if(e&&!w(e))throw va("datefmt","Expected `{0}` to be a date",e);if(f(e)){if(p=e,p&&"UTC"===h){var t=6e4*p.getTimezoneOffset();p=new Date(p.getTime()+t)}return d("date")(e,i,h)}return p=null,""}),v(c.min)||c.ngMin){var $;s.$validators.min=function(e){return!f(e)||g($)||r(e)>=$},c.$observe("min",function(e){$=m(e),s.$validate()})}if(v(c.max)||c.ngMax){var b;s.$validators.max=function(e){return!f(e)||g(b)||r(e)<=b},c.$observe("max",function(e){b=m(e),s.$validate()})}}}function Ir(e,t,r,i){var o=t[0],a=i.$$hasNativeValidators=b(o.validity);a&&i.$parsers.push(function(e){var r=t.prop(zr)||{};return r.badInput&&!r.typeMismatch?n:e})}function Rr(e,t,r,i,o,a){if(Ir(e,t,r,i),Or(e,t,r,i,o,a),i.$$parserName="number",i.$parsers.push(function(e){return i.$isEmpty(e)?null:qo.test(e)?parseFloat(e):n}),i.$formatters.push(function(e){if(!i.$isEmpty(e)){if(!E(e))throw va("numfmt","Expected `{0}` to be a number",e);e=e.toString()}return e}),r.min||r.ngMin){var c;i.$validators.min=function(e){return i.$isEmpty(e)||g(c)||e>=c},r.$observe("min",function(e){v(e)&&!E(e)&&(e=parseFloat(e,10)),c=E(e)&&!isNaN(e)?e:n,i.$validate()})}if(r.max||r.ngMax){var s;i.$validators.max=function(e){return i.$isEmpty(e)||g(s)||s>=e},r.$observe("max",function(e){v(e)&&!E(e)&&(e=parseFloat(e,10)),s=E(e)&&!isNaN(e)?e:n,i.$validate()})}}function Pr(e,t,n,r,i,o){Or(e,t,n,r,i,o),Sr(r),r.$$parserName="url",r.$validators.url=function(e,t){var n=e||t;return r.$isEmpty(n)||Po.test(n)}}function jr(e,t,n,r,i,o){Or(e,t,n,r,i,o),Sr(r),r.$$parserName="email",r.$validators.email=function(e,t){var n=e||t;return r.$isEmpty(n)||jo.test(n)}}function qr(e,t,n,r){g(n.name)&&t.attr("name",u());var i=function(e){t[0].checked&&r.$setViewValue(n.value,e&&e.type)};t.on("click",i),r.$render=function(){var e=n.value;t[0].checked=e==r.$viewValue},n.$observe("value",r.$render)}function Vr(e,t,n,i,o){var a;if(v(i)){if(a=e(i),!a.constant)throw r("ngModel")("constexpr","Expected constant expression for `{0}`, but saw `{1}`.",n,i);return a(t)}return o}function Fr(e,t,n,r,i,o,a,c){var s=Vr(c,e,"ngTrueValue",n.ngTrueValue,!0),u=Vr(c,e,"ngFalseValue",n.ngFalseValue,!1),l=function(e){r.$setViewValue(t[0].checked,e&&e.type)};t.on("click",l),r.$render=function(){t[0].checked=r.$viewValue},r.$isEmpty=function(e){return e===!1},r.$formatters.push(function(e){return j(e,s)}),r.$parsers.push(function(e){return e?s:u})}function Lr(e,t){return e="ngClass"+e,["$animate",function(n){function r(e,t){var n=[];e:for(var r=0;r<e.length;r++){for(var i=e[r],o=0;o<t.length;o++)if(i==t[o])continue e;n.push(i)}return n}function i(e){if(li(e))return e;if(y(e))return e.split(" ");if(b(e)){var t=[];return o(e,function(e,n){e&&(t=t.concat(n.split(" ")))}),t}return e}return{restrict:"AC",link:function(a,c,s){function u(e){var t=d(e,1);s.$addClass(t)}function l(e){var t=d(e,-1);s.$removeClass(t)}function d(e,t){var n=c.data("$classCounts")||{},r=[];return o(e,function(e){(t>0||n[e])&&(n[e]=(n[e]||0)+t,n[e]===+(t>0)&&r.push(e))}),c.data("$classCounts",n),r.join(" ")}function f(e,t){var i=r(t,e),o=r(e,t);i=d(i,1),o=d(o,-1),i&&i.length&&n.addClass(c,i),o&&o.length&&n.removeClass(c,o)}function m(e){if(t===!0||a.$index%2===t){var n=i(e||[]);if(p){if(!j(e,p)){var r=i(p);f(r,n)}}else u(n)}p=P(e)}var p;a.$watch(s[e],m,!0),s.$observe("class",function(){m(a.$eval(s[e]))}),"ngClass"!==e&&a.$watch("$index",function(n,r){var o=1&n;if(o!==(1&r)){var c=i(a.$eval(s[e]));o===t?u(c):l(c)}})}}}]}function Ur(e){function t(e,t,s){t===n?r("$pending",e,s):i("$pending",e,s),N(t)?t?(d(c.$error,e,s),l(c.$$success,e,s)):(l(c.$error,e,s),d(c.$$success,e,s)):(d(c.$error,e,s),d(c.$$success,e,s)),c.$pending?(o(ga,!0),c.$valid=c.$invalid=n,a("",null)):(o(ga,!1),c.$valid=Br(c.$error),c.$invalid=!c.$valid,a("",c.$valid));var u;u=c.$pending&&c.$pending[e]?n:c.$error[e]?!1:c.$$success[e]?!0:null,a(e,u),f.$setValidity(e,u,c)}function r(e,t,n){c[e]||(c[e]={}),l(c[e],t,n)}function i(e,t,r){c[e]&&d(c[e],t,r),Br(c[e])&&(c[e]=n)}function o(e,t){t&&!u[e]?(m.addClass(s,e),u[e]=!0):!t&&u[e]&&(m.removeClass(s,e),u[e]=!1)}function a(e,t){e=e?"-"+nt(e,"-"):"",o(da+e,t===!0),o(fa+e,t===!1)}var c=e.ctrl,s=e.$element,u={},l=e.set,d=e.unset,f=e.parentForm,m=e.$animate;u[fa]=!(u[da]=s.hasClass(da)),c.$setValidity=t}function Br(e){if(e)for(var t in e)return!1;return!0}var Gr=/^\/(.+)\/([a-z]*)$/,zr="validity",Wr=function(e){return y(e)?e.toLowerCase():e},Yr=Object.prototype.hasOwnProperty,Kr=function(e){return y(e)?e.toUpperCase():e},Xr=function(e){return y(e)?e.replace(/[A-Z]/g,function(e){return String.fromCharCode(32|e.charCodeAt(0))}):e},Jr=function(e){return y(e)?e.replace(/[a-z]/g,function(e){return String.fromCharCode(-33&e.charCodeAt(0))}):e};"i"!=="I".toLowerCase()&&(Wr=Xr,Kr=Jr);var Zr,Qr,ei,ti,ni=[].slice,ri=[].splice,ii=[].push,oi=Object.prototype.toString,ai=r("ng"),ci=e.angular||(e.angular={}),si=0;Zr=t.documentMode,p.$inject=[],h.$inject=[];var ui,li=Array.isArray,di=function(e){return y(e)?e.trim():e},fi=function(e){return e.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")},mi=function(){if(v(mi.isActive_))return mi.isActive_;var e=!(!t.querySelector("[ng-csp]")&&!t.querySelector("[data-ng-csp]"));if(!e)try{new Function("")}catch(n){e=!0}return mi.isActive_=e},pi=["ng-","data-ng-","ng:","x-ng-"],hi=/[A-Z]/g,$i=!1,gi=1,vi=3,bi=8,yi=9,Ei=11,wi={full:"1.3.13",major:1,minor:3,dot:13,codeName:"meticulous-riffleshuffle"};yt.expando="ng339";var Ai=yt.cache={},xi=1,Mi=function(e,t,n){e.addEventListener(t,n,!1)},Ci=function(e,t,n){e.removeEventListener(t,n,!1)};yt._data=function(e){return this.cache[e[this.expando]]||{}};var ki=/([\:\-\_]+(.))/g,Ti=/^moz([A-Z])/,Si={mouseleave:"mouseout",mouseenter:"mouseover"},Ni=r("jqLite"),Oi=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,_i=/<|&#?\w+;/,Di=/<([\w:]+)/,Hi=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,Ii={option:[1,'<select multiple="multiple">',"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Ii.optgroup=Ii.option,Ii.tbody=Ii.tfoot=Ii.colgroup=Ii.caption=Ii.thead,Ii.th=Ii.td;var Ri=yt.prototype={ready:function(n){function r(){i||(i=!0,n())}var i=!1;"complete"===t.readyState?setTimeout(r):(this.on("DOMContentLoaded",r),yt(e).on("load",r))},toString:function(){var e=[];return o(this,function(t){e.push(""+t)}),"["+e.join(", ")+"]"},eq:function(e){return Qr(e>=0?this[e]:this[this.length+e])},length:0,push:ii,sort:[].sort,splice:[].splice},Pi={};o("multiple,selected,checked,disabled,readOnly,required,open".split(","),function(e){Pi[Wr(e)]=e});var ji={};o("input,select,option,textarea,button,form,details".split(","),function(e){ji[e]=!0});var qi={ngMinlength:"minlength",ngMaxlength:"maxlength",ngMin:"min",ngMax:"max",ngPattern:"pattern"};o({data:Ct,removeData:xt},function(e,t){yt[t]=e}),o({data:Ct,inheritedData:_t,scope:function(e){return Qr.data(e,"$scope")||_t(e.parentNode||e,["$isolateScope","$scope"])},isolateScope:function(e){return Qr.data(e,"$isolateScope")||Qr.data(e,"$isolateScopeNoTemplate")},controller:Ot,injector:function(e){return _t(e,"$injector")},removeAttr:function(e,t){e.removeAttribute(t)},hasClass:kt,css:function(e,t,n){return t=ht(t),v(n)?void(e.style[t]=n):e.style[t]},attr:function(e,t,r){var i=Wr(t);if(Pi[i]){if(!v(r))return e[t]||(e.attributes.getNamedItem(t)||p).specified?i:n;r?(e[t]=!0,e.setAttribute(t,i)):(e[t]=!1,e.removeAttribute(i))}else if(v(r))e.setAttribute(t,r);else if(e.getAttribute){var o=e.getAttribute(t,2);return null===o?n:o}},prop:function(e,t,n){return v(n)?void(e[t]=n):e[t]},text:function(){function e(e,t){if(g(t)){var n=e.nodeType;return n===gi||n===vi?e.textContent:""}e.textContent=t}return e.$dv="",e}(),val:function(e,t){if(g(t)){if(e.multiple&&"select"===H(e)){var n=[];return o(e.options,function(e){e.selected&&n.push(e.value||e.text)}),0===n.length?null:n}return e.value}e.value=t},html:function(e,t){return g(t)?e.innerHTML:(wt(e,!0),void(e.innerHTML=t))},empty:Dt},function(e,t){yt.prototype[t]=function(t,r){var i,o,a=this.length;if(e!==Dt&&(2==e.length&&e!==kt&&e!==Ot?t:r)===n){if(b(t)){for(i=0;a>i;i++)if(e===Ct)e(this[i],t);else for(o in t)e(this[i],o,t[o]);return this}for(var c=e.$dv,s=c===n?Math.min(a,1):a,u=0;s>u;u++){var l=e(this[u],t,r);c=c?c+l:l}return c}for(i=0;a>i;i++)e(this[i],t,r);return this}}),o({removeData:xt,on:function Ga(e,t,n,r){if(v(r))throw Ni("onargs","jqLite#on() does not support the `selector` or `eventData` parameters");if(gt(e)){var i=Mt(e,!0),o=i.events,a=i.handle;a||(a=i.handle=jt(e,o));for(var c=t.indexOf(" ")>=0?t.split(" "):[t],s=c.length;s--;){t=c[s];var u=o[t];u||(o[t]=[],"mouseenter"===t||"mouseleave"===t?Ga(e,Si[t],function(e){var n=this,r=e.relatedTarget;(!r||r!==n&&!n.contains(r))&&a(e,t)}):"$destroy"!==t&&Mi(e,t,a),u=o[t]),u.push(n)}}},off:At,one:function(e,t,n){e=Qr(e),e.on(t,function r(){e.off(t,n),e.off(t,r)}),e.on(t,n)},replaceWith:function(e,t){var n,r=e.parentNode;wt(e),o(new yt(t),function(t){n?r.insertBefore(t,n.nextSibling):r.replaceChild(t,e),n=t})},children:function(e){var t=[];return o(e.childNodes,function(e){e.nodeType===gi&&t.push(e)}),t},contents:function(e){return e.contentDocument||e.childNodes||[]},append:function(e,t){var n=e.nodeType;if(n===gi||n===Ei){t=new yt(t);for(var r=0,i=t.length;i>r;r++){var o=t[r];e.appendChild(o)}}},prepend:function(e,t){if(e.nodeType===gi){var n=e.firstChild;o(new yt(t),function(t){e.insertBefore(t,n)})}},wrap:function(e,t){t=Qr(t).eq(0).clone()[0];var n=e.parentNode;n&&n.replaceChild(t,e),t.appendChild(e)},remove:Ht,detach:function(e){Ht(e,!0)},after:function(e,t){var n=e,r=e.parentNode;t=new yt(t);for(var i=0,o=t.length;o>i;i++){var a=t[i];r.insertBefore(a,n.nextSibling),n=a}},addClass:St,removeClass:Tt,toggleClass:function(e,t,n){t&&o(t.split(" "),function(t){var r=n;g(r)&&(r=!kt(e,t)),(r?St:Tt)(e,t)})},parent:function(e){var t=e.parentNode;return t&&t.nodeType!==Ei?t:null},next:function(e){return e.nextElementSibling},find:function(e,t){return e.getElementsByTagName?e.getElementsByTagName(t):[]},clone:Et,triggerHandler:function(e,t,n){var r,i,a,c=t.type||t,s=Mt(e),u=s&&s.events,l=u&&u[c];l&&(r={preventDefault:function(){this.defaultPrevented=!0},isDefaultPrevented:function(){return this.defaultPrevented===!0},stopImmediatePropagation:function(){this.immediatePropagationStopped=!0},isImmediatePropagationStopped:function(){return this.immediatePropagationStopped===!0},stopPropagation:p,type:c,target:e},t.type&&(r=d(r,t)),i=P(l),a=n?[r].concat(n):[r],o(i,function(t){r.isImmediatePropagationStopped()||t.apply(e,a)}))}},function(e,t){yt.prototype[t]=function(t,n,r){for(var i,o=0,a=this.length;a>o;o++)g(i)?(i=e(this[o],t,n,r),v(i)&&(i=Qr(i))):Nt(i,e(this[o],t,n,r));return v(i)?i:this},yt.prototype.bind=yt.prototype.on,yt.prototype.unbind=yt.prototype.off}),Ft.prototype={put:function(e,t){this[Vt(e,this.nextUid)]=t},get:function(e){return this[Vt(e,this.nextUid)]},remove:function(e){var t=this[e=Vt(e,this.nextUid)];return delete this[e],t}};var Vi=/^function\s*[^\(]*\(\s*([^\)]*)\)/m,Fi=/,/,Li=/^\s*(_?)(\S+?)\1\s*$/,Ui=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,Bi=r("$injector");Bt.$$annotate=Ut;var Gi=r("$animate"),zi=["$provide",function(e){this.$$selectors={},this.register=function(t,n){var r=t+"-animation";if(t&&"."!=t.charAt(0))throw Gi("notcsel","Expecting class selector starting with '.' got '{0}'.",t);this.$$selectors[t.substr(1)]=r,e.factory(r,n)},this.classNameFilter=function(e){return 1===arguments.length&&(this.$$classNameFilter=e instanceof RegExp?e:null),this.$$classNameFilter},this.$get=["$$q","$$asyncCallback","$rootScope",function(e,t,n){function r(t){var r,i=e.defer();return i.promise.$$cancelFn=function(){r&&r()},n.$$postDigest(function(){r=t(function(){i.resolve()})}),i.promise}function i(e,t){var n=[],r=[],i=ut();return o((e.attr("class")||"").split(/\s+/),function(e){i[e]=!0}),o(t,function(e,t){var o=i[t];e===!1&&o?r.push(t):e!==!0||o||n.push(t)}),n.length+r.length>0&&[n.length?n:null,r.length?r:null]}function a(e,t,n){for(var r=0,i=t.length;i>r;++r){var o=t[r];e[o]=n}}function c(){return u||(u=e.defer(),t(function(){u.resolve(),u=null})),u.promise}function s(e,t){if(ci.isObject(t)){var n=d(t.from||{},t.to||{});e.css(n)}}var u;return{animate:function(e,t,n){return s(e,{from:t,to:n}),c()},enter:function(e,t,n,r){return s(e,r),n?n.after(e):t.prepend(e),c()},leave:function(e){return e.remove(),c()},move:function(e,t,n,r){return this.enter(e,t,n,r)},addClass:function(e,t,n){return this.setClass(e,t,[],n)},$$addClassImmediately:function(e,t,n){return e=Qr(e),t=y(t)?t:li(t)?t.join(" "):"",o(e,function(e){St(e,t)}),s(e,n),c()},removeClass:function(e,t,n){return this.setClass(e,[],t,n)},$$removeClassImmediately:function(e,t,n){return e=Qr(e),t=y(t)?t:li(t)?t.join(" "):"",o(e,function(e){Tt(e,t)}),s(e,n),c()},setClass:function(e,t,n,o){var c=this,s="$$animateClasses",u=!1;e=Qr(e);var l=e.data(s);l?o&&l.options&&(l.options=ci.extend(l.options||{},o)):(l={classes:{},options:o},u=!0);var d=l.classes;return t=li(t)?t:t.split(" "),n=li(n)?n:n.split(" "),a(d,t,!0),a(d,n,!1),u&&(l.promise=r(function(t){var n=e.data(s);if(e.removeData(s),n){var r=i(e,n.classes);r&&c.$$setClassImmediately(e,r[0],r[1],n.options)}t()}),e.data(s,l)),l.promise},$$setClassImmediately:function(e,t,n,r){return t&&this.$$addClassImmediately(e,t),n&&this.$$removeClassImmediately(e,n),s(e,r),c()
},enabled:p,cancel:p}}]}],Wi=r("$compile");Jt.$inject=["$provide","$$sanitizeUriProvider"];var Yi=/^((?:x|data)[\:\-_])/i,Ki=r("$controller"),Xi="application/json",Ji={"Content-Type":Xi+";charset=utf-8"},Zi=/^\[|^\{(?!\{)/,Qi={"[":/]$/,"{":/}$/},eo=/^\)\]\}',?\n/,to=r("$interpolate"),no=/^([^\?#]*)(\?([^#]*))?(#(.*))?$/,ro={http:80,https:443,ftp:21},io=r("$location"),oo={$$html5:!1,$$replace:!1,absUrl:Sn("$$absUrl"),url:function(e){if(g(e))return this.$$url;var t=no.exec(e);return(t[1]||""===e)&&this.path(decodeURIComponent(t[1])),(t[2]||t[1]||""===e)&&this.search(t[3]||""),this.hash(t[5]||""),this},protocol:Sn("$$protocol"),host:Sn("$$host"),port:Sn("$$port"),path:Nn("$$path",function(e){return e=null!==e?e.toString():"","/"==e.charAt(0)?e:"/"+e}),search:function(e,t){switch(arguments.length){case 0:return this.$$search;case 1:if(y(e)||E(e))e=e.toString(),this.$$search=W(e);else{if(!b(e))throw io("isrcharg","The first argument of the `$location#search()` call must be a string or an object.");e=R(e,{}),o(e,function(t,n){null==t&&delete e[n]}),this.$$search=e}break;default:g(t)||null===t?delete this.$$search[e]:this.$$search[e]=t}return this.$$compose(),this},hash:Nn("$$hash",function(e){return null!==e?e.toString():""}),replace:function(){return this.$$replace=!0,this}};o([Tn,kn,Cn],function(e){e.prototype=Object.create(oo),e.prototype.state=function(t){if(!arguments.length)return this.$$state;if(e!==Cn||!this.$$html5)throw io("nostate","History API state support is available only in HTML5 mode and only in browsers supporting HTML5 History API");return this.$$state=g(t)?null:t,this}});var ao=r("$parse"),co=Function.prototype.call,so=Function.prototype.apply,uo=Function.prototype.bind,lo=ut();o({"null":function(){return null},"true":function(){return!0},"false":function(){return!1},undefined:function(){}},function(e,t){e.constant=e.literal=e.sharedGetter=!0,lo[t]=e}),lo["this"]=function(e){return e},lo["this"].sharedGetter=!0;var fo=d(ut(),{"+":function(e,t,r,i){return r=r(e,t),i=i(e,t),v(r)?v(i)?r+i:r:v(i)?i:n},"-":function(e,t,n,r){return n=n(e,t),r=r(e,t),(v(n)?n:0)-(v(r)?r:0)},"*":function(e,t,n,r){return n(e,t)*r(e,t)},"/":function(e,t,n,r){return n(e,t)/r(e,t)},"%":function(e,t,n,r){return n(e,t)%r(e,t)},"===":function(e,t,n,r){return n(e,t)===r(e,t)},"!==":function(e,t,n,r){return n(e,t)!==r(e,t)},"==":function(e,t,n,r){return n(e,t)==r(e,t)},"!=":function(e,t,n,r){return n(e,t)!=r(e,t)},"<":function(e,t,n,r){return n(e,t)<r(e,t)},">":function(e,t,n,r){return n(e,t)>r(e,t)},"<=":function(e,t,n,r){return n(e,t)<=r(e,t)},">=":function(e,t,n,r){return n(e,t)>=r(e,t)},"&&":function(e,t,n,r){return n(e,t)&&r(e,t)},"||":function(e,t,n,r){return n(e,t)||r(e,t)},"!":function(e,t,n){return!n(e,t)},"=":!0,"|":!0}),mo={n:"\n",f:"\f",r:"\r",t:"	",v:"","'":"'",'"':'"'},po=function(e){this.options=e};po.prototype={constructor:po,lex:function(e){for(this.text=e,this.index=0,this.tokens=[];this.index<this.text.length;){var t=this.text.charAt(this.index);if('"'===t||"'"===t)this.readString(t);else if(this.isNumber(t)||"."===t&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdent(t))this.readIdent();else if(this.is(t,"(){}[].,;:?"))this.tokens.push({index:this.index,text:t}),this.index++;else if(this.isWhitespace(t))this.index++;else{var n=t+this.peek(),r=n+this.peek(2),i=fo[t],o=fo[n],a=fo[r];if(i||o||a){var c=a?r:o?n:t;this.tokens.push({index:this.index,text:c,operator:!0}),this.index+=c.length}else this.throwError("Unexpected next character ",this.index,this.index+1)}}return this.tokens},is:function(e,t){return-1!==t.indexOf(e)},peek:function(e){var t=e||1;return this.index+t<this.text.length?this.text.charAt(this.index+t):!1},isNumber:function(e){return e>="0"&&"9">=e&&"string"==typeof e},isWhitespace:function(e){return" "===e||"\r"===e||"	"===e||"\n"===e||""===e||" "===e},isIdent:function(e){return e>="a"&&"z">=e||e>="A"&&"Z">=e||"_"===e||"$"===e},isExpOperator:function(e){return"-"===e||"+"===e||this.isNumber(e)},throwError:function(e,t,n){n=n||this.index;var r=v(t)?"s "+t+"-"+this.index+" ["+this.text.substring(t,n)+"]":" "+n;throw ao("lexerr","Lexer Error: {0} at column{1} in expression [{2}].",e,r,this.text)},readNumber:function(){for(var e="",t=this.index;this.index<this.text.length;){var n=Wr(this.text.charAt(this.index));if("."==n||this.isNumber(n))e+=n;else{var r=this.peek();if("e"==n&&this.isExpOperator(r))e+=n;else if(this.isExpOperator(n)&&r&&this.isNumber(r)&&"e"==e.charAt(e.length-1))e+=n;else{if(!this.isExpOperator(n)||r&&this.isNumber(r)||"e"!=e.charAt(e.length-1))break;this.throwError("Invalid exponent")}}this.index++}this.tokens.push({index:t,text:e,constant:!0,value:Number(e)})},readIdent:function(){for(var e=this.index;this.index<this.text.length;){var t=this.text.charAt(this.index);if(!this.isIdent(t)&&!this.isNumber(t))break;this.index++}this.tokens.push({index:e,text:this.text.slice(e,this.index),identifier:!0})},readString:function(e){var t=this.index;this.index++;for(var n="",r=e,i=!1;this.index<this.text.length;){var o=this.text.charAt(this.index);if(r+=o,i){if("u"===o){var a=this.text.substring(this.index+1,this.index+5);a.match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+a+"]"),this.index+=4,n+=String.fromCharCode(parseInt(a,16))}else{var c=mo[o];n+=c||o}i=!1}else if("\\"===o)i=!0;else{if(o===e)return this.index++,void this.tokens.push({index:t,text:r,constant:!0,value:n});n+=o}this.index++}this.throwError("Unterminated quote",t)}};var ho=function(e,t,n){this.lexer=e,this.$filter=t,this.options=n};ho.ZERO=d(function(){return 0},{sharedGetter:!0,constant:!0}),ho.prototype={constructor:ho,parse:function(e){this.text=e,this.tokens=this.lexer.lex(e);var t=this.statements();return 0!==this.tokens.length&&this.throwError("is an unexpected token",this.tokens[0]),t.literal=!!t.literal,t.constant=!!t.constant,t},primary:function(){var e;this.expect("(")?(e=this.filterChain(),this.consume(")")):this.expect("[")?e=this.arrayDeclaration():this.expect("{")?e=this.object():this.peek().identifier&&this.peek().text in lo?e=lo[this.consume().text]:this.peek().identifier?e=this.identifier():this.peek().constant?e=this.constant():this.throwError("not a primary expression",this.peek());for(var t,n;t=this.expect("(","[",".");)"("===t.text?(e=this.functionCall(e,n),n=null):"["===t.text?(n=e,e=this.objectIndex(e)):"."===t.text?(n=e,e=this.fieldAccess(e)):this.throwError("IMPOSSIBLE");return e},throwError:function(e,t){throw ao("syntax","Syntax Error: Token '{0}' {1} at column {2} of the expression [{3}] starting at [{4}].",t.text,e,t.index+1,this.text,this.text.substring(t.index))},peekToken:function(){if(0===this.tokens.length)throw ao("ueoe","Unexpected end of expression: {0}",this.text);return this.tokens[0]},peek:function(e,t,n,r){return this.peekAhead(0,e,t,n,r)},peekAhead:function(e,t,n,r,i){if(this.tokens.length>e){var o=this.tokens[e],a=o.text;if(a===t||a===n||a===r||a===i||!t&&!n&&!r&&!i)return o}return!1},expect:function(e,t,n,r){var i=this.peek(e,t,n,r);return i?(this.tokens.shift(),i):!1},consume:function(e){if(0===this.tokens.length)throw ao("ueoe","Unexpected end of expression: {0}",this.text);var t=this.expect(e);return t||this.throwError("is unexpected, expecting ["+e+"]",this.peek()),t},unaryFn:function(e,t){var n=fo[e];return d(function(e,r){return n(e,r,t)},{constant:t.constant,inputs:[t]})},binaryFn:function(e,t,n,r){var i=fo[t];return d(function(t,r){return i(t,r,e,n)},{constant:e.constant&&n.constant,inputs:!r&&[e,n]})},identifier:function(){for(var e=this.consume().text;this.peek(".")&&this.peekAhead(1).identifier&&!this.peekAhead(2,"(");)e+=this.consume().text+this.consume().text;return Fn(e,this.options,this.text)},constant:function(){var e=this.consume().value;return d(function(){return e},{constant:!0,literal:!0})},statements:function(){for(var e=[];;)if(this.tokens.length>0&&!this.peek("}",")",";","]")&&e.push(this.filterChain()),!this.expect(";"))return 1===e.length?e[0]:function(t,n){for(var r,i=0,o=e.length;o>i;i++)r=e[i](t,n);return r}},filterChain:function(){for(var e,t=this.expression();e=this.expect("|");)t=this.filter(t);return t},filter:function(e){var t,r,i=this.$filter(this.consume().text);if(this.peek(":"))for(t=[],r=[];this.expect(":");)t.push(this.expression());var o=[e].concat(t||[]);return d(function(o,a){var c=e(o,a);if(r){r[0]=c;for(var s=t.length;s--;)r[s+1]=t[s](o,a);return i.apply(n,r)}return i(c)},{constant:!i.$stateful&&o.every(Rn),inputs:!i.$stateful&&o})},expression:function(){return this.assignment()},assignment:function(){var e,t,n=this.ternary();return(t=this.expect("="))?(n.assign||this.throwError("implies assignment but ["+this.text.substring(0,t.index)+"] can not be assigned to",t),e=this.ternary(),d(function(t,r){return n.assign(t,e(t,r),r)},{inputs:[n,e]})):n},ternary:function(){var e,t,n=this.logicalOR();if((t=this.expect("?"))&&(e=this.assignment(),this.consume(":"))){var r=this.assignment();return d(function(t,i){return n(t,i)?e(t,i):r(t,i)},{constant:n.constant&&e.constant&&r.constant})}return n},logicalOR:function(){for(var e,t=this.logicalAND();e=this.expect("||");)t=this.binaryFn(t,e.text,this.logicalAND(),!0);return t},logicalAND:function(){for(var e,t=this.equality();e=this.expect("&&");)t=this.binaryFn(t,e.text,this.equality(),!0);return t},equality:function(){for(var e,t=this.relational();e=this.expect("==","!=","===","!==");)t=this.binaryFn(t,e.text,this.relational());return t},relational:function(){for(var e,t=this.additive();e=this.expect("<",">","<=",">=");)t=this.binaryFn(t,e.text,this.additive());return t},additive:function(){for(var e,t=this.multiplicative();e=this.expect("+","-");)t=this.binaryFn(t,e.text,this.multiplicative());return t},multiplicative:function(){for(var e,t=this.unary();e=this.expect("*","/","%");)t=this.binaryFn(t,e.text,this.unary());return t},unary:function(){var e;return this.expect("+")?this.primary():(e=this.expect("-"))?this.binaryFn(ho.ZERO,e.text,this.unary()):(e=this.expect("!"))?this.unaryFn(e.text,this.unary()):this.primary()},fieldAccess:function(e){var t=this.identifier();return d(function(r,i,o){var a=o||e(r,i);return null==a?n:t(a)},{assign:function(n,r,i){var o=e(n,i);return o||e.assign(n,o={},i),t.assign(o,r)}})},objectIndex:function(e){var t=this.text,r=this.expression();return this.consume("]"),d(function(i,o){var a,c=e(i,o),s=r(i,o);return Dn(s,t),c?a=Hn(c[s],t):n},{assign:function(n,i,o){var a=Dn(r(n,o),t),c=Hn(e(n,o),t);return c||e.assign(n,c={},o),c[a]=i}})},functionCall:function(e,t){var r=[];if(")"!==this.peekToken().text)do r.push(this.expression());while(this.expect(","));this.consume(")");var i=this.text,o=r.length?[]:null;return function(a,c){var s=t?t(a,c):v(t)?n:a,u=e(a,c,s)||p;if(o)for(var l=r.length;l--;)o[l]=Hn(r[l](a,c),i);Hn(s,i),In(u,i);var d=u.apply?u.apply(s,o):u(o[0],o[1],o[2],o[3],o[4]);return o&&(o.length=0),Hn(d,i)}},arrayDeclaration:function(){var e=[];if("]"!==this.peekToken().text)do{if(this.peek("]"))break;e.push(this.expression())}while(this.expect(","));return this.consume("]"),d(function(t,n){for(var r=[],i=0,o=e.length;o>i;i++)r.push(e[i](t,n));return r},{literal:!0,constant:e.every(Rn),inputs:e})},object:function(){var e=[],t=[];if("}"!==this.peekToken().text)do{if(this.peek("}"))break;var n=this.consume();n.constant?e.push(n.value):n.identifier?e.push(n.text):this.throwError("invalid key",n),this.consume(":"),t.push(this.expression())}while(this.expect(","));return this.consume("}"),d(function(n,r){for(var i={},o=0,a=t.length;a>o;o++)i[e[o]]=t[o](n,r);return i},{literal:!0,constant:t.every(Rn),inputs:t})}};var $o=ut(),go=ut(),vo=Object.prototype.valueOf,bo=r("$sce"),yo={HTML:"html",CSS:"css",URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"},Wi=r("$compile"),Eo=t.createElement("a"),wo=ir(e.location.href);cr.$inject=["$provide"],dr.$inject=["$locale"],fr.$inject=["$locale"];var Ao=".",xo={yyyy:hr("FullYear",4),yy:hr("FullYear",2,0,!0),y:hr("FullYear",1),MMMM:$r("Month"),MMM:$r("Month",!0),MM:hr("Month",2,1),M:hr("Month",1,1),dd:hr("Date",2),d:hr("Date",1),HH:hr("Hours",2),H:hr("Hours",1),hh:hr("Hours",2,-12),h:hr("Hours",1,-12),mm:hr("Minutes",2),m:hr("Minutes",1),ss:hr("Seconds",2),s:hr("Seconds",1),sss:hr("Milliseconds",3),EEEE:$r("Day"),EEE:$r("Day",!0),a:Er,Z:gr,ww:yr(2),w:yr(1)},Mo=/((?:[^yMdHhmsaZEw']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|w+))(.*)/,Co=/^\-?\d+$/;wr.$inject=["$locale"];var ko=$(Wr),To=$(Kr);Mr.$inject=["$parse"];var So=$({restrict:"E",compile:function(e,t){return t.href||t.xlinkHref||t.name?void 0:function(e,t){if("a"===t[0].nodeName.toLowerCase()){var n="[object SVGAnimatedString]"===oi.call(t.prop("href"))?"xlink:href":"href";t.on("click",function(e){t.attr(n)||e.preventDefault()})}}}}),No={};o(Pi,function(e,t){if("multiple"!=e){var n=Zt("ng-"+t);No[n]=function(){return{restrict:"A",priority:100,link:function(e,r,i){e.$watch(i[n],function(e){i.$set(t,!!e)})}}}}}),o(qi,function(e,t){No[t]=function(){return{priority:100,link:function(e,n,r){if("ngPattern"===t&&"/"==r.ngPattern.charAt(0)){var i=r.ngPattern.match(Gr);if(i)return void r.$set("ngPattern",new RegExp(i[1],i[2]))}e.$watch(r[t],function(e){r.$set(t,e)})}}}}),o(["src","srcset","href"],function(e){var t=Zt("ng-"+e);No[t]=function(){return{priority:99,link:function(n,r,i){var o=e,a=e;"href"===e&&"[object SVGAnimatedString]"===oi.call(r.prop("href"))&&(a="xlinkHref",i.$attr[a]="xlink:href",o=null),i.$observe(t,function(t){return t?(i.$set(a,t),void(Zr&&o&&r.prop(o,i[a]))):void("href"===e&&i.$set(a,null))})}}}});var Oo={$addControl:p,$$renameControl:kr,$removeControl:p,$setValidity:p,$setDirty:p,$setPristine:p,$setSubmitted:p},_o="ng-submitted";Tr.$inject=["$element","$attrs","$scope","$animate","$interpolate"];var Do=function(e){return["$timeout",function(t){var r={name:"form",restrict:e?"EAC":"E",controller:Tr,compile:function(e){return e.addClass(ma).addClass(da),{pre:function(e,r,i,o){if(!("action"in i)){var a=function(t){e.$apply(function(){o.$commitViewValue(),o.$setSubmitted()}),t.preventDefault()};Mi(r[0],"submit",a),r.on("$destroy",function(){t(function(){Ci(r[0],"submit",a)},0,!1)})}var c=o.$$parentForm,s=o.$name;s&&(Pn(e,null,s,o,s),i.$observe(i.name?"name":"ngForm",function(t){s!==t&&(Pn(e,null,s,n,s),s=t,Pn(e,null,s,o,s),c.$$renameControl(o,s))})),r.on("$destroy",function(){c.$removeControl(o),s&&Pn(e,null,s,n,s),d(o,Oo)})}}}};return r}]},Ho=Do(),Io=Do(!0),Ro=/\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/,Po=/^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/,jo=/^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i,qo=/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/,Vo=/^(\d{4})-(\d{2})-(\d{2})$/,Fo=/^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,Lo=/^(\d{4})-W(\d\d)$/,Uo=/^(\d{4})-(\d\d)$/,Bo=/^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,Go={text:Nr,date:Hr("date",Vo,Dr(Vo,["yyyy","MM","dd"]),"yyyy-MM-dd"),"datetime-local":Hr("datetimelocal",Fo,Dr(Fo,["yyyy","MM","dd","HH","mm","ss","sss"]),"yyyy-MM-ddTHH:mm:ss.sss"),time:Hr("time",Bo,Dr(Bo,["HH","mm","ss","sss"]),"HH:mm:ss.sss"),week:Hr("week",Lo,_r,"yyyy-Www"),month:Hr("month",Uo,Dr(Uo,["yyyy","MM"]),"yyyy-MM"),number:Rr,url:Pr,email:jr,radio:qr,checkbox:Fr,hidden:p,button:p,submit:p,reset:p,file:p},zo=["$browser","$sniffer","$filter","$parse",function(e,t,n,r){return{restrict:"E",require:["?ngModel"],link:{pre:function(i,o,a,c){c[0]&&(Go[Wr(a.type)]||Go.text)(i,o,a,c[0],t,e,n,r)}}}}],Wo=/^(true|false|\d+)$/,Yo=function(){return{restrict:"A",priority:100,compile:function(e,t){return Wo.test(t.ngValue)?function(e,t,n){n.$set("value",e.$eval(n.ngValue))}:function(e,t,n){e.$watch(n.ngValue,function(e){n.$set("value",e)})}}}},Ko=["$compile",function(e){return{restrict:"AC",compile:function(t){return e.$$addBindingClass(t),function(t,r,i){e.$$addBindingInfo(r,i.ngBind),r=r[0],t.$watch(i.ngBind,function(e){r.textContent=e===n?"":e})}}}}],Xo=["$interpolate","$compile",function(e,t){return{compile:function(r){return t.$$addBindingClass(r),function(r,i,o){var a=e(i.attr(o.$attr.ngBindTemplate));t.$$addBindingInfo(i,a.expressions),i=i[0],o.$observe("ngBindTemplate",function(e){i.textContent=e===n?"":e})}}}}],Jo=["$sce","$parse","$compile",function(e,t,n){return{restrict:"A",compile:function(r,i){var o=t(i.ngBindHtml),a=t(i.ngBindHtml,function(e){return(e||"").toString()});return n.$$addBindingClass(r),function(t,r,i){n.$$addBindingInfo(r,i.ngBindHtml),t.$watch(a,function(){r.html(e.getTrustedHtml(o(t))||"")})}}}}],Zo=$({restrict:"A",require:"ngModel",link:function(e,t,n,r){r.$viewChangeListeners.push(function(){e.$eval(n.ngChange)})}}),Qo=Lr("",!0),ea=Lr("Odd",0),ta=Lr("Even",1),na=Cr({compile:function(e,t){t.$set("ngCloak",n),e.removeClass("ng-cloak")}}),ra=[function(){return{restrict:"A",scope:!0,controller:"@",priority:500}}],ia={},oa={blur:!0,focus:!0};o("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(e){var t=Zt("ng-"+e);ia[t]=["$parse","$rootScope",function(n,r){return{restrict:"A",compile:function(i,o){var a=n(o[t],null,!0);return function(t,n){n.on(e,function(n){var i=function(){a(t,{$event:n})};oa[e]&&r.$$phase?t.$evalAsync(i):t.$apply(i)})}}}}]});var aa=["$animate",function(e){return{multiElement:!0,transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(n,r,i,o,a){var c,s,u;n.$watch(i.ngIf,function(n){n?s||a(function(n,o){s=o,n[n.length++]=t.createComment(" end ngIf: "+i.ngIf+" "),c={clone:n},e.enter(n,r.parent(),r)}):(u&&(u.remove(),u=null),s&&(s.$destroy(),s=null),c&&(u=st(c.clone),e.leave(u).then(function(){u=null}),c=null))})}}}],ca=["$templateRequest","$anchorScroll","$animate","$sce",function(e,t,n,r){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",controller:ci.noop,compile:function(i,o){var a=o.ngInclude||o.src,c=o.onload||"",s=o.autoscroll;return function(i,o,u,l,d){var f,m,p,h=0,$=function(){m&&(m.remove(),m=null),f&&(f.$destroy(),f=null),p&&(n.leave(p).then(function(){m=null}),m=p,p=null)};i.$watch(r.parseAsResourceUrl(a),function(r){var a=function(){!v(s)||s&&!i.$eval(s)||t()},u=++h;r?(e(r,!0).then(function(e){if(u===h){var t=i.$new();l.template=e;var s=d(t,function(e){$(),n.enter(e,null,o).then(a)});f=t,p=s,f.$emit("$includeContentLoaded",r),i.$eval(c)}},function(){u===h&&($(),i.$emit("$includeContentError",r))}),i.$emit("$includeContentRequested",r)):($(),l.template=null)})}}}}],sa=["$compile",function(e){return{restrict:"ECA",priority:-400,require:"ngInclude",link:function(n,r,i,o){return/SVG/.test(r[0].toString())?(r.empty(),void e(vt(o.template,t).childNodes)(n,function(e){r.append(e)},{futureParentElement:r})):(r.html(o.template),void e(r.contents())(n))}}}],ua=Cr({priority:450,compile:function(){return{pre:function(e,t,n){e.$eval(n.ngInit)}}}}),la=function(){return{restrict:"A",priority:100,require:"ngModel",link:function(e,t,r,i){var a=t.attr(r.$attr.ngList)||", ",c="false"!==r.ngTrim,s=c?di(a):a,u=function(e){if(!g(e)){var t=[];return e&&o(e.split(s),function(e){e&&t.push(c?di(e):e)}),t}};i.$parsers.push(u),i.$formatters.push(function(e){return li(e)?e.join(a):n}),i.$isEmpty=function(e){return!e||!e.length}}}},da="ng-valid",fa="ng-invalid",ma="ng-pristine",pa="ng-dirty",ha="ng-untouched",$a="ng-touched",ga="ng-pending",va=new r("ngModel"),ba=["$scope","$exceptionHandler","$attrs","$element","$parse","$animate","$timeout","$rootScope","$q","$interpolate",function(e,t,r,i,a,c,s,u,l,d){this.$viewValue=Number.NaN,this.$modelValue=Number.NaN,this.$$rawModelValue=n,this.$validators={},this.$asyncValidators={},this.$parsers=[],this.$formatters=[],this.$viewChangeListeners=[],this.$untouched=!0,this.$touched=!1,this.$pristine=!0,this.$dirty=!1,this.$valid=!0,this.$invalid=!1,this.$error={},this.$$success={},this.$pending=n,this.$name=d(r.name||"",!1)(e);var f=a(r.ngModel),m=f.assign,h=f,$=m,b=null,y=this;this.$$setOptions=function(e){if(y.$options=e,e&&e.getterSetter){var t=a(r.ngModel+"()"),n=a(r.ngModel+"($$$p)");h=function(e){var n=f(e);return A(n)&&(n=t(e)),n},$=function(e){A(f(e))?n(e,{$$$p:y.$modelValue}):m(e,y.$modelValue)}}else if(!f.assign)throw va("nonassign","Expression '{0}' is non-assignable. Element: {1}",r.ngModel,G(i))},this.$render=p,this.$isEmpty=function(e){return g(e)||""===e||null===e||e!==e};var w=i.inheritedData("$formController")||Oo,x=0;Ur({ctrl:this,$element:i,set:function(e,t){e[t]=!0},unset:function(e,t){delete e[t]},parentForm:w,$animate:c}),this.$setPristine=function(){y.$dirty=!1,y.$pristine=!0,c.removeClass(i,pa),c.addClass(i,ma)},this.$setDirty=function(){y.$dirty=!0,y.$pristine=!1,c.removeClass(i,ma),c.addClass(i,pa),w.$setDirty()},this.$setUntouched=function(){y.$touched=!1,y.$untouched=!0,c.setClass(i,ha,$a)},this.$setTouched=function(){y.$touched=!0,y.$untouched=!1,c.setClass(i,$a,ha)},this.$rollbackViewValue=function(){s.cancel(b),y.$viewValue=y.$$lastCommittedViewValue,y.$render()},this.$validate=function(){if(!E(y.$modelValue)||!isNaN(y.$modelValue)){var e=y.$$lastCommittedViewValue,t=y.$$rawModelValue,r=y.$$parserName||"parse",i=y.$error[r]?!1:n,o=y.$valid,a=y.$modelValue,c=y.$options&&y.$options.allowInvalid;y.$$runValidators(i,t,e,function(e){c||o===e||(y.$modelValue=e?t:n,y.$modelValue!==a&&y.$$writeModelToScope())})}},this.$$runValidators=function(e,t,r,i){function a(e){var t=y.$$parserName||"parse";if(e===n)u(t,null);else if(u(t,e),!e)return o(y.$validators,function(e,t){u(t,null)}),o(y.$asyncValidators,function(e,t){u(t,null)}),!1;return!0}function c(){var e=!0;return o(y.$validators,function(n,i){var o=n(t,r);e=e&&o,u(i,o)}),e?!0:(o(y.$asyncValidators,function(e,t){u(t,null)}),!1)}function s(){var e=[],i=!0;o(y.$asyncValidators,function(o,a){var c=o(t,r);if(!O(c))throw va("$asyncValidators","Expected asynchronous validator to return a promise but got '{0}' instead.",c);u(a,n),e.push(c.then(function(){u(a,!0)},function(){i=!1,u(a,!1)}))}),e.length?l.all(e).then(function(){d(i)},p):d(!0)}function u(e,t){f===x&&y.$setValidity(e,t)}function d(e){f===x&&i(e)}x++;var f=x;return a(e)&&c()?void s():void d(!1)},this.$commitViewValue=function(){var e=y.$viewValue;s.cancel(b),(y.$$lastCommittedViewValue!==e||""===e&&y.$$hasNativeValidators)&&(y.$$lastCommittedViewValue=e,y.$pristine&&this.$setDirty(),this.$$parseAndValidate())},this.$$parseAndValidate=function(){function t(){y.$modelValue!==c&&y.$$writeModelToScope()}var r=y.$$lastCommittedViewValue,i=r,o=g(i)?n:!0;if(o)for(var a=0;a<y.$parsers.length;a++)if(i=y.$parsers[a](i),g(i)){o=!1;break}E(y.$modelValue)&&isNaN(y.$modelValue)&&(y.$modelValue=h(e));var c=y.$modelValue,s=y.$options&&y.$options.allowInvalid;y.$$rawModelValue=i,s&&(y.$modelValue=i,t()),y.$$runValidators(o,i,y.$$lastCommittedViewValue,function(e){s||(y.$modelValue=e?i:n,t())})},this.$$writeModelToScope=function(){$(e,y.$modelValue),o(y.$viewChangeListeners,function(e){try{e()}catch(n){t(n)}})},this.$setViewValue=function(e,t){y.$viewValue=e,(!y.$options||y.$options.updateOnDefault)&&y.$$debounceViewValueCommit(t)},this.$$debounceViewValueCommit=function(t){var n,r=0,i=y.$options;i&&v(i.debounce)&&(n=i.debounce,E(n)?r=n:E(n[t])?r=n[t]:E(n["default"])&&(r=n["default"])),s.cancel(b),r?b=s(function(){y.$commitViewValue()},r):u.$$phase?y.$commitViewValue():e.$apply(function(){y.$commitViewValue()})},e.$watch(function(){var t=h(e);if(t!==y.$modelValue){y.$modelValue=y.$$rawModelValue=t;for(var r=y.$formatters,i=r.length,o=t;i--;)o=r[i](o);y.$viewValue!==o&&(y.$viewValue=y.$$lastCommittedViewValue=o,y.$render(),y.$$runValidators(n,t,o,p))}return t})}],ya=["$rootScope",function(e){return{restrict:"A",require:["ngModel","^?form","^?ngModelOptions"],controller:ba,priority:1,compile:function(t){return t.addClass(ma).addClass(ha).addClass(da),{pre:function(e,t,n,r){var i=r[0],o=r[1]||Oo;i.$$setOptions(r[2]&&r[2].$options),o.$addControl(i),n.$observe("name",function(e){i.$name!==e&&o.$$renameControl(i,e)}),e.$on("$destroy",function(){o.$removeControl(i)})},post:function(t,n,r,i){var o=i[0];o.$options&&o.$options.updateOn&&n.on(o.$options.updateOn,function(e){o.$$debounceViewValueCommit(e&&e.type)}),n.on("blur",function(){o.$touched||(e.$$phase?t.$evalAsync(o.$setTouched):t.$apply(o.$setTouched))})}}}}}],Ea=/(\s+|^)default(\s+|$)/,wa=function(){return{restrict:"A",controller:["$scope","$attrs",function(e,t){var r=this;this.$options=e.$eval(t.ngModelOptions),this.$options.updateOn!==n?(this.$options.updateOnDefault=!1,this.$options.updateOn=di(this.$options.updateOn.replace(Ea,function(){return r.$options.updateOnDefault=!0," "}))):this.$options.updateOnDefault=!0}]}},Aa=Cr({terminal:!0,priority:1e3}),xa=["$locale","$interpolate",function(e,t){var n=/{}/g,r=/^when(Minus)?(.+)$/;return{restrict:"EA",link:function(i,a,c){function s(e){a.text(e||"")}var u,l=c.count,d=c.$attr.when&&a.attr(c.$attr.when),f=c.offset||0,m=i.$eval(d)||{},p={},h=t.startSymbol(),$=t.endSymbol(),g=h+l+"-"+f+$,v=ci.noop;o(c,function(e,t){var n=r.exec(t);if(n){var i=(n[1]?"-":"")+Wr(n[2]);m[i]=a.attr(c.$attr[t])}}),o(m,function(e,r){p[r]=t(e.replace(n,g))}),i.$watch(l,function(t){var n=parseFloat(t),r=isNaN(n);r||n in m||(n=e.pluralCat(n-f)),n===u||r&&isNaN(u)||(v(),v=i.$watch(p[n],s),u=n)})}}}],Ma=["$parse","$animate",function(e,a){var c="$$NG_REMOVED",s=r("ngRepeat"),u=function(e,t,n,r,i,o,a){e[n]=r,i&&(e[i]=o),e.$index=t,e.$first=0===t,e.$last=t===a-1,e.$middle=!(e.$first||e.$last),e.$odd=!(e.$even=0===(1&t))},l=function(e){return e.clone[0]},d=function(e){return e.clone[e.clone.length-1]};return{restrict:"A",multiElement:!0,transclude:"element",priority:1e3,terminal:!0,$$tlb:!0,compile:function(r,f){var m=f.ngRepeat,p=t.createComment(" end ngRepeat: "+m+" "),h=m.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);if(!h)throw s("iexp","Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",m);var $=h[1],g=h[2],v=h[3],b=h[4];if(h=$.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/),!h)throw s("iidexp","'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",$);var y=h[3]||h[1],E=h[2];if(v&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(v)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(v)))throw s("badident","alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",v);var w,A,x,M,C={$id:Vt};return b?w=e(b):(x=function(e,t){return Vt(t)},M=function(e){return e}),function(e,t,r,f,h){w&&(A=function(t,n,r){return E&&(C[E]=t),C[y]=n,C.$index=r,w(e,C)});var $=ut();e.$watchCollection(g,function(r){var f,g,b,w,C,k,T,S,N,O,_,D,H=t[0],I=ut();if(v&&(e[v]=r),i(r))N=r,S=A||x;else{S=A||M,N=[];for(var R in r)r.hasOwnProperty(R)&&"$"!=R.charAt(0)&&N.push(R);N.sort()}for(w=N.length,_=new Array(w),f=0;w>f;f++)if(C=r===N?f:N[f],k=r[C],T=S(C,k,f),$[T])O=$[T],delete $[T],I[T]=O,_[f]=O;else{if(I[T])throw o(_,function(e){e&&e.scope&&($[e.id]=e)}),s("dupes","Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",m,T,k);_[f]={id:T,scope:n,clone:n},I[T]=!0}for(var P in $){if(O=$[P],D=st(O.clone),a.leave(D),D[0].parentNode)for(f=0,g=D.length;g>f;f++)D[f][c]=!0;O.scope.$destroy()}for(f=0;w>f;f++)if(C=r===N?f:N[f],k=r[C],O=_[f],O.scope){b=H;do b=b.nextSibling;while(b&&b[c]);l(O)!=b&&a.move(st(O.clone),null,Qr(H)),H=d(O),u(O.scope,f,y,k,E,C,w)}else h(function(e,t){O.scope=t;var n=p.cloneNode(!1);e[e.length++]=n,a.enter(e,null,Qr(H)),H=n,O.clone=e,I[O.id]=O,u(O.scope,f,y,k,E,C,w)});$=I})}}}}],Ca="ng-hide",ka="ng-hide-animate",Ta=["$animate",function(e){return{restrict:"A",multiElement:!0,link:function(t,n,r){t.$watch(r.ngShow,function(t){e[t?"removeClass":"addClass"](n,Ca,{tempClasses:ka})})}}}],Sa=["$animate",function(e){return{restrict:"A",multiElement:!0,link:function(t,n,r){t.$watch(r.ngHide,function(t){e[t?"addClass":"removeClass"](n,Ca,{tempClasses:ka})})}}}],Na=Cr(function(e,t,n){e.$watchCollection(n.ngStyle,function(e,n){n&&e!==n&&o(n,function(e,n){t.css(n,"")}),e&&t.css(e)})}),Oa=["$animate",function(e){return{restrict:"EA",require:"ngSwitch",controller:["$scope",function(){this.cases={}}],link:function(n,r,i,a){var c=i.ngSwitch||i.on,s=[],u=[],l=[],d=[],f=function(e,t){return function(){e.splice(t,1)}};n.$watch(c,function(n){var r,i;for(r=0,i=l.length;i>r;++r)e.cancel(l[r]);for(l.length=0,r=0,i=d.length;i>r;++r){var c=st(u[r].clone);d[r].$destroy();var m=l[r]=e.leave(c);m.then(f(l,r))}u.length=0,d.length=0,(s=a.cases["!"+n]||a.cases["?"])&&o(s,function(n){n.transclude(function(r,i){d.push(i);var o=n.element;r[r.length++]=t.createComment(" end ngSwitchWhen: ");var a={clone:r};u.push(a),e.enter(r,o.parent(),o)})})})}}}],_a=Cr({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,n,r,i){r.cases["!"+n.ngSwitchWhen]=r.cases["!"+n.ngSwitchWhen]||[],r.cases["!"+n.ngSwitchWhen].push({transclude:i,element:t})}}),Da=Cr({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,n,r,i){r.cases["?"]=r.cases["?"]||[],r.cases["?"].push({transclude:i,element:t})}}),Ha=Cr({restrict:"EAC",link:function(e,t,n,i,o){if(!o)throw r("ngTransclude")("orphan","Illegal use of ngTransclude directive in the template! No parent directive that requires a transclusion found. Element: {0}",G(t));o(function(e){t.empty(),t.append(e)})}}),Ia=["$templateCache",function(e){return{restrict:"E",terminal:!0,compile:function(t,n){if("text/ng-template"==n.type){var r=n.id,i=t[0].text;e.put(r,i)}}}}],Ra=r("ngOptions"),Pa=$({restrict:"A",terminal:!0}),ja=["$compile","$parse",function(e,r){var i=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,c={$setViewValue:p};return{restrict:"E",require:["select","?ngModel"],controller:["$element","$scope","$attrs",function(e,t,n){var r,i,o=this,a={},s=c;o.databound=n.ngModel,o.init=function(e,t,n){s=e,r=t,i=n},o.addOption=function(t,n){at(t,'"option value"'),a[t]=!0,s.$viewValue==t&&(e.val(t),i.parent()&&i.remove()),n&&n[0].hasAttribute("selected")&&(n[0].selected=!0)},o.removeOption=function(e){this.hasOption(e)&&(delete a[e],s.$viewValue===e&&this.renderUnknownOption(e))},o.renderUnknownOption=function(t){var n="? "+Vt(t)+" ?";i.val(n),e.prepend(i),e.val(n),i.prop("selected",!0)},o.hasOption=function(e){return a.hasOwnProperty(e)},t.$on("$destroy",function(){o.renderUnknownOption=p})}],link:function(c,s,u,l){function d(e,t,n,r){n.$render=function(){var e=n.$viewValue;r.hasOption(e)?(M.parent()&&M.remove(),t.val(e),""===e&&p.prop("selected",!0)):g(e)&&p?t.val(""):r.renderUnknownOption(e)},t.on("change",function(){e.$apply(function(){M.parent()&&M.remove(),n.$setViewValue(t.val())})})}function f(e,t,n){var r;n.$render=function(){var e=new Ft(n.$viewValue);o(t.find("option"),function(t){t.selected=v(e.get(t.value))})},e.$watch(function(){j(r,n.$viewValue)||(r=P(n.$viewValue),n.$render())}),t.on("change",function(){e.$apply(function(){var e=[];o(t.find("option"),function(t){t.selected&&e.push(t.value)}),n.$setViewValue(e)})})}function m(t,c,s){function u(e,n,r){return j[k]=r,N&&(j[N]=n),e(t,j)}function l(){t.$apply(function(){var e,n=D(t)||[];if(b)e=[],o(c.val(),function(t){t=I?R[t]:t,e.push(d(t,n[t]))});else{var r=I?R[c.val()]:c.val();e=d(r,n[r])}s.$setViewValue(e),g()})}function d(e,t){if("?"===e)return n;if(""===e)return null;var r=S?S:_;return u(r,e,t)}function f(){var e,n=D(t);if(n&&li(n)){e=new Array(n.length);for(var r=0,i=n.length;i>r;r++)e[r]=u(C,r,n[r]);return e}if(n){e={};for(var o in n)n.hasOwnProperty(o)&&(e[o]=u(C,o,n[o]))}return e}function m(e){var t;if(b)if(I&&li(e)){t=new Ft([]);for(var n=0;n<e.length;n++)t.put(u(I,null,e[n]),!0)}else t=new Ft(e);else I&&(e=u(I,null,e));
return function(n,r){var i;return i=I?I:S?S:_,b?v(t.remove(u(i,n,r))):e===u(i,n,r)}}function p(){w||(t.$$postDigest(g),w=!0)}function $(e,t,n){e[t]=e[t]||0,e[t]+=n?1:-1}function g(){w=!1;var e,n,r,i,l,d,f,p,g,y,M,k,T,S,_,H,q,V={"":[]},F=[""],L=s.$viewValue,U=D(t)||[],B=N?a(U):U,G={},z=m(L),W=!1;for(R={},k=0;y=B.length,y>k;k++)f=k,N&&(f=B[k],"$"===f.charAt(0))||(p=U[f],e=u(O,f,p)||"",(n=V[e])||(n=V[e]=[],F.push(e)),T=z(f,p),W=W||T,H=u(C,f,p),H=v(H)?H:"",q=I?I(t,j):N?B[k]:k,I&&(R[q]=f),n.push({id:q,label:H,selected:T}));for(b||(E||null===L?V[""].unshift({id:"",label:"",selected:!W}):W||V[""].unshift({id:"?",label:"",selected:!0})),M=0,g=F.length;g>M;M++){for(e=F[M],n=V[e],P.length<=M?(i={element:x.clone().attr("label",e),label:n.label},l=[i],P.push(l),c.append(i.element)):(l=P[M],i=l[0],i.label!=e&&i.element.attr("label",i.label=e)),S=null,k=0,y=n.length;y>k;k++)r=n[k],(d=l[k+1])?(S=d.element,d.label!==r.label&&($(G,d.label,!1),$(G,r.label,!0),S.text(d.label=r.label),S.prop("label",d.label)),d.id!==r.id&&S.val(d.id=r.id),S[0].selected!==r.selected&&(S.prop("selected",d.selected=r.selected),Zr&&S.prop("selected",d.selected))):(""===r.id&&E?_=E:(_=A.clone()).val(r.id).prop("selected",r.selected).attr("selected",r.selected).prop("label",r.label).text(r.label),l.push(d={element:_,label:r.label,id:r.id,selected:r.selected}),$(G,r.label,!0),S?S.after(_):i.element.append(_),S=_);for(k++;l.length>k;)r=l.pop(),$(G,r.label,!1),r.element.remove()}for(;P.length>M;){for(n=P.pop(),k=1;k<n.length;++k)$(G,n[k].label,!1);n[0].element.remove()}o(G,function(e,t){e>0?h.addOption(t):0>e&&h.removeOption(t)})}var M;if(!(M=y.match(i)))throw Ra("iexp","Expected expression in form of '_select_ (as _label_)? for (_key_,)?_value_ in _collection_' but got '{0}'. Element: {1}",y,G(c));var C=r(M[2]||M[1]),k=M[4]||M[6],T=/ as /.test(M[0])&&M[1],S=T?r(T):null,N=M[5],O=r(M[3]||""),_=r(M[2]?M[1]:k),D=r(M[7]),H=M[8],I=H?r(M[8]):null,R={},P=[[{element:c,label:""}]],j={};E&&(e(E)(t),E.removeClass("ng-scope"),E.remove()),c.empty(),c.on("change",l),s.$render=g,t.$watchCollection(D,p),t.$watchCollection(f,p),b&&t.$watchCollection(function(){return s.$modelValue},p)}if(l[1]){for(var p,h=l[0],$=l[1],b=u.multiple,y=u.ngOptions,E=!1,w=!1,A=Qr(t.createElement("option")),x=Qr(t.createElement("optgroup")),M=A.clone(),C=0,k=s.children(),T=k.length;T>C;C++)if(""===k[C].value){p=E=k.eq(C);break}h.init($,E,M),b&&($.$isEmpty=function(e){return!e||0===e.length}),y?m(c,s,$):b?f(c,s,$):d(c,s,$,h)}}}}],qa=["$interpolate",function(e){var t={addOption:p,removeOption:p};return{restrict:"E",priority:100,compile:function(n,r){if(g(r.value)){var i=e(n.text(),!0);i||r.$set("value",n.text())}return function(e,n,r){var o="$selectController",a=n.parent(),c=a.data(o)||a.parent().data(o);c&&c.databound||(c=t),i?e.$watch(i,function(e,t){r.$set("value",e),t!==e&&c.removeOption(t),c.addOption(e,n)}):c.addOption(r.value,n),n.on("$destroy",function(){c.removeOption(r.value)})}}}}],Va=$({restrict:"E",terminal:!1}),Fa=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){r&&(n.required=!0,r.$validators.required=function(e,t){return!n.required||!r.$isEmpty(t)},n.$observe("required",function(){r.$validate()}))}}},La=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,i,o){if(o){var a,c=i.ngPattern||i.pattern;i.$observe("pattern",function(e){if(y(e)&&e.length>0&&(e=new RegExp("^"+e+"$")),e&&!e.test)throw r("ngPattern")("noregexp","Expected {0} to be a RegExp but was {1}. Element: {2}",c,e,G(t));a=e||n,o.$validate()}),o.$validators.pattern=function(e){return o.$isEmpty(e)||g(a)||a.test(e)}}}}},Ua=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){if(r){var i=-1;n.$observe("maxlength",function(e){var t=f(e);i=isNaN(t)?-1:t,r.$validate()}),r.$validators.maxlength=function(e,t){return 0>i||r.$isEmpty(t)||t.length<=i}}}}},Ba=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){if(r){var i=0;n.$observe("minlength",function(e){i=f(e)||0,r.$validate()}),r.$validators.minlength=function(e,t){return r.$isEmpty(t)||t.length>=i}}}}};return e.angular.bootstrap?void console.log("WARNING: Tried to load angular more than once."):(rt(),mt(ci),void Qr(t).ready(function(){Z(t,Q)}))}(window,document),!window.angular.$$csp()&&window.angular.element(document).find("head").prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}</style>'),/**
 * State-based routing for AngularJS
 * @version v0.2.13
 * @link http://angular-ui.github.com/
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
"undefined"!=typeof module&&"undefined"!=typeof exports&&module.exports===exports&&(module.exports="ui.router"),function(e,t,n){"use strict";function r(e,t){return j(new(j(function(){},{prototype:e})),t)}function i(e){return P(arguments,function(t){t!==e&&P(t,function(t,n){e.hasOwnProperty(n)||(e[n]=t)})}),e}function o(e,t){var n=[];for(var r in e.path){if(e.path[r]!==t.path[r])break;n.push(e.path[r])}return n}function a(e){if(Object.keys)return Object.keys(e);var n=[];return t.forEach(e,function(e,t){n.push(t)}),n}function c(e,t){if(Array.prototype.indexOf)return e.indexOf(t,Number(arguments[2])||0);var n=e.length>>>0,r=Number(arguments[2])||0;for(r=0>r?Math.ceil(r):Math.floor(r),0>r&&(r+=n);n>r;r++)if(r in e&&e[r]===t)return r;return-1}function s(e,t,n,r){var i,s=o(n,r),u={},l=[];for(var d in s)if(s[d].params&&(i=a(s[d].params),i.length))for(var f in i)c(l,i[f])>=0||(l.push(i[f]),u[i[f]]=e[i[f]]);return j({},u,t)}function u(e,t,n){if(!n){n=[];for(var r in e)n.push(r)}for(var i=0;i<n.length;i++){var o=n[i];if(e[o]!=t[o])return!1}return!0}function l(e,t){var n={};return P(e,function(e){n[e]=t[e]}),n}function d(e){var t={},n=Array.prototype.concat.apply(Array.prototype,Array.prototype.slice.call(arguments,1));for(var r in e)-1==c(n,r)&&(t[r]=e[r]);return t}function f(e,t){var n=R(e),r=n?[]:{};return P(e,function(e,i){t(e,i)&&(r[n?r.length:i]=e)}),r}function m(e,t){var n=R(e)?[]:{};return P(e,function(e,r){n[r]=t(e,r)}),n}function p(e,t){var r=1,o=2,s={},u=[],l=s,f=j(e.when(s),{$$promises:s,$$values:s});this.study=function(s){function m(e,n){if(v[n]!==o){if(g.push(n),v[n]===r)throw g.splice(0,c(g,n)),new Error("Cyclic dependency: "+g.join(" -> "));if(v[n]=r,H(e))$.push(n,[function(){return t.get(e)}],u);else{var i=t.annotate(e);P(i,function(e){e!==n&&s.hasOwnProperty(e)&&m(s[e],e)}),$.push(n,e,i)}g.pop(),v[n]=o}}function p(e){return I(e)&&e.then&&e.$$promises}if(!I(s))throw new Error("'invocables' must be an object");var h=a(s||{}),$=[],g=[],v={};return P(s,m),s=g=v=null,function(r,o,a){function c(){--y||(E||i(b,o.$$values),g.$$values=b,g.$$promises=g.$$promises||!0,delete g.$$inheritedValues,m.resolve(b))}function s(e){g.$$failure=e,m.reject(e)}function u(n,i,o){function u(e){d.reject(e),s(e)}function l(){if(!_(g.$$failure))try{d.resolve(t.invoke(i,a,b)),d.promise.then(function(e){b[n]=e,c()},u)}catch(e){u(e)}}var d=e.defer(),f=0;P(o,function(e){v.hasOwnProperty(e)&&!r.hasOwnProperty(e)&&(f++,v[e].then(function(t){b[e]=t,--f||l()},u))}),f||l(),v[n]=d.promise}if(p(r)&&a===n&&(a=o,o=r,r=null),r){if(!I(r))throw new Error("'locals' must be an object")}else r=l;if(o){if(!p(o))throw new Error("'parent' must be a promise returned by $resolve.resolve()")}else o=f;var m=e.defer(),g=m.promise,v=g.$$promises={},b=j({},r),y=1+$.length/3,E=!1;if(_(o.$$failure))return s(o.$$failure),g;o.$$inheritedValues&&i(b,d(o.$$inheritedValues,h)),j(v,o.$$promises),o.$$values?(E=i(b,d(o.$$values,h)),g.$$inheritedValues=d(o.$$values,h),c()):(o.$$inheritedValues&&(g.$$inheritedValues=d(o.$$inheritedValues,h)),o.then(c,s));for(var w=0,A=$.length;A>w;w+=3)r.hasOwnProperty($[w])?c():u($[w],$[w+1],$[w+2]);return g}},this.resolve=function(e,t,n,r){return this.study(e)(t,n,r)}}function h(e,t,n){this.fromConfig=function(e,t,n){return _(e.template)?this.fromString(e.template,t):_(e.templateUrl)?this.fromUrl(e.templateUrl,t):_(e.templateProvider)?this.fromProvider(e.templateProvider,t,n):null},this.fromString=function(e,t){return D(e)?e(t):e},this.fromUrl=function(n,r){return D(n)&&(n=n(r)),null==n?null:e.get(n,{cache:t,headers:{Accept:"text/html"}}).then(function(e){return e.data})},this.fromProvider=function(e,t,r){return n.invoke(e,null,r||{params:t})}}function $(e,t,i){function o(t,n,r,i){if($.push(t),p[t])return p[t];if(!/^\w+(-+\w+)*(?:\[\])?$/.test(t))throw new Error("Invalid parameter name '"+t+"' in pattern '"+e+"'");if(h[t])throw new Error("Duplicate parameter name '"+t+"' in pattern '"+e+"'");return h[t]=new V.Param(t,n,r,i),h[t]}function a(e,t,n){var r=["",""],i=e.replace(/[\\\[\]\^$*+?.()|{}]/g,"\\$&");if(!t)return i;switch(n){case!1:r=["(",")"];break;case!0:r=["?(",")?"];break;default:r=["("+n+"|",")?"]}return i+r[0]+t+r[1]}function c(n,i){var o,a,c,s,u;return o=n[2]||n[3],u=t.params[o],c=e.substring(f,n.index),a=i?n[4]:n[4]||("*"==n[1]?".*":null),s=V.type(a||"string")||r(V.type("string"),{pattern:new RegExp(a)}),{id:o,regexp:a,segment:c,type:s,cfg:u}}t=j({params:{}},I(t)?t:{});var s,u=/([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,l=/([:]?)([\w\[\]-]+)|\{([\w\[\]-]+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,d="^",f=0,m=this.segments=[],p=i?i.params:{},h=this.params=i?i.params.$$new():new V.ParamSet,$=[];this.source=e;for(var g,v,b;(s=u.exec(e))&&(g=c(s,!1),!(g.segment.indexOf("?")>=0));)v=o(g.id,g.type,g.cfg,"path"),d+=a(g.segment,v.type.pattern.source,v.squash),m.push(g.segment),f=u.lastIndex;b=e.substring(f);var y=b.indexOf("?");if(y>=0){var E=this.sourceSearch=b.substring(y);if(b=b.substring(0,y),this.sourcePath=e.substring(0,f+y),E.length>0)for(f=0;s=l.exec(E);)g=c(s,!0),v=o(g.id,g.type,g.cfg,"search"),f=u.lastIndex}else this.sourcePath=e,this.sourceSearch="";d+=a(b)+(t.strict===!1?"/?":"")+"$",m.push(b),this.regexp=new RegExp(d,t.caseInsensitive?"i":n),this.prefix=m[0],this.$$paramNames=$}function g(e){j(this,e)}function v(){function e(e){return null!=e?e.toString().replace(/\//g,"%2F"):e}function i(e){return null!=e?e.toString().replace(/%2F/g,"/"):e}function o(e){return this.pattern.test(e)}function s(){return{strict:b,caseInsensitive:h}}function u(e){return D(e)||R(e)&&D(e[e.length-1])}function l(){for(;A.length;){var e=A.shift();if(e.pattern)throw new Error("You cannot override a type's .pattern at runtime.");t.extend(E[e.name],p.invoke(e.def))}}function d(e){j(this,e||{})}V=this;var p,h=!1,b=!0,y=!1,E={},w=!0,A=[],x={string:{encode:e,decode:i,is:o,pattern:/[^/]*/},"int":{encode:e,decode:function(e){return parseInt(e,10)},is:function(e){return _(e)&&this.decode(e.toString())===e},pattern:/\d+/},bool:{encode:function(e){return e?1:0},decode:function(e){return 0!==parseInt(e,10)},is:function(e){return e===!0||e===!1},pattern:/0|1/},date:{encode:function(e){return this.is(e)?[e.getFullYear(),("0"+(e.getMonth()+1)).slice(-2),("0"+e.getDate()).slice(-2)].join("-"):n},decode:function(e){if(this.is(e))return e;var t=this.capture.exec(e);return t?new Date(t[1],t[2]-1,t[3]):n},is:function(e){return e instanceof Date&&!isNaN(e.valueOf())},equals:function(e,t){return this.is(e)&&this.is(t)&&e.toISOString()===t.toISOString()},pattern:/[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,capture:/([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/},json:{encode:t.toJson,decode:t.fromJson,is:t.isObject,equals:t.equals,pattern:/[^/]*/},any:{encode:t.identity,decode:t.identity,is:t.identity,equals:t.equals,pattern:/.*/}};v.$$getDefaultValue=function(e){if(!u(e.value))return e.value;if(!p)throw new Error("Injectable functions cannot be called at configuration time");return p.invoke(e.value)},this.caseInsensitive=function(e){return _(e)&&(h=e),h},this.strictMode=function(e){return _(e)&&(b=e),b},this.defaultSquashPolicy=function(e){if(!_(e))return y;if(e!==!0&&e!==!1&&!H(e))throw new Error("Invalid squash policy: "+e+". Valid policies: false, true, arbitrary-string");return y=e,e},this.compile=function(e,t){return new $(e,j(s(),t))},this.isMatcher=function(e){if(!I(e))return!1;var t=!0;return P($.prototype,function(n,r){D(n)&&(t=t&&_(e[r])&&D(e[r]))}),t},this.type=function(e,t,n){if(!_(t))return E[e];if(E.hasOwnProperty(e))throw new Error("A type named '"+e+"' has already been defined.");return E[e]=new g(j({name:e},t)),n&&(A.push({name:e,def:n}),w||l()),this},P(x,function(e,t){E[t]=new g(j({name:t},e))}),E=r(E,{}),this.$get=["$injector",function(e){return p=e,w=!1,l(),P(x,function(e,t){E[t]||(E[t]=new g(e))}),this}],this.Param=function(e,t,r,i){function o(e){var t=I(e)?a(e):[],n=-1===c(t,"value")&&-1===c(t,"type")&&-1===c(t,"squash")&&-1===c(t,"array");return n&&(e={value:e}),e.$$fn=u(e.value)?e.value:function(){return e.value},e}function s(t,n,r){if(t.type&&n)throw new Error("Param '"+e+"' has two type configurations.");return n?n:t.type?t.type instanceof g?t.type:new g(t.type):"config"===r?E.any:E.string}function l(){var t={array:"search"===i?"auto":!1},n=e.match(/\[\]$/)?{array:!0}:{};return j(t,n,r).array}function d(e,t){var n=e.squash;if(!t||n===!1)return!1;if(!_(n)||null==n)return y;if(n===!0||H(n))return n;throw new Error("Invalid squash policy: '"+n+"'. Valid policies: false, true, or arbitrary string")}function h(e,t,r,i){var o,a,s=[{from:"",to:r||t?n:""},{from:null,to:r||t?n:""}];return o=R(e.replace)?e.replace:[],H(i)&&o.push({from:i,to:n}),a=m(o,function(e){return e.from}),f(s,function(e){return-1===c(a,e.from)}).concat(o)}function $(){if(!p)throw new Error("Injectable functions cannot be called at configuration time");return p.invoke(r.$$fn)}function v(e){function t(e){return function(t){return t.from===e}}function n(e){var n=m(f(w.replace,t(e)),function(e){return e.to});return n.length?n[0]:e}return e=n(e),_(e)?w.type.decode(e):$()}function b(){return"{Param:"+e+" "+t+" squash: '"+M+"' optional: "+x+"}"}var w=this;r=o(r),t=s(r,t,i);var A=l();t=A?t.$asArray(A,"search"===i):t,"string"!==t.name||A||"path"!==i||r.value!==n||(r.value="");var x=r.value!==n,M=d(r,x),C=h(r,A,x,M);j(this,{id:e,type:t,location:i,array:A,squash:M,replace:C,isOptional:x,value:v,dynamic:n,config:r,toString:b})},d.prototype={$$new:function(){return r(this,j(new d,{$$parent:this}))},$$keys:function(){for(var e=[],t=[],n=this,r=a(d.prototype);n;)t.push(n),n=n.$$parent;return t.reverse(),P(t,function(t){P(a(t),function(t){-1===c(e,t)&&-1===c(r,t)&&e.push(t)})}),e},$$values:function(e){var t={},n=this;return P(n.$$keys(),function(r){t[r]=n[r].value(e&&e[r])}),t},$$equals:function(e,t){var n=!0,r=this;return P(r.$$keys(),function(i){var o=e&&e[i],a=t&&t[i];r[i].type.equals(o,a)||(n=!1)}),n},$$validates:function(e){var t,n,r,i=!0,o=this;return P(this.$$keys(),function(a){r=o[a],n=e[a],t=!n&&r.isOptional,i=i&&(t||!!r.type.is(n))}),i},$$parent:n},this.ParamSet=d}function b(e,r){function i(e){var t=/^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(e.source);return null!=t?t[1].replace(/\\(.)/g,"$1"):""}function o(e,t){return e.replace(/\$(\$|\d{1,2})/,function(e,n){return t["$"===n?0:Number(n)]})}function a(e,t,n){if(!n)return!1;var r=e.invoke(t,t,{$match:n});return _(r)?r:!0}function c(r,i,o,a){function c(e,t,n){return"/"===h?e:t?h.slice(0,-1)+e:n?h.slice(1)+e:e}function f(e){function t(e){var t=e(o,r);return t?(H(t)&&r.replace().url(t),!0):!1}if(!e||!e.defaultPrevented){var i=p&&r.url()===p;if(p=n,i)return!0;var a,c=u.length;for(a=0;c>a;a++)if(t(u[a]))return;l&&t(l)}}function m(){return s=s||i.$on("$locationChangeSuccess",f)}var p,h=a.baseHref(),$=r.url();return d||m(),{sync:function(){f()},listen:function(){return m()},update:function(e){return e?void($=r.url()):void(r.url()!==$&&(r.url($),r.replace()))},push:function(e,t,i){r.url(e.format(t||{})),p=i&&i.$$avoidResync?r.url():n,i&&i.replace&&r.replace()},href:function(n,i,o){if(!n.validates(i))return null;var a=e.html5Mode();t.isObject(a)&&(a=a.enabled);var s=n.format(i);if(o=o||{},a||null===s||(s="#"+e.hashPrefix()+s),s=c(s,a,o.absolute),!o.absolute||!s)return s;var u=!a&&s?"/":"",l=r.port();return l=80===l||443===l?"":":"+l,[r.protocol(),"://",r.host(),l,u,s].join("")}}}var s,u=[],l=null,d=!1;this.rule=function(e){if(!D(e))throw new Error("'rule' must be a function");return u.push(e),this},this.otherwise=function(e){if(H(e)){var t=e;e=function(){return t}}else if(!D(e))throw new Error("'rule' must be a function");return l=e,this},this.when=function(e,t){var n,c=H(t);if(H(e)&&(e=r.compile(e)),!c&&!D(t)&&!R(t))throw new Error("invalid 'handler' in when()");var s={matcher:function(e,t){return c&&(n=r.compile(t),t=["$match",function(e){return n.format(e)}]),j(function(n,r){return a(n,t,e.exec(r.path(),r.search()))},{prefix:H(e.prefix)?e.prefix:""})},regex:function(e,t){if(e.global||e.sticky)throw new Error("when() RegExp must not be global or sticky");return c&&(n=t,t=["$match",function(e){return o(n,e)}]),j(function(n,r){return a(n,t,e.exec(r.path()))},{prefix:i(e)})}},u={matcher:r.isMatcher(e),regex:e instanceof RegExp};for(var l in u)if(u[l])return this.rule(s[l](e,t));throw new Error("invalid 'what' in when()")},this.deferIntercept=function(e){e===n&&(e=!0),d=e},this.$get=c,c.$inject=["$location","$rootScope","$injector","$browser"]}function y(e,i){function o(e){return 0===e.indexOf(".")||0===e.indexOf("^")}function d(e,t){if(!e)return n;var r=H(e),i=r?e:e.name,a=o(i);if(a){if(!t)throw new Error("No reference point given for path '"+i+"'");t=d(t);for(var c=i.split("."),s=0,u=c.length,l=t;u>s;s++)if(""!==c[s]||0!==s){if("^"!==c[s])break;if(!l.parent)throw new Error("Path '"+i+"' not valid for state '"+t.name+"'");l=l.parent}else l=t;c=c.slice(s).join("."),i=l.name+(l.name&&c?".":"")+c}var f=x[i];return!f||!r&&(r||f!==e&&f.self!==e)?n:f}function f(e,t){M[e]||(M[e]=[]),M[e].push(t)}function p(e){for(var t=M[e]||[];t.length;)h(t.shift())}function h(t){t=r(t,{self:t,resolve:t.resolve||{},toString:function(){return this.name}});var n=t.name;if(!H(n)||n.indexOf("@")>=0)throw new Error("State must have a valid name");if(x.hasOwnProperty(n))throw new Error("State '"+n+"'' is already defined");var i=-1!==n.indexOf(".")?n.substring(0,n.lastIndexOf(".")):H(t.parent)?t.parent:I(t.parent)&&H(t.parent.name)?t.parent.name:"";if(i&&!x[i])return f(i,t.self);for(var o in k)D(k[o])&&(t[o]=k[o](t,k.$delegates[o]));return x[n]=t,!t[C]&&t.url&&e.when(t.url,["$match","$stateParams",function(e,n){A.$current.navigable==t&&u(e,n)||A.transitionTo(t,e,{inherit:!0,location:!1})}]),p(n),t}function $(e){return e.indexOf("*")>-1}function g(e){var t=e.split("."),n=A.$current.name.split(".");if("**"===t[0]&&(n=n.slice(c(n,t[1])),n.unshift("**")),"**"===t[t.length-1]&&(n.splice(c(n,t[t.length-2])+1,Number.MAX_VALUE),n.push("**")),t.length!=n.length)return!1;for(var r=0,i=t.length;i>r;r++)"*"===t[r]&&(n[r]="*");return n.join("")===t.join("")}function v(e,t){return H(e)&&!_(t)?k[e]:D(t)&&H(e)?(k[e]&&!k.$delegates[e]&&(k.$delegates[e]=k[e]),k[e]=t,this):this}function b(e,t){return I(e)?t=e:t.name=e,h(t),this}function y(e,i,o,c,f,p,h){function v(t,n,r,o){var a=e.$broadcast("$stateNotFound",t,n,r);if(a.defaultPrevented)return h.update(),k;if(!a.retry)return null;if(o.$retry)return h.update(),T;var c=A.transition=i.when(a.retry);return c.then(function(){return c!==A.transition?y:(t.options.$retry=!0,A.transitionTo(t.to,t.toParams,t.options))},function(){return k}),h.update(),c}function b(e,n,r,a,s,u){var d=r?n:l(e.params.$$keys(),n),m={$stateParams:d};s.resolve=f.resolve(e.resolve,m,s.resolve,e);var p=[s.resolve.then(function(e){s.globals=e})];return a&&p.push(a),P(e.views,function(n,r){var i=n.resolve&&n.resolve!==e.resolve?n.resolve:{};i.$template=[function(){return o.load(r,{view:n,locals:m,params:d,notify:u.notify})||""}],p.push(f.resolve(i,m,s.resolve,e).then(function(o){if(D(n.controllerProvider)||R(n.controllerProvider)){var a=t.extend({},i,m);o.$$controller=c.invoke(n.controllerProvider,null,a)}else o.$$controller=n.controller;o.$$state=e,o.$$controllerAs=n.controllerAs,s[r]=o}))}),i.all(p).then(function(){return s})}var y=i.reject(new Error("transition superseded")),M=i.reject(new Error("transition prevented")),k=i.reject(new Error("transition aborted")),T=i.reject(new Error("transition failed"));return w.locals={resolve:null,globals:{$stateParams:{}}},A={params:{},current:w.self,$current:w,transition:null},A.reload=function(){return A.transitionTo(A.current,p,{reload:!0,inherit:!1,notify:!0})},A.go=function(e,t,n){return A.transitionTo(e,t,j({inherit:!0,relative:A.$current},n))},A.transitionTo=function(t,n,o){n=n||{},o=j({location:!0,inherit:!1,relative:null,notify:!0,reload:!1,$retry:!1},o||{});var a,u=A.$current,f=A.params,m=u.path,$=d(t,o.relative);if(!_($)){var g={to:t,toParams:n,options:o},x=v(g,u.self,f,o);if(x)return x;if(t=g.to,n=g.toParams,o=g.options,$=d(t,o.relative),!_($)){if(!o.relative)throw new Error("No such state '"+t+"'");throw new Error("Could not resolve '"+t+"' from state '"+o.relative+"'")}}if($[C])throw new Error("Cannot transition to abstract state '"+t+"'");if(o.inherit&&(n=s(p,n||{},A.$current,$)),!$.params.$$validates(n))return T;n=$.params.$$values(n),t=$;var k=t.path,S=0,N=k[S],O=w.locals,D=[];if(!o.reload)for(;N&&N===m[S]&&N.ownParams.$$equals(n,f);)O=D[S]=N.locals,S++,N=k[S];if(E(t,u,O,o))return t.self.reloadOnSearch!==!1&&h.update(),A.transition=null,i.when(A.current);if(n=l(t.params.$$keys(),n||{}),o.notify&&e.$broadcast("$stateChangeStart",t.self,n,u.self,f).defaultPrevented)return h.update(),M;for(var H=i.when(O),I=S;I<k.length;I++,N=k[I])O=D[I]=r(O),H=b(N,n,N===t,H,O,o);var R=A.transition=H.then(function(){var r,i,a;if(A.transition!==R)return y;for(r=m.length-1;r>=S;r--)a=m[r],a.self.onExit&&c.invoke(a.self.onExit,a.self,a.locals.globals),a.locals=null;for(r=S;r<k.length;r++)i=k[r],i.locals=D[r],i.self.onEnter&&c.invoke(i.self.onEnter,i.self,i.locals.globals);return A.transition!==R?y:(A.$current=t,A.current=t.self,A.params=n,q(A.params,p),A.transition=null,o.location&&t.navigable&&h.push(t.navigable.url,t.navigable.locals.globals.$stateParams,{$$avoidResync:!0,replace:"replace"===o.location}),o.notify&&e.$broadcast("$stateChangeSuccess",t.self,n,u.self,f),h.update(!0),A.current)},function(r){return A.transition!==R?y:(A.transition=null,a=e.$broadcast("$stateChangeError",t.self,n,u.self,f,r),a.defaultPrevented||h.update(),i.reject(r))});return R},A.is=function(e,t,r){r=j({relative:A.$current},r||{});var i=d(e,r.relative);return _(i)?A.$current!==i?!1:t?u(i.params.$$values(t),p):!0:n},A.includes=function(e,t,r){if(r=j({relative:A.$current},r||{}),H(e)&&$(e)){if(!g(e))return!1;e=A.$current.name}var i=d(e,r.relative);return _(i)?_(A.$current.includes[i.name])?t?u(i.params.$$values(t),p,a(t)):!0:!1:n},A.href=function(e,t,r){r=j({lossy:!0,inherit:!0,absolute:!1,relative:A.$current},r||{});var i=d(e,r.relative);if(!_(i))return null;r.inherit&&(t=s(p,t||{},A.$current,i));var o=i&&r.lossy?i.navigable:i;return o&&o.url!==n&&null!==o.url?h.href(o.url,l(i.params.$$keys(),t||{}),{absolute:r.absolute}):null},A.get=function(e,t){if(0===arguments.length)return m(a(x),function(e){return x[e].self});var n=d(e,t||A.$current);return n&&n.self?n.self:null},A}function E(e,t,n,r){return e!==t||(n!==t.locals||r.reload)&&e.self.reloadOnSearch!==!1?void 0:!0}var w,A,x={},M={},C="abstract",k={parent:function(e){if(_(e.parent)&&e.parent)return d(e.parent);var t=/^(.+)\.[^.]+$/.exec(e.name);return t?d(t[1]):w},data:function(e){return e.parent&&e.parent.data&&(e.data=e.self.data=j({},e.parent.data,e.data)),e.data},url:function(e){var t=e.url,n={params:e.params||{}};if(H(t))return"^"==t.charAt(0)?i.compile(t.substring(1),n):(e.parent.navigable||w).url.concat(t,n);if(!t||i.isMatcher(t))return t;throw new Error("Invalid url '"+t+"' in state '"+e+"'")},navigable:function(e){return e.url?e:e.parent?e.parent.navigable:null},ownParams:function(e){var t=e.url&&e.url.params||new V.ParamSet;return P(e.params||{},function(e,n){t[n]||(t[n]=new V.Param(n,null,e,"config"))}),t},params:function(e){return e.parent&&e.parent.params?j(e.parent.params.$$new(),e.ownParams):new V.ParamSet},views:function(e){var t={};return P(_(e.views)?e.views:{"":e},function(n,r){r.indexOf("@")<0&&(r+="@"+e.parent.name),t[r]=n}),t},path:function(e){return e.parent?e.parent.path.concat(e):[]},includes:function(e){var t=e.parent?j({},e.parent.includes):{};return t[e.name]=!0,t},$delegates:{}};w=h({name:"",url:"^",views:null,"abstract":!0}),w.navigable=null,this.decorator=v,this.state=b,this.$get=y,y.$inject=["$rootScope","$q","$view","$injector","$resolve","$stateParams","$urlRouter","$location","$urlMatcherFactory"]}function E(){function e(e,t){return{load:function(n,r){var i,o={template:null,controller:null,view:null,locals:null,notify:!0,async:!0,params:{}};return r=j(o,r),r.view&&(i=t.fromConfig(r.view,r.params,r.locals)),i&&r.notify&&e.$broadcast("$viewContentLoading",r),i}}}this.$get=e,e.$inject=["$rootScope","$templateFactory"]}function w(){var e=!1;this.useAnchorScroll=function(){e=!0},this.$get=["$anchorScroll","$timeout",function(t,n){return e?t:function(e){n(function(){e[0].scrollIntoView()},0,!1)}}]}function A(e,n,r,i){function o(){return n.has?function(e){return n.has(e)?n.get(e):null}:function(e){try{return n.get(e)}catch(t){return null}}}function a(e,t){var n=function(){return{enter:function(e,t,n){t.after(e),n()},leave:function(e,t){e.remove(),t()}}};if(u)return{enter:function(e,t,n){var r=u.enter(e,null,t,n);r&&r.then&&r.then(n)},leave:function(e,t){var n=u.leave(e,t);n&&n.then&&n.then(t)}};if(s){var r=s&&s(t,e);return{enter:function(e,t,n){r.enter(e,null,t),n()},leave:function(e,t){r.leave(e),t()}}}return n()}var c=o(),s=c("$animator"),u=c("$animate"),l={restrict:"ECA",terminal:!0,priority:400,transclude:"element",compile:function(n,o,c){return function(n,o,s){function u(){d&&(d.remove(),d=null),m&&(m.$destroy(),m=null),f&&(g.leave(f,function(){d=null}),d=f,f=null)}function l(a){var l,d=M(n,s,o,i),v=d&&e.$current&&e.$current.locals[d];if(a||v!==p){l=n.$new(),p=e.$current.locals[d];var b=c(l,function(e){g.enter(e,o,function(){m&&m.$emit("$viewContentAnimationEnded"),(t.isDefined($)&&!$||n.$eval($))&&r(e)}),u()});f=b,m=l,m.$emit("$viewContentLoaded"),m.$eval(h)}}var d,f,m,p,h=s.onload||"",$=s.autoscroll,g=a(s,n);n.$on("$stateChangeSuccess",function(){l(!1)}),n.$on("$viewContentLoading",function(){l(!1)}),l(!0)}}};return l}function x(e,t,n,r){return{restrict:"ECA",priority:-400,compile:function(i){var o=i.html();return function(i,a,c){var s=n.$current,u=M(i,c,a,r),l=s&&s.locals[u];if(l){a.data("$uiView",{name:u,state:l.$$state}),a.html(l.$template?l.$template:o);var d=e(a.contents());if(l.$$controller){l.$scope=i;var f=t(l.$$controller,l);l.$$controllerAs&&(i[l.$$controllerAs]=f),a.data("$ngControllerController",f),a.children().data("$ngControllerController",f)}d(i)}}}}}function M(e,t,n,r){var i=r(t.uiView||t.name||"")(e),o=n.inheritedData("$uiView");return i.indexOf("@")>=0?i:i+"@"+(o?o.state.name:"")}function C(e,t){var n,r=e.match(/^\s*({[^}]*})\s*$/);if(r&&(e=t+"("+r[1]+")"),n=e.replace(/\n/g," ").match(/^([^(]+?)\s*(\((.*)\))?$/),!n||4!==n.length)throw new Error("Invalid state ref '"+e+"'");return{state:n[1],paramExpr:n[3]||null}}function k(e){var t=e.parent().inheritedData("$uiView");return t&&t.state&&t.state.name?t.state:void 0}function T(e,n){var r=["location","inherit","reload"];return{restrict:"A",require:["?^uiSrefActive","?^uiSrefActiveEq"],link:function(i,o,a,c){var s=C(a.uiSref,e.current.name),u=null,l=k(o)||e.$current,d=null,f="A"===o.prop("tagName"),m="FORM"===o[0].nodeName,p=m?"action":"href",h=!0,$={relative:l,inherit:!0},g=i.$eval(a.uiSrefOpts)||{};t.forEach(r,function(e){e in g&&($[e]=g[e])});var v=function(n){if(n&&(u=t.copy(n)),h){d=e.href(s.state,u,$);var r=c[1]||c[0];return r&&r.$$setStateInfo(s.state,u),null===d?(h=!1,!1):void a.$set(p,d)}};s.paramExpr&&(i.$watch(s.paramExpr,function(e){e!==u&&v(e)},!0),u=t.copy(i.$eval(s.paramExpr))),v(),m||o.bind("click",function(t){var r=t.which||t.button;if(!(r>1||t.ctrlKey||t.metaKey||t.shiftKey||o.attr("target"))){var i=n(function(){e.go(s.state,u,$)});t.preventDefault();var a=f&&!d?1:0;t.preventDefault=function(){a--<=0&&n.cancel(i)}}})}}}function S(e,t,n){return{restrict:"A",controller:["$scope","$element","$attrs",function(t,r,i){function o(){a()?r.addClass(u):r.removeClass(u)}function a(){return"undefined"!=typeof i.uiSrefActiveEq?c&&e.is(c.name,s):c&&e.includes(c.name,s)}var c,s,u;u=n(i.uiSrefActiveEq||i.uiSrefActive||"",!1)(t),this.$$setStateInfo=function(t,n){c=e.get(t,k(r)),s=n,o()},t.$on("$stateChangeSuccess",o)}]}}function N(e){var t=function(t){return e.is(t)};return t.$stateful=!0,t}function O(e){var t=function(t){return e.includes(t)};return t.$stateful=!0,t}var _=t.isDefined,D=t.isFunction,H=t.isString,I=t.isObject,R=t.isArray,P=t.forEach,j=t.extend,q=t.copy;t.module("ui.router.util",["ng"]),t.module("ui.router.router",["ui.router.util"]),t.module("ui.router.state",["ui.router.router","ui.router.util"]),t.module("ui.router",["ui.router.state"]),t.module("ui.router.compat",["ui.router"]),p.$inject=["$q","$injector"],t.module("ui.router.util").service("$resolve",p),h.$inject=["$http","$templateCache","$injector"],t.module("ui.router.util").service("$templateFactory",h);var V;$.prototype.concat=function(e,t){var n={caseInsensitive:V.caseInsensitive(),strict:V.strictMode(),squash:V.defaultSquashPolicy()};return new $(this.sourcePath+e+this.sourceSearch,j(n,t),this)},$.prototype.toString=function(){return this.source},$.prototype.exec=function(e,t){function n(e){function t(e){return e.split("").reverse().join("")}function n(e){return e.replace(/\\-/,"-")}var r=t(e).split(/-(?!\\)/),i=m(r,t);return m(i,n).reverse()}var r=this.regexp.exec(e);if(!r)return null;t=t||{};var i,o,a,c=this.parameters(),s=c.length,u=this.segments.length-1,l={};if(u!==r.length-1)throw new Error("Unbalanced capture group in route '"+this.source+"'");for(i=0;u>i;i++){a=c[i];var d=this.params[a],f=r[i+1];for(o=0;o<d.replace;o++)d.replace[o].from===f&&(f=d.replace[o].to);f&&d.array===!0&&(f=n(f)),l[a]=d.value(f)}for(;s>i;i++)a=c[i],l[a]=this.params[a].value(t[a]);return l},$.prototype.parameters=function(e){return _(e)?this.params[e]||null:this.$$paramNames},$.prototype.validates=function(e){return this.params.$$validates(e)},$.prototype.format=function(e){function t(e){return encodeURIComponent(e).replace(/-/g,function(e){return"%5C%"+e.charCodeAt(0).toString(16).toUpperCase()})}e=e||{};var n=this.segments,r=this.parameters(),i=this.params;if(!this.validates(e))return null;var o,a=!1,c=n.length-1,s=r.length,u=n[0];for(o=0;s>o;o++){var l=c>o,d=r[o],f=i[d],p=f.value(e[d]),h=f.isOptional&&f.type.equals(f.value(),p),$=h?f.squash:!1,g=f.type.encode(p);if(l){var v=n[o+1];if($===!1)null!=g&&(u+=R(g)?m(g,t).join("-"):encodeURIComponent(g)),u+=v;else if($===!0){var b=u.match(/\/$/)?/\/?(.*)/:/(.*)/;u+=v.match(b)[1]}else H($)&&(u+=$+v)}else{if(null==g||h&&$!==!1)continue;R(g)||(g=[g]),g=m(g,encodeURIComponent).join("&"+d+"="),u+=(a?"&":"?")+(d+"="+g),a=!0}}return u},g.prototype.is=function(){return!0},g.prototype.encode=function(e){return e},g.prototype.decode=function(e){return e},g.prototype.equals=function(e,t){return e==t},g.prototype.$subPattern=function(){var e=this.pattern.toString();return e.substr(1,e.length-2)},g.prototype.pattern=/.*/,g.prototype.toString=function(){return"{Type:"+this.name+"}"},g.prototype.$asArray=function(e,t){function r(e,t){function r(e,t){return function(){return e[t].apply(e,arguments)}}function i(e){return R(e)?e:_(e)?[e]:[]}function o(e){switch(e.length){case 0:return n;case 1:return"auto"===t?e[0]:e;default:return e}}function a(e){return!e}function c(e,t){return function(n){n=i(n);var r=m(n,e);return t===!0?0===f(r,a).length:o(r)}}function s(e){return function(t,n){var r=i(t),o=i(n);if(r.length!==o.length)return!1;for(var a=0;a<r.length;a++)if(!e(r[a],o[a]))return!1;return!0}}this.encode=c(r(e,"encode")),this.decode=c(r(e,"decode")),this.is=c(r(e,"is"),!0),this.equals=s(r(e,"equals")),this.pattern=e.pattern,this.$arrayMode=t}if(!e)return this;if("auto"===e&&!t)throw new Error("'auto' array mode is for query parameters only");return new r(this,e)},t.module("ui.router.util").provider("$urlMatcherFactory",v),t.module("ui.router.util").run(["$urlMatcherFactory",function(){}]),b.$inject=["$locationProvider","$urlMatcherFactoryProvider"],t.module("ui.router.router").provider("$urlRouter",b),y.$inject=["$urlRouterProvider","$urlMatcherFactoryProvider"],t.module("ui.router.state").value("$stateParams",{}).provider("$state",y),E.$inject=[],t.module("ui.router.state").provider("$view",E),t.module("ui.router.state").provider("$uiViewScroll",w),A.$inject=["$state","$injector","$uiViewScroll","$interpolate"],x.$inject=["$compile","$controller","$state","$interpolate"],t.module("ui.router.state").directive("uiView",A),t.module("ui.router.state").directive("uiView",x),T.$inject=["$state","$timeout"],S.$inject=["$state","$stateParams","$interpolate"],t.module("ui.router.state").directive("uiSref",T).directive("uiSrefActive",S).directive("uiSrefActiveEq",S),N.$inject=["$state"],O.$inject=["$state"],t.module("ui.router.state").filter("isState",N).filter("includedByState",O)}(window,window.angular),function(){function e(){var e=this;e.$$config={lazy:!1,reconnect:!0,reconnectInterval:2e3,mock:!1,enqueue:!1,protocols:null},e.$setup=function(t){return t=t||{},e.$$config=angular.extend({},e.$$config,t),e},e.$get=["$http",function(n){return new t(e.$$config,n)}]}function t(e,t){var r=this;r.$$websocketList={},r.$$config=e||{},r.$get=function(e){return r.$$websocketList[e]},r.$new=function(e){e=e||{},"string"==typeof e&&(e={url:e},arguments.length>1&&("string"==typeof arguments[1]&&arguments[1].length>0?e.protocols=[arguments[1]]:"object"==typeof arguments[1]&&arguments[1].length>0&&(e.protocols=arguments[1])));var i=r.$get(e.url);if("undefined"==typeof i){var o=angular.extend({},r.$$config,e);i=new n(o,t),r.$$websocketList[o.url]=i}return i}}function n(e,t){var n=this;if("undefined"==typeof e||"object"==typeof e&&"undefined"==typeof e.url)throw new Error("An url must be specified for WebSocket");return n.$$eventMap={},n.$$ws=void 0,n.$$reconnectTask=void 0,n.$$reconnectCopy=!0,n.$$queue=[],n.$$config={url:void 0,lazy:!1,reconnect:!0,reconnectInterval:2e3,enqueue:!1,mock:!1,protocols:null},n.$$fireEvent=function(){var e=[];Array.prototype.push.apply(e,arguments);var t=e.shift(),r=n.$$eventMap[t];if("undefined"!=typeof r)for(var i=0;i<r.length;i++)"function"==typeof r[i]&&r[i].apply(n,e)},n.$$init=function(e){return n.$$ws=e.mock?new r(e.mock,t):new WebSocket(e.url,e.protocols),n.$$ws.onmessage=function(e){try{var t=JSON.parse(e.data);n.$$fireEvent(t.event,t.data),n.$$fireEvent("$message",t)}catch(r){n.$$fireEvent("$message",e.data)}},n.$$ws.onerror=function(e){n.$$fireEvent("$error",e)},n.$$ws.onopen=function(){if(n.$$reconnectTask&&(clearInterval(n.$$reconnectTask),delete n.$$reconnectTask),n.$$config.enqueue&&n.$$queue.length>0)for(;n.$$queue.length>0&&n.$ready();)n.$$send(n.$$queue.shift());n.$$fireEvent("$open")},n.$$ws.onclose=function(){n.$$config.reconnect&&(n.$$reconnectTask=setInterval(function(){n.$status()===n.$CLOSED&&n.$open()},n.$$config.reconnectInterval)),n.$$fireEvent("$close")},n},n.$CONNECTING=0,n.$OPEN=1,n.$CLOSING=2,n.$CLOSED=3,n.$on=function(){var e=[];Array.prototype.push.apply(e,arguments);var t=e.shift();if("string"!=typeof t||0===e.length)throw new Error("$on accept two parameters at least: a String and a Function or an array of Functions");n.$$eventMap[t]=n.$$eventMap[t]||[];for(var r=0;r<e.length;r++)n.$$eventMap[t].push(e[r]);return n},n.$un=function(e){if("string"!=typeof e)throw new Error("$un needs a String representing an event.");return"undefined"!=typeof n.$$eventMap[e]&&delete n.$$eventMap[e],n},n.$$send=function(e){n.$ready()?n.$$ws.send(JSON.stringify(e)):n.$$config.enqueue&&n.$$queue.push(e)},n.$emit=function(e,t){if("string"!=typeof e)throw new Error("$emit needs two parameter: a String and a Object or a String");var r={event:e,data:t};return n.$$send(r),n},n.$open=function(){return n.$$config.reconnect=n.$$reconnectCopy,n.$status()!==n.$OPEN&&n.$$init(n.$$config),n},n.$close=function(){return n.$status()!==n.$CLOSED&&n.$$ws.close(),n.$$reconnectTask&&(clearInterval(n.$$reconnectTask),delete n.$$reconnectTask),n.$$config.reconnect=!1,n},n.$status=function(){return"undefined"==typeof n.$$ws?n.$CLOSED:n.$$ws.readyState},n.$ready=function(){return n.$status()===n.$OPEN},n.$mockup=function(){return n.$$config.mock},n.$$config=angular.extend({},n.$$config,e),n.$$reconnectCopy=n.$$config.reconnect,n.$$config.lazy||n.$$init(n.$$config),n}function r(e,t){e=e||{};var n=this,r=e.openTimeout||500,i=e.closeTimeout||1e3,o=e.messageInterval||2e3,a=e.fixtures||{},c=[];
n.CONNECTING=0,n.OPEN=1,n.CLOSING=2,n.CLOSED=3,n.readyState=n.CONNECTING,n.send=function(e){if(n.readyState===n.OPEN)return c.push(e),n;throw new Error("WebSocket is already in CLOSING or CLOSED state.")},n.close=function(){return n.readyState===n.OPEN&&(n.readyState=n.CLOSING,setTimeout(function(){n.readyState=n.CLOSED,n.onclose()},i)),n},n.onmessage=function(){},n.onerror=function(){},n.onopen=function(){},n.onclose=function(){},setInterval(function(){if(c.length>0){var e=c.shift(),t=JSON.parse(e);switch(t.event){case"$close":n.close();break;default:"undefined"!=typeof a[t.event]&&(t.data=a[t.event].data||t.data,t.event=a[t.event].event||t.event),e=JSON.stringify(t),n.onmessage({data:e})}}},o);var s=function(e){e=e||{},e=e instanceof Error?{}:e,a=e,setTimeout(function(){n.readyState=n.OPEN,n.onopen()},r)};return"string"==typeof a?t.get(a).success(s).error(s):s(a),n}angular.module("ngWebsocket",[]).provider("$websocket",e)}(),/**
 * @license AngularJS v1.3.13
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
function(e,t,n){"use strict";t.module("ngAnimate",["ng"]).directive("ngAnimateChildren",function(){var e="$$ngAnimateChildren";return function(n,r,i){var o=i.ngAnimateChildren;t.isString(o)&&0===o.length?r.data(e,!0):n.$watch(o,function(t){r.data(e,!!t)})}}).factory("$$animateReflow",["$$rAF","$document",function(e,t){var n=t[0].body;return function(t){return e(function(){n.offsetWidth+1;t()})}}]).config(["$provide","$animateProvider",function(r,i){function o(e){for(var t=0;t<e.length;t++){var n=e[t];if(n.nodeType==$)return n}}function a(e){return e&&t.element(e)}function c(e){return t.element(o(e))}function s(e,t){return o(e)==o(t)}var u,l=t.noop,d=t.forEach,f=i.$$selectors,m=t.isArray,p=t.isString,h=t.isObject,$=1,g="$$ngAnimateState",v="$$ngAnimateChildren",b="ng-animate",y={running:!0};r.decorator("$animate",["$delegate","$$q","$injector","$sniffer","$rootElement","$$asyncCallback","$rootScope","$document","$templateRequest","$$jqLite",function(e,n,r,$,E,w,A,x,M,C){function k(e,t){var n=e.data(g)||{};return t&&(n.running=!0,n.structural=!0,e.data(g,n)),n.disabled||n.running&&n.structural}function T(e){var t,r=n.defer();return r.promise.$$cancelFn=function(){t&&t()},A.$$postDigest(function(){t=e(function(){r.resolve()})}),r.promise}function S(e){return h(e)?(e.tempClasses&&p(e.tempClasses)&&(e.tempClasses=e.tempClasses.split(/\s+/)),e):void 0}function N(e,t,n){n=n||{};var r={};d(n,function(e,t){d(t.split(" "),function(t){r[t]=e})});var i=Object.create(null);d((e.attr("class")||"").split(/\s+/),function(e){i[e]=!0});var o=[],a=[];return d(t&&t.classes||[],function(e,t){var n=i[t],c=r[t]||{};e===!1?(n||"addClass"==c.event)&&a.push(t):e===!0&&(n&&"removeClass"!=c.event||o.push(t))}),o.length+a.length>0&&[o.join(" "),a.join(" ")]}function O(e){if(e){var t=[],n={},i=e.substr(1).split(".");($.transitions||$.animations)&&t.push(r.get(f[""]));for(var o=0;o<i.length;o++){var a=i[o],c=f[a];c&&!n[a]&&(t.push(r.get(c)),n[a]=!0)}return t}}function _(e,n,r,i){function o(e,t){var n=e[t],r=e["before"+t.charAt(0).toUpperCase()+t.substr(1)];return n||r?("leave"==t&&(r=n,n=null),w.push({event:t,fn:n}),b.push({event:t,fn:r}),!0):void 0}function a(t,n,o){function a(e){if(n){if((n[e]||l)(),++f<c.length)return;n=null}o()}var c=[];d(t,function(e){e.fn&&c.push(e)});var f=0;d(c,function(t,o){var c=function(){a(o)};switch(t.event){case"setClass":n.push(t.fn(e,s,u,c,i));break;case"animate":n.push(t.fn(e,r,i.from,i.to,c));break;case"addClass":n.push(t.fn(e,s||r,c,i));break;case"removeClass":n.push(t.fn(e,u||r,c,i));break;default:n.push(t.fn(e,c,i))}}),n&&0===n.length&&o()}var c=e[0];if(c){i&&(i.to=i.to||{},i.from=i.from||{});var s,u;m(r)&&(s=r[0],u=r[1],s?u?r=s+" "+u:(r=s,n="addClass"):(r=u,n="removeClass"));var f="setClass"==n,p=f||"addClass"==n||"removeClass"==n||"animate"==n,h=e.attr("class"),$=h+" "+r;if(V($)){var g=l,v=[],b=[],y=l,E=[],w=[],A=(" "+$).replace(/\s+/g,".");return d(O(A),function(e){var t=o(e,n);!t&&f&&(o(e,"addClass"),o(e,"removeClass"))}),{node:c,event:n,className:r,isClassBased:p,isSetClassOperation:f,applyStyles:function(){i&&e.css(t.extend(i.from||{},i.to||{}))},before:function(e){g=e,a(b,v,function(){g=l,e()})},after:function(e){y=e,a(w,E,function(){y=l,e()})},cancel:function(){v&&(d(v,function(e){(e||l)(!0)}),g(!0)),E&&(d(E,function(e){(e||l)(!0)}),y(!0))}}}}}function D(e,n,r,i,o,a,c,s){function f(t){var i="$animate:"+t;A&&A[i]&&A[i].length>0&&w(function(){r.triggerHandler(i,{event:e,className:n})})}function m(){f("before")}function p(){f("after")}function h(){f("close"),s()}function $(){$.hasBeenRun||($.hasBeenRun=!0,a())}function v(){if(!v.hasBeenRun){E&&E.applyStyles(),v.hasBeenRun=!0,c&&c.tempClasses&&d(c.tempClasses,function(e){u.removeClass(r,e)});var t=r.data(g);t&&(E&&E.isClassBased?I(r,n):(w(function(){var t=r.data(g)||{};D==t.index&&I(r,n,e)}),r.data(g,t))),h()}}var y=l,E=_(r,e,n,c);if(!E)return $(),m(),p(),v(),y;e=E.event,n=E.className;var A=t.element._data(E.node);if(A=A&&A.events,i||(i=o?o.parent():r.parent()),R(r,i))return $(),m(),p(),v(),y;var x=r.data(g)||{},M=x.active||{},C=x.totalActive||0,k=x.last,T=!1;if(C>0){var S=[];if(E.isClassBased){if("setClass"==k.event)S.push(k),I(r,n);else if(M[n]){var N=M[n];N.event==e?T=!0:(S.push(N),I(r,n))}}else if("leave"==e&&M["ng-leave"])T=!0;else{for(var O in M)S.push(M[O]);x={},I(r,!0)}S.length>0&&d(S,function(e){e.cancel()})}if(!E.isClassBased||E.isSetClassOperation||"animate"==e||T||(T="addClass"==e==r.hasClass(n)),T)return $(),m(),p(),h(),y;M=x.active||{},C=x.totalActive||0,"leave"==e&&r.one("$destroy",function(){var e=t.element(this),n=e.data(g);if(n){var r=n.active["ng-leave"];r&&(r.cancel(),I(e,"ng-leave"))}}),u.addClass(r,b),c&&c.tempClasses&&d(c.tempClasses,function(e){u.addClass(r,e)});var D=j++;return C++,M[n]=E,r.data(g,{last:E,active:M,index:D,totalActive:C}),m(),E.before(function(t){var i=r.data(g);t=t||!i||!i.active[n]||E.isClassBased&&i.active[n].event!=e,$(),t===!0?v():(p(),E.after(v))}),E.cancel}function H(e){var n=o(e);if(n){var r=t.isFunction(n.getElementsByClassName)?n.getElementsByClassName(b):n.querySelectorAll("."+b);d(r,function(e){e=t.element(e);var n=e.data(g);n&&n.active&&d(n.active,function(e){e.cancel()})})}}function I(e,t){if(s(e,E))y.disabled||(y.running=!1,y.structural=!1);else if(t){var n=e.data(g)||{},r=t===!0;!r&&n.active&&n.active[t]&&(n.totalActive--,delete n.active[t]),(r||!n.totalActive)&&(u.removeClass(e,b),e.removeData(g))}}function R(e,n){if(y.disabled)return!0;if(s(e,E))return y.running;var r,i,o;do{if(0===n.length)break;var a=s(n,E),c=a?y:n.data(g)||{};if(c.disabled)return!0;if(a&&(o=!0),r!==!1){var u=n.data(v);t.isDefined(u)&&(r=u)}i=i||c.running||c.last&&!c.last.isClassBased}while(n=n.parent());return!o||!r&&i}u=C,E.data(g,y);var P=A.$watch(function(){return M.totalPendingRequests},function(e){0===e&&(P(),A.$$postDigest(function(){A.$$postDigest(function(){y.running=!1})}))}),j=0,q=i.classNameFilter(),V=q?function(e){return q.test(e)}:function(){return!0};return{animate:function(e,t,n,r,i){return r=r||"ng-inline-animate",i=S(i)||{},i.from=n?t:null,i.to=n?n:t,T(function(t){return D("animate",r,c(e),null,null,l,i,t)})},enter:function(n,r,i,o){return o=S(o),n=t.element(n),r=a(r),i=a(i),k(n,!0),e.enter(n,r,i),T(function(e){return D("enter","ng-enter",c(n),r,i,l,o,e)})},leave:function(n,r){return r=S(r),n=t.element(n),H(n),k(n,!0),T(function(t){return D("leave","ng-leave",c(n),null,null,function(){e.leave(n)},r,t)})},move:function(n,r,i,o){return o=S(o),n=t.element(n),r=a(r),i=a(i),H(n),k(n,!0),e.move(n,r,i),T(function(e){return D("move","ng-move",c(n),r,i,l,o,e)})},addClass:function(e,t,n){return this.setClass(e,t,[],n)},removeClass:function(e,t,n){return this.setClass(e,[],t,n)},setClass:function(n,r,i,a){a=S(a);var s="$$animateClasses";if(n=t.element(n),n=c(n),k(n))return e.$$setClassImmediately(n,r,i,a);var u,l=n.data(s),f=!!l;return l||(l={},l.classes={}),u=l.classes,r=m(r)?r:r.split(" "),d(r,function(e){e&&e.length&&(u[e]=!0)}),i=m(i)?i:i.split(" "),d(i,function(e){e&&e.length&&(u[e]=!1)}),f?(a&&l.options&&(l.options=t.extend(l.options||{},a)),l.promise):(n.data(s,l={classes:u,options:a}),l.promise=T(function(t){var r=n.parent(),i=o(n),a=i.parentNode;if(!a||a.$$NG_REMOVED||i.$$NG_REMOVED)return void t();var c=n.data(s);n.removeData(s);var u=n.data(g)||{},l=N(n,c,u.active);return l?D("setClass",l,n,r,null,function(){l[0]&&e.$$addClassImmediately(n,l[0]),l[1]&&e.$$removeClassImmediately(n,l[1])},c.options,t):t()}))},cancel:function(e){e.$$cancelFn()},enabled:function(e,t){switch(arguments.length){case 2:if(e)I(t);else{var n=t.data(g)||{};n.disabled=!0,t.data(g,n)}break;case 1:y.disabled=!e;break;default:e=!y.disabled}return!!e}}}]),i.register("",["$window","$sniffer","$timeout","$$animateReflow",function(r,i,a,c){function s(){I||(I=c(function(){Y=[],I=null,z={}}))}function f(e,t){I&&I(),Y.push(t),I=c(function(){d(Y,function(e){e()}),Y=[],I=null,z={}})}function h(e,n){var r=o(e);e=t.element(r),J.push(e);var i=Date.now()+n;X>=i||(a.cancel(K),X=i,K=a(function(){g(J),J=[]},n,!1))}function g(e){d(e,function(e){var t=e.data(L);t&&d(t.closeAnimationFns,function(e){e()})})}function v(e,t){var n=t?z[t]:null;if(!n){var i=0,o=0,a=0,c=0;d(e,function(e){if(e.nodeType==$){var t=r.getComputedStyle(e)||{},n=t[N+R];i=Math.max(b(n),i);var s=t[N+j];o=Math.max(b(s),o);{t[_+j]}c=Math.max(b(t[_+j]),c);var u=b(t[_+R]);u>0&&(u*=parseInt(t[_+q],10)||1),a=Math.max(u,a)}}),n={total:0,transitionDelay:o,transitionDuration:i,animationDelay:c,animationDuration:a},t&&(z[t]=n)}return n}function b(e){var t=0,n=p(e)?e.split(/\s*,\s*/):[];return d(n,function(e){t=Math.max(parseFloat(e)||0,t)}),t}function y(e){var t=e.parent(),n=t.data(F);return n||(t.data(F,++W),n=W),n+"-"+o(e).getAttribute("class")}function E(e,t,n,r){var i=["ng-enter","ng-leave","ng-move"].indexOf(n)>=0,a=y(t),c=a+" "+n,s=z[c]?++z[c].total:0,l={};if(s>0){var d=n+"-stagger",f=a+" "+d,m=!z[f];m&&u.addClass(t,d),l=v(t,f),m&&u.removeClass(t,d)}u.addClass(t,n);var p=t.data(L)||{},h=v(t,c),$=h.transitionDuration,g=h.animationDuration;if(i&&0===$&&0===g)return u.removeClass(t,n),!1;var b=r||i&&$>0,E=g>0&&l.animationDelay>0&&0===l.animationDuration,w=p.closeAnimationFns||[];t.data(L,{stagger:l,cacheKey:c,running:p.running||0,itemIndex:s,blockTransition:b,closeAnimationFns:w});var M=o(t);return b&&(A(M,!0),r&&t.css(r)),E&&x(M,!0),!0}function w(e,t,n,r,i){function c(){t.off(j,s),u.removeClass(t,m),u.removeClass(t,p),R&&a.cancel(R),T(t,n);var e=o(t);for(var r in g)e.style.removeProperty(g[r])}function s(e){e.stopPropagation();var t=e.originalEvent||e,n=t.$manualTimeStamp||t.timeStamp||Date.now(),i=parseFloat(t.elapsedTime.toFixed(U));Math.max(n-P,0)>=_&&i>=S&&r()}var l=o(t),f=t.data(L);if(-1==l.getAttribute("class").indexOf(n)||!f)return void r();var m="",p="";d(n.split(" "),function(e,t){var n=(t>0?" ":"")+e;m+=n+"-active",p+=n+"-pending"});var $="",g=[],b=f.itemIndex,y=f.stagger,E=0;if(b>0){var w=0;y.transitionDelay>0&&0===y.transitionDuration&&(w=y.transitionDelay*b);var M=0;y.animationDelay>0&&0===y.animationDuration&&(M=y.animationDelay*b,g.push(H+"animation-play-state")),E=Math.round(100*Math.max(w,M))/100}E||(u.addClass(t,m),f.blockTransition&&A(l,!1));var C=f.cacheKey+" "+m,k=v(t,C),S=Math.max(k.transitionDuration,k.animationDuration);if(0===S)return u.removeClass(t,m),T(t,n),void r();!E&&i&&Object.keys(i).length>0&&(k.transitionDuration||(t.css("transition",k.animationDuration+"s linear all"),g.push("transition")),t.css(i));var N=Math.max(k.transitionDelay,k.animationDelay),_=N*G;if(g.length>0){var I=l.getAttribute("style")||"";";"!==I.charAt(I.length-1)&&(I+=";"),l.setAttribute("style",I+" "+$)}var R,P=Date.now(),j=D+" "+O,q=(N+S)*B,V=(E+q)*G;return E>0&&(u.addClass(t,p),R=a(function(){R=null,k.transitionDuration>0&&A(l,!1),k.animationDuration>0&&x(l,!1),u.addClass(t,m),u.removeClass(t,p),i&&(0===k.transitionDuration&&t.css("transition",k.animationDuration+"s linear all"),t.css(i),g.push("transition"))},E*G,!1)),t.on(j,s),f.closeAnimationFns.push(function(){c(),r()}),f.running++,h(t,V),c}function A(e,t){e.style[N+P]=t?"none":""}function x(e,t){e.style[_+V]=t?"paused":""}function M(e,t,n,r){return E(e,t,n,r)?function(e){e&&T(t,n)}:void 0}function C(e,t,n,r,i){return t.data(L)?w(e,t,n,r,i):(T(t,n),void r())}function k(e,t,n,r,i){var o=M(e,t,n,i.from);if(!o)return s(),void r();var a=o;return f(t,function(){a=C(e,t,n,r,i.to)}),function(e){(a||l)(e)}}function T(e,t){u.removeClass(e,t);var n=e.data(L);n&&(n.running&&n.running--,n.running&&0!==n.running||e.removeData(L))}function S(e,t){var n="";return e=m(e)?e:e.split(/\s+/),d(e,function(e,r){e&&e.length>0&&(n+=(r>0?" ":"")+e+t)}),n}var N,O,_,D,H="";e.ontransitionend===n&&e.onwebkittransitionend!==n?(H="-webkit-",N="WebkitTransition",O="webkitTransitionEnd transitionend"):(N="transition",O="transitionend"),e.onanimationend===n&&e.onwebkitanimationend!==n?(H="-webkit-",_="WebkitAnimation",D="webkitAnimationEnd animationend"):(_="animation",D="animationend");var I,R="Duration",P="Property",j="Delay",q="IterationCount",V="PlayState",F="$$ngAnimateKey",L="$$ngAnimateCSS3Data",U=3,B=1.5,G=1e3,z={},W=0,Y=[],K=null,X=0,J=[];return{animate:function(e,t,n,r,i,o){return o=o||{},o.from=n,o.to=r,k("animate",e,t,i,o)},enter:function(e,t,n){return n=n||{},k("enter",e,"ng-enter",t,n)},leave:function(e,t,n){return n=n||{},k("leave",e,"ng-leave",t,n)},move:function(e,t,n){return n=n||{},k("move",e,"ng-move",t,n)},beforeSetClass:function(e,t,n,r,i){i=i||{};var o=S(n,"-remove")+" "+S(t,"-add"),a=M("setClass",e,o,i.from);return a?(f(e,r),a):(s(),void r())},beforeAddClass:function(e,t,n,r){r=r||{};var i=M("addClass",e,S(t,"-add"),r.from);return i?(f(e,n),i):(s(),void n())},beforeRemoveClass:function(e,t,n,r){r=r||{};var i=M("removeClass",e,S(t,"-remove"),r.from);return i?(f(e,n),i):(s(),void n())},setClass:function(e,t,n,r,i){i=i||{},n=S(n,"-remove"),t=S(t,"-add");var o=n+" "+t;return C("setClass",e,o,r,i.to)},addClass:function(e,t,n,r){return r=r||{},C("addClass",e,S(t,"-add"),n,r.to)},removeClass:function(e,t,n,r){return r=r||{},C("removeClass",e,S(t,"-remove"),n,r.to)}}}])}])}(window,window.angular),/**
 * @license AngularJS v1.3.13
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
function(e,t){"use strict";function n(){function e(e,t,r){return function(i,o,a){var c=a.$normalize(t);n[c]&&!a[c]&&i.$watch(a[e],function(e){r&&(e=!e),o.attr(t,e)})}}var n={ariaHidden:!0,ariaChecked:!0,ariaDisabled:!0,ariaRequired:!0,ariaInvalid:!0,ariaMultiline:!0,ariaValue:!0,tabindex:!0,bindKeypress:!0};this.config=function(e){n=t.extend(n,e)},this.$get=function(){return{config:function(e){return n[e]},$$watchExpr:e}}}var r=t.module("ngAria",["ng"]).provider("$aria",n);r.directive("ngShow",["$aria",function(e){return e.$$watchExpr("ngShow","aria-hidden",!0)}]).directive("ngHide",["$aria",function(e){return e.$$watchExpr("ngHide","aria-hidden",!1)}]).directive("ngModel",["$aria",function(e){function t(t,n,r){return e.config(n)&&!r.attr(t)}function n(e,t){var n=e.type,r=e.role;return"checkbox"===(n||r)||"menuitemcheckbox"===r?"checkbox":"radio"===(n||r)||"menuitemradio"===r?"radio":"range"===n||"progressbar"===r||"slider"===r?"range":"textbox"===(n||r)||"TEXTAREA"===t[0].nodeName?"multiline":""}return{restrict:"A",require:"?ngModel",link:function(r,i,o,a){function c(){return a.$modelValue}function s(){return d?(d=!1,function(e){var t=e===o.value;i.attr("aria-checked",t),i.attr("tabindex",0-!t)}):function(e){i.attr("aria-checked",e===o.value)}}function u(e){i.attr("aria-checked",!!e)}var l=n(o,i),d=t("tabindex","tabindex",i);switch(l){case"radio":case"checkbox":t("aria-checked","ariaChecked",i)&&r.$watch(c,"radio"===l?s():u);break;case"range":e.config("ariaValue")&&(o.min&&!i.attr("aria-valuemin")&&i.attr("aria-valuemin",o.min),o.max&&!i.attr("aria-valuemax")&&i.attr("aria-valuemax",o.max),i.attr("aria-valuenow")||r.$watch(c,function(e){i.attr("aria-valuenow",e)}));break;case"multiline":t("aria-multiline","ariaMultiline",i)&&i.attr("aria-multiline",!0)}d&&i.attr("tabindex",0),a.$validators.required&&t("aria-required","ariaRequired",i)&&r.$watch(function(){return a.$error.required},function(e){i.attr("aria-required",!!e)}),t("aria-invalid","ariaInvalid",i)&&r.$watch(function(){return a.$invalid},function(e){i.attr("aria-invalid",!!e)})}}}]).directive("ngDisabled",["$aria",function(e){return e.$$watchExpr("ngDisabled","aria-disabled")}]).directive("ngMessages",function(){return{restrict:"A",require:"?ngMessages",link:function(e,t){t.attr("aria-live")||t.attr("aria-live","assertive")}}}).directive("ngClick",["$aria","$parse",function(e,t){return{restrict:"A",compile:function(n,r){var i=t(r.ngClick,null,!0);return function(t,n,r){function o(e,t){return-1!==t.indexOf(e[0].nodeName)?!0:void 0}e.config("tabindex")&&!n.attr("tabindex")&&n.attr("tabindex",0),e.config("bindKeypress")&&!r.ngKeypress&&o(n,["DIV","LI"])&&n.on("keypress",function(e){function n(){i(t,{$event:e})}(32===e.keyCode||13===e.keyCode)&&t.$apply(n)})}}}}]).directive("ngDblclick",["$aria",function(e){return function(t,n){e.config("tabindex")&&!n.attr("tabindex")&&n.attr("tabindex",0)}}])}(window,window.angular),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
angular.module("ngMaterial",["ng","ngAnimate","ngAria","material.core","material.core.theming.palette","material.core.theming","material.components.backdrop","material.components.bottomSheet","material.components.button","material.components.card","material.components.checkbox","material.components.content","material.components.dialog","material.components.divider","material.components.icon","material.components.input","material.components.list","material.components.progressCircular","material.components.progressLinear","material.components.radioButton","material.components.sidenav","material.components.slider","material.components.sticky","material.components.subheader","material.components.swipe","material.components.switch","material.components.tabs","material.components.textField","material.components.toast","material.components.toolbar","material.components.tooltip","material.components.whiteframe"]),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";function e(e,n){e.decorator("$$rAF",["$delegate",t]),n.theme("default").primaryPalette("indigo").accentPalette("pink").warnPalette("red").backgroundPalette("grey")}function t(e){return e.throttle=function(t){var n,r,i,o;return function(){n=arguments,o=this,i=t,r||(r=!0,e(function(){i.apply(o,n),r=!1}))}},e}angular.module("material.core",["material.core.theming"]).config(e),e.$inject=["$provide","$mdThemingProvider"]}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";function e(e,t){function n(e){return r?"webkit"+e.charAt(0).toUpperCase()+e.substring(1):e}var r=/webkit/i.test(t.vendorPrefix);return{KEY_CODE:{ENTER:13,ESCAPE:27,SPACE:32,LEFT_ARROW:37,UP_ARROW:38,RIGHT_ARROW:39,DOWN_ARROW:40},CSS:{TRANSITIONEND:"transitionend"+(r?" webkitTransitionEnd":""),ANIMATIONEND:"animationend"+(r?" webkitAnimationEnd":""),TRANSFORM:n("transform"),TRANSITION:n("transition"),TRANSITION_DURATION:n("transitionDuration"),ANIMATION_PLAY_STATE:n("animationPlayState"),ANIMATION_DURATION:n("animationDuration"),ANIMATION_NAME:n("animationName"),ANIMATION_TIMING:n("animationTimingFunction"),ANIMATION_DIRECTION:n("animationDirection")},MEDIA:{sm:"(max-width: 600px)","gt-sm":"(min-width: 600px)",md:"(min-width: 600px) and (max-width: 960px)","gt-md":"(min-width: 960px)",lg:"(min-width: 960px) and (max-width: 1200px)","gt-lg":"(min-width: 1200px)"}}}angular.module("material.core").factory("$mdConstant",e),e.$inject=["$$rAF","$sniffer"]}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){function e(e,t){function n(){return[].concat(g)}function r(){return g.length}function i(e){return g.length&&e>-1&&e<g.length}function o(e){return e?i(d(e)+1):!1}function a(e){return e?i(d(e)-1):!1}function c(e){return i(e)?g[e]:null}function s(e,t){return g.filter(function(n){return n[e]===t})}function u(e,t){return e?(angular.isNumber(t)||(t=g.length),g.splice(t,0,e),d(e)):-1}function l(e){f(e)&&g.splice(d(e),1)}function d(e){return g.indexOf(e)}function f(e){return e&&d(e)>-1}function m(){return g.length?g[0]:null}function p(){return g.length?g[g.length-1]:null}function h(e,n,r,o){r=r||$;var a=d(n);if(!i(a))return null;var c=a+(e?-1:1),s=null;return i(c)?s=g[c]:t&&(s=e?p():m(),c=d(s)),null===s||c===o?null:(angular.isUndefined(o)&&(o=c),r(s)?s:h(e,s,r,o))}var $=function(){return!0};t=!!t;var g=e||[];return{items:n,count:r,inRange:i,contains:f,indexOf:d,itemAt:c,findBy:s,add:u,remove:l,first:m,last:p,next:angular.bind(null,h,!1),previous:angular.bind(null,h,!0),hasPrevious:a,hasNext:o}}angular.module("material.core").config(["$provide",function(t){t.decorator("$mdUtil",["$delegate",function(t){return t.iterator=e,t}])}])}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
angular.module("material.core").factory("$mdMedia",mdMediaFactory),mdMediaFactory.$inject=["$mdConstant","$rootScope","$window"],/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";var e=["0","0","0"];angular.module("material.core").factory("$mdUtil",["$document","$timeout",function(t,n){var r;return r={now:window.performance?angular.bind(window.performance,window.performance.now):Date.now,elementRect:function(e,t){var n=e[0];t=t||n.offsetParent||document.body,t=t[0]||t;var r=n.getBoundingClientRect(),i=t.getBoundingClientRect();return{left:r.left-i.left+t.scrollLeft,top:r.top-i.top+t.scrollTop,width:r.width,height:r.height}},fakeNgModel:function(){return{$fake:!0,$setViewValue:function(e){this.$viewValue=e,this.$render(e),this.$viewChangeListeners.forEach(function(e){e()})},$isEmpty:function(e){return 0===(""+e).length},$parsers:[],$formatters:[],$viewChangeListeners:[],$render:angular.noop}},debounce:function(e,t,r,i){var o;return function(){var a=r,c=Array.prototype.slice.call(arguments);n.cancel(o),o=n(function(){o=void 0,e.apply(a,c)},t||10,i)}},throttle:function(e,t){var n;return function(){var i=this,o=arguments,a=r.now();(!n||a-n>t)&&(e.apply(i,o),n=a)}},nextUid:function(){for(var t,n=e.length;n;){if(n--,t=e[n].charCodeAt(0),57==t)return e[n]="A",e.join("");if(90!=t)return e[n]=String.fromCharCode(t+1),e.join("");e[n]="0"}return e.unshift("0"),e.join("")},disconnectScope:function(e){if(e&&e.$root!==e&&!e.$$destroyed){var t=e.$parent;e.$$disconnected=!0,t.$$childHead===e&&(t.$$childHead=e.$$nextSibling),t.$$childTail===e&&(t.$$childTail=e.$$prevSibling),e.$$prevSibling&&(e.$$prevSibling.$$nextSibling=e.$$nextSibling),e.$$nextSibling&&(e.$$nextSibling.$$prevSibling=e.$$prevSibling),e.$$nextSibling=e.$$prevSibling=null}},reconnectScope:function(e){if(e&&e.$root!==e&&e.$$disconnected){var t=e,n=t.$parent;t.$$disconnected=!1,t.$$prevSibling=n.$$childTail,n.$$childHead?(n.$$childTail.$$nextSibling=t,n.$$childTail=t):n.$$childHead=n.$$childTail=t}},getClosest:function(e,t){t=t.toUpperCase();do if(e.nodeName===t)return e;while(e=e.parentNode);return null}}}]),angular.element.prototype.focus=angular.element.prototype.focus||function(){return this.length&&this[0].focus(),this},angular.element.prototype.blur=angular.element.prototype.blur||function(){return this.length&&this[0].blur(),this}}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";function e(e,t,n){function r(e,n,r){var i=e[0];i.hasAttribute(n)||a(i,n)||(r=angular.isString(r)&&r.trim()||"",r.length?e.attr(n,r):t.warn('ARIA: Attribute "',n,'", required for accessibility, is missing on node:',i))}function i(t,n,i){e(function(){r(t,n,i())})}function o(e,t){i(e,t,function(){return e.text().trim()})}function a(e,t){function r(e){var t=e.currentStyle?e.currentStyle:n.getComputedStyle(e);return"none"===t.display}var i=e.hasChildNodes(),o=!1;if(i)for(var a=e.childNodes,c=0;c<a.length;c++){var s=a[c];1===s.nodeType&&s.hasAttribute(t)&&(r(s)||(o=!0))}return o}return{expect:r,expectAsync:i,expectWithText:o}}angular.module("material.core").service("$mdAria",e),e.$inject=["$$rAF","$log","$window"]}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";function e(e,t,n,r,i,o){this.compile=function(a){var c=a.templateUrl,s=a.template||"",u=a.controller,l=a.controllerAs,d=a.resolve||{},f=a.locals||{},m=a.transformTemplate||angular.identity,p=a.bindToController;return angular.forEach(d,function(e,t){d[t]=angular.isString(e)?n.get(e):n.invoke(e)}),angular.extend(d,f),d.$template=c?t.get(c,{cache:o}).then(function(e){return e.data}):e.when(s),e.all(d).then(function(e){var t=m(e.$template),n=angular.element("<div>").html(t.trim()).contents(),o=r(n);return{locals:e,element:n,link:function(t){if(e.$scope=t,u){var r=i(u,e);p&&angular.extend(r,e),n.data("$ngControllerController",r),n.children().data("$ngControllerController",r),l&&(t[l]=r)}return o(t)}}})}}angular.module("material.core").service("$mdCompiler",e),e.$inject=["$q","$http","$injector","$compile","$controller","$templateCache"]}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";function e(e,t){var n;for(var r in s)n=s[r],"start"===e&&n.cancel(),n[e](t,$)}function t(t){if(!$){var n=+Date.now();g&&!i(t,g)&&n-g.endTime<1500||($=c(t),e("start",t))}}function n(t){$&&i(t,$)&&(a(t,$),e("move",t))}function r(t){$&&i(t,$)&&(a(t,$),$.endTime=+Date.now(),e("end",t),g=$,$=null)}function i(e,t){return e&&t&&e.type.charAt(0)===t.type}function o(e){return e=e.originalEvent||e,e.touches&&e.touches[0]||e.changedTouches&&e.changedTouches[0]||e}function a(e,t){var n=o(e),r=t.x=n.pageX,i=t.y=n.pageY;t.distanceX=r-t.startX,t.distanceY=i-t.startY,t.distance=Math.sqrt(t.distanceX*t.distanceX+t.distanceY*t.distanceY),t.directionX=t.distanceX>0?"right":t.distanceX<0?"left":"",t.directionY=t.distanceY>0?"up":t.distanceY<0?"down":"",t.duration=+Date.now()-t.startTime,t.velocityX=t.distanceX/t.duration,t.velocityY=t.distanceY/t.duration}function c(e){var t=o(e),n={startTime:+Date.now(),target:e.target,type:e.type.charAt(0)};return n.startX=n.x=t.pageX,n.startY=n.y=t.pageY,n}var s,u="mousedown touchstart pointerdown",l="mousemove touchmove pointermove",d="mouseup mouseleave touchend touchcancel pointerup pointercancel";document.contains||(document.contains=function(e){return document.body.contains(e)});var f=navigator.userAgent||navigator.vendor||window.opera,m=f.match(/iPad/i)||f.match(/iPhone/i)||f.match(/iPod/i),p=f.match(/Android/i),h=m||p;h&&document.addEventListener("click",function(e){var t=0===e.clientX&&0===e.clientY;t||e.$material||(e.preventDefault(),e.stopPropagation())},!0),angular.element(document).on(u,t).on(l,n).on(d,r).on("$$mdGestureReset",function(){g=$=null});var $,g;angular.module("material.core").run(["$mdGesture",function(){}]).factory("$mdGesture",["$$MdGestureHandler","$$rAF","$timeout",function(e,t,n){function r(t,n){var r=new e(t);return angular.extend(r,n),s[t]=r,o}function i(e,t,n){var r=s[t.replace(/^\$md./,"")];if(!r)throw new Error("Failed to register element with handler "+t+". Available handlers: "+Object.keys(s).join(", "));return r.registerElement(e,n)}s={},h&&r("click",{options:{maxDistance:6},onEnd:function(e,t){t.distance<this.state.options.maxDistance&&this.dispatchEvent(e,"click",null,e)}}),r("press",{onStart:function(e){this.dispatchEvent(e,"$md.pressdown")},onEnd:function(e){this.dispatchEvent(e,"$md.pressup")}}),r("hold",{options:{maxDistance:6,delay:500},onCancel:function(){n.cancel(this.state.timeout)},onStart:function(e,t){return this.state.registeredParent?(this.state.pos={x:t.x,y:t.y},void(this.state.timeout=n(angular.bind(this,function(){this.dispatchEvent(e,"$md.hold"),this.cancel()}),this.state.options.delay,!1))):this.cancel()},onMove:function(e,t){e.preventDefault();var n=this.state.pos.x-t.x,r=this.state.pos.y-t.y;Math.sqrt(n*n+r*r)>this.options.maxDistance&&this.cancel()},onEnd:function(){this.onCancel()}}),r("drag",{options:{minDistance:6,horizontal:!0},onStart:function(){this.state.registeredParent||this.cancel()},onMove:function(e,t){var n,r;e.preventDefault(),this.state.dragPointer?this.dispatchDragMove(e):(this.state.options.horizontal?(n=Math.abs(t.distanceX)>this.state.options.minDistance,r=Math.abs(t.distanceY)>1.5*this.state.options.minDistance):(n=Math.abs(t.distanceY)>this.state.options.minDistance,r=Math.abs(t.distanceX)>1.5*this.state.options.minDistance),n?(this.state.dragPointer=c(e),a(e,this.state.dragPointer),this.dispatchEvent(e,"$md.dragstart",this.state.dragPointer)):r&&this.cancel())},dispatchDragMove:t.throttle(function(e){this.state.isRunning&&(a(e,this.state.dragPointer),this.dispatchEvent(e,"$md.drag",this.state.dragPointer))}),onEnd:function(e){this.state.dragPointer&&(a(e,this.state.dragPointer),this.dispatchEvent(e,"$md.dragend",this.state.dragPointer))}}),r("swipe",{options:{minVelocity:.65,minDistance:10},onEnd:function(e,t){if(Math.abs(t.velocityX)>this.state.options.minVelocity&&Math.abs(t.distanceX)>this.state.options.minDistance){var n="left"==t.directionX?"$md.swipeleft":"$md.swiperight";this.dispatchEvent(e,n)}}});var o;return o={handler:r,register:i}}]).factory("$$MdGestureHandler",["$$rAF",function(){function e(e){this.name=e,this.state={}}function t(e,t,n,r){n=n||$;var i;"click"===t?(i=document.createEvent("MouseEvents"),i.initMouseEvent("click",!0,!0,window,r.detail,r.screenX,r.screenY,r.clientX,r.clientY,r.ctrlKey,r.altKey,r.shiftKey,r.metaKey,r.button,r.relatedTarget||null)):(i=document.createEvent("CustomEvent"),i.initCustomEvent(t,!0,!0,{})),i.$material=!0,i.pointer=n,i.srcEvent=e,n.target.dispatchEvent(i)}e.prototype={onStart:angular.noop,onMove:angular.noop,onEnd:angular.noop,onCancel:angular.noop,options:{},dispatchEvent:t,start:function(e,t){if(!this.state.isRunning){var n=this.getNearestParent(e.target),r=n&&n.$mdGesture[this.name]||{};this.state={isRunning:!0,options:angular.extend({},this.options,r),registeredParent:n},this.onStart(e,t)}},move:function(e,t){this.state.isRunning&&this.onMove(e,t)},end:function(e,t){this.state.isRunning&&(this.onEnd(e,t),this.state.isRunning=!1)},cancel:function(e,t){this.onCancel(e,t),this.state={}},getNearestParent:function(e){for(var t=e;t;){if((t.$mdGesture||{})[this.name])return t;t=t.parentNode}},registerElement:function(e,t){function n(){delete e[0].$mdGesture[r.name],e.off("$destroy",n)}var r=this;return e[0].$mdGesture=e[0].$mdGesture||{},e[0].$mdGesture[this.name]=t||{},e.on("$destroy",n),n}};return e}])}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";function e(){function e(e){function t(e){return o.optionsFactory=e.options,o.methods=(e.methods||[]).concat(i),a}function n(t,n){if(n=n||{},n.methods=n.methods||[],n.options=n.options||function(){return{}},/^cancel|hide|show$/.test(t))throw new Error("Preset '"+t+"' in "+e+" is reserved!");if(n.methods.indexOf("_options")>-1)throw new Error("Method '_options' in "+e+" is reserved!");return o.presets[t]={methods:n.methods.concat(i),optionsFactory:n.options,argOption:n.argOption},a}function r(t,n,r){function i(e){return e&&e._options&&(e=e._options),u.show(angular.extend({},s,e))}function a(t,n){var i={};return i[e]=l,r.invoke(t||function(){return n},{},i)}var c,s,u=t(),l={hide:u.hide,cancel:u.cancel,show:i};return c=o.methods||[],s=a(o.optionsFactory,{}),angular.forEach(o.presets,function(e,t){function n(e){this._options=angular.extend({},r,e)}var r=a(e.optionsFactory,{}),i=(e.methods||[]).concat(c);if(angular.extend(r,{$type:t}),angular.forEach(i,function(e){n.prototype[e]=function(t){return this._options[e]=t,this}}),e.argOption){var o="show"+t.charAt(0).toUpperCase()+t.slice(1);l[o]=function(e){var n=l[t](e);return l.show(n)}}l[t]=function(t){return arguments.length&&e.argOption&&!angular.isObject(t)&&!angular.isArray(t)?(new n)[e.argOption](t):new n(t)}}),l}var i=["onHide","onShow","onRemove"],o={presets:{}},a={setDefaults:t,addPreset:n,$get:r};return a.addPreset("build",{methods:["controller","controllerAs","resolve","template","templateUrl","themable","transformTemplate","parent"]}),r.$inject=["$$interimElement","$animate","$injector"],a}function t(e,t,n,r,i,o,a,c,s){function u(e){return e&&angular.isString(e)?e.replace(/\{\{/g,l).replace(/}}/g,d):e}var l=a.startSymbol(),d=a.endSymbol(),f="{{"===l&&"}}"===d,m=f?angular.identity:u;return function(){function a(e){p.length&&f.cancel();var t=new d(e);return p.push(t),t.show().then(function(){return t.deferred.promise})}function u(e){var n=p.shift();return n&&n.remove().then(function(){n.deferred.resolve(e)}),n?n.deferred.promise:t.when(e)}function l(e){var n=p.shift();return n&&n.remove().then(function(){n.deferred.reject(e)}),n?n.deferred.promise:t.reject(e)}function d(a){var u,l,d;return a=a||{},a=angular.extend({scope:a.scope||n.$new(a.isolateScope),onShow:function(e,t,n){return o.enter(t,n.parent)},onRemove:function(e,n){return n&&o.leave(n)||t.when()}},a),a.template&&(a.template=m(a.template)),u={options:a,deferred:t.defer(),show:function(){return c.compile(a).then(function(n){function o(){a.hideDelay&&(l=r(f.cancel,a.hideDelay))}angular.extend(n.locals,u.options),angular.isString(a.parent)?a.parent=angular.element(e[0].querySelector(a.parent)):a.parent||(a.parent=i.find("body"),a.parent.length||(a.parent=i)),d=n.link(a.scope),a.themable&&s(d);var c=a.onShow(a.scope,d,a);return t.when(c).then(function(){(a.onComplete||angular.noop)(a.scope,d,a),o()})})},cancelTimeout:function(){l&&(r.cancel(l),l=void 0)},remove:function(){u.cancelTimeout();var e=a.onRemove(a.scope,d,a);return t.when(e).then(function(){a.scope.$destroy()})}}}var f,p=[];return f={show:a,hide:u,cancel:l}}}return e.$get=t,t.$inject=["$document","$q","$rootScope","$timeout","$rootElement","$animate","$interpolate","$mdCompiler","$mdTheming"],e}angular.module("material.core").provider("$$interimElement",e)}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";function e(e,t){function n(e){return e&&""!==e}var r,i=[],o={};return r={notFoundError:function(t){e.error("No instance found for handle",t)},getInstances:function(){return i},get:function(e){if(!n(e))return null;var t,r,o;for(t=0,r=i.length;r>t;t++)if(o=i[t],o.$$mdHandle===e)return o;return null},register:function(e,t){function n(){var t=i.indexOf(e);-1!==t&&i.splice(t,1)}function r(){var n=o[t];n&&(n.resolve(e),delete o[t])}return t?(e.$$mdHandle=t,i.push(e),r(),n):angular.noop},when:function(e){if(n(e)){var i=t.defer(),a=r.get(e);return a?i.resolve(a):o[e]=i,i.promise}return t.reject("Invalid `md-component-id` value.")}}}angular.module("material.core").factory("$mdComponentRegistry",e),e.$inject=["$log","$q"]}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";function e(e){return{controller:angular.noop,link:function(t,n,r){r.hasOwnProperty("mdInkRippleCheckbox")?e.attachCheckboxBehavior(t,n):e.attachButtonBehavior(t,n)}}}function t(e,t){function n(e,t,n){return o(e,t,angular.extend({isFAB:t.hasClass("md-fab"),isMenuItem:t.hasClass("md-menu-item"),center:!1,dimBackground:!0},n))}function r(e,t,n){return o(e,t,angular.extend({center:!0,dimBackground:!1,fitRipple:!0},n))}function i(e,t,n){return o(e,t,angular.extend({center:!1,dimBackground:!0,outline:!0},n))}function o(n,r,i){function o(){var e=r.data("$mdRippleContainer");return e?e:(e=angular.element('<div class="md-ripple-container">'),r.append(e),r.data("$mdRippleContainer",e),e)}function a(e){function t(e){var t="#"===e.charAt(0)?e.substr(1):e,n=t.length/3,r=t.substr(0,n),i=t.substr(n,n),o=t.substr(2*n);return 1===n&&(r+=r,i+=i,o+=o),"rgba("+parseInt(r,16)+","+parseInt(i,16)+","+parseInt(o,16)+",0.1)"}function n(e){return e.replace(")",", 0.1)").replace("(","a(")}if(e)return 0===e.indexOf("rgba")?e.replace(/\d?\.?\d*\s*\)\s*$/,"0.1)"):0===e.indexOf("rgb")?n(e):0===e.indexOf("#")?t(e):void 0}function c(e,n){$.splice($.indexOf(e),1),0===$.length&&o().css({backgroundColor:""}),t(function(){e.remove()},n,!1)}function s(e){var t=$.indexOf(e),n=g[t]||{},r=$.length>1?!1:b,o=$.length>1?!1:y;r||n.animating||o?e.addClass("md-ripple-visible"):e&&(e.removeClass("md-ripple-visible"),i.outline&&e.css({width:m+"px",height:m+"px",marginLeft:-1*m+"px",marginTop:-1*m+"px"}),c(e,i.outline?450:650))}function u(n,c){function u(e){var t=angular.element('<div class="md-ripple" data-counter="'+h++ +'">');return $.unshift(t),g.unshift({animating:!0}),f.append(t),e&&t.css(e),t}function l(e,t){var n,r,o,a=f.prop("offsetWidth"),c=f.prop("offsetHeight");return i.isMenuItem?r=Math.sqrt(Math.pow(a,2)+Math.pow(c,2)):i.outline?(o=E.getBoundingClientRect(),e-=o.left,t-=o.top,a=Math.max(e,a-e),c=Math.max(t,c-t),r=2*Math.sqrt(Math.pow(a,2)+Math.pow(c,2))):(n=i.isFAB?1.1:.8,r=Math.sqrt(Math.pow(a,2)+Math.pow(c,2))*n,i.fitRipple&&(r=Math.min(c,a,r))),r}function d(e,t,n){function r(e){return e.replace("rgba","rgb").replace(/,[^\)\,]+\)/,")")}var o,a={backgroundColor:r(A),borderColor:r(A),width:e+"px",height:e+"px"};return i.outline?(a.width=0,a.height=0):a.marginLeft=a.marginTop=e*-.5+"px",i.center?a.left=a.top="50%":(o=E.getBoundingClientRect(),a.left=Math.round((t-o.left)/f.prop("offsetWidth")*100)+"%",a.top=Math.round((n-o.top)/f.prop("offsetHeight")*100)+"%"),a}A=a(r.attr("md-ink-ripple"))||a(e.getComputedStyle(i.colorElement[0]).color||"rgb(0, 0, 0)");var f=o(),p=l(n,c),v=d(p,n,c),b=u(v),y=$.indexOf(b),w=g[y]||{};return m=p,w.animating=!0,t(function(){i.dimBackground&&f.css({backgroundColor:A}),b.addClass("md-ripple-placed md-ripple-scaled"),b.css(i.outline?{borderWidth:.5*p+"px",marginLeft:p*-.5+"px",marginTop:p*-.5+"px"}:{left:"50%",top:"50%"}),s(b),t(function(){w.animating=!1,s(b)},i.outline?450:225,!1)},0,!1),b}function l(e){if(f()){{u(e.pointer.x,e.pointer.y)}y=!0}}function d(){y=!1;var e=$[$.length-1];t(function(){s(e)},0,!1)}function f(){function e(e){return e&&e.hasAttribute&&e.hasAttribute("disabled")}var t=E.parentNode,n=t&&t.parentNode,r=n&&n.parentNode;return!(e(E)||e(t)||e(n)||e(r))}if(r.controller("mdNoInk"))return angular.noop;i=angular.extend({colorElement:r,mousedown:!0,hover:!0,focus:!0,center:!1,mousedownPauseTime:150,dimBackground:!1,outline:!1,isFAB:!1,isMenuItem:!1,fitRipple:!1},i);var m,p=r.controller("mdInkRipple")||{},h=0,$=[],g=[],v=r.attr("md-highlight"),b=!1,y=!1,E=r[0],w=r.attr("md-ripple-size"),A=a(r.attr("md-ink-ripple"))||a(e.getComputedStyle(i.colorElement[0]).color||"rgb(0, 0, 0)");switch(w){case"full":i.isFAB=!0;break;case"partial":i.isFAB=!1}return i.mousedown&&r.on("$md.pressdown",l).on("$md.pressup",d),p.createRipple=u,v&&n.$watch(v,function(e){b=e,b&&!$.length&&t(function(){u(0,0)},0,!1),angular.forEach($,s)}),function(){r.off("$md.pressdown",l).off("$md.pressup",d),o().remove()}}return{attachButtonBehavior:n,attachCheckboxBehavior:r,attachTabBehavior:i,attach:o}}function n(){return function(){return{controller:angular.noop}}}angular.module("material.core").factory("$mdInkRipple",t).directive("mdInkRipple",e).directive("mdNoInk",n()).directive("mdNoBar",n()).directive("mdNoStretch",n()),e.$inject=["$mdInkRipple"],t.$inject=["$window","$timeout"]}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";angular.module("material.core.theming.palette",[]).constant("$mdColorPalette",{red:{50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 300 400 A100",contrastStrongLightColors:"500 600 700 A200 A400 A700"},pink:{50:"#fce4ec",100:"#f8bbd0",200:"#f48fb1",300:"#f06292",400:"#ec407a",500:"#e91e63",600:"#d81b60",700:"#c2185b",800:"#ad1457",900:"#880e4f",A100:"#ff80ab",A200:"#ff4081",A400:"#f50057",A700:"#c51162",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 300 400 A100",contrastStrongLightColors:"500 600 A200 A400 A700"},purple:{50:"#f3e5f5",100:"#e1bee7",200:"#ce93d8",300:"#ba68c8",400:"#ab47bc",500:"#9c27b0",600:"#8e24aa",700:"#7b1fa2",800:"#6a1b9a",900:"#4a148c",A100:"#ea80fc",A200:"#e040fb",A400:"#d500f9",A700:"#aa00ff",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 A100",contrastStrongLightColors:"300 400 A200 A400 A700"},"deep-purple":{50:"#ede7f6",100:"#d1c4e9",200:"#b39ddb",300:"#9575cd",400:"#7e57c2",500:"#673ab7",600:"#5e35b1",700:"#512da8",800:"#4527a0",900:"#311b92",A100:"#b388ff",A200:"#7c4dff",A400:"#651fff",A700:"#6200ea",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 A100",contrastStrongLightColors:"300 400 A200"},indigo:{50:"#e8eaf6",100:"#c5cae9",200:"#9fa8da",300:"#7986cb",400:"#5c6bc0",500:"#3f51b5",600:"#3949ab",700:"#303f9f",800:"#283593",900:"#1a237e",A100:"#8c9eff",A200:"#536dfe",A400:"#3d5afe",A700:"#304ffe",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 A100",contrastStrongLightColors:"300 400 A200 A400"},blue:{50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff",contrastDefaultColor:"light",contrastDarkColors:"100 200 300 400 A100",contrastStrongLightColors:"500 600 700 A200 A400 A700"},"light-blue":{50:"#e1f5fe",100:"#b3e5fc",200:"#81d4fa",300:"#4fc3f7",400:"#29b6f6",500:"#03a9f4",600:"#039be5",700:"#0288d1",800:"#0277bd",900:"#01579b",A100:"#80d8ff",A200:"#40c4ff",A400:"#00b0ff",A700:"#0091ea",contrastDefaultColor:"dark",contrastLightColors:"500 600 700 800 900 A700",contrastStrongLightColors:"500 600 700 800 A700"},cyan:{50:"#e0f7fa",100:"#b2ebf2",200:"#80deea",300:"#4dd0e1",400:"#26c6da",500:"#00bcd4",600:"#00acc1",700:"#0097a7",800:"#00838f",900:"#006064",A100:"#84ffff",A200:"#18ffff",A400:"#00e5ff",A700:"#00b8d4",contrastDefaultColor:"dark",contrastLightColors:"500 600 700 800 900",contrastStrongLightColors:"500 600 700 800"},teal:{50:"#e0f2f1",100:"#b2dfdb",200:"#80cbc4",300:"#4db6ac",400:"#26a69a",500:"#009688",600:"#00897b",700:"#00796b",800:"#00695c",900:"#004d40",A100:"#a7ffeb",A200:"#64ffda",A400:"#1de9b6",A700:"#00bfa5",contrastDefaultColor:"dark",contrastLightColors:"500 600 700 800 900",contrastStrongLightColors:"500 600 700"},green:{50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853",contrastDefaultColor:"dark",contrastLightColors:"500 600 700 800 900",contrastStrongLightColors:"500 600 700"},"light-green":{50:"#f1f8e9",100:"#dcedc8",200:"#c5e1a5",300:"#aed581",400:"#9ccc65",500:"#8bc34a",600:"#7cb342",700:"#689f38",800:"#558b2f",900:"#33691e",A100:"#ccff90",A200:"#b2ff59",A400:"#76ff03",A700:"#64dd17",contrastDefaultColor:"dark",contrastLightColors:"800 900",contrastStrongLightColors:"800 900"},lime:{50:"#f9fbe7",100:"#f0f4c3",200:"#e6ee9c",300:"#dce775",400:"#d4e157",500:"#cddc39",600:"#c0ca33",700:"#afb42b",800:"#9e9d24",900:"#827717",A100:"#f4ff81",A200:"#eeff41",A400:"#c6ff00",A700:"#aeea00",contrastDefaultColor:"dark",contrastLightColors:"900",contrastStrongLightColors:"900"},yellow:{50:"#fffde7",100:"#fff9c4",200:"#fff59d",300:"#fff176",400:"#ffee58",500:"#ffeb3b",600:"#fdd835",700:"#fbc02d",800:"#f9a825",900:"#f57f17",A100:"#ffff8d",A200:"#ffff00",A400:"#ffea00",A700:"#ffd600",contrastDefaultColor:"dark"},amber:{50:"#fff8e1",100:"#ffecb3",200:"#ffe082",300:"#ffd54f",400:"#ffca28",500:"#ffc107",600:"#ffb300",700:"#ffa000",800:"#ff8f00",900:"#ff6f00",A100:"#ffe57f",A200:"#ffd740",A400:"#ffc400",A700:"#ffab00",contrastDefaultColor:"dark"},orange:{50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00",contrastDefaultColor:"dark",contrastLightColors:"800 900",contrastStrongLightColors:"800 900"},"deep-orange":{50:"#fbe9e7",100:"#ffccbc",200:"#ffab91",300:"#ff8a65",400:"#ff7043",500:"#ff5722",600:"#f4511e",700:"#e64a19",800:"#d84315",900:"#bf360c",A100:"#ff9e80",A200:"#ff6e40",A400:"#ff3d00",A700:"#dd2c00",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 300 400 A100 A200",contrastStrongLightColors:"500 600 700 800 900 A400 A700"},brown:{50:"#efebe9",100:"#d7ccc8",200:"#bcaaa4",300:"#a1887f",400:"#8d6e63",500:"#795548",600:"#6d4c41",700:"#5d4037",800:"#4e342e",900:"#3e2723",A100:"#d7ccc8",A200:"#bcaaa4",A400:"#8d6e63",A700:"#5d4037",contrastDefaultColor:"light",contrastDarkColors:"50 100 200",contrastStrongLightColors:"300 400"},grey:{0:"#ffffff",50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",1000:"#000000",A100:"#ffffff",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161",contrastDefaultColor:"dark",contrastLightColors:"600 700 800 900"},"blue-grey":{50:"#eceff1",100:"#cfd8dc",200:"#b0bec5",300:"#90a4ae",400:"#78909c",500:"#607d8b",600:"#546e7a",700:"#455a64",800:"#37474f",900:"#263238",A100:"#cfd8dc",A200:"#b0bec5",A400:"#78909c",A700:"#455a64",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 300",contrastStrongLightColors:"400 500"}})}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";function e(e){function t(e,t){return t=t||{},s[e]=i(e,t),l}function n(e,t){return i(e,angular.extend({},s[e]||{},t))}function i(e,t){var n=A.filter(function(e){return!t[e]});if(n.length)throw new Error("Missing colors %1 in palette %2!".replace("%1",n.join(", ")).replace("%2",e));return t}function o(e,t){if(t=t||"default",u[e])return u[e];var n="string"==typeof t?u[t]:t,r=new a(e);return n&&angular.forEach(n.colors,function(e,t){r.colors[t]={name:e.name,hues:angular.extend({},e.hues)}}),u[e]=r,r}function a(e){function t(e){if(e=0===arguments.length?!0:!!e,e!==n.isDark){n.isDark=e,n.foregroundPalette=n.isDark?m:f,n.foregroundShadow=n.isDark?p:h;var t=n.isDark?w:E,r=n.isDark?E:w;return angular.forEach(t,function(e,t){var i=n.colors[t],o=r[t];if(i)for(var a in i.hues)i.hues[a]===o[a]&&(i.hues[a]=e[a])}),n}}var n=this;n.name=e,n.colors={},n.dark=t,t(!1),b.forEach(function(e){var t=(n.isDark?w:E)[e];n[e+"Palette"]=function(r,i){var o=n.colors[e]={name:r,hues:angular.extend({},t,i)};return Object.keys(o.hues).forEach(function(e){if(!t[e])throw new Error("Invalid hue name '%1' in theme %2's %3 color %4. Available hue names: %4".replace("%1",e).replace("%2",n.name).replace("%3",r).replace("%4",Object.keys(t).join(", ")))}),Object.keys(o.hues).map(function(e){return o.hues[e]}).forEach(function(t){if(-1==A.indexOf(t))throw new Error("Invalid hue value '%1' in theme %2's %3 color %4. Available hue values: %5".replace("%1",t).replace("%2",n.name).replace("%3",e).replace("%4",r).replace("%5",A.join(", ")))}),n},n[e+"Color"]=function(){var t=Array.prototype.slice.call(arguments);return console.warn("$mdThemingProviderTheme."+e+"Color() has been depricated. Use $mdThemingProviderTheme."+e+"Palette() instead."),n[e+"Palette"].apply(n,t)}})}function d(e,t){function n(e){return void 0===e||""===e?!0:void 0!==u[e]}function r(t,n){void 0===n&&(n=t,t=void 0),void 0===t&&(t=e),r.inherit(n,n)}return r.inherit=function(r,i){function o(e){n(e)||t.warn("Attempted to use unregistered theme '"+e+"'. Register it with $mdThemingProvider.theme().");var i=r.data("$mdThemeName");i&&r.removeClass("md-"+i+"-theme"),r.addClass("md-"+e+"-theme"),r.data("$mdThemeName",e)}var a=i.controller("mdTheme"),c=r.attr("md-theme-watch");if((g||angular.isDefined(c))&&"false"!=c){var s=e.$watch(function(){return a&&a.$mdTheme||$},o);r.on("$destroy",s)}else{var u=a&&a.$mdTheme||$;o(u)}},r.registered=n,r}s={},u={};var $="default",g=!1;return angular.extend(s,e),d.$inject=["$rootScope","$log"],l={definePalette:t,extendPalette:n,theme:o,setDefaultTheme:function(e){$=e},alwaysWatchTheme:function(e){g=e},$get:d,_LIGHT_DEFAULT_HUES:E,_DARK_DEFAULT_HUES:w,_PALETTES:s,_THEMES:u,_parseRules:r,_rgba:c}}function t(e,t,n){return{priority:100,link:{pre:function(r,i,o){var a={$setTheme:function(t){e.registered(t)||n.warn("attempted to use unregistered theme '"+t+"'"),a.$mdTheme=t}};i.data("$mdThemeController",a),a.$setTheme(t(o.mdTheme)(r)),o.$observe("mdTheme",a.$setTheme)}}}}function n(e){return e}function r(e,t,n){o(e,t),n=n.replace(/THEME_NAME/g,e.name);var r=[],i=e.colors[t],a=new RegExp(".md-"+e.name+"-theme","g"),u=new RegExp("('|\")?{{\\s*("+t+")-(color|contrast)-?(\\d\\.?\\d*)?\\s*}}(\"|')?","g"),l=/'?"?\{\{\s*([a-zA-Z]+)-(A?\d+|hue\-[0-3]|shadow)-?(\d\.?\d*)?\s*\}\}'?"?/g,d=s[i.name];return n=n.replace(l,function(t,n,r,i){return"foreground"===n?"shadow"==r?e.foregroundShadow:e.foregroundPalette[r]||e.foregroundPalette[1]:(0===r.indexOf("hue")&&(r=e.colors[n].hues[r]),c((s[e.colors[n].name][r]||"").value,i))}),angular.forEach(i.hues,function(t,i){var o=n.replace(u,function(e,n,r,i,o){return c(d[t]["color"===i?"value":"contrast"],o)});"default"!==i&&(o=o.replace(a,".md-"+e.name+"-theme.md-"+i)),r.push(o)}),r.join("")}function i(e){function t(e){var t=e.contrastDefaultColor,n=e.contrastLightColors||[],r=e.contrastStrongLightColors||[],i=e.contrastDarkColors||[];"string"==typeof n&&(n=n.split(" ")),"string"==typeof r&&(r=r.split(" ")),"string"==typeof i&&(i=i.split(" ")),delete e.contrastDefaultColor,delete e.contrastLightColors,delete e.contrastStrongLightColors,delete e.contrastDarkColors,angular.forEach(e,function(o,c){function s(){return"light"===t?i.indexOf(c)>-1?$:r.indexOf(c)>-1?v:g:n.indexOf(c)>-1?r.indexOf(c)>-1?v:g:$}if(!angular.isObject(o)){var u=a(o);if(!u)throw new Error("Color %1, in palette %2's hue %3, is invalid. Hex or rgb(a) color expected.".replace("%1",o).replace("%2",e.name).replace("%3",c));e[c]={value:u,contrast:s()}}})}var n=e.has("$MD_THEME_CSS")?e.get("$MD_THEME_CSS"):"";angular.forEach(s,t);var i=n.split(/\}(?!(\}|'|"|;))/).filter(function(e){return e&&e.length}).map(function(e){return e.trim()+"}"}),o={};b.forEach(function(e){o[e]=""});var c=new RegExp("md-("+b.join("|")+")","g");i.forEach(function(e){for(var t,n=(e.match(c),0);t=b[n];n++)if(e.indexOf(".md-"+t)>-1)return o[t]+=e;for(n=0;t=b[n];n++)if(e.indexOf(t)>-1)return o[t]+=e;return o[y]+=e});var l="";if(angular.forEach(u,function(e){b.forEach(function(t){l+=r(e,t,o[t]+"")}),e.colors.primary.name==e.colors.accent.name&&console.warn("$mdThemingProvider: Using the same palette for primary andaccent. This violates the material design spec.")}),!d){var f=document.createElement("style");f.innerHTML=l;var m=document.getElementsByTagName("head")[0];m.insertBefore(f,m.firstElementChild),d=!0}}function o(e,t){if(!s[(e.colors[t]||{}).name])throw new Error("You supplied an invalid color palette for theme %1's %2 palette. Available palettes: %3".replace("%1",e.name).replace("%2",t).replace("%3",Object.keys(s).join(", ")))}function a(e){if(angular.isArray(e)&&3==e.length)return e;if(/^rgb/.test(e))return e.replace(/(^\s*rgba?\(|\)\s*$)/g,"").split(",").map(function(e,t){return 3==t?parseFloat(e,10):parseInt(e,10)});if("#"==e.charAt(0)&&(e=e.substring(1)),/^([a-fA-F0-9]{3}){1,2}$/g.test(e)){var t=e.length/3,n=e.substr(0,t),r=e.substr(t,t),i=e.substr(2*t);return 1===t&&(n+=n,r+=r,i+=i),[parseInt(n,16),parseInt(r,16),parseInt(i,16)]}}function c(e,t){return 4==e.length&&(e=angular.copy(e),t?e.pop():t=e.pop()),t&&("number"==typeof t||"string"==typeof t&&t.length)?"rgba("+e.join(",")+","+t+")":"rgb("+e.join(",")+")"}angular.module("material.core.theming",["material.core.theming.palette"]).directive("mdTheme",t).directive("mdThemable",n).provider("$mdTheming",e).run(i);var s,u,l,d,f={name:"dark",1:"rgba(0,0,0,0.87)",2:"rgba(0,0,0,0.54)",3:"rgba(0,0,0,0.26)",4:"rgba(0,0,0,0.12)"},m={name:"light",1:"rgba(255,255,255,1.0)",2:"rgba(255,255,255,0.7)",3:"rgba(255,255,255,0.3)",4:"rgba(255,255,255,0.12)"},p="1px 1px 0px rgba(0,0,0,0.4), -1px -1px 0px rgba(0,0,0,0.4)",h="",$=a("rgba(0,0,0,0.87)"),g=a("rgba(255,255,255,0.87"),v=a("rgb(255,255,255)"),b=["primary","accent","warn","background"],y="primary",E={accent:{"default":"A200","hue-1":"A100","hue-2":"A400","hue-3":"A700"}},w={background:{"default":"500","hue-1":"300","hue-2":"600","hue-3":"800"}};b.forEach(function(e){var t={"default":"500","hue-1":"300","hue-2":"800","hue-3":"A100"};E[e]||(E[e]=t),w[e]||(w[e]=t)});var A=["50","100","200","300","400","500","600","700","800","900","A100","A200","A400","A700"];e.$inject=["$mdColorPalette"],t.$inject=["$mdTheming","$interpolate","$log"],n.$inject=["$mdTheming"],i.$inject=["$injector"]}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";function e(e){return e}angular.module("material.components.backdrop",["material.core"]).directive("mdBackdrop",e),e.$inject=["$mdTheming"]}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";function e(){return{restrict:"E"}}function t(e){function t(e,t,i,o,a,c,s,u,l,d){function f(n,r,o){h=a('<md-backdrop class="md-opaque md-bottom-sheet-backdrop">')(n),h.on("click",function(){i(s.cancel)}),c.inherit(h,o.parent),e.enter(h,o.parent,null);var l=new p(r,o.parent);return o.bottomSheet=l,o.targetEvent&&angular.element(o.targetEvent.target).blur(),c.inherit(l.element,o.parent),o.disableParentScroll&&(o.lastOverflow=o.parent.css("overflow"),o.parent.css("overflow","hidden")),e.enter(l.element,o.parent).then(function(){var e=angular.element(r[0].querySelector("button")||r[0].querySelector("a")||r[0].querySelector("[ng-click]"));e.focus(),o.escapeToClose&&(o.rootElementKeyupCallback=function(e){e.keyCode===t.KEY_CODE.ESCAPE&&i(s.cancel)},u.on("keyup",o.rootElementKeyupCallback))})}function m(t,n,r){var i=r.bottomSheet;return e.leave(h),e.leave(i.element).then(function(){r.disableParentScroll&&(r.parent.css("overflow",r.lastOverflow),delete r.lastOverflow),i.cleanup(),r.targetEvent&&angular.element(r.targetEvent.target).focus()})}function p(e,o){function a(){e.css(t.CSS.TRANSITION_DURATION,"0ms")}function c(n){var i=n.pointer.distanceY;5>i&&(i=Math.max(-r,i/2)),e.css(t.CSS.TRANSFORM,"translate3d(0,"+(r+i)+"px,0)")}function u(r){if(r.pointer.distanceY>0&&(r.pointer.distanceY>20||Math.abs(r.pointer.velocityY)>n)){var o=e.prop("offsetHeight")-r.pointer.distanceY,a=Math.min(o/r.pointer.velocityY*.75,500);e.css(t.CSS.TRANSITION_DURATION,a+"ms"),i(s.cancel)}else e.css(t.CSS.TRANSITION_DURATION,""),e.css(t.CSS.TRANSFORM,"")}var l=d.register(o,"drag",{horizontal:!1});return o.on("$md.dragstart",a).on("$md.drag",c).on("$md.dragend",u),{element:e,cleanup:function(){l(),o.off("$md.dragstart",a).off("$md.drag",c).off("$md.dragend",u)}}}var h;return{themable:!0,targetEvent:null,onShow:f,onRemove:m,escapeToClose:!0,disableParentScroll:!0}}var n=.5,r=80;return t.$inject=["$animate","$mdConstant","$timeout","$$rAF","$compile","$mdTheming","$mdBottomSheet","$rootElement","$rootScope","$mdGesture"],e("$mdBottomSheet").setDefaults({methods:["disableParentScroll","escapeToClose","targetEvent"],options:t})}angular.module("material.components.bottomSheet",["material.core","material.components.backdrop"]).directive("mdBottomSheet",e).provider("$mdBottomSheet",t),t.$inject=["$$interimElementProvider"]}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";function e(e,t,n){function r(e){return angular.isDefined(e.href)||angular.isDefined(e.ngHref)}function i(e,t){return r(t)?'<a class="md-button" ng-transclude></a>':'<button class="md-button" ng-transclude></button>'}function o(i,o,a){var c=o[0];t(o),e.attachButtonBehavior(i,o);var s=c.textContent.trim();s||n.expect(o,"aria-label"),r(a)&&angular.isDefined(a.ngDisabled)&&i.$watch(a.ngDisabled,function(e){o.attr("tabindex",e?-1:0)})}return{restrict:"E",replace:!0,transclude:!0,template:i,link:o}}angular.module("material.components.button",["material.core"]).directive("mdButton",e),e.$inject=["$mdInkRipple","$mdTheming","$mdAria"]}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";function e(e){return{restrict:"E",link:function(t,n){e(n)}}}angular.module("material.components.card",["material.core"]).directive("mdCard",e),e.$inject=["$mdTheming"]}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";function e(e,t,n,r,i,o){function a(t,a){return a.type="checkbox",a.tabIndex=0,t.attr("role",a.type),function(t,a,s,u){function l(e){e.which===r.KEY_CODE.SPACE&&(e.preventDefault(),d(e))}function d(e){a[0].hasAttribute("disabled")||t.$apply(function(){m=!m,u.$setViewValue(m,e&&e.type),u.$render()})}function f(){m=u.$viewValue,m?a.addClass(c):a.removeClass(c)}u=u||o.fakeNgModel();var m=!1;i(a),n.expectWithText(a,"aria-label"),e.link.pre(t,{on:angular.noop,0:{}},s,[u]),a.on("click",d).on("keypress",l),u.$render=f}}e=e[0];var c="md-checked";return{restrict:"E",transclude:!0,require:"?ngModel",template:'<div class="md-container" md-ink-ripple md-ink-ripple-checkbox><div class="md-icon"></div></div><div ng-transclude class="md-label"></div>',compile:a}}angular.module("material.components.checkbox",["material.core"]).directive("mdCheckbox",e),e.$inject=["inputDirective","$mdInkRipple","$mdAria","$mdConstant","$mdTheming","$mdUtil"]}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";function e(e){function n(e,t){this.$scope=e,this.$element=t}return{restrict:"E",controller:["$scope","$element",n],link:function(n,r){r[0];e(r),n.$broadcast("$mdContentLoaded",r),t(r[0])}}}function t(e){angular.element(e).on("$md.pressdown",function(t){"t"===t.pointer.type&&(t.$materialScrollFixed||(t.$materialScrollFixed=!0,0===e.scrollTop?e.scrollTop=1:e.scrollHeight===e.scrollTop+e.offsetHeight&&(e.scrollTop-=1)))})}angular.module("material.components.content",["material.core"]).directive("mdContent",e),e.$inject=["$mdTheming"]}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";function e(e,t){return{restrict:"E",link:function(n,r){t(r),e(function(){var e=r[0].querySelector("md-content");e&&e.scrollHeight>e.clientHeight&&r.addClass("md-content-overflow")})}}}function t(e){function t(e){return{template:['<md-dialog aria-label="{{ dialog.ariaLabel }}">',"<md-content>","<h2>{{ dialog.title }}</h2>","<p>{{ dialog.content }}</p>","</md-content>",'<div class="md-actions">','<md-button ng-if="dialog.$type == \'confirm\'" ng-click="dialog.abort()">',"{{ dialog.cancel }}","</md-button>",'<md-button ng-click="dialog.hide()" class="md-primary">',"{{ dialog.ok }}","</md-button>","</div>","</md-dialog>"].join(""),controller:function(){this.hide=function(){e.hide(!0)},this.abort=function(){e.cancel()}},controllerAs:"dialog",bindToController:!0}}function n(e,t,n,r,i,o,a,c,s,u,l,d){function f(n,i,o){function a(){var e=i[0].querySelector(".dialog-close");if(!e){var t=i[0].querySelectorAll(".md-actions button");e=t[t.length-1]}return angular.element(e)}o.parent=angular.element(o.parent),o.popInTarget=angular.element((o.targetEvent||{}).target);var u=a();if(p(i.find("md-dialog")),o.hasBackdrop){var l=o.parent.prop("scrollTop");o.backdrop=angular.element('<md-backdrop class="md-dialog-backdrop md-opaque">'),s.inherit(o.backdrop,o.parent),r.enter(o.backdrop,o.parent),i.css("top",l+"px")}return o.disableParentScroll&&(o.lastOverflow=o.parent.css("overflow"),o.parent.css("overflow","hidden")),h(i,o.parent,o.popInTarget&&o.popInTarget.length&&o.popInTarget).then(function(){o.escapeToClose&&(o.rootElementKeyupCallback=function(t){t.keyCode===c.KEY_CODE.ESCAPE&&e(d.cancel)},t.on("keyup",o.rootElementKeyupCallback)),o.clickOutsideToClose&&(o.dialogClickOutsideCallback=function(t){t.target===i[0]&&e(d.cancel)},i.on("click",o.dialogClickOutsideCallback)),u.focus()})}function m(e,n,i){return i.backdrop&&r.leave(i.backdrop),i.disableParentScroll&&(i.parent.css("overflow",i.lastOverflow),delete i.lastOverflow),i.escapeToClose&&t.off("keyup",i.rootElementKeyupCallback),i.clickOutsideToClose&&n.off("click",i.dialogClickOutsideCallback),$(n,i.parent,i.popInTarget&&i.popInTarget.length&&i.popInTarget).then(function(){i.scope.$destroy(),n.remove(),i.popInTarget&&i.popInTarget.focus()})}function p(e){e.attr({role:"dialog"});var t=e.find("md-content");0===t.length&&(t=e),i.expectAsync(e,"aria-label",function(){var e=t.text().split(/\s+/);return e.length>3&&(e=e.slice(0,3).concat("...")),e.join(" ")})}function h(e,t,n){var r=e.find("md-dialog");return t.append(e),g(r,n),u(function(){r.addClass("transition-in").css(c.CSS.TRANSFORM,"")}),v(r)}function $(e,t,n){var r=e.find("md-dialog");return r.addClass("transition-out").removeClass("transition-in"),g(r,n),v(r)}function g(e,t){if(t){var n=t[0].getBoundingClientRect(),r=e[0].getBoundingClientRect(),i=Math.min(.5,n.width/r.width),o=Math.min(.5,n.height/r.height);e.css(c.CSS.TRANSFORM,"translate3d("+(-r.left+n.left+n.width/2-r.width/2)+"px,"+(-r.top+n.top+n.height/2-r.height/2)+"px,0) scale("+i+","+o+")")}}function v(e){function t(r){r.target===e[0]&&(e.off(c.CSS.TRANSITIONEND,t),n.resolve())}var n=l.defer();return e.on(c.CSS.TRANSITIONEND,t),n.promise}return{hasBackdrop:!0,isolateScope:!0,onShow:f,onRemove:m,clickOutsideToClose:!0,escapeToClose:!0,targetEvent:null,disableParentScroll:!0,transformTemplate:function(e){return'<div class="md-dialog-container">'+e+"</div>"}}}return t.$inject=["$mdDialog"],n.$inject=["$timeout","$rootElement","$compile","$animate","$mdAria","$document","$mdUtil","$mdConstant","$mdTheming","$$rAF","$q","$mdDialog"],e("$mdDialog").setDefaults({methods:["disableParentScroll","hasBackdrop","clickOutsideToClose","escapeToClose","targetEvent"],options:n}).addPreset("alert",{methods:["title","content","ariaLabel","ok"],options:t}).addPreset("confirm",{methods:["title","content","ariaLabel","ok","cancel"],options:t})}angular.module("material.components.dialog",["material.core","material.components.backdrop"]).directive("mdDialog",e).provider("$mdDialog",t),e.$inject=["$$rAF","$mdTheming"],t.$inject=["$$interimElementProvider"]}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";function e(){}function t(t){return{restrict:"E",link:t,controller:[e]}}angular.module("material.components.divider",["material.core"]).directive("mdDivider",t),t.$inject=["$mdTheming"]}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";function e(){return{restrict:"E",template:'<object class="md-icon"></object>',compile:function(e,t){var n=angular.element(e[0].children[0]);angular.isDefined(t.icon)&&n.attr("data",t.icon)}}}angular.module("material.components.icon",["material.core"]).directive("mdIcon",e)}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){function e(e,t){function n(t,n){e(n)}function r(e,n,r){var i=this;i.isErrorGetter=r.mdIsError&&t(r.mdIsError),i.element=n,i.setFocused=function(e){n.toggleClass("md-input-focused",!!e)},i.setHasValue=function(e){n.toggleClass("md-input-has-value",!!e)},i.setInvalid=function(e){n.toggleClass("md-input-invalid",!!e)},e.$watch(function(){return i.label&&i.input},function(e){e&&!i.label.attr("for")&&i.label.attr("for",i.input.attr("id"))})}return r.$inject=["$scope","$element","$attrs"],{restrict:"E",link:n,controller:r}}function t(){return{restrict:"E",require:"^?mdInputContainer",link:function(e,t,n,r){r&&(r.label=t,e.$on("$destroy",function(){r.label=null}))}}}function n(e,t){function n(n,r,i,o){function a(e){return u.setHasValue(!l.$isEmpty(e)),e}function c(){u.setHasValue(r.val().length>0||(r[0].validity||{}).badInput)}function s(){function i(e){return s(),e}function o(){c.style.height="auto";var e=c.scrollHeight-c.offsetHeight;c.scrollTop=0;var t=c.offsetHeight+(e>0?e:0);c.style.height=t+"px"}function a(){c.scrollTop=0;var e=c.scrollHeight-c.offsetHeight,t=c.offsetHeight+e;c.style.height=t+"px"}var c=r[0],s=e.debounce(o,1);l?(l.$formatters.push(i),l.$viewChangeListeners.push(i)):s(),r.on("keydown input",s),r.on("scroll",a),angular.element(t).on("resize",s),n.$on("$destroy",function(){angular.element(t).off("resize",s)})}var u=o[0],l=o[1]||e.fakeNgModel(),d=angular.isDefined(i.readonly);if(u){if(u.input)throw new Error("<md-input-container> can only have *one* <input> or <textarea> child element!");u.input=r,r.addClass("md-input"),r.attr("id")||r.attr("id","input_"+e.nextUid()),"textarea"===r[0].tagName.toLowerCase()&&s();var f=u.isErrorGetter||function(){return l.$invalid&&l.$touched};n.$watch(f,u.setInvalid),l.$parsers.push(a),l.$formatters.push(a),r.on("input",c),d||r.on("focus",function(){u.setFocused(!0)}).on("blur",function(){u.setFocused(!1),c()}),n.$on("$destroy",function(){u.setFocused(!1),u.setHasValue(!1),u.input=null})}}return{restrict:"E",require:["^?mdInputContainer","?ngModel"],link:n}}function r(e){function t(t,n,r,i){function o(e){return u.text((n.val()||e||"").length+"/"+a),e}var a,c=i[0],s=i[1],u=angular.element('<div class="md-char-counter">');r.$set("ngTrim","false"),s.element.append(u),c.$formatters.push(o),c.$viewChangeListeners.push(o),n.on("input keydown",function(){o()}),t.$watch(r.mdMaxlength,function(t){a=t,angular.isNumber(t)&&t>0?(u.parent().length||e.enter(u,s.element,angular.element(s.element[0].lastElementChild)),o()):e.leave(u)}),c.$validators["md-maxlength"]=function(e,t){return!angular.isNumber(a)||0>a?!0:(e||n.val()||t||"").length<=a}}return{restrict:"A",require:["ngModel","^mdInputContainer"],link:t}}function i(){function e(e,t,n,r){if(r){var i=n.placeholder;t.removeAttr("placeholder"),r.element.append('<div class="md-placeholder">'+i+"</div>")}}return{restrict:"A",require:"^^?mdInputContainer",link:e}}angular.module("material.components.input",["material.core"]).directive("mdInputContainer",e).directive("label",t).directive("input",n).directive("textarea",n).directive("mdMaxlength",r).directive("placeholder",i),e.$inject=["$mdTheming","$parse"],n.$inject=["$mdUtil","$window","$compile","$animate"],r.$inject=["$animate"]}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";function e(){return{restrict:"E",link:function(e,t){t.attr({role:"list"})}}}function t(){return{restrict:"E",link:function(e,t){t.attr({role:"listitem"})}}}angular.module("material.components.list",["material.core"]).directive("mdList",e).directive("mdItem",t)}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";function e(e,t,n){function r(e){return e.attr("aria-valuemin",0),e.attr("aria-valuemax",100),e.attr("role","progressbar"),i}function i(e,r,i){n(r);var s,u,l,d,f=r[0],m=f.querySelectorAll(".md-fill, .md-mask.md-full"),p=f.querySelectorAll(".md-fill.md-fix"),h=i.mdDiameter||48,$=h/48;f.style[t.CSS.TRANSFORM]="scale("+$.toString()+")",i.$observe("value",function(e){for(u=o(e),l=a[u],d=c[u],r.attr("aria-valuenow",u),s=0;s<m.length;s++)m[s].style[t.CSS.TRANSFORM]=l;for(s=0;s<p.length;s++)p[s].style[t.CSS.TRANSFORM]=d})}function o(e){return e>100?100:0>e?0:Math.ceil(e||0)}for(var a=new Array(101),c=new Array(101),s=0;101>s;s++){var u=s/100,l=Math.floor(180*u);a[s]="rotate("+l.toString()+"deg)",c[s]="rotate("+(2*l).toString()+"deg)"}return{restrict:"E",template:'<div class="md-spinner-wrapper"><div class="md-inner"><div class="md-gap"></div><div class="md-left"><div class="md-half-circle"></div></div><div class="md-right"><div class="md-half-circle"></div></div></div></div>',compile:r}}angular.module("material.components.progressCircular",["material.core"]).directive("mdProgressCircular",e),e.$inject=["$$rAF","$mdConstant","$mdTheming"]}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";function e(e,n,r){function i(e){return e.attr("aria-valuemin",0),e.attr("aria-valuemax",100),e.attr("role","progressbar"),o}function o(i,o,c){r(o);var s=o[0].querySelector(".md-bar1").style,u=o[0].querySelector(".md-bar2").style,l=angular.element(o[0].querySelector(".md-container"));c.$observe("value",function(e){if("query"!=c.mdMode){var r=a(e);o.attr("aria-valuenow",r),u[n.CSS.TRANSFORM]=t[r]}}),c.$observe("mdBufferValue",function(e){s[n.CSS.TRANSFORM]=t[a(e)]}),e(function(){l.addClass("md-ready")})}function a(e){return e>100?100:0>e?0:Math.ceil(e||0)}return{restrict:"E",template:'<div class="md-container"><div class="md-dashed"></div><div class="md-bar md-bar1"></div><div class="md-bar md-bar2"></div></div>',compile:i}}angular.module("material.components.progressLinear",["material.core"]).directive("mdProgressLinear",e),e.$inject=["$$rAF","$mdConstant","$mdTheming"];var t=function(){function e(e){var t=e/100,n=(e-100)/2;return"translateX("+n.toString()+"%) scale("+t.toString()+", 1)"}for(var t=new Array(101),n=0;101>n;n++)t[n]=e(n);return t}()}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";function e(e,t,n){function r(r,i,o,a){function c(n){switch(n.keyCode){case t.KEY_CODE.LEFT_ARROW:case t.KEY_CODE.UP_ARROW:n.preventDefault(),s.selectPrevious();break;case t.KEY_CODE.RIGHT_ARROW:case t.KEY_CODE.DOWN_ARROW:n.preventDefault(),s.selectNext();break;case t.KEY_CODE.ENTER:var r=angular.element(e.getClosest(i[0],"form"));r.length>0&&r.triggerHandler("submit")}}n(i);var s=a[0],u=a[1]||e.fakeNgModel();s.init(u),i.attr({role:"radiogroup",tabIndex:i.attr("tabindex")||"0"}).on("keydown",c)}function i(e){this._radioButtonRenderFns=[],this.$element=e}function o(){return{init:function(e){this._ngModelCtrl=e,this._ngModelCtrl.$render=angular.bind(this,this.render)},add:function(e){this._radioButtonRenderFns.push(e)},remove:function(e){var t=this._radioButtonRenderFns.indexOf(e);-1!==t&&this._radioButtonRenderFns.splice(t,1)},render:function(){this._radioButtonRenderFns.forEach(function(e){e()})},setViewValue:function(e,t){this._ngModelCtrl.$setViewValue(e,t),this.render()},getViewValue:function(){return this._ngModelCtrl.$viewValue},selectNext:function(){return a(this.$element,1)},selectPrevious:function(){return a(this.$element,-1)},setActiveDescendant:function(e){this.$element.attr("aria-activedescendant",e)}}}function a(t,n){var r=e.iterator(Array.prototype.slice.call(t[0].querySelectorAll("md-radio-button")),!0);if(r.count()){var i=function(e){return!angular.element(e).attr("disabled")},o=t[0].querySelector("md-radio-button.md-checked"),a=r[0>n?"previous":"next"](o,i)||r.first();angular.element(a).triggerHandler("click")}}return i.prototype=o(),{restrict:"E",controller:["$element",i],require:["mdRadioGroup","?ngModel"],link:{pre:r}}}function t(e,t,n){function r(r,o,a,c){function s(e){o[0].hasAttribute("disabled")||r.$apply(function(){c.setViewValue(a.value,e&&e.type)})}function u(){var e=c.getViewValue()==a.value;e!==d&&(d=e,o.attr("aria-checked",e),e?(o.addClass(i),c.setActiveDescendant(o.attr("id"))):o.removeClass(i))}function l(n,r){function i(){return a.id||"radio_"+t.nextUid()}r.ariaId=i(),n.attr({id:r.ariaId,role:"radio","aria-checked":"false"}),e.expectWithText(n,"aria-label")}var d;n(o),l(o,r),c.add(u),a.$observe("value",u),o.on("click",s).on("$destroy",function(){c.remove(u)})}var i="md-checked";return{restrict:"E",require:"^mdRadioGroup",transclude:!0,template:'<div class="md-container" md-ink-ripple md-ink-ripple-checkbox><div class="md-off"></div><div class="md-on"></div></div><div ng-transclude class="md-label"></div>',link:r}}angular.module("material.components.radioButton",["material.core"]).directive("mdRadioGroup",e).directive("mdRadioButton",t),e.$inject=["$mdUtil","$mdConstant","$mdTheming"],t.$inject=["$mdAria","$mdUtil","$mdTheming"]}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";function e(e,t){return function(n){var r="SideNav '"+n+"' is not available!",i=e.get(n);return i||e.notFoundError(n),{isOpen:function(){return i&&i.isOpen()},isLockedOpen:function(){return i&&i.isLockedOpen()},toggle:function(){return i?i.toggle():t.reject(r)},open:function(){return i?i.open():t.reject(r)},close:function(){return i?i.close():t.reject(r)}}}}function t(e,t,n,r,i,o,a,c,s){function u(u,l,d,f){function m(e,n){u.isLockedOpen=e,e===n?l.toggleClass("md-locked-open",!!e):t[e?"addClass":"removeClass"](l,"md-locked-open"),w.toggleClass("md-locked-open",!!e)}function p(e){var n=l.parent();return n[e?"on":"off"]("keydown",$),w[e?"on":"off"]("click",g),e&&(v=s[0].activeElement),b=c.all([t[e?"enter":"leave"](w,n),t[e?"removeClass":"addClass"](l,"md-closed").then(function(){u.isOpen&&l.focus()})])}function h(t){if(u.isOpen==t)return c.when(!0);var n=c.defer();return u.isOpen=t,e(function(){b.then(function(e){u.isOpen||(v&&v.focus(),v=null),n.resolve(e)})},0,!1),n.promise}function $(e){var t=e.keyCode===i.KEY_CODE.ESCAPE;return t?g(e):c.when(!0)}function g(e){return e.preventDefault(),e.stopPropagation(),f.close()}var v=null,b=c.when(!0),y=n(d.mdIsLockedOpen),E=function(){return y(u.$parent,{$media:r})},w=o('<md-backdrop class="md-sidenav-backdrop md-opaque ng-enter">')(u);l.on("$destroy",f.destroy),a.inherit(w,l),u.$watch(E,m),u.$watch("isOpen",p),f.$toggleOpen=h}return{restrict:"E",scope:{isOpen:"=?mdIsOpen"},controller:"$mdSidenavController",compile:function(e){return e.addClass("md-closed"),e.attr("tabIndex","-1"),u}}}function n(e,t,n,r,i){var o=this;o.$toggleOpen=function(){return i.when(e.isOpen)},o.isOpen=function(){return!!e.isOpen},o.isLockedOpen=function(){return!!e.isLockedOpen},o.open=function(){return o.$toggleOpen(!0)},o.close=function(){return o.$toggleOpen(!1)},o.toggle=function(){return o.$toggleOpen(!e.isOpen)},o.destroy=r.register(o,n.mdComponentId)}angular.module("material.components.sidenav",["material.core","material.components.backdrop"]).factory("$mdSidenav",e).directive("mdSidenav",t).controller("$mdSidenavController",n),e.$inject=["$mdComponentRegistry","$q"],t.$inject=["$timeout","$animate","$parse","$mdMedia","$mdConstant","$compile","$mdTheming","$q","$document"],n.$inject=["$scope","$element","$attrs","$mdComponentRegistry","$q"]}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";function e(e,t,n,r,i,o,a,c){function s(s,u,l,d){function f(){v(),w(),g()}function m(e){Y=parseFloat(e),u.attr("aria-valuemin",e),f()}function p(e){K=parseFloat(e),u.attr("aria-valuemax",e),f()}function h(e){X=parseFloat(e),g()}function $(e){u.attr("aria-disabled",!!e)}function g(){if(angular.isDefined(l.mdDiscrete)){var e=Math.floor((K-Y)/X);if(!J){var n=t.getComputedStyle(B[0]);J=angular.element('<canvas style="position:absolute;">'),Z=J[0].getContext("2d"),Z.fillStyle=n.backgroundColor||"black",B.append(J)}var r=b();J[0].width=r.width,J[0].height=r.height;for(var i,o=0;e>=o;o++)i=Math.floor(r.width*(o/e)),Z.fillRect(i-1,0,2,r.height)}}function v(){Q=L[0].getBoundingClientRect()}function b(){return G(),Q}function y(e){if(!u[0].hasAttribute("disabled")){var t;e.keyCode===i.KEY_CODE.LEFT_ARROW?t=-X:e.keyCode===i.KEY_CODE.RIGHT_ARROW&&(t=X),t&&((e.metaKey||e.ctrlKey||e.altKey)&&(t*=4),e.preventDefault(),e.stopPropagation(),s.$evalAsync(function(){E(d.$viewValue+t)}))}}function E(e){d.$setViewValue(A(x(e)))}function w(){isNaN(d.$viewValue)&&(d.$viewValue=d.$modelValue);var e=(d.$viewValue-Y)/(K-Y);s.modelValue=d.$viewValue,u.attr("aria-valuenow",d.$viewValue),M(e),V.text(d.$viewValue)}function A(e){return angular.isNumber(e)?Math.max(Y,Math.min(K,e)):void 0}function x(e){return angular.isNumber(e)?Math.round(e/X)*X:void 0}function M(e){U.css("width",100*e+"%"),F.css(i.CSS.TRANSFORM,"translate3d("+100*e+"%,0,0)"),u.toggleClass("md-min",0===e)}function C(e){if(!j()){u.addClass("active"),u[0].focus(),v();var t=I(H(e.pointer.x)),n=A(x(t));s.$apply(function(){E(n),M(R(n))})}}function k(e){if(!j()){u.removeClass("dragging active");var t=I(H(e.pointer.x)),n=A(x(t));s.$apply(function(){E(n)})}}function T(e){j()||(et=!0,e.stopPropagation(),u.addClass("dragging"),O(e))}function S(e){et&&(e.stopPropagation(),O(e))}function N(e){et&&(e.stopPropagation(),et=!1)}function O(e){tt?D(e.pointer.x):_(e.pointer.x)}function _(e){s.$evalAsync(function(){E(I(H(e)))})}function D(e){var t=I(H(e)),n=A(x(t));M(H(e)),V.text(n)}function H(e){return Math.max(0,Math.min(1,(e-Q.left)/Q.width))}function I(e){return Y+e*(K-Y)}function R(e){return(e-Y)/(K-Y)}o(u),d=d||{$setViewValue:function(e){this.$viewValue=e,this.$viewChangeListeners.forEach(function(e){e()})},$parsers:[],$formatters:[],$viewChangeListeners:[]};var P=l.ngDisabled&&c(l.ngDisabled),j=P?function(){return P(s.$parent)}:angular.noop,q=angular.element(u[0].querySelector(".md-thumb")),V=angular.element(u[0].querySelector(".md-thumb-text")),F=q.parent(),L=angular.element(u[0].querySelector(".md-track-container")),U=angular.element(u[0].querySelector(".md-track-fill")),B=angular.element(u[0].querySelector(".md-track-ticks")),G=r.throttle(v,5e3);l.min?l.$observe("min",m):m(0),l.max?l.$observe("max",p):p(100),l.step?l.$observe("step",h):h(1);var z=angular.noop;l.ngDisabled&&(z=s.$parent.$watch(l.ngDisabled,$)),n.expect(u,"aria-label"),a.register(u,"drag"),u.attr({tabIndex:0,role:"slider"}).on("keydown",y).on("$md.pressdown",C).on("$md.pressup",k).on("$md.dragstart",T).on("$md.drag",S).on("$md.dragend",N),setTimeout(f);var W=e.throttle(f);angular.element(t).on("resize",W),s.$on("$destroy",function(){angular.element(t).off("resize",W),z()}),d.$render=w,d.$viewChangeListeners.push(w),d.$formatters.push(A),d.$formatters.push(x);var Y,K,X,J,Z,Q={};v();var et=!1,tt=angular.isDefined(l.mdDiscrete)}return{scope:{},require:"?ngModel",template:'<div class="md-track-container"><div class="md-track"></div><div class="md-track md-track-fill"></div><div class="md-track-ticks"></div></div><div class="md-thumb-container"><div class="md-thumb"></div><div class="md-focus-thumb"></div><div class="md-focus-ring"></div><div class="md-sign"><span class="md-thumb-text"></span></div><div class="md-disabled-thumb"></div></div>',link:s}}angular.module("material.components.slider",["material.core"]).directive("mdSlider",e),e.$inject=["$$rAF","$window","$mdAria","$mdUtil","$mdConstant","$mdTheming","$mdGesture","$parse"]}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";function e(e,t,n,r,i){function o(e){function n(e,t){t.addClass("md-sticky-clone"),t.css("top",p+"px");var n={element:e,clone:t};return m.items.push(n),d.parent().prepend(n.clone),f(),function(){m.items.forEach(function(t,n){t.element[0]===e[0]&&(m.items.splice(n,1),t.clone.remove())}),f()}}function i(){m.items.forEach(o),m.items=m.items.sort(function(e,t){return e.top<t.top?-1:1});for(var e,t=d.prop("scrollTop"),n=m.items.length-1;n>=0;n--)if(t>m.items[n].top){e=m.items[n];break}s(e)}function o(e){var t=e.element[0];for(e.top=0,e.left=0;t&&t!==d[0];)e.top+=t.offsetTop,e.left+=t.offsetLeft,t=t.offsetParent;e.height=e.element.prop("offsetHeight"),e.clone.css("margin-left",e.left+"px")}function a(){var e=d.prop("scrollTop"),t=e>(a.prevScrollTop||0);a.prevScrollTop=e,0===e?s(null):t&&m.next?m.next.top-e<=0?s(m.next):m.current&&(m.next.top-e<=m.next.height?l(m.current,m.next.top-m.next.height-e):l(m.current,null)):!t&&m.current&&(e<m.current.top&&s(m.prev),m.current&&m.next&&(e>=m.next.top-m.current.height?l(m.current,m.next.top-e-m.current.height):l(m.current,null)))}function s(e){if(m.current!==e){m.current&&(l(m.current,null),u(m.current,null)),e&&u(e,"active"),m.current=e;var t=m.items.indexOf(e);m.next=m.items[t+1],m.prev=m.items[t-1],u(m.next,"next"),u(m.prev,"prev")}}function u(e,t){e&&e.state!==t&&(e.state&&(e.clone.attr("sticky-prev-state",e.state),e.element.attr("sticky-prev-state",e.state)),e.clone.attr("sticky-state",t),e.element.attr("sticky-state",t),e.state=t)}function l(e,n){e&&(null===n||void 0===n?e.translateY&&(e.translateY=null,e.clone.css(t.CSS.TRANSFORM,"")):(e.translateY=n,e.clone.css(t.CSS.TRANSFORM,"translate3d("+e.left+"px,"+n+"px,0)")))}var d=e.$element,f=r.throttle(i);c(d),d.on("$scrollstart",f),d.on("$scroll",a);var m,p=d.prop("offsetTop");return m={prev:null,current:null,next:null,items:[],add:n,refreshElements:i}}function a(){var t,n=angular.element("<div>");e[0].body.appendChild(n[0]);for(var r=["sticky","-webkit-sticky"],i=0;i<r.length;++i)if(n.css({position:r[i],top:0,"z-index":2}),n.css("position")==r[i]){t=r[i];break}return n.remove(),t}function c(e){function t(){+i.now()-o>a?(n=!1,e.triggerHandler("$scrollend")):(e.triggerHandler("$scroll"),r(t))}var n,o,a=200;e.on("scroll touchmove",function(){n||(n=!0,r(t),e.triggerHandler("$scrollstart")),e.triggerHandler("$scroll"),o=+i.now()})}var s=a();return function(e,t,n){var r=t.controller("mdContent");if(r)if(s)t.css({position:s,top:0,"z-index":2});else{var i=r.$element.data("$$sticky");i||(i=o(r),r.$element.data("$$sticky",i));var a=i.add(t,n||t.clone());e.$on("$destroy",a)}}}angular.module("material.components.sticky",["material.core","material.components.content"]).factory("$mdSticky",e),e.$inject=["$document","$mdConstant","$compile","$$rAF","$mdUtil"]}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";function e(e,t,n){return{restrict:"E",replace:!0,transclude:!0,template:'<h2 class="md-subheader"><span class="md-subheader-content"></span></h2>',compile:function(r,i,o){var a=r[0].outerHTML;return function(r,i){function c(e){return angular.element(e[0].querySelector(".md-subheader-content"))}n(i),o(r,function(e){c(i).append(e)}),o(r,function(o){var s=t(angular.element(a))(r);n(s),c(s).append(o),e(r,i,s)})}}}}angular.module("material.components.subheader",["material.core","material.components.sticky"]).directive("mdSubheader",e),e.$inject=["$mdSticky","$compile","$mdTheming"]}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";var e=angular.module("material.components.swipe",[]);["SwipeLeft","SwipeRight"].forEach(function(t){var n="md"+t,r="$md."+t.toLowerCase();e.directive(n,["$parse",function(e){function t(t,i,o){var a=e(o[n]);i.on(r,function(e){t.$apply(function(){a(t,{$event:e})})})}return{restrict:"A",link:t}}])})}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";function e(e,t,n,r,i,o,a,c){function s(e,t){var r=u.compile(e,t);return e.addClass("md-dragging"),function(e,t,s,u){function l(n){p(e)||(n.stopPropagation(),t.addClass("md-dragging"),g={width:h.prop("offsetWidth")},t.removeClass("transition"))}function d(e){if(g){e.stopPropagation(),e.srcEvent&&e.srcEvent.preventDefault();var t=e.pointer.distanceX/g.width,n=u.$viewValue?1+t:t;n=Math.max(0,Math.min(1,n)),h.css(i.CSS.TRANSFORM,"translate3d("+100*n+"%,0,0)"),g.translate=n}}function f(e){if(g){e.stopPropagation(),t.removeClass("md-dragging"),h.css(i.CSS.TRANSFORM,"");var n=u.$viewValue?g.translate<.5:g.translate>.5;n&&m(!u.$viewValue),g=null}}function m(t){e.$apply(function(){u.$setViewValue(t),u.$render()})}u=u||n.fakeNgModel();var p=o(s.ngDisabled),h=angular.element(t[0].querySelector(".md-thumb-container")),$=angular.element(t[0].querySelector(".md-container"));a(function(){t.removeClass("md-dragging")}),r(e,t,s,u),angular.isDefined(s.ngDisabled)&&e.$watch(p,function(e){t.attr("tabindex",e?-1:0)}),c.register($,"drag"),$.on("$md.dragstart",l).on("$md.drag",d).on("$md.dragend",f);var g}}var u=e[0];return{restrict:"E",transclude:!0,template:'<div class="md-container"><div class="md-bar"></div><div class="md-thumb-container"><div class="md-thumb" md-ink-ripple md-ink-ripple-checkbox></div></div></div><div ng-transclude class="md-label"></div>',require:"?ngModel",compile:s}}angular.module("material.components.switch",["material.core","material.components.checkbox"]).directive("mdSwitch",e),e.$inject=["mdCheckboxDirective","$mdTheming","$mdUtil","$document","$mdConstant","$parse","$$rAF","$mdGesture"]}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";angular.module("material.components.tabs",["material.core"])}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";function e(e,t,n,r){return{restrict:"E",replace:!0,scope:{fid:"@?mdFid",label:"@?",value:"=ngModel"},compile:function(i,o){return r.warn("<md-text-float> is deprecated. Please use `<md-input-container>` and `<input>`.More information at http://material.angularjs.org/#/api/material.components.input/directive/mdInputContainer"),angular.isUndefined(o.mdFid)&&(o.mdFid=t.nextUid()),{pre:function(e,t,r){var i=n(r.ngDisabled);e.isDisabled=function(){return i(e.$parent)},e.inputType=r.type||"text"},post:e}},template:'<md-input-group tabindex="-1"> <label for="{{fid}}" >{{label}}</label> <md-input id="{{fid}}" ng-disabled="isDisabled()" ng-model="value" type="{{inputType}}"></md-input></md-input-group>'}}function t(e){return{restrict:"CE",controller:["$element",function(t){e.warn("<md-input-group> is deprecated. Please use `<md-input-container>` and `<input>`.More information at http://material.angularjs.org/#/api/material.components.input/directive/mdInputContainer"),this.setFocused=function(e){t.toggleClass("md-input-focused",!!e)},this.setHasValue=function(e){t.toggleClass("md-input-has-value",e)}}]}}function n(e,t){return{restrict:"E",replace:!0,template:"<input >",require:["^?mdInputGroup","?ngModel"],link:function(e,n,r,i){function o(e){return e=angular.isUndefined(e)?n.val():e,angular.isDefined(e)&&null!==e&&""!==e.toString().trim()}if(i[0]){t.warn("<md-input> is deprecated. Please use `<md-input-container>` and `<input>`.More information at http://material.angularjs.org/#/api/material.components.input/directive/mdInputContainer");var a=i[0],c=i[1];e.$watch(e.isDisabled,function(e){n.attr("aria-disabled",!!e),n.attr("tabindex",!!e)}),n.attr("type",r.type||n.parent().attr("type")||"text"),c&&c.$formatters.push(function(e){return a.setHasValue(o(e)),e}),n.on("input",function(){a.setHasValue(o())}).on("focus",function(){a.setFocused(!0)}).on("blur",function(){a.setFocused(!1),a.setHasValue(o())}),e.$on("$destroy",function(){a.setFocused(!1),a.setHasValue(!1)})}}}}angular.module("material.components.textField",["material.core"]).directive("mdInputGroup",t).directive("mdInput",n).directive("mdTextFloat",e),e.$inject=["$mdTheming","$mdUtil","$parse","$log"],t.$inject=["$log"],n.$inject=["$mdUtil","$log"]}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";function e(){return{restrict:"E"}}function t(e){function t(e,t,n,r){function i(n,i,o){return i.addClass(o.position.split(" ").map(function(e){return"md-"+e}).join(" ")),o.parent.addClass(a(o.position)),o.onSwipe=function(t){i.addClass("md-"+t.type.replace("$md.","")),e(r.cancel)},i.on("$md.swipeleft $md.swiperight",o.onSwipe),t.enter(i,o.parent)}function o(e,n,r){return n.off("$md.swipeleft $md.swiperight",r.onSwipe),r.parent.removeClass(a(r.position)),t.leave(n)}function a(e){return"md-toast-open-"+(e.indexOf("top")>-1?"top":"bottom")}return{onShow:i,onRemove:o,position:"bottom left",themable:!0,hideDelay:3e3}}return t.$inject=["$timeout","$animate","$mdTheming","$mdToast"],e("$mdToast").setDefaults({methods:["position","hideDelay","capsule"],options:t}).addPreset("simple",{argOption:"content",methods:["content","action","highlightAction"],options:["$mdToast",function(e){return{template:["<md-toast ng-class=\"{'md-capsule': toast.capsule}\">","<span flex>{{ toast.content }}</span>",'<md-button class="md-action" ng-if="toast.action" ng-click="toast.resolve()" ng-class="{\'md-highlight\': toast.highlightAction}">',"{{ toast.action }}","</md-button>","</md-toast>"].join(""),controller:function(){this.resolve=function(){e.hide()}},controllerAs:"toast",bindToController:!0}}]})}angular.module("material.components.toast",["material.core","material.components.button"]).directive("mdToast",e).provider("$mdToast",t),t.$inject=["$$interimElementProvider"]}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";function e(e,t,n,r){return{restrict:"E",controller:angular.noop,link:function(i,o,a){function c(){function r(t,n){o.parent()[0]===n.parent()[0]&&(l&&l.off("scroll",p),n.on("scroll",p),n.attr("scroll-shrink","true"),l=n,e(c))}function c(){u=o.prop("offsetHeight"),l.css("margin-top",-u*m+"px"),s()}function s(e){var n=e?e.target.scrollTop:f;h(),d=Math.min(u/m,Math.max(0,d+n-f)),o.css(t.CSS.TRANSFORM,"translate3d(0,"+-d*m+"px,0)"),l.css(t.CSS.TRANSFORM,"translate3d(0,"+(u-d)*m+"px,0)"),f=n}var u,l,d=0,f=0,m=a.mdShrinkSpeedFactor||.5,p=e.throttle(s),h=n.debounce(c,5e3);i.$on("$mdContentLoaded",r)}r(o),angular.isDefined(a.mdScrollShrink)&&c()}}}angular.module("material.components.toolbar",["material.core","material.components.content"]).directive("mdToolbar",e),e.$inject=["$$rAF","$mdConstant","$mdUtil","$mdTheming"]}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";function e(e,t,n,r,i,o,a){function c(c,l,d){function f(t){f.value=!!t,f.queued||(t?(f.queued=!0,e(function(){c.visible=f.value,f.queued=!1},c.delay)):e(function(){c.visible=!1}))}function m(){l.removeClass("md-hide"),$.attr("aria-describedby",l.attr("id")),v.append(l),h(),n(function(){n(function(){h(),c.visible&&l.addClass("md-show")})})}function p(){l.removeClass("md-show").addClass("md-hide"),$.removeAttr("aria-describedby"),e(function(){c.visible||l.detach()},200,!1)}function h(){var e=i.elementRect(l,v),t=i.elementRect($,v),n="bottom",r={left:t.left+t.width/2-e.width/2,top:t.top+t.height};r.left=Math.min(r.left,v.prop("scrollWidth")-e.width-u),r.left=Math.max(r.left,u),r.top+e.height>v.prop("scrollHeight")&&(r.top=t.top-e.height,n="top"),l.css({top:r.top+"px",left:r.left+"px"}),l.attr("width-32",Math.ceil(e.width/32)),l.attr("md-direction",n)}o(l);for(var $=l.parent(),g=l.parent()[0];g&&g!==a[0]&&g!==document.body&&(!g.tagName||"md-content"!=g.tagName.toLowerCase());)g=g.parentNode;var v=angular.element(g||document.body);angular.isDefined(d.mdDelay)||(c.delay=s),l.detach(),l.attr("role","tooltip"),l.attr("id",d.id||"tooltip_"+i.nextUid()),$.on("focus mouseenter touchstart",function(){f(!0)}),$.on("blur mouseleave touchend touchcancel",function(){r[0].activeElement!==$[0]&&f(!1)}),c.$watch("visible",function(e){e?m():p()});var b=n.throttle(function(){c.visible&&h()});angular.element(t).on("resize",b),c.$on("$destroy",function(){c.visible=!1,l.remove(),angular.element(t).off("resize",b)})}var s=400,u=8;return{restrict:"E",transclude:!0,template:'<div class="md-background"></div><div class="md-content" ng-transclude></div>',scope:{visible:"=?mdVisible",delay:"=?mdDelay"},link:c}}angular.module("material.components.tooltip",["material.core"]).directive("mdTooltip",e),e.$inject=["$timeout","$window","$$rAF","$document","$mdUtil","$mdTheming","$rootElement"]}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";angular.module("material.components.whiteframe",[])}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";function e(e){function t(t,r,i,o){function a(){var e=s.getSelectedItem(),i=!e||s.count()<2||c;if(r.css("display",i?"none":"block"),!i&&t.pagination&&t.pagination.tabData){var o=s.getSelectedIndex(),a=t.pagination.tabData.tabs[o]||{left:0,right:0,width:0},u=r.parent().prop("offsetWidth")-a.right,l=["md-transition-left","md-transition-right","md-no-transition"],d=n>o?0:o>n?1:2;r.removeClass(l.join(" ")).addClass(l[d]).css({left:a.left+"px",right:u+"px"}),n=o}}var c=!!o[0],s=o[1],u=e.throttle(a);s.inkBarElement=r,t.$on("$mdTabsPaginationChanged",u)}var n=0;return{restrict:"E",require:["^?mdNoBar","^mdTabs"],link:t}}angular.module("material.components.tabs").directive("mdTabsInkBar",e),e.$inject=["$$rAF"]}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";function e(e,t,n,r,i,o){function a(a,s,u,l){function d(e,t){if(e){var n=g(e);A.active&&n!==A.page?(t&&t.element.blur(),v(n).then(function(){w=!1,e.element.focus()})):e.element.focus()}}function f(e){var t=A.tabData,n=Math.max(0,Math.min(t.pages.length-1,A.page+e)),r=t.pages[n][e>0?"firstTabIndex":"lastTabIndex"],i=l.itemAt(r);w=!0,d(i)}function m(){function e(){E.css("width","9999px"),angular.forEach(o.tabs,function(e){angular.element(e.element).css("margin-left",e.filler+"px")}),v(g(l.getSelectedItem()))}function t(){p(0),E.css("width",""),r.css("width",""),r.css("margin-left",""),A.page=null,A.active=!1}function n(){return u||a.$watch(function(){i(function(){s[0].offsetParent&&(angular.isFunction(u)&&u(),y(),u=null)},0,!1)})}if(s.prop("offsetParent")){var r=s.find("md-tab");t();var o=A.tabData=$(),c=A.active=o.pages.length>1;c&&e(),a.$evalAsync(function(){a.$broadcast("$mdTabsPaginationChanged")})}else var u=n()}function p(t){function n(t){t.target===E[0]&&(E.off(e.CSS.TRANSITIONEND,n),i.resolve())}if(l.pagingOffset===t)return r.when();var i=r.defer();return l.$$pagingOffset=t,E.css(e.CSS.TRANSFORM,"translate3d("+t+"px,0,0)"),E.on(e.CSS.TRANSITIONEND,n),i.promise}function h(){switch(a.stretchTabs){case"never":return!1;case"always":return!0;default:return o("sm")}}function $(e){function t(){var e=1===d.length?r:i,t=Math.min(Math.floor(e/u),b.length),n=Math.floor(e/t);return o.css("width",n+"px"),$(!0)}var n,r=s.parent().prop("offsetWidth"),i=r-c-1,o=angular.element(b),a=0,u=0,l=[],d=[];return o.css("max-width",""),angular.forEach(b,function(e,t){var o=Math.min(i,e.offsetWidth),c={element:e,left:a,width:o,right:a+o,filler:0};c.page=Math.ceil(c.right/(1===d.length&&t===b.length-1?r:i))-1,c.page>=d.length?(c.filler=i*c.page-c.left,c.right+=c.filler,c.left+=c.filler,n={left:c.left,firstTabIndex:t,lastTabIndex:t,tabs:[c]},d.push(n)):(n.lastTabIndex=t,n.tabs.push(c)),a=c.right,u=Math.max(u,o),l.push(c)}),o.css("max-width",i+"px"),!e&&h()?t():{width:a,max:u,tabs:l,pages:d,tabElements:b}}function g(e){var t=l.indexOf(e);if(-1===t)return 0;var n=A.tabData;return n?n.tabs[t].page:0}function v(e){if(e!==A.page){var t=A.tabData.pages.length-1;return 0>e&&(e=0),e>t&&(e=t),A.hasPrev=e>0,A.hasNext=t>e,A.page=e,a.$broadcast("$mdTabsPaginationChanged"),p(-A.tabData.pages[e].left)}}var b=s[0].getElementsByTagName("md-tab"),y=n.throttle(m),E=s.children(),w=!1,A=a.pagination={page:-1,active:!1,clickNext:function(){w||f(1)},clickPrevious:function(){w||f(-1)}};a.$on("$mdTabsChanged",y),angular.element(t).on("resize",y),a.$on("$destroy",function(){angular.element(t).off("resize",y)}),a.$watch(function(){return l.tabToFocus},d)}var c=64;return{restrict:"A",require:"^mdTabs",link:a}}angular.module("material.components.tabs").directive("mdTabsPagination",e),e.$inject=["$mdConstant","$window","$$rAF","$$q","$timeout","$mdMedia"]}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";function e(e,t,n,r,i,o,a,c){function s(){return g(e.$parent)}function u(t,n){h.content.length&&(h.contentContainer.append(h.content),h.contentScope=e.$parent.$new(),t.append(h.contentContainer),r(h.contentContainer)(h.contentScope),n===!0&&c(function(){o.disconnectScope(h.contentScope)},0,!1))}function l(){i.leave(h.contentContainer).then(function(){h.contentScope&&h.contentScope.$destroy(),h.contentScope=null})}function d(e){h.contentContainer[e?"addClass":"removeClass"]("md-transition-rtl")}function f(n){o.reconnectScope(h.contentScope),t.addClass("active").attr({"aria-selected":!0,tabIndex:0}).on("$md.swipeleft $md.swiperight",p),d(n),i.removeClass(h.contentContainer,"ng-hide"),e.onSelect()}function m(n){o.disconnectScope(h.contentScope),t.removeClass("active").attr({"aria-selected":!1,tabIndex:-1}).off("$md.swipeleft $md.swiperight",p),d(n),i.addClass(h.contentContainer,"ng-hide"),e.onDeselect()}function p(t){e.$apply(function(){$.select(/left/.test(t.type)?$.next():$.previous())})}var h=this,$=t.controller("mdTabs");h.contentContainer=angular.element('<div class="md-tab-content ng-hide">'),h.element=t,h.isDisabled=s,h.onAdd=u,h.onRemove=l,h.onSelect=f,h.onDeselect=m;var g=a(n.ngDisabled)}angular.module("material.components.tabs").controller("$mdTab",e),e.$inject=["$scope","$element","$attrs","$compile","$animate","$mdUtil","$parse","$timeout"]}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";function e(e,t,n,r,i){function o(o,a){var c=o.find("md-tab-label");c.length?c.remove():c=angular.isDefined(a.label)?angular.element("<md-tab-label>").html(a.label):angular.element("<md-tab-label>").append(o.contents().remove());var s=o.contents().remove();return function(o,a,u,l){function d(){var e=c.clone();a.append(e),t(e)(o.$parent),v.content=s.clone()}function f(){o.$apply(function(){b.select(v),b.focus(v)})}function m(e){e.keyCode==r.KEY_CODE.SPACE||e.keyCode==r.KEY_CODE.ENTER?(a.triggerHandler("click"),e.preventDefault()):e.keyCode===r.KEY_CODE.LEFT_ARROW?o.$evalAsync(function(){b.focus(b.previous(v))}):e.keyCode===r.KEY_CODE.RIGHT_ARROW&&o.$evalAsync(function(){b.focus(b.next(v))})}function p(){o.$watch("$parent.$index",function(e){b.move(v,e)})}function h(){function e(e){var t=b.getSelectedItem()===v;e&&!t?b.select(v):!e&&t&&b.deselect(v)}var t=o.$parent.$watch("!!("+u.mdActive+")",e);o.$on("$destroy",t)}function $(){function e(e){a.attr("aria-disabled",e);var t=b.getSelectedItem()===v;t&&e&&b.select(b.next()||b.previous())}o.$watch(v.isDisabled,e)}function g(){var e=u.id||"tab_"+n.nextUid();if(a.attr({id:e,role:"tab",tabIndex:-1}),s.length){var t="content_"+e;a.attr("aria-controls")||a.attr("aria-controls",t),v.contentContainer.attr({id:t,role:"tabpanel","aria-labelledby":e})}}var v=l[0],b=l[1];i(a.addClass.bind(a,"md-tab-themed"),0,!1),o.$watch(function(){return u.label},function(){i(function(){b.scope.$broadcast("$mdTabsChanged")},0,!1)}),d(),g();var y=e.attachTabBehavior(o,a,{colorElement:b.inkBarElement});b.add(v),o.$on("$destroy",function(){y(),b.remove(v)}),a.on("$destroy",function(){i(function(){b.scope.$broadcast("$mdTabsChanged")},0,!1)}),angular.isDefined(u.ngClick)||a.on("click",f),a.on("keydown",m),angular.isNumber(o.$parent.$index)&&p(),angular.isDefined(u.mdActive)&&h(),$()}}return{restrict:"E",require:["mdTab","^mdTabs"],controller:"$mdTab",scope:{onSelect:"&mdOnSelect",onDeselect:"&mdOnDeselect",label:"@"},compile:o}}angular.module("material.components.tabs").directive("mdTab",e),e.$inject=["$mdInkRipple","$compile","$mdUtil","$mdConstant","$timeout"]}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";function e(e,t,n){function r(){return g(e.selectedIndex)}function i(){return e.selectedIndex}function o(t,n){p.add(t,n),angular.isDefined(t.element.attr("md-active"))||-1!==e.selectedIndex&&angular.isNumber(e.selectedIndex)&&e.selectedIndex!==h.indexOf(t)?t.onAdd(h.contentArea,!0):(t.onAdd(h.contentArea,!1),h.select(t)),e.$broadcast("$mdTabsChanged")}function a(t,n){if(p.contains(t)&&!n){var i=r()===t,o=f()||d();l(t),p.remove(t),t.onRemove(),e.$broadcast("$mdTabsChanged"),i&&s(o)}}function c(t,n){var i=r()===t;p.remove(t),p.add(t,n),i&&s(t),e.$broadcast("$mdTabsChanged")}function s(t,n){!t||t.isSelected||t.isDisabled()||p.contains(t)&&(angular.isDefined(n)||(n=$(t)<e.selectedIndex),l(r(),n),e.selectedIndex=$(t),t.isSelected=!0,t.onSelect(n),e.$broadcast("$mdTabsChanged"))}function u(e){h.tabToFocus=e}function l(t,n){t&&t.isSelected&&p.contains(t)&&(e.selectedIndex=-1,t.isSelected=!1,t.onDeselect(n))}function d(e,t){return p.next(e||r(),t||m)}function f(e,t){return p.previous(e||r(),t||m)}function m(e){return e&&!e.isDisabled()}var p=n.iterator([],!1),h=this;h.$element=t,h.scope=e;var $=(h.contentArea=angular.element(t[0].querySelector(".md-tabs-content")),h.inRange=p.inRange,h.indexOf=p.indexOf),g=h.itemAt=p.itemAt;h.count=p.count,h.getSelectedItem=r,h.getSelectedIndex=i,h.add=o,h.remove=a,h.move=c,h.select=s,h.focus=u,h.deselect=l,h.next=d,h.previous=f,e.$on("$destroy",function(){l(r());for(var e=p.count()-1;e>=0;e--)a(p[e],!0)})}angular.module("material.components.tabs").controller("$mdTabs",e),e.$inject=["$scope","$element","$mdUtil","$timeout"]}(),/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.7.1
 */
function(){"use strict";function e(e){function t(t,n,r,i,o){function a(){n.attr("role","tablist")}function c(){t.$watch("selectedIndex",function(e,t){if(t!=e){var n=t>e;if(i.deselect(i.itemAt(t),n),i.inRange(e)){for(var r=i.itemAt(e);r&&r.isDisabled();)r=e>t?i.next(r):i.previous(r);i.select(r,n)}}})}t.stretchTabs=r.hasOwnProperty("mdStretchTabs")?r.mdStretchTabs||"always":"auto",e(n),a(),c(),o(t.$parent,function(e){angular.element(n[0].querySelector(".md-header-items")).append(e)})}return{restrict:"E",controller:"$mdTabs",require:"mdTabs",transclude:!0,scope:{selectedIndex:"=?mdSelected"},template:'<section class="md-header" ng-class="{\'md-paginating\': pagination.active}"><button class="md-paginator md-prev" ng-if="pagination.active && pagination.hasPrev" ng-click="pagination.clickPrevious()" aria-hidden="true"></button><div class="md-header-items-container" md-tabs-pagination><div class="md-header-items"><md-tabs-ink-bar></md-tabs-ink-bar></div></div><button class="md-paginator md-next" ng-if="pagination.active && pagination.hasNext" ng-click="pagination.clickNext()" aria-hidden="true"></button></section><section class="md-tabs-content"></section>',link:t}}angular.module("material.components.tabs").directive("mdTabs",e),e.$inject=["$mdTheming"]}(),angular.module("material.core").constant("$MD_THEME_CSS","md-backdrop.md-opaque.md-THEME_NAME-theme {  background-color: '{{foreground-4-0.5}}'; }md-bottom-sheet.md-THEME_NAME-theme {  background-color: '{{background-50}}';  border-top-color: '{{background-300}}'; }  md-bottom-sheet.md-THEME_NAME-theme.md-list md-item {    color: '{{foreground-1}}'; }  md-bottom-sheet.md-THEME_NAME-theme .md-subheader {    background-color: '{{background-50}}'; }  md-bottom-sheet.md-THEME_NAME-theme .md-subheader {    color: '{{foreground-1}}'; }md-toolbar .md-button.md-THEME_NAME-theme.md-fab {  background-color: white; }.md-button.md-THEME_NAME-theme {  border-radius: 3px; }  .md-button.md-THEME_NAME-theme:not([disabled]):hover, .md-button.md-THEME_NAME-theme:not([disabled]):focus {    background-color: '{{background-500-0.2}}'; }  .md-button.md-THEME_NAME-theme.md-primary {    color: '{{primary-color}}'; }    .md-button.md-THEME_NAME-theme.md-primary.md-raised, .md-button.md-THEME_NAME-theme.md-primary.md-fab {      color: '{{primary-contrast}}';      background-color: '{{primary-color}}'; }      .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]):focus, .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]):focus {        background-color: '{{primary-600}}'; }  .md-button.md-THEME_NAME-theme.md-fab {    border-radius: 50%;    background-color: '{{accent-color}}';    color: '{{accent-contrast}}'; }    .md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]):focus {      background-color: '{{accent-A700}}'; }  .md-button.md-THEME_NAME-theme.md-raised {    color: '{{background-contrast}}';    background-color: '{{background-50}}'; }    .md-button.md-THEME_NAME-theme.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-raised:not([disabled]):focus {      background-color: '{{background-200}}'; }  .md-button.md-THEME_NAME-theme.md-warn {    color: '{{warn-color}}'; }    .md-button.md-THEME_NAME-theme.md-warn.md-raised, .md-button.md-THEME_NAME-theme.md-warn.md-fab {      color: '{{warn-contrast}}';      background-color: '{{warn-color}}'; }      .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]):focus, .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]):focus {        background-color: '{{warn-700}}'; }  .md-button.md-THEME_NAME-theme.md-accent {    color: '{{accent-color}}'; }    .md-button.md-THEME_NAME-theme.md-accent.md-raised, .md-button.md-THEME_NAME-theme.md-accent.md-fab {      color: '{{accent-contrast}}';      background-color: '{{accent-color}}'; }      .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]):focus, .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]):focus {        background-color: '{{accent-700}}'; }  .md-button.md-THEME_NAME-theme[disabled], .md-button.md-THEME_NAME-theme.md-raised[disabled], .md-button.md-THEME_NAME-theme.md-fab[disabled] {    color: '{{foreground-3}}';    background-color: transparent;    cursor: not-allowed; }md-card.md-THEME_NAME-theme {  border-radius: 2px; }  md-card.md-THEME_NAME-theme .md-card-image {    border-radius: 2px 2px 0 0; }md-checkbox.md-THEME_NAME-theme .md-ripple {  color: '{{accent-600}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-ripple {  color: '{{background-600}}'; }md-checkbox.md-THEME_NAME-theme .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-icon {  background-color: '{{accent-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-ripple {  color: '{{primary-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ripple {  color: '{{background-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-icon {  background-color: '{{primary-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-ripple {  color: '{{warn-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-icon {  background-color: '{{warn-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme[disabled] .md-icon {  border-color: '{{foreground-3}}'; }md-checkbox.md-THEME_NAME-theme[disabled].md-checked .md-icon {  background-color: '{{foreground-3}}'; }md-content.md-THEME_NAME-theme {  background-color: '{{background-hue-3}}'; }md-dialog.md-THEME_NAME-theme {  border-radius: 4px;  background-color: '{{background-hue-3}}'; }  md-dialog.md-THEME_NAME-theme.md-content-overflow .md-actions {    border-top-color: '{{foreground-4}}'; }md-divider.md-THEME_NAME-theme {  border-top-color: '{{foreground-4}}'; }md-input-container.md-THEME_NAME-theme .md-input {  color: '{{foreground-1}}';  border-color: '{{foreground-4}}';  text-shadow: '{{foreground-shadow}}'; }  md-input-container.md-THEME_NAME-theme .md-input::-webkit-input-placeholder, md-input-container.md-THEME_NAME-theme .md-input::-moz-placeholder, md-input-container.md-THEME_NAME-theme .md-input:-moz-placeholder, md-input-container.md-THEME_NAME-theme .md-input:-ms-input-placeholder {    color: '{{foreground-3}}'; }md-input-container.md-THEME_NAME-theme label, md-input-container.md-THEME_NAME-theme .md-placeholder {  text-shadow: '{{foreground-shadow}}';  color: '{{foreground-3}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-has-value label {  color: '{{foreground-2}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused .md-input {  border-color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused label {  color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-accent .md-input {  border-color: '{{accent-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-accent label {  color: '{{accent-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-warn .md-input {  border-color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-warn label {  color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid .md-input {  border-color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid label {  color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid data-ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid x-ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid [ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid [data-ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid [x-ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid .md-char-counter {  color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme .md-input[disabled] {  border-bottom-color: transparent;  color: '{{foreground-3}}';  background-image: linear-gradient(to right, '{{foreground-4}}' 0%, '{{foreground-4}}' 33%, transparent 0%); }md-progress-circular.md-THEME_NAME-theme {  background-color: transparent; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-gap {    border-top-color: '{{primary-color}}';    border-bottom-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme .md-inner .md-right .md-half-circle {    border-top-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-right .md-half-circle {    border-right-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-left .md-half-circle {    border-left-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-gap {    border-top-color: '{{warn-color}}';    border-bottom-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-right .md-half-circle {    border-top-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-right .md-half-circle {    border-right-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-left .md-half-circle {    border-left-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-gap {    border-top-color: '{{accent-color}}';    border-bottom-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-right .md-half-circle {    border-top-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-right .md-half-circle {    border-right-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-left .md-half-circle {    border-left-color: '{{accent-color}}'; }md-progress-linear.md-THEME_NAME-theme .md-container {  background-color: '{{primary-100}}'; }md-progress-linear.md-THEME_NAME-theme .md-bar {  background-color: '{{primary-color}}'; }md-progress-linear.md-THEME_NAME-theme.md-warn .md-container {  background-color: '{{warn-100}}'; }md-progress-linear.md-THEME_NAME-theme.md-warn .md-bar {  background-color: '{{warn-color}}'; }md-progress-linear.md-THEME_NAME-theme.md-accent .md-container {  background-color: '{{accent-100}}'; }md-progress-linear.md-THEME_NAME-theme.md-accent .md-bar {  background-color: '{{accent-color}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-warn .md-bar1 {  background-color: '{{warn-100}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-warn .md-dashed:before {  background: radial-gradient('{{warn-100}}' 0%, '{{warn-100}}' 16%, transparent 42%); }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-accent .md-bar1 {  background-color: '{{accent-100}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-accent .md-dashed:before {  background: radial-gradient('{{accent-100}}' 0%, '{{accent-100}}' 16%, transparent 42%); }md-radio-button.md-THEME_NAME-theme .md-off {  border-color: '{{foreground-2}}'; }md-radio-button.md-THEME_NAME-theme .md-on {  background-color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme.md-checked .md-off {  border-color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme.md-checked .md-ink-ripple {  color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme .md-container .md-ripple {  color: '{{accent-600}}'; }md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-on {  background-color: '{{primary-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-off {  border-color: '{{primary-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ink-ripple {  color: '{{primary-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-container .md-ripple {  color: '{{primary-600}}'; }md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-on {  background-color: '{{warn-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-off {  border-color: '{{warn-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-ink-ripple {  color: '{{warn-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-container .md-ripple {  color: '{{warn-600}}'; }md-radio-button.md-THEME_NAME-theme[disabled] .md-container .md-off {  border-color: '{{foreground-3}}'; }md-radio-button.md-THEME_NAME-theme[disabled] .md-container .md-on {  border-color: '{{foreground-3}}'; }md-radio-group.md-THEME_NAME-theme:focus:not(:empty) {  border-color: '{{foreground-1}}'; }md-sidenav.md-THEME_NAME-theme {  background-color: '{{background-hue-3}}'; }md-slider.md-THEME_NAME-theme .md-track {  background-color: '{{foreground-3}}'; }md-slider.md-THEME_NAME-theme .md-track-ticks {  background-color: '{{foreground-4}}'; }md-slider.md-THEME_NAME-theme .md-focus-thumb {  background-color: '{{foreground-2}}'; }md-slider.md-THEME_NAME-theme .md-focus-ring {  border-color: '{{foreground-4}}'; }md-slider.md-THEME_NAME-theme .md-disabled-thumb {  border-color: '{{background-hue-3}}'; }md-slider.md-THEME_NAME-theme.md-min .md-thumb:after {  background-color: '{{background-hue-3}}'; }md-slider.md-THEME_NAME-theme .md-track.md-track-fill {  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme .md-thumb:after {  border-color: '{{primary-color}}';  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme .md-sign {  background-color: '{{primary-color}}'; }  md-slider.md-THEME_NAME-theme .md-sign:after {    border-top-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme .md-thumb-text {  color: '{{primary-contrast}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-track-fill {  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-thumb:after {  border-color: '{{warn-color}}';  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-sign {  background-color: '{{warn-color}}'; }  md-slider.md-THEME_NAME-theme.md-warn .md-sign:after {    border-top-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-thumb-text {  color: '{{warn-contrast}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-track-fill {  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-thumb:after {  border-color: '{{primary-color}}';  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-sign {  background-color: '{{primary-color}}'; }  md-slider.md-THEME_NAME-theme.md-primary .md-sign:after {    border-top-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-thumb-text {  color: '{{primary-contrast}}'; }md-slider.md-THEME_NAME-theme[disabled] .md-thumb:after {  border-color: '{{foreground-3}}'; }md-slider.md-THEME_NAME-theme[disabled]:not(.md-min) .md-thumb:after {  background-color: '{{foreground-3}}'; }.md-subheader.md-THEME_NAME-theme {  color: '{{ foreground-2-0.23 }}';  background-color: '{{background-hue-3}}'; }  .md-subheader.md-THEME_NAME-theme.md-primary {    color: '{{primary-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-accent {    color: '{{accent-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-warn {    color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme .md-thumb {  background-color: '{{background-50}}'; }md-switch.md-THEME_NAME-theme .md-bar {  background-color: '{{background-500}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-thumb {  background-color: '{{accent-color}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-bar {  background-color: '{{accent-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-thumb {  background-color: '{{primary-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-bar {  background-color: '{{primary-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-thumb {  background-color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-bar {  background-color: '{{warn-color-0.5}}'; }md-switch.md-THEME_NAME-theme[disabled] .md-thumb {  background-color: '{{background-400}}'; }md-switch.md-THEME_NAME-theme[disabled] .md-bar {  background-color: '{{foreground-4}}'; }md-switch.md-THEME_NAME-theme:focus .md-label:not(:empty) {  border-color: '{{foreground-1}}';  border-style: dotted; }md-tabs.md-THEME_NAME-theme .md-header {  background-color: '{{primary-color}}'; }md-tabs.md-THEME_NAME-theme.md-accent .md-header {  background-color: '{{accent-color}}'; }md-tabs.md-THEME_NAME-theme.md-accent md-tab:not([disabled]) {  color: '{{accent-100}}'; }  md-tabs.md-THEME_NAME-theme.md-accent md-tab:not([disabled]).active {    color: '{{accent-contrast}}'; }md-tabs.md-THEME_NAME-theme.md-warn .md-header {  background-color: '{{warn-color}}'; }md-tabs.md-THEME_NAME-theme.md-warn md-tab:not([disabled]) {  color: '{{warn-100}}'; }  md-tabs.md-THEME_NAME-theme.md-warn md-tab:not([disabled]).active {    color: '{{warn-contrast}}'; }md-tabs.md-THEME_NAME-theme md-tabs-ink-bar {  color: '{{primary-contrast}}';  background: '{{primary-contrast}}'; }md-tabs.md-THEME_NAME-theme md-tab {  color: '{{primary-100}}'; }  md-tabs.md-THEME_NAME-theme md-tab.active {    color: '{{primary-contrast}}'; }  md-tabs.md-THEME_NAME-theme md-tab[disabled] {    color: '{{foreground-4}}'; }  md-tabs.md-THEME_NAME-theme md-tab:focus {    color: '{{primary-contrast}}';    background-color: '{{primary-contrast-0.1}}'; }  md-tabs.md-THEME_NAME-theme md-tab .md-ripple-container {    color: '{{primary-contrast}}'; }md-input-group.md-THEME_NAME-theme input, md-input-group.md-THEME_NAME-theme textarea {  text-shadow: '{{foreground-shadow}}'; }  md-input-group.md-THEME_NAME-theme input::-webkit-input-placeholder, md-input-group.md-THEME_NAME-theme input::-moz-placeholder, md-input-group.md-THEME_NAME-theme input:-moz-placeholder, md-input-group.md-THEME_NAME-theme input:-ms-input-placeholder, md-input-group.md-THEME_NAME-theme textarea::-webkit-input-placeholder, md-input-group.md-THEME_NAME-theme textarea::-moz-placeholder, md-input-group.md-THEME_NAME-theme textarea:-moz-placeholder, md-input-group.md-THEME_NAME-theme textarea:-ms-input-placeholder {    color: '{{foreground-3}}'; }md-input-group.md-THEME_NAME-theme label {  text-shadow: '{{foreground-shadow}}';  color: '{{foreground-3}}'; }md-input-group.md-THEME_NAME-theme input, md-input-group.md-THEME_NAME-theme textarea {  color: '{{foreground-1}}';  border-color: '{{foreground-4}}'; }md-input-group.md-THEME_NAME-theme.md-input-focused input, md-input-group.md-THEME_NAME-theme.md-input-focused textarea {  border-color: '{{primary-500}}'; }md-input-group.md-THEME_NAME-theme.md-input-focused label {  color: '{{primary-500}}'; }md-input-group.md-THEME_NAME-theme.md-input-focused.md-accent input, md-input-group.md-THEME_NAME-theme.md-input-focused.md-accent textarea {  border-color: '{{accent-500}}'; }md-input-group.md-THEME_NAME-theme.md-input-focused.md-accent label {  color: '{{accent-500}}'; }md-input-group.md-THEME_NAME-theme.md-input-has-value:not(.md-input-focused) label {  color: '{{foreground-2}}'; }md-input-group.md-THEME_NAME-theme .md-input[disabled] {  border-bottom-color: '{{foreground-4}}';  color: '{{foreground-3}}'; }md-toast.md-THEME_NAME-theme {  background-color: '{{foreground-1}}';  color: '{{background-50}}'; }  md-toast.md-THEME_NAME-theme .md-button {    color: '{{background-50}}'; }    md-toast.md-THEME_NAME-theme .md-button.md-highlight {      color: '{{primary-A200}}'; }      md-toast.md-THEME_NAME-theme .md-button.md-highlight.md-accent {        color: '{{accent-A200}}'; }      md-toast.md-THEME_NAME-theme .md-button.md-highlight.md-warn {        color: '{{warn-A200}}'; }md-toolbar.md-THEME_NAME-theme {  background-color: '{{primary-color}}';  color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme .md-button {    color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme.md-accent {    background-color: '{{accent-color}}';    color: '{{accent-contrast}}'; }  md-toolbar.md-THEME_NAME-theme.md-warn {    background-color: '{{warn-color}}';    color: '{{warn-contrast}}'; }md-tooltip.md-THEME_NAME-theme {  color: '{{background-A100}}'; }  md-tooltip.md-THEME_NAME-theme .md-background {    background-color: '{{foreground-2}}'; }"),/**
 * An Angular module that gives you access to the browsers local storage
 * @version v0.1.5 - 2014-11-04
 * @link https://github.com/grevory/angular-local-storage
 * @author grevory <greg@gregpike.ca>
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
function(e,t){"use strict";function n(e){return/^-?\d+\.?\d*$/.test(e.replace(/["']/g,""))}var r=t.isDefined,i=t.isUndefined,o=t.isNumber,a=t.isObject,c=t.isArray,s=t.extend,u=t.toJson,l=t.fromJson,d=t.module("LocalStorageModule",[]);d.provider("localStorageService",function(){this.prefix="ls",this.storageType="localStorage",this.cookie={expiry:30,path:"/"},this.notify={setItem:!0,removeItem:!1},this.setPrefix=function(e){return this.prefix=e,this},this.setStorageType=function(e){return this.storageType=e,this},this.setStorageCookie=function(e,t){return this.cookie={expiry:e,path:t},this},this.setStorageCookieDomain=function(e){return this.cookie.domain=e,this},this.setNotify=function(e,t){return this.notify={setItem:e,removeItem:t},this},this.$get=["$rootScope","$window","$document","$parse",function(e,t,d,f){var m,p=this,h=p.prefix,$=p.cookie,g=p.notify,v=p.storageType;d?d[0]&&(d=d[0]):d=document,"."!==h.substr(-1)&&(h=h?h+".":"");var b=function(e){return h+e},y=function(){try{var n=v in t&&null!==t[v],r=b("__"+Math.round(1e7*Math.random()));return n&&(m=t[v],m.setItem(r,""),m.removeItem(r)),n}catch(i){return v="cookie",e.$broadcast("LocalStorageModule.notification.error",i.message),!1}}(),E=function(t,n){if(i(n)?n=null:(a(n)||c(n)||o(+n||n))&&(n=u(n)),!y||"cookie"===p.storageType)return y||e.$broadcast("LocalStorageModule.notification.warning","LOCAL_STORAGE_NOT_SUPPORTED"),g.setItem&&e.$broadcast("LocalStorageModule.notification.setitem",{key:t,newvalue:n,storageType:"cookie"}),k(t,n);try{(a(n)||c(n))&&(n=u(n)),m&&m.setItem(b(t),n),g.setItem&&e.$broadcast("LocalStorageModule.notification.setitem",{key:t,newvalue:n,storageType:p.storageType})}catch(r){return e.$broadcast("LocalStorageModule.notification.error",r.message),k(t,n)}return!0},w=function(t){if(!y||"cookie"===p.storageType)return y||e.$broadcast("LocalStorageModule.notification.warning","LOCAL_STORAGE_NOT_SUPPORTED"),T(t);var r=m?m.getItem(b(t)):null;return r&&"null"!==r?"{"===r.charAt(0)||"["===r.charAt(0)||n(r)?l(r):r:null},A=function(t){if(!y||"cookie"===p.storageType)return y||e.$broadcast("LocalStorageModule.notification.warning","LOCAL_STORAGE_NOT_SUPPORTED"),g.removeItem&&e.$broadcast("LocalStorageModule.notification.removeitem",{key:t,storageType:"cookie"}),S(t);try{m.removeItem(b(t)),g.removeItem&&e.$broadcast("LocalStorageModule.notification.removeitem",{key:t,storageType:p.storageType})}catch(n){return e.$broadcast("LocalStorageModule.notification.error",n.message),S(t)}return!0},x=function(){if(!y)return e.$broadcast("LocalStorageModule.notification.warning","LOCAL_STORAGE_NOT_SUPPORTED"),!1;var t=h.length,n=[];for(var r in m)if(r.substr(0,t)===h)try{n.push(r.substr(t))}catch(i){return e.$broadcast("LocalStorageModule.notification.error",i.Description),[]}return n},M=function(t){t=t||"";var n=h.slice(0,-1),r=new RegExp(n+"."+t);if(!y||"cookie"===p.storageType)return y||e.$broadcast("LocalStorageModule.notification.warning","LOCAL_STORAGE_NOT_SUPPORTED"),N();var i=h.length;for(var o in m)if(r.test(o))try{A(o.substr(i))}catch(a){return e.$broadcast("LocalStorageModule.notification.error",a.message),N()}return!0},C=function(){try{return t.navigator.cookieEnabled||"cookie"in d&&(d.cookie.length>0||(d.cookie="test").indexOf.call(d.cookie,"test")>-1)}catch(n){return e.$broadcast("LocalStorageModule.notification.error",n.message),!1}}(),k=function(t,n){if(i(n))return!1;if((c(n)||a(n))&&(n=u(n)),!C)return e.$broadcast("LocalStorageModule.notification.error","COOKIES_NOT_SUPPORTED"),!1;try{var r="",o=new Date,s="";if(null===n?(o.setTime(o.getTime()+-864e5),r="; expires="+o.toGMTString(),n=""):0!==$.expiry&&(o.setTime(o.getTime()+24*$.expiry*60*60*1e3),r="; expires="+o.toGMTString()),t){var l="; path="+$.path;$.domain&&(s="; domain="+$.domain),d.cookie=b(t)+"="+encodeURIComponent(n)+r+l+s}}catch(f){return e.$broadcast("LocalStorageModule.notification.error",f.message),!1}return!0},T=function(t){if(!C)return e.$broadcast("LocalStorageModule.notification.error","COOKIES_NOT_SUPPORTED"),!1;for(var n=d.cookie&&d.cookie.split(";")||[],r=0;r<n.length;r++){for(var i=n[r];" "===i.charAt(0);)i=i.substring(1,i.length);if(0===i.indexOf(b(t)+"=")){var o=decodeURIComponent(i.substring(h.length+t.length+1,i.length));try{var a=JSON.parse(o);return l(a)}catch(c){return o}}}return null},S=function(e){k(e,null)},N=function(){for(var e=null,t=h.length,n=d.cookie.split(";"),r=0;r<n.length;r++){for(e=n[r];" "===e.charAt(0);)e=e.substring(1,e.length);var i=e.substring(t,e.indexOf("="));S(i)}},O=function(){return v},_=function(e,t,n,i){i=i||t;var o=w(i);return null===o&&r(n)?o=n:a(o)&&a(n)&&(o=s(n,o)),f(t).assign(e,o),e.$watch(t,function(e){E(i,e)},a(e[t]))},D=function(){for(var e=0,n=t[v],r=0;r<n.length;r++)0===n.key(r).indexOf(h)&&e++;return e};return{isSupported:y,getStorageType:O,set:E,add:E,get:w,keys:x,remove:A,clearAll:M,bind:_,deriveKey:b,length:D,cookie:{isSupported:C,set:k,add:k,get:T,remove:S,clearAll:N}}}]})}(window,window.angular);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlcGVuZGVuY2llcy5qcyJdLCJuYW1lcyI6WyJtZE1lZGlhRmFjdG9yeSIsIiRtZENvbnN0YW50IiwiJHJvb3RTY29wZSIsIiR3aW5kb3ciLCIkbWRNZWRpYSIsInF1ZXJ5IiwidmFsaWRhdGVkIiwicXVlcmllcyIsImFuZ3VsYXIiLCJpc1VuZGVmaW5lZCIsInZhbGlkYXRlIiwicmVzdWx0IiwicmVzdWx0cyIsImFkZCIsIk1FRElBIiwiY2hhckF0IiwibWF0Y2hNZWRpYSIsImFkZExpc3RlbmVyIiwib25RdWVyeUNoYW5nZSIsIm1lZGlhIiwibWF0Y2hlcyIsInRoaXMiLCIkZXZhbEFzeW5jIiwid2luZG93IiwiZG9jdW1lbnQiLCJ1bmRlZmluZWQiLCJtaW5FcnIiLCJtb2R1bGUiLCJFcnJvckNvbnN0cnVjdG9yIiwiRXJyb3IiLCJtZXNzYWdlIiwiaSIsImNvZGUiLCJhcmd1bWVudHMiLCJwcmVmaXgiLCJ0ZW1wbGF0ZSIsInRlbXBsYXRlQXJncyIsInJlcGxhY2UiLCJtYXRjaCIsImluZGV4Iiwic2xpY2UiLCJsZW5ndGgiLCJ0b0RlYnVnU3RyaW5nIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiaXNBcnJheUxpa2UiLCJvYmoiLCJpc1dpbmRvdyIsIm5vZGVUeXBlIiwiTk9ERV9UWVBFX0VMRU1FTlQiLCJpc1N0cmluZyIsImlzQXJyYXkiLCJmb3JFYWNoIiwiaXRlcmF0b3IiLCJjb250ZXh0Iiwia2V5IiwiaXNGdW5jdGlvbiIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImlzUHJpbWl0aXZlIiwic29ydGVkS2V5cyIsIk9iamVjdCIsImtleXMiLCJzb3J0IiwiZm9yRWFjaFNvcnRlZCIsInJldmVyc2VQYXJhbXMiLCJpdGVyYXRvckZuIiwidmFsdWUiLCJuZXh0VWlkIiwidWlkIiwic2V0SGFzaEtleSIsImgiLCIkJGhhc2hLZXkiLCJleHRlbmQiLCJkc3QiLCJpaSIsImoiLCJqaiIsImludCIsInN0ciIsInBhcnNlSW50IiwiaW5oZXJpdCIsInBhcmVudCIsImV4dHJhIiwiY3JlYXRlIiwibm9vcCIsImlkZW50aXR5IiwiJCIsInZhbHVlRm4iLCJpc0RlZmluZWQiLCJpc09iamVjdCIsImlzTnVtYmVyIiwiaXNEYXRlIiwidG9TdHJpbmciLCJpc1JlZ0V4cCIsImlzU2NvcGUiLCIkd2F0Y2giLCJpc0ZpbGUiLCJpc0Zvcm1EYXRhIiwiaXNCbG9iIiwiaXNCb29sZWFuIiwiaXNQcm9taXNlTGlrZSIsInRoZW4iLCJpc0VsZW1lbnQiLCJub2RlIiwibm9kZU5hbWUiLCJwcm9wIiwiYXR0ciIsImZpbmQiLCJtYWtlTWFwIiwiaXRlbXMiLCJzcGxpdCIsIm5vZGVOYW1lXyIsImVsZW1lbnQiLCJsb3dlcmNhc2UiLCJhcnJheVJlbW92ZSIsImFycmF5IiwiaW5kZXhPZiIsInNwbGljZSIsImNvcHkiLCJzb3VyY2UiLCJkZXN0aW5hdGlvbiIsInN0YWNrU291cmNlIiwic3RhY2tEZXN0IiwibmdNaW5FcnIiLCJwdXNoIiwiRGF0ZSIsImdldFRpbWUiLCJSZWdFeHAiLCJsYXN0SW5kZXgiLCJlbXB0eU9iamVjdCIsImdldFByb3RvdHlwZU9mIiwic2hhbGxvd0NvcHkiLCJzcmMiLCJlcXVhbHMiLCJvMSIsIm8yIiwia2V5U2V0IiwidDEiLCJ0MiIsImNvbmNhdCIsImFycmF5MSIsImFycmF5MiIsInNsaWNlQXJncyIsImFyZ3MiLCJzdGFydEluZGV4IiwiYmluZCIsInNlbGYiLCJmbiIsImN1cnJ5QXJncyIsImFwcGx5IiwidG9Kc29uUmVwbGFjZXIiLCJ2YWwiLCJ0b0pzb24iLCJwcmV0dHkiLCJKU09OIiwic3RyaW5naWZ5IiwiZnJvbUpzb24iLCJqc29uIiwicGFyc2UiLCJzdGFydGluZ1RhZyIsImpxTGl0ZSIsImNsb25lIiwiZW1wdHkiLCJlIiwiZWxlbUh0bWwiLCJhcHBlbmQiLCJodG1sIiwiTk9ERV9UWVBFX1RFWFQiLCJ0cnlEZWNvZGVVUklDb21wb25lbnQiLCJkZWNvZGVVUklDb21wb25lbnQiLCJwYXJzZUtleVZhbHVlIiwia2V5VmFsdWUiLCJrZXlfdmFsdWUiLCJ0b0tleVZhbHVlIiwicGFydHMiLCJhcnJheVZhbHVlIiwiZW5jb2RlVXJpUXVlcnkiLCJqb2luIiwiZW5jb2RlVXJpU2VnbWVudCIsInBjdEVuY29kZVNwYWNlcyIsImdldE5nQXR0cmlidXRlIiwibmdBdHRyIiwibmdBdHRyUHJlZml4ZXMiLCJhbmd1bGFySW5pdCIsImJvb3RzdHJhcCIsImFwcEVsZW1lbnQiLCJjb25maWciLCJuYW1lIiwiaGFzQXR0cmlidXRlIiwiZ2V0QXR0cmlidXRlIiwiY2FuZGlkYXRlIiwicXVlcnlTZWxlY3RvciIsInN0cmljdERpIiwibW9kdWxlcyIsImRlZmF1bHRDb25maWciLCJkb0Jvb3RzdHJhcCIsImluamVjdG9yIiwidGFnIiwidW5zaGlmdCIsIiRwcm92aWRlIiwiZGVidWdJbmZvRW5hYmxlZCIsIiRjb21waWxlUHJvdmlkZXIiLCJjcmVhdGVJbmplY3RvciIsImludm9rZSIsInNjb3BlIiwiY29tcGlsZSIsIiRhcHBseSIsImRhdGEiLCJOR19FTkFCTEVfREVCVUdfSU5GTyIsIk5HX0RFRkVSX0JPT1RTVFJBUCIsInRlc3QiLCJyZXN1bWVCb290c3RyYXAiLCJleHRyYU1vZHVsZXMiLCJyZXN1bWVEZWZlcnJlZEJvb3RzdHJhcCIsInJlbG9hZFdpdGhEZWJ1Z0luZm8iLCJsb2NhdGlvbiIsInJlbG9hZCIsImdldFRlc3RhYmlsaXR5Iiwicm9vdEVsZW1lbnQiLCJnZXQiLCJzbmFrZV9jYXNlIiwic2VwYXJhdG9yIiwiU05BS0VfQ0FTRV9SRUdFWFAiLCJsZXR0ZXIiLCJwb3MiLCJ0b0xvd2VyQ2FzZSIsImJpbmRKUXVlcnkiLCJvcmlnaW5hbENsZWFuRGF0YSIsImJpbmRKUXVlcnlGaXJlZCIsImpRdWVyeSIsIm9uIiwiSlFMaXRlUHJvdG90eXBlIiwiaXNvbGF0ZVNjb3BlIiwiY29udHJvbGxlciIsImluaGVyaXRlZERhdGEiLCJjbGVhbkRhdGEiLCJlbGVtcyIsImV2ZW50cyIsInNraXBEZXN0cm95T25OZXh0SlF1ZXJ5Q2xlYW5EYXRhIiwiZWxlbSIsIl9kYXRhIiwiJGRlc3Ryb3kiLCJ0cmlnZ2VySGFuZGxlciIsIkpRTGl0ZSIsImFzc2VydEFyZyIsImFyZyIsInJlYXNvbiIsImFzc2VydEFyZ0ZuIiwiYWNjZXB0QXJyYXlBbm5vdGF0aW9uIiwiY29uc3RydWN0b3IiLCJhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eSIsImdldHRlciIsInBhdGgiLCJiaW5kRm5Ub1Njb3BlIiwibGFzdEluc3RhbmNlIiwibGVuIiwiZ2V0QmxvY2tOb2RlcyIsIm5vZGVzIiwiZW5kTm9kZSIsImJsb2NrTm9kZXMiLCJuZXh0U2libGluZyIsImNyZWF0ZU1hcCIsInNldHVwTW9kdWxlTG9hZGVyIiwiZW5zdXJlIiwiZmFjdG9yeSIsIiRpbmplY3Rvck1pbkVyciIsIiQkbWluRXJyIiwicmVxdWlyZXMiLCJjb25maWdGbiIsImludm9rZUxhdGVyIiwicHJvdmlkZXIiLCJtZXRob2QiLCJpbnNlcnRNZXRob2QiLCJxdWV1ZSIsImludm9rZVF1ZXVlIiwibW9kdWxlSW5zdGFuY2UiLCJjb25maWdCbG9ja3MiLCJydW5CbG9ja3MiLCJfaW52b2tlUXVldWUiLCJfY29uZmlnQmxvY2tzIiwiX3J1bkJsb2NrcyIsInNlcnZpY2UiLCJjb25zdGFudCIsImFuaW1hdGlvbiIsImZpbHRlciIsImRpcmVjdGl2ZSIsInJ1biIsImJsb2NrIiwic2VyaWFsaXplT2JqZWN0Iiwic2VlbiIsInB1Ymxpc2hFeHRlcm5hbEFQSSIsInZlcnNpb24iLCJ1cHBlcmNhc2UiLCJjYWxsYmFja3MiLCJjb3VudGVyIiwiJCRjc3AiLCJjc3AiLCJhbmd1bGFyTW9kdWxlIiwiJExvY2FsZVByb3ZpZGVyIiwiJCRzYW5pdGl6ZVVyaSIsIiQkU2FuaXRpemVVcmlQcm92aWRlciIsIiRDb21waWxlUHJvdmlkZXIiLCJhIiwiaHRtbEFuY2hvckRpcmVjdGl2ZSIsImlucHV0IiwiaW5wdXREaXJlY3RpdmUiLCJ0ZXh0YXJlYSIsImZvcm0iLCJmb3JtRGlyZWN0aXZlIiwic2NyaXB0Iiwic2NyaXB0RGlyZWN0aXZlIiwic2VsZWN0Iiwic2VsZWN0RGlyZWN0aXZlIiwic3R5bGUiLCJzdHlsZURpcmVjdGl2ZSIsIm9wdGlvbiIsIm9wdGlvbkRpcmVjdGl2ZSIsIm5nQmluZCIsIm5nQmluZERpcmVjdGl2ZSIsIm5nQmluZEh0bWwiLCJuZ0JpbmRIdG1sRGlyZWN0aXZlIiwibmdCaW5kVGVtcGxhdGUiLCJuZ0JpbmRUZW1wbGF0ZURpcmVjdGl2ZSIsIm5nQ2xhc3MiLCJuZ0NsYXNzRGlyZWN0aXZlIiwibmdDbGFzc0V2ZW4iLCJuZ0NsYXNzRXZlbkRpcmVjdGl2ZSIsIm5nQ2xhc3NPZGQiLCJuZ0NsYXNzT2RkRGlyZWN0aXZlIiwibmdDbG9hayIsIm5nQ2xvYWtEaXJlY3RpdmUiLCJuZ0NvbnRyb2xsZXIiLCJuZ0NvbnRyb2xsZXJEaXJlY3RpdmUiLCJuZ0Zvcm0iLCJuZ0Zvcm1EaXJlY3RpdmUiLCJuZ0hpZGUiLCJuZ0hpZGVEaXJlY3RpdmUiLCJuZ0lmIiwibmdJZkRpcmVjdGl2ZSIsIm5nSW5jbHVkZSIsIm5nSW5jbHVkZURpcmVjdGl2ZSIsIm5nSW5pdCIsIm5nSW5pdERpcmVjdGl2ZSIsIm5nTm9uQmluZGFibGUiLCJuZ05vbkJpbmRhYmxlRGlyZWN0aXZlIiwibmdQbHVyYWxpemUiLCJuZ1BsdXJhbGl6ZURpcmVjdGl2ZSIsIm5nUmVwZWF0IiwibmdSZXBlYXREaXJlY3RpdmUiLCJuZ1Nob3ciLCJuZ1Nob3dEaXJlY3RpdmUiLCJuZ1N0eWxlIiwibmdTdHlsZURpcmVjdGl2ZSIsIm5nU3dpdGNoIiwibmdTd2l0Y2hEaXJlY3RpdmUiLCJuZ1N3aXRjaFdoZW4iLCJuZ1N3aXRjaFdoZW5EaXJlY3RpdmUiLCJuZ1N3aXRjaERlZmF1bHQiLCJuZ1N3aXRjaERlZmF1bHREaXJlY3RpdmUiLCJuZ09wdGlvbnMiLCJuZ09wdGlvbnNEaXJlY3RpdmUiLCJuZ1RyYW5zY2x1ZGUiLCJuZ1RyYW5zY2x1ZGVEaXJlY3RpdmUiLCJuZ01vZGVsIiwibmdNb2RlbERpcmVjdGl2ZSIsIm5nTGlzdCIsIm5nTGlzdERpcmVjdGl2ZSIsIm5nQ2hhbmdlIiwibmdDaGFuZ2VEaXJlY3RpdmUiLCJwYXR0ZXJuIiwicGF0dGVybkRpcmVjdGl2ZSIsIm5nUGF0dGVybiIsInJlcXVpcmVkIiwicmVxdWlyZWREaXJlY3RpdmUiLCJuZ1JlcXVpcmVkIiwibWlubGVuZ3RoIiwibWlubGVuZ3RoRGlyZWN0aXZlIiwibmdNaW5sZW5ndGgiLCJtYXhsZW5ndGgiLCJtYXhsZW5ndGhEaXJlY3RpdmUiLCJuZ01heGxlbmd0aCIsIm5nVmFsdWUiLCJuZ1ZhbHVlRGlyZWN0aXZlIiwibmdNb2RlbE9wdGlvbnMiLCJuZ01vZGVsT3B0aW9uc0RpcmVjdGl2ZSIsIm5nSW5jbHVkZUZpbGxDb250ZW50RGlyZWN0aXZlIiwibmdBdHRyaWJ1dGVBbGlhc0RpcmVjdGl2ZXMiLCJuZ0V2ZW50RGlyZWN0aXZlcyIsIiRhbmNob3JTY3JvbGwiLCIkQW5jaG9yU2Nyb2xsUHJvdmlkZXIiLCIkYW5pbWF0ZSIsIiRBbmltYXRlUHJvdmlkZXIiLCIkYnJvd3NlciIsIiRCcm93c2VyUHJvdmlkZXIiLCIkY2FjaGVGYWN0b3J5IiwiJENhY2hlRmFjdG9yeVByb3ZpZGVyIiwiJGNvbnRyb2xsZXIiLCIkQ29udHJvbGxlclByb3ZpZGVyIiwiJGRvY3VtZW50IiwiJERvY3VtZW50UHJvdmlkZXIiLCIkZXhjZXB0aW9uSGFuZGxlciIsIiRFeGNlcHRpb25IYW5kbGVyUHJvdmlkZXIiLCIkZmlsdGVyIiwiJEZpbHRlclByb3ZpZGVyIiwiJGludGVycG9sYXRlIiwiJEludGVycG9sYXRlUHJvdmlkZXIiLCIkaW50ZXJ2YWwiLCIkSW50ZXJ2YWxQcm92aWRlciIsIiRodHRwIiwiJEh0dHBQcm92aWRlciIsIiRodHRwQmFja2VuZCIsIiRIdHRwQmFja2VuZFByb3ZpZGVyIiwiJGxvY2F0aW9uIiwiJExvY2F0aW9uUHJvdmlkZXIiLCIkbG9nIiwiJExvZ1Byb3ZpZGVyIiwiJHBhcnNlIiwiJFBhcnNlUHJvdmlkZXIiLCIkUm9vdFNjb3BlUHJvdmlkZXIiLCIkcSIsIiRRUHJvdmlkZXIiLCIkJHEiLCIkJFFQcm92aWRlciIsIiRzY2UiLCIkU2NlUHJvdmlkZXIiLCIkc2NlRGVsZWdhdGUiLCIkU2NlRGVsZWdhdGVQcm92aWRlciIsIiRzbmlmZmVyIiwiJFNuaWZmZXJQcm92aWRlciIsIiR0ZW1wbGF0ZUNhY2hlIiwiJFRlbXBsYXRlQ2FjaGVQcm92aWRlciIsIiR0ZW1wbGF0ZVJlcXVlc3QiLCIkVGVtcGxhdGVSZXF1ZXN0UHJvdmlkZXIiLCIkJHRlc3RhYmlsaXR5IiwiJCRUZXN0YWJpbGl0eVByb3ZpZGVyIiwiJHRpbWVvdXQiLCIkVGltZW91dFByb3ZpZGVyIiwiJFdpbmRvd1Byb3ZpZGVyIiwiJCRyQUYiLCIkJFJBRlByb3ZpZGVyIiwiJCRhc3luY0NhbGxiYWNrIiwiJCRBc3luY0NhbGxiYWNrUHJvdmlkZXIiLCIkJGpxTGl0ZSIsIiQkanFMaXRlUHJvdmlkZXIiLCJqcU5leHRJZCIsImpxSWQiLCJjYW1lbENhc2UiLCJTUEVDSUFMX0NIQVJTX1JFR0VYUCIsIl8iLCJvZmZzZXQiLCJ0b1VwcGVyQ2FzZSIsIk1PWl9IQUNLX1JFR0VYUCIsImpxTGl0ZUlzVGV4dE5vZGUiLCJIVE1MX1JFR0VYUCIsImpxTGl0ZUFjY2VwdHNEYXRhIiwiTk9ERV9UWVBFX0RPQ1VNRU5UIiwianFMaXRlQnVpbGRGcmFnbWVudCIsInRtcCIsIndyYXAiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJjcmVhdGVUZXh0Tm9kZSIsImFwcGVuZENoaWxkIiwiY3JlYXRlRWxlbWVudCIsIlRBR19OQU1FX1JFR0VYUCIsImV4ZWMiLCJ3cmFwTWFwIiwiX2RlZmF1bHQiLCJpbm5lckhUTUwiLCJYSFRNTF9UQUdfUkVHRVhQIiwibGFzdENoaWxkIiwiY2hpbGROb2RlcyIsImZpcnN0Q2hpbGQiLCJ0ZXh0Q29udGVudCIsImpxTGl0ZVBhcnNlSFRNTCIsInBhcnNlZCIsIlNJTkdMRV9UQUdfUkVHRVhQIiwiYXJnSXNTdHJpbmciLCJ0cmltIiwianFMaXRlTWluRXJyIiwianFMaXRlQWRkTm9kZXMiLCJqcUxpdGVDbG9uZSIsImNsb25lTm9kZSIsImpxTGl0ZURlYWxvYyIsIm9ubHlEZXNjZW5kYW50cyIsImpxTGl0ZVJlbW92ZURhdGEiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZGVzY2VuZGFudHMiLCJsIiwianFMaXRlT2ZmIiwidHlwZSIsInVuc3VwcG9ydGVkIiwiZXhwYW5kb1N0b3JlIiwianFMaXRlRXhwYW5kb1N0b3JlIiwiaGFuZGxlIiwibGlzdGVuZXJGbnMiLCJyZW1vdmVFdmVudExpc3RlbmVyRm4iLCJleHBhbmRvSWQiLCJuZzMzOSIsImpxQ2FjaGUiLCJjcmVhdGVJZk5lY2Vzc2FyeSIsImpxTGl0ZURhdGEiLCJpc1NpbXBsZVNldHRlciIsImlzU2ltcGxlR2V0dGVyIiwibWFzc0dldHRlciIsImpxTGl0ZUhhc0NsYXNzIiwic2VsZWN0b3IiLCJqcUxpdGVSZW1vdmVDbGFzcyIsImNzc0NsYXNzZXMiLCJzZXRBdHRyaWJ1dGUiLCJjc3NDbGFzcyIsImpxTGl0ZUFkZENsYXNzIiwiZXhpc3RpbmdDbGFzc2VzIiwicm9vdCIsImVsZW1lbnRzIiwianFMaXRlQ29udHJvbGxlciIsImpxTGl0ZUluaGVyaXRlZERhdGEiLCJkb2N1bWVudEVsZW1lbnQiLCJuYW1lcyIsInBhcmVudE5vZGUiLCJOT0RFX1RZUEVfRE9DVU1FTlRfRlJBR01FTlQiLCJob3N0IiwianFMaXRlRW1wdHkiLCJyZW1vdmVDaGlsZCIsImpxTGl0ZVJlbW92ZSIsImtlZXBEYXRhIiwianFMaXRlRG9jdW1lbnRMb2FkZWQiLCJhY3Rpb24iLCJ3aW4iLCJyZWFkeVN0YXRlIiwic2V0VGltZW91dCIsImdldEJvb2xlYW5BdHRyTmFtZSIsImJvb2xlYW5BdHRyIiwiQk9PTEVBTl9BVFRSIiwiQk9PTEVBTl9FTEVNRU5UUyIsImdldEFsaWFzZWRBdHRyTmFtZSIsIkFMSUFTRURfQVRUUiIsImNyZWF0ZUV2ZW50SGFuZGxlciIsImV2ZW50SGFuZGxlciIsImV2ZW50IiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsImV2ZW50Rm5zIiwiZXZlbnRGbnNMZW5ndGgiLCJpbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJvcmlnaW5hbFN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInN0b3BQcm9wYWdhdGlvbiIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwiJGdldCIsImhhc0NsYXNzIiwiY2xhc3NlcyIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJoYXNoS2V5IiwibmV4dFVpZEZuIiwib2JqVHlwZSIsIkhhc2hNYXAiLCJpc29sYXRlZFVpZCIsInB1dCIsImFub25GbiIsImZuVGV4dCIsIlNUUklQX0NPTU1FTlRTIiwiRk5fQVJHUyIsImFubm90YXRlIiwiJGluamVjdCIsImFyZ0RlY2wiLCJsYXN0IiwiRk5fQVJHX1NQTElUIiwiRk5fQVJHIiwiYWxsIiwidW5kZXJzY29yZSIsIm1vZHVsZXNUb0xvYWQiLCJzdXBwb3J0T2JqZWN0IiwiZGVsZWdhdGUiLCJwcm92aWRlcl8iLCJwcm92aWRlckluamVjdG9yIiwiaW5zdGFudGlhdGUiLCJwcm92aWRlckNhY2hlIiwicHJvdmlkZXJTdWZmaXgiLCJlbmZvcmNlUmV0dXJuVmFsdWUiLCJpbnN0YW5jZUluamVjdG9yIiwiZmFjdG9yeUZuIiwiZW5mb3JjZSIsIiRpbmplY3RvciIsImluc3RhbmNlQ2FjaGUiLCJkZWNvcmF0b3IiLCJzZXJ2aWNlTmFtZSIsImRlY29yRm4iLCJvcmlnUHJvdmlkZXIiLCJvcmlnJGdldCIsIm9yaWdJbnN0YW5jZSIsIiRkZWxlZ2F0ZSIsImxvYWRNb2R1bGVzIiwibW9kdWxlRm4iLCJydW5JbnZva2VRdWV1ZSIsImludm9rZUFyZ3MiLCJsb2FkZWRNb2R1bGVzIiwic3RhY2siLCJjcmVhdGVJbnRlcm5hbEluamVjdG9yIiwiY2FjaGUiLCJnZXRTZXJ2aWNlIiwiY2FsbGVyIiwiSU5TVEFOVElBVElORyIsImVyciIsInNoaWZ0IiwibG9jYWxzIiwiJCRhbm5vdGF0ZSIsIlR5cGUiLCJpbnN0YW5jZSIsInByb3RvdHlwZSIsInJldHVybmVkVmFsdWUiLCJoYXMiLCJhdXRvU2Nyb2xsaW5nRW5hYmxlZCIsImRpc2FibGVBdXRvU2Nyb2xsaW5nIiwiZ2V0Rmlyc3RBbmNob3IiLCJsaXN0IiwiQXJyYXkiLCJzb21lIiwiZ2V0WU9mZnNldCIsInNjcm9sbCIsInlPZmZzZXQiLCJnZXRDb21wdXRlZFN0eWxlIiwicG9zaXRpb24iLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJib3R0b20iLCJzY3JvbGxUbyIsInNjcm9sbEludG9WaWV3IiwiZWxlbVRvcCIsInRvcCIsInNjcm9sbEJ5IiwiZWxtIiwiaGFzaCIsImdldEVsZW1lbnRCeUlkIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJuZXdWYWwiLCJvbGRWYWwiLCJzdXBwb3J0ZWQiLCJCcm93c2VyIiwiY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3QiLCJvdXRzdGFuZGluZ1JlcXVlc3RDb3VudCIsIm91dHN0YW5kaW5nUmVxdWVzdENhbGxiYWNrcyIsInBvcCIsImVycm9yIiwiZ2V0SGFzaCIsInVybCIsInN1YnN0ciIsInN0YXJ0UG9sbGVyIiwiaW50ZXJ2YWwiLCJjaGVjayIsInBvbGxGbnMiLCJwb2xsRm4iLCJwb2xsVGltZW91dCIsImNhY2hlU3RhdGVBbmRGaXJlVXJsQ2hhbmdlIiwiY2FjaGVTdGF0ZSIsImZpcmVVcmxDaGFuZ2UiLCJjYWNoZWRTdGF0ZSIsImhpc3RvcnkiLCJzdGF0ZSIsImxhc3RDYWNoZWRTdGF0ZSIsImxhc3RCcm93c2VyVXJsIiwibGFzdEhpc3RvcnlTdGF0ZSIsInVybENoYW5nZUxpc3RlbmVycyIsImxpc3RlbmVyIiwic2FmZURlY29kZVVSSUNvbXBvbmVudCIsInJhd0RvY3VtZW50IiwiY2xlYXJUaW1lb3V0IiwicGVuZGluZ0RlZmVySWRzIiwiaXNNb2NrIiwiJCRjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdCIsIiQkaW5jT3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQiLCJub3RpZnlXaGVuTm9PdXRzdGFuZGluZ1JlcXVlc3RzIiwiY2FsbGJhY2siLCJhZGRQb2xsRm4iLCJocmVmIiwiYmFzZUVsZW1lbnQiLCJyZWxvYWRMb2NhdGlvbiIsInNhbWVTdGF0ZSIsInNhbWVCYXNlIiwic3RyaXBIYXNoIiwidXJsQ2hhbmdlSW5pdCIsIm9uVXJsQ2hhbmdlIiwiJCRjaGVja1VybENoYW5nZSIsImJhc2VIcmVmIiwibGFzdENvb2tpZXMiLCJsYXN0Q29va2llU3RyaW5nIiwiY29va2llUGF0aCIsImNvb2tpZXMiLCJjb29raWVMZW5ndGgiLCJjb29raWVBcnJheSIsImNvb2tpZSIsInN1YnN0cmluZyIsIndhcm4iLCJkZWZlciIsImRlbGF5IiwidGltZW91dElkIiwiY2FuY2VsIiwiZGVmZXJJZCIsImNhY2hlRmFjdG9yeSIsImNhY2hlSWQiLCJvcHRpb25zIiwicmVmcmVzaCIsImVudHJ5IiwiZnJlc2hFbmQiLCJzdGFsZUVuZCIsIm4iLCJsaW5rIiwicCIsIm5leHRFbnRyeSIsInByZXZFbnRyeSIsImNhY2hlcyIsInNpemUiLCJzdGF0cyIsImlkIiwiY2FwYWNpdHkiLCJOdW1iZXIiLCJNQVhfVkFMVUUiLCJscnVIYXNoIiwibHJ1RW50cnkiLCJyZW1vdmUiLCJyZW1vdmVBbGwiLCJkZXN0cm95IiwiaW5mbyIsIiQkc2FuaXRpemVVcmlQcm92aWRlciIsInBhcnNlSXNvbGF0ZUJpbmRpbmdzIiwiZGlyZWN0aXZlTmFtZSIsIkxPQ0FMX1JFR0VYUCIsImJpbmRpbmdzIiwiZGVmaW5pdGlvbiIsInNjb3BlTmFtZSIsIiRjb21waWxlTWluRXJyIiwibW9kZSIsImNvbGxlY3Rpb24iLCJvcHRpb25hbCIsImF0dHJOYW1lIiwiaGFzRGlyZWN0aXZlcyIsIlN1ZmZpeCIsIkNPTU1FTlRfRElSRUNUSVZFX1JFR0VYUCIsIkNMQVNTX0RJUkVDVElWRV9SRUdFWFAiLCJBTExfT1JfTk9USElOR19BVFRSUyIsIlJFUVVJUkVfUFJFRklYX1JFR0VYUCIsIkVWRU5UX0hBTkRMRVJfQVRUUl9SRUdFWFAiLCJyZWdpc3RlckRpcmVjdGl2ZSIsImRpcmVjdGl2ZUZhY3RvcnkiLCJkaXJlY3RpdmVzIiwicHJpb3JpdHkiLCJyZXF1aXJlIiwicmVzdHJpY3QiLCIkJGlzb2xhdGVCaW5kaW5ncyIsImFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0IiwicmVnZXhwIiwiaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0IiwiZW5hYmxlZCIsInNhZmVBZGRDbGFzcyIsIiRlbGVtZW50IiwiY2xhc3NOYW1lIiwiJGNvbXBpbGVOb2RlcyIsInRyYW5zY2x1ZGVGbiIsIm1heFByaW9yaXR5IiwiaWdub3JlRGlyZWN0aXZlIiwicHJldmlvdXNDb21waWxlQ29udGV4dCIsIm5vZGVWYWx1ZSIsImNvbXBvc2l0ZUxpbmtGbiIsImNvbXBpbGVOb2RlcyIsIiQkYWRkU2NvcGVDbGFzcyIsIm5hbWVzcGFjZSIsImNsb25lQ29ubmVjdEZuIiwicGFyZW50Qm91bmRUcmFuc2NsdWRlRm4iLCJ0cmFuc2NsdWRlQ29udHJvbGxlcnMiLCJmdXR1cmVQYXJlbnRFbGVtZW50IiwiJCRib3VuZFRyYW5zY2x1ZGUiLCJkZXRlY3ROYW1lc3BhY2VGb3JDaGlsZEVsZW1lbnRzIiwiJGxpbmtOb2RlIiwid3JhcFRlbXBsYXRlIiwiY29udHJvbGxlck5hbWUiLCIkJGFkZFNjb3BlSW5mbyIsInBhcmVudEVsZW1lbnQiLCJub2RlTGlzdCIsIiRyb290RWxlbWVudCIsIm5vZGVMaW5rRm4iLCJjaGlsZExpbmtGbiIsImNoaWxkU2NvcGUiLCJpZHgiLCJjaGlsZEJvdW5kVHJhbnNjbHVkZUZuIiwic3RhYmxlTm9kZUxpc3QiLCJub2RlTGlua0ZuRm91bmQiLCJub2RlTGlzdExlbmd0aCIsImxpbmtGbnMiLCIkbmV3IiwidHJhbnNjbHVkZU9uVGhpc0VsZW1lbnQiLCJjcmVhdGVCb3VuZFRyYW5zY2x1ZGVGbiIsInRyYW5zY2x1ZGUiLCJlbGVtZW50VHJhbnNjbHVkZU9uVGhpc0VsZW1lbnQiLCJ0ZW1wbGF0ZU9uVGhpc0VsZW1lbnQiLCJhdHRycyIsImxpbmtGbkZvdW5kIiwiQXR0cmlidXRlcyIsImNvbGxlY3REaXJlY3RpdmVzIiwiYXBwbHlEaXJlY3RpdmVzVG9Ob2RlIiwiJCRlbGVtZW50IiwidGVybWluYWwiLCJwcmV2aW91c0JvdW5kVHJhbnNjbHVkZUZuIiwiYm91bmRUcmFuc2NsdWRlRm4iLCJ0cmFuc2NsdWRlZFNjb3BlIiwiY2xvbmVGbiIsImNvbnRyb2xsZXJzIiwiY29udGFpbmluZ1Njb3BlIiwiJCR0cmFuc2NsdWRlZCIsImF0dHJzTWFwIiwiJGF0dHIiLCJhZGREaXJlY3RpdmUiLCJkaXJlY3RpdmVOb3JtYWxpemUiLCJuTmFtZSIsIm5nQXR0ck5hbWUiLCJpc05nQXR0ciIsIm5BdHRycyIsImF0dHJpYnV0ZXMiLCJhdHRyU3RhcnROYW1lIiwiYXR0ckVuZE5hbWUiLCJOR19BVFRSX0JJTkRJTkciLCJQUkVGSVhfUkVHRVhQIiwiZGlyZWN0aXZlTk5hbWUiLCJkaXJlY3RpdmVJc011bHRpRWxlbWVudCIsImFkZEF0dHJJbnRlcnBvbGF0ZURpcmVjdGl2ZSIsImFuaW1WYWwiLCJhZGRUZXh0SW50ZXJwb2xhdGVEaXJlY3RpdmUiLCJOT0RFX1RZUEVfQ09NTUVOVCIsImJ5UHJpb3JpdHkiLCJncm91cFNjYW4iLCJhdHRyU3RhcnQiLCJhdHRyRW5kIiwiZGVwdGgiLCJncm91cEVsZW1lbnRzTGlua0ZuV3JhcHBlciIsImxpbmtGbiIsImNvbXBpbGVOb2RlIiwidGVtcGxhdGVBdHRycyIsImpxQ29sbGVjdGlvbiIsIm9yaWdpbmFsUmVwbGFjZURpcmVjdGl2ZSIsInByZUxpbmtGbnMiLCJwb3N0TGlua0ZucyIsImFkZExpbmtGbnMiLCJwcmUiLCJwb3N0IiwibmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlIiwiJCRpc29sYXRlU2NvcGUiLCJjbG9uZUFuZEFubm90YXRlRm4iLCJnZXRDb250cm9sbGVycyIsImVsZW1lbnRDb250cm9sbGVycyIsInJldHJpZXZhbE1ldGhvZCIsIiRzZWFyY2hFbGVtZW50IiwibGlua05vZGUiLCJjb250cm9sbGVyc0JvdW5kVHJhbnNjbHVkZSIsImNsb25lQXR0YWNoRm4iLCJoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSIsInNjb3BlVG9DaGlsZCIsImNvbnRyb2xsZXJEaXJlY3RpdmVzIiwiY29udHJvbGxlckluc3RhbmNlIiwiJHNjb3BlIiwiJGF0dHJzIiwiJHRyYW5zY2x1ZGUiLCJjb250cm9sbGVyQXMiLCJ0ZW1wbGF0ZURpcmVjdGl2ZSIsIiQkb3JpZ2luYWxEaXJlY3RpdmUiLCJpc29sYXRlU2NvcGVDb250cm9sbGVyIiwiaXNvbGF0ZUJpbmRpbmdDb250ZXh0IiwiaWRlbnRpZmllciIsImJpbmRUb0NvbnRyb2xsZXIiLCJsYXN0VmFsdWUiLCJwYXJlbnRHZXQiLCJwYXJlbnRTZXQiLCJjb21wYXJlIiwiJG9ic2VydmUiLCIkJG9ic2VydmVycyIsIiQkc2NvcGUiLCJsaXRlcmFsIiwiYiIsImFzc2lnbiIsInBhcmVudFZhbHVlV2F0Y2giLCJwYXJlbnRWYWx1ZSIsIiRzdGF0ZWZ1bCIsInVud2F0Y2giLCIkd2F0Y2hDb2xsZWN0aW9uIiwiJG9uIiwiaW52b2tlTGlua0ZuIiwidGVtcGxhdGVVcmwiLCJuZXdTY29wZURpcmVjdGl2ZSIsIiR0ZW1wbGF0ZSIsImRpcmVjdGl2ZVZhbHVlIiwidGVybWluYWxQcmlvcml0eSIsIm5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmUiLCJoYXNUcmFuc2NsdWRlRGlyZWN0aXZlIiwiaGFzVGVtcGxhdGUiLCIkY29tcGlsZU5vZGUiLCJyZXBsYWNlRGlyZWN0aXZlIiwiY2hpbGRUcmFuc2NsdWRlRm4iLCIkJHN0YXJ0IiwiJCRlbmQiLCJhc3NlcnROb0R1cGxpY2F0ZSIsIiQkdGxiIiwiY3JlYXRlQ29tbWVudCIsInJlcGxhY2VXaXRoIiwiY29udGVudHMiLCJkZW5vcm1hbGl6ZVRlbXBsYXRlIiwicmVtb3ZlQ29tbWVudHMiLCJ0ZW1wbGF0ZU5hbWVzcGFjZSIsIm5ld1RlbXBsYXRlQXR0cnMiLCJ0ZW1wbGF0ZURpcmVjdGl2ZXMiLCJ1bnByb2Nlc3NlZERpcmVjdGl2ZXMiLCJtYXJrRGlyZWN0aXZlc0FzSXNvbGF0ZSIsIm1lcmdlVGVtcGxhdGVBdHRyaWJ1dGVzIiwiY29tcGlsZVRlbXBsYXRlVXJsIiwiTWF0aCIsIm1heCIsInREaXJlY3RpdmVzIiwic3RhcnRBdHRyTmFtZSIsImVuZEF0dHJOYW1lIiwibXVsdGlFbGVtZW50Iiwic3JjQXR0ciIsImRzdEF0dHIiLCIkc2V0IiwidEF0dHJzIiwiYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4iLCJhZnRlclRlbXBsYXRlQ2hpbGRMaW5rRm4iLCJsaW5rUXVldWUiLCJiZWZvcmVUZW1wbGF0ZUNvbXBpbGVOb2RlIiwib3JpZ0FzeW5jRGlyZWN0aXZlIiwiZGVyaXZlZFN5bmNEaXJlY3RpdmUiLCJnZXRUcnVzdGVkUmVzb3VyY2VVcmwiLCJjb250ZW50IiwidGVtcFRlbXBsYXRlQXR0cnMiLCJiZWZvcmVUZW1wbGF0ZUxpbmtOb2RlIiwibGlua1Jvb3RFbGVtZW50IiwiJCRkZXN0cm95ZWQiLCJvbGRDbGFzc2VzIiwiaWdub3JlQ2hpbGRMaW5rRm4iLCJkaWZmIiwid2hhdCIsInByZXZpb3VzRGlyZWN0aXZlIiwidGV4dCIsImludGVycG9sYXRlRm4iLCJ0ZW1wbGF0ZU5vZGUiLCJ0ZW1wbGF0ZU5vZGVQYXJlbnQiLCJoYXNDb21waWxlUGFyZW50IiwiJCRhZGRCaW5kaW5nQ2xhc3MiLCIkJGFkZEJpbmRpbmdJbmZvIiwiZXhwcmVzc2lvbnMiLCJ3cmFwcGVyIiwiZ2V0VHJ1c3RlZENvbnRleHQiLCJhdHRyTm9ybWFsaXplZE5hbWUiLCJIVE1MIiwiUkVTT1VSQ0VfVVJMIiwiYWxsT3JOb3RoaW5nIiwidHJ1c3RlZENvbnRleHQiLCJuZXdWYWx1ZSIsIiQkaW50ZXIiLCJvbGRWYWx1ZSIsIiR1cGRhdGVDbGFzcyIsImVsZW1lbnRzVG9SZW1vdmUiLCJuZXdOb2RlIiwiZmlyc3RFbGVtZW50VG9SZW1vdmUiLCJyZW1vdmVDb3VudCIsImoyIiwicmVwbGFjZUNoaWxkIiwiZXhwYW5kbyIsImsiLCJrayIsImFubm90YXRpb24iLCJhdHRyaWJ1dGVzVG9Db3B5IiwiJG5vcm1hbGl6ZSIsIiRhZGRDbGFzcyIsImNsYXNzVmFsIiwiJHJlbW92ZUNsYXNzIiwibmV3Q2xhc3NlcyIsInRvQWRkIiwidG9rZW5EaWZmZXJlbmNlIiwidG9SZW1vdmUiLCJ3cml0ZUF0dHIiLCJib29sZWFuS2V5IiwiYWxpYXNlZEtleSIsIm9ic2VydmVyIiwidHJpbW1lZFNyY3NldCIsInNyY1BhdHRlcm4iLCJyYXdVcmlzIiwibmJyVXJpc1dpdGgycGFydHMiLCJmbG9vciIsImlubmVySWR4IiwibGFzdFR1cGxlIiwicmVtb3ZlQXR0ciIsImxpc3RlbmVycyIsInN0YXJ0U3ltYm9sIiwiZW5kU3ltYm9sIiwiYmluZGluZyIsImlzb2xhdGVkIiwibm9UZW1wbGF0ZSIsImRhdGFOYW1lIiwic3RyMSIsInN0cjIiLCJ2YWx1ZXMiLCJ0b2tlbnMxIiwidG9rZW5zMiIsIm91dGVyIiwidG9rZW4iLCJqcU5vZGVzIiwiZ2xvYmFscyIsIkNOVFJMX1JFRyIsInJlZ2lzdGVyIiwiYWxsb3dHbG9iYWxzIiwiYWRkSWRlbnRpZmllciIsImV4cHJlc3Npb24iLCJsYXRlciIsImlkZW50IiwiJGNvbnRyb2xsZXJNaW5FcnIiLCJjb250cm9sbGVyUHJvdG90eXBlIiwiZGVmYXVsdEh0dHBSZXNwb25zZVRyYW5zZm9ybSIsImhlYWRlcnMiLCJ0ZW1wRGF0YSIsIkpTT05fUFJPVEVDVElPTl9QUkVGSVgiLCJjb250ZW50VHlwZSIsIkFQUExJQ0FUSU9OX0pTT04iLCJpc0pzb25MaWtlIiwianNvblN0YXJ0IiwiSlNPTl9TVEFSVCIsIkpTT05fRU5EUyIsInBhcnNlSGVhZGVycyIsImxpbmUiLCJoZWFkZXJzR2V0dGVyIiwiaGVhZGVyc09iaiIsInRyYW5zZm9ybURhdGEiLCJzdGF0dXMiLCJmbnMiLCJpc1N1Y2Nlc3MiLCJkZWZhdWx0cyIsInRyYW5zZm9ybVJlc3BvbnNlIiwidHJhbnNmb3JtUmVxdWVzdCIsImQiLCJjb21tb24iLCJBY2NlcHQiLCJDT05URU5UX1RZUEVfQVBQTElDQVRJT05fSlNPTiIsInBhdGNoIiwieHNyZkNvb2tpZU5hbWUiLCJ4c3JmSGVhZGVyTmFtZSIsInVzZUFwcGx5QXN5bmMiLCJpbnRlcmNlcHRvckZhY3RvcmllcyIsImludGVyY2VwdG9ycyIsInJlcXVlc3RDb25maWciLCJyZXNwb25zZSIsInJlc3AiLCJyZWplY3QiLCJleGVjdXRlSGVhZGVyRm5zIiwiaGVhZGVyQ29udGVudCIsInByb2Nlc3NlZEhlYWRlcnMiLCJoZWFkZXJGbiIsImhlYWRlciIsIm1lcmdlSGVhZGVycyIsImRlZkhlYWRlck5hbWUiLCJsb3dlcmNhc2VEZWZIZWFkZXJOYW1lIiwicmVxSGVhZGVyTmFtZSIsImRlZkhlYWRlcnMiLCJyZXFIZWFkZXJzIiwiZGVmYXVsdEhlYWRlcnNJdGVyYXRpb24iLCJzZXJ2ZXJSZXF1ZXN0IiwicmVxRGF0YSIsIndpdGhDcmVkZW50aWFscyIsInNlbmRSZXEiLCJjaGFpbiIsInByb21pc2UiLCJ3aGVuIiwicmV2ZXJzZWRJbnRlcmNlcHRvcnMiLCJpbnRlcmNlcHRvciIsInJlcXVlc3QiLCJyZXF1ZXN0RXJyb3IiLCJyZXNwb25zZUVycm9yIiwidGhlbkZuIiwicmVqZWN0Rm4iLCJzdWNjZXNzIiwiY3JlYXRlU2hvcnRNZXRob2RzIiwiY3JlYXRlU2hvcnRNZXRob2RzV2l0aERhdGEiLCJkb25lIiwiaGVhZGVyc1N0cmluZyIsInN0YXR1c1RleHQiLCJyZXNvbHZlSHR0cFByb21pc2UiLCJyZXNvbHZlUHJvbWlzZSIsIiRhcHBseUFzeW5jIiwiJCRwaGFzZSIsImRlZmVycmVkIiwicmVzb2x2ZSIsInJlc29sdmVQcm9taXNlV2l0aFJlc3VsdCIsInJlbW92ZVBlbmRpbmdSZXEiLCJwZW5kaW5nUmVxdWVzdHMiLCJjYWNoZWRSZXNwIiwiYnVpbGRVcmwiLCJwYXJhbXMiLCJkZWZhdWx0Q2FjaGUiLCJ4c3JmVmFsdWUiLCJ1cmxJc1NhbWVPcmlnaW4iLCJ0aW1lb3V0IiwicmVzcG9uc2VUeXBlIiwidiIsInRvSVNPU3RyaW5nIiwiaW50ZXJjZXB0b3JGYWN0b3J5IiwiY3JlYXRlWGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJjcmVhdGVIdHRwQmFja2VuZCIsIiRicm93c2VyRGVmZXIiLCJqc29ucFJlcSIsImNhbGxiYWNrSWQiLCJhc3luYyIsImJvZHkiLCJjYWxsZWQiLCJhZGRFdmVudExpc3RlbmVyRm4iLCJ0aW1lb3V0UmVxdWVzdCIsImpzb25wRG9uZSIsInhociIsImFib3J0IiwiY29tcGxldGVSZXF1ZXN0Iiwib3BlbiIsInNldFJlcXVlc3RIZWFkZXIiLCJvbmxvYWQiLCJyZXNwb25zZVRleHQiLCJ1cmxSZXNvbHZlIiwicHJvdG9jb2wiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJvbmVycm9yIiwib25hYm9ydCIsInNlbmQiLCJlc2NhcGUiLCJjaCIsIm11c3RIYXZlRXhwcmVzc2lvbiIsInVuZXNjYXBlVGV4dCIsImVzY2FwZWRTdGFydFJlZ2V4cCIsImVzY2FwZWRFbmRSZWdleHAiLCJwYXJzZVN0cmluZ2lmeUludGVyY2VwdG9yIiwiZ2V0VmFsdWUiLCJuZXdFcnIiLCIkaW50ZXJwb2xhdGVNaW5FcnIiLCJlbmRJbmRleCIsImV4cCIsInBhcnNlRm5zIiwidGV4dExlbmd0aCIsImV4cHJlc3Npb25Qb3NpdGlvbnMiLCJzdGFydFN5bWJvbExlbmd0aCIsImVuZFN5bWJvbExlbmd0aCIsImNvbXB1dGUiLCJnZXRUcnVzdGVkIiwidmFsdWVPZiIsIiQkd2F0Y2hEZWxlZ2F0ZSIsIm9iamVjdEVxdWFsaXR5IiwiJHdhdGNoR3JvdXAiLCJvbGRWYWx1ZXMiLCJjdXJyVmFsdWUiLCJjb3VudCIsImludm9rZUFwcGx5Iiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiaXRlcmF0aW9uIiwic2tpcEFwcGx5IiwiJCRpbnRlcnZhbElkIiwibm90aWZ5IiwiaW50ZXJ2YWxzIiwiTlVNQkVSX0ZPUk1BVFMiLCJERUNJTUFMX1NFUCIsIkdST1VQX1NFUCIsIlBBVFRFUk5TIiwibWluSW50IiwibWluRnJhYyIsIm1heEZyYWMiLCJwb3NQcmUiLCJwb3NTdWYiLCJuZWdQcmUiLCJuZWdTdWYiLCJnU2l6ZSIsImxnU2l6ZSIsIkNVUlJFTkNZX1NZTSIsIkRBVEVUSU1FX0ZPUk1BVFMiLCJNT05USCIsIlNIT1JUTU9OVEgiLCJEQVkiLCJTSE9SVERBWSIsIkFNUE1TIiwibWVkaXVtIiwic2hvcnQiLCJmdWxsRGF0ZSIsImxvbmdEYXRlIiwibWVkaXVtRGF0ZSIsInNob3J0RGF0ZSIsIm1lZGl1bVRpbWUiLCJzaG9ydFRpbWUiLCJwbHVyYWxDYXQiLCJudW0iLCJlbmNvZGVQYXRoIiwic2VnbWVudHMiLCJwYXJzZUFic29sdXRlVXJsIiwiYWJzb2x1dGVVcmwiLCJsb2NhdGlvbk9iaiIsInBhcnNlZFVybCIsIiQkcHJvdG9jb2wiLCIkJGhvc3QiLCJob3N0bmFtZSIsIiQkcG9ydCIsInBvcnQiLCJERUZBVUxUX1BPUlRTIiwicGFyc2VBcHBVcmwiLCJyZWxhdGl2ZVVybCIsInByZWZpeGVkIiwiJCRwYXRoIiwicGF0aG5hbWUiLCIkJHNlYXJjaCIsInNlYXJjaCIsIiQkaGFzaCIsImJlZ2luc1dpdGgiLCJiZWdpbiIsIndob2xlIiwidHJpbUVtcHR5SGFzaCIsInN0cmlwRmlsZSIsImxhc3RJbmRleE9mIiwic2VydmVyQmFzZSIsIkxvY2F0aW9uSHRtbDVVcmwiLCJhcHBCYXNlIiwiYmFzZVByZWZpeCIsIiQkaHRtbDUiLCJhcHBCYXNlTm9GaWxlIiwiJCRwYXJzZSIsInBhdGhVcmwiLCIkbG9jYXRpb25NaW5FcnIiLCIkJGNvbXBvc2UiLCIkJHVybCIsIiQkYWJzVXJsIiwiJCRwYXJzZUxpbmtVcmwiLCJyZWxIcmVmIiwiYXBwVXJsIiwicHJldkFwcFVybCIsInJld3JpdHRlblVybCIsIkxvY2F0aW9uSGFzaGJhbmdVcmwiLCJoYXNoUHJlZml4IiwicmVtb3ZlV2luZG93c0RyaXZlTmFtZSIsImJhc2UiLCJmaXJzdFBhdGhTZWdtZW50TWF0Y2giLCJ3aW5kb3dzRmlsZVBhdGhFeHAiLCJ3aXRob3V0SGFzaFVybCIsIndpdGhvdXRCYXNlVXJsIiwiTG9jYXRpb25IYXNoYmFuZ0luSHRtbDVVcmwiLCJsb2NhdGlvbkdldHRlciIsInByb3BlcnR5IiwibG9jYXRpb25HZXR0ZXJTZXR0ZXIiLCJwcmVwcm9jZXNzIiwiaHRtbDVNb2RlIiwicmVxdWlyZUJhc2UiLCJyZXdyaXRlTGlua3MiLCJzZXRCcm93c2VyVXJsV2l0aEZhbGxiYWNrIiwib2xkVXJsIiwib2xkU3RhdGUiLCIkJHN0YXRlIiwiYWZ0ZXJMb2NhdGlvbkNoYW5nZSIsIiRicm9hZGNhc3QiLCJhYnNVcmwiLCJMb2NhdGlvbk1vZGUiLCJpbml0aWFsVXJsIiwiSUdOT1JFX1VSSV9SRUdFWFAiLCJjdHJsS2V5IiwibWV0YUtleSIsInNoaWZ0S2V5Iiwid2hpY2giLCJidXR0b24iLCJ0YXJnZXQiLCJhYnNIcmVmIiwicHJldmVudERlZmF1bHQiLCJpbml0aWFsaXppbmciLCJuZXdVcmwiLCJuZXdTdGF0ZSIsIiRkaWdlc3QiLCJjdXJyZW50UmVwbGFjZSIsIiQkcmVwbGFjZSIsInVybE9yU3RhdGVDaGFuZ2VkIiwiZGVidWciLCJkZWJ1Z0VuYWJsZWQiLCJmbGFnIiwiZm9ybWF0RXJyb3IiLCJzb3VyY2VVUkwiLCJjb25zb2xlTG9nIiwiY29uc29sZSIsImxvZ0ZuIiwibG9nIiwiaGFzQXBwbHkiLCJhcmcxIiwiYXJnMiIsImVuc3VyZVNhZmVNZW1iZXJOYW1lIiwiZnVsbEV4cHJlc3Npb24iLCIkcGFyc2VNaW5FcnIiLCJlbnN1cmVTYWZlT2JqZWN0IiwiY2hpbGRyZW4iLCJlbnN1cmVTYWZlRnVuY3Rpb24iLCJDQUxMIiwiQVBQTFkiLCJCSU5EIiwiaXNDb25zdGFudCIsInNldHRlciIsInNldFZhbHVlIiwiZnVsbEV4cCIsInByb3BlcnR5T2JqIiwiaXNQb3NzaWJseURhbmdlcm91c01lbWJlck5hbWUiLCJjc3BTYWZlR2V0dGVyRm4iLCJrZXkwIiwia2V5MSIsImtleTIiLCJrZXkzIiwia2V5NCIsImV4cGVuc2l2ZUNoZWNrcyIsImVzbyIsIm8iLCJlc28wIiwiZXNvMSIsImVzbzIiLCJlc28zIiwiZXNvNCIsInBhdGhWYWwiLCJnZXR0ZXJGbldpdGhFbnN1cmVTYWZlT2JqZWN0IiwicyIsImdldHRlckZuIiwiZ2V0dGVyRm5DYWNoZSIsImdldHRlckZuQ2FjaGVFeHBlbnNpdmUiLCJnZXR0ZXJGbkNhY2hlRGVmYXVsdCIsInBhdGhLZXlzIiwicGF0aEtleXNMZW5ndGgiLCJuZWVkc0Vuc3VyZVNhZmVPYmplY3QiLCJsb29rdXBKcyIsImV2YWxlZEZuR2V0dGVyIiwiRnVuY3Rpb24iLCJzaGFyZWRHZXR0ZXIiLCJnZXRWYWx1ZU9mIiwib2JqZWN0VmFsdWVPZiIsImNhY2hlRGVmYXVsdCIsImNhY2hlRXhwZW5zaXZlIiwid3JhcFNoYXJlZEV4cHJlc3Npb24iLCJ3cmFwcGVkIiwiY29sbGVjdEV4cHJlc3Npb25JbnB1dHMiLCJpbnB1dHMiLCJleHByZXNzaW9uSW5wdXREaXJ0eUNoZWNrIiwib2xkVmFsdWVPZlZhbHVlIiwiaW5wdXRzV2F0Y2hEZWxlZ2F0ZSIsInBhcnNlZEV4cHJlc3Npb24iLCJsYXN0UmVzdWx0IiwiaW5wdXRFeHByZXNzaW9ucyIsIiQkaW5wdXRzIiwib2xkSW5wdXRWYWx1ZSIsIm5ld0lucHV0VmFsdWUiLCJvbGRJbnB1dFZhbHVlT2ZWYWx1ZXMiLCJjaGFuZ2VkIiwib25lVGltZVdhdGNoRGVsZWdhdGUiLCJvbGQiLCIkJHBvc3REaWdlc3QiLCJvbmVUaW1lTGl0ZXJhbFdhdGNoRGVsZWdhdGUiLCJpc0FsbERlZmluZWQiLCJhbGxEZWZpbmVkIiwiY29uc3RhbnRXYXRjaERlbGVnYXRlIiwiYWRkSW50ZXJjZXB0b3IiLCJpbnRlcmNlcHRvckZuIiwid2F0Y2hEZWxlZ2F0ZSIsInJlZ3VsYXJXYXRjaCIsIiRwYXJzZU9wdGlvbnMiLCIkcGFyc2VPcHRpb25zRXhwZW5zaXZlIiwib25lVGltZSIsImNhY2hlS2V5IiwicGFyc2VPcHRpb25zIiwibGV4ZXIiLCJMZXhlciIsInBhcnNlciIsIlBhcnNlciIsInFGYWN0b3J5IiwibmV4dFRpY2siLCJleGNlcHRpb25IYW5kbGVyIiwiY2FsbE9uY2UiLCJyZXNvbHZlRm4iLCJQcm9taXNlIiwic2ltcGxlQmluZCIsInByb2Nlc3NRdWV1ZSIsInBlbmRpbmciLCJwcm9jZXNzU2NoZWR1bGVkIiwic2NoZWR1bGVQcm9jZXNzUXVldWUiLCJEZWZlcnJlZCIsInByb21pc2VzIiwiJHFNaW5FcnIiLCJUeXBlRXJyb3IiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJwcm9ncmVzc0JhY2siLCJjYXRjaCIsImZpbmFsbHkiLCJoYW5kbGVDYWxsYmFjayIsIiQkcmVqZWN0IiwiJCRyZXNvbHZlIiwicHJvZ3Jlc3MiLCJtYWtlUHJvbWlzZSIsInJlc29sdmVkIiwiaXNSZXNvbHZlZCIsImNhbGxiYWNrT3V0cHV0IiwiZXJyYmFjayIsIiRRIiwiUSIsInJlc29sdmVyIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwid2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSIsIndlYmtpdENhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSIsInJhZlN1cHBvcnRlZCIsInJhZiIsInRpbWVyIiwiVFRMIiwiJHJvb3RTY29wZU1pbkVyciIsImxhc3REaXJ0eVdhdGNoIiwiYXBwbHlBc3luY0lkIiwiZGlnZXN0VHRsIiwiU2NvcGUiLCIkaWQiLCIkcGFyZW50IiwiJCR3YXRjaGVycyIsIiQkbmV4dFNpYmxpbmciLCIkJHByZXZTaWJsaW5nIiwiJCRjaGlsZEhlYWQiLCIkJGNoaWxkVGFpbCIsIiRyb290IiwiJCRsaXN0ZW5lcnMiLCIkJGxpc3RlbmVyQ291bnQiLCJiZWdpblBoYXNlIiwicGhhc2UiLCJjbGVhclBoYXNlIiwiZGVjcmVtZW50TGlzdGVuZXJDb3VudCIsImN1cnJlbnQiLCJpbml0V2F0Y2hWYWwiLCJmbHVzaEFwcGx5QXN5bmMiLCJhcHBseUFzeW5jUXVldWUiLCJzY2hlZHVsZUFwcGx5QXN5bmMiLCJpc29sYXRlIiwiZGVzdHJveUNoaWxkIiwiY2hpbGQiLCIkJENoaWxkU2NvcGUiLCJ3YXRjaEV4cCIsIndhdGNoZXIiLCJlcSIsIndhdGNoRXhwcmVzc2lvbnMiLCJ3YXRjaEdyb3VwQWN0aW9uIiwiY2hhbmdlUmVhY3Rpb25TY2hlZHVsZWQiLCJmaXJzdFJ1biIsIm5ld1ZhbHVlcyIsImRlcmVnaXN0ZXJGbnMiLCJzaG91bGRDYWxsIiwiZXhwciIsInVud2F0Y2hGbiIsIiR3YXRjaENvbGxlY3Rpb25JbnRlcmNlcHRvciIsIl92YWx1ZSIsIm5ld0xlbmd0aCIsImJvdGhOYU4iLCJuZXdJdGVtIiwib2xkSXRlbSIsImludGVybmFsQXJyYXkiLCJvbGRMZW5ndGgiLCJjaGFuZ2VEZXRlY3RlZCIsImludGVybmFsT2JqZWN0IiwiJHdhdGNoQ29sbGVjdGlvbkFjdGlvbiIsImluaXRSdW4iLCJ2ZXJ5T2xkVmFsdWUiLCJ0cmFja1ZlcnlPbGRWYWx1ZSIsImNoYW5nZURldGVjdG9yIiwid2F0Y2giLCJ3YXRjaGVycyIsImRpcnR5IiwibmV4dCIsImxvZ0lkeCIsImFzeW5jVGFzayIsInR0bCIsIndhdGNoTG9nIiwiYXN5bmNRdWV1ZSIsIiRldmFsIiwidHJhdmVyc2VTY29wZXNMb29wIiwiaXNOYU4iLCJtc2ciLCJwb3N0RGlnZXN0UXVldWUiLCJldmVudE5hbWUiLCIkYXBwbHlBc3luY0V4cHJlc3Npb24iLCJuYW1lZExpc3RlbmVycyIsImluZGV4T2ZMaXN0ZW5lciIsIiRlbWl0IiwidGFyZ2V0U2NvcGUiLCJsaXN0ZW5lckFyZ3MiLCJjdXJyZW50U2NvcGUiLCIkJGFzeW5jUXVldWUiLCIkJHBvc3REaWdlc3RRdWV1ZSIsIiQkYXBwbHlBc3luY1F1ZXVlIiwidXJpIiwiaXNJbWFnZSIsIm5vcm1hbGl6ZWRWYWwiLCJyZWdleCIsImFkanVzdE1hdGNoZXIiLCJtYXRjaGVyIiwiJHNjZU1pbkVyciIsImVzY2FwZUZvclJlZ2V4cCIsImFkanVzdE1hdGNoZXJzIiwibWF0Y2hlcnMiLCJhZGp1c3RlZE1hdGNoZXJzIiwiU0NFX0NPTlRFWFRTIiwicmVzb3VyY2VVcmxXaGl0ZWxpc3QiLCJyZXNvdXJjZVVybEJsYWNrbGlzdCIsIm1hdGNoVXJsIiwiaXNSZXNvdXJjZVVybEFsbG93ZWRCeVBvbGljeSIsImFsbG93ZWQiLCJnZW5lcmF0ZUhvbGRlclR5cGUiLCJCYXNlIiwiaG9sZGVyVHlwZSIsInRydXN0ZWRWYWx1ZSIsIiQkdW53cmFwVHJ1c3RlZFZhbHVlIiwidHJ1c3RBcyIsIkNvbnN0cnVjdG9yIiwiYnlUeXBlIiwibWF5YmVUcnVzdGVkIiwidHJ1c3RlZFZhbHVlSG9sZGVyQmFzZSIsImh0bWxTYW5pdGl6ZXIiLCJDU1MiLCJVUkwiLCJKUyIsIm1zaWUiLCJzY2UiLCJpc0VuYWJsZWQiLCJwYXJzZUFzIiwiZW51bVZhbHVlIiwibE5hbWUiLCJ2ZW5kb3JQcmVmaXgiLCJldmVudFN1cHBvcnQiLCJhbmRyb2lkIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiYm94ZWUiLCJ2ZW5kb3JSZWdleCIsImJvZHlTdHlsZSIsInRyYW5zaXRpb25zIiwiYW5pbWF0aW9ucyIsIndlYmtpdFRyYW5zaXRpb24iLCJ3ZWJraXRBbmltYXRpb24iLCJwdXNoU3RhdGUiLCJoYXNFdmVudCIsImRpdkVsbSIsImhhbmRsZVJlcXVlc3RGbiIsInRwbCIsImlnbm9yZVJlcXVlc3RFcnJvciIsImhhbmRsZUVycm9yIiwidG90YWxQZW5kaW5nUmVxdWVzdHMiLCJ0cmFuc2Zvcm1lciIsImh0dHBPcHRpb25zIiwidGVzdGFiaWxpdHkiLCJmaW5kQmluZGluZ3MiLCJvcHRfZXhhY3RNYXRjaCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJkYXRhQmluZGluZyIsImJpbmRpbmdOYW1lIiwiZmluZE1vZGVscyIsInByZWZpeGVzIiwiYXR0cmlidXRlRXF1YWxzIiwiZ2V0TG9jYXRpb24iLCJzZXRMb2NhdGlvbiIsIndoZW5TdGFibGUiLCJkZWZlcnJlZHMiLCIkJHRpbWVvdXRJZCIsInVybFBhcnNpbmdOb2RlIiwicmVxdWVzdFVybCIsIm9yaWdpblVybCIsImZpbHRlcnMiLCJzdWZmaXgiLCJjdXJyZW5jeUZpbHRlciIsImRhdGVGaWx0ZXIiLCJmaWx0ZXJGaWx0ZXIiLCJqc29uRmlsdGVyIiwibGltaXRUb0ZpbHRlciIsImxvd2VyY2FzZUZpbHRlciIsIm51bWJlckZpbHRlciIsIm9yZGVyQnlGaWx0ZXIiLCJ1cHBlcmNhc2VGaWx0ZXIiLCJjb21wYXJhdG9yIiwicHJlZGljYXRlRm4iLCJtYXRjaEFnYWluc3RBbnlQcm9wIiwiY3JlYXRlUHJlZGljYXRlRm4iLCJzaG91bGRNYXRjaFByaW1pdGl2ZXMiLCJhY3R1YWwiLCJleHBlY3RlZCIsIml0ZW0iLCJkZWVwQ29tcGFyZSIsImRvbnRNYXRjaFdob2xlT2JqZWN0IiwiYWN0dWFsVHlwZSIsImV4cGVjdGVkVHlwZSIsImV4cGVjdGVkVmFsIiwibWF0Y2hBbnlQcm9wZXJ0eSIsImFjdHVhbFZhbCIsIiRsb2NhbGUiLCJmb3JtYXRzIiwiYW1vdW50IiwiY3VycmVuY3lTeW1ib2wiLCJmcmFjdGlvblNpemUiLCJmb3JtYXROdW1iZXIiLCJudW1iZXIiLCJncm91cFNlcCIsImRlY2ltYWxTZXAiLCJpc0Zpbml0ZSIsImlzTmVnYXRpdmUiLCJhYnMiLCJudW1TdHIiLCJmb3JtYXRlZFRleHQiLCJoYXNFeHBvbmVudCIsInRvRml4ZWQiLCJwYXJzZUZsb2F0IiwiZnJhY3Rpb25MZW4iLCJtaW4iLCJyb3VuZCIsImZyYWN0aW9uIiwibGdyb3VwIiwiZ3JvdXAiLCJwYWROdW1iZXIiLCJkaWdpdHMiLCJuZWciLCJkYXRlR2V0dGVyIiwiZGF0ZSIsImRhdGVTdHJHZXR0ZXIiLCJzaG9ydEZvcm0iLCJ0aW1lWm9uZUdldHRlciIsInpvbmUiLCJnZXRUaW1lem9uZU9mZnNldCIsInBhZGRlZFpvbmUiLCJnZXRGaXJzdFRodXJzZGF5T2ZZZWFyIiwieWVhciIsImRheU9mV2Vla09uRmlyc3QiLCJnZXREYXkiLCJnZXRUaHVyc2RheVRoaXNXZWVrIiwiZGF0ZXRpbWUiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsIndlZWtHZXR0ZXIiLCJmaXJzdFRodXJzIiwidGhpc1RodXJzIiwiYW1wbUdldHRlciIsImdldEhvdXJzIiwianNvblN0cmluZ1RvRGF0ZSIsInN0cmluZyIsIlJfSVNPODYwMV9TVFIiLCJ0ekhvdXIiLCJ0ek1pbiIsImRhdGVTZXR0ZXIiLCJzZXRVVENGdWxsWWVhciIsInNldEZ1bGxZZWFyIiwidGltZVNldHRlciIsInNldFVUQ0hvdXJzIiwic2V0SG91cnMiLCJtIiwibXMiLCJmb3JtYXQiLCJ0aW1lem9uZSIsIk5VTUJFUl9TVFJJTkciLCJEQVRFX0ZPUk1BVFNfU1BMSVQiLCJzZXRNaW51dGVzIiwiZ2V0TWludXRlcyIsIkRBVEVfRk9STUFUUyIsIm9iamVjdCIsInNwYWNpbmciLCJsaW1pdCIsIkluZmluaXR5Iiwic29ydFByZWRpY2F0ZSIsInJldmVyc2VPcmRlciIsImNvbXAiLCJyZXZlcnNlQ29tcGFyYXRvciIsImRlc2NlbmRpbmciLCJvYmplY3RUb1N0cmluZyIsInYxIiwidjIiLCJtYXAiLCJwcmVkaWNhdGUiLCJuZ0RpcmVjdGl2ZSIsIm51bGxGb3JtUmVuYW1lQ29udHJvbCIsImNvbnRyb2wiLCIkbmFtZSIsIkZvcm1Db250cm9sbGVyIiwiY29udHJvbHMiLCJwYXJlbnRGb3JtIiwiJCRwYXJlbnRGb3JtIiwibnVsbEZvcm1DdHJsIiwiJGVycm9yIiwiJCRzdWNjZXNzIiwiJHBlbmRpbmciLCIkZGlydHkiLCIkcHJpc3RpbmUiLCIkdmFsaWQiLCIkaW52YWxpZCIsIiRzdWJtaXR0ZWQiLCIkYWRkQ29udHJvbCIsIiRyb2xsYmFja1ZpZXdWYWx1ZSIsIiRjb21taXRWaWV3VmFsdWUiLCIkJHJlbmFtZUNvbnRyb2wiLCJuZXdOYW1lIiwib2xkTmFtZSIsIiRyZW1vdmVDb250cm9sIiwiJHNldFZhbGlkaXR5IiwiYWRkU2V0VmFsaWRpdHlNZXRob2QiLCJjdHJsIiwic2V0IiwidW5zZXQiLCIkc2V0RGlydHkiLCJQUklTVElORV9DTEFTUyIsIkRJUlRZX0NMQVNTIiwiJHNldFByaXN0aW5lIiwic2V0Q2xhc3MiLCJTVUJNSVRURURfQ0xBU1MiLCIkc2V0VW50b3VjaGVkIiwiJHNldFN1Ym1pdHRlZCIsInN0cmluZ0Jhc2VkSW5wdXRUeXBlIiwiJGZvcm1hdHRlcnMiLCIkaXNFbXB0eSIsInRleHRJbnB1dFR5cGUiLCJiYXNlSW5wdXRUeXBlIiwiY29tcG9zaW5nIiwiZXYiLCJuZ1RyaW0iLCIkdmlld1ZhbHVlIiwiJCRoYXNOYXRpdmVWYWxpZGF0b3JzIiwiJHNldFZpZXdWYWx1ZSIsImRlZmVyTGlzdGVuZXIiLCJvcmlnVmFsdWUiLCJrZXlDb2RlIiwiJHJlbmRlciIsIndlZWtQYXJzZXIiLCJpc29XZWVrIiwiZXhpc3RpbmdEYXRlIiwiV0VFS19SRUdFWFAiLCJ3ZWVrIiwiaG91cnMiLCJtaW51dGVzIiwic2Vjb25kcyIsIm1pbGxpc2Vjb25kcyIsImFkZERheXMiLCJnZXRTZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwiTmFOIiwiY3JlYXRlRGF0ZVBhcnNlciIsIm1hcHBpbmciLCJpc28iLCJJU09fREFURV9SRUdFWFAiLCJ5eXl5IiwiTU0iLCJkZCIsIkhIIiwibW0iLCJzcyIsInNzcyIsInBhcnQiLCJjcmVhdGVEYXRlSW5wdXRUeXBlIiwicGFyc2VEYXRlIiwiaXNWYWxpZERhdGUiLCJwYXJzZU9ic2VydmVkRGF0ZVZhbHVlIiwiYmFkSW5wdXRDaGVja2VyIiwicHJldmlvdXNEYXRlIiwiJG9wdGlvbnMiLCIkJHBhcnNlck5hbWUiLCIkcGFyc2VycyIsInBhcnNlZERhdGUiLCIkbmdNb2RlbE1pbkVyciIsInRpbWV6b25lT2Zmc2V0IiwibmdNaW4iLCJtaW5WYWwiLCIkdmFsaWRhdG9ycyIsIiR2YWxpZGF0ZSIsIm5nTWF4IiwibWF4VmFsIiwibmF0aXZlVmFsaWRhdGlvbiIsInZhbGlkaXR5IiwiVkFMSURJVFlfU1RBVEVfUFJPUEVSVFkiLCJiYWRJbnB1dCIsInR5cGVNaXNtYXRjaCIsIm51bWJlcklucHV0VHlwZSIsIk5VTUJFUl9SRUdFWFAiLCJ1cmxJbnB1dFR5cGUiLCJtb2RlbFZhbHVlIiwidmlld1ZhbHVlIiwiVVJMX1JFR0VYUCIsImVtYWlsSW5wdXRUeXBlIiwiZW1haWwiLCJFTUFJTF9SRUdFWFAiLCJyYWRpb0lucHV0VHlwZSIsImNoZWNrZWQiLCJwYXJzZUNvbnN0YW50RXhwciIsImZhbGxiYWNrIiwicGFyc2VGbiIsImNoZWNrYm94SW5wdXRUeXBlIiwidHJ1ZVZhbHVlIiwibmdUcnVlVmFsdWUiLCJmYWxzZVZhbHVlIiwibmdGYWxzZVZhbHVlIiwiY2xhc3NEaXJlY3RpdmUiLCJhcnJheURpZmZlcmVuY2UiLCJhcnJheUNsYXNzZXMiLCJhZGRDbGFzc2VzIiwiZGlnZXN0Q2xhc3NDb3VudHMiLCJyZW1vdmVDbGFzc2VzIiwiY2xhc3NDb3VudHMiLCJjbGFzc2VzVG9VcGRhdGUiLCJ1cGRhdGVDbGFzc2VzIiwibmdDbGFzc1dhdGNoQWN0aW9uIiwiJGluZGV4Iiwib2xkJGluZGV4IiwibW9kIiwic2V0VmFsaWRpdHkiLCJ2YWxpZGF0aW9uRXJyb3JLZXkiLCJjcmVhdGVBbmRTZXQiLCJ1bnNldEFuZENsZWFudXAiLCJjYWNoZWRUb2dnbGVDbGFzcyIsIlBFTkRJTkdfQ0xBU1MiLCJ0b2dnbGVWYWxpZGF0aW9uQ3NzIiwiaXNPYmplY3RFbXB0eSIsImNvbWJpbmVkU3RhdGUiLCJzd2l0Y2hWYWx1ZSIsImNsYXNzQ2FjaGUiLCJpc1ZhbGlkIiwiVkFMSURfQ0xBU1MiLCJJTlZBTElEX0NMQVNTIiwiUkVHRVhfU1RSSU5HX1JFR0VYUCIsIm1hbnVhbExvd2VyY2FzZSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImNoYXJDb2RlQXQiLCJtYW51YWxVcHBlcmNhc2UiLCJkb2N1bWVudE1vZGUiLCJpc0FjdGl2ZV8iLCJhY3RpdmUiLCJmdWxsIiwibWFqb3IiLCJtaW5vciIsImRvdCIsImNvZGVOYW1lIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJNT1VTRV9FVkVOVF9NQVAiLCJtb3VzZWxlYXZlIiwibW91c2VlbnRlciIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIm9wdGdyb3VwIiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwicmVhZHkiLCJ0cmlnZ2VyIiwiZmlyZWQiLCJyZW1vdmVEYXRhIiwicmVtb3ZlQXR0cmlidXRlIiwiY3NzIiwibG93ZXJjYXNlZE5hbWUiLCJnZXROYW1lZEl0ZW0iLCJzcGVjaWZpZWQiLCJyZXQiLCJnZXRUZXh0IiwiJGR2IiwibXVsdGlwbGUiLCJzZWxlY3RlZCIsIm5vZGVDb3VudCIsImpxTGl0ZU9uIiwidHlwZXMiLCJyZWxhdGVkIiwicmVsYXRlZFRhcmdldCIsImNvbnRhaW5zIiwib2ZmIiwib25lIiwib25GbiIsInJlcGxhY2VOb2RlIiwiaW5zZXJ0QmVmb3JlIiwiY29udGVudERvY3VtZW50IiwicHJlcGVuZCIsIndyYXBOb2RlIiwiZGV0YWNoIiwiYWZ0ZXIiLCJuZXdFbGVtZW50IiwidG9nZ2xlQ2xhc3MiLCJjb25kaXRpb24iLCJjbGFzc0NvbmRpdGlvbiIsIm5leHRFbGVtZW50U2libGluZyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZXh0cmFQYXJhbWV0ZXJzIiwiZHVtbXlFdmVudCIsImV2ZW50Rm5zQ29weSIsImhhbmRsZXJBcmdzIiwiYXJnMyIsInVuYmluZCIsIiRhbmltYXRlTWluRXJyIiwiJCRzZWxlY3RvcnMiLCJjbGFzc05hbWVGaWx0ZXIiLCIkJGNsYXNzTmFtZUZpbHRlciIsInJ1bkFuaW1hdGlvblBvc3REaWdlc3QiLCJjYW5jZWxGbiIsIiQkY2FuY2VsRm4iLCJyZXNvbHZlRWxlbWVudENsYXNzZXMiLCJoYXNDbGFzc2VzIiwiY2FjaGVkQ2xhc3NNYW5pcHVsYXRpb24iLCJvcCIsImFzeW5jUHJvbWlzZSIsImN1cnJlbnREZWZlciIsImFwcGx5U3R5bGVzIiwic3R5bGVzIiwiZnJvbSIsInRvIiwiYW5pbWF0ZSIsImVudGVyIiwibGVhdmUiLCJtb3ZlIiwiJCRhZGRDbGFzc0ltbWVkaWF0ZWx5IiwiJCRyZW1vdmVDbGFzc0ltbWVkaWF0ZWx5IiwiU1RPUkFHRV9LRVkiLCJjcmVhdGVkQ2FjaGUiLCIkJHNldENsYXNzSW1tZWRpYXRlbHkiLCJDb250ZW50LVR5cGUiLCJbIiwieyIsIlBBVEhfTUFUQ0giLCJodHRwIiwiaHR0cHMiLCJmdHAiLCJsb2NhdGlvblByb3RvdHlwZSIsInBhcmFtVmFsdWUiLCJMb2NhdGlvbiIsIkNPTlNUQU5UUyIsIm51bGwiLCJ0cnVlIiwiZmFsc2UiLCJjb25zdGFudEdldHRlciIsIk9QRVJBVE9SUyIsIisiLCItIiwiKiIsIi8iLCIlIiwiPT09IiwiIT09IiwiPT0iLCIhPSIsIjwiLCI+IiwiPD0iLCI+PSIsIiYmIiwifHwiLCIhIiwiPSIsInwiLCJFU0NBUEUiLCJmIiwiciIsInQiLCInIiwiXCIiLCJsZXgiLCJ0b2tlbnMiLCJyZWFkU3RyaW5nIiwicGVlayIsInJlYWROdW1iZXIiLCJpc0lkZW50IiwicmVhZElkZW50IiwiaXMiLCJpc1doaXRlc3BhY2UiLCJjaDIiLCJjaDMiLCJvcDEiLCJvcDIiLCJvcDMiLCJvcGVyYXRvciIsInRocm93RXJyb3IiLCJjaGFycyIsImlzRXhwT3BlcmF0b3IiLCJzdGFydCIsImVuZCIsImNvbFN0ciIsInBlZWtDaCIsInF1b3RlIiwicmF3U3RyaW5nIiwiaGV4IiwicmVwIiwiWkVSTyIsInN0YXRlbWVudHMiLCJwcmltYXJ5IiwiZXhwZWN0IiwiZmlsdGVyQ2hhaW4iLCJjb25zdW1lIiwiYXJyYXlEZWNsYXJhdGlvbiIsImZ1bmN0aW9uQ2FsbCIsIm9iamVjdEluZGV4IiwiZmllbGRBY2Nlc3MiLCJwZWVrVG9rZW4iLCJlMSIsImUyIiwiZTMiLCJlNCIsInBlZWtBaGVhZCIsInVuYXJ5Rm4iLCJyaWdodCIsImJpbmFyeUZuIiwibGVmdCIsImlzQnJhbmNoaW5nIiwiaW5wdXRGbiIsImFyZ3NGbiIsImV2ZXJ5IiwiYXNzaWdubWVudCIsInRlcm5hcnkiLCJtaWRkbGUiLCJsb2dpY2FsT1IiLCJsb2dpY2FsQU5EIiwiZXF1YWxpdHkiLCJyZWxhdGlvbmFsIiwiYWRkaXRpdmUiLCJtdWx0aXBsaWNhdGl2ZSIsInVuYXJ5IiwiaW5kZXhGbiIsImZuR2V0dGVyIiwiY29udGV4dEdldHRlciIsImV4cHJlc3Npb25UZXh0IiwiZWxlbWVudEZucyIsInZhbHVlRm5zIiwieXkiLCJ5IiwiTU1NTSIsIk1NTSIsIk0iLCJIIiwiaGgiLCJFRUVFIiwiRUVFIiwiWiIsInd3IiwidyIsInhsaW5rSHJlZiIsInByb3BOYW1lIiwibm9ybWFsaXplZCIsImh0bWxBdHRyIiwiZm9ybURpcmVjdGl2ZUZhY3RvcnkiLCJpc05nRm9ybSIsImZvcm1FbGVtZW50IiwiaGFuZGxlRm9ybVN1Ym1pc3Npb24iLCJwYXJlbnRGb3JtQ3RybCIsImFsaWFzIiwiREFURV9SRUdFWFAiLCJEQVRFVElNRUxPQ0FMX1JFR0VYUCIsIk1PTlRIX1JFR0VYUCIsIlRJTUVfUkVHRVhQIiwiaW5wdXRUeXBlIiwiZGF0ZXRpbWUtbG9jYWwiLCJ0aW1lIiwibW9udGgiLCJyYWRpbyIsImNoZWNrYm94IiwiaGlkZGVuIiwic3VibWl0IiwicmVzZXQiLCJmaWxlIiwiY3RybHMiLCJDT05TVEFOVF9WQUxVRV9SRUdFWFAiLCJ0cGxBdHRyIiwiJGNvbXBpbGUiLCJ0ZW1wbGF0ZUVsZW1lbnQiLCJ0RWxlbWVudCIsIm5nQmluZEh0bWxHZXR0ZXIiLCJuZ0JpbmRIdG1sV2F0Y2giLCJnZXRUcnVzdGVkSHRtbCIsIiR2aWV3Q2hhbmdlTGlzdGVuZXJzIiwiZm9yY2VBc3luY0V2ZW50cyIsImJsdXIiLCJmb2N1cyIsIiRldmVudCIsInByZXZpb3VzRWxlbWVudHMiLCJuZXdTY29wZSIsInNyY0V4cCIsIm9ubG9hZEV4cCIsImF1dG9TY3JvbGxFeHAiLCJhdXRvc2Nyb2xsIiwicHJldmlvdXNFbGVtZW50IiwiY3VycmVudEVsZW1lbnQiLCJjaGFuZ2VDb3VudGVyIiwiY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCIsInBhcnNlQXNSZXNvdXJjZVVybCIsImFmdGVyQW5pbWF0aW9uIiwidGhpc0NoYW5nZUlkIiwidHJpbVZhbHVlcyIsIlVOVE9VQ0hFRF9DTEFTUyIsIlRPVUNIRURfQ0xBU1MiLCJOZ01vZGVsQ29udHJvbGxlciIsIiRtb2RlbFZhbHVlIiwiJCRyYXdNb2RlbFZhbHVlIiwiJGFzeW5jVmFsaWRhdG9ycyIsIiR1bnRvdWNoZWQiLCIkdG91Y2hlZCIsInBhcnNlZE5nTW9kZWwiLCJwYXJzZWROZ01vZGVsQXNzaWduIiwibmdNb2RlbEdldCIsIm5nTW9kZWxTZXQiLCJwZW5kaW5nRGVib3VuY2UiLCIkJHNldE9wdGlvbnMiLCJnZXR0ZXJTZXR0ZXIiLCJpbnZva2VNb2RlbEdldHRlciIsImludm9rZU1vZGVsU2V0dGVyIiwiJCQkcCIsImN1cnJlbnRWYWxpZGF0aW9uUnVuSWQiLCIkc2V0VG91Y2hlZCIsIiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZSIsInBhcnNlck5hbWUiLCJwYXJzZXJWYWxpZCIsInByZXZWYWxpZCIsInByZXZNb2RlbFZhbHVlIiwiYWxsb3dJbnZhbGlkIiwiJCRydW5WYWxpZGF0b3JzIiwiYWxsVmFsaWQiLCIkJHdyaXRlTW9kZWxUb1Njb3BlIiwicGFyc2VWYWxpZCIsImRvbmVDYWxsYmFjayIsInByb2Nlc3NQYXJzZUVycm9ycyIsImVycm9yS2V5IiwicHJvY2Vzc1N5bmNWYWxpZGF0b3JzIiwic3luY1ZhbGlkYXRvcnNWYWxpZCIsInZhbGlkYXRvciIsInByb2Nlc3NBc3luY1ZhbGlkYXRvcnMiLCJ2YWxpZGF0b3JQcm9taXNlcyIsInZhbGlkYXRpb25Eb25lIiwibG9jYWxWYWxpZGF0aW9uUnVuSWQiLCIkJHBhcnNlQW5kVmFsaWRhdGUiLCJ3cml0ZVRvTW9kZWxJZk5lZWRlZCIsInVwZGF0ZU9uRGVmYXVsdCIsIiQkZGVib3VuY2VWaWV3VmFsdWVDb21taXQiLCJkZWJvdW5jZSIsImRlYm91bmNlRGVsYXkiLCJmb3JtYXR0ZXJzIiwibW9kZWxDdHJsIiwiZm9ybUN0cmwiLCJ1cGRhdGVPbiIsIkRFRkFVTFRfUkVHRVhQIiwidGhhdCIsIkJSQUNFIiwiSVNfV0hFTiIsInVwZGF0ZUVsZW1lbnRUZXh0IiwibmV3VGV4dCIsImxhc3RDb3VudCIsIm51bWJlckV4cCIsIndoZW5FeHAiLCJ3aGVucyIsIndoZW5zRXhwRm5zIiwiYnJhY2VSZXBsYWNlbWVudCIsIndhdGNoUmVtb3ZlciIsImF0dHJpYnV0ZU5hbWUiLCJ0bXBNYXRjaCIsIndoZW5LZXkiLCJjb3VudElzTmFOIiwiTkdfUkVNT1ZFRCIsIm5nUmVwZWF0TWluRXJyIiwidXBkYXRlU2NvcGUiLCJ2YWx1ZUlkZW50aWZpZXIiLCJrZXlJZGVudGlmaWVyIiwiYXJyYXlMZW5ndGgiLCIkZmlyc3QiLCIkbGFzdCIsIiRtaWRkbGUiLCIkb2RkIiwiJGV2ZW4iLCJnZXRCbG9ja1N0YXJ0IiwiZ2V0QmxvY2tFbmQiLCJuZ1JlcGVhdEVuZENvbW1lbnQiLCJsaHMiLCJyaHMiLCJhbGlhc0FzIiwidHJhY2tCeUV4cCIsInRyYWNrQnlFeHBHZXR0ZXIiLCJ0cmFja0J5SWRFeHBGbiIsInRyYWNrQnlJZEFycmF5Rm4iLCJ0cmFja0J5SWRPYmpGbiIsImhhc2hGbkxvY2FscyIsImxhc3RCbG9ja01hcCIsIm5leHROb2RlIiwiY29sbGVjdGlvbkxlbmd0aCIsInRyYWNrQnlJZCIsInRyYWNrQnlJZEZuIiwiY29sbGVjdGlvbktleXMiLCJuZXh0QmxvY2tPcmRlciIsInByZXZpb3VzTm9kZSIsIm5leHRCbG9ja01hcCIsIml0ZW1LZXkiLCJibG9ja0tleSIsIk5HX0hJREVfQ0xBU1MiLCJOR19ISURFX0lOX1BST0dSRVNTX0NMQVNTIiwidGVtcENsYXNzZXMiLCJuZXdTdHlsZXMiLCJvbGRTdHlsZXMiLCJjYXNlcyIsIm5nU3dpdGNoQ29udHJvbGxlciIsIndhdGNoRXhwciIsInNlbGVjdGVkVHJhbnNjbHVkZXMiLCJzZWxlY3RlZEVsZW1lbnRzIiwicHJldmlvdXNMZWF2ZUFuaW1hdGlvbnMiLCJzZWxlY3RlZFNjb3BlcyIsInNwbGljZUZhY3RvcnkiLCJzZWxlY3RlZFRyYW5zY2x1ZGUiLCJjYXNlRWxlbWVudCIsInNlbGVjdGVkU2NvcGUiLCJhbmNob3IiLCJuZ09wdGlvbnNNaW5FcnIiLCJOR19PUFRJT05TX1JFR0VYUCIsIm51bGxNb2RlbEN0cmwiLCJudWxsT3B0aW9uIiwidW5rbm93bk9wdGlvbiIsIm9wdGlvbnNNYXAiLCJuZ01vZGVsQ3RybCIsImRhdGFib3VuZCIsImluaXQiLCJuZ01vZGVsQ3RybF8iLCJudWxsT3B0aW9uXyIsInVua25vd25PcHRpb25fIiwiYWRkT3B0aW9uIiwicmVtb3ZlT3B0aW9uIiwiaGFzT3B0aW9uIiwicmVuZGVyVW5rbm93bk9wdGlvbiIsInVua25vd25WYWwiLCJzZXR1cEFzU2luZ2xlIiwic2VsZWN0RWxlbWVudCIsInNlbGVjdEN0cmwiLCJlbXB0eU9wdGlvbiIsInNldHVwQXNNdWx0aXBsZSIsImxhc3RWaWV3Iiwic2V0dXBBc09wdGlvbnMiLCJjYWxsRXhwcmVzc2lvbiIsImV4cHJGbiIsInZhbHVlTmFtZSIsImtleU5hbWUiLCJzZWxlY3Rpb25DaGFuZ2VkIiwidmFsdWVzRm4iLCJzZWxlY3RlZEtleSIsInRyYWNrRm4iLCJ0cmFja0tleXNDYWNoZSIsImdldFZpZXdWYWx1ZSIsInJlbmRlciIsInZpZXdWYWx1ZUZuIiwic2VsZWN0QXNGbiIsImdldExhYmVscyIsInRvRGlzcGxheSIsImRpc3BsYXlGbiIsImNyZWF0ZUlzU2VsZWN0ZWRGbiIsInNlbGVjdGVkU2V0IiwidHJhY2tJbmRleCIsImNvbXBhcmVWYWx1ZUZuIiwic2NoZWR1bGVSZW5kZXJpbmciLCJyZW5kZXJTY2hlZHVsZWQiLCJ1cGRhdGVMYWJlbE1hcCIsImxhYmVsTWFwIiwibGFiZWwiLCJhZGRlZCIsIm9wdGlvbkdyb3VwTmFtZSIsIm9wdGlvbkdyb3VwIiwiZXhpc3RpbmdQYXJlbnQiLCJleGlzdGluZ09wdGlvbnMiLCJleGlzdGluZ09wdGlvbiIsImdyb3VwTGVuZ3RoIiwiZ3JvdXBJbmRleCIsImxhc3RFbGVtZW50Iiwib3B0aW9uSWQiLCJvcHRpb25Hcm91cHMiLCJvcHRpb25Hcm91cE5hbWVzIiwiaXNTZWxlY3RlZCIsImFueVNlbGVjdGVkIiwiZ3JvdXBCeUZuIiwib3B0aW9uR3JvdXBzQ2FjaGUiLCJvcHRHcm91cFRlbXBsYXRlIiwib3B0aW9uVGVtcGxhdGUiLCJvcHRpb25zRXhwIiwic2VsZWN0QXMiLCJ0cmFjayIsIm51bGxTZWxlY3RDdHJsIiwic2VsZWN0Q3RybE5hbWUiLCJwYXR0ZXJuRXhwIiwiaW50VmFsIiwiZXhwb3J0cyIsIm1lcmdlIiwiYW5jZXN0b3JzIiwiZmlyc3QiLCJzZWNvbmQiLCJvYmplY3RLZXlzIiwiY2VpbCIsImluaGVyaXRQYXJhbXMiLCJjdXJyZW50UGFyYW1zIiwibmV3UGFyYW1zIiwiJGN1cnJlbnQiLCIkdG8iLCJwYXJlbnRQYXJhbXMiLCJwYXJlbnRzIiwiaW5oZXJpdGVkIiwiaW5oZXJpdExpc3QiLCJlcXVhbEZvcktleXMiLCJmaWx0ZXJCeUtleXMiLCJmaWx0ZXJlZCIsIm9taXQiLCIkUmVzb2x2ZSIsIlZJU0lUX0lOX1BST0dSRVNTIiwiVklTSVRfRE9ORSIsIk5PVEhJTkciLCJOT19ERVBFTkRFTkNJRVMiLCJOT19MT0NBTFMiLCJOT19QQVJFTlQiLCIkJHByb21pc2VzIiwiJCR2YWx1ZXMiLCJzdHVkeSIsImludm9jYWJsZXMiLCJ2aXNpdCIsInZpc2l0ZWQiLCJjeWNsZSIsInBsYW4iLCJwYXJhbSIsImlzUmVzb2x2ZSIsImludm9jYWJsZUtleXMiLCJ3YWl0IiwibWVyZ2VkIiwiJCRpbmhlcml0ZWRWYWx1ZXMiLCJyZXNvbHV0aW9uIiwiZmFpbCIsIiQkZmFpbHVyZSIsImludm9jYWJsZSIsIm9uZmFpbHVyZSIsImludm9jYXRpb24iLCJwcm9jZWVkIiwid2FpdFBhcmFtcyIsImRlcCIsIiRUZW1wbGF0ZUZhY3RvcnkiLCJmcm9tQ29uZmlnIiwiZnJvbVN0cmluZyIsImZyb21VcmwiLCJ0ZW1wbGF0ZVByb3ZpZGVyIiwiZnJvbVByb3ZpZGVyIiwiVXJsTWF0Y2hlciIsInBhcmVudE1hdGNoZXIiLCJhZGRQYXJhbWV0ZXIiLCJwYXJhbU5hbWVzIiwiJCRVTUZQIiwiUGFyYW0iLCJxdW90ZVJlZ0V4cCIsInNxdWFzaCIsInN1cnJvdW5kUGF0dGVybiIsIm1hdGNoRGV0YWlscyIsImlzU2VhcmNoIiwic2VnbWVudCIsImNmZyIsInBsYWNlaG9sZGVyIiwic2VhcmNoUGxhY2Vob2xkZXIiLCJjb21waWxlZCIsIiQkbmV3IiwiUGFyYW1TZXQiLCJzb3VyY2VTZWFyY2giLCJzb3VyY2VQYXRoIiwic3RyaWN0IiwiY2FzZUluc2Vuc2l0aXZlIiwiJCRwYXJhbU5hbWVzIiwiJFVybE1hdGNoZXJGYWN0b3J5IiwidmFsVG9TdHJpbmciLCJ2YWxGcm9tU3RyaW5nIiwicmVnZXhwTWF0Y2hlcyIsImdldERlZmF1bHRDb25maWciLCJpc1N0cmljdE1vZGUiLCJpc0Nhc2VJbnNlbnNpdGl2ZSIsImlzSW5qZWN0YWJsZSIsImZsdXNoVHlwZVF1ZXVlIiwidHlwZVF1ZXVlIiwiJHR5cGVzIiwiZGVmIiwiZGVmYXVsdFNxdWFzaFBvbGljeSIsImVucXVldWUiLCJkZWZhdWx0VHlwZXMiLCJlbmNvZGUiLCJkZWNvZGUiLCJib29sIiwiY2FwdHVyZSIsImFueSIsIiQkZ2V0RGVmYXVsdFZhbHVlIiwic3RyaWN0TW9kZSIsImlzTWF0Y2hlciIsImRlZmluaXRpb25GbiIsInVud3JhcFNob3J0aGFuZCIsImlzU2hvcnRoYW5kIiwiJCRmbiIsImdldFR5cGUiLCJ1cmxUeXBlIiwiZ2V0QXJyYXlNb2RlIiwiYXJyYXlEZWZhdWx0cyIsImFycmF5UGFyYW1Ob21lbmNsYXR1cmUiLCJnZXRTcXVhc2hQb2xpY3kiLCJpc09wdGlvbmFsIiwiZ2V0UmVwbGFjZSIsImFycmF5TW9kZSIsImNvbmZpZ3VyZWRLZXlzIiwiZGVmYXVsdFBvbGljeSIsIiR2YWx1ZSIsImhhc1JlcGxhY2VWYWwiLCIkcmVwbGFjZSIsInJlcGxhY2VtZW50IiwiJGFzQXJyYXkiLCJkeW5hbWljIiwiJCRwYXJlbnQiLCIkJGtleXMiLCJpZ25vcmUiLCJyZXZlcnNlIiwicGFyYW1zZXQiLCJwYXJhbVZhbHVlcyIsIiQkZXF1YWxzIiwicGFyYW1WYWx1ZXMxIiwicGFyYW1WYWx1ZXMyIiwiZXF1YWwiLCIkJHZhbGlkYXRlcyIsIiRVcmxSb3V0ZXJQcm92aWRlciIsIiRsb2NhdGlvblByb3ZpZGVyIiwiJHVybE1hdGNoZXJGYWN0b3J5IiwicmVnRXhwUHJlZml4IiwicmUiLCJpbnRlcnBvbGF0ZSIsImhhbmRsZUlmTWF0Y2giLCJoYW5kbGVyIiwiJG1hdGNoIiwiYXBwZW5kQmFzZVBhdGgiLCJpc0h0bWw1IiwiYWJzb2x1dGUiLCJ1cGRhdGUiLCJldnQiLCJydWxlIiwiaGFuZGxlZCIsImlnbm9yZVVwZGF0ZSIsImxhc3RQdXNoZWRVcmwiLCJydWxlcyIsIm90aGVyd2lzZSIsImxpc3RlbiIsImludGVyY2VwdERlZmVycmVkIiwic3luYyIsInJlYWQiLCJ1cmxNYXRjaGVyIiwiJCRhdm9pZFJlc3luYyIsInZhbGlkYXRlcyIsInNsYXNoIiwicmVkaXJlY3QiLCJoYW5kbGVySXNTdHJpbmciLCJzdHJhdGVnaWVzIiwiZ2xvYmFsIiwic3RpY2t5IiwiZGVmZXJJbnRlcmNlcHQiLCIkU3RhdGVQcm92aWRlciIsIiR1cmxSb3V0ZXJQcm92aWRlciIsImlzUmVsYXRpdmUiLCJzdGF0ZU5hbWUiLCJmaW5kU3RhdGUiLCJzdGF0ZU9yTmFtZSIsImlzU3RyIiwicmVsIiwicGF0aExlbmd0aCIsInN0YXRlcyIsInF1ZXVlU3RhdGUiLCJwYXJlbnROYW1lIiwiZmx1c2hRdWV1ZWRDaGlsZHJlbiIsInF1ZXVlZCIsInJlZ2lzdGVyU3RhdGUiLCJzdGF0ZUJ1aWxkZXIiLCIkZGVsZWdhdGVzIiwiYWJzdHJhY3RLZXkiLCIkc3RhdGVQYXJhbXMiLCIkc3RhdGUiLCJuYXZpZ2FibGUiLCJ0cmFuc2l0aW9uVG8iLCJpc0dsb2IiLCJkb2VzU3RhdGVNYXRjaEdsb2IiLCJnbG9iIiwiZ2xvYlNlZ21lbnRzIiwiZnVuYyIsIiR2aWV3IiwiJHJlc29sdmUiLCIkdXJsUm91dGVyIiwiaGFuZGxlUmVkaXJlY3QiLCJUcmFuc2l0aW9uQWJvcnRlZCIsInJldHJ5IiwiJHJldHJ5IiwiVHJhbnNpdGlvbkZhaWxlZCIsInJldHJ5VHJhbnNpdGlvbiIsInRyYW5zaXRpb24iLCJUcmFuc2l0aW9uU3VwZXJzZWRlZCIsInRvUGFyYW1zIiwicmVzb2x2ZVN0YXRlIiwicGFyYW1zQXJlRmlsdGVyZWQiLCJ2aWV3cyIsInZpZXciLCJpbmplY3RhYmxlcyIsImxvYWQiLCJjb250cm9sbGVyUHJvdmlkZXIiLCJpbmplY3RMb2NhbHMiLCIkJGNvbnRyb2xsZXIiLCIkJGNvbnRyb2xsZXJBcyIsIlRyYW5zaXRpb25QcmV2ZW50ZWQiLCJnbyIsInJlbGF0aXZlIiwiZnJvbVBhcmFtcyIsImZyb21QYXRoIiwidG9TdGF0ZSIsInJlZGlyZWN0UmVzdWx0IiwidG9QYXRoIiwia2VlcCIsInRvTG9jYWxzIiwib3duUGFyYW1zIiwic2hvdWxkVHJpZ2dlclJlbG9hZCIsInJlbG9hZE9uU2VhcmNoIiwiZW50ZXJpbmciLCJleGl0aW5nIiwib25FeGl0Iiwib25FbnRlciIsImluY2x1ZGVzIiwibG9zc3kiLCJuYXYiLCJjb21wb3NpdGVOYW1lIiwiYWJzdHJhY3QiLCIkVmlld1Byb3ZpZGVyIiwiJHRlbXBsYXRlRmFjdG9yeSIsIiRWaWV3U2Nyb2xsUHJvdmlkZXIiLCJ1c2VBbmNob3JTY3JvbGwiLCIkVmlld0RpcmVjdGl2ZSIsIiR1aVZpZXdTY3JvbGwiLCJnZXRSZW5kZXJlciIsInN0YXRpY3MiLCJjYiIsIiRhbmltYXRvciIsImNsZWFudXBMYXN0VmlldyIsInByZXZpb3VzRWwiLCJjdXJyZW50RWwiLCJyZW5kZXJlciIsInVwZGF0ZVZpZXciLCJmaXJzdFRpbWUiLCJnZXRVaVZpZXdOYW1lIiwicHJldmlvdXNMb2NhbHMiLCJsYXRlc3RMb2NhbHMiLCIkVmlld0RpcmVjdGl2ZUZpbGwiLCJpbml0aWFsIiwidWlWaWV3IiwicGFyc2VTdGF0ZVJlZiIsInJlZiIsInByZXBhcnNlZCIsInBhcmFtRXhwciIsInN0YXRlQ29udGV4dCIsImVsIiwic3RhdGVEYXRhIiwiJFN0YXRlUmVmRGlyZWN0aXZlIiwiYWxsb3dlZE9wdGlvbnMiLCJ1aVNyZWZBY3RpdmUiLCJ1aVNyZWYiLCJuZXdIcmVmIiwiaXNBbmNob3IiLCJpc0Zvcm0iLCJvcHRpb25zT3ZlcnJpZGUiLCJ1aVNyZWZPcHRzIiwiYWN0aXZlRGlyZWN0aXZlIiwiJCRzZXRTdGF0ZUluZm8iLCJpZ25vcmVQcmV2ZW50RGVmYXVsdENvdW50IiwiJFN0YXRlUmVmQWN0aXZlRGlyZWN0aXZlIiwiaXNNYXRjaCIsImFjdGl2ZUNsYXNzIiwidWlTcmVmQWN0aXZlRXEiLCIkSXNTdGF0ZUZpbHRlciIsImlzRmlsdGVyIiwiJEluY2x1ZGVkQnlTdGF0ZUZpbHRlciIsImluY2x1ZGVzRmlsdGVyIiwic2VhcmNoUGFyYW1zIiwiZGVjb2RlUGF0aEFycmF5IiwicmV2ZXJzZVN0cmluZyIsInVucXVvdGVEYXNoZXMiLCJhbGxSZXZlcnNlZCIsInBhcmFtTmFtZSIsInBhcmFtZXRlcnMiLCJuVG90YWwiLCJuUGF0aCIsInBhcmFtVmFsIiwiZW5jb2RlRGFzaGVzIiwiYyIsImlzUGF0aFBhcmFtIiwiaXNEZWZhdWx0VmFsdWUiLCJlbmNvZGVkIiwibmV4dFNlZ21lbnQiLCIkc3ViUGF0dGVybiIsInN1YiIsIkFycmF5VHlwZSIsImJpbmRUbyIsImNhbGxiYWNrTmFtZSIsImFycmF5V3JhcCIsImFycmF5VW53cmFwIiwiZmFsc2V5IiwiYXJyYXlIYW5kbGVyIiwiYWxsVHJ1dGh5TW9kZSIsImFycmF5RXF1YWxzSGFuZGxlciIsInZhbDEiLCJ2YWwyIiwiJGFycmF5TW9kZSIsIiR3ZWJzb2NrZXRQcm92aWRlciIsIndzcCIsIiQkY29uZmlnIiwibGF6eSIsInJlY29ubmVjdCIsInJlY29ubmVjdEludGVydmFsIiwibW9jayIsInByb3RvY29scyIsIiRzZXR1cCIsIiR3ZWJzb2NrZXRTZXJ2aWNlIiwid3NzIiwiJCR3ZWJzb2NrZXRMaXN0Iiwid3MiLCJ3c0NmZyIsIiR3ZWJzb2NrZXQiLCJtZSIsIiQkZXZlbnRNYXAiLCIkJHdzIiwiJCRyZWNvbm5lY3RUYXNrIiwiJCRyZWNvbm5lY3RDb3B5IiwiJCRxdWV1ZSIsIiQkZmlyZUV2ZW50IiwiaGFuZGxlcnMiLCIkJGluaXQiLCIkJG1vY2tXZWJzb2NrZXQiLCJXZWJTb2NrZXQiLCJvbm1lc3NhZ2UiLCJkZWNvZGVkIiwib25vcGVuIiwiJHJlYWR5IiwiJCRzZW5kIiwib25jbG9zZSIsIiRzdGF0dXMiLCIkQ0xPU0VEIiwiJG9wZW4iLCIkQ09OTkVDVElORyIsIiRPUEVOIiwiJENMT1NJTkciLCIkdW4iLCIkY2xvc2UiLCJjbG9zZSIsIiRtb2NrdXAiLCJvcGVuVGltZW91dCIsImNsb3NlVGltZW91dCIsIm1lc3NhZ2VJbnRlcnZhbCIsImZpeHR1cmVzIiwibWVzc2FnZVF1ZXVlIiwiQ09OTkVDVElORyIsIk9QRU4iLCJDTE9TSU5HIiwiQ0xPU0VEIiwibXNnT2JqIiwiZml4cyIsIk5HX0FOSU1BVEVfQ0hJTERSRU4iLCJuZ0FuaW1hdGVDaGlsZHJlbiIsImJvZCIsIm9mZnNldFdpZHRoIiwiJGFuaW1hdGVQcm92aWRlciIsImV4dHJhY3RFbGVtZW50Tm9kZSIsIkVMRU1FTlRfTk9ERSIsInByZXBhcmVFbGVtZW50Iiwic3RyaXBDb21tZW50c0Zyb21FbGVtZW50IiwiaXNNYXRjaGluZ0VsZW1lbnQiLCJlbG0xIiwiZWxtMiIsInNlbGVjdG9ycyIsIk5HX0FOSU1BVEVfU1RBVEUiLCJOR19BTklNQVRFX0NMQVNTX05BTUUiLCJyb290QW5pbWF0ZVN0YXRlIiwicnVubmluZyIsIiQkJGpxTGl0ZSIsImNsYXNzQmFzZWRBbmltYXRpb25zQmxvY2tlZCIsInN0cnVjdHVyYWwiLCJkaXNhYmxlZCIsInBhcnNlQW5pbWF0ZU9wdGlvbnMiLCJydW5uaW5nQW5pbWF0aW9ucyIsImxvb2t1cCIsIm1hdGNoaW5nQW5pbWF0aW9uIiwiZmxhZ01hcCIsImtsYXNzIiwic2VsZWN0b3JGYWN0b3J5TmFtZSIsImFuaW1hdGlvblJ1bm5lciIsImFuaW1hdGlvbkV2ZW50IiwicmVnaXN0ZXJBbmltYXRpb24iLCJhbmltYXRpb25GYWN0b3J5IiwiYWZ0ZXJGbiIsImJlZm9yZUZuIiwiYmVmb3JlIiwiY2FuY2VsbGF0aW9ucyIsImFsbENvbXBsZXRlRm4iLCJhZnRlckFuaW1hdGlvbkNvbXBsZXRlIiwiY2xhc3NOYW1lQWRkIiwiY2xhc3NOYW1lUmVtb3ZlIiwiaXNTZXRDbGFzc09wZXJhdGlvbiIsImlzQ2xhc3NCYXNlZCIsImN1cnJlbnRDbGFzc05hbWUiLCJpc0FuaW1hdGFibGVDbGFzc05hbWUiLCJiZWZvcmVDb21wbGV0ZSIsImJlZm9yZUNhbmNlbCIsImFmdGVyQ29tcGxldGUiLCJhZnRlckNhbmNlbCIsImFuaW1hdGlvbkxvb2t1cCIsImNyZWF0ZWQiLCJwZXJmb3JtQW5pbWF0aW9uIiwiYWZ0ZXJFbGVtZW50IiwiZG9tT3BlcmF0aW9uIiwiZmlyZURPTUNhbGxiYWNrIiwiYW5pbWF0aW9uUGhhc2UiLCJlbGVtZW50RXZlbnRzIiwiZmlyZUJlZm9yZUNhbGxiYWNrQXN5bmMiLCJmaXJlQWZ0ZXJDYWxsYmFja0FzeW5jIiwiZmlyZURvbmVDYWxsYmFja0FzeW5jIiwiZmlyZURPTU9wZXJhdGlvbiIsImhhc0JlZW5SdW4iLCJjbG9zZUFuaW1hdGlvbiIsInJ1bm5lciIsImNsZWFudXAiLCJsb2NhbEFuaW1hdGlvbkNvdW50Iiwibm9vcENhbmNlbCIsImFuaW1hdGlvbnNEaXNhYmxlZCIsIm5nQW5pbWF0ZVN0YXRlIiwidG90YWxBY3RpdmVBbmltYXRpb25zIiwidG90YWxBY3RpdmUiLCJsYXN0QW5pbWF0aW9uIiwic2tpcEFuaW1hdGlvbiIsImFuaW1hdGlvbnNUb0NhbmNlbCIsIm9wZXJhdGlvbiIsImFjdGl2ZUxlYXZlQW5pbWF0aW9uIiwiZ2xvYmFsQW5pbWF0aW9uQ291bnRlciIsImNhbmNlbGxlZCIsImNhbmNlbENoaWxkQW5pbWF0aW9ucyIsInJlbW92ZUFuaW1hdGlvbnMiLCJhbGxvd0NoaWxkQW5pbWF0aW9ucyIsInBhcmVudFJ1bm5pbmdBbmltYXRpb24iLCJoYXNQYXJlbnQiLCJpc1Jvb3QiLCJhbmltYXRlQ2hpbGRyZW5GbGFnIiwiZGVyZWdpc3RlcldhdGNoIiwiaGFzQ2FjaGUiLCJlbGVtZW50Tm9kZSIsIiQkYW5pbWF0ZVJlZmxvdyIsImNsZWFyQ2FjaGVBZnRlclJlZmxvdyIsImNhbmNlbEFuaW1hdGlvblJlZmxvdyIsImFuaW1hdGlvblJlZmxvd1F1ZXVlIiwibG9va3VwQ2FjaGUiLCJhZnRlclJlZmxvdyIsImFuaW1hdGlvbkNsb3NlSGFuZGxlciIsInRvdGFsVGltZSIsImFuaW1hdGlvbkVsZW1lbnRRdWV1ZSIsImZ1dHVyZVRpbWVzdGFtcCIsIm5vdyIsImNsb3NpbmdUaW1lc3RhbXAiLCJjbG9zaW5nVGltZXIiLCJjbG9zZUFsbEFuaW1hdGlvbnMiLCJlbGVtZW50RGF0YSIsIk5HX0FOSU1BVEVfQ1NTX0RBVEFfS0VZIiwiY2xvc2VBbmltYXRpb25GbnMiLCJnZXRFbGVtZW50QW5pbWF0aW9uRGV0YWlscyIsInRyYW5zaXRpb25EdXJhdGlvbiIsInRyYW5zaXRpb25EZWxheSIsImFuaW1hdGlvbkR1cmF0aW9uIiwiYW5pbWF0aW9uRGVsYXkiLCJlbGVtZW50U3R5bGVzIiwidHJhbnNpdGlvbkR1cmF0aW9uU3R5bGUiLCJUUkFOU0lUSU9OX1BST1AiLCJEVVJBVElPTl9LRVkiLCJwYXJzZU1heFRpbWUiLCJ0cmFuc2l0aW9uRGVsYXlTdHlsZSIsIkRFTEFZX0tFWSIsIkFOSU1BVElPTl9QUk9QIiwiYUR1cmF0aW9uIiwiQU5JTUFUSU9OX0lURVJBVElPTl9DT1VOVF9LRVkiLCJ0b3RhbCIsIm1heFZhbHVlIiwiZ2V0Q2FjaGVLZXkiLCJwYXJlbnRJRCIsIk5HX0FOSU1BVEVfUEFSRU5UX0tFWSIsInBhcmVudENvdW50ZXIiLCJhbmltYXRlU2V0dXAiLCJldmVudENhY2hlS2V5IiwiaXRlbUluZGV4Iiwic3RhZ2dlciIsInN0YWdnZXJDbGFzc05hbWUiLCJzdGFnZ2VyQ2FjaGVLZXkiLCJhcHBseUNsYXNzZXMiLCJmb3JtZXJEYXRhIiwidGltaW5ncyIsImJsb2NrVHJhbnNpdGlvbiIsImJsb2NrQW5pbWF0aW9uIiwiYmxvY2tUcmFuc2l0aW9ucyIsImJsb2NrQW5pbWF0aW9ucyIsImFuaW1hdGVSdW4iLCJhY3RpdmVBbmltYXRpb25Db21wbGV0ZSIsIm9uRW5kIiwiY3NzM0FuaW1hdGlvbkV2ZW50cyIsIm9uQW5pbWF0aW9uUHJvZ3Jlc3MiLCJhY3RpdmVDbGFzc05hbWUiLCJwZW5kaW5nQ2xhc3NOYW1lIiwic3RhZ2dlclRpbWVvdXQiLCJhbmltYXRlQ2xvc2UiLCJhcHBsaWVkU3R5bGVzIiwicmVtb3ZlUHJvcGVydHkiLCJvcmlnaW5hbEV2ZW50IiwidGltZVN0YW1wIiwiJG1hbnVhbFRpbWVTdGFtcCIsImVsYXBzZWRUaW1lIiwiRUxBUFNFRF9USU1FX01BWF9ERUNJTUFMX1BMQUNFUyIsInN0YXJ0VGltZSIsIm1heERlbGF5VGltZSIsIm1heER1cmF0aW9uIiwic3RhZ2dlclRpbWUiLCJ0cmFuc2l0aW9uU3RhZ2dlckRlbGF5IiwiYW5pbWF0aW9uU3RhZ2dlckRlbGF5IiwiQ1NTX1BSRUZJWCIsIm1heERlbGF5IiwiT05FX1NFQ09ORCIsIm9sZFN0eWxlIiwiQU5JTUFUSU9ORU5EX0VWRU5UIiwiVFJBTlNJVElPTkVORF9FVkVOVCIsImFuaW1hdGlvblRpbWUiLCJDTE9TSU5HX1RJTUVfQlVGRkVSIiwiUFJPUEVSVFlfS0VZIiwiQU5JTUFUSU9OX1BMQVlTVEFURV9LRVkiLCJhbmltYXRlQmVmb3JlIiwiYW5pbWF0ZUFmdGVyIiwiYW5pbWF0aW9uQ29tcGxldGUiLCJwcmVSZWZsb3dDYW5jZWxsYXRpb24iLCJzdWZmaXhDbGFzc2VzIiwib250cmFuc2l0aW9uZW5kIiwib253ZWJraXR0cmFuc2l0aW9uZW5kIiwib25hbmltYXRpb25lbmQiLCJvbndlYmtpdGFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbkNvbXBsZXRlZCIsImJlZm9yZVNldENsYXNzIiwiY2FuY2VsbGF0aW9uTWV0aG9kIiwiYmVmb3JlQWRkQ2xhc3MiLCJiZWZvcmVSZW1vdmVDbGFzcyIsIiRBcmlhUHJvdmlkZXIiLCJhcmlhQXR0ciIsIm5lZ2F0ZSIsImFyaWFDYW1lbE5hbWUiLCJib29sVmFsIiwiYXJpYUhpZGRlbiIsImFyaWFDaGVja2VkIiwiYXJpYURpc2FibGVkIiwiYXJpYVJlcXVpcmVkIiwiYXJpYUludmFsaWQiLCJhcmlhTXVsdGlsaW5lIiwiYXJpYVZhbHVlIiwidGFiaW5kZXgiLCJiaW5kS2V5cHJlc3MiLCJuZXdDb25maWciLCIkJHdhdGNoRXhwciIsIm5nQXJpYU1vZHVsZSIsIiRhcmlhIiwic2hvdWxkQXR0YWNoQXR0ciIsIm5vcm1hbGl6ZWRBdHRyIiwiZ2V0U2hhcGUiLCJyb2xlIiwibmdBcmlhV2F0Y2hNb2RlbFZhbHVlIiwiZ2V0UmFkaW9SZWFjdGlvbiIsIm5lZWRzVGFiSW5kZXgiLCJuZ0FyaWFDaGVja2JveFJlYWN0aW9uIiwic2hhcGUiLCJuZ0NsaWNrIiwiaXNOb2RlT25lT2YiLCJub2RlVHlwZUFycmF5IiwibmdLZXlwcmVzcyIsIk1kQ29yZUNvbmZpZ3VyZSIsIiRtZFRoZW1pbmdQcm92aWRlciIsInJBRkRlY29yYXRvciIsInRoZW1lIiwicHJpbWFyeVBhbGV0dGUiLCJhY2NlbnRQYWxldHRlIiwid2FyblBhbGV0dGUiLCJiYWNrZ3JvdW5kUGFsZXR0ZSIsInRocm90dGxlIiwicXVldWVBcmdzIiwiYWxyZWFkeVF1ZXVlZCIsInF1ZXVlQ2IiLCJNZENvbnN0YW50RmFjdG9yeSIsInZlbmRvclByb3BlcnR5Iiwid2Via2l0IiwiS0VZX0NPREUiLCJFTlRFUiIsIlNQQUNFIiwiTEVGVF9BUlJPVyIsIlVQX0FSUk9XIiwiUklHSFRfQVJST1ciLCJET1dOX0FSUk9XIiwiVFJBTlNJVElPTkVORCIsIkFOSU1BVElPTkVORCIsIlRSQU5TRk9STSIsIlRSQU5TSVRJT04iLCJUUkFOU0lUSU9OX0RVUkFUSU9OIiwiQU5JTUFUSU9OX1BMQVlfU1RBVEUiLCJBTklNQVRJT05fRFVSQVRJT04iLCJBTklNQVRJT05fTkFNRSIsIkFOSU1BVElPTl9USU1JTkciLCJBTklNQVRJT05fRElSRUNUSU9OIiwic20iLCJndC1zbSIsIm1kIiwiZ3QtbWQiLCJsZyIsImd0LWxnIiwiSXRlcmF0b3IiLCJyZWxvb3AiLCJnZXRJdGVtcyIsIl9pdGVtcyIsImluUmFuZ2UiLCJoYXNOZXh0IiwiaGFzUHJldmlvdXMiLCJpdGVtQXQiLCJmaW5kQnkiLCJmaW5kU3Vic2VxdWVudEl0ZW0iLCJiYWNrd2FyZHMiLCJ0cnVlRm4iLCJjdXJJbmRleCIsIm5leHRJbmRleCIsImZvdW5kSXRlbSIsInByZXZpb3VzIiwibmV4dFVuaXF1ZUlkIiwiVXRpbCIsInBlcmZvcm1hbmNlIiwiZWxlbWVudFJlY3QiLCJvZmZzZXRQYXJlbnQiLCJub2RlUmVjdCIsInBhcmVudFJlY3QiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwid2lkdGgiLCJoZWlnaHQiLCJmYWtlTmdNb2RlbCIsIiRmYWtlIiwicmVjZW50IiwiZGlnaXQiLCJkaXNjb25uZWN0U2NvcGUiLCIkJGRpc2Nvbm5lY3RlZCIsInJlY29ubmVjdFNjb3BlIiwiZ2V0Q2xvc2VzdCIsInRhZ05hbWUiLCJBcmlhU2VydmljZSIsImRlZmF1bHRWYWx1ZSIsImNoaWxkSGFzQXR0cmlidXRlIiwiZXhwZWN0QXN5bmMiLCJkZWZhdWx0VmFsdWVHZXR0ZXIiLCJleHBlY3RXaXRoVGV4dCIsImlzSGlkZGVuIiwiY3VycmVudFN0eWxlIiwiZGlzcGxheSIsImhhc0NoaWxkcmVuIiwiaGFzQ2hpbGROb2RlcyIsImhhc0F0dHIiLCJtZENvbXBpbGVyU2VydmljZSIsInRyYW5zZm9ybVRlbXBsYXRlIiwicnVuSGFuZGxlcnMiLCJoYW5kbGVyRXZlbnQiLCJoYW5kbGVyTmFtZSIsIkhBTkRMRVJTIiwicG9pbnRlciIsImdlc3R1cmVTdGFydCIsImxhc3RQb2ludGVyIiwidHlwZXNNYXRjaCIsImVuZFRpbWUiLCJtYWtlU3RhcnRQb2ludGVyIiwiZ2VzdHVyZU1vdmUiLCJ1cGRhdGVQb2ludGVyU3RhdGUiLCJnZXN0dXJlRW5kIiwiZ2V0RXZlbnRQb2ludCIsInRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsInBvaW50IiwieCIsInBhZ2VYIiwicGFnZVkiLCJkaXN0YW5jZVgiLCJzdGFydFgiLCJkaXN0YW5jZVkiLCJzdGFydFkiLCJkaXN0YW5jZSIsInNxcnQiLCJkaXJlY3Rpb25YIiwiZGlyZWN0aW9uWSIsImR1cmF0aW9uIiwidmVsb2NpdHlYIiwidmVsb2NpdHlZIiwic3RhcnRQb2ludGVyIiwiU1RBUlRfRVZFTlRTIiwiTU9WRV9FVkVOVFMiLCJFTkRfRVZFTlRTIiwidmVuZG9yIiwib3BlcmEiLCJpc0lvcyIsImlzQW5kcm9pZCIsInNob3VsZEhpamFja0NsaWNrcyIsImlzS2V5Q2xpY2siLCJjbGllbnRYIiwiY2xpZW50WSIsIiRtYXRlcmlhbCIsIiQkTWRHZXN0dXJlSGFuZGxlciIsImFkZEhhbmRsZXIiLCJyZWdpc3RlckVsZW1lbnQiLCJtYXhEaXN0YW5jZSIsImRpc3BhdGNoRXZlbnQiLCJvblN0YXJ0Iiwib25DYW5jZWwiLCJyZWdpc3RlcmVkUGFyZW50Iiwib25Nb3ZlIiwiZHgiLCJkeSIsIm1pbkRpc3RhbmNlIiwiaG9yaXpvbnRhbCIsInNob3VsZFN0YXJ0RHJhZyIsInNob3VsZENhbmNlbCIsImRyYWdQb2ludGVyIiwiZGlzcGF0Y2hEcmFnTW92ZSIsImlzUnVubmluZyIsIm1pblZlbG9jaXR5IiwiZXZlbnRUeXBlIiwiR2VzdHVyZUhhbmRsZXIiLCJzcmNFdmVudCIsImV2ZW50UG9pbnRlciIsImV2ZW50T2JqIiwiY3JlYXRlRXZlbnQiLCJpbml0TW91c2VFdmVudCIsImRldGFpbCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiYWx0S2V5IiwiaW5pdEN1c3RvbUV2ZW50IiwicGFyZW50VGFyZ2V0IiwiZ2V0TmVhcmVzdFBhcmVudCIsInBhcmVudFRhcmdldE9wdGlvbnMiLCIkbWRHZXN0dXJlIiwib25EZXN0cm95IiwiSW50ZXJpbUVsZW1lbnRQcm92aWRlciIsImNyZWF0ZUludGVyaW1FbGVtZW50UHJvdmlkZXIiLCJpbnRlcmltRmFjdG9yeU5hbWUiLCJzZXREZWZhdWx0cyIsInByb3ZpZGVyQ29uZmlnIiwib3B0aW9uc0ZhY3RvcnkiLCJtZXRob2RzIiwiRVhQT1NFRF9NRVRIT0RTIiwiYWRkUHJlc2V0IiwicHJlc2V0cyIsImFyZ09wdGlvbiIsIiQkaW50ZXJpbUVsZW1lbnQiLCJzaG93SW50ZXJpbUVsZW1lbnQiLCJvcHRzIiwiX29wdGlvbnMiLCJpbnRlcmltRWxlbWVudFNlcnZpY2UiLCJzaG93IiwiZGVmYXVsdE9wdGlvbnMiLCJpbnZva2VGYWN0b3J5IiwiZGVmYXVsdFZhbCIsInB1YmxpY1NlcnZpY2UiLCJkZWZhdWx0TWV0aG9kcyIsImhpZGUiLCJQcmVzZXQiLCJwcmVzZXREZWZhdWx0cyIsInByZXNldE1ldGhvZHMiLCIkdHlwZSIsIm1ldGhvZE5hbWUiLCJJbnRlcmltRWxlbWVudEZhY3RvcnkiLCIkbWRDb21waWxlciIsIiRtZFRoZW1pbmciLCJyZXBsYWNlSW50ZXJwb2xhdGlvblN5bWJvbHMiLCJ1c2VzU3RhbmRhcmRTeW1ib2xzIiwicHJvY2Vzc1RlbXBsYXRlIiwiaW50ZXJpbUVsZW1lbnQiLCJJbnRlcmltRWxlbWVudCIsImhpZGVUaW1lb3V0Iiwib25TaG93Iiwib25SZW1vdmUiLCJjb21waWxlRGF0YSIsInN0YXJ0SGlkZVRpbWVvdXQiLCJoaWRlRGVsYXkiLCJ0aGVtYWJsZSIsIm9uQ29tcGxldGUiLCJjYW5jZWxUaW1lb3V0IiwiQ29tcG9uZW50UmVnaXN0cnkiLCJpc1ZhbGlkSUQiLCJpbnN0YW5jZXMiLCJwZW5kaW5ncyIsIm5vdEZvdW5kRXJyb3IiLCJnZXRJbnN0YW5jZXMiLCIkJG1kSGFuZGxlIiwiZGVyZWdpc3RlciIsInJlc29sdmVXaGVuIiwiZGZkIiwiSW5rUmlwcGxlRGlyZWN0aXZlIiwiJG1kSW5rUmlwcGxlIiwiYXR0YWNoQ2hlY2tib3hCZWhhdmlvciIsImF0dGFjaEJ1dHRvbkJlaGF2aW9yIiwiSW5rUmlwcGxlU2VydmljZSIsImF0dGFjaCIsImlzRkFCIiwiaXNNZW51SXRlbSIsImNlbnRlciIsImRpbUJhY2tncm91bmQiLCJmaXRSaXBwbGUiLCJhdHRhY2hUYWJCZWhhdmlvciIsIm91dGxpbmUiLCJnZXRSaXBwbGVDb250YWluZXIiLCJjb250YWluZXIiLCJwYXJzZUNvbG9yIiwiY29sb3IiLCJoZXhUb1JHQkEiLCJkaWciLCJyZWQiLCJncm4iLCJibHUiLCJyZ2JUb1JHQkEiLCJyZW1vdmVFbGVtZW50IiwicmlwcGxlcyIsImJhY2tncm91bmRDb2xvciIsInVwZGF0ZUVsZW1lbnQiLCJlbGVtSXNBY3RpdmUiLCJpc0FjdGl2ZSIsImVsZW1Jc0hlbGQiLCJpc0hlbGQiLCJhbmltYXRpbmciLCJyaXBwbGVTaXplIiwibWFyZ2luTGVmdCIsIm1hcmdpblRvcCIsImNyZWF0ZVJpcHBsZSIsImdldFJpcHBsZUVsZW1lbnQiLCJnZXRSaXBwbGVTaXplIiwibXVsdGlwbGllciIsInJlY3QiLCJwb3ciLCJnZXRSaXBwbGVDc3MiLCJyZ2JhVG9SR0IiLCJib3JkZXJDb2xvciIsImNvbG9yRWxlbWVudCIsImJvcmRlcldpZHRoIiwib25QcmVzc0Rvd24iLCJpc1JpcHBsZUFsbG93ZWQiLCJvblByZXNzVXAiLCJyaXBwbGUiLCJpc0Rpc2FibGVkIiwiZ3JhbmRwYXJlbnQiLCJhbmNlc3RvciIsIm1vdXNlZG93biIsImhvdmVyIiwibW91c2Vkb3duUGF1c2VUaW1lIiwiaXNBY3RpdmVFeHByIiwicmlwcGxlU2l6ZVNldHRpbmciLCJhdHRyTm9EaXJlY3RpdmUiLCI1MCIsIjEwMCIsIjIwMCIsIjMwMCIsIjQwMCIsIjUwMCIsIjYwMCIsIjcwMCIsIjgwMCIsIjkwMCIsIkExMDAiLCJBMjAwIiwiQTQwMCIsIkE3MDAiLCJjb250cmFzdERlZmF1bHRDb2xvciIsImNvbnRyYXN0RGFya0NvbG9ycyIsImNvbnRyYXN0U3Ryb25nTGlnaHRDb2xvcnMiLCJwaW5rIiwicHVycGxlIiwiZGVlcC1wdXJwbGUiLCJpbmRpZ28iLCJibHVlIiwibGlnaHQtYmx1ZSIsImNvbnRyYXN0TGlnaHRDb2xvcnMiLCJjeWFuIiwidGVhbCIsImdyZWVuIiwibGlnaHQtZ3JlZW4iLCJsaW1lIiwieWVsbG93IiwiYW1iZXIiLCJvcmFuZ2UiLCJkZWVwLW9yYW5nZSIsImJyb3duIiwiZ3JleSIsIjAiLCIxMDAwIiwiYmx1ZS1ncmV5IiwiVGhlbWluZ1Byb3ZpZGVyIiwiJG1kQ29sb3JQYWxldHRlIiwiZGVmaW5lUGFsZXR0ZSIsIlBBTEVUVEVTIiwiY2hlY2tQYWxldHRlVmFsaWQiLCJ0aGVtaW5nUHJvdmlkZXIiLCJleHRlbmRQYWxldHRlIiwibWlzc2luZ0NvbG9ycyIsIlZBTElEX0hVRV9WQUxVRVMiLCJmaWVsZCIsInJlZ2lzdGVyVGhlbWUiLCJpbmhlcml0RnJvbSIsIlRIRU1FUyIsInBhcmVudFRoZW1lIiwiVGhlbWUiLCJjb2xvcnMiLCJjb2xvclR5cGUiLCJodWVzIiwic2V0RGFyayIsImlzRGFyayIsImZvcmVncm91bmRQYWxldHRlIiwiTElHSFRfRk9SRUdST1VORCIsIkRBUktfRk9SRUdST1VORCIsImZvcmVncm91bmRTaGFkb3ciLCJEQVJLX1NIQURPVyIsIkxJR0hUX1NIQURPVyIsIm5ld0RlZmF1bHRIdWVzIiwiREFSS19ERUZBVUxUX0hVRVMiLCJMSUdIVF9ERUZBVUxUX0hVRVMiLCJvbGREZWZhdWx0SHVlcyIsIm5ld0RlZmF1bHRzIiwib2xkRGVmYXVsdHMiLCJodWVOYW1lIiwiZGFyayIsIlRIRU1FX0NPTE9SX1RZUEVTIiwiZGVmYXVsdEh1ZXMiLCJwYWxldHRlTmFtZSIsImh1ZVZhbHVlIiwiVGhlbWluZ1NlcnZpY2UiLCJyZWdpc3RlcmVkIiwiYXBwbHlUaGVtZSIsImNoYW5nZVRoZW1lIiwib2xkVGhlbWUiLCJhdHRyVGhlbWVWYWx1ZSIsImFsd2F5c1dhdGNoVGhlbWUiLCIkbWRUaGVtZSIsImRlZmF1bHRUaGVtZSIsInNldERlZmF1bHRUaGVtZSIsImFsd2F5c1dhdGNoIiwiX0xJR0hUX0RFRkFVTFRfSFVFUyIsIl9EQVJLX0RFRkFVTFRfSFVFUyIsIl9QQUxFVFRFUyIsIl9USEVNRVMiLCJfcGFyc2VSdWxlcyIsInBhcnNlUnVsZXMiLCJfcmdiYSIsInJnYmEiLCJUaGVtaW5nRGlyZWN0aXZlIiwiJHNldFRoZW1lIiwibWRUaGVtZSIsIlRoZW1hYmxlRGlyZWN0aXZlIiwiY2hlY2tWYWxpZFBhbGV0dGUiLCJnZW5lcmF0ZWRSdWxlcyIsInRoZW1lTmFtZVJlZ2V4IiwiaHVlUmVnZXgiLCJzaW1wbGVWYXJpYWJsZVJlZ2V4IiwicGFsZXR0ZSIsImh1ZSIsIm9wYWNpdHkiLCJuZXdSdWxlIiwiaHVlVHlwZSIsImdlbmVyYXRlVGhlbWVzIiwic2FuaXRpemVQYWxldHRlIiwiZGVmYXVsdENvbnRyYXN0IiwibGlnaHRDb2xvcnMiLCJzdHJvbmdMaWdodENvbG9ycyIsImRhcmtDb2xvcnMiLCJnZXRDb250cmFzdENvbG9yIiwiREFSS19DT05UUkFTVF9DT0xPUiIsIlNUUk9OR19MSUdIVF9DT05UUkFTVF9DT0xPUiIsIkxJR0hUX0NPTlRSQVNUX0NPTE9SIiwicmdiVmFsdWUiLCJjb2xvclRvUmdiYUFycmF5IiwiY29udHJhc3QiLCJ0aGVtZUNzcyIsInJ1bGVzQnlUeXBlIiwicnVsZU1hdGNoUmVnZXgiLCJERUZBVUxUX0NPTE9SX1RZUEUiLCJzdHlsZVN0cmluZyIsImFjY2VudCIsImdlbmVyYXRpb25Jc0RvbmUiLCJoZWFkIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJjbHIiLCJyZ2JBcnJheSIsIjEiLCIyIiwiMyIsIjQiLCJkZWZhdWx0IiwiaHVlLTEiLCJodWUtMiIsImh1ZS0zIiwiYmFja2dyb3VuZCIsImRlZmF1bHREZWZhdWx0SHVlcyIsIkJhY2tkcm9wRGlyZWN0aXZlIiwiTWRCb3R0b21TaGVldERpcmVjdGl2ZSIsIk1kQm90dG9tU2hlZXRQcm92aWRlciIsIiQkaW50ZXJpbUVsZW1lbnRQcm92aWRlciIsImJvdHRvbVNoZWV0RGVmYXVsdHMiLCIkbWRCb3R0b21TaGVldCIsImJhY2tkcm9wIiwiYm90dG9tU2hlZXQiLCJCb3R0b21TaGVldCIsInRhcmdldEV2ZW50IiwiZGlzYWJsZVBhcmVudFNjcm9sbCIsImxhc3RPdmVyZmxvdyIsImZvY3VzYWJsZSIsImVzY2FwZVRvQ2xvc2UiLCJyb290RWxlbWVudEtleXVwQ2FsbGJhY2siLCJvbkRyYWdTdGFydCIsIm9uRHJhZyIsInRyYW5zZm9ybSIsIlBBRERJTkciLCJvbkRyYWdFbmQiLCJDTE9TSU5HX1ZFTE9DSVRZIiwiZGlzdGFuY2VSZW1haW5pbmciLCJNZEJ1dHRvbkRpcmVjdGl2ZSIsIiRtZEFyaWEiLCJuZ0hyZWYiLCJnZXRUZW1wbGF0ZSIsInBvc3RMaW5rIiwiZWxlbWVudEhhc1RleHQiLCJuZ0Rpc2FibGVkIiwibWRDYXJkRGlyZWN0aXZlIiwiTWRDaGVja2JveERpcmVjdGl2ZSIsIiRtZFV0aWwiLCJ0YWJJbmRleCIsImtleXByZXNzSGFuZGxlciIsIkNIRUNLRURfQ1NTIiwibWRDb250ZW50RGlyZWN0aXZlIiwiQ29udGVudENvbnRyb2xsZXIiLCJpb3NTY3JvbGxGaXgiLCIkbWF0ZXJpYWxTY3JvbGxGaXhlZCIsInNjcm9sbEhlaWdodCIsIm9mZnNldEhlaWdodCIsIk1kRGlhbG9nRGlyZWN0aXZlIiwiY2xpZW50SGVpZ2h0IiwiTWREaWFsb2dQcm92aWRlciIsImFkdmFuY2VkRGlhbG9nT3B0aW9ucyIsIiRtZERpYWxvZyIsImRpYWxvZ0RlZmF1bHRPcHRpb25zIiwiZmluZENsb3NlQnV0dG9uIiwiY2xvc2VCdXR0b24iLCJhY3Rpb25CdXR0b25zIiwicG9wSW5UYXJnZXQiLCJjb25maWd1cmVBcmlhIiwiaGFzQmFja2Ryb3AiLCJwYXJlbnRPZmZzZXQiLCJkaWFsb2dQb3BJbiIsImNsaWNrT3V0c2lkZVRvQ2xvc2UiLCJkaWFsb2dDbGlja091dHNpZGVDYWxsYmFjayIsImRpYWxvZ1BvcE91dCIsImRpYWxvZ0NvbnRlbnQiLCJ3b3JkcyIsImNsaWNrRWxlbWVudCIsImRpYWxvZ0VsIiwidHJhbnNmb3JtVG9DbGlja0VsZW1lbnQiLCJkaWFsb2dUcmFuc2l0aW9uRW5kIiwiY2xpY2tSZWN0IiwiZGlhbG9nUmVjdCIsInNjYWxlWCIsInNjYWxlWSIsImZpbmlzaGVkIiwiTWREaXZpZGVyQ29udHJvbGxlciIsIk1kRGl2aWRlckRpcmVjdGl2ZSIsIm1kSWNvbkRpcmVjdGl2ZSIsImljb24iLCJtZElucHV0Q29udGFpbmVyRGlyZWN0aXZlIiwiQ29udGFpbmVyQ3RybCIsImlzRXJyb3JHZXR0ZXIiLCJtZElzRXJyb3IiLCJzZXRGb2N1c2VkIiwiaXNGb2N1c2VkIiwic2V0SGFzVmFsdWUiLCJoYXNWYWx1ZSIsInNldEludmFsaWQiLCJpc0ludmFsaWQiLCJoYXNMYWJlbEFuZElucHV0IiwibGFiZWxEaXJlY3RpdmUiLCJjb250YWluZXJDdHJsIiwiaW5wdXRUZXh0YXJlYURpcmVjdGl2ZSIsIm5nTW9kZWxQaXBlbGluZUNoZWNrVmFsdWUiLCJpbnB1dENoZWNrVmFsdWUiLCJzZXR1cFRleHRhcmVhIiwicGlwZWxpbmVMaXN0ZW5lciIsIm9uQ2hhbmdlVGV4dGFyZWEiLCJncm93VGV4dGFyZWEiLCJvblNjcm9sbCIsImlzUmVhZG9ubHkiLCJyZWFkb25seSIsIm1kTWF4bGVuZ3RoRGlyZWN0aXZlIiwicmVuZGVyQ2hhckNvdW50IiwiY2hhckNvdW50RWwiLCJtZE1heGxlbmd0aCIsImxhc3RFbGVtZW50Q2hpbGQiLCJwbGFjZWhvbGRlckRpcmVjdGl2ZSIsImlucHV0Q29udGFpbmVyIiwicGxhY2Vob2xkZXJUZXh0IiwibWRMaXN0RGlyZWN0aXZlIiwibWRJdGVtRGlyZWN0aXZlIiwiTWRQcm9ncmVzc0NpcmN1bGFyRGlyZWN0aXZlIiwiY2xhbXBlZCIsImZpbGxSb3RhdGlvbiIsImZpeFJvdGF0aW9uIiwiY2lyY2xlIiwiZmlsbCIsImZpeCIsImRpYW1ldGVyIiwibWREaWFtZXRlciIsInNjYWxlIiwiY2xhbXAiLCJmaWxsUm90YXRpb25zIiwiZml4Um90YXRpb25zIiwicGVyY2VudCIsInJvdGF0aW9uIiwiTWRQcm9ncmVzc0xpbmVhckRpcmVjdGl2ZSIsImJhcjFTdHlsZSIsImJhcjJTdHlsZSIsIm1kTW9kZSIsInRyYW5zZm9ybXMiLCJtYWtlVHJhbnNmb3JtIiwidHJhbnNsYXRlWCIsIm1kUmFkaW9Hcm91cERpcmVjdGl2ZSIsImxpbmtSYWRpb0dyb3VwIiwia2V5ZG93bkxpc3RlbmVyIiwicmdDdHJsIiwic2VsZWN0UHJldmlvdXMiLCJzZWxlY3ROZXh0IiwiUmFkaW9Hcm91cENvbnRyb2xsZXIiLCJfcmFkaW9CdXR0b25SZW5kZXJGbnMiLCJjcmVhdGVSYWRpb0dyb3VwQ29udHJvbGxlclByb3RvIiwiX25nTW9kZWxDdHJsIiwicmJSZW5kZXIiLCJzZXRWaWV3VmFsdWUiLCJjaGFuZ2VTZWxlY3RlZEJ1dHRvbiIsInNldEFjdGl2ZURlc2NlbmRhbnQiLCJyYWRpb0lkIiwiaW5jcmVtZW50IiwiYnV0dG9ucyIsIm1kUmFkaW9CdXR0b25EaXJlY3RpdmUiLCJsYXN0Q2hlY2tlZCIsImJ1aWxkQXJpYUlEIiwiYXJpYUlkIiwiYXJpYS1jaGVja2VkIiwiU2lkZW5hdlNlcnZpY2UiLCIkbWRDb21wb25lbnRSZWdpc3RyeSIsImVycm9yTXNnIiwiaXNPcGVuIiwiaXNMb2NrZWRPcGVuIiwidG9nZ2xlIiwiU2lkZW5hdkRpcmVjdGl2ZSIsInNpZGVuYXZDdHJsIiwidXBkYXRlSXNMb2NrZWQiLCJpc0xvY2tlZCIsInVwZGF0ZUlzT3BlbiIsIm9uS2V5RG93biIsInRyaWdnZXJpbmdFbGVtZW50IiwiYWN0aXZlRWxlbWVudCIsInRvZ2dsZU9wZW4iLCJpc0VzY2FwZSIsImlzTG9ja2VkT3BlblBhcnNlZCIsIm1kSXNMb2NrZWRPcGVuIiwiJG1lZGlhIiwiJHRvZ2dsZU9wZW4iLCJTaWRlbmF2Q29udHJvbGxlciIsIm1kQ29tcG9uZW50SWQiLCJTbGlkZXJEaXJlY3RpdmUiLCJ1cGRhdGVBbGwiLCJyZWZyZXNoU2xpZGVyRGltZW5zaW9ucyIsIm5nTW9kZWxSZW5kZXIiLCJyZWRyYXdUaWNrcyIsInVwZGF0ZU1pbiIsInVwZGF0ZU1heCIsInVwZGF0ZVN0ZXAiLCJzdGVwIiwidXBkYXRlQXJpYURpc2FibGVkIiwibWREaXNjcmV0ZSIsIm51bVN0ZXBzIiwidGlja0NhbnZhcyIsInRyYWNrVGlja3NTdHlsZSIsInRpY2tDb250YWluZXIiLCJ0aWNrQ3R4IiwiZ2V0Q29udGV4dCIsImZpbGxTdHlsZSIsImRpbWVuc2lvbnMiLCJnZXRTbGlkZXJEaW1lbnNpb25zIiwiZmlsbFJlY3QiLCJzbGlkZXJEaW1lbnNpb25zIiwidHJhY2tDb250YWluZXIiLCJ0aHJvdHRsZWRSZWZyZXNoRGltZW5zaW9ucyIsImNoYW5nZUFtb3VudCIsInNldE1vZGVsVmFsdWUiLCJtaW5NYXhWYWxpZGF0b3IiLCJzdGVwVmFsaWRhdG9yIiwic2V0U2xpZGVyUGVyY2VudCIsInRodW1iVGV4dCIsImFjdGl2ZVRyYWNrIiwidGh1bWJDb250YWluZXIiLCJpc0Rpc2FibGVkR2V0dGVyIiwiZXhhY3RWYWwiLCJwZXJjZW50VG9WYWx1ZSIsInBvc2l0aW9uVG9QZXJjZW50IiwiY2xvc2VzdFZhbCIsInZhbHVlVG9QZXJjZW50IiwiaXNEcmFnZ2luZyIsInNldFNsaWRlckZyb21FdmVudCIsImlzRGlzY3JldGUiLCJhZGp1c3RUaHVtYlBvc2l0aW9uIiwiZG9TbGlkZSIsImlzRGlzYWJsZWRQYXJzZWQiLCJ0aHVtYiIsInN0b3BEaXNhYmxlZFdhdGNoIiwiZGVib3VuY2VkVXBkYXRlQWxsIiwiTWRTdGlja3kiLCJzZXR1cFN0aWNreSIsImNvbnRlbnRDdHJsIiwic3RpY2t5Q2xvbmUiLCJzdGlja3lCYXNlb2Zmc2V0IiwiY29udGVudEVsIiwiZGVib3VuY2VkUmVmcmVzaEVsZW1lbnRzIiwicmVmcmVzaEVsZW1lbnRzIiwicmVmcmVzaFBvc2l0aW9uIiwiY3VycmVudFNjcm9sbFRvcCIsInNldEN1cnJlbnRJdGVtIiwib2Zmc2V0VG9wIiwib2Zmc2V0TGVmdCIsImlzU2Nyb2xsaW5nRG93biIsInByZXZTY3JvbGxUb3AiLCJ0cmFuc2xhdGUiLCJwcmV2Iiwic2V0U3RpY2t5U3RhdGUiLCJ0cmFuc2xhdGVZIiwic2V0dXBBdWdtZW50ZWRTY3JvbGxFdmVudHMiLCJjaGVja1N0aWNreVN1cHBvcnQiLCJzdGlja3lQcm9wIiwidGVzdEVsIiwic3RpY2t5UHJvcHMiLCJ6LWluZGV4IiwibG9vcFNjcm9sbEV2ZW50IiwibGFzdFNjcm9sbFRpbWUiLCJTQ1JPTExfRU5EX0RFTEFZIiwiaXNTY3JvbGxpbmciLCJicm93c2VyU3RpY2t5U3VwcG9ydCIsIiQkc3RpY2t5IiwiTWRTdWJoZWFkZXJEaXJlY3RpdmUiLCIkbWRTdGlja3kiLCJvdXRlckhUTUwiLCJnZXRDb250ZW50IiwiTWRTd2l0Y2giLCJtZENoZWNrYm94RGlyZWN0aXZlIiwiY2hlY2tib3hMaW5rIiwiY2hlY2tib3hEaXJlY3RpdmUiLCJkaXNhYmxlZEdldHRlciIsImRyYWciLCJpc0NoYW5nZWQiLCJhcHBseU1vZGVsVmFsdWUiLCJzd2l0Y2hDb250YWluZXIiLCJtZFRleHRGbG9hdERpcmVjdGl2ZSIsImZpZCIsIm1kRmlkIiwiZGlzYWJsZWRQYXJzZWQiLCJtZElucHV0R3JvdXBEaXJlY3RpdmUiLCJtZElucHV0RGlyZWN0aXZlIiwiaXNOb3RFbXB0eSIsImlucHV0R3JvdXBDdHJsIiwiTWRUb2FzdERpcmVjdGl2ZSIsIk1kVG9hc3RQcm92aWRlciIsInRvYXN0RGVmYXVsdE9wdGlvbnMiLCIkbWRUb2FzdCIsInRvYXN0T3BlbkNsYXNzIiwib25Td2lwZSIsIm1kVG9vbGJhckRpcmVjdGl2ZSIsInNldHVwU2Nyb2xsU2hyaW5rIiwib25NZENvbnRlbnRMb2FkIiwibmV3Q29udGVudEVsIiwiY29udGVudEVsZW1lbnQiLCJkZWJvdW5jZWRDb250ZW50U2Nyb2xsIiwidXBkYXRlVG9vbGJhckhlaWdodCIsInRvb2xiYXJIZWlnaHQiLCJzaHJpbmtTcGVlZEZhY3RvciIsIm9uQ29udGVudFNjcm9sbCIsImRlYm91bmNlZFVwZGF0ZUhlaWdodCIsIm1kU2hyaW5rU3BlZWRGYWN0b3IiLCJtZFNjcm9sbFNocmluayIsIk1kVG9vbHRpcERpcmVjdGl2ZSIsInNldFZpc2libGUiLCJ2aXNpYmxlIiwic2hvd1Rvb2x0aXAiLCJ0b29sdGlwUGFyZW50IiwicG9zaXRpb25Ub29sdGlwIiwiaGlkZVRvb2x0aXAiLCJ0aXBSZWN0IiwidGlwRGlyZWN0aW9uIiwibmV3UG9zaXRpb24iLCJUT09MVElQX1dJTkRPV19FREdFX1NQQUNFIiwibWREZWxheSIsIlRPT0xUSVBfU0hPV19ERUxBWSIsImlzVmlzaWJsZSIsImRlYm91bmNlZE9uUmVzaXplIiwiTWRUYWJJbmtEaXJlY3RpdmUiLCJ1cGRhdGVCYXIiLCJ0YWJzQ3RybCIsImdldFNlbGVjdGVkSXRlbSIsImhpZGVJbmtCYXIiLCJtZE5vQmFyIiwicGFnaW5hdGlvbiIsInRhYkRhdGEiLCJnZXRTZWxlY3RlZEluZGV4IiwidGFicyIsImNsYXNzTmFtZXMiLCJjbGFzc0luZGV4IiwiZGVib3VuY2VkVXBkYXRlQmFyIiwiaW5rQmFyRWxlbWVudCIsIlRhYlBhZ2luYXRpb25EaXJlY3RpdmUiLCJvblRhYkZvY3VzIiwidGFiIiwib2xkVGFiIiwicGFnZUluZGV4IiwiZ2V0UGFnZUZvclRhYiIsInBhZ2UiLCJzZXRQYWdlIiwibG9ja2VkIiwidXNlckNoYW5nZVBhZ2UiLCJzaXplRGF0YSIsIm5ld1BhZ2UiLCJwYWdlcyIsIm5ld1RhYkluZGV4IiwibmV3VGFiIiwidXBkYXRlUGFnaW5hdGlvbiIsImVuYWJsZVBhZ2luYXRpb24iLCJ0YWJzUGFyZW50IiwiZmlsbGVyIiwiZGlzYWJsZVBhZ2luYXRpb24iLCJzbGlkZVRhYkJ1dHRvbnMiLCJ3YWl0Rm9yVmlzaWJsZSIsImRlYm91bmNlZFVwZGF0ZVBhZ2luYXRpb24iLCJjYWxjdWxhdGVUYWJEYXRhIiwibmVlZFBhZ2luYXRpb24iLCJvblRhYnNQYXJlbnRUcmFuc2l0aW9uRW5kIiwicGFnaW5nT2Zmc2V0IiwiJCRwYWdpbmdPZmZzZXQiLCJzaG91bGRTdHJldGNoVGFicyIsInN0cmV0Y2hUYWJzIiwibm9BZGp1c3QiLCJhZGp1c3RGb3JTdHJldGNoZWRUYWJzIiwiY2FudmFzV2lkdGgiLCJjbGllbnRXaWR0aCIsInRhYnNXaWR0aCIsInRhYnNQZXJQYWdlIiwidGFiV2lkdGgiLCIkdGFicyIsImN1cnJlbnRQYWdlIiwiUEFHSU5BVE9SU19XSURUSCIsInRvdGFsV2lkdGgiLCJmaXJzdFRhYkluZGV4IiwibGFzdFRhYkluZGV4IiwidGFiRWxlbWVudHMiLCJsYXN0UGFnZSIsImhhc1ByZXYiLCJjbGlja05leHQiLCJjbGlja1ByZXZpb3VzIiwidGFiVG9Gb2N1cyIsIlRhYkl0ZW1Db250cm9sbGVyIiwib25BZGQiLCJjb250ZW50QXJlYSIsInNob3VsZERpc2Nvbm5lY3RTY29wZSIsImNvbnRlbnRDb250YWluZXIiLCJjb250ZW50U2NvcGUiLCJ0b2dnbGVBbmltYXRpb25DbGFzcyIsInJpZ2h0VG9MZWZ0Iiwib25TZWxlY3QiLCJhcmlhLXNlbGVjdGVkIiwib25EZXNlbGVjdCIsIk1kVGFiRGlyZWN0aXZlIiwidGFiTGFiZWwiLCJ0YWJDb250ZW50IiwidHJhbnNjbHVkZVRhYkNvbnRlbnQiLCJ0YWJJdGVtQ3RybCIsImRlZmF1bHRDbGlja0xpc3RlbmVyIiwid2F0Y2hOZ1JlcGVhdEluZGV4IiwibmV3SW5kZXgiLCJ3YXRjaEFjdGl2ZUF0dHJpYnV0ZSIsImFjdGl2ZVdhdGNoQWN0aW9uIiwiZGVzZWxlY3QiLCJtZEFjdGl2ZSIsIndhdGNoRGlzYWJsZWQiLCJkaXNhYmxlZFdhdGNoQWN0aW9uIiwidGFiSWQiLCJ0YWJDb250ZW50SWQiLCJhcmlhLWxhYmVsbGVkYnkiLCJkZXRhY2hSaXBwbGVGbiIsIk1kVGFic0NvbnRyb2xsZXIiLCJzZWxlY3RlZEluZGV4IiwidGFic0xpc3QiLCJub1Jlc2VsZWN0IiwiaXNTZWxlY3RlZEl0ZW0iLCJ0b0luZGV4IiwiZmlsdGVyRm4iLCJpc1RhYkVuYWJsZWQiLCJUYWJzRGlyZWN0aXZlIiwid2F0Y2hTZWxlY3RlZCIsIm9sZEluZGV4IiwibWRTdHJldGNoVGFicyIsImlzU3RyaW5nTnVtYmVyIiwiYW5ndWxhckxvY2FsU3RvcmFnZSIsInN0b3JhZ2VUeXBlIiwiZXhwaXJ5Iiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJzZXRQcmVmaXgiLCJzZXRTdG9yYWdlVHlwZSIsInNldFN0b3JhZ2VDb29raWUiLCJzZXRTdG9yYWdlQ29va2llRG9tYWluIiwiZG9tYWluIiwic2V0Tm90aWZ5IiwiaXRlbVNldCIsIml0ZW1SZW1vdmUiLCJ3ZWJTdG9yYWdlIiwiZGVyaXZlUXVhbGlmaWVkS2V5IiwiYnJvd3NlclN1cHBvcnRzTG9jYWxTdG9yYWdlIiwicmFuZG9tIiwiYWRkVG9Mb2NhbFN0b3JhZ2UiLCJuZXd2YWx1ZSIsImFkZFRvQ29va2llcyIsImdldEZyb21Mb2NhbFN0b3JhZ2UiLCJnZXRGcm9tQ29va2llcyIsImdldEl0ZW0iLCJyZW1vdmVGcm9tTG9jYWxTdG9yYWdlIiwicmVtb3ZlRnJvbUNvb2tpZXMiLCJnZXRLZXlzRm9yTG9jYWxTdG9yYWdlIiwicHJlZml4TGVuZ3RoIiwiRGVzY3JpcHRpb24iLCJjbGVhckFsbEZyb21Mb2NhbFN0b3JhZ2UiLCJyZWd1bGFyRXhwcmVzc2lvbiIsInRlbXBQcmVmaXgiLCJ0ZXN0UmVnZXgiLCJjbGVhckFsbEZyb21Db29raWVzIiwiYnJvd3NlclN1cHBvcnRzQ29va2llcyIsImNvb2tpZUVuYWJsZWQiLCJleHBpcnlEYXRlIiwiY29va2llRG9tYWluIiwic2V0VGltZSIsInRvR01UU3RyaW5nIiwidGhpc0Nvb2tpZSIsInN0b3JlZFZhbHVlcyIsImdldFN0b3JhZ2VUeXBlIiwiYmluZFRvU2NvcGUiLCJsc0tleSIsImxlbmd0aE9mTG9jYWxTdG9yYWdlIiwic3RvcmFnZSIsImlzU3VwcG9ydGVkIiwiY2xlYXJBbGwiLCJkZXJpdmVLZXkiXSwibWFwcGluZ3MiOiI7Ozs7O0FBNHpoQ0EsUUFBU0EsZ0JBQWVDLEVBQWFDLEVBQVlDLEdBTS9DLFFBQVNDLEdBQVNDLEdBQ2hCLEdBQUlDLEdBQVlDLEVBQVFGLEVBQ3BCRyxTQUFRQyxZQUFZSCxLQUN0QkEsRUFBWUMsRUFBUUYsR0FBU0ssRUFBU0wsR0FHeEMsSUFBSU0sR0FBU0MsRUFBUU4sRUFLckIsT0FKSUUsU0FBUUMsWUFBWUUsS0FDdEJBLEVB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RUFBTzFJLEdBRW5CMEksRUFBTTdHLE9BQU96QyxFQUFLLFNBQVNxa0IsR0FDaEN3Z0csRUFBa0IwQixFQUFPbGlHLElBQ3hCbGlCLEVBQVNtSCxFQUFNdEosTUFLaEJ3bUgsRUFBdUIsV0FHekIsSUFBSSxHQUZBaGlGLEdBQVEsRUFDUmlpRixFQUFVNXBILEVBQVFnbkgsR0FDZHBsSCxFQUFJLEVBQUdBLEVBQUlnb0gsRUFBUXRuSCxPQUFRVixJQUNLLElBQW5DZ29ILEVBQVF6bUgsSUFBSXZCLEdBQUdxRixRQUFRbEYsSUFDeEI0bEMsR0FHSixPQUFPQSxHQUdULFFBQ0VraUYsWUFBYS9CLEVBQ2IwQixlQUFnQkEsRUFDaEJ4L0QsSUFBS2crRCxFQUNMdG5ILElBQUtzbkgsRUFDTHg2RyxJQUFLMjZHLEVBQ0x6a0gsS0FBTThrSCxFQUNONTdGLE9BQVEwN0YsRUFDUndCLFNBQVVuQixFQUNWNy9HLEtBQU0yZ0gsRUFDTk0sVUFBV2xDLEVBQ1h2bEgsT0FBUXFuSCxFQUNSNStGLFFBQ0U4K0YsWUFBYWIsRUFDYmgvRCxJQUFLaytELEVBQ0x4bkgsSUFBS3duSCxFQUNMMTZHLElBQUs0NkcsRUFDTHg3RixPQUFRMjdGLEVBQ1J1QixTQUFVZixTQUtkM25ILE9BQVFBLE9BQU9mIiwiZmlsZSI6ImRlcGVuZGVuY2llcy1taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlIEFuZ3VsYXJKUyB2MS4zLjEzXG4gKiAoYykgMjAxMC0yMDE0IEdvb2dsZSwgSW5jLiBodHRwOi8vYW5ndWxhcmpzLm9yZ1xuICogTGljZW5zZTogTUlUXG4gKi9cbihmdW5jdGlvbih3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHsndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVGhpcyBvYmplY3QgcHJvdmlkZXMgYSB1dGlsaXR5IGZvciBwcm9kdWNpbmcgcmljaCBFcnJvciBtZXNzYWdlcyB3aXRoaW5cbiAqIEFuZ3VsYXIuIEl0IGNhbiBiZSBjYWxsZWQgYXMgZm9sbG93czpcbiAqXG4gKiB2YXIgZXhhbXBsZU1pbkVyciA9IG1pbkVycignZXhhbXBsZScpO1xuICogdGhyb3cgZXhhbXBsZU1pbkVycignb25lJywgJ1RoaXMgezB9IGlzIHsxfScsIGZvbywgYmFyKTtcbiAqXG4gKiBUaGUgYWJvdmUgY3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBtaW5FcnIgaW4gdGhlIGV4YW1wbGUgbmFtZXNwYWNlLiBUaGVcbiAqIHJlc3VsdGluZyBlcnJvciB3aWxsIGhhdmUgYSBuYW1lc3BhY2VkIGVycm9yIGNvZGUgb2YgZXhhbXBsZS5vbmUuICBUaGVcbiAqIHJlc3VsdGluZyBlcnJvciB3aWxsIHJlcGxhY2UgezB9IHdpdGggdGhlIHZhbHVlIG9mIGZvbywgYW5kIHsxfSB3aXRoIHRoZVxuICogdmFsdWUgb2YgYmFyLiBUaGUgb2JqZWN0IGlzIG5vdCByZXN0cmljdGVkIGluIHRoZSBudW1iZXIgb2YgYXJndW1lbnRzIGl0IGNhblxuICogdGFrZS5cbiAqXG4gKiBJZiBmZXdlciBhcmd1bWVudHMgYXJlIHNwZWNpZmllZCB0aGFuIG5lY2Vzc2FyeSBmb3IgaW50ZXJwb2xhdGlvbiwgdGhlIGV4dHJhXG4gKiBpbnRlcnBvbGF0aW9uIG1hcmtlcnMgd2lsbCBiZSBwcmVzZXJ2ZWQgaW4gdGhlIGZpbmFsIHN0cmluZy5cbiAqXG4gKiBTaW5jZSBkYXRhIHdpbGwgYmUgcGFyc2VkIHN0YXRpY2FsbHkgZHVyaW5nIGEgYnVpbGQgc3RlcCwgc29tZSByZXN0cmljdGlvbnNcbiAqIGFyZSBhcHBsaWVkIHdpdGggcmVzcGVjdCB0byBob3cgbWluRXJyIGluc3RhbmNlcyBhcmUgY3JlYXRlZCBhbmQgY2FsbGVkLlxuICogSW5zdGFuY2VzIHNob3VsZCBoYXZlIG5hbWVzIG9mIHRoZSBmb3JtIG5hbWVzcGFjZU1pbkVyciBmb3IgYSBtaW5FcnIgY3JlYXRlZFxuICogdXNpbmcgbWluRXJyKCduYW1lc3BhY2UnKSAuIEVycm9yIGNvZGVzLCBuYW1lc3BhY2VzIGFuZCB0ZW1wbGF0ZSBzdHJpbmdzXG4gKiBzaG91bGQgYWxsIGJlIHN0YXRpYyBzdHJpbmdzLCBub3QgdmFyaWFibGVzIG9yIGdlbmVyYWwgZXhwcmVzc2lvbnMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1vZHVsZSBUaGUgbmFtZXNwYWNlIHRvIHVzZSBmb3IgdGhlIG5ldyBtaW5FcnIgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBFcnJvckNvbnN0cnVjdG9yIEN1c3RvbSBlcnJvciBjb25zdHJ1Y3RvciB0byBiZSBpbnN0YW50aWF0ZWQgd2hlbiByZXR1cm5pbmdcbiAqICAgZXJyb3IgZnJvbSByZXR1cm5lZCBmdW5jdGlvbiwgZm9yIGNhc2VzIHdoZW4gYSBwYXJ0aWN1bGFyIHR5cGUgb2YgZXJyb3IgaXMgdXNlZnVsLlxuICogQHJldHVybnMge2Z1bmN0aW9uKGNvZGU6c3RyaW5nLCB0ZW1wbGF0ZTpzdHJpbmcsIC4uLnRlbXBsYXRlQXJncyk6IEVycm9yfSBtaW5FcnIgaW5zdGFuY2VcbiAqL1xuXG5mdW5jdGlvbiBtaW5FcnIobW9kdWxlLCBFcnJvckNvbnN0cnVjdG9yKSB7XG4gIEVycm9yQ29uc3RydWN0b3IgPSBFcnJvckNvbnN0cnVjdG9yIHx8IEVycm9yO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNvZGUgPSBhcmd1bWVudHNbMF0sXG4gICAgICBwcmVmaXggPSAnWycgKyAobW9kdWxlID8gbW9kdWxlICsgJzonIDogJycpICsgY29kZSArICddICcsXG4gICAgICB0ZW1wbGF0ZSA9IGFyZ3VtZW50c1sxXSxcbiAgICAgIHRlbXBsYXRlQXJncyA9IGFyZ3VtZW50cyxcblxuICAgICAgbWVzc2FnZSwgaTtcblxuICAgIG1lc3NhZ2UgPSBwcmVmaXggKyB0ZW1wbGF0ZS5yZXBsYWNlKC9cXHtcXGQrXFx9L2csIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgICB2YXIgaW5kZXggPSArbWF0Y2guc2xpY2UoMSwgLTEpLCBhcmc7XG5cbiAgICAgIGlmIChpbmRleCArIDIgPCB0ZW1wbGF0ZUFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiB0b0RlYnVnU3RyaW5nKHRlbXBsYXRlQXJnc1tpbmRleCArIDJdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9KTtcblxuICAgIG1lc3NhZ2UgPSBtZXNzYWdlICsgJ1xcbmh0dHA6Ly9lcnJvcnMuYW5ndWxhcmpzLm9yZy8xLjMuMTMvJyArXG4gICAgICAobW9kdWxlID8gbW9kdWxlICsgJy8nIDogJycpICsgY29kZTtcbiAgICBmb3IgKGkgPSAyOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBtZXNzYWdlID0gbWVzc2FnZSArIChpID09IDIgPyAnPycgOiAnJicpICsgJ3AnICsgKGkgLSAyKSArICc9JyArXG4gICAgICAgIGVuY29kZVVSSUNvbXBvbmVudCh0b0RlYnVnU3RyaW5nKGFyZ3VtZW50c1tpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEVycm9yQ29uc3RydWN0b3IobWVzc2FnZSk7XG4gIH07XG59XG5cbi8qIFdlIG5lZWQgdG8gdGVsbCBqc2hpbnQgd2hhdCB2YXJpYWJsZXMgYXJlIGJlaW5nIGV4cG9ydGVkICovXG4vKiBnbG9iYWwgYW5ndWxhcjogdHJ1ZSxcbiAgbXNpZTogdHJ1ZSxcbiAganFMaXRlOiB0cnVlLFxuICBqUXVlcnk6IHRydWUsXG4gIHNsaWNlOiB0cnVlLFxuICBzcGxpY2U6IHRydWUsXG4gIHB1c2g6IHRydWUsXG4gIHRvU3RyaW5nOiB0cnVlLFxuICBuZ01pbkVycjogdHJ1ZSxcbiAgYW5ndWxhck1vZHVsZTogdHJ1ZSxcbiAgdWlkOiB0cnVlLFxuICBSRUdFWF9TVFJJTkdfUkVHRVhQOiB0cnVlLFxuICBWQUxJRElUWV9TVEFURV9QUk9QRVJUWTogdHJ1ZSxcblxuICBsb3dlcmNhc2U6IHRydWUsXG4gIHVwcGVyY2FzZTogdHJ1ZSxcbiAgbWFudWFsTG93ZXJjYXNlOiB0cnVlLFxuICBtYW51YWxVcHBlcmNhc2U6IHRydWUsXG4gIG5vZGVOYW1lXzogdHJ1ZSxcbiAgaXNBcnJheUxpa2U6IHRydWUsXG4gIGZvckVhY2g6IHRydWUsXG4gIHNvcnRlZEtleXM6IHRydWUsXG4gIGZvckVhY2hTb3J0ZWQ6IHRydWUsXG4gIHJldmVyc2VQYXJhbXM6IHRydWUsXG4gIG5leHRVaWQ6IHRydWUsXG4gIHNldEhhc2hLZXk6IHRydWUsXG4gIGV4dGVuZDogdHJ1ZSxcbiAgaW50OiB0cnVlLFxuICBpbmhlcml0OiB0cnVlLFxuICBub29wOiB0cnVlLFxuICBpZGVudGl0eTogdHJ1ZSxcbiAgdmFsdWVGbjogdHJ1ZSxcbiAgaXNVbmRlZmluZWQ6IHRydWUsXG4gIGlzRGVmaW5lZDogdHJ1ZSxcbiAgaXNPYmplY3Q6IHRydWUsXG4gIGlzU3RyaW5nOiB0cnVlLFxuICBpc051bWJlcjogdHJ1ZSxcbiAgaXNEYXRlOiB0cnVlLFxuICBpc0FycmF5OiB0cnVlLFxuICBpc0Z1bmN0aW9uOiB0cnVlLFxuICBpc1JlZ0V4cDogdHJ1ZSxcbiAgaXNXaW5kb3c6IHRydWUsXG4gIGlzU2NvcGU6IHRydWUsXG4gIGlzRmlsZTogdHJ1ZSxcbiAgaXNGb3JtRGF0YTogdHJ1ZSxcbiAgaXNCbG9iOiB0cnVlLFxuICBpc0Jvb2xlYW46IHRydWUsXG4gIGlzUHJvbWlzZUxpa2U6IHRydWUsXG4gIHRyaW06IHRydWUsXG4gIGVzY2FwZUZvclJlZ2V4cDogdHJ1ZSxcbiAgaXNFbGVtZW50OiB0cnVlLFxuICBtYWtlTWFwOiB0cnVlLFxuICBpbmNsdWRlczogdHJ1ZSxcbiAgYXJyYXlSZW1vdmU6IHRydWUsXG4gIGNvcHk6IHRydWUsXG4gIHNoYWxsb3dDb3B5OiB0cnVlLFxuICBlcXVhbHM6IHRydWUsXG4gIGNzcDogdHJ1ZSxcbiAgY29uY2F0OiB0cnVlLFxuICBzbGljZUFyZ3M6IHRydWUsXG4gIGJpbmQ6IHRydWUsXG4gIHRvSnNvblJlcGxhY2VyOiB0cnVlLFxuICB0b0pzb246IHRydWUsXG4gIGZyb21Kc29uOiB0cnVlLFxuICBzdGFydGluZ1RhZzogdHJ1ZSxcbiAgdHJ5RGVjb2RlVVJJQ29tcG9uZW50OiB0cnVlLFxuICBwYXJzZUtleVZhbHVlOiB0cnVlLFxuICB0b0tleVZhbHVlOiB0cnVlLFxuICBlbmNvZGVVcmlTZWdtZW50OiB0cnVlLFxuICBlbmNvZGVVcmlRdWVyeTogdHJ1ZSxcbiAgYW5ndWxhckluaXQ6IHRydWUsXG4gIGJvb3RzdHJhcDogdHJ1ZSxcbiAgZ2V0VGVzdGFiaWxpdHk6IHRydWUsXG4gIHNuYWtlX2Nhc2U6IHRydWUsXG4gIGJpbmRKUXVlcnk6IHRydWUsXG4gIGFzc2VydEFyZzogdHJ1ZSxcbiAgYXNzZXJ0QXJnRm46IHRydWUsXG4gIGFzc2VydE5vdEhhc093blByb3BlcnR5OiB0cnVlLFxuICBnZXR0ZXI6IHRydWUsXG4gIGdldEJsb2NrTm9kZXM6IHRydWUsXG4gIGhhc093blByb3BlcnR5OiB0cnVlLFxuICBjcmVhdGVNYXA6IHRydWUsXG5cbiAgTk9ERV9UWVBFX0VMRU1FTlQ6IHRydWUsXG4gIE5PREVfVFlQRV9URVhUOiB0cnVlLFxuICBOT0RFX1RZUEVfQ09NTUVOVDogdHJ1ZSxcbiAgTk9ERV9UWVBFX0RPQ1VNRU5UOiB0cnVlLFxuICBOT0RFX1RZUEVfRE9DVU1FTlRfRlJBR01FTlQ6IHRydWUsXG4qL1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBAbmdkb2MgbW9kdWxlXG4gKiBAbmFtZSBuZ1xuICogQG1vZHVsZSBuZ1xuICogQGRlc2NyaXB0aW9uXG4gKlxuICogIyBuZyAoY29yZSBtb2R1bGUpXG4gKiBUaGUgbmcgbW9kdWxlIGlzIGxvYWRlZCBieSBkZWZhdWx0IHdoZW4gYW4gQW5ndWxhckpTIGFwcGxpY2F0aW9uIGlzIHN0YXJ0ZWQuIFRoZSBtb2R1bGUgaXRzZWxmXG4gKiBjb250YWlucyB0aGUgZXNzZW50aWFsIGNvbXBvbmVudHMgZm9yIGFuIEFuZ3VsYXJKUyBhcHBsaWNhdGlvbiB0byBmdW5jdGlvbi4gVGhlIHRhYmxlIGJlbG93XG4gKiBsaXN0cyBhIGhpZ2ggbGV2ZWwgYnJlYWtkb3duIG9mIGVhY2ggb2YgdGhlIHNlcnZpY2VzL2ZhY3RvcmllcywgZmlsdGVycywgZGlyZWN0aXZlcyBhbmQgdGVzdGluZ1xuICogY29tcG9uZW50cyBhdmFpbGFibGUgd2l0aGluIHRoaXMgY29yZSBtb2R1bGUuXG4gKlxuICogPGRpdiBkb2MtbW9kdWxlLWNvbXBvbmVudHM9XCJuZ1wiPjwvZGl2PlxuICovXG5cbnZhciBSRUdFWF9TVFJJTkdfUkVHRVhQID0gL15cXC8oLispXFwvKFthLXpdKikkLztcblxuLy8gVGhlIG5hbWUgb2YgYSBmb3JtIGNvbnRyb2wncyBWYWxpZGl0eVN0YXRlIHByb3BlcnR5LlxuLy8gVGhpcyBpcyB1c2VkIHNvIHRoYXQgaXQncyBwb3NzaWJsZSBmb3IgaW50ZXJuYWwgdGVzdHMgdG8gY3JlYXRlIG1vY2sgVmFsaWRpdHlTdGF0ZXMuXG52YXIgVkFMSURJVFlfU1RBVEVfUFJPUEVSVFkgPSAndmFsaWRpdHknO1xuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5sb3dlcmNhc2VcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uIENvbnZlcnRzIHRoZSBzcGVjaWZpZWQgc3RyaW5nIHRvIGxvd2VyY2FzZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgU3RyaW5nIHRvIGJlIGNvbnZlcnRlZCB0byBsb3dlcmNhc2UuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBMb3dlcmNhc2VkIHN0cmluZy5cbiAqL1xudmFyIGxvd2VyY2FzZSA9IGZ1bmN0aW9uKHN0cmluZykge3JldHVybiBpc1N0cmluZyhzdHJpbmcpID8gc3RyaW5nLnRvTG93ZXJDYXNlKCkgOiBzdHJpbmc7fTtcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLnVwcGVyY2FzZVxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb24gQ29udmVydHMgdGhlIHNwZWNpZmllZCBzdHJpbmcgdG8gdXBwZXJjYXNlLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBTdHJpbmcgdG8gYmUgY29udmVydGVkIHRvIHVwcGVyY2FzZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFVwcGVyY2FzZWQgc3RyaW5nLlxuICovXG52YXIgdXBwZXJjYXNlID0gZnVuY3Rpb24oc3RyaW5nKSB7cmV0dXJuIGlzU3RyaW5nKHN0cmluZykgPyBzdHJpbmcudG9VcHBlckNhc2UoKSA6IHN0cmluZzt9O1xuXG5cbnZhciBtYW51YWxMb3dlcmNhc2UgPSBmdW5jdGlvbihzKSB7XG4gIC8qIGpzaGludCBiaXR3aXNlOiBmYWxzZSAqL1xuICByZXR1cm4gaXNTdHJpbmcocylcbiAgICAgID8gcy5yZXBsYWNlKC9bQS1aXS9nLCBmdW5jdGlvbihjaCkge3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoLmNoYXJDb2RlQXQoMCkgfCAzMik7fSlcbiAgICAgIDogcztcbn07XG52YXIgbWFudWFsVXBwZXJjYXNlID0gZnVuY3Rpb24ocykge1xuICAvKiBqc2hpbnQgYml0d2lzZTogZmFsc2UgKi9cbiAgcmV0dXJuIGlzU3RyaW5nKHMpXG4gICAgICA/IHMucmVwbGFjZSgvW2Etel0vZywgZnVuY3Rpb24oY2gpIHtyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjaC5jaGFyQ29kZUF0KDApICYgfjMyKTt9KVxuICAgICAgOiBzO1xufTtcblxuXG4vLyBTdHJpbmcjdG9Mb3dlckNhc2UgYW5kIFN0cmluZyN0b1VwcGVyQ2FzZSBkb24ndCBwcm9kdWNlIGNvcnJlY3QgcmVzdWx0cyBpbiBicm93c2VycyB3aXRoIFR1cmtpc2hcbi8vIGxvY2FsZSwgZm9yIHRoaXMgcmVhc29uIHdlIG5lZWQgdG8gZGV0ZWN0IHRoaXMgY2FzZSBhbmQgcmVkZWZpbmUgbG93ZXJjYXNlL3VwcGVyY2FzZSBtZXRob2RzXG4vLyB3aXRoIGNvcnJlY3QgYnV0IHNsb3dlciBhbHRlcm5hdGl2ZXMuXG5pZiAoJ2knICE9PSAnSScudG9Mb3dlckNhc2UoKSkge1xuICBsb3dlcmNhc2UgPSBtYW51YWxMb3dlcmNhc2U7XG4gIHVwcGVyY2FzZSA9IG1hbnVhbFVwcGVyY2FzZTtcbn1cblxuXG52YXJcbiAgICBtc2llLCAgICAgICAgICAgICAvLyBob2xkcyBtYWpvciB2ZXJzaW9uIG51bWJlciBmb3IgSUUsIG9yIE5hTiBpZiBVQSBpcyBub3QgSUUuXG4gICAganFMaXRlLCAgICAgICAgICAgLy8gZGVsYXkgYmluZGluZyBzaW5jZSBqUXVlcnkgY291bGQgYmUgbG9hZGVkIGFmdGVyIHVzLlxuICAgIGpRdWVyeSwgICAgICAgICAgIC8vIGRlbGF5IGJpbmRpbmdcbiAgICBzbGljZSAgICAgICAgICAgICA9IFtdLnNsaWNlLFxuICAgIHNwbGljZSAgICAgICAgICAgID0gW10uc3BsaWNlLFxuICAgIHB1c2ggICAgICAgICAgICAgID0gW10ucHVzaCxcbiAgICB0b1N0cmluZyAgICAgICAgICA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsXG4gICAgbmdNaW5FcnIgICAgICAgICAgPSBtaW5FcnIoJ25nJyksXG5cbiAgICAvKiogQG5hbWUgYW5ndWxhciAqL1xuICAgIGFuZ3VsYXIgICAgICAgICAgID0gd2luZG93LmFuZ3VsYXIgfHwgKHdpbmRvdy5hbmd1bGFyID0ge30pLFxuICAgIGFuZ3VsYXJNb2R1bGUsXG4gICAgdWlkICAgICAgICAgICAgICAgPSAwO1xuXG4vKipcbiAqIGRvY3VtZW50TW9kZSBpcyBhbiBJRS1vbmx5IHByb3BlcnR5XG4gKiBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvY2MxOTY5ODgodj12cy44NSkuYXNweFxuICovXG5tc2llID0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlO1xuXG5cbi8qKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gb2JqXG4gKiBAcmV0dXJuIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgYG9iamAgaXMgYW4gYXJyYXkgb3IgYXJyYXktbGlrZSBvYmplY3QgKE5vZGVMaXN0LCBBcmd1bWVudHMsXG4gKiAgICAgICAgICAgICAgICAgICBTdHJpbmcgLi4uKVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZShvYmopIHtcbiAgaWYgKG9iaiA9PSBudWxsIHx8IGlzV2luZG93KG9iaikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgbGVuZ3RoID0gb2JqLmxlbmd0aDtcblxuICBpZiAob2JqLm5vZGVUeXBlID09PSBOT0RFX1RZUEVfRUxFTUVOVCAmJiBsZW5ndGgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBpc1N0cmluZyhvYmopIHx8IGlzQXJyYXkob2JqKSB8fCBsZW5ndGggPT09IDAgfHxcbiAgICAgICAgIHR5cGVvZiBsZW5ndGggPT09ICdudW1iZXInICYmIGxlbmd0aCA+IDAgJiYgKGxlbmd0aCAtIDEpIGluIG9iajtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuZm9yRWFjaFxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEludm9rZXMgdGhlIGBpdGVyYXRvcmAgZnVuY3Rpb24gb25jZSBmb3IgZWFjaCBpdGVtIGluIGBvYmpgIGNvbGxlY3Rpb24sIHdoaWNoIGNhbiBiZSBlaXRoZXIgYW5cbiAqIG9iamVjdCBvciBhbiBhcnJheS4gVGhlIGBpdGVyYXRvcmAgZnVuY3Rpb24gaXMgaW52b2tlZCB3aXRoIGBpdGVyYXRvcih2YWx1ZSwga2V5LCBvYmopYCwgd2hlcmUgYHZhbHVlYFxuICogaXMgdGhlIHZhbHVlIG9mIGFuIG9iamVjdCBwcm9wZXJ0eSBvciBhbiBhcnJheSBlbGVtZW50LCBga2V5YCBpcyB0aGUgb2JqZWN0IHByb3BlcnR5IGtleSBvclxuICogYXJyYXkgZWxlbWVudCBpbmRleCBhbmQgb2JqIGlzIHRoZSBgb2JqYCBpdHNlbGYuIFNwZWNpZnlpbmcgYSBgY29udGV4dGAgZm9yIHRoZSBmdW5jdGlvbiBpcyBvcHRpb25hbC5cbiAqXG4gKiBJdCBpcyB3b3J0aCBub3RpbmcgdGhhdCBgLmZvckVhY2hgIGRvZXMgbm90IGl0ZXJhdGUgb3ZlciBpbmhlcml0ZWQgcHJvcGVydGllcyBiZWNhdXNlIGl0IGZpbHRlcnNcbiAqIHVzaW5nIHRoZSBgaGFzT3duUHJvcGVydHlgIG1ldGhvZC5cbiAqXG4gKiBVbmxpa2UgRVMyNjInc1xuICogW0FycmF5LnByb3RvdHlwZS5mb3JFYWNoXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNS4xLyNzZWMtMTUuNC40LjE4KSxcbiAqIFByb3ZpZGluZyAndW5kZWZpbmVkJyBvciAnbnVsbCcgdmFsdWVzIGZvciBgb2JqYCB3aWxsIG5vdCB0aHJvdyBhIFR5cGVFcnJvciwgYnV0IHJhdGhlciBqdXN0XG4gKiByZXR1cm4gdGhlIHZhbHVlIHByb3ZpZGVkLlxuICpcbiAgIGBgYGpzXG4gICAgIHZhciB2YWx1ZXMgPSB7bmFtZTogJ21pc2tvJywgZ2VuZGVyOiAnbWFsZSd9O1xuICAgICB2YXIgbG9nID0gW107XG4gICAgIGFuZ3VsYXIuZm9yRWFjaCh2YWx1ZXMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICB0aGlzLnB1c2goa2V5ICsgJzogJyArIHZhbHVlKTtcbiAgICAgfSwgbG9nKTtcbiAgICAgZXhwZWN0KGxvZykudG9FcXVhbChbJ25hbWU6IG1pc2tvJywgJ2dlbmRlcjogbWFsZSddKTtcbiAgIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogT2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdG9yIEl0ZXJhdG9yIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtPYmplY3Q9fSBjb250ZXh0IE9iamVjdCB0byBiZWNvbWUgY29udGV4dCAoYHRoaXNgKSBmb3IgdGhlIGl0ZXJhdG9yIGZ1bmN0aW9uLlxuICogQHJldHVybnMge09iamVjdHxBcnJheX0gUmVmZXJlbmNlIHRvIGBvYmpgLlxuICovXG5cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBpdGVyYXRvciwgY29udGV4dCkge1xuICB2YXIga2V5LCBsZW5ndGg7XG4gIGlmIChvYmopIHtcbiAgICBpZiAoaXNGdW5jdGlvbihvYmopKSB7XG4gICAgICBmb3IgKGtleSBpbiBvYmopIHtcbiAgICAgICAgLy8gTmVlZCB0byBjaGVjayBpZiBoYXNPd25Qcm9wZXJ0eSBleGlzdHMsXG4gICAgICAgIC8vIGFzIG9uIElFOCB0aGUgcmVzdWx0IG9mIHF1ZXJ5U2VsZWN0b3JBbGwgaXMgYW4gb2JqZWN0IHdpdGhvdXQgYSBoYXNPd25Qcm9wZXJ0eSBmdW5jdGlvblxuICAgICAgICBpZiAoa2V5ICE9ICdwcm90b3R5cGUnICYmIGtleSAhPSAnbGVuZ3RoJyAmJiBrZXkgIT0gJ25hbWUnICYmICghb2JqLmhhc093blByb3BlcnR5IHx8IG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSkge1xuICAgICAgICAgIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNBcnJheShvYmopIHx8IGlzQXJyYXlMaWtlKG9iaikpIHtcbiAgICAgIHZhciBpc1ByaW1pdGl2ZSA9IHR5cGVvZiBvYmogIT09ICdvYmplY3QnO1xuICAgICAgZm9yIChrZXkgPSAwLCBsZW5ndGggPSBvYmoubGVuZ3RoOyBrZXkgPCBsZW5ndGg7IGtleSsrKSB7XG4gICAgICAgIGlmIChpc1ByaW1pdGl2ZSB8fCBrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvYmouZm9yRWFjaCAmJiBvYmouZm9yRWFjaCAhPT0gZm9yRWFjaCkge1xuICAgICAgICBvYmouZm9yRWFjaChpdGVyYXRvciwgY29udGV4dCwgb2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBzb3J0ZWRLZXlzKG9iaikge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5zb3J0KCk7XG59XG5cbmZ1bmN0aW9uIGZvckVhY2hTb3J0ZWQob2JqLCBpdGVyYXRvciwgY29udGV4dCkge1xuICB2YXIga2V5cyA9IHNvcnRlZEtleXMob2JqKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpba2V5c1tpXV0sIGtleXNbaV0pO1xuICB9XG4gIHJldHVybiBrZXlzO1xufVxuXG5cbi8qKlxuICogd2hlbiB1c2luZyBmb3JFYWNoIHRoZSBwYXJhbXMgYXJlIHZhbHVlLCBrZXksIGJ1dCBpdCBpcyBvZnRlbiB1c2VmdWwgdG8gaGF2ZSBrZXksIHZhbHVlLlxuICogQHBhcmFtIHtmdW5jdGlvbihzdHJpbmcsICopfSBpdGVyYXRvckZuXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oKiwgc3RyaW5nKX1cbiAqL1xuZnVuY3Rpb24gcmV2ZXJzZVBhcmFtcyhpdGVyYXRvckZuKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSwga2V5KSB7IGl0ZXJhdG9yRm4oa2V5LCB2YWx1ZSk7IH07XG59XG5cbi8qKlxuICogQSBjb25zaXN0ZW50IHdheSBvZiBjcmVhdGluZyB1bmlxdWUgSURzIGluIGFuZ3VsYXIuXG4gKlxuICogVXNpbmcgc2ltcGxlIG51bWJlcnMgYWxsb3dzIHVzIHRvIGdlbmVyYXRlIDI4LjYgbWlsbGlvbiB1bmlxdWUgaWRzIHBlciBzZWNvbmQgZm9yIDEwIHllYXJzIGJlZm9yZVxuICogd2UgaGl0IG51bWJlciBwcmVjaXNpb24gaXNzdWVzIGluIEphdmFTY3JpcHQuXG4gKlxuICogTWF0aC5wb3coMiw1MykgLyA2MCAvIDYwIC8gMjQgLyAzNjUgLyAxMCA9IDI4LjZNXG4gKlxuICogQHJldHVybnMge251bWJlcn0gYW4gdW5pcXVlIGFscGhhLW51bWVyaWMgc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIG5leHRVaWQoKSB7XG4gIHJldHVybiArK3VpZDtcbn1cblxuXG4vKipcbiAqIFNldCBvciBjbGVhciB0aGUgaGFzaGtleSBmb3IgYW4gb2JqZWN0LlxuICogQHBhcmFtIG9iaiBvYmplY3RcbiAqIEBwYXJhbSBoIHRoZSBoYXNoa2V5ICghdHJ1dGh5IHRvIGRlbGV0ZSB0aGUgaGFzaGtleSlcbiAqL1xuZnVuY3Rpb24gc2V0SGFzaEtleShvYmosIGgpIHtcbiAgaWYgKGgpIHtcbiAgICBvYmouJCRoYXNoS2V5ID0gaDtcbiAgfSBlbHNlIHtcbiAgICBkZWxldGUgb2JqLiQkaGFzaEtleTtcbiAgfVxufVxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5leHRlbmRcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBFeHRlbmRzIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QgYGRzdGAgYnkgY29weWluZyBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzIGZyb20gdGhlIGBzcmNgIG9iamVjdChzKVxuICogdG8gYGRzdGAuIFlvdSBjYW4gc3BlY2lmeSBtdWx0aXBsZSBgc3JjYCBvYmplY3RzLiBJZiB5b3Ugd2FudCB0byBwcmVzZXJ2ZSBvcmlnaW5hbCBvYmplY3RzLCB5b3UgY2FuIGRvIHNvXG4gKiBieSBwYXNzaW5nIGFuIGVtcHR5IG9iamVjdCBhcyB0aGUgdGFyZ2V0OiBgdmFyIG9iamVjdCA9IGFuZ3VsYXIuZXh0ZW5kKHt9LCBvYmplY3QxLCBvYmplY3QyKWAuXG4gKiBOb3RlOiBLZWVwIGluIG1pbmQgdGhhdCBgYW5ndWxhci5leHRlbmRgIGRvZXMgbm90IHN1cHBvcnQgcmVjdXJzaXZlIG1lcmdlIChkZWVwIGNvcHkpLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkc3QgRGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHsuLi5PYmplY3R9IHNyYyBTb3VyY2Ugb2JqZWN0KHMpLlxuICogQHJldHVybnMge09iamVjdH0gUmVmZXJlbmNlIHRvIGBkc3RgLlxuICovXG5mdW5jdGlvbiBleHRlbmQoZHN0KSB7XG4gIHZhciBoID0gZHN0LiQkaGFzaEtleTtcblxuICBmb3IgKHZhciBpID0gMSwgaWkgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgIHZhciBvYmogPSBhcmd1bWVudHNbaV07XG4gICAgaWYgKG9iaikge1xuICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgICAgZm9yICh2YXIgaiA9IDAsIGpqID0ga2V5cy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzW2pdO1xuICAgICAgICBkc3Rba2V5XSA9IG9ialtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHNldEhhc2hLZXkoZHN0LCBoKTtcbiAgcmV0dXJuIGRzdDtcbn1cblxuZnVuY3Rpb24gaW50KHN0cikge1xuICByZXR1cm4gcGFyc2VJbnQoc3RyLCAxMCk7XG59XG5cblxuZnVuY3Rpb24gaW5oZXJpdChwYXJlbnQsIGV4dHJhKSB7XG4gIHJldHVybiBleHRlbmQoT2JqZWN0LmNyZWF0ZShwYXJlbnQpLCBleHRyYSk7XG59XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLm5vb3BcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgbm8gb3BlcmF0aW9ucy4gVGhpcyBmdW5jdGlvbiBjYW4gYmUgdXNlZnVsIHdoZW4gd3JpdGluZyBjb2RlIGluIHRoZVxuICogZnVuY3Rpb25hbCBzdHlsZS5cbiAgIGBgYGpzXG4gICAgIGZ1bmN0aW9uIGZvbyhjYWxsYmFjaykge1xuICAgICAgIHZhciByZXN1bHQgPSBjYWxjdWxhdGVSZXN1bHQoKTtcbiAgICAgICAoY2FsbGJhY2sgfHwgYW5ndWxhci5ub29wKShyZXN1bHQpO1xuICAgICB9XG4gICBgYGBcbiAqL1xuZnVuY3Rpb24gbm9vcCgpIHt9XG5ub29wLiRpbmplY3QgPSBbXTtcblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5pZGVudGl0eVxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGl0cyBmaXJzdCBhcmd1bWVudC4gVGhpcyBmdW5jdGlvbiBpcyB1c2VmdWwgd2hlbiB3cml0aW5nIGNvZGUgaW4gdGhlXG4gKiBmdW5jdGlvbmFsIHN0eWxlLlxuICpcbiAgIGBgYGpzXG4gICAgIGZ1bmN0aW9uIHRyYW5zZm9ybWVyKHRyYW5zZm9ybWF0aW9uRm4sIHZhbHVlKSB7XG4gICAgICAgcmV0dXJuICh0cmFuc2Zvcm1hdGlvbkZuIHx8IGFuZ3VsYXIuaWRlbnRpdHkpKHZhbHVlKTtcbiAgICAgfTtcbiAgIGBgYFxuICAqIEBwYXJhbSB7Kn0gdmFsdWUgdG8gYmUgcmV0dXJuZWQuXG4gICogQHJldHVybnMgeyp9IHRoZSB2YWx1ZSBwYXNzZWQgaW4uXG4gKi9cbmZ1bmN0aW9uIGlkZW50aXR5KCQpIHtyZXR1cm4gJDt9XG5pZGVudGl0eS4kaW5qZWN0ID0gW107XG5cblxuZnVuY3Rpb24gdmFsdWVGbih2YWx1ZSkge3JldHVybiBmdW5jdGlvbigpIHtyZXR1cm4gdmFsdWU7fTt9XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlzVW5kZWZpbmVkXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyB1bmRlZmluZWQuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIHVuZGVmaW5lZC5cbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHtyZXR1cm4gdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJzt9XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuaXNEZWZpbmVkXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyBkZWZpbmVkLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBkZWZpbmVkLlxuICovXG5mdW5jdGlvbiBpc0RlZmluZWQodmFsdWUpIHtyZXR1cm4gdHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJzt9XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuaXNPYmplY3RcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGFuIGBPYmplY3RgLiBVbmxpa2UgYHR5cGVvZmAgaW4gSmF2YVNjcmlwdCwgYG51bGxgcyBhcmUgbm90XG4gKiBjb25zaWRlcmVkIHRvIGJlIG9iamVjdHMuIE5vdGUgdGhhdCBKYXZhU2NyaXB0IGFycmF5cyBhcmUgb2JqZWN0cy5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYW4gYE9iamVjdGAgYnV0IG5vdCBgbnVsbGAuXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIC8vIGh0dHA6Ly9qc3BlcmYuY29tL2lzb2JqZWN0NFxuICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jztcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5pc1N0cmluZ1xuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgYSBgU3RyaW5nYC5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBgU3RyaW5nYC5cbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtyZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJzt9XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuaXNOdW1iZXJcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGEgYE51bWJlcmAuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGEgYE51bWJlcmAuXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcic7fVxuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlzRGF0ZVxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERldGVybWluZXMgaWYgYSB2YWx1ZSBpcyBhIGRhdGUuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGEgYERhdGVgLlxuICovXG5mdW5jdGlvbiBpc0RhdGUodmFsdWUpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuaXNBcnJheVxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgYW4gYEFycmF5YC5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYW4gYEFycmF5YC5cbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5pc0Z1bmN0aW9uXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyBhIGBGdW5jdGlvbmAuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGEgYEZ1bmN0aW9uYC5cbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge3JldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7fVxuXG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiBhIHZhbHVlIGlzIGEgcmVndWxhciBleHByZXNzaW9uIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGEgYFJlZ0V4cGAuXG4gKi9cbmZ1bmN0aW9uIGlzUmVnRXhwKHZhbHVlKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG5cblxuLyoqXG4gKiBDaGVja3MgaWYgYG9iamAgaXMgYSB3aW5kb3cgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IG9iaiBPYmplY3QgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGBvYmpgIGlzIGEgd2luZG93IG9iai5cbiAqL1xuZnVuY3Rpb24gaXNXaW5kb3cob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLndpbmRvdyA9PT0gb2JqO1xufVxuXG5cbmZ1bmN0aW9uIGlzU2NvcGUob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLiRldmFsQXN5bmMgJiYgb2JqLiR3YXRjaDtcbn1cblxuXG5mdW5jdGlvbiBpc0ZpbGUob2JqKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEZpbGVdJztcbn1cblxuXG5mdW5jdGlvbiBpc0Zvcm1EYXRhKG9iaikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBGb3JtRGF0YV0nO1xufVxuXG5cbmZ1bmN0aW9uIGlzQmxvYihvYmopIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG5cbmZ1bmN0aW9uIGlzQm9vbGVhbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbic7XG59XG5cblxuZnVuY3Rpb24gaXNQcm9taXNlTGlrZShvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBpc0Z1bmN0aW9uKG9iai50aGVuKTtcbn1cblxuXG52YXIgdHJpbSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBpc1N0cmluZyh2YWx1ZSkgPyB2YWx1ZS50cmltKCkgOiB2YWx1ZTtcbn07XG5cbi8vIENvcGllZCBmcm9tOlxuLy8gaHR0cDovL2RvY3MuY2xvc3VyZS1saWJyYXJ5Lmdvb2dsZWNvZGUuY29tL2dpdC9sb2NhbF9jbG9zdXJlX2dvb2dfc3RyaW5nX3N0cmluZy5qcy5zb3VyY2UuaHRtbCNsaW5lMTAyMVxuLy8gUHJlcmVxOiBzIGlzIGEgc3RyaW5nLlxudmFyIGVzY2FwZUZvclJlZ2V4cCA9IGZ1bmN0aW9uKHMpIHtcbiAgcmV0dXJuIHMucmVwbGFjZSgvKFstKClcXFtcXF17fSs/Ki4kXFxefCw6IzwhXFxcXF0pL2csICdcXFxcJDEnKS5cbiAgICAgICAgICAgcmVwbGFjZSgvXFx4MDgvZywgJ1xcXFx4MDgnKTtcbn07XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuaXNFbGVtZW50XG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyBhIERPTSBlbGVtZW50IChvciB3cmFwcGVkIGpRdWVyeSBlbGVtZW50KS5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBET00gZWxlbWVudCAob3Igd3JhcHBlZCBqUXVlcnkgZWxlbWVudCkuXG4gKi9cbmZ1bmN0aW9uIGlzRWxlbWVudChub2RlKSB7XG4gIHJldHVybiAhIShub2RlICYmXG4gICAgKG5vZGUubm9kZU5hbWUgIC8vIHdlIGFyZSBhIGRpcmVjdCBlbGVtZW50XG4gICAgfHwgKG5vZGUucHJvcCAmJiBub2RlLmF0dHIgJiYgbm9kZS5maW5kKSkpOyAgLy8gd2UgaGF2ZSBhbiBvbiBhbmQgZmluZCBtZXRob2QgcGFydCBvZiBqUXVlcnkgQVBJXG59XG5cbi8qKlxuICogQHBhcmFtIHN0ciAna2V5MSxrZXkyLC4uLidcbiAqIEByZXR1cm5zIHtvYmplY3R9IGluIHRoZSBmb3JtIG9mIHtrZXkxOnRydWUsIGtleTI6dHJ1ZSwgLi4ufVxuICovXG5mdW5jdGlvbiBtYWtlTWFwKHN0cikge1xuICB2YXIgb2JqID0ge30sIGl0ZW1zID0gc3RyLnNwbGl0KFwiLFwiKSwgaTtcbiAgZm9yIChpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKVxuICAgIG9ialtpdGVtc1tpXV0gPSB0cnVlO1xuICByZXR1cm4gb2JqO1xufVxuXG5cbmZ1bmN0aW9uIG5vZGVOYW1lXyhlbGVtZW50KSB7XG4gIHJldHVybiBsb3dlcmNhc2UoZWxlbWVudC5ub2RlTmFtZSB8fCAoZWxlbWVudFswXSAmJiBlbGVtZW50WzBdLm5vZGVOYW1lKSk7XG59XG5cbmZ1bmN0aW9uIGluY2x1ZGVzKGFycmF5LCBvYmopIHtcbiAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYXJyYXksIG9iaikgIT0gLTE7XG59XG5cbmZ1bmN0aW9uIGFycmF5UmVtb3ZlKGFycmF5LCB2YWx1ZSkge1xuICB2YXIgaW5kZXggPSBhcnJheS5pbmRleE9mKHZhbHVlKTtcbiAgaWYgKGluZGV4ID49IDApXG4gICAgYXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcbiAgcmV0dXJuIHZhbHVlO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5jb3B5XG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ3JlYXRlcyBhIGRlZXAgY29weSBvZiBgc291cmNlYCwgd2hpY2ggc2hvdWxkIGJlIGFuIG9iamVjdCBvciBhbiBhcnJheS5cbiAqXG4gKiAqIElmIG5vIGRlc3RpbmF0aW9uIGlzIHN1cHBsaWVkLCBhIGNvcHkgb2YgdGhlIG9iamVjdCBvciBhcnJheSBpcyBjcmVhdGVkLlxuICogKiBJZiBhIGRlc3RpbmF0aW9uIGlzIHByb3ZpZGVkLCBhbGwgb2YgaXRzIGVsZW1lbnRzIChmb3IgYXJyYXlzKSBvciBwcm9wZXJ0aWVzIChmb3Igb2JqZWN0cylcbiAqICAgYXJlIGRlbGV0ZWQgYW5kIHRoZW4gYWxsIGVsZW1lbnRzL3Byb3BlcnRpZXMgZnJvbSB0aGUgc291cmNlIGFyZSBjb3BpZWQgdG8gaXQuXG4gKiAqIElmIGBzb3VyY2VgIGlzIG5vdCBhbiBvYmplY3Qgb3IgYXJyYXkgKGluYy4gYG51bGxgIGFuZCBgdW5kZWZpbmVkYCksIGBzb3VyY2VgIGlzIHJldHVybmVkLlxuICogKiBJZiBgc291cmNlYCBpcyBpZGVudGljYWwgdG8gJ2Rlc3RpbmF0aW9uJyBhbiBleGNlcHRpb24gd2lsbCBiZSB0aHJvd24uXG4gKlxuICogQHBhcmFtIHsqfSBzb3VyY2UgVGhlIHNvdXJjZSB0aGF0IHdpbGwgYmUgdXNlZCB0byBtYWtlIGEgY29weS5cbiAqICAgICAgICAgICAgICAgICAgIENhbiBiZSBhbnkgdHlwZSwgaW5jbHVkaW5nIHByaW1pdGl2ZXMsIGBudWxsYCwgYW5kIGB1bmRlZmluZWRgLlxuICogQHBhcmFtIHsoT2JqZWN0fEFycmF5KT19IGRlc3RpbmF0aW9uIERlc3RpbmF0aW9uIGludG8gd2hpY2ggdGhlIHNvdXJjZSBpcyBjb3BpZWQuIElmXG4gKiAgICAgcHJvdmlkZWQsIG11c3QgYmUgb2YgdGhlIHNhbWUgdHlwZSBhcyBgc291cmNlYC5cbiAqIEByZXR1cm5zIHsqfSBUaGUgY29weSBvciB1cGRhdGVkIGBkZXN0aW5hdGlvbmAsIGlmIGBkZXN0aW5hdGlvbmAgd2FzIHNwZWNpZmllZC5cbiAqXG4gKiBAZXhhbXBsZVxuIDxleGFtcGxlIG1vZHVsZT1cImNvcHlFeGFtcGxlXCI+XG4gPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuIDxmb3JtIG5vdmFsaWRhdGUgY2xhc3M9XCJzaW1wbGUtZm9ybVwiPlxuIE5hbWU6IDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwidXNlci5uYW1lXCIgLz48YnIgLz5cbiBFLW1haWw6IDxpbnB1dCB0eXBlPVwiZW1haWxcIiBuZy1tb2RlbD1cInVzZXIuZW1haWxcIiAvPjxiciAvPlxuIEdlbmRlcjogPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5nLW1vZGVsPVwidXNlci5nZW5kZXJcIiB2YWx1ZT1cIm1hbGVcIiAvPm1hbGVcbiA8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmctbW9kZWw9XCJ1c2VyLmdlbmRlclwiIHZhbHVlPVwiZmVtYWxlXCIgLz5mZW1hbGU8YnIgLz5cbiA8YnV0dG9uIG5nLWNsaWNrPVwicmVzZXQoKVwiPlJFU0VUPC9idXR0b24+XG4gPGJ1dHRvbiBuZy1jbGljaz1cInVwZGF0ZSh1c2VyKVwiPlNBVkU8L2J1dHRvbj5cbiA8L2Zvcm0+XG4gPHByZT5mb3JtID0ge3t1c2VyIHwganNvbn19PC9wcmU+XG4gPHByZT5tYXN0ZXIgPSB7e21hc3RlciB8IGpzb259fTwvcHJlPlxuIDwvZGl2PlxuXG4gPHNjcmlwdD5cbiAgYW5ndWxhci5tb2R1bGUoJ2NvcHlFeGFtcGxlJywgW10pXG4gICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICRzY29wZS5tYXN0ZXI9IHt9O1xuXG4gICAgICAkc2NvcGUudXBkYXRlID0gZnVuY3Rpb24odXNlcikge1xuICAgICAgICAvLyBFeGFtcGxlIHdpdGggMSBhcmd1bWVudFxuICAgICAgICAkc2NvcGUubWFzdGVyPSBhbmd1bGFyLmNvcHkodXNlcik7XG4gICAgICB9O1xuXG4gICAgICAkc2NvcGUucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gRXhhbXBsZSB3aXRoIDIgYXJndW1lbnRzXG4gICAgICAgIGFuZ3VsYXIuY29weSgkc2NvcGUubWFzdGVyLCAkc2NvcGUudXNlcik7XG4gICAgICB9O1xuXG4gICAgICAkc2NvcGUucmVzZXQoKTtcbiAgICB9XSk7XG4gPC9zY3JpcHQ+XG4gPC9maWxlPlxuIDwvZXhhbXBsZT5cbiAqL1xuZnVuY3Rpb24gY29weShzb3VyY2UsIGRlc3RpbmF0aW9uLCBzdGFja1NvdXJjZSwgc3RhY2tEZXN0KSB7XG4gIGlmIChpc1dpbmRvdyhzb3VyY2UpIHx8IGlzU2NvcGUoc291cmNlKSkge1xuICAgIHRocm93IG5nTWluRXJyKCdjcHdzJyxcbiAgICAgIFwiQ2FuJ3QgY29weSEgTWFraW5nIGNvcGllcyBvZiBXaW5kb3cgb3IgU2NvcGUgaW5zdGFuY2VzIGlzIG5vdCBzdXBwb3J0ZWQuXCIpO1xuICB9XG5cbiAgaWYgKCFkZXN0aW5hdGlvbikge1xuICAgIGRlc3RpbmF0aW9uID0gc291cmNlO1xuICAgIGlmIChzb3VyY2UpIHtcbiAgICAgIGlmIChpc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgICAgZGVzdGluYXRpb24gPSBjb3B5KHNvdXJjZSwgW10sIHN0YWNrU291cmNlLCBzdGFja0Rlc3QpO1xuICAgICAgfSBlbHNlIGlmIChpc0RhdGUoc291cmNlKSkge1xuICAgICAgICBkZXN0aW5hdGlvbiA9IG5ldyBEYXRlKHNvdXJjZS5nZXRUaW1lKCkpO1xuICAgICAgfSBlbHNlIGlmIChpc1JlZ0V4cChzb3VyY2UpKSB7XG4gICAgICAgIGRlc3RpbmF0aW9uID0gbmV3IFJlZ0V4cChzb3VyY2Uuc291cmNlLCBzb3VyY2UudG9TdHJpbmcoKS5tYXRjaCgvW15cXC9dKiQvKVswXSk7XG4gICAgICAgIGRlc3RpbmF0aW9uLmxhc3RJbmRleCA9IHNvdXJjZS5sYXN0SW5kZXg7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgICAgdmFyIGVtcHR5T2JqZWN0ID0gT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2Yoc291cmNlKSk7XG4gICAgICAgIGRlc3RpbmF0aW9uID0gY29weShzb3VyY2UsIGVtcHR5T2JqZWN0LCBzdGFja1NvdXJjZSwgc3RhY2tEZXN0KTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHNvdXJjZSA9PT0gZGVzdGluYXRpb24pIHRocm93IG5nTWluRXJyKCdjcGknLFxuICAgICAgXCJDYW4ndCBjb3B5ISBTb3VyY2UgYW5kIGRlc3RpbmF0aW9uIGFyZSBpZGVudGljYWwuXCIpO1xuXG4gICAgc3RhY2tTb3VyY2UgPSBzdGFja1NvdXJjZSB8fCBbXTtcbiAgICBzdGFja0Rlc3QgPSBzdGFja0Rlc3QgfHwgW107XG5cbiAgICBpZiAoaXNPYmplY3Qoc291cmNlKSkge1xuICAgICAgdmFyIGluZGV4ID0gc3RhY2tTb3VyY2UuaW5kZXhPZihzb3VyY2UpO1xuICAgICAgaWYgKGluZGV4ICE9PSAtMSkgcmV0dXJuIHN0YWNrRGVzdFtpbmRleF07XG5cbiAgICAgIHN0YWNrU291cmNlLnB1c2goc291cmNlKTtcbiAgICAgIHN0YWNrRGVzdC5wdXNoKGRlc3RpbmF0aW9uKTtcbiAgICB9XG5cbiAgICB2YXIgcmVzdWx0O1xuICAgIGlmIChpc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgIGRlc3RpbmF0aW9uLmxlbmd0aCA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNvdXJjZS5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHQgPSBjb3B5KHNvdXJjZVtpXSwgbnVsbCwgc3RhY2tTb3VyY2UsIHN0YWNrRGVzdCk7XG4gICAgICAgIGlmIChpc09iamVjdChzb3VyY2VbaV0pKSB7XG4gICAgICAgICAgc3RhY2tTb3VyY2UucHVzaChzb3VyY2VbaV0pO1xuICAgICAgICAgIHN0YWNrRGVzdC5wdXNoKHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgZGVzdGluYXRpb24ucHVzaChyZXN1bHQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgaCA9IGRlc3RpbmF0aW9uLiQkaGFzaEtleTtcbiAgICAgIGlmIChpc0FycmF5KGRlc3RpbmF0aW9uKSkge1xuICAgICAgICBkZXN0aW5hdGlvbi5sZW5ndGggPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yRWFjaChkZXN0aW5hdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICAgIGRlbGV0ZSBkZXN0aW5hdGlvbltrZXldO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgcmVzdWx0ID0gY29weShzb3VyY2Vba2V5XSwgbnVsbCwgc3RhY2tTb3VyY2UsIHN0YWNrRGVzdCk7XG4gICAgICAgICAgaWYgKGlzT2JqZWN0KHNvdXJjZVtrZXldKSkge1xuICAgICAgICAgICAgc3RhY2tTb3VyY2UucHVzaChzb3VyY2Vba2V5XSk7XG4gICAgICAgICAgICBzdGFja0Rlc3QucHVzaChyZXN1bHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkZXN0aW5hdGlvbltrZXldID0gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzZXRIYXNoS2V5KGRlc3RpbmF0aW9uLGgpO1xuICAgIH1cblxuICB9XG4gIHJldHVybiBkZXN0aW5hdGlvbjtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc2hhbGxvdyBjb3B5IG9mIGFuIG9iamVjdCwgYW4gYXJyYXkgb3IgYSBwcmltaXRpdmUuXG4gKlxuICogQXNzdW1lcyB0aGF0IHRoZXJlIGFyZSBubyBwcm90byBwcm9wZXJ0aWVzIGZvciBvYmplY3RzLlxuICovXG5mdW5jdGlvbiBzaGFsbG93Q29weShzcmMsIGRzdCkge1xuICBpZiAoaXNBcnJheShzcmMpKSB7XG4gICAgZHN0ID0gZHN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGlpID0gc3JjLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIGRzdFtpXSA9IHNyY1tpXTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3Qoc3JjKSkge1xuICAgIGRzdCA9IGRzdCB8fCB7fTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzcmMpIHtcbiAgICAgIGlmICghKGtleS5jaGFyQXQoMCkgPT09ICckJyAmJiBrZXkuY2hhckF0KDEpID09PSAnJCcpKSB7XG4gICAgICAgIGRzdFtrZXldID0gc3JjW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRzdCB8fCBzcmM7XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuZXF1YWxzXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiB0d28gb2JqZWN0cyBvciB0d28gdmFsdWVzIGFyZSBlcXVpdmFsZW50LiBTdXBwb3J0cyB2YWx1ZSB0eXBlcywgcmVndWxhclxuICogZXhwcmVzc2lvbnMsIGFycmF5cyBhbmQgb2JqZWN0cy5cbiAqXG4gKiBUd28gb2JqZWN0cyBvciB2YWx1ZXMgYXJlIGNvbnNpZGVyZWQgZXF1aXZhbGVudCBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlIGZvbGxvd2luZyBpcyB0cnVlOlxuICpcbiAqICogQm90aCBvYmplY3RzIG9yIHZhbHVlcyBwYXNzIGA9PT1gIGNvbXBhcmlzb24uXG4gKiAqIEJvdGggb2JqZWN0cyBvciB2YWx1ZXMgYXJlIG9mIHRoZSBzYW1lIHR5cGUgYW5kIGFsbCBvZiB0aGVpciBwcm9wZXJ0aWVzIGFyZSBlcXVhbCBieVxuICogICBjb21wYXJpbmcgdGhlbSB3aXRoIGBhbmd1bGFyLmVxdWFsc2AuXG4gKiAqIEJvdGggdmFsdWVzIGFyZSBOYU4uIChJbiBKYXZhU2NyaXB0LCBOYU4gPT0gTmFOID0+IGZhbHNlLiBCdXQgd2UgY29uc2lkZXIgdHdvIE5hTiBhcyBlcXVhbClcbiAqICogQm90aCB2YWx1ZXMgcmVwcmVzZW50IHRoZSBzYW1lIHJlZ3VsYXIgZXhwcmVzc2lvbiAoSW4gSmF2YVNjcmlwdCxcbiAqICAgL2FiYy8gPT0gL2FiYy8gPT4gZmFsc2UuIEJ1dCB3ZSBjb25zaWRlciB0d28gcmVndWxhciBleHByZXNzaW9ucyBhcyBlcXVhbCB3aGVuIHRoZWlyIHRleHR1YWxcbiAqICAgcmVwcmVzZW50YXRpb24gbWF0Y2hlcykuXG4gKlxuICogRHVyaW5nIGEgcHJvcGVydHkgY29tcGFyaXNvbiwgcHJvcGVydGllcyBvZiBgZnVuY3Rpb25gIHR5cGUgYW5kIHByb3BlcnRpZXMgd2l0aCBuYW1lc1xuICogdGhhdCBiZWdpbiB3aXRoIGAkYCBhcmUgaWdub3JlZC5cbiAqXG4gKiBTY29wZSBhbmQgRE9NV2luZG93IG9iamVjdHMgYXJlIGJlaW5nIGNvbXBhcmVkIG9ubHkgYnkgaWRlbnRpZnkgKGA9PT1gKS5cbiAqXG4gKiBAcGFyYW0geyp9IG8xIE9iamVjdCBvciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvMiBPYmplY3Qgb3IgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGFyZ3VtZW50cyBhcmUgZXF1YWwuXG4gKi9cbmZ1bmN0aW9uIGVxdWFscyhvMSwgbzIpIHtcbiAgaWYgKG8xID09PSBvMikgcmV0dXJuIHRydWU7XG4gIGlmIChvMSA9PT0gbnVsbCB8fCBvMiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICBpZiAobzEgIT09IG8xICYmIG8yICE9PSBvMikgcmV0dXJuIHRydWU7IC8vIE5hTiA9PT0gTmFOXG4gIHZhciB0MSA9IHR5cGVvZiBvMSwgdDIgPSB0eXBlb2YgbzIsIGxlbmd0aCwga2V5LCBrZXlTZXQ7XG4gIGlmICh0MSA9PSB0Mikge1xuICAgIGlmICh0MSA9PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKGlzQXJyYXkobzEpKSB7XG4gICAgICAgIGlmICghaXNBcnJheShvMikpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKChsZW5ndGggPSBvMS5sZW5ndGgpID09IG8yLmxlbmd0aCkge1xuICAgICAgICAgIGZvciAoa2V5ID0gMDsga2V5IDwgbGVuZ3RoOyBrZXkrKykge1xuICAgICAgICAgICAgaWYgKCFlcXVhbHMobzFba2V5XSwgbzJba2V5XSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNEYXRlKG8xKSkge1xuICAgICAgICBpZiAoIWlzRGF0ZShvMikpIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIGVxdWFscyhvMS5nZXRUaW1lKCksIG8yLmdldFRpbWUoKSk7XG4gICAgICB9IGVsc2UgaWYgKGlzUmVnRXhwKG8xKSAmJiBpc1JlZ0V4cChvMikpIHtcbiAgICAgICAgcmV0dXJuIG8xLnRvU3RyaW5nKCkgPT0gbzIudG9TdHJpbmcoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1Njb3BlKG8xKSB8fCBpc1Njb3BlKG8yKSB8fCBpc1dpbmRvdyhvMSkgfHwgaXNXaW5kb3cobzIpIHx8IGlzQXJyYXkobzIpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGtleVNldCA9IHt9O1xuICAgICAgICBmb3IgKGtleSBpbiBvMSkge1xuICAgICAgICAgIGlmIChrZXkuY2hhckF0KDApID09PSAnJCcgfHwgaXNGdW5jdGlvbihvMVtrZXldKSkgY29udGludWU7XG4gICAgICAgICAgaWYgKCFlcXVhbHMobzFba2V5XSwgbzJba2V5XSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICBrZXlTZXRba2V5XSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChrZXkgaW4gbzIpIHtcbiAgICAgICAgICBpZiAoIWtleVNldC5oYXNPd25Qcm9wZXJ0eShrZXkpICYmXG4gICAgICAgICAgICAgIGtleS5jaGFyQXQoMCkgIT09ICckJyAmJlxuICAgICAgICAgICAgICBvMltrZXldICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgIWlzRnVuY3Rpb24obzJba2V5XSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG52YXIgY3NwID0gZnVuY3Rpb24oKSB7XG4gIGlmIChpc0RlZmluZWQoY3NwLmlzQWN0aXZlXykpIHJldHVybiBjc3AuaXNBY3RpdmVfO1xuXG4gIHZhciBhY3RpdmUgPSAhIShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbbmctY3NwXScpIHx8XG4gICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1uZy1jc3BdJykpO1xuXG4gIGlmICghYWN0aXZlKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8qIGpzaGludCAtVzAzMSwgLVcwNTQgKi9cbiAgICAgIG5ldyBGdW5jdGlvbignJyk7XG4gICAgICAvKiBqc2hpbnQgK1cwMzEsICtXMDU0ICovXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgYWN0aXZlID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gKGNzcC5pc0FjdGl2ZV8gPSBhY3RpdmUpO1xufTtcblxuXG5cbmZ1bmN0aW9uIGNvbmNhdChhcnJheTEsIGFycmF5MiwgaW5kZXgpIHtcbiAgcmV0dXJuIGFycmF5MS5jb25jYXQoc2xpY2UuY2FsbChhcnJheTIsIGluZGV4KSk7XG59XG5cbmZ1bmN0aW9uIHNsaWNlQXJncyhhcmdzLCBzdGFydEluZGV4KSB7XG4gIHJldHVybiBzbGljZS5jYWxsKGFyZ3MsIHN0YXJ0SW5kZXggfHwgMCk7XG59XG5cblxuLyoganNoaW50IC1XMTAxICovXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5iaW5kXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoIGNhbGxzIGZ1bmN0aW9uIGBmbmAgYm91bmQgdG8gYHNlbGZgIChgc2VsZmAgYmVjb21lcyB0aGUgYHRoaXNgIGZvclxuICogYGZuYCkuIFlvdSBjYW4gc3VwcGx5IG9wdGlvbmFsIGBhcmdzYCB0aGF0IGFyZSBwcmVib3VuZCB0byB0aGUgZnVuY3Rpb24uIFRoaXMgZmVhdHVyZSBpcyBhbHNvXG4gKiBrbm93biBhcyBbcGFydGlhbCBhcHBsaWNhdGlvbl0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9QYXJ0aWFsX2FwcGxpY2F0aW9uKSwgYXNcbiAqIGRpc3Rpbmd1aXNoZWQgZnJvbSBbZnVuY3Rpb24gY3VycnlpbmddKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3VycnlpbmcjQ29udHJhc3Rfd2l0aF9wYXJ0aWFsX2Z1bmN0aW9uX2FwcGxpY2F0aW9uKS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gc2VsZiBDb250ZXh0IHdoaWNoIGBmbmAgc2hvdWxkIGJlIGV2YWx1YXRlZCBpbi5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gZm4gRnVuY3Rpb24gdG8gYmUgYm91bmQuXG4gKiBAcGFyYW0gey4uLip9IGFyZ3MgT3B0aW9uYWwgYXJndW1lbnRzIHRvIGJlIHByZWJvdW5kIHRvIHRoZSBgZm5gIGZ1bmN0aW9uIGNhbGwuXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX0gRnVuY3Rpb24gdGhhdCB3cmFwcyB0aGUgYGZuYCB3aXRoIGFsbCB0aGUgc3BlY2lmaWVkIGJpbmRpbmdzLlxuICovXG4vKiBqc2hpbnQgK1cxMDEgKi9cbmZ1bmN0aW9uIGJpbmQoc2VsZiwgZm4pIHtcbiAgdmFyIGN1cnJ5QXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gc2xpY2VBcmdzKGFyZ3VtZW50cywgMikgOiBbXTtcbiAgaWYgKGlzRnVuY3Rpb24oZm4pICYmICEoZm4gaW5zdGFuY2VvZiBSZWdFeHApKSB7XG4gICAgcmV0dXJuIGN1cnJ5QXJncy5sZW5ndGhcbiAgICAgID8gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICAgICAgID8gZm4uYXBwbHkoc2VsZiwgY29uY2F0KGN1cnJ5QXJncywgYXJndW1lbnRzLCAwKSlcbiAgICAgICAgICAgIDogZm4uYXBwbHkoc2VsZiwgY3VycnlBcmdzKTtcbiAgICAgICAgfVxuICAgICAgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgICAgICAgPyBmbi5hcHBseShzZWxmLCBhcmd1bWVudHMpXG4gICAgICAgICAgICA6IGZuLmNhbGwoc2VsZik7XG4gICAgICAgIH07XG4gIH0gZWxzZSB7XG4gICAgLy8gaW4gSUUsIG5hdGl2ZSBtZXRob2RzIGFyZSBub3QgZnVuY3Rpb25zIHNvIHRoZXkgY2Fubm90IGJlIGJvdW5kIChub3RlOiB0aGV5IGRvbid0IG5lZWQgdG8gYmUpXG4gICAgcmV0dXJuIGZuO1xuICB9XG59XG5cblxuZnVuY3Rpb24gdG9Kc29uUmVwbGFjZXIoa2V5LCB2YWx1ZSkge1xuICB2YXIgdmFsID0gdmFsdWU7XG5cbiAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleS5jaGFyQXQoMCkgPT09ICckJyAmJiBrZXkuY2hhckF0KDEpID09PSAnJCcpIHtcbiAgICB2YWwgPSB1bmRlZmluZWQ7XG4gIH0gZWxzZSBpZiAoaXNXaW5kb3codmFsdWUpKSB7XG4gICAgdmFsID0gJyRXSU5ET1cnO1xuICB9IGVsc2UgaWYgKHZhbHVlICYmICBkb2N1bWVudCA9PT0gdmFsdWUpIHtcbiAgICB2YWwgPSAnJERPQ1VNRU5UJztcbiAgfSBlbHNlIGlmIChpc1Njb3BlKHZhbHVlKSkge1xuICAgIHZhbCA9ICckU0NPUEUnO1xuICB9XG5cbiAgcmV0dXJuIHZhbDtcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci50b0pzb25cbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTZXJpYWxpemVzIGlucHV0IGludG8gYSBKU09OLWZvcm1hdHRlZCBzdHJpbmcuIFByb3BlcnRpZXMgd2l0aCBsZWFkaW5nICQkIGNoYXJhY3RlcnMgd2lsbCBiZVxuICogc3RyaXBwZWQgc2luY2UgYW5ndWxhciB1c2VzIHRoaXMgbm90YXRpb24gaW50ZXJuYWxseS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheXxEYXRlfHN0cmluZ3xudW1iZXJ9IG9iaiBJbnB1dCB0byBiZSBzZXJpYWxpemVkIGludG8gSlNPTi5cbiAqIEBwYXJhbSB7Ym9vbGVhbnxudW1iZXI9fSBwcmV0dHkgSWYgc2V0IHRvIHRydWUsIHRoZSBKU09OIG91dHB1dCB3aWxsIGNvbnRhaW4gbmV3bGluZXMgYW5kIHdoaXRlc3BhY2UuXG4gKiAgICBJZiBzZXQgdG8gYW4gaW50ZWdlciwgdGhlIEpTT04gb3V0cHV0IHdpbGwgY29udGFpbiB0aGF0IG1hbnkgc3BhY2VzIHBlciBpbmRlbnRhdGlvbiAodGhlIGRlZmF1bHQgaXMgMikuXG4gKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gSlNPTi1pZmllZCBzdHJpbmcgcmVwcmVzZW50aW5nIGBvYmpgLlxuICovXG5mdW5jdGlvbiB0b0pzb24ob2JqLCBwcmV0dHkpIHtcbiAgaWYgKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSByZXR1cm4gdW5kZWZpbmVkO1xuICBpZiAoIWlzTnVtYmVyKHByZXR0eSkpIHtcbiAgICBwcmV0dHkgPSBwcmV0dHkgPyAyIDogbnVsbDtcbiAgfVxuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqLCB0b0pzb25SZXBsYWNlciwgcHJldHR5KTtcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5mcm9tSnNvblxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERlc2VyaWFsaXplcyBhIEpTT04gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBqc29uIEpTT04gc3RyaW5nIHRvIGRlc2VyaWFsaXplLlxuICogQHJldHVybnMge09iamVjdHxBcnJheXxzdHJpbmd8bnVtYmVyfSBEZXNlcmlhbGl6ZWQgSlNPTiBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGZyb21Kc29uKGpzb24pIHtcbiAgcmV0dXJuIGlzU3RyaW5nKGpzb24pXG4gICAgICA/IEpTT04ucGFyc2UoanNvbilcbiAgICAgIDoganNvbjtcbn1cblxuXG4vKipcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgZWxlbWVudC5cbiAqL1xuZnVuY3Rpb24gc3RhcnRpbmdUYWcoZWxlbWVudCkge1xuICBlbGVtZW50ID0ganFMaXRlKGVsZW1lbnQpLmNsb25lKCk7XG4gIHRyeSB7XG4gICAgLy8gdHVybnMgb3V0IElFIGRvZXMgbm90IGxldCB5b3Ugc2V0IC5odG1sKCkgb24gZWxlbWVudHMgd2hpY2hcbiAgICAvLyBhcmUgbm90IGFsbG93ZWQgdG8gaGF2ZSBjaGlsZHJlbi4gU28gd2UganVzdCBpZ25vcmUgaXQuXG4gICAgZWxlbWVudC5lbXB0eSgpO1xuICB9IGNhdGNoIChlKSB7fVxuICB2YXIgZWxlbUh0bWwgPSBqcUxpdGUoJzxkaXY+JykuYXBwZW5kKGVsZW1lbnQpLmh0bWwoKTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZWxlbWVudFswXS5ub2RlVHlwZSA9PT0gTk9ERV9UWVBFX1RFWFQgPyBsb3dlcmNhc2UoZWxlbUh0bWwpIDpcbiAgICAgICAgZWxlbUh0bWwuXG4gICAgICAgICAgbWF0Y2goL14oPFtePl0rPikvKVsxXS5cbiAgICAgICAgICByZXBsYWNlKC9ePChbXFx3XFwtXSspLywgZnVuY3Rpb24obWF0Y2gsIG5vZGVOYW1lKSB7IHJldHVybiAnPCcgKyBsb3dlcmNhc2Uobm9kZU5hbWUpOyB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBsb3dlcmNhc2UoZWxlbUh0bWwpO1xuICB9XG5cbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogVHJpZXMgdG8gZGVjb2RlIHRoZSBVUkkgY29tcG9uZW50IHdpdGhvdXQgdGhyb3dpbmcgYW4gZXhjZXB0aW9uLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gc3RyIHZhbHVlIHBvdGVudGlhbCBVUkkgY29tcG9uZW50IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBjYW4gYmUgZGVjb2RlZFxuICogd2l0aCB0aGUgZGVjb2RlVVJJQ29tcG9uZW50IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB0cnlEZWNvZGVVUklDb21wb25lbnQodmFsdWUpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElnbm9yZSBhbnkgaW52YWxpZCB1cmkgY29tcG9uZW50XG4gIH1cbn1cblxuXG4vKipcbiAqIFBhcnNlcyBhbiBlc2NhcGVkIHVybCBxdWVyeSBzdHJpbmcgaW50byBrZXktdmFsdWUgcGFpcnMuXG4gKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsYm9vbGVhbnxBcnJheT59XG4gKi9cbmZ1bmN0aW9uIHBhcnNlS2V5VmFsdWUoLyoqc3RyaW5nKi9rZXlWYWx1ZSkge1xuICB2YXIgb2JqID0ge30sIGtleV92YWx1ZSwga2V5O1xuICBmb3JFYWNoKChrZXlWYWx1ZSB8fCBcIlwiKS5zcGxpdCgnJicpLCBmdW5jdGlvbihrZXlWYWx1ZSkge1xuICAgIGlmIChrZXlWYWx1ZSkge1xuICAgICAga2V5X3ZhbHVlID0ga2V5VmFsdWUucmVwbGFjZSgvXFwrL2csJyUyMCcpLnNwbGl0KCc9Jyk7XG4gICAgICBrZXkgPSB0cnlEZWNvZGVVUklDb21wb25lbnQoa2V5X3ZhbHVlWzBdKTtcbiAgICAgIGlmIChpc0RlZmluZWQoa2V5KSkge1xuICAgICAgICB2YXIgdmFsID0gaXNEZWZpbmVkKGtleV92YWx1ZVsxXSkgPyB0cnlEZWNvZGVVUklDb21wb25lbnQoa2V5X3ZhbHVlWzFdKSA6IHRydWU7XG4gICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgICBvYmpba2V5XSA9IHZhbDtcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KG9ialtrZXldKSkge1xuICAgICAgICAgIG9ialtrZXldLnB1c2godmFsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvYmpba2V5XSA9IFtvYmpba2V5XSx2YWxdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gdG9LZXlWYWx1ZShvYmopIHtcbiAgdmFyIHBhcnRzID0gW107XG4gIGZvckVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICBmb3JFYWNoKHZhbHVlLCBmdW5jdGlvbihhcnJheVZhbHVlKSB7XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlVXJpUXVlcnkoa2V5LCB0cnVlKSArXG4gICAgICAgICAgICAgICAgICAgKGFycmF5VmFsdWUgPT09IHRydWUgPyAnJyA6ICc9JyArIGVuY29kZVVyaVF1ZXJ5KGFycmF5VmFsdWUsIHRydWUpKSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlVXJpUXVlcnkoa2V5LCB0cnVlKSArXG4gICAgICAgICAgICAgICAodmFsdWUgPT09IHRydWUgPyAnJyA6ICc9JyArIGVuY29kZVVyaVF1ZXJ5KHZhbHVlLCB0cnVlKSkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBwYXJ0cy5sZW5ndGggPyBwYXJ0cy5qb2luKCcmJykgOiAnJztcbn1cblxuXG4vKipcbiAqIFdlIG5lZWQgb3VyIGN1c3RvbSBtZXRob2QgYmVjYXVzZSBlbmNvZGVVUklDb21wb25lbnQgaXMgdG9vIGFnZ3Jlc3NpdmUgYW5kIGRvZXNuJ3QgZm9sbG93XG4gKiBodHRwOi8vd3d3LmlldGYub3JnL3JmYy9yZmMzOTg2LnR4dCB3aXRoIHJlZ2FyZHMgdG8gdGhlIGNoYXJhY3RlciBzZXQgKHBjaGFyKSBhbGxvd2VkIGluIHBhdGhcbiAqIHNlZ21lbnRzOlxuICogICAgc2VnbWVudCAgICAgICA9ICpwY2hhclxuICogICAgcGNoYXIgICAgICAgICA9IHVucmVzZXJ2ZWQgLyBwY3QtZW5jb2RlZCAvIHN1Yi1kZWxpbXMgLyBcIjpcIiAvIFwiQFwiXG4gKiAgICBwY3QtZW5jb2RlZCAgID0gXCIlXCIgSEVYRElHIEhFWERJR1xuICogICAgdW5yZXNlcnZlZCAgICA9IEFMUEhBIC8gRElHSVQgLyBcIi1cIiAvIFwiLlwiIC8gXCJfXCIgLyBcIn5cIlxuICogICAgc3ViLWRlbGltcyAgICA9IFwiIVwiIC8gXCIkXCIgLyBcIiZcIiAvIFwiJ1wiIC8gXCIoXCIgLyBcIilcIlxuICogICAgICAgICAgICAgICAgICAgICAvIFwiKlwiIC8gXCIrXCIgLyBcIixcIiAvIFwiO1wiIC8gXCI9XCJcbiAqL1xuZnVuY3Rpb24gZW5jb2RlVXJpU2VnbWVudCh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVyaVF1ZXJ5KHZhbCwgdHJ1ZSkuXG4gICAgICAgICAgICAgcmVwbGFjZSgvJTI2L2dpLCAnJicpLlxuICAgICAgICAgICAgIHJlcGxhY2UoLyUzRC9naSwgJz0nKS5cbiAgICAgICAgICAgICByZXBsYWNlKC8lMkIvZ2ksICcrJyk7XG59XG5cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBpbnRlbmRlZCBmb3IgZW5jb2RpbmcgKmtleSogb3IgKnZhbHVlKiBwYXJ0cyBvZiBxdWVyeSBjb21wb25lbnQuIFdlIG5lZWQgYSBjdXN0b21cbiAqIG1ldGhvZCBiZWNhdXNlIGVuY29kZVVSSUNvbXBvbmVudCBpcyB0b28gYWdncmVzc2l2ZSBhbmQgZW5jb2RlcyBzdHVmZiB0aGF0IGRvZXNuJ3QgaGF2ZSB0byBiZVxuICogZW5jb2RlZCBwZXIgaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NjpcbiAqICAgIHF1ZXJ5ICAgICAgID0gKiggcGNoYXIgLyBcIi9cIiAvIFwiP1wiIClcbiAqICAgIHBjaGFyICAgICAgICAgPSB1bnJlc2VydmVkIC8gcGN0LWVuY29kZWQgLyBzdWItZGVsaW1zIC8gXCI6XCIgLyBcIkBcIlxuICogICAgdW5yZXNlcnZlZCAgICA9IEFMUEhBIC8gRElHSVQgLyBcIi1cIiAvIFwiLlwiIC8gXCJfXCIgLyBcIn5cIlxuICogICAgcGN0LWVuY29kZWQgICA9IFwiJVwiIEhFWERJRyBIRVhESUdcbiAqICAgIHN1Yi1kZWxpbXMgICAgPSBcIiFcIiAvIFwiJFwiIC8gXCImXCIgLyBcIidcIiAvIFwiKFwiIC8gXCIpXCJcbiAqICAgICAgICAgICAgICAgICAgICAgLyBcIipcIiAvIFwiK1wiIC8gXCIsXCIgLyBcIjtcIiAvIFwiPVwiXG4gKi9cbmZ1bmN0aW9uIGVuY29kZVVyaVF1ZXJ5KHZhbCwgcGN0RW5jb2RlU3BhY2VzKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICAgICAgICAgICByZXBsYWNlKC8lNDAvZ2ksICdAJykuXG4gICAgICAgICAgICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgICAgICAgICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgICAgICAgICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICAgICAgICAgICByZXBsYWNlKC8lM0IvZ2ksICc7JykuXG4gICAgICAgICAgICAgcmVwbGFjZSgvJTIwL2csIChwY3RFbmNvZGVTcGFjZXMgPyAnJTIwJyA6ICcrJykpO1xufVxuXG52YXIgbmdBdHRyUHJlZml4ZXMgPSBbJ25nLScsICdkYXRhLW5nLScsICduZzonLCAneC1uZy0nXTtcblxuZnVuY3Rpb24gZ2V0TmdBdHRyaWJ1dGUoZWxlbWVudCwgbmdBdHRyKSB7XG4gIHZhciBhdHRyLCBpLCBpaSA9IG5nQXR0clByZWZpeGVzLmxlbmd0aDtcbiAgZWxlbWVudCA9IGpxTGl0ZShlbGVtZW50KTtcbiAgZm9yIChpID0gMDsgaSA8IGlpOyArK2kpIHtcbiAgICBhdHRyID0gbmdBdHRyUHJlZml4ZXNbaV0gKyBuZ0F0dHI7XG4gICAgaWYgKGlzU3RyaW5nKGF0dHIgPSBlbGVtZW50LmF0dHIoYXR0cikpKSB7XG4gICAgICByZXR1cm4gYXR0cjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdBcHBcbiAqIEBtb2R1bGUgbmdcbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7YW5ndWxhci5Nb2R1bGV9IG5nQXBwIGFuIG9wdGlvbmFsIGFwcGxpY2F0aW9uXG4gKiAgIHtAbGluayBhbmd1bGFyLm1vZHVsZSBtb2R1bGV9IG5hbWUgdG8gbG9hZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG5nU3RyaWN0RGkgaWYgdGhpcyBhdHRyaWJ1dGUgaXMgcHJlc2VudCBvbiB0aGUgYXBwIGVsZW1lbnQsIHRoZSBpbmplY3RvciB3aWxsIGJlXG4gKiAgIGNyZWF0ZWQgaW4gXCJzdHJpY3QtZGlcIiBtb2RlLiBUaGlzIG1lYW5zIHRoYXQgdGhlIGFwcGxpY2F0aW9uIHdpbGwgZmFpbCB0byBpbnZva2UgZnVuY3Rpb25zIHdoaWNoXG4gKiAgIGRvIG5vdCB1c2UgZXhwbGljaXQgZnVuY3Rpb24gYW5ub3RhdGlvbiAoYW5kIGFyZSB0aHVzIHVuc3VpdGFibGUgZm9yIG1pbmlmaWNhdGlvbiksIGFzIGRlc2NyaWJlZFxuICogICBpbiB7QGxpbmsgZ3VpZGUvZGkgdGhlIERlcGVuZGVuY3kgSW5qZWN0aW9uIGd1aWRlfSwgYW5kIHVzZWZ1bCBkZWJ1Z2dpbmcgaW5mbyB3aWxsIGFzc2lzdCBpblxuICogICB0cmFja2luZyBkb3duIHRoZSByb290IG9mIHRoZXNlIGJ1Z3MuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVXNlIHRoaXMgZGlyZWN0aXZlIHRvICoqYXV0by1ib290c3RyYXAqKiBhbiBBbmd1bGFySlMgYXBwbGljYXRpb24uIFRoZSBgbmdBcHBgIGRpcmVjdGl2ZVxuICogZGVzaWduYXRlcyB0aGUgKipyb290IGVsZW1lbnQqKiBvZiB0aGUgYXBwbGljYXRpb24gYW5kIGlzIHR5cGljYWxseSBwbGFjZWQgbmVhciB0aGUgcm9vdCBlbGVtZW50XG4gKiBvZiB0aGUgcGFnZSAtIGUuZy4gb24gdGhlIGA8Ym9keT5gIG9yIGA8aHRtbD5gIHRhZ3MuXG4gKlxuICogT25seSBvbmUgQW5ndWxhckpTIGFwcGxpY2F0aW9uIGNhbiBiZSBhdXRvLWJvb3RzdHJhcHBlZCBwZXIgSFRNTCBkb2N1bWVudC4gVGhlIGZpcnN0IGBuZ0FwcGBcbiAqIGZvdW5kIGluIHRoZSBkb2N1bWVudCB3aWxsIGJlIHVzZWQgdG8gZGVmaW5lIHRoZSByb290IGVsZW1lbnQgdG8gYXV0by1ib290c3RyYXAgYXMgYW5cbiAqIGFwcGxpY2F0aW9uLiBUbyBydW4gbXVsdGlwbGUgYXBwbGljYXRpb25zIGluIGFuIEhUTUwgZG9jdW1lbnQgeW91IG11c3QgbWFudWFsbHkgYm9vdHN0cmFwIHRoZW0gdXNpbmdcbiAqIHtAbGluayBhbmd1bGFyLmJvb3RzdHJhcH0gaW5zdGVhZC4gQW5ndWxhckpTIGFwcGxpY2F0aW9ucyBjYW5ub3QgYmUgbmVzdGVkIHdpdGhpbiBlYWNoIG90aGVyLlxuICpcbiAqIFlvdSBjYW4gc3BlY2lmeSBhbiAqKkFuZ3VsYXJKUyBtb2R1bGUqKiB0byBiZSB1c2VkIGFzIHRoZSByb290IG1vZHVsZSBmb3IgdGhlIGFwcGxpY2F0aW9uLiAgVGhpc1xuICogbW9kdWxlIHdpbGwgYmUgbG9hZGVkIGludG8gdGhlIHtAbGluayBhdXRvLiRpbmplY3Rvcn0gd2hlbiB0aGUgYXBwbGljYXRpb24gaXMgYm9vdHN0cmFwcGVkLiBJdFxuICogc2hvdWxkIGNvbnRhaW4gdGhlIGFwcGxpY2F0aW9uIGNvZGUgbmVlZGVkIG9yIGhhdmUgZGVwZW5kZW5jaWVzIG9uIG90aGVyIG1vZHVsZXMgdGhhdCB3aWxsXG4gKiBjb250YWluIHRoZSBjb2RlLiBTZWUge0BsaW5rIGFuZ3VsYXIubW9kdWxlfSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqXG4gKiBJbiB0aGUgZXhhbXBsZSBiZWxvdyBpZiB0aGUgYG5nQXBwYCBkaXJlY3RpdmUgd2VyZSBub3QgcGxhY2VkIG9uIHRoZSBgaHRtbGAgZWxlbWVudCB0aGVuIHRoZVxuICogZG9jdW1lbnQgd291bGQgbm90IGJlIGNvbXBpbGVkLCB0aGUgYEFwcENvbnRyb2xsZXJgIHdvdWxkIG5vdCBiZSBpbnN0YW50aWF0ZWQgYW5kIHRoZSBge3sgYStiIH19YFxuICogd291bGQgbm90IGJlIHJlc29sdmVkIHRvIGAzYC5cbiAqXG4gKiBgbmdBcHBgIGlzIHRoZSBlYXNpZXN0LCBhbmQgbW9zdCBjb21tb24gd2F5IHRvIGJvb3RzdHJhcCBhbiBhcHBsaWNhdGlvbi5cbiAqXG4gPGV4YW1wbGUgbW9kdWxlPVwibmdBcHBEZW1vXCI+XG4gICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgPGRpdiBuZy1jb250cm9sbGVyPVwibmdBcHBEZW1vQ29udHJvbGxlclwiPlxuICAgICBJIGNhbiBhZGQ6IHt7YX19ICsge3tifX0gPSAge3sgYStiIH19XG4gICA8L2Rpdj5cbiAgIDwvZmlsZT5cbiAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgIGFuZ3VsYXIubW9kdWxlKCduZ0FwcERlbW8nLCBbXSkuY29udHJvbGxlcignbmdBcHBEZW1vQ29udHJvbGxlcicsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAkc2NvcGUuYSA9IDE7XG4gICAgICRzY29wZS5iID0gMjtcbiAgIH0pO1xuICAgPC9maWxlPlxuIDwvZXhhbXBsZT5cbiAqXG4gKiBVc2luZyBgbmdTdHJpY3REaWAsIHlvdSB3b3VsZCBzZWUgc29tZXRoaW5nIGxpa2UgdGhpczpcbiAqXG4gPGV4YW1wbGUgbmctYXBwLWluY2x1ZGVkPVwidHJ1ZVwiPlxuICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgIDxkaXYgbmctYXBwPVwibmdBcHBTdHJpY3REZW1vXCIgbmctc3RyaWN0LWRpPlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkdvb2RDb250cm9sbGVyMVwiPlxuICAgICAgICAgICBJIGNhbiBhZGQ6IHt7YX19ICsge3tifX0gPSAge3sgYStiIH19XG5cbiAgICAgICAgICAgPHA+VGhpcyByZW5kZXJzIGJlY2F1c2UgdGhlIGNvbnRyb2xsZXIgZG9lcyBub3QgZmFpbCB0b1xuICAgICAgICAgICAgICBpbnN0YW50aWF0ZSwgYnkgdXNpbmcgZXhwbGljaXQgYW5ub3RhdGlvbiBzdHlsZSAoc2VlXG4gICAgICAgICAgICAgIHNjcmlwdC5qcyBmb3IgZGV0YWlscylcbiAgICAgICAgICAgPC9wPlxuICAgICAgIDwvZGl2PlxuXG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiR29vZENvbnRyb2xsZXIyXCI+XG4gICAgICAgICAgIE5hbWU6IDxpbnB1dCBuZy1tb2RlbD1cIm5hbWVcIj48YnIgLz5cbiAgICAgICAgICAgSGVsbG8sIHt7bmFtZX19IVxuXG4gICAgICAgICAgIDxwPlRoaXMgcmVuZGVycyBiZWNhdXNlIHRoZSBjb250cm9sbGVyIGRvZXMgbm90IGZhaWwgdG9cbiAgICAgICAgICAgICAgaW5zdGFudGlhdGUsIGJ5IHVzaW5nIGV4cGxpY2l0IGFubm90YXRpb24gc3R5bGVcbiAgICAgICAgICAgICAgKHNlZSBzY3JpcHQuanMgZm9yIGRldGFpbHMpXG4gICAgICAgICAgIDwvcD5cbiAgICAgICA8L2Rpdj5cblxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkJhZENvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgSSBjYW4gYWRkOiB7e2F9fSArIHt7Yn19ID0gIHt7IGErYiB9fVxuXG4gICAgICAgICAgIDxwPlRoZSBjb250cm9sbGVyIGNvdWxkIG5vdCBiZSBpbnN0YW50aWF0ZWQsIGR1ZSB0byByZWx5aW5nXG4gICAgICAgICAgICAgIG9uIGF1dG9tYXRpYyBmdW5jdGlvbiBhbm5vdGF0aW9ucyAod2hpY2ggYXJlIGRpc2FibGVkIGluXG4gICAgICAgICAgICAgIHN0cmljdCBtb2RlKS4gQXMgc3VjaCwgdGhlIGNvbnRlbnQgb2YgdGhpcyBzZWN0aW9uIGlzIG5vdFxuICAgICAgICAgICAgICBpbnRlcnBvbGF0ZWQsIGFuZCB0aGVyZSBzaG91bGQgYmUgYW4gZXJyb3IgaW4geW91ciB3ZWIgY29uc29sZS5cbiAgICAgICAgICAgPC9wPlxuICAgICAgIDwvZGl2PlxuICAgPC9kaXY+XG4gICA8L2ZpbGU+XG4gICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICBhbmd1bGFyLm1vZHVsZSgnbmdBcHBTdHJpY3REZW1vJywgW10pXG4gICAgIC8vIEJhZENvbnRyb2xsZXIgd2lsbCBmYWlsIHRvIGluc3RhbnRpYXRlLCBkdWUgdG8gcmVseWluZyBvbiBhdXRvbWF0aWMgZnVuY3Rpb24gYW5ub3RhdGlvbixcbiAgICAgLy8gcmF0aGVyIHRoYW4gYW4gZXhwbGljaXQgYW5ub3RhdGlvblxuICAgICAuY29udHJvbGxlcignQmFkQ29udHJvbGxlcicsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICRzY29wZS5hID0gMTtcbiAgICAgICAkc2NvcGUuYiA9IDI7XG4gICAgIH0pXG4gICAgIC8vIFVubGlrZSBCYWRDb250cm9sbGVyLCBHb29kQ29udHJvbGxlcjEgYW5kIEdvb2RDb250cm9sbGVyMiB3aWxsIG5vdCBmYWlsIHRvIGJlIGluc3RhbnRpYXRlZCxcbiAgICAgLy8gZHVlIHRvIHVzaW5nIGV4cGxpY2l0IGFubm90YXRpb25zIHVzaW5nIHRoZSBhcnJheSBzdHlsZSBhbmQgJGluamVjdCBwcm9wZXJ0eSwgcmVzcGVjdGl2ZWx5LlxuICAgICAuY29udHJvbGxlcignR29vZENvbnRyb2xsZXIxJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAkc2NvcGUuYSA9IDE7XG4gICAgICAgJHNjb3BlLmIgPSAyO1xuICAgICB9XSlcbiAgICAgLmNvbnRyb2xsZXIoJ0dvb2RDb250cm9sbGVyMicsIEdvb2RDb250cm9sbGVyMik7XG4gICAgIGZ1bmN0aW9uIEdvb2RDb250cm9sbGVyMigkc2NvcGUpIHtcbiAgICAgICAkc2NvcGUubmFtZSA9IFwiV29ybGRcIjtcbiAgICAgfVxuICAgICBHb29kQ29udHJvbGxlcjIuJGluamVjdCA9IFsnJHNjb3BlJ107XG4gICA8L2ZpbGU+XG4gICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICBkaXZbbmctY29udHJvbGxlcl0ge1xuICAgICAgIG1hcmdpbi1ib3R0b206IDFlbTtcbiAgICAgICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDRweDtcbiAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgICAgYm9yZGVyOiAxcHggc29saWQ7XG4gICAgICAgcGFkZGluZzogLjVlbTtcbiAgIH1cbiAgIGRpdltuZy1jb250cm9sbGVyXj1Hb29kXSB7XG4gICAgICAgYm9yZGVyLWNvbG9yOiAjZDZlOWM2O1xuICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNkZmYwZDg7XG4gICAgICAgY29sb3I6ICMzYzc2M2Q7XG4gICB9XG4gICBkaXZbbmctY29udHJvbGxlcl49QmFkXSB7XG4gICAgICAgYm9yZGVyLWNvbG9yOiAjZWJjY2QxO1xuICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmMmRlZGU7XG4gICAgICAgY29sb3I6ICNhOTQ0NDI7XG4gICAgICAgbWFyZ2luLWJvdHRvbTogMDtcbiAgIH1cbiAgIDwvZmlsZT5cbiA8L2V4YW1wbGU+XG4gKi9cbmZ1bmN0aW9uIGFuZ3VsYXJJbml0KGVsZW1lbnQsIGJvb3RzdHJhcCkge1xuICB2YXIgYXBwRWxlbWVudCxcbiAgICAgIG1vZHVsZSxcbiAgICAgIGNvbmZpZyA9IHt9O1xuXG4gIC8vIFRoZSBlbGVtZW50IGBlbGVtZW50YCBoYXMgcHJpb3JpdHkgb3ZlciBhbnkgb3RoZXIgZWxlbWVudFxuICBmb3JFYWNoKG5nQXR0clByZWZpeGVzLCBmdW5jdGlvbihwcmVmaXgpIHtcbiAgICB2YXIgbmFtZSA9IHByZWZpeCArICdhcHAnO1xuXG4gICAgaWYgKCFhcHBFbGVtZW50ICYmIGVsZW1lbnQuaGFzQXR0cmlidXRlICYmIGVsZW1lbnQuaGFzQXR0cmlidXRlKG5hbWUpKSB7XG4gICAgICBhcHBFbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIG1vZHVsZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIH1cbiAgfSk7XG4gIGZvckVhY2gobmdBdHRyUHJlZml4ZXMsIGZ1bmN0aW9uKHByZWZpeCkge1xuICAgIHZhciBuYW1lID0gcHJlZml4ICsgJ2FwcCc7XG4gICAgdmFyIGNhbmRpZGF0ZTtcblxuICAgIGlmICghYXBwRWxlbWVudCAmJiAoY2FuZGlkYXRlID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdbJyArIG5hbWUucmVwbGFjZSgnOicsICdcXFxcOicpICsgJ10nKSkpIHtcbiAgICAgIGFwcEVsZW1lbnQgPSBjYW5kaWRhdGU7XG4gICAgICBtb2R1bGUgPSBjYW5kaWRhdGUuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIH1cbiAgfSk7XG4gIGlmIChhcHBFbGVtZW50KSB7XG4gICAgY29uZmlnLnN0cmljdERpID0gZ2V0TmdBdHRyaWJ1dGUoYXBwRWxlbWVudCwgXCJzdHJpY3QtZGlcIikgIT09IG51bGw7XG4gICAgYm9vdHN0cmFwKGFwcEVsZW1lbnQsIG1vZHVsZSA/IFttb2R1bGVdIDogW10sIGNvbmZpZyk7XG4gIH1cbn1cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuYm9vdHN0cmFwXG4gKiBAbW9kdWxlIG5nXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzZSB0aGlzIGZ1bmN0aW9uIHRvIG1hbnVhbGx5IHN0YXJ0IHVwIGFuZ3VsYXIgYXBwbGljYXRpb24uXG4gKlxuICogU2VlOiB7QGxpbmsgZ3VpZGUvYm9vdHN0cmFwIEJvb3RzdHJhcH1cbiAqXG4gKiBOb3RlIHRoYXQgUHJvdHJhY3RvciBiYXNlZCBlbmQtdG8tZW5kIHRlc3RzIGNhbm5vdCB1c2UgdGhpcyBmdW5jdGlvbiB0byBib290c3RyYXAgbWFudWFsbHkuXG4gKiBUaGV5IG11c3QgdXNlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdBcHAgbmdBcHB9LlxuICpcbiAqIEFuZ3VsYXIgd2lsbCBkZXRlY3QgaWYgaXQgaGFzIGJlZW4gbG9hZGVkIGludG8gdGhlIGJyb3dzZXIgbW9yZSB0aGFuIG9uY2UgYW5kIG9ubHkgYWxsb3cgdGhlXG4gKiBmaXJzdCBsb2FkZWQgc2NyaXB0IHRvIGJlIGJvb3RzdHJhcHBlZCBhbmQgd2lsbCByZXBvcnQgYSB3YXJuaW5nIHRvIHRoZSBicm93c2VyIGNvbnNvbGUgZm9yXG4gKiBlYWNoIG9mIHRoZSBzdWJzZXF1ZW50IHNjcmlwdHMuIFRoaXMgcHJldmVudHMgc3RyYW5nZSByZXN1bHRzIGluIGFwcGxpY2F0aW9ucywgd2hlcmUgb3RoZXJ3aXNlXG4gKiBtdWx0aXBsZSBpbnN0YW5jZXMgb2YgQW5ndWxhciB0cnkgdG8gd29yayBvbiB0aGUgRE9NLlxuICpcbiAqIGBgYGh0bWxcbiAqIDwhZG9jdHlwZSBodG1sPlxuICogPGh0bWw+XG4gKiA8Ym9keT5cbiAqIDxkaXYgbmctY29udHJvbGxlcj1cIldlbGNvbWVDb250cm9sbGVyXCI+XG4gKiAgIHt7Z3JlZXRpbmd9fVxuICogPC9kaXY+XG4gKlxuICogPHNjcmlwdCBzcmM9XCJhbmd1bGFyLmpzXCI+PC9zY3JpcHQ+XG4gKiA8c2NyaXB0PlxuICogICB2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ2RlbW8nLCBbXSlcbiAqICAgLmNvbnRyb2xsZXIoJ1dlbGNvbWVDb250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gKiAgICAgICAkc2NvcGUuZ3JlZXRpbmcgPSAnV2VsY29tZSEnO1xuICogICB9KTtcbiAqICAgYW5ndWxhci5ib290c3RyYXAoZG9jdW1lbnQsIFsnZGVtbyddKTtcbiAqIDwvc2NyaXB0PlxuICogPC9ib2R5PlxuICogPC9odG1sPlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IERPTSBlbGVtZW50IHdoaWNoIGlzIHRoZSByb290IG9mIGFuZ3VsYXIgYXBwbGljYXRpb24uXG4gKiBAcGFyYW0ge0FycmF5PFN0cmluZ3xGdW5jdGlvbnxBcnJheT49fSBtb2R1bGVzIGFuIGFycmF5IG9mIG1vZHVsZXMgdG8gbG9hZCBpbnRvIHRoZSBhcHBsaWNhdGlvbi5cbiAqICAgICBFYWNoIGl0ZW0gaW4gdGhlIGFycmF5IHNob3VsZCBiZSB0aGUgbmFtZSBvZiBhIHByZWRlZmluZWQgbW9kdWxlIG9yIGEgKERJIGFubm90YXRlZClcbiAqICAgICBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgaW52b2tlZCBieSB0aGUgaW5qZWN0b3IgYXMgYSBgY29uZmlnYCBibG9jay5cbiAqICAgICBTZWU6IHtAbGluayBhbmd1bGFyLm1vZHVsZSBtb2R1bGVzfVxuICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgYW4gb2JqZWN0IGZvciBkZWZpbmluZyBjb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBhcHBsaWNhdGlvbi4gVGhlXG4gKiAgICAgZm9sbG93aW5nIGtleXMgYXJlIHN1cHBvcnRlZDpcbiAqXG4gKiAqIGBzdHJpY3REaWAgLSBkaXNhYmxlIGF1dG9tYXRpYyBmdW5jdGlvbiBhbm5vdGF0aW9uIGZvciB0aGUgYXBwbGljYXRpb24uIFRoaXMgaXMgbWVhbnQgdG9cbiAqICAgYXNzaXN0IGluIGZpbmRpbmcgYnVncyB3aGljaCBicmVhayBtaW5pZmllZCBjb2RlLiBEZWZhdWx0cyB0byBgZmFsc2VgLlxuICpcbiAqIEByZXR1cm5zIHthdXRvLiRpbmplY3Rvcn0gUmV0dXJucyB0aGUgbmV3bHkgY3JlYXRlZCBpbmplY3RvciBmb3IgdGhpcyBhcHAuXG4gKi9cbmZ1bmN0aW9uIGJvb3RzdHJhcChlbGVtZW50LCBtb2R1bGVzLCBjb25maWcpIHtcbiAgaWYgKCFpc09iamVjdChjb25maWcpKSBjb25maWcgPSB7fTtcbiAgdmFyIGRlZmF1bHRDb25maWcgPSB7XG4gICAgc3RyaWN0RGk6IGZhbHNlXG4gIH07XG4gIGNvbmZpZyA9IGV4dGVuZChkZWZhdWx0Q29uZmlnLCBjb25maWcpO1xuICB2YXIgZG9Cb290c3RyYXAgPSBmdW5jdGlvbigpIHtcbiAgICBlbGVtZW50ID0ganFMaXRlKGVsZW1lbnQpO1xuXG4gICAgaWYgKGVsZW1lbnQuaW5qZWN0b3IoKSkge1xuICAgICAgdmFyIHRhZyA9IChlbGVtZW50WzBdID09PSBkb2N1bWVudCkgPyAnZG9jdW1lbnQnIDogc3RhcnRpbmdUYWcoZWxlbWVudCk7XG4gICAgICAvL0VuY29kZSBhbmdsZSBicmFja2V0cyB0byBwcmV2ZW50IGlucHV0IGZyb20gYmVpbmcgc2FuaXRpemVkIHRvIGVtcHR5IHN0cmluZyAjODY4M1xuICAgICAgdGhyb3cgbmdNaW5FcnIoXG4gICAgICAgICAgJ2J0c3RycGQnLFxuICAgICAgICAgIFwiQXBwIEFscmVhZHkgQm9vdHN0cmFwcGVkIHdpdGggdGhpcyBFbGVtZW50ICd7MH0nXCIsXG4gICAgICAgICAgdGFnLnJlcGxhY2UoLzwvLCcmbHQ7JykucmVwbGFjZSgvPi8sJyZndDsnKSk7XG4gICAgfVxuXG4gICAgbW9kdWxlcyA9IG1vZHVsZXMgfHwgW107XG4gICAgbW9kdWxlcy51bnNoaWZ0KFsnJHByb3ZpZGUnLCBmdW5jdGlvbigkcHJvdmlkZSkge1xuICAgICAgJHByb3ZpZGUudmFsdWUoJyRyb290RWxlbWVudCcsIGVsZW1lbnQpO1xuICAgIH1dKTtcblxuICAgIGlmIChjb25maWcuZGVidWdJbmZvRW5hYmxlZCkge1xuICAgICAgLy8gUHVzaGluZyBzbyB0aGF0IHRoaXMgb3ZlcnJpZGVzIGBkZWJ1Z0luZm9FbmFibGVkYCBzZXR0aW5nIGRlZmluZWQgaW4gdXNlcidzIGBtb2R1bGVzYC5cbiAgICAgIG1vZHVsZXMucHVzaChbJyRjb21waWxlUHJvdmlkZXInLCBmdW5jdGlvbigkY29tcGlsZVByb3ZpZGVyKSB7XG4gICAgICAgICRjb21waWxlUHJvdmlkZXIuZGVidWdJbmZvRW5hYmxlZCh0cnVlKTtcbiAgICAgIH1dKTtcbiAgICB9XG5cbiAgICBtb2R1bGVzLnVuc2hpZnQoJ25nJyk7XG4gICAgdmFyIGluamVjdG9yID0gY3JlYXRlSW5qZWN0b3IobW9kdWxlcywgY29uZmlnLnN0cmljdERpKTtcbiAgICBpbmplY3Rvci5pbnZva2UoWyckcm9vdFNjb3BlJywgJyRyb290RWxlbWVudCcsICckY29tcGlsZScsICckaW5qZWN0b3InLFxuICAgICAgIGZ1bmN0aW9uIGJvb3RzdHJhcEFwcGx5KHNjb3BlLCBlbGVtZW50LCBjb21waWxlLCBpbmplY3Rvcikge1xuICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbWVudC5kYXRhKCckaW5qZWN0b3InLCBpbmplY3Rvcik7XG4gICAgICAgICAgY29tcGlsZShlbGVtZW50KShzY29wZSk7XG4gICAgICAgIH0pO1xuICAgICAgfV1cbiAgICApO1xuICAgIHJldHVybiBpbmplY3RvcjtcbiAgfTtcblxuICB2YXIgTkdfRU5BQkxFX0RFQlVHX0lORk8gPSAvXk5HX0VOQUJMRV9ERUJVR19JTkZPIS87XG4gIHZhciBOR19ERUZFUl9CT09UU1RSQVAgPSAvXk5HX0RFRkVSX0JPT1RTVFJBUCEvO1xuXG4gIGlmICh3aW5kb3cgJiYgTkdfRU5BQkxFX0RFQlVHX0lORk8udGVzdCh3aW5kb3cubmFtZSkpIHtcbiAgICBjb25maWcuZGVidWdJbmZvRW5hYmxlZCA9IHRydWU7XG4gICAgd2luZG93Lm5hbWUgPSB3aW5kb3cubmFtZS5yZXBsYWNlKE5HX0VOQUJMRV9ERUJVR19JTkZPLCAnJyk7XG4gIH1cblxuICBpZiAod2luZG93ICYmICFOR19ERUZFUl9CT09UU1RSQVAudGVzdCh3aW5kb3cubmFtZSkpIHtcbiAgICByZXR1cm4gZG9Cb290c3RyYXAoKTtcbiAgfVxuXG4gIHdpbmRvdy5uYW1lID0gd2luZG93Lm5hbWUucmVwbGFjZShOR19ERUZFUl9CT09UU1RSQVAsICcnKTtcbiAgYW5ndWxhci5yZXN1bWVCb290c3RyYXAgPSBmdW5jdGlvbihleHRyYU1vZHVsZXMpIHtcbiAgICBmb3JFYWNoKGV4dHJhTW9kdWxlcywgZnVuY3Rpb24obW9kdWxlKSB7XG4gICAgICBtb2R1bGVzLnB1c2gobW9kdWxlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZG9Cb290c3RyYXAoKTtcbiAgfTtcblxuICBpZiAoaXNGdW5jdGlvbihhbmd1bGFyLnJlc3VtZURlZmVycmVkQm9vdHN0cmFwKSkge1xuICAgIGFuZ3VsYXIucmVzdW1lRGVmZXJyZWRCb290c3RyYXAoKTtcbiAgfVxufVxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5yZWxvYWRXaXRoRGVidWdJbmZvXG4gKiBAbW9kdWxlIG5nXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzZSB0aGlzIGZ1bmN0aW9uIHRvIHJlbG9hZCB0aGUgY3VycmVudCBhcHBsaWNhdGlvbiB3aXRoIGRlYnVnIGluZm9ybWF0aW9uIHR1cm5lZCBvbi5cbiAqIFRoaXMgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIGEgY2FsbCB0byBgJGNvbXBpbGVQcm92aWRlci5kZWJ1Z0luZm9FbmFibGVkKGZhbHNlKWAuXG4gKlxuICogU2VlIHtAbGluayBuZy4kY29tcGlsZVByb3ZpZGVyI2RlYnVnSW5mb0VuYWJsZWR9IGZvciBtb3JlLlxuICovXG5mdW5jdGlvbiByZWxvYWRXaXRoRGVidWdJbmZvKCkge1xuICB3aW5kb3cubmFtZSA9ICdOR19FTkFCTEVfREVCVUdfSU5GTyEnICsgd2luZG93Lm5hbWU7XG4gIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbn1cblxuLyoqXG4gKiBAbmFtZSBhbmd1bGFyLmdldFRlc3RhYmlsaXR5XG4gKiBAbW9kdWxlIG5nXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdldCB0aGUgdGVzdGFiaWxpdHkgc2VydmljZSBmb3IgdGhlIGluc3RhbmNlIG9mIEFuZ3VsYXIgb24gdGhlIGdpdmVuXG4gKiBlbGVtZW50LlxuICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IERPTSBlbGVtZW50IHdoaWNoIGlzIHRoZSByb290IG9mIGFuZ3VsYXIgYXBwbGljYXRpb24uXG4gKi9cbmZ1bmN0aW9uIGdldFRlc3RhYmlsaXR5KHJvb3RFbGVtZW50KSB7XG4gIHZhciBpbmplY3RvciA9IGFuZ3VsYXIuZWxlbWVudChyb290RWxlbWVudCkuaW5qZWN0b3IoKTtcbiAgaWYgKCFpbmplY3Rvcikge1xuICAgIHRocm93IG5nTWluRXJyKCd0ZXN0JyxcbiAgICAgICdubyBpbmplY3RvciBmb3VuZCBmb3IgZWxlbWVudCBhcmd1bWVudCB0byBnZXRUZXN0YWJpbGl0eScpO1xuICB9XG4gIHJldHVybiBpbmplY3Rvci5nZXQoJyQkdGVzdGFiaWxpdHknKTtcbn1cblxudmFyIFNOQUtFX0NBU0VfUkVHRVhQID0gL1tBLVpdL2c7XG5mdW5jdGlvbiBzbmFrZV9jYXNlKG5hbWUsIHNlcGFyYXRvcikge1xuICBzZXBhcmF0b3IgPSBzZXBhcmF0b3IgfHwgJ18nO1xuICByZXR1cm4gbmFtZS5yZXBsYWNlKFNOQUtFX0NBU0VfUkVHRVhQLCBmdW5jdGlvbihsZXR0ZXIsIHBvcykge1xuICAgIHJldHVybiAocG9zID8gc2VwYXJhdG9yIDogJycpICsgbGV0dGVyLnRvTG93ZXJDYXNlKCk7XG4gIH0pO1xufVxuXG52YXIgYmluZEpRdWVyeUZpcmVkID0gZmFsc2U7XG52YXIgc2tpcERlc3Ryb3lPbk5leHRKUXVlcnlDbGVhbkRhdGE7XG5mdW5jdGlvbiBiaW5kSlF1ZXJ5KCkge1xuICB2YXIgb3JpZ2luYWxDbGVhbkRhdGE7XG5cbiAgaWYgKGJpbmRKUXVlcnlGaXJlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGJpbmQgdG8galF1ZXJ5IGlmIHByZXNlbnQ7XG4gIGpRdWVyeSA9IHdpbmRvdy5qUXVlcnk7XG4gIC8vIFVzZSBqUXVlcnkgaWYgaXQgZXhpc3RzIHdpdGggcHJvcGVyIGZ1bmN0aW9uYWxpdHksIG90aGVyd2lzZSBkZWZhdWx0IHRvIHVzLlxuICAvLyBBbmd1bGFyIDEuMisgcmVxdWlyZXMgalF1ZXJ5IDEuNysgZm9yIG9uKCkvb2ZmKCkgc3VwcG9ydC5cbiAgLy8gQW5ndWxhciAxLjMrIHRlY2huaWNhbGx5IHJlcXVpcmVzIGF0IGxlYXN0IGpRdWVyeSAyLjErIGJ1dCBpdCBtYXkgd29yayB3aXRoIG9sZGVyXG4gIC8vIHZlcnNpb25zLiBJdCB3aWxsIG5vdCB3b3JrIGZvciBzdXJlIHdpdGggalF1ZXJ5IDwxLjcsIHRob3VnaC5cbiAgaWYgKGpRdWVyeSAmJiBqUXVlcnkuZm4ub24pIHtcbiAgICBqcUxpdGUgPSBqUXVlcnk7XG4gICAgZXh0ZW5kKGpRdWVyeS5mbiwge1xuICAgICAgc2NvcGU6IEpRTGl0ZVByb3RvdHlwZS5zY29wZSxcbiAgICAgIGlzb2xhdGVTY29wZTogSlFMaXRlUHJvdG90eXBlLmlzb2xhdGVTY29wZSxcbiAgICAgIGNvbnRyb2xsZXI6IEpRTGl0ZVByb3RvdHlwZS5jb250cm9sbGVyLFxuICAgICAgaW5qZWN0b3I6IEpRTGl0ZVByb3RvdHlwZS5pbmplY3RvcixcbiAgICAgIGluaGVyaXRlZERhdGE6IEpRTGl0ZVByb3RvdHlwZS5pbmhlcml0ZWREYXRhXG4gICAgfSk7XG5cbiAgICAvLyBBbGwgbm9kZXMgcmVtb3ZlZCBmcm9tIHRoZSBET00gdmlhIHZhcmlvdXMgalF1ZXJ5IEFQSXMgbGlrZSAucmVtb3ZlKClcbiAgICAvLyBhcmUgcGFzc2VkIHRocm91Z2ggalF1ZXJ5LmNsZWFuRGF0YS4gTW9ua2V5LXBhdGNoIHRoaXMgbWV0aG9kIHRvIGZpcmVcbiAgICAvLyB0aGUgJGRlc3Ryb3kgZXZlbnQgb24gYWxsIHJlbW92ZWQgbm9kZXMuXG4gICAgb3JpZ2luYWxDbGVhbkRhdGEgPSBqUXVlcnkuY2xlYW5EYXRhO1xuICAgIGpRdWVyeS5jbGVhbkRhdGEgPSBmdW5jdGlvbihlbGVtcykge1xuICAgICAgdmFyIGV2ZW50cztcbiAgICAgIGlmICghc2tpcERlc3Ryb3lPbk5leHRKUXVlcnlDbGVhbkRhdGEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGVsZW07IChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKykge1xuICAgICAgICAgIGV2ZW50cyA9IGpRdWVyeS5fZGF0YShlbGVtLCBcImV2ZW50c1wiKTtcbiAgICAgICAgICBpZiAoZXZlbnRzICYmIGV2ZW50cy4kZGVzdHJveSkge1xuICAgICAgICAgICAgalF1ZXJ5KGVsZW0pLnRyaWdnZXJIYW5kbGVyKCckZGVzdHJveScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2tpcERlc3Ryb3lPbk5leHRKUXVlcnlDbGVhbkRhdGEgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIG9yaWdpbmFsQ2xlYW5EYXRhKGVsZW1zKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGpxTGl0ZSA9IEpRTGl0ZTtcbiAgfVxuXG4gIGFuZ3VsYXIuZWxlbWVudCA9IGpxTGl0ZTtcblxuICAvLyBQcmV2ZW50IGRvdWJsZS1wcm94eWluZy5cbiAgYmluZEpRdWVyeUZpcmVkID0gdHJ1ZTtcbn1cblxuLyoqXG4gKiB0aHJvdyBlcnJvciBpZiB0aGUgYXJndW1lbnQgaXMgZmFsc3kuXG4gKi9cbmZ1bmN0aW9uIGFzc2VydEFyZyhhcmcsIG5hbWUsIHJlYXNvbikge1xuICBpZiAoIWFyZykge1xuICAgIHRocm93IG5nTWluRXJyKCdhcmVxJywgXCJBcmd1bWVudCAnezB9JyBpcyB7MX1cIiwgKG5hbWUgfHwgJz8nKSwgKHJlYXNvbiB8fCBcInJlcXVpcmVkXCIpKTtcbiAgfVxuICByZXR1cm4gYXJnO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRBcmdGbihhcmcsIG5hbWUsIGFjY2VwdEFycmF5QW5ub3RhdGlvbikge1xuICBpZiAoYWNjZXB0QXJyYXlBbm5vdGF0aW9uICYmIGlzQXJyYXkoYXJnKSkge1xuICAgICAgYXJnID0gYXJnW2FyZy5sZW5ndGggLSAxXTtcbiAgfVxuXG4gIGFzc2VydEFyZyhpc0Z1bmN0aW9uKGFyZyksIG5hbWUsICdub3QgYSBmdW5jdGlvbiwgZ290ICcgK1xuICAgICAgKGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyA/IGFyZy5jb25zdHJ1Y3Rvci5uYW1lIHx8ICdPYmplY3QnIDogdHlwZW9mIGFyZykpO1xuICByZXR1cm4gYXJnO1xufVxuXG4vKipcbiAqIHRocm93IGVycm9yIGlmIHRoZSBuYW1lIGdpdmVuIGlzIGhhc093blByb3BlcnR5XG4gKiBAcGFyYW0gIHtTdHJpbmd9IG5hbWUgICAgdGhlIG5hbWUgdG8gdGVzdFxuICogQHBhcmFtICB7U3RyaW5nfSBjb250ZXh0IHRoZSBjb250ZXh0IGluIHdoaWNoIHRoZSBuYW1lIGlzIHVzZWQsIHN1Y2ggYXMgbW9kdWxlIG9yIGRpcmVjdGl2ZVxuICovXG5mdW5jdGlvbiBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eShuYW1lLCBjb250ZXh0KSB7XG4gIGlmIChuYW1lID09PSAnaGFzT3duUHJvcGVydHknKSB7XG4gICAgdGhyb3cgbmdNaW5FcnIoJ2JhZG5hbWUnLCBcImhhc093blByb3BlcnR5IGlzIG5vdCBhIHZhbGlkIHswfSBuYW1lXCIsIGNvbnRleHQpO1xuICB9XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSB2YWx1ZSBhY2Nlc3NpYmxlIGZyb20gdGhlIG9iamVjdCBieSBwYXRoLiBBbnkgdW5kZWZpbmVkIHRyYXZlcnNhbHMgYXJlIGlnbm9yZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogc3RhcnRpbmcgb2JqZWN0XG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0aCBwYXRoIHRvIHRyYXZlcnNlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtiaW5kRm5Ub1Njb3BlPXRydWVdXG4gKiBAcmV0dXJucyB7T2JqZWN0fSB2YWx1ZSBhcyBhY2Nlc3NpYmxlIGJ5IHBhdGhcbiAqL1xuLy9UT0RPKG1pc2tvKTogdGhpcyBmdW5jdGlvbiBuZWVkcyB0byBiZSByZW1vdmVkXG5mdW5jdGlvbiBnZXR0ZXIob2JqLCBwYXRoLCBiaW5kRm5Ub1Njb3BlKSB7XG4gIGlmICghcGF0aCkgcmV0dXJuIG9iajtcbiAgdmFyIGtleXMgPSBwYXRoLnNwbGl0KCcuJyk7XG4gIHZhciBrZXk7XG4gIHZhciBsYXN0SW5zdGFuY2UgPSBvYmo7XG4gIHZhciBsZW4gPSBrZXlzLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAob2JqKSB7XG4gICAgICBvYmogPSAobGFzdEluc3RhbmNlID0gb2JqKVtrZXldO1xuICAgIH1cbiAgfVxuICBpZiAoIWJpbmRGblRvU2NvcGUgJiYgaXNGdW5jdGlvbihvYmopKSB7XG4gICAgcmV0dXJuIGJpbmQobGFzdEluc3RhbmNlLCBvYmopO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBET00gc2libGluZ3MgYmV0d2VlbiB0aGUgZmlyc3QgYW5kIGxhc3Qgbm9kZSBpbiB0aGUgZ2l2ZW4gYXJyYXkuXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBsaWtlIG9iamVjdFxuICogQHJldHVybnMge2pxTGl0ZX0ganFMaXRlIGNvbGxlY3Rpb24gY29udGFpbmluZyB0aGUgbm9kZXNcbiAqL1xuZnVuY3Rpb24gZ2V0QmxvY2tOb2Rlcyhub2Rlcykge1xuICAvLyBUT0RPKHBlcmYpOiBqdXN0IGNoZWNrIGlmIGFsbCBpdGVtcyBpbiBgbm9kZXNgIGFyZSBzaWJsaW5ncyBhbmQgaWYgdGhleSBhcmUgcmV0dXJuIHRoZSBvcmlnaW5hbFxuICAvLyAgICAgICAgICAgICBjb2xsZWN0aW9uLCBvdGhlcndpc2UgdXBkYXRlIHRoZSBvcmlnaW5hbCBjb2xsZWN0aW9uLlxuICB2YXIgbm9kZSA9IG5vZGVzWzBdO1xuICB2YXIgZW5kTm9kZSA9IG5vZGVzW25vZGVzLmxlbmd0aCAtIDFdO1xuICB2YXIgYmxvY2tOb2RlcyA9IFtub2RlXTtcblxuICBkbyB7XG4gICAgbm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgaWYgKCFub2RlKSBicmVhaztcbiAgICBibG9ja05vZGVzLnB1c2gobm9kZSk7XG4gIH0gd2hpbGUgKG5vZGUgIT09IGVuZE5vZGUpO1xuXG4gIHJldHVybiBqcUxpdGUoYmxvY2tOb2Rlcyk7XG59XG5cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IG9iamVjdCB3aXRob3V0IGEgcHJvdG90eXBlLiBUaGlzIG9iamVjdCBpcyB1c2VmdWwgZm9yIGxvb2t1cCB3aXRob3V0IGhhdmluZyB0b1xuICogZ3VhcmQgYWdhaW5zdCBwcm90b3R5cGljYWxseSBpbmhlcml0ZWQgcHJvcGVydGllcyB2aWEgaGFzT3duUHJvcGVydHkuXG4gKlxuICogUmVsYXRlZCBtaWNyby1iZW5jaG1hcmtzOlxuICogLSBodHRwOi8vanNwZXJmLmNvbS9vYmplY3QtY3JlYXRlMlxuICogLSBodHRwOi8vanNwZXJmLmNvbS9wcm90by1tYXAtbG9va3VwLzJcbiAqIC0gaHR0cDovL2pzcGVyZi5jb20vZm9yLWluLXZzLW9iamVjdC1rZXlzMlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZU1hcCgpIHtcbiAgcmV0dXJuIE9iamVjdC5jcmVhdGUobnVsbCk7XG59XG5cbnZhciBOT0RFX1RZUEVfRUxFTUVOVCA9IDE7XG52YXIgTk9ERV9UWVBFX1RFWFQgPSAzO1xudmFyIE5PREVfVFlQRV9DT01NRU5UID0gODtcbnZhciBOT0RFX1RZUEVfRE9DVU1FTlQgPSA5O1xudmFyIE5PREVfVFlQRV9ET0NVTUVOVF9GUkFHTUVOVCA9IDExO1xuXG4vKipcbiAqIEBuZ2RvYyB0eXBlXG4gKiBAbmFtZSBhbmd1bGFyLk1vZHVsZVxuICogQG1vZHVsZSBuZ1xuICogQGRlc2NyaXB0aW9uXG4gKlxuICogSW50ZXJmYWNlIGZvciBjb25maWd1cmluZyBhbmd1bGFyIHtAbGluayBhbmd1bGFyLm1vZHVsZSBtb2R1bGVzfS5cbiAqL1xuXG5mdW5jdGlvbiBzZXR1cE1vZHVsZUxvYWRlcih3aW5kb3cpIHtcblxuICB2YXIgJGluamVjdG9yTWluRXJyID0gbWluRXJyKCckaW5qZWN0b3InKTtcbiAgdmFyIG5nTWluRXJyID0gbWluRXJyKCduZycpO1xuXG4gIGZ1bmN0aW9uIGVuc3VyZShvYmosIG5hbWUsIGZhY3RvcnkpIHtcbiAgICByZXR1cm4gb2JqW25hbWVdIHx8IChvYmpbbmFtZV0gPSBmYWN0b3J5KCkpO1xuICB9XG5cbiAgdmFyIGFuZ3VsYXIgPSBlbnN1cmUod2luZG93LCAnYW5ndWxhcicsIE9iamVjdCk7XG5cbiAgLy8gV2UgbmVlZCB0byBleHBvc2UgYGFuZ3VsYXIuJCRtaW5FcnJgIHRvIG1vZHVsZXMgc3VjaCBhcyBgbmdSZXNvdXJjZWAgdGhhdCByZWZlcmVuY2UgaXQgZHVyaW5nIGJvb3RzdHJhcFxuICBhbmd1bGFyLiQkbWluRXJyID0gYW5ndWxhci4kJG1pbkVyciB8fCBtaW5FcnI7XG5cbiAgcmV0dXJuIGVuc3VyZShhbmd1bGFyLCAnbW9kdWxlJywgZnVuY3Rpb24oKSB7XG4gICAgLyoqIEB0eXBlIHtPYmplY3QuPHN0cmluZywgYW5ndWxhci5Nb2R1bGU+fSAqL1xuICAgIHZhciBtb2R1bGVzID0ge307XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICAgKiBAbmFtZSBhbmd1bGFyLm1vZHVsZVxuICAgICAqIEBtb2R1bGUgbmdcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKlxuICAgICAqIFRoZSBgYW5ndWxhci5tb2R1bGVgIGlzIGEgZ2xvYmFsIHBsYWNlIGZvciBjcmVhdGluZywgcmVnaXN0ZXJpbmcgYW5kIHJldHJpZXZpbmcgQW5ndWxhclxuICAgICAqIG1vZHVsZXMuXG4gICAgICogQWxsIG1vZHVsZXMgKGFuZ3VsYXIgY29yZSBvciAzcmQgcGFydHkpIHRoYXQgc2hvdWxkIGJlIGF2YWlsYWJsZSB0byBhbiBhcHBsaWNhdGlvbiBtdXN0IGJlXG4gICAgICogcmVnaXN0ZXJlZCB1c2luZyB0aGlzIG1lY2hhbmlzbS5cbiAgICAgKlxuICAgICAqIFdoZW4gcGFzc2VkIHR3byBvciBtb3JlIGFyZ3VtZW50cywgYSBuZXcgbW9kdWxlIGlzIGNyZWF0ZWQuICBJZiBwYXNzZWQgb25seSBvbmUgYXJndW1lbnQsIGFuXG4gICAgICogZXhpc3RpbmcgbW9kdWxlICh0aGUgbmFtZSBwYXNzZWQgYXMgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIGBtb2R1bGVgKSBpcyByZXRyaWV2ZWQuXG4gICAgICpcbiAgICAgKlxuICAgICAqICMgTW9kdWxlXG4gICAgICpcbiAgICAgKiBBIG1vZHVsZSBpcyBhIGNvbGxlY3Rpb24gb2Ygc2VydmljZXMsIGRpcmVjdGl2ZXMsIGNvbnRyb2xsZXJzLCBmaWx0ZXJzLCBhbmQgY29uZmlndXJhdGlvbiBpbmZvcm1hdGlvbi5cbiAgICAgKiBgYW5ndWxhci5tb2R1bGVgIGlzIHVzZWQgdG8gY29uZmlndXJlIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfS5cbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogLy8gQ3JlYXRlIGEgbmV3IG1vZHVsZVxuICAgICAqIHZhciBteU1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdteU1vZHVsZScsIFtdKTtcbiAgICAgKlxuICAgICAqIC8vIHJlZ2lzdGVyIGEgbmV3IHNlcnZpY2VcbiAgICAgKiBteU1vZHVsZS52YWx1ZSgnYXBwTmFtZScsICdNeUNvb2xBcHAnKTtcbiAgICAgKlxuICAgICAqIC8vIGNvbmZpZ3VyZSBleGlzdGluZyBzZXJ2aWNlcyBpbnNpZGUgaW5pdGlhbGl6YXRpb24gYmxvY2tzLlxuICAgICAqIG15TW9kdWxlLmNvbmZpZyhbJyRsb2NhdGlvblByb3ZpZGVyJywgZnVuY3Rpb24oJGxvY2F0aW9uUHJvdmlkZXIpIHtcbiAgICAgKiAgIC8vIENvbmZpZ3VyZSBleGlzdGluZyBwcm92aWRlcnNcbiAgICAgKiAgICRsb2NhdGlvblByb3ZpZGVyLmhhc2hQcmVmaXgoJyEnKTtcbiAgICAgKiB9XSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBUaGVuIHlvdSBjYW4gY3JlYXRlIGFuIGluamVjdG9yIGFuZCBsb2FkIHlvdXIgbW9kdWxlcyBsaWtlIHRoaXM6XG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIHZhciBpbmplY3RvciA9IGFuZ3VsYXIuaW5qZWN0b3IoWyduZycsICdteU1vZHVsZSddKVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogSG93ZXZlciBpdCdzIG1vcmUgbGlrZWx5IHRoYXQgeW91J2xsIGp1c3QgdXNlXG4gICAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0FwcCBuZ0FwcH0gb3JcbiAgICAgKiB7QGxpbmsgYW5ndWxhci5ib290c3RyYXB9IHRvIHNpbXBsaWZ5IHRoaXMgcHJvY2VzcyBmb3IgeW91LlxuICAgICAqXG4gICAgICogQHBhcmFtIHshc3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBtb2R1bGUgdG8gY3JlYXRlIG9yIHJldHJpZXZlLlxuICAgICAqIEBwYXJhbSB7IUFycmF5LjxzdHJpbmc+PX0gcmVxdWlyZXMgSWYgc3BlY2lmaWVkIHRoZW4gbmV3IG1vZHVsZSBpcyBiZWluZyBjcmVhdGVkLiBJZlxuICAgICAqICAgICAgICB1bnNwZWNpZmllZCB0aGVuIHRoZSBtb2R1bGUgaXMgYmVpbmcgcmV0cmlldmVkIGZvciBmdXJ0aGVyIGNvbmZpZ3VyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbj19IGNvbmZpZ0ZuIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gZnVuY3Rpb24gZm9yIHRoZSBtb2R1bGUuIFNhbWUgYXNcbiAgICAgKiAgICAgICAge0BsaW5rIGFuZ3VsYXIuTW9kdWxlI2NvbmZpZyBNb2R1bGUjY29uZmlnKCl9LlxuICAgICAqIEByZXR1cm5zIHttb2R1bGV9IG5ldyBtb2R1bGUgd2l0aCB0aGUge0BsaW5rIGFuZ3VsYXIuTW9kdWxlfSBhcGkuXG4gICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1vZHVsZShuYW1lLCByZXF1aXJlcywgY29uZmlnRm4pIHtcbiAgICAgIHZhciBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eSA9IGZ1bmN0aW9uKG5hbWUsIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKG5hbWUgPT09ICdoYXNPd25Qcm9wZXJ0eScpIHtcbiAgICAgICAgICB0aHJvdyBuZ01pbkVycignYmFkbmFtZScsICdoYXNPd25Qcm9wZXJ0eSBpcyBub3QgYSB2YWxpZCB7MH0gbmFtZScsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eShuYW1lLCAnbW9kdWxlJyk7XG4gICAgICBpZiAocmVxdWlyZXMgJiYgbW9kdWxlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBtb2R1bGVzW25hbWVdID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbnN1cmUobW9kdWxlcywgbmFtZSwgZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICghcmVxdWlyZXMpIHtcbiAgICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ25vbW9kJywgXCJNb2R1bGUgJ3swfScgaXMgbm90IGF2YWlsYWJsZSEgWW91IGVpdGhlciBtaXNzcGVsbGVkIFwiICtcbiAgICAgICAgICAgICBcInRoZSBtb2R1bGUgbmFtZSBvciBmb3Jnb3QgdG8gbG9hZCBpdC4gSWYgcmVnaXN0ZXJpbmcgYSBtb2R1bGUgZW5zdXJlIHRoYXQgeW91IFwiICtcbiAgICAgICAgICAgICBcInNwZWNpZnkgdGhlIGRlcGVuZGVuY2llcyBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LlwiLCBuYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKiBAdHlwZSB7IUFycmF5LjxBcnJheS48Kj4+fSAqL1xuICAgICAgICB2YXIgaW52b2tlUXVldWUgPSBbXTtcblxuICAgICAgICAvKiogQHR5cGUgeyFBcnJheS48RnVuY3Rpb24+fSAqL1xuICAgICAgICB2YXIgY29uZmlnQmxvY2tzID0gW107XG5cbiAgICAgICAgLyoqIEB0eXBlIHshQXJyYXkuPEZ1bmN0aW9uPn0gKi9cbiAgICAgICAgdmFyIHJ1bkJsb2NrcyA9IFtdO1xuXG4gICAgICAgIHZhciBjb25maWcgPSBpbnZva2VMYXRlcignJGluamVjdG9yJywgJ2ludm9rZScsICdwdXNoJywgY29uZmlnQmxvY2tzKTtcblxuICAgICAgICAvKiogQHR5cGUge2FuZ3VsYXIuTW9kdWxlfSAqL1xuICAgICAgICB2YXIgbW9kdWxlSW5zdGFuY2UgPSB7XG4gICAgICAgICAgLy8gUHJpdmF0ZSBzdGF0ZVxuICAgICAgICAgIF9pbnZva2VRdWV1ZTogaW52b2tlUXVldWUsXG4gICAgICAgICAgX2NvbmZpZ0Jsb2NrczogY29uZmlnQmxvY2tzLFxuICAgICAgICAgIF9ydW5CbG9ja3M6IHJ1bkJsb2NrcyxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBwcm9wZXJ0eVxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI3JlcXVpcmVzXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogSG9sZHMgdGhlIGxpc3Qgb2YgbW9kdWxlcyB3aGljaCB0aGUgaW5qZWN0b3Igd2lsbCBsb2FkIGJlZm9yZSB0aGUgY3VycmVudCBtb2R1bGUgaXNcbiAgICAgICAgICAgKiBsb2FkZWQuXG4gICAgICAgICAgICovXG4gICAgICAgICAgcmVxdWlyZXM6IHJlcXVpcmVzLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIHByb3BlcnR5XG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjbmFtZVxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIE5hbWUgb2YgdGhlIG1vZHVsZS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBuYW1lOiBuYW1lLFxuXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjcHJvdmlkZXJcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgc2VydmljZSBuYW1lXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJvdmlkZXJUeXBlIENvbnN0cnVjdGlvbiBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlIG9mIHRoZVxuICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlLlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgYXV0by4kcHJvdmlkZSNwcm92aWRlciAkcHJvdmlkZS5wcm92aWRlcigpfS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBwcm92aWRlcjogaW52b2tlTGF0ZXIoJyRwcm92aWRlJywgJ3Byb3ZpZGVyJyksXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjZmFjdG9yeVxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBzZXJ2aWNlIG5hbWVcbiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcm92aWRlckZ1bmN0aW9uIEZ1bmN0aW9uIGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2Ugb2YgdGhlIHNlcnZpY2UuXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogU2VlIHtAbGluayBhdXRvLiRwcm92aWRlI2ZhY3RvcnkgJHByb3ZpZGUuZmFjdG9yeSgpfS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBmYWN0b3J5OiBpbnZva2VMYXRlcignJHByb3ZpZGUnLCAnZmFjdG9yeScpLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI3NlcnZpY2VcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgc2VydmljZSBuYW1lXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29uc3RydWN0b3IgQSBjb25zdHJ1Y3RvciBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgaW5zdGFudGlhdGVkLlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgYXV0by4kcHJvdmlkZSNzZXJ2aWNlICRwcm92aWRlLnNlcnZpY2UoKX0uXG4gICAgICAgICAgICovXG4gICAgICAgICAgc2VydmljZTogaW52b2tlTGF0ZXIoJyRwcm92aWRlJywgJ3NlcnZpY2UnKSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSN2YWx1ZVxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBzZXJ2aWNlIG5hbWVcbiAgICAgICAgICAgKiBAcGFyYW0geyp9IG9iamVjdCBTZXJ2aWNlIGluc3RhbmNlIG9iamVjdC5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBTZWUge0BsaW5rIGF1dG8uJHByb3ZpZGUjdmFsdWUgJHByb3ZpZGUudmFsdWUoKX0uXG4gICAgICAgICAgICovXG4gICAgICAgICAgdmFsdWU6IGludm9rZUxhdGVyKCckcHJvdmlkZScsICd2YWx1ZScpLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2NvbnN0YW50XG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIGNvbnN0YW50IG5hbWVcbiAgICAgICAgICAgKiBAcGFyYW0geyp9IG9iamVjdCBDb25zdGFudCB2YWx1ZS5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBCZWNhdXNlIHRoZSBjb25zdGFudCBhcmUgZml4ZWQsIHRoZXkgZ2V0IGFwcGxpZWQgYmVmb3JlIG90aGVyIHByb3ZpZGUgbWV0aG9kcy5cbiAgICAgICAgICAgKiBTZWUge0BsaW5rIGF1dG8uJHByb3ZpZGUjY29uc3RhbnQgJHByb3ZpZGUuY29uc3RhbnQoKX0uXG4gICAgICAgICAgICovXG4gICAgICAgICAgY29uc3RhbnQ6IGludm9rZUxhdGVyKCckcHJvdmlkZScsICdjb25zdGFudCcsICd1bnNoaWZ0JyksXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjYW5pbWF0aW9uXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIGFuaW1hdGlvbiBuYW1lXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYW5pbWF0aW9uRmFjdG9yeSBGYWN0b3J5IGZ1bmN0aW9uIGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2Ugb2YgYW5cbiAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqICoqTk9URSoqOiBhbmltYXRpb25zIHRha2UgZWZmZWN0IG9ubHkgaWYgdGhlICoqbmdBbmltYXRlKiogbW9kdWxlIGlzIGxvYWRlZC5cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqXG4gICAgICAgICAgICogRGVmaW5lcyBhbiBhbmltYXRpb24gaG9vayB0aGF0IGNhbiBiZSBsYXRlciB1c2VkIHdpdGhcbiAgICAgICAgICAgKiB7QGxpbmsgbmdBbmltYXRlLiRhbmltYXRlICRhbmltYXRlfSBzZXJ2aWNlIGFuZCBkaXJlY3RpdmVzIHRoYXQgdXNlIHRoaXMgc2VydmljZS5cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIGBgYGpzXG4gICAgICAgICAgICogbW9kdWxlLmFuaW1hdGlvbignLmFuaW1hdGlvbi1uYW1lJywgZnVuY3Rpb24oJGluamVjdDEsICRpbmplY3QyKSB7XG4gICAgICAgICAgICogICByZXR1cm4ge1xuICAgICAgICAgICAqICAgICBldmVudE5hbWUgOiBmdW5jdGlvbihlbGVtZW50LCBkb25lKSB7XG4gICAgICAgICAgICogICAgICAgLy9jb2RlIHRvIHJ1biB0aGUgYW5pbWF0aW9uXG4gICAgICAgICAgICogICAgICAgLy9vbmNlIGNvbXBsZXRlLCB0aGVuIHJ1biBkb25lKClcbiAgICAgICAgICAgKiAgICAgICByZXR1cm4gZnVuY3Rpb24gY2FuY2VsbGF0aW9uRnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAqICAgICAgICAgLy9jb2RlIHRvIGNhbmNlbCB0aGUgYW5pbWF0aW9uXG4gICAgICAgICAgICogICAgICAgfVxuICAgICAgICAgICAqICAgICB9XG4gICAgICAgICAgICogICB9XG4gICAgICAgICAgICogfSlcbiAgICAgICAgICAgKiBgYGBcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgbmcuJGFuaW1hdGVQcm92aWRlciNyZWdpc3RlciAkYW5pbWF0ZVByb3ZpZGVyLnJlZ2lzdGVyKCl9IGFuZFxuICAgICAgICAgICAqIHtAbGluayBuZ0FuaW1hdGUgbmdBbmltYXRlIG1vZHVsZX0gZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICAgICAgICovXG4gICAgICAgICAgYW5pbWF0aW9uOiBpbnZva2VMYXRlcignJGFuaW1hdGVQcm92aWRlcicsICdyZWdpc3RlcicpLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2ZpbHRlclxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBGaWx0ZXIgbmFtZS5cbiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmaWx0ZXJGYWN0b3J5IEZhY3RvcnkgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZSBvZiBmaWx0ZXIuXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogU2VlIHtAbGluayBuZy4kZmlsdGVyUHJvdmlkZXIjcmVnaXN0ZXIgJGZpbHRlclByb3ZpZGVyLnJlZ2lzdGVyKCl9LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGZpbHRlcjogaW52b2tlTGF0ZXIoJyRmaWx0ZXJQcm92aWRlcicsICdyZWdpc3RlcicpLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2NvbnRyb2xsZXJcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fSBuYW1lIENvbnRyb2xsZXIgbmFtZSwgb3IgYW4gb2JqZWN0IG1hcCBvZiBjb250cm9sbGVycyB3aGVyZSB0aGVcbiAgICAgICAgICAgKiAgICBrZXlzIGFyZSB0aGUgbmFtZXMgYW5kIHRoZSB2YWx1ZXMgYXJlIHRoZSBjb25zdHJ1Y3RvcnMuXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29uc3RydWN0b3IgQ29udHJvbGxlciBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBTZWUge0BsaW5rIG5nLiRjb250cm9sbGVyUHJvdmlkZXIjcmVnaXN0ZXIgJGNvbnRyb2xsZXJQcm92aWRlci5yZWdpc3RlcigpfS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBjb250cm9sbGVyOiBpbnZva2VMYXRlcignJGNvbnRyb2xsZXJQcm92aWRlcicsICdyZWdpc3RlcicpLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2RpcmVjdGl2ZVxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IG5hbWUgRGlyZWN0aXZlIG5hbWUsIG9yIGFuIG9iamVjdCBtYXAgb2YgZGlyZWN0aXZlcyB3aGVyZSB0aGVcbiAgICAgICAgICAgKiAgICBrZXlzIGFyZSB0aGUgbmFtZXMgYW5kIHRoZSB2YWx1ZXMgYXJlIHRoZSBmYWN0b3JpZXMuXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZGlyZWN0aXZlRmFjdG9yeSBGYWN0b3J5IGZ1bmN0aW9uIGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2Ugb2ZcbiAgICAgICAgICAgKiBkaXJlY3RpdmVzLlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgbmcuJGNvbXBpbGVQcm92aWRlciNkaXJlY3RpdmUgJGNvbXBpbGVQcm92aWRlci5kaXJlY3RpdmUoKX0uXG4gICAgICAgICAgICovXG4gICAgICAgICAgZGlyZWN0aXZlOiBpbnZva2VMYXRlcignJGNvbXBpbGVQcm92aWRlcicsICdkaXJlY3RpdmUnKSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNjb25maWdcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29uZmlnRm4gRXhlY3V0ZSB0aGlzIGZ1bmN0aW9uIG9uIG1vZHVsZSBsb2FkLiBVc2VmdWwgZm9yIHNlcnZpY2VcbiAgICAgICAgICAgKiAgICBjb25maWd1cmF0aW9uLlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFVzZSB0aGlzIG1ldGhvZCB0byByZWdpc3RlciB3b3JrIHdoaWNoIG5lZWRzIHRvIGJlIHBlcmZvcm1lZCBvbiBtb2R1bGUgbG9hZGluZy5cbiAgICAgICAgICAgKiBGb3IgbW9yZSBhYm91dCBob3cgdG8gY29uZmlndXJlIHNlcnZpY2VzLCBzZWVcbiAgICAgICAgICAgKiB7QGxpbmsgcHJvdmlkZXJzI3Byb3ZpZGVyLXJlY2lwZSBQcm92aWRlciBSZWNpcGV9LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGNvbmZpZzogY29uZmlnLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI3J1blxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpbml0aWFsaXphdGlvbkZuIEV4ZWN1dGUgdGhpcyBmdW5jdGlvbiBhZnRlciBpbmplY3RvciBjcmVhdGlvbi5cbiAgICAgICAgICAgKiAgICBVc2VmdWwgZm9yIGFwcGxpY2F0aW9uIGluaXRpYWxpemF0aW9uLlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFVzZSB0aGlzIG1ldGhvZCB0byByZWdpc3RlciB3b3JrIHdoaWNoIHNob3VsZCBiZSBwZXJmb3JtZWQgd2hlbiB0aGUgaW5qZWN0b3IgaXMgZG9uZVxuICAgICAgICAgICAqIGxvYWRpbmcgYWxsIG1vZHVsZXMuXG4gICAgICAgICAgICovXG4gICAgICAgICAgcnVuOiBmdW5jdGlvbihibG9jaykge1xuICAgICAgICAgICAgcnVuQmxvY2tzLnB1c2goYmxvY2spO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChjb25maWdGbikge1xuICAgICAgICAgIGNvbmZpZyhjb25maWdGbik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbW9kdWxlSW5zdGFuY2U7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm92aWRlclxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kXG4gICAgICAgICAqIEBwYXJhbSB7U3RyaW5nPX0gaW5zZXJ0TWV0aG9kXG4gICAgICAgICAqIEByZXR1cm5zIHthbmd1bGFyLk1vZHVsZX1cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGludm9rZUxhdGVyKHByb3ZpZGVyLCBtZXRob2QsIGluc2VydE1ldGhvZCwgcXVldWUpIHtcbiAgICAgICAgICBpZiAoIXF1ZXVlKSBxdWV1ZSA9IGludm9rZVF1ZXVlO1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHF1ZXVlW2luc2VydE1ldGhvZCB8fCAncHVzaCddKFtwcm92aWRlciwgbWV0aG9kLCBhcmd1bWVudHNdKTtcbiAgICAgICAgICAgIHJldHVybiBtb2R1bGVJbnN0YW5jZTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuICB9KTtcblxufVxuXG4vKiBnbG9iYWw6IHRvRGVidWdTdHJpbmc6IHRydWUgKi9cblxuZnVuY3Rpb24gc2VyaWFsaXplT2JqZWN0KG9iaikge1xuICB2YXIgc2VlbiA9IFtdO1xuXG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmosIGZ1bmN0aW9uKGtleSwgdmFsKSB7XG4gICAgdmFsID0gdG9Kc29uUmVwbGFjZXIoa2V5LCB2YWwpO1xuICAgIGlmIChpc09iamVjdCh2YWwpKSB7XG5cbiAgICAgIGlmIChzZWVuLmluZGV4T2YodmFsKSA+PSAwKSByZXR1cm4gJzw8YWxyZWFkeSBzZWVuPj4nO1xuXG4gICAgICBzZWVuLnB1c2godmFsKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbDtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHRvRGVidWdTdHJpbmcob2JqKSB7XG4gIGlmICh0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIG9iai50b1N0cmluZygpLnJlcGxhY2UoLyBcXHtbXFxzXFxTXSokLywgJycpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuICd1bmRlZmluZWQnO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBvYmogIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHNlcmlhbGl6ZU9iamVjdChvYmopO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbi8qIGdsb2JhbCBhbmd1bGFyTW9kdWxlOiB0cnVlLFxuICB2ZXJzaW9uOiB0cnVlLFxuXG4gICRMb2NhbGVQcm92aWRlcixcbiAgJENvbXBpbGVQcm92aWRlcixcblxuICBodG1sQW5jaG9yRGlyZWN0aXZlLFxuICBpbnB1dERpcmVjdGl2ZSxcbiAgaW5wdXREaXJlY3RpdmUsXG4gIGZvcm1EaXJlY3RpdmUsXG4gIHNjcmlwdERpcmVjdGl2ZSxcbiAgc2VsZWN0RGlyZWN0aXZlLFxuICBzdHlsZURpcmVjdGl2ZSxcbiAgb3B0aW9uRGlyZWN0aXZlLFxuICBuZ0JpbmREaXJlY3RpdmUsXG4gIG5nQmluZEh0bWxEaXJlY3RpdmUsXG4gIG5nQmluZFRlbXBsYXRlRGlyZWN0aXZlLFxuICBuZ0NsYXNzRGlyZWN0aXZlLFxuICBuZ0NsYXNzRXZlbkRpcmVjdGl2ZSxcbiAgbmdDbGFzc09kZERpcmVjdGl2ZSxcbiAgbmdDc3BEaXJlY3RpdmUsXG4gIG5nQ2xvYWtEaXJlY3RpdmUsXG4gIG5nQ29udHJvbGxlckRpcmVjdGl2ZSxcbiAgbmdGb3JtRGlyZWN0aXZlLFxuICBuZ0hpZGVEaXJlY3RpdmUsXG4gIG5nSWZEaXJlY3RpdmUsXG4gIG5nSW5jbHVkZURpcmVjdGl2ZSxcbiAgbmdJbmNsdWRlRmlsbENvbnRlbnREaXJlY3RpdmUsXG4gIG5nSW5pdERpcmVjdGl2ZSxcbiAgbmdOb25CaW5kYWJsZURpcmVjdGl2ZSxcbiAgbmdQbHVyYWxpemVEaXJlY3RpdmUsXG4gIG5nUmVwZWF0RGlyZWN0aXZlLFxuICBuZ1Nob3dEaXJlY3RpdmUsXG4gIG5nU3R5bGVEaXJlY3RpdmUsXG4gIG5nU3dpdGNoRGlyZWN0aXZlLFxuICBuZ1N3aXRjaFdoZW5EaXJlY3RpdmUsXG4gIG5nU3dpdGNoRGVmYXVsdERpcmVjdGl2ZSxcbiAgbmdPcHRpb25zRGlyZWN0aXZlLFxuICBuZ1RyYW5zY2x1ZGVEaXJlY3RpdmUsXG4gIG5nTW9kZWxEaXJlY3RpdmUsXG4gIG5nTGlzdERpcmVjdGl2ZSxcbiAgbmdDaGFuZ2VEaXJlY3RpdmUsXG4gIHBhdHRlcm5EaXJlY3RpdmUsXG4gIHBhdHRlcm5EaXJlY3RpdmUsXG4gIHJlcXVpcmVkRGlyZWN0aXZlLFxuICByZXF1aXJlZERpcmVjdGl2ZSxcbiAgbWlubGVuZ3RoRGlyZWN0aXZlLFxuICBtaW5sZW5ndGhEaXJlY3RpdmUsXG4gIG1heGxlbmd0aERpcmVjdGl2ZSxcbiAgbWF4bGVuZ3RoRGlyZWN0aXZlLFxuICBuZ1ZhbHVlRGlyZWN0aXZlLFxuICBuZ01vZGVsT3B0aW9uc0RpcmVjdGl2ZSxcbiAgbmdBdHRyaWJ1dGVBbGlhc0RpcmVjdGl2ZXMsXG4gIG5nRXZlbnREaXJlY3RpdmVzLFxuXG4gICRBbmNob3JTY3JvbGxQcm92aWRlcixcbiAgJEFuaW1hdGVQcm92aWRlcixcbiAgJEJyb3dzZXJQcm92aWRlcixcbiAgJENhY2hlRmFjdG9yeVByb3ZpZGVyLFxuICAkQ29udHJvbGxlclByb3ZpZGVyLFxuICAkRG9jdW1lbnRQcm92aWRlcixcbiAgJEV4Y2VwdGlvbkhhbmRsZXJQcm92aWRlcixcbiAgJEZpbHRlclByb3ZpZGVyLFxuICAkSW50ZXJwb2xhdGVQcm92aWRlcixcbiAgJEludGVydmFsUHJvdmlkZXIsXG4gICRIdHRwUHJvdmlkZXIsXG4gICRIdHRwQmFja2VuZFByb3ZpZGVyLFxuICAkTG9jYXRpb25Qcm92aWRlcixcbiAgJExvZ1Byb3ZpZGVyLFxuICAkUGFyc2VQcm92aWRlcixcbiAgJFJvb3RTY29wZVByb3ZpZGVyLFxuICAkUVByb3ZpZGVyLFxuICAkJFFQcm92aWRlcixcbiAgJCRTYW5pdGl6ZVVyaVByb3ZpZGVyLFxuICAkU2NlUHJvdmlkZXIsXG4gICRTY2VEZWxlZ2F0ZVByb3ZpZGVyLFxuICAkU25pZmZlclByb3ZpZGVyLFxuICAkVGVtcGxhdGVDYWNoZVByb3ZpZGVyLFxuICAkVGVtcGxhdGVSZXF1ZXN0UHJvdmlkZXIsXG4gICQkVGVzdGFiaWxpdHlQcm92aWRlcixcbiAgJFRpbWVvdXRQcm92aWRlcixcbiAgJCRSQUZQcm92aWRlcixcbiAgJCRBc3luY0NhbGxiYWNrUHJvdmlkZXIsXG4gICRXaW5kb3dQcm92aWRlcixcbiAgJCRqcUxpdGVQcm92aWRlclxuKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBvYmplY3RcbiAqIEBuYW1lIGFuZ3VsYXIudmVyc2lvblxuICogQG1vZHVsZSBuZ1xuICogQGRlc2NyaXB0aW9uXG4gKiBBbiBvYmplY3QgdGhhdCBjb250YWlucyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY3VycmVudCBBbmd1bGFySlMgdmVyc2lvbi4gVGhpcyBvYmplY3QgaGFzIHRoZVxuICogZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogLSBgZnVsbGAg4oCTIGB7c3RyaW5nfWAg4oCTIEZ1bGwgdmVyc2lvbiBzdHJpbmcsIHN1Y2ggYXMgXCIwLjkuMThcIi5cbiAqIC0gYG1ham9yYCDigJMgYHtudW1iZXJ9YCDigJMgTWFqb3IgdmVyc2lvbiBudW1iZXIsIHN1Y2ggYXMgXCIwXCIuXG4gKiAtIGBtaW5vcmAg4oCTIGB7bnVtYmVyfWAg4oCTIE1pbm9yIHZlcnNpb24gbnVtYmVyLCBzdWNoIGFzIFwiOVwiLlxuICogLSBgZG90YCDigJMgYHtudW1iZXJ9YCDigJMgRG90IHZlcnNpb24gbnVtYmVyLCBzdWNoIGFzIFwiMThcIi5cbiAqIC0gYGNvZGVOYW1lYCDigJMgYHtzdHJpbmd9YCDigJMgQ29kZSBuYW1lIG9mIHRoZSByZWxlYXNlLCBzdWNoIGFzIFwiamlnZ2xpbmctYXJtZmF0XCIuXG4gKi9cbnZhciB2ZXJzaW9uID0ge1xuICBmdWxsOiAnMS4zLjEzJywgICAgLy8gYWxsIG9mIHRoZXNlIHBsYWNlaG9sZGVyIHN0cmluZ3Mgd2lsbCBiZSByZXBsYWNlZCBieSBncnVudCdzXG4gIG1ham9yOiAxLCAgICAvLyBwYWNrYWdlIHRhc2tcbiAgbWlub3I6IDMsXG4gIGRvdDogMTMsXG4gIGNvZGVOYW1lOiAnbWV0aWN1bG91cy1yaWZmbGVzaHVmZmxlJ1xufTtcblxuXG5mdW5jdGlvbiBwdWJsaXNoRXh0ZXJuYWxBUEkoYW5ndWxhcikge1xuICBleHRlbmQoYW5ndWxhciwge1xuICAgICdib290c3RyYXAnOiBib290c3RyYXAsXG4gICAgJ2NvcHknOiBjb3B5LFxuICAgICdleHRlbmQnOiBleHRlbmQsXG4gICAgJ2VxdWFscyc6IGVxdWFscyxcbiAgICAnZWxlbWVudCc6IGpxTGl0ZSxcbiAgICAnZm9yRWFjaCc6IGZvckVhY2gsXG4gICAgJ2luamVjdG9yJzogY3JlYXRlSW5qZWN0b3IsXG4gICAgJ25vb3AnOiBub29wLFxuICAgICdiaW5kJzogYmluZCxcbiAgICAndG9Kc29uJzogdG9Kc29uLFxuICAgICdmcm9tSnNvbic6IGZyb21Kc29uLFxuICAgICdpZGVudGl0eSc6IGlkZW50aXR5LFxuICAgICdpc1VuZGVmaW5lZCc6IGlzVW5kZWZpbmVkLFxuICAgICdpc0RlZmluZWQnOiBpc0RlZmluZWQsXG4gICAgJ2lzU3RyaW5nJzogaXNTdHJpbmcsXG4gICAgJ2lzRnVuY3Rpb24nOiBpc0Z1bmN0aW9uLFxuICAgICdpc09iamVjdCc6IGlzT2JqZWN0LFxuICAgICdpc051bWJlcic6IGlzTnVtYmVyLFxuICAgICdpc0VsZW1lbnQnOiBpc0VsZW1lbnQsXG4gICAgJ2lzQXJyYXknOiBpc0FycmF5LFxuICAgICd2ZXJzaW9uJzogdmVyc2lvbixcbiAgICAnaXNEYXRlJzogaXNEYXRlLFxuICAgICdsb3dlcmNhc2UnOiBsb3dlcmNhc2UsXG4gICAgJ3VwcGVyY2FzZSc6IHVwcGVyY2FzZSxcbiAgICAnY2FsbGJhY2tzJzoge2NvdW50ZXI6IDB9LFxuICAgICdnZXRUZXN0YWJpbGl0eSc6IGdldFRlc3RhYmlsaXR5LFxuICAgICckJG1pbkVycic6IG1pbkVycixcbiAgICAnJCRjc3AnOiBjc3AsXG4gICAgJ3JlbG9hZFdpdGhEZWJ1Z0luZm8nOiByZWxvYWRXaXRoRGVidWdJbmZvXG4gIH0pO1xuXG4gIGFuZ3VsYXJNb2R1bGUgPSBzZXR1cE1vZHVsZUxvYWRlcih3aW5kb3cpO1xuICB0cnkge1xuICAgIGFuZ3VsYXJNb2R1bGUoJ25nTG9jYWxlJyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBhbmd1bGFyTW9kdWxlKCduZ0xvY2FsZScsIFtdKS5wcm92aWRlcignJGxvY2FsZScsICRMb2NhbGVQcm92aWRlcik7XG4gIH1cblxuICBhbmd1bGFyTW9kdWxlKCduZycsIFsnbmdMb2NhbGUnXSwgWyckcHJvdmlkZScsXG4gICAgZnVuY3Rpb24gbmdNb2R1bGUoJHByb3ZpZGUpIHtcbiAgICAgIC8vICQkc2FuaXRpemVVcmlQcm92aWRlciBuZWVkcyB0byBiZSBiZWZvcmUgJGNvbXBpbGVQcm92aWRlciBhcyBpdCBpcyB1c2VkIGJ5IGl0LlxuICAgICAgJHByb3ZpZGUucHJvdmlkZXIoe1xuICAgICAgICAkJHNhbml0aXplVXJpOiAkJFNhbml0aXplVXJpUHJvdmlkZXJcbiAgICAgIH0pO1xuICAgICAgJHByb3ZpZGUucHJvdmlkZXIoJyRjb21waWxlJywgJENvbXBpbGVQcm92aWRlcikuXG4gICAgICAgIGRpcmVjdGl2ZSh7XG4gICAgICAgICAgICBhOiBodG1sQW5jaG9yRGlyZWN0aXZlLFxuICAgICAgICAgICAgaW5wdXQ6IGlucHV0RGlyZWN0aXZlLFxuICAgICAgICAgICAgdGV4dGFyZWE6IGlucHV0RGlyZWN0aXZlLFxuICAgICAgICAgICAgZm9ybTogZm9ybURpcmVjdGl2ZSxcbiAgICAgICAgICAgIHNjcmlwdDogc2NyaXB0RGlyZWN0aXZlLFxuICAgICAgICAgICAgc2VsZWN0OiBzZWxlY3REaXJlY3RpdmUsXG4gICAgICAgICAgICBzdHlsZTogc3R5bGVEaXJlY3RpdmUsXG4gICAgICAgICAgICBvcHRpb246IG9wdGlvbkRpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nQmluZDogbmdCaW5kRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdCaW5kSHRtbDogbmdCaW5kSHRtbERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nQmluZFRlbXBsYXRlOiBuZ0JpbmRUZW1wbGF0ZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nQ2xhc3M6IG5nQ2xhc3NEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0NsYXNzRXZlbjogbmdDbGFzc0V2ZW5EaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0NsYXNzT2RkOiBuZ0NsYXNzT2RkRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdDbG9hazogbmdDbG9ha0RpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nQ29udHJvbGxlcjogbmdDb250cm9sbGVyRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdGb3JtOiBuZ0Zvcm1EaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0hpZGU6IG5nSGlkZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nSWY6IG5nSWZEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0luY2x1ZGU6IG5nSW5jbHVkZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nSW5pdDogbmdJbml0RGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdOb25CaW5kYWJsZTogbmdOb25CaW5kYWJsZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nUGx1cmFsaXplOiBuZ1BsdXJhbGl6ZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nUmVwZWF0OiBuZ1JlcGVhdERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nU2hvdzogbmdTaG93RGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdTdHlsZTogbmdTdHlsZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nU3dpdGNoOiBuZ1N3aXRjaERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nU3dpdGNoV2hlbjogbmdTd2l0Y2hXaGVuRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdTd2l0Y2hEZWZhdWx0OiBuZ1N3aXRjaERlZmF1bHREaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ09wdGlvbnM6IG5nT3B0aW9uc0RpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nVHJhbnNjbHVkZTogbmdUcmFuc2NsdWRlRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdNb2RlbDogbmdNb2RlbERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nTGlzdDogbmdMaXN0RGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdDaGFuZ2U6IG5nQ2hhbmdlRGlyZWN0aXZlLFxuICAgICAgICAgICAgcGF0dGVybjogcGF0dGVybkRpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nUGF0dGVybjogcGF0dGVybkRpcmVjdGl2ZSxcbiAgICAgICAgICAgIHJlcXVpcmVkOiByZXF1aXJlZERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nUmVxdWlyZWQ6IHJlcXVpcmVkRGlyZWN0aXZlLFxuICAgICAgICAgICAgbWlubGVuZ3RoOiBtaW5sZW5ndGhEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ01pbmxlbmd0aDogbWlubGVuZ3RoRGlyZWN0aXZlLFxuICAgICAgICAgICAgbWF4bGVuZ3RoOiBtYXhsZW5ndGhEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ01heGxlbmd0aDogbWF4bGVuZ3RoRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdWYWx1ZTogbmdWYWx1ZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nTW9kZWxPcHRpb25zOiBuZ01vZGVsT3B0aW9uc0RpcmVjdGl2ZVxuICAgICAgICB9KS5cbiAgICAgICAgZGlyZWN0aXZlKHtcbiAgICAgICAgICBuZ0luY2x1ZGU6IG5nSW5jbHVkZUZpbGxDb250ZW50RGlyZWN0aXZlXG4gICAgICAgIH0pLlxuICAgICAgICBkaXJlY3RpdmUobmdBdHRyaWJ1dGVBbGlhc0RpcmVjdGl2ZXMpLlxuICAgICAgICBkaXJlY3RpdmUobmdFdmVudERpcmVjdGl2ZXMpO1xuICAgICAgJHByb3ZpZGUucHJvdmlkZXIoe1xuICAgICAgICAkYW5jaG9yU2Nyb2xsOiAkQW5jaG9yU2Nyb2xsUHJvdmlkZXIsXG4gICAgICAgICRhbmltYXRlOiAkQW5pbWF0ZVByb3ZpZGVyLFxuICAgICAgICAkYnJvd3NlcjogJEJyb3dzZXJQcm92aWRlcixcbiAgICAgICAgJGNhY2hlRmFjdG9yeTogJENhY2hlRmFjdG9yeVByb3ZpZGVyLFxuICAgICAgICAkY29udHJvbGxlcjogJENvbnRyb2xsZXJQcm92aWRlcixcbiAgICAgICAgJGRvY3VtZW50OiAkRG9jdW1lbnRQcm92aWRlcixcbiAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXI6ICRFeGNlcHRpb25IYW5kbGVyUHJvdmlkZXIsXG4gICAgICAgICRmaWx0ZXI6ICRGaWx0ZXJQcm92aWRlcixcbiAgICAgICAgJGludGVycG9sYXRlOiAkSW50ZXJwb2xhdGVQcm92aWRlcixcbiAgICAgICAgJGludGVydmFsOiAkSW50ZXJ2YWxQcm92aWRlcixcbiAgICAgICAgJGh0dHA6ICRIdHRwUHJvdmlkZXIsXG4gICAgICAgICRodHRwQmFja2VuZDogJEh0dHBCYWNrZW5kUHJvdmlkZXIsXG4gICAgICAgICRsb2NhdGlvbjogJExvY2F0aW9uUHJvdmlkZXIsXG4gICAgICAgICRsb2c6ICRMb2dQcm92aWRlcixcbiAgICAgICAgJHBhcnNlOiAkUGFyc2VQcm92aWRlcixcbiAgICAgICAgJHJvb3RTY29wZTogJFJvb3RTY29wZVByb3ZpZGVyLFxuICAgICAgICAkcTogJFFQcm92aWRlcixcbiAgICAgICAgJCRxOiAkJFFQcm92aWRlcixcbiAgICAgICAgJHNjZTogJFNjZVByb3ZpZGVyLFxuICAgICAgICAkc2NlRGVsZWdhdGU6ICRTY2VEZWxlZ2F0ZVByb3ZpZGVyLFxuICAgICAgICAkc25pZmZlcjogJFNuaWZmZXJQcm92aWRlcixcbiAgICAgICAgJHRlbXBsYXRlQ2FjaGU6ICRUZW1wbGF0ZUNhY2hlUHJvdmlkZXIsXG4gICAgICAgICR0ZW1wbGF0ZVJlcXVlc3Q6ICRUZW1wbGF0ZVJlcXVlc3RQcm92aWRlcixcbiAgICAgICAgJCR0ZXN0YWJpbGl0eTogJCRUZXN0YWJpbGl0eVByb3ZpZGVyLFxuICAgICAgICAkdGltZW91dDogJFRpbWVvdXRQcm92aWRlcixcbiAgICAgICAgJHdpbmRvdzogJFdpbmRvd1Byb3ZpZGVyLFxuICAgICAgICAkJHJBRjogJCRSQUZQcm92aWRlcixcbiAgICAgICAgJCRhc3luY0NhbGxiYWNrOiAkJEFzeW5jQ2FsbGJhY2tQcm92aWRlcixcbiAgICAgICAgJCRqcUxpdGU6ICQkanFMaXRlUHJvdmlkZXJcbiAgICAgIH0pO1xuICAgIH1cbiAgXSk7XG59XG5cbi8qIGdsb2JhbCBKUUxpdGVQcm90b3R5cGU6IHRydWUsXG4gIGFkZEV2ZW50TGlzdGVuZXJGbjogdHJ1ZSxcbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lckZuOiB0cnVlLFxuICBCT09MRUFOX0FUVFI6IHRydWUsXG4gIEFMSUFTRURfQVRUUjogdHJ1ZSxcbiovXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vSlFMaXRlXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmVsZW1lbnRcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBXcmFwcyBhIHJhdyBET00gZWxlbWVudCBvciBIVE1MIHN0cmluZyBhcyBhIFtqUXVlcnldKGh0dHA6Ly9qcXVlcnkuY29tKSBlbGVtZW50LlxuICpcbiAqIElmIGpRdWVyeSBpcyBhdmFpbGFibGUsIGBhbmd1bGFyLmVsZW1lbnRgIGlzIGFuIGFsaWFzIGZvciB0aGVcbiAqIFtqUXVlcnldKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9qUXVlcnkvKSBmdW5jdGlvbi4gSWYgalF1ZXJ5IGlzIG5vdCBhdmFpbGFibGUsIGBhbmd1bGFyLmVsZW1lbnRgXG4gKiBkZWxlZ2F0ZXMgdG8gQW5ndWxhcidzIGJ1aWx0LWluIHN1YnNldCBvZiBqUXVlcnksIGNhbGxlZCBcImpRdWVyeSBsaXRlXCIgb3IgXCJqcUxpdGUuXCJcbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtc3VjY2Vzc1wiPmpxTGl0ZSBpcyBhIHRpbnksIEFQSS1jb21wYXRpYmxlIHN1YnNldCBvZiBqUXVlcnkgdGhhdCBhbGxvd3NcbiAqIEFuZ3VsYXIgdG8gbWFuaXB1bGF0ZSB0aGUgRE9NIGluIGEgY3Jvc3MtYnJvd3NlciBjb21wYXRpYmxlIHdheS4gKipqcUxpdGUqKiBpbXBsZW1lbnRzIG9ubHkgdGhlIG1vc3RcbiAqIGNvbW1vbmx5IG5lZWRlZCBmdW5jdGlvbmFsaXR5IHdpdGggdGhlIGdvYWwgb2YgaGF2aW5nIGEgdmVyeSBzbWFsbCBmb290cHJpbnQuPC9kaXY+XG4gKlxuICogVG8gdXNlIGpRdWVyeSwgc2ltcGx5IGxvYWQgaXQgYmVmb3JlIGBET01Db250ZW50TG9hZGVkYCBldmVudCBmaXJlZC5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnRcIj4qKk5vdGU6KiogYWxsIGVsZW1lbnQgcmVmZXJlbmNlcyBpbiBBbmd1bGFyIGFyZSBhbHdheXMgd3JhcHBlZCB3aXRoIGpRdWVyeSBvclxuICoganFMaXRlOyB0aGV5IGFyZSBuZXZlciByYXcgRE9NIHJlZmVyZW5jZXMuPC9kaXY+XG4gKlxuICogIyMgQW5ndWxhcidzIGpxTGl0ZVxuICoganFMaXRlIHByb3ZpZGVzIG9ubHkgdGhlIGZvbGxvd2luZyBqUXVlcnkgbWV0aG9kczpcbiAqXG4gKiAtIFtgYWRkQ2xhc3MoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9hZGRDbGFzcy8pXG4gKiAtIFtgYWZ0ZXIoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9hZnRlci8pXG4gKiAtIFtgYXBwZW5kKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vYXBwZW5kLylcbiAqIC0gW2BhdHRyKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vYXR0ci8pIC0gRG9lcyBub3Qgc3VwcG9ydCBmdW5jdGlvbnMgYXMgcGFyYW1ldGVyc1xuICogLSBbYGJpbmQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9iaW5kLykgLSBEb2VzIG5vdCBzdXBwb3J0IG5hbWVzcGFjZXMsIHNlbGVjdG9ycyBvciBldmVudERhdGFcbiAqIC0gW2BjaGlsZHJlbigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2NoaWxkcmVuLykgLSBEb2VzIG5vdCBzdXBwb3J0IHNlbGVjdG9yc1xuICogLSBbYGNsb25lKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vY2xvbmUvKVxuICogLSBbYGNvbnRlbnRzKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vY29udGVudHMvKVxuICogLSBbYGNzcygpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2Nzcy8pIC0gT25seSByZXRyaWV2ZXMgaW5saW5lLXN0eWxlcywgZG9lcyBub3QgY2FsbCBgZ2V0Q29tcHV0ZWRTdHlsZSgpYFxuICogLSBbYGRhdGEoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9kYXRhLylcbiAqIC0gW2BkZXRhY2goKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9kZXRhY2gvKVxuICogLSBbYGVtcHR5KClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vZW1wdHkvKVxuICogLSBbYGVxKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vZXEvKVxuICogLSBbYGZpbmQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9maW5kLykgLSBMaW1pdGVkIHRvIGxvb2t1cHMgYnkgdGFnIG5hbWVcbiAqIC0gW2BoYXNDbGFzcygpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2hhc0NsYXNzLylcbiAqIC0gW2BodG1sKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vaHRtbC8pXG4gKiAtIFtgbmV4dCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL25leHQvKSAtIERvZXMgbm90IHN1cHBvcnQgc2VsZWN0b3JzXG4gKiAtIFtgb24oKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9vbi8pIC0gRG9lcyBub3Qgc3VwcG9ydCBuYW1lc3BhY2VzLCBzZWxlY3RvcnMgb3IgZXZlbnREYXRhXG4gKiAtIFtgb2ZmKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vb2ZmLykgLSBEb2VzIG5vdCBzdXBwb3J0IG5hbWVzcGFjZXMgb3Igc2VsZWN0b3JzXG4gKiAtIFtgb25lKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vb25lLykgLSBEb2VzIG5vdCBzdXBwb3J0IG5hbWVzcGFjZXMgb3Igc2VsZWN0b3JzXG4gKiAtIFtgcGFyZW50KClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcGFyZW50LykgLSBEb2VzIG5vdCBzdXBwb3J0IHNlbGVjdG9yc1xuICogLSBbYHByZXBlbmQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9wcmVwZW5kLylcbiAqIC0gW2Bwcm9wKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcHJvcC8pXG4gKiAtIFtgcmVhZHkoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9yZWFkeS8pXG4gKiAtIFtgcmVtb3ZlKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcmVtb3ZlLylcbiAqIC0gW2ByZW1vdmVBdHRyKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcmVtb3ZlQXR0ci8pXG4gKiAtIFtgcmVtb3ZlQ2xhc3MoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9yZW1vdmVDbGFzcy8pXG4gKiAtIFtgcmVtb3ZlRGF0YSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3JlbW92ZURhdGEvKVxuICogLSBbYHJlcGxhY2VXaXRoKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcmVwbGFjZVdpdGgvKVxuICogLSBbYHRleHQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS90ZXh0LylcbiAqIC0gW2B0b2dnbGVDbGFzcygpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3RvZ2dsZUNsYXNzLylcbiAqIC0gW2B0cmlnZ2VySGFuZGxlcigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3RyaWdnZXJIYW5kbGVyLykgLSBQYXNzZXMgYSBkdW1teSBldmVudCBvYmplY3QgdG8gaGFuZGxlcnMuXG4gKiAtIFtgdW5iaW5kKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vdW5iaW5kLykgLSBEb2VzIG5vdCBzdXBwb3J0IG5hbWVzcGFjZXNcbiAqIC0gW2B2YWwoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS92YWwvKVxuICogLSBbYHdyYXAoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS93cmFwLylcbiAqXG4gKiAjIyBqUXVlcnkvanFMaXRlIEV4dHJhc1xuICogQW5ndWxhciBhbHNvIHByb3ZpZGVzIHRoZSBmb2xsb3dpbmcgYWRkaXRpb25hbCBtZXRob2RzIGFuZCBldmVudHMgdG8gYm90aCBqUXVlcnkgYW5kIGpxTGl0ZTpcbiAqXG4gKiAjIyMgRXZlbnRzXG4gKiAtIGAkZGVzdHJveWAgLSBBbmd1bGFySlMgaW50ZXJjZXB0cyBhbGwganFMaXRlL2pRdWVyeSdzIERPTSBkZXN0cnVjdGlvbiBhcGlzIGFuZCBmaXJlcyB0aGlzIGV2ZW50XG4gKiAgICBvbiBhbGwgRE9NIG5vZGVzIGJlaW5nIHJlbW92ZWQuICBUaGlzIGNhbiBiZSB1c2VkIHRvIGNsZWFuIHVwIGFueSAzcmQgcGFydHkgYmluZGluZ3MgdG8gdGhlIERPTVxuICogICAgZWxlbWVudCBiZWZvcmUgaXQgaXMgcmVtb3ZlZC5cbiAqXG4gKiAjIyMgTWV0aG9kc1xuICogLSBgY29udHJvbGxlcihuYW1lKWAgLSByZXRyaWV2ZXMgdGhlIGNvbnRyb2xsZXIgb2YgdGhlIGN1cnJlbnQgZWxlbWVudCBvciBpdHMgcGFyZW50LiBCeSBkZWZhdWx0XG4gKiAgIHJldHJpZXZlcyBjb250cm9sbGVyIGFzc29jaWF0ZWQgd2l0aCB0aGUgYG5nQ29udHJvbGxlcmAgZGlyZWN0aXZlLiBJZiBgbmFtZWAgaXMgcHJvdmlkZWQgYXNcbiAqICAgY2FtZWxDYXNlIGRpcmVjdGl2ZSBuYW1lLCB0aGVuIHRoZSBjb250cm9sbGVyIGZvciB0aGlzIGRpcmVjdGl2ZSB3aWxsIGJlIHJldHJpZXZlZCAoZS5nLlxuICogICBgJ25nTW9kZWwnYCkuXG4gKiAtIGBpbmplY3RvcigpYCAtIHJldHJpZXZlcyB0aGUgaW5qZWN0b3Igb2YgdGhlIGN1cnJlbnQgZWxlbWVudCBvciBpdHMgcGFyZW50LlxuICogLSBgc2NvcGUoKWAgLSByZXRyaWV2ZXMgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIHNjb3BlfSBvZiB0aGUgY3VycmVudFxuICogICBlbGVtZW50IG9yIGl0cyBwYXJlbnQuIFJlcXVpcmVzIHtAbGluayBndWlkZS9wcm9kdWN0aW9uI2Rpc2FibGluZy1kZWJ1Zy1kYXRhIERlYnVnIERhdGF9IHRvXG4gKiAgIGJlIGVuYWJsZWQuXG4gKiAtIGBpc29sYXRlU2NvcGUoKWAgLSByZXRyaWV2ZXMgYW4gaXNvbGF0ZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBzY29wZX0gaWYgb25lIGlzIGF0dGFjaGVkIGRpcmVjdGx5IHRvIHRoZVxuICogICBjdXJyZW50IGVsZW1lbnQuIFRoaXMgZ2V0dGVyIHNob3VsZCBiZSB1c2VkIG9ubHkgb24gZWxlbWVudHMgdGhhdCBjb250YWluIGEgZGlyZWN0aXZlIHdoaWNoIHN0YXJ0cyBhIG5ldyBpc29sYXRlXG4gKiAgIHNjb3BlLiBDYWxsaW5nIGBzY29wZSgpYCBvbiB0aGlzIGVsZW1lbnQgYWx3YXlzIHJldHVybnMgdGhlIG9yaWdpbmFsIG5vbi1pc29sYXRlIHNjb3BlLlxuICogICBSZXF1aXJlcyB7QGxpbmsgZ3VpZGUvcHJvZHVjdGlvbiNkaXNhYmxpbmctZGVidWctZGF0YSBEZWJ1ZyBEYXRhfSB0byBiZSBlbmFibGVkLlxuICogLSBgaW5oZXJpdGVkRGF0YSgpYCAtIHNhbWUgYXMgYGRhdGEoKWAsIGJ1dCB3YWxrcyB1cCB0aGUgRE9NIHVudGlsIGEgdmFsdWUgaXMgZm91bmQgb3IgdGhlIHRvcFxuICogICBwYXJlbnQgZWxlbWVudCBpcyByZWFjaGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfERPTUVsZW1lbnR9IGVsZW1lbnQgSFRNTCBzdHJpbmcgb3IgRE9NRWxlbWVudCB0byBiZSB3cmFwcGVkIGludG8galF1ZXJ5LlxuICogQHJldHVybnMge09iamVjdH0galF1ZXJ5IG9iamVjdC5cbiAqL1xuXG5KUUxpdGUuZXhwYW5kbyA9ICduZzMzOSc7XG5cbnZhciBqcUNhY2hlID0gSlFMaXRlLmNhY2hlID0ge30sXG4gICAganFJZCA9IDEsXG4gICAgYWRkRXZlbnRMaXN0ZW5lckZuID0gZnVuY3Rpb24oZWxlbWVudCwgdHlwZSwgZm4pIHtcbiAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBmbiwgZmFsc2UpO1xuICAgIH0sXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lckZuID0gZnVuY3Rpb24oZWxlbWVudCwgdHlwZSwgZm4pIHtcbiAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBmbiwgZmFsc2UpO1xuICAgIH07XG5cbi8qXG4gKiAhISEgVGhpcyBpcyBhbiB1bmRvY3VtZW50ZWQgXCJwcml2YXRlXCIgZnVuY3Rpb24gISEhXG4gKi9cbkpRTGl0ZS5fZGF0YSA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgLy9qUXVlcnkgYWx3YXlzIHJldHVybnMgYW4gb2JqZWN0IG9uIGNhY2hlIG1pc3NcbiAgcmV0dXJuIHRoaXMuY2FjaGVbbm9kZVt0aGlzLmV4cGFuZG9dXSB8fCB7fTtcbn07XG5cbmZ1bmN0aW9uIGpxTmV4dElkKCkgeyByZXR1cm4gKytqcUlkOyB9XG5cblxudmFyIFNQRUNJQUxfQ0hBUlNfUkVHRVhQID0gLyhbXFw6XFwtXFxfXSsoLikpL2c7XG52YXIgTU9aX0hBQ0tfUkVHRVhQID0gL15tb3ooW0EtWl0pLztcbnZhciBNT1VTRV9FVkVOVF9NQVA9IHsgbW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLCBtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwifTtcbnZhciBqcUxpdGVNaW5FcnIgPSBtaW5FcnIoJ2pxTGl0ZScpO1xuXG4vKipcbiAqIENvbnZlcnRzIHNuYWtlX2Nhc2UgdG8gY2FtZWxDYXNlLlxuICogQWxzbyB0aGVyZSBpcyBzcGVjaWFsIGNhc2UgZm9yIE1veiBwcmVmaXggc3RhcnRpbmcgd2l0aCB1cHBlciBjYXNlIGxldHRlci5cbiAqIEBwYXJhbSBuYW1lIE5hbWUgdG8gbm9ybWFsaXplXG4gKi9cbmZ1bmN0aW9uIGNhbWVsQ2FzZShuYW1lKSB7XG4gIHJldHVybiBuYW1lLlxuICAgIHJlcGxhY2UoU1BFQ0lBTF9DSEFSU19SRUdFWFAsIGZ1bmN0aW9uKF8sIHNlcGFyYXRvciwgbGV0dGVyLCBvZmZzZXQpIHtcbiAgICAgIHJldHVybiBvZmZzZXQgPyBsZXR0ZXIudG9VcHBlckNhc2UoKSA6IGxldHRlcjtcbiAgICB9KS5cbiAgICByZXBsYWNlKE1PWl9IQUNLX1JFR0VYUCwgJ01veiQxJyk7XG59XG5cbnZhciBTSU5HTEVfVEFHX1JFR0VYUCA9IC9ePChcXHcrKVxccypcXC8/Pig/OjxcXC9cXDE+fCkkLztcbnZhciBIVE1MX1JFR0VYUCA9IC88fCYjP1xcdys7LztcbnZhciBUQUdfTkFNRV9SRUdFWFAgPSAvPChbXFx3Ol0rKS87XG52YXIgWEhUTUxfVEFHX1JFR0VYUCA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFtcXHc6XSspW14+XSopXFwvPi9naTtcblxudmFyIHdyYXBNYXAgPSB7XG4gICdvcHRpb24nOiBbMSwgJzxzZWxlY3QgbXVsdGlwbGU9XCJtdWx0aXBsZVwiPicsICc8L3NlbGVjdD4nXSxcblxuICAndGhlYWQnOiBbMSwgJzx0YWJsZT4nLCAnPC90YWJsZT4nXSxcbiAgJ2NvbCc6IFsyLCAnPHRhYmxlPjxjb2xncm91cD4nLCAnPC9jb2xncm91cD48L3RhYmxlPiddLFxuICAndHInOiBbMiwgJzx0YWJsZT48dGJvZHk+JywgJzwvdGJvZHk+PC90YWJsZT4nXSxcbiAgJ3RkJzogWzMsICc8dGFibGU+PHRib2R5Pjx0cj4nLCAnPC90cj48L3Rib2R5PjwvdGFibGU+J10sXG4gICdfZGVmYXVsdCc6IFswLCBcIlwiLCBcIlwiXVxufTtcblxud3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uO1xud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG5cbmZ1bmN0aW9uIGpxTGl0ZUlzVGV4dE5vZGUoaHRtbCkge1xuICByZXR1cm4gIUhUTUxfUkVHRVhQLnRlc3QoaHRtbCk7XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZUFjY2VwdHNEYXRhKG5vZGUpIHtcbiAgLy8gVGhlIHdpbmRvdyBvYmplY3QgY2FuIGFjY2VwdCBkYXRhIGJ1dCBoYXMgbm8gbm9kZVR5cGVcbiAgLy8gT3RoZXJ3aXNlIHdlIGFyZSBvbmx5IGludGVyZXN0ZWQgaW4gZWxlbWVudHMgKDEpIGFuZCBkb2N1bWVudHMgKDkpXG4gIHZhciBub2RlVHlwZSA9IG5vZGUubm9kZVR5cGU7XG4gIHJldHVybiBub2RlVHlwZSA9PT0gTk9ERV9UWVBFX0VMRU1FTlQgfHwgIW5vZGVUeXBlIHx8IG5vZGVUeXBlID09PSBOT0RFX1RZUEVfRE9DVU1FTlQ7XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZUJ1aWxkRnJhZ21lbnQoaHRtbCwgY29udGV4dCkge1xuICB2YXIgdG1wLCB0YWcsIHdyYXAsXG4gICAgICBmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuICAgICAgbm9kZXMgPSBbXSwgaTtcblxuICBpZiAoanFMaXRlSXNUZXh0Tm9kZShodG1sKSkge1xuICAgIC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuICAgIG5vZGVzLnB1c2goY29udGV4dC5jcmVhdGVUZXh0Tm9kZShodG1sKSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG4gICAgdG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKGNvbnRleHQuY3JlYXRlRWxlbWVudChcImRpdlwiKSk7XG4gICAgdGFnID0gKFRBR19OQU1FX1JFR0VYUC5leGVjKGh0bWwpIHx8IFtcIlwiLCBcIlwiXSlbMV0udG9Mb3dlckNhc2UoKTtcbiAgICB3cmFwID0gd3JhcE1hcFt0YWddIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG4gICAgdG1wLmlubmVySFRNTCA9IHdyYXBbMV0gKyBodG1sLnJlcGxhY2UoWEhUTUxfVEFHX1JFR0VYUCwgXCI8JDE+PC8kMj5cIikgKyB3cmFwWzJdO1xuXG4gICAgLy8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG4gICAgaSA9IHdyYXBbMF07XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdG1wID0gdG1wLmxhc3RDaGlsZDtcbiAgICB9XG5cbiAgICBub2RlcyA9IGNvbmNhdChub2RlcywgdG1wLmNoaWxkTm9kZXMpO1xuXG4gICAgdG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcbiAgICB0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuICB9XG5cbiAgLy8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuICBmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG4gIGZyYWdtZW50LmlubmVySFRNTCA9IFwiXCI7IC8vIENsZWFyIGlubmVyIEhUTUxcbiAgZm9yRWFjaChub2RlcywgZnVuY3Rpb24obm9kZSkge1xuICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKG5vZGUpO1xuICB9KTtcblxuICByZXR1cm4gZnJhZ21lbnQ7XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZVBhcnNlSFRNTChodG1sLCBjb250ZXh0KSB7XG4gIGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuICB2YXIgcGFyc2VkO1xuXG4gIGlmICgocGFyc2VkID0gU0lOR0xFX1RBR19SRUdFWFAuZXhlYyhodG1sKSkpIHtcbiAgICByZXR1cm4gW2NvbnRleHQuY3JlYXRlRWxlbWVudChwYXJzZWRbMV0pXTtcbiAgfVxuXG4gIGlmICgocGFyc2VkID0ganFMaXRlQnVpbGRGcmFnbWVudChodG1sLCBjb250ZXh0KSkpIHtcbiAgICByZXR1cm4gcGFyc2VkLmNoaWxkTm9kZXM7XG4gIH1cblxuICByZXR1cm4gW107XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuZnVuY3Rpb24gSlFMaXRlKGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBKUUxpdGUpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIHZhciBhcmdJc1N0cmluZztcblxuICBpZiAoaXNTdHJpbmcoZWxlbWVudCkpIHtcbiAgICBlbGVtZW50ID0gdHJpbShlbGVtZW50KTtcbiAgICBhcmdJc1N0cmluZyA9IHRydWU7XG4gIH1cbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEpRTGl0ZSkpIHtcbiAgICBpZiAoYXJnSXNTdHJpbmcgJiYgZWxlbWVudC5jaGFyQXQoMCkgIT0gJzwnKSB7XG4gICAgICB0aHJvdyBqcUxpdGVNaW5FcnIoJ25vc2VsJywgJ0xvb2tpbmcgdXAgZWxlbWVudHMgdmlhIHNlbGVjdG9ycyBpcyBub3Qgc3VwcG9ydGVkIGJ5IGpxTGl0ZSEgU2VlOiBodHRwOi8vZG9jcy5hbmd1bGFyanMub3JnL2FwaS9hbmd1bGFyLmVsZW1lbnQnKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBKUUxpdGUoZWxlbWVudCk7XG4gIH1cblxuICBpZiAoYXJnSXNTdHJpbmcpIHtcbiAgICBqcUxpdGVBZGROb2Rlcyh0aGlzLCBqcUxpdGVQYXJzZUhUTUwoZWxlbWVudCkpO1xuICB9IGVsc2Uge1xuICAgIGpxTGl0ZUFkZE5vZGVzKHRoaXMsIGVsZW1lbnQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZUNsb25lKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQuY2xvbmVOb2RlKHRydWUpO1xufVxuXG5mdW5jdGlvbiBqcUxpdGVEZWFsb2MoZWxlbWVudCwgb25seURlc2NlbmRhbnRzKSB7XG4gIGlmICghb25seURlc2NlbmRhbnRzKSBqcUxpdGVSZW1vdmVEYXRhKGVsZW1lbnQpO1xuXG4gIGlmIChlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwpIHtcbiAgICB2YXIgZGVzY2VuZGFudHMgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyonKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGRlc2NlbmRhbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAganFMaXRlUmVtb3ZlRGF0YShkZXNjZW5kYW50c1tpXSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZU9mZihlbGVtZW50LCB0eXBlLCBmbiwgdW5zdXBwb3J0ZWQpIHtcbiAgaWYgKGlzRGVmaW5lZCh1bnN1cHBvcnRlZCkpIHRocm93IGpxTGl0ZU1pbkVycignb2ZmYXJncycsICdqcUxpdGUjb2ZmKCkgZG9lcyBub3Qgc3VwcG9ydCB0aGUgYHNlbGVjdG9yYCBhcmd1bWVudCcpO1xuXG4gIHZhciBleHBhbmRvU3RvcmUgPSBqcUxpdGVFeHBhbmRvU3RvcmUoZWxlbWVudCk7XG4gIHZhciBldmVudHMgPSBleHBhbmRvU3RvcmUgJiYgZXhwYW5kb1N0b3JlLmV2ZW50cztcbiAgdmFyIGhhbmRsZSA9IGV4cGFuZG9TdG9yZSAmJiBleHBhbmRvU3RvcmUuaGFuZGxlO1xuXG4gIGlmICghaGFuZGxlKSByZXR1cm47IC8vbm8gbGlzdGVuZXJzIHJlZ2lzdGVyZWRcblxuICBpZiAoIXR5cGUpIHtcbiAgICBmb3IgKHR5cGUgaW4gZXZlbnRzKSB7XG4gICAgICBpZiAodHlwZSAhPT0gJyRkZXN0cm95Jykge1xuICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyRm4oZWxlbWVudCwgdHlwZSwgaGFuZGxlKTtcbiAgICAgIH1cbiAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvckVhY2godHlwZS5zcGxpdCgnICcpLCBmdW5jdGlvbih0eXBlKSB7XG4gICAgICBpZiAoaXNEZWZpbmVkKGZuKSkge1xuICAgICAgICB2YXIgbGlzdGVuZXJGbnMgPSBldmVudHNbdHlwZV07XG4gICAgICAgIGFycmF5UmVtb3ZlKGxpc3RlbmVyRm5zIHx8IFtdLCBmbik7XG4gICAgICAgIGlmIChsaXN0ZW5lckZucyAmJiBsaXN0ZW5lckZucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJGbihlbGVtZW50LCB0eXBlLCBoYW5kbGUpO1xuICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBqcUxpdGVSZW1vdmVEYXRhKGVsZW1lbnQsIG5hbWUpIHtcbiAgdmFyIGV4cGFuZG9JZCA9IGVsZW1lbnQubmczMzk7XG4gIHZhciBleHBhbmRvU3RvcmUgPSBleHBhbmRvSWQgJiYganFDYWNoZVtleHBhbmRvSWRdO1xuXG4gIGlmIChleHBhbmRvU3RvcmUpIHtcbiAgICBpZiAobmFtZSkge1xuICAgICAgZGVsZXRlIGV4cGFuZG9TdG9yZS5kYXRhW25hbWVdO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChleHBhbmRvU3RvcmUuaGFuZGxlKSB7XG4gICAgICBpZiAoZXhwYW5kb1N0b3JlLmV2ZW50cy4kZGVzdHJveSkge1xuICAgICAgICBleHBhbmRvU3RvcmUuaGFuZGxlKHt9LCAnJGRlc3Ryb3knKTtcbiAgICAgIH1cbiAgICAgIGpxTGl0ZU9mZihlbGVtZW50KTtcbiAgICB9XG4gICAgZGVsZXRlIGpxQ2FjaGVbZXhwYW5kb0lkXTtcbiAgICBlbGVtZW50Lm5nMzM5ID0gdW5kZWZpbmVkOyAvLyBkb24ndCBkZWxldGUgRE9NIGV4cGFuZG9zLiBJRSBhbmQgQ2hyb21lIGRvbid0IGxpa2UgaXRcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGpxTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50LCBjcmVhdGVJZk5lY2Vzc2FyeSkge1xuICB2YXIgZXhwYW5kb0lkID0gZWxlbWVudC5uZzMzOSxcbiAgICAgIGV4cGFuZG9TdG9yZSA9IGV4cGFuZG9JZCAmJiBqcUNhY2hlW2V4cGFuZG9JZF07XG5cbiAgaWYgKGNyZWF0ZUlmTmVjZXNzYXJ5ICYmICFleHBhbmRvU3RvcmUpIHtcbiAgICBlbGVtZW50Lm5nMzM5ID0gZXhwYW5kb0lkID0ganFOZXh0SWQoKTtcbiAgICBleHBhbmRvU3RvcmUgPSBqcUNhY2hlW2V4cGFuZG9JZF0gPSB7ZXZlbnRzOiB7fSwgZGF0YToge30sIGhhbmRsZTogdW5kZWZpbmVkfTtcbiAgfVxuXG4gIHJldHVybiBleHBhbmRvU3RvcmU7XG59XG5cblxuZnVuY3Rpb24ganFMaXRlRGF0YShlbGVtZW50LCBrZXksIHZhbHVlKSB7XG4gIGlmIChqcUxpdGVBY2NlcHRzRGF0YShlbGVtZW50KSkge1xuXG4gICAgdmFyIGlzU2ltcGxlU2V0dGVyID0gaXNEZWZpbmVkKHZhbHVlKTtcbiAgICB2YXIgaXNTaW1wbGVHZXR0ZXIgPSAhaXNTaW1wbGVTZXR0ZXIgJiYga2V5ICYmICFpc09iamVjdChrZXkpO1xuICAgIHZhciBtYXNzR2V0dGVyID0gIWtleTtcbiAgICB2YXIgZXhwYW5kb1N0b3JlID0ganFMaXRlRXhwYW5kb1N0b3JlKGVsZW1lbnQsICFpc1NpbXBsZUdldHRlcik7XG4gICAgdmFyIGRhdGEgPSBleHBhbmRvU3RvcmUgJiYgZXhwYW5kb1N0b3JlLmRhdGE7XG5cbiAgICBpZiAoaXNTaW1wbGVTZXR0ZXIpIHsgLy8gZGF0YSgna2V5JywgdmFsdWUpXG4gICAgICBkYXRhW2tleV0gPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG1hc3NHZXR0ZXIpIHsgIC8vIGRhdGEoKVxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1NpbXBsZUdldHRlcikgeyAvLyBkYXRhKCdrZXknKVxuICAgICAgICAgIC8vIGRvbid0IGZvcmNlIGNyZWF0aW9uIG9mIGV4cGFuZG9TdG9yZSBpZiBpdCBkb2Vzbid0IGV4aXN0IHlldFxuICAgICAgICAgIHJldHVybiBkYXRhICYmIGRhdGFba2V5XTtcbiAgICAgICAgfSBlbHNlIHsgLy8gbWFzcy1zZXR0ZXI6IGRhdGEoe2tleTE6IHZhbDEsIGtleTI6IHZhbDJ9KVxuICAgICAgICAgIGV4dGVuZChkYXRhLCBrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZUhhc0NsYXNzKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gIGlmICghZWxlbWVudC5nZXRBdHRyaWJ1dGUpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuICgoXCIgXCIgKyAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgXCIgXCIpLnJlcGxhY2UoL1tcXG5cXHRdL2csIFwiIFwiKS5cbiAgICAgIGluZGV4T2YoXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiKSA+IC0xKTtcbn1cblxuZnVuY3Rpb24ganFMaXRlUmVtb3ZlQ2xhc3MoZWxlbWVudCwgY3NzQ2xhc3Nlcykge1xuICBpZiAoY3NzQ2xhc3NlcyAmJiBlbGVtZW50LnNldEF0dHJpYnV0ZSkge1xuICAgIGZvckVhY2goY3NzQ2xhc3Nlcy5zcGxpdCgnICcpLCBmdW5jdGlvbihjc3NDbGFzcykge1xuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgdHJpbShcbiAgICAgICAgICAoXCIgXCIgKyAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgXCIgXCIpXG4gICAgICAgICAgLnJlcGxhY2UoL1tcXG5cXHRdL2csIFwiIFwiKVxuICAgICAgICAgIC5yZXBsYWNlKFwiIFwiICsgdHJpbShjc3NDbGFzcykgKyBcIiBcIiwgXCIgXCIpKVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBqcUxpdGVBZGRDbGFzcyhlbGVtZW50LCBjc3NDbGFzc2VzKSB7XG4gIGlmIChjc3NDbGFzc2VzICYmIGVsZW1lbnQuc2V0QXR0cmlidXRlKSB7XG4gICAgdmFyIGV4aXN0aW5nQ2xhc3NlcyA9ICgnICcgKyAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgJyAnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9bXFxuXFx0XS9nLCBcIiBcIik7XG5cbiAgICBmb3JFYWNoKGNzc0NsYXNzZXMuc3BsaXQoJyAnKSwgZnVuY3Rpb24oY3NzQ2xhc3MpIHtcbiAgICAgIGNzc0NsYXNzID0gdHJpbShjc3NDbGFzcyk7XG4gICAgICBpZiAoZXhpc3RpbmdDbGFzc2VzLmluZGV4T2YoJyAnICsgY3NzQ2xhc3MgKyAnICcpID09PSAtMSkge1xuICAgICAgICBleGlzdGluZ0NsYXNzZXMgKz0gY3NzQ2xhc3MgKyAnICc7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCB0cmltKGV4aXN0aW5nQ2xhc3NlcykpO1xuICB9XG59XG5cblxuZnVuY3Rpb24ganFMaXRlQWRkTm9kZXMocm9vdCwgZWxlbWVudHMpIHtcbiAgLy8gVEhJUyBDT0RFIElTIFZFUlkgSE9ULiBEb24ndCBtYWtlIGNoYW5nZXMgd2l0aG91dCBiZW5jaG1hcmtpbmcuXG5cbiAgaWYgKGVsZW1lbnRzKSB7XG5cbiAgICAvLyBpZiBhIE5vZGUgKHRoZSBtb3N0IGNvbW1vbiBjYXNlKVxuICAgIGlmIChlbGVtZW50cy5ub2RlVHlwZSkge1xuICAgICAgcm9vdFtyb290Lmxlbmd0aCsrXSA9IGVsZW1lbnRzO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG4gICAgICAvLyBpZiBhbiBBcnJheSBvciBOb2RlTGlzdCBhbmQgbm90IGEgV2luZG93XG4gICAgICBpZiAodHlwZW9mIGxlbmd0aCA9PT0gJ251bWJlcicgJiYgZWxlbWVudHMud2luZG93ICE9PSBlbGVtZW50cykge1xuICAgICAgICBpZiAobGVuZ3RoKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcm9vdFtyb290Lmxlbmd0aCsrXSA9IGVsZW1lbnRzW2ldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm9vdFtyb290Lmxlbmd0aCsrXSA9IGVsZW1lbnRzO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGpxTGl0ZUNvbnRyb2xsZXIoZWxlbWVudCwgbmFtZSkge1xuICByZXR1cm4ganFMaXRlSW5oZXJpdGVkRGF0YShlbGVtZW50LCAnJCcgKyAobmFtZSB8fCAnbmdDb250cm9sbGVyJykgKyAnQ29udHJvbGxlcicpO1xufVxuXG5mdW5jdGlvbiBqcUxpdGVJbmhlcml0ZWREYXRhKGVsZW1lbnQsIG5hbWUsIHZhbHVlKSB7XG4gIC8vIGlmIGVsZW1lbnQgaXMgdGhlIGRvY3VtZW50IG9iamVjdCB3b3JrIHdpdGggdGhlIGh0bWwgZWxlbWVudCBpbnN0ZWFkXG4gIC8vIHRoaXMgbWFrZXMgJChkb2N1bWVudCkuc2NvcGUoKSBwb3NzaWJsZVxuICBpZiAoZWxlbWVudC5ub2RlVHlwZSA9PSBOT0RFX1RZUEVfRE9DVU1FTlQpIHtcbiAgICBlbGVtZW50ID0gZWxlbWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cbiAgdmFyIG5hbWVzID0gaXNBcnJheShuYW1lKSA/IG5hbWUgOiBbbmFtZV07XG5cbiAgd2hpbGUgKGVsZW1lbnQpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBuYW1lcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICBpZiAoKHZhbHVlID0ganFMaXRlLmRhdGEoZWxlbWVudCwgbmFtZXNbaV0pKSAhPT0gdW5kZWZpbmVkKSByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLy8gSWYgZGVhbGluZyB3aXRoIGEgZG9jdW1lbnQgZnJhZ21lbnQgbm9kZSB3aXRoIGEgaG9zdCBlbGVtZW50LCBhbmQgbm8gcGFyZW50LCB1c2UgdGhlIGhvc3RcbiAgICAvLyBlbGVtZW50IGFzIHRoZSBwYXJlbnQuIFRoaXMgZW5hYmxlcyBkaXJlY3RpdmVzIHdpdGhpbiBhIFNoYWRvdyBET00gb3IgcG9seWZpbGxlZCBTaGFkb3cgRE9NXG4gICAgLy8gdG8gbG9va3VwIHBhcmVudCBjb250cm9sbGVycy5cbiAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlIHx8IChlbGVtZW50Lm5vZGVUeXBlID09PSBOT0RFX1RZUEVfRE9DVU1FTlRfRlJBR01FTlQgJiYgZWxlbWVudC5ob3N0KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBqcUxpdGVFbXB0eShlbGVtZW50KSB7XG4gIGpxTGl0ZURlYWxvYyhlbGVtZW50LCB0cnVlKTtcbiAgd2hpbGUgKGVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgIGVsZW1lbnQucmVtb3ZlQ2hpbGQoZWxlbWVudC5maXJzdENoaWxkKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBqcUxpdGVSZW1vdmUoZWxlbWVudCwga2VlcERhdGEpIHtcbiAgaWYgKCFrZWVwRGF0YSkganFMaXRlRGVhbG9jKGVsZW1lbnQpO1xuICB2YXIgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XG59XG5cblxuZnVuY3Rpb24ganFMaXRlRG9jdW1lbnRMb2FkZWQoYWN0aW9uLCB3aW4pIHtcbiAgd2luID0gd2luIHx8IHdpbmRvdztcbiAgaWYgKHdpbi5kb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgLy8gRm9yY2UgdGhlIGFjdGlvbiB0byBiZSBydW4gYXN5bmMgZm9yIGNvbnNpc3RlbnQgYmVoYXZpb3VyXG4gICAgLy8gZnJvbSB0aGUgYWN0aW9uJ3MgcG9pbnQgb2Ygdmlld1xuICAgIC8vIGkuZS4gaXQgd2lsbCBkZWZpbml0ZWx5IG5vdCBiZSBpbiBhICRhcHBseVxuICAgIHdpbi5zZXRUaW1lb3V0KGFjdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgLy8gTm8gbmVlZCB0byB1bmJpbmQgdGhpcyBoYW5kbGVyIGFzIGxvYWQgaXMgb25seSBldmVyIGNhbGxlZCBvbmNlXG4gICAganFMaXRlKHdpbikub24oJ2xvYWQnLCBhY3Rpb24pO1xuICB9XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gRnVuY3Rpb25zIHdoaWNoIGFyZSBkZWNsYXJlZCBkaXJlY3RseS5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xudmFyIEpRTGl0ZVByb3RvdHlwZSA9IEpRTGl0ZS5wcm90b3R5cGUgPSB7XG4gIHJlYWR5OiBmdW5jdGlvbihmbikge1xuICAgIHZhciBmaXJlZCA9IGZhbHNlO1xuXG4gICAgZnVuY3Rpb24gdHJpZ2dlcigpIHtcbiAgICAgIGlmIChmaXJlZCkgcmV0dXJuO1xuICAgICAgZmlyZWQgPSB0cnVlO1xuICAgICAgZm4oKTtcbiAgICB9XG5cbiAgICAvLyBjaGVjayBpZiBkb2N1bWVudCBpcyBhbHJlYWR5IGxvYWRlZFxuICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgICBzZXRUaW1lb3V0KHRyaWdnZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9uKCdET01Db250ZW50TG9hZGVkJywgdHJpZ2dlcik7IC8vIHdvcmtzIGZvciBtb2Rlcm4gYnJvd3NlcnMgYW5kIElFOVxuICAgICAgLy8gd2UgY2FuIG5vdCB1c2UganFMaXRlIHNpbmNlIHdlIGFyZSBub3QgZG9uZSBsb2FkaW5nIGFuZCBqUXVlcnkgY291bGQgYmUgbG9hZGVkIGxhdGVyLlxuICAgICAgLy8ganNoaW50IC1XMDY0XG4gICAgICBKUUxpdGUod2luZG93KS5vbignbG9hZCcsIHRyaWdnZXIpOyAvLyBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkIGZvciBvdGhlcnNcbiAgICAgIC8vIGpzaGludCArVzA2NFxuICAgIH1cbiAgfSxcbiAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZSA9IFtdO1xuICAgIGZvckVhY2godGhpcywgZnVuY3Rpb24oZSkgeyB2YWx1ZS5wdXNoKCcnICsgZSk7fSk7XG4gICAgcmV0dXJuICdbJyArIHZhbHVlLmpvaW4oJywgJykgKyAnXSc7XG4gIH0sXG5cbiAgZXE6IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICByZXR1cm4gKGluZGV4ID49IDApID8ganFMaXRlKHRoaXNbaW5kZXhdKSA6IGpxTGl0ZSh0aGlzW3RoaXMubGVuZ3RoICsgaW5kZXhdKTtcbiAgfSxcblxuICBsZW5ndGg6IDAsXG4gIHB1c2g6IHB1c2gsXG4gIHNvcnQ6IFtdLnNvcnQsXG4gIHNwbGljZTogW10uc3BsaWNlXG59O1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEZ1bmN0aW9ucyBpdGVyYXRpbmcgZ2V0dGVyL3NldHRlcnMuXG4vLyB0aGVzZSBmdW5jdGlvbnMgcmV0dXJuIHNlbGYgb24gc2V0dGVyIGFuZFxuLy8gdmFsdWUgb24gZ2V0LlxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG52YXIgQk9PTEVBTl9BVFRSID0ge307XG5mb3JFYWNoKCdtdWx0aXBsZSxzZWxlY3RlZCxjaGVja2VkLGRpc2FibGVkLHJlYWRPbmx5LHJlcXVpcmVkLG9wZW4nLnNwbGl0KCcsJyksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gIEJPT0xFQU5fQVRUUltsb3dlcmNhc2UodmFsdWUpXSA9IHZhbHVlO1xufSk7XG52YXIgQk9PTEVBTl9FTEVNRU5UUyA9IHt9O1xuZm9yRWFjaCgnaW5wdXQsc2VsZWN0LG9wdGlvbix0ZXh0YXJlYSxidXR0b24sZm9ybSxkZXRhaWxzJy5zcGxpdCgnLCcpLCBmdW5jdGlvbih2YWx1ZSkge1xuICBCT09MRUFOX0VMRU1FTlRTW3ZhbHVlXSA9IHRydWU7XG59KTtcbnZhciBBTElBU0VEX0FUVFIgPSB7XG4gICduZ01pbmxlbmd0aCc6ICdtaW5sZW5ndGgnLFxuICAnbmdNYXhsZW5ndGgnOiAnbWF4bGVuZ3RoJyxcbiAgJ25nTWluJzogJ21pbicsXG4gICduZ01heCc6ICdtYXgnLFxuICAnbmdQYXR0ZXJuJzogJ3BhdHRlcm4nXG59O1xuXG5mdW5jdGlvbiBnZXRCb29sZWFuQXR0ck5hbWUoZWxlbWVudCwgbmFtZSkge1xuICAvLyBjaGVjayBkb20gbGFzdCBzaW5jZSB3ZSB3aWxsIG1vc3QgbGlrZWx5IGZhaWwgb24gbmFtZVxuICB2YXIgYm9vbGVhbkF0dHIgPSBCT09MRUFOX0FUVFJbbmFtZS50b0xvd2VyQ2FzZSgpXTtcblxuICAvLyBib29sZWFuQXR0ciBpcyBoZXJlIHR3aWNlIHRvIG1pbmltaXplIERPTSBhY2Nlc3NcbiAgcmV0dXJuIGJvb2xlYW5BdHRyICYmIEJPT0xFQU5fRUxFTUVOVFNbbm9kZU5hbWVfKGVsZW1lbnQpXSAmJiBib29sZWFuQXR0cjtcbn1cblxuZnVuY3Rpb24gZ2V0QWxpYXNlZEF0dHJOYW1lKGVsZW1lbnQsIG5hbWUpIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbWVudC5ub2RlTmFtZTtcbiAgcmV0dXJuIChub2RlTmFtZSA9PT0gJ0lOUFVUJyB8fCBub2RlTmFtZSA9PT0gJ1RFWFRBUkVBJykgJiYgQUxJQVNFRF9BVFRSW25hbWVdO1xufVxuXG5mb3JFYWNoKHtcbiAgZGF0YToganFMaXRlRGF0YSxcbiAgcmVtb3ZlRGF0YToganFMaXRlUmVtb3ZlRGF0YVxufSwgZnVuY3Rpb24oZm4sIG5hbWUpIHtcbiAgSlFMaXRlW25hbWVdID0gZm47XG59KTtcblxuZm9yRWFjaCh7XG4gIGRhdGE6IGpxTGl0ZURhdGEsXG4gIGluaGVyaXRlZERhdGE6IGpxTGl0ZUluaGVyaXRlZERhdGEsXG5cbiAgc2NvcGU6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAvLyBDYW4ndCB1c2UganFMaXRlRGF0YSBoZXJlIGRpcmVjdGx5IHNvIHdlIHN0YXkgY29tcGF0aWJsZSB3aXRoIGpRdWVyeSFcbiAgICByZXR1cm4ganFMaXRlLmRhdGEoZWxlbWVudCwgJyRzY29wZScpIHx8IGpxTGl0ZUluaGVyaXRlZERhdGEoZWxlbWVudC5wYXJlbnROb2RlIHx8IGVsZW1lbnQsIFsnJGlzb2xhdGVTY29wZScsICckc2NvcGUnXSk7XG4gIH0sXG5cbiAgaXNvbGF0ZVNjb3BlOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgLy8gQ2FuJ3QgdXNlIGpxTGl0ZURhdGEgaGVyZSBkaXJlY3RseSBzbyB3ZSBzdGF5IGNvbXBhdGlibGUgd2l0aCBqUXVlcnkhXG4gICAgcmV0dXJuIGpxTGl0ZS5kYXRhKGVsZW1lbnQsICckaXNvbGF0ZVNjb3BlJykgfHwganFMaXRlLmRhdGEoZWxlbWVudCwgJyRpc29sYXRlU2NvcGVOb1RlbXBsYXRlJyk7XG4gIH0sXG5cbiAgY29udHJvbGxlcjoganFMaXRlQ29udHJvbGxlcixcblxuICBpbmplY3RvcjogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIHJldHVybiBqcUxpdGVJbmhlcml0ZWREYXRhKGVsZW1lbnQsICckaW5qZWN0b3InKTtcbiAgfSxcblxuICByZW1vdmVBdHRyOiBmdW5jdGlvbihlbGVtZW50LCBuYW1lKSB7XG4gICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gIH0sXG5cbiAgaGFzQ2xhc3M6IGpxTGl0ZUhhc0NsYXNzLFxuXG4gIGNzczogZnVuY3Rpb24oZWxlbWVudCwgbmFtZSwgdmFsdWUpIHtcbiAgICBuYW1lID0gY2FtZWxDYXNlKG5hbWUpO1xuXG4gICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgIGVsZW1lbnQuc3R5bGVbbmFtZV0gPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGVsZW1lbnQuc3R5bGVbbmFtZV07XG4gICAgfVxuICB9LFxuXG4gIGF0dHI6IGZ1bmN0aW9uKGVsZW1lbnQsIG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIGxvd2VyY2FzZWROYW1lID0gbG93ZXJjYXNlKG5hbWUpO1xuICAgIGlmIChCT09MRUFOX0FUVFJbbG93ZXJjYXNlZE5hbWVdKSB7XG4gICAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICBpZiAoISF2YWx1ZSkge1xuICAgICAgICAgIGVsZW1lbnRbbmFtZV0gPSB0cnVlO1xuICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKG5hbWUsIGxvd2VyY2FzZWROYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbGVtZW50W25hbWVdID0gZmFsc2U7XG4gICAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobG93ZXJjYXNlZE5hbWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gKGVsZW1lbnRbbmFtZV0gfHxcbiAgICAgICAgICAgICAgICAgKGVsZW1lbnQuYXR0cmlidXRlcy5nZXROYW1lZEl0ZW0obmFtZSkgfHwgbm9vcCkuc3BlY2lmaWVkKVxuICAgICAgICAgICAgICAgPyBsb3dlcmNhc2VkTmFtZVxuICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc0RlZmluZWQodmFsdWUpKSB7XG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChlbGVtZW50LmdldEF0dHJpYnV0ZSkge1xuICAgICAgLy8gdGhlIGV4dHJhIGFyZ3VtZW50IFwiMlwiIGlzIHRvIGdldCB0aGUgcmlnaHQgdGhpbmcgZm9yIGEuaHJlZiBpbiBJRSwgc2VlIGpRdWVyeSBjb2RlXG4gICAgICAvLyBzb21lIGVsZW1lbnRzIChlLmcuIERvY3VtZW50KSBkb24ndCBoYXZlIGdldCBhdHRyaWJ1dGUsIHNvIHJldHVybiB1bmRlZmluZWRcbiAgICAgIHZhciByZXQgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShuYW1lLCAyKTtcbiAgICAgIC8vIG5vcm1hbGl6ZSBub24tZXhpc3RpbmcgYXR0cmlidXRlcyB0byB1bmRlZmluZWQgKGFzIGpRdWVyeSlcbiAgICAgIHJldHVybiByZXQgPT09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG4gICAgfVxuICB9LFxuXG4gIHByb3A6IGZ1bmN0aW9uKGVsZW1lbnQsIG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgIGVsZW1lbnRbbmFtZV0gPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGVsZW1lbnRbbmFtZV07XG4gICAgfVxuICB9LFxuXG4gIHRleHQ6IChmdW5jdGlvbigpIHtcbiAgICBnZXRUZXh0LiRkdiA9ICcnO1xuICAgIHJldHVybiBnZXRUZXh0O1xuXG4gICAgZnVuY3Rpb24gZ2V0VGV4dChlbGVtZW50LCB2YWx1ZSkge1xuICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICB2YXIgbm9kZVR5cGUgPSBlbGVtZW50Lm5vZGVUeXBlO1xuICAgICAgICByZXR1cm4gKG5vZGVUeXBlID09PSBOT0RFX1RZUEVfRUxFTUVOVCB8fCBub2RlVHlwZSA9PT0gTk9ERV9UWVBFX1RFWFQpID8gZWxlbWVudC50ZXh0Q29udGVudCA6ICcnO1xuICAgICAgfVxuICAgICAgZWxlbWVudC50ZXh0Q29udGVudCA9IHZhbHVlO1xuICAgIH1cbiAgfSkoKSxcblxuICB2YWw6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlKSB7XG4gICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgaWYgKGVsZW1lbnQubXVsdGlwbGUgJiYgbm9kZU5hbWVfKGVsZW1lbnQpID09PSAnc2VsZWN0Jykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICAgIGZvckVhY2goZWxlbWVudC5vcHRpb25zLCBmdW5jdGlvbihvcHRpb24pIHtcbiAgICAgICAgICBpZiAob3B0aW9uLnNlbGVjdGVkKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChvcHRpb24udmFsdWUgfHwgb3B0aW9uLnRleHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXN1bHQubGVuZ3RoID09PSAwID8gbnVsbCA6IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbGVtZW50LnZhbHVlO1xuICAgIH1cbiAgICBlbGVtZW50LnZhbHVlID0gdmFsdWU7XG4gIH0sXG5cbiAgaHRtbDogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWUpIHtcbiAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZWxlbWVudC5pbm5lckhUTUw7XG4gICAgfVxuICAgIGpxTGl0ZURlYWxvYyhlbGVtZW50LCB0cnVlKTtcbiAgICBlbGVtZW50LmlubmVySFRNTCA9IHZhbHVlO1xuICB9LFxuXG4gIGVtcHR5OiBqcUxpdGVFbXB0eVxufSwgZnVuY3Rpb24oZm4sIG5hbWUpIHtcbiAgLyoqXG4gICAqIFByb3BlcnRpZXM6IHdyaXRlcyByZXR1cm4gc2VsZWN0aW9uLCByZWFkcyByZXR1cm4gZmlyc3QgdmFsdWVcbiAgICovXG4gIEpRTGl0ZS5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbihhcmcxLCBhcmcyKSB7XG4gICAgdmFyIGksIGtleTtcbiAgICB2YXIgbm9kZUNvdW50ID0gdGhpcy5sZW5ndGg7XG5cbiAgICAvLyBqcUxpdGVIYXNDbGFzcyBoYXMgb25seSB0d28gYXJndW1lbnRzLCBidXQgaXMgYSBnZXR0ZXItb25seSBmbiwgc28gd2UgbmVlZCB0byBzcGVjaWFsLWNhc2UgaXRcbiAgICAvLyBpbiBhIHdheSB0aGF0IHN1cnZpdmVzIG1pbmlmaWNhdGlvbi5cbiAgICAvLyBqcUxpdGVFbXB0eSB0YWtlcyBubyBhcmd1bWVudHMgYnV0IGlzIGEgc2V0dGVyLlxuICAgIGlmIChmbiAhPT0ganFMaXRlRW1wdHkgJiZcbiAgICAgICAgKCgoZm4ubGVuZ3RoID09IDIgJiYgKGZuICE9PSBqcUxpdGVIYXNDbGFzcyAmJiBmbiAhPT0ganFMaXRlQ29udHJvbGxlcikpID8gYXJnMSA6IGFyZzIpID09PSB1bmRlZmluZWQpKSB7XG4gICAgICBpZiAoaXNPYmplY3QoYXJnMSkpIHtcblxuICAgICAgICAvLyB3ZSBhcmUgYSB3cml0ZSwgYnV0IHRoZSBvYmplY3QgcHJvcGVydGllcyBhcmUgdGhlIGtleS92YWx1ZXNcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG5vZGVDb3VudDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGZuID09PSBqcUxpdGVEYXRhKSB7XG4gICAgICAgICAgICAvLyBkYXRhKCkgdGFrZXMgdGhlIHdob2xlIG9iamVjdCBpbiBqUXVlcnlcbiAgICAgICAgICAgIGZuKHRoaXNbaV0sIGFyZzEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGtleSBpbiBhcmcxKSB7XG4gICAgICAgICAgICAgIGZuKHRoaXNbaV0sIGtleSwgYXJnMVtrZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmV0dXJuIHNlbGYgZm9yIGNoYWluaW5nXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gd2UgYXJlIGEgcmVhZCwgc28gcmVhZCB0aGUgZmlyc3QgY2hpbGQuXG4gICAgICAgIC8vIFRPRE86IGRvIHdlIHN0aWxsIG5lZWQgdGhpcz9cbiAgICAgICAgdmFyIHZhbHVlID0gZm4uJGR2O1xuICAgICAgICAvLyBPbmx5IGlmIHdlIGhhdmUgJGR2IGRvIHdlIGl0ZXJhdGUgb3ZlciBhbGwsIG90aGVyd2lzZSBpdCBpcyBqdXN0IHRoZSBmaXJzdCBlbGVtZW50LlxuICAgICAgICB2YXIgamogPSAodmFsdWUgPT09IHVuZGVmaW5lZCkgPyBNYXRoLm1pbihub2RlQ291bnQsIDEpIDogbm9kZUNvdW50O1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGpqOyBqKyspIHtcbiAgICAgICAgICB2YXIgbm9kZVZhbHVlID0gZm4odGhpc1tqXSwgYXJnMSwgYXJnMik7XG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZSA/IHZhbHVlICsgbm9kZVZhbHVlIDogbm9kZVZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gd2UgYXJlIGEgd3JpdGUsIHNvIGFwcGx5IHRvIGFsbCBjaGlsZHJlblxuICAgICAgZm9yIChpID0gMDsgaSA8IG5vZGVDb3VudDsgaSsrKSB7XG4gICAgICAgIGZuKHRoaXNbaV0sIGFyZzEsIGFyZzIpO1xuICAgICAgfVxuICAgICAgLy8gcmV0dXJuIHNlbGYgZm9yIGNoYWluaW5nXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH07XG59KTtcblxuZnVuY3Rpb24gY3JlYXRlRXZlbnRIYW5kbGVyKGVsZW1lbnQsIGV2ZW50cykge1xuICB2YXIgZXZlbnRIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQsIHR5cGUpIHtcbiAgICAvLyBqUXVlcnkgc3BlY2lmaWMgYXBpXG4gICAgZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZXZlbnQuZGVmYXVsdFByZXZlbnRlZDtcbiAgICB9O1xuXG4gICAgdmFyIGV2ZW50Rm5zID0gZXZlbnRzW3R5cGUgfHwgZXZlbnQudHlwZV07XG4gICAgdmFyIGV2ZW50Rm5zTGVuZ3RoID0gZXZlbnRGbnMgPyBldmVudEZucy5sZW5ndGggOiAwO1xuXG4gICAgaWYgKCFldmVudEZuc0xlbmd0aCkgcmV0dXJuO1xuXG4gICAgaWYgKGlzVW5kZWZpbmVkKGV2ZW50LmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCkpIHtcbiAgICAgIHZhciBvcmlnaW5hbFN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiA9IGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjtcbiAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBldmVudC5pbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSB0cnVlO1xuXG4gICAgICAgIGlmIChldmVudC5zdG9wUHJvcGFnYXRpb24pIHtcbiAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcmlnaW5hbFN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbikge1xuICAgICAgICAgIG9yaWdpbmFsU3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uLmNhbGwoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIGV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZXZlbnQuaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID09PSB0cnVlO1xuICAgIH07XG5cbiAgICAvLyBDb3B5IGV2ZW50IGhhbmRsZXJzIGluIGNhc2UgZXZlbnQgaGFuZGxlcnMgYXJyYXkgaXMgbW9kaWZpZWQgZHVyaW5nIGV4ZWN1dGlvbi5cbiAgICBpZiAoKGV2ZW50Rm5zTGVuZ3RoID4gMSkpIHtcbiAgICAgIGV2ZW50Rm5zID0gc2hhbGxvd0NvcHkoZXZlbnRGbnMpO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXZlbnRGbnNMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpKSB7XG4gICAgICAgIGV2ZW50Rm5zW2ldLmNhbGwoZWxlbWVudCwgZXZlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvLyBUT0RPOiB0aGlzIGlzIGEgaGFjayBmb3IgYW5ndWxhck1vY2tzL2NsZWFyRGF0YUNhY2hlIHRoYXQgbWFrZXMgaXQgcG9zc2libGUgdG8gZGVyZWdpc3RlciBhbGxcbiAgLy8gICAgICAgZXZlbnRzIG9uIGBlbGVtZW50YFxuICBldmVudEhhbmRsZXIuZWxlbSA9IGVsZW1lbnQ7XG4gIHJldHVybiBldmVudEhhbmRsZXI7XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gRnVuY3Rpb25zIGl0ZXJhdGluZyB0cmF2ZXJzYWwuXG4vLyBUaGVzZSBmdW5jdGlvbnMgY2hhaW4gcmVzdWx0cyBpbnRvIGEgc2luZ2xlXG4vLyBzZWxlY3Rvci5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuZm9yRWFjaCh7XG4gIHJlbW92ZURhdGE6IGpxTGl0ZVJlbW92ZURhdGEsXG5cbiAgb246IGZ1bmN0aW9uIGpxTGl0ZU9uKGVsZW1lbnQsIHR5cGUsIGZuLCB1bnN1cHBvcnRlZCkge1xuICAgIGlmIChpc0RlZmluZWQodW5zdXBwb3J0ZWQpKSB0aHJvdyBqcUxpdGVNaW5FcnIoJ29uYXJncycsICdqcUxpdGUjb24oKSBkb2VzIG5vdCBzdXBwb3J0IHRoZSBgc2VsZWN0b3JgIG9yIGBldmVudERhdGFgIHBhcmFtZXRlcnMnKTtcblxuICAgIC8vIERvIG5vdCBhZGQgZXZlbnQgaGFuZGxlcnMgdG8gbm9uLWVsZW1lbnRzIGJlY2F1c2UgdGhleSB3aWxsIG5vdCBiZSBjbGVhbmVkIHVwLlxuICAgIGlmICghanFMaXRlQWNjZXB0c0RhdGEoZWxlbWVudCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZXhwYW5kb1N0b3JlID0ganFMaXRlRXhwYW5kb1N0b3JlKGVsZW1lbnQsIHRydWUpO1xuICAgIHZhciBldmVudHMgPSBleHBhbmRvU3RvcmUuZXZlbnRzO1xuICAgIHZhciBoYW5kbGUgPSBleHBhbmRvU3RvcmUuaGFuZGxlO1xuXG4gICAgaWYgKCFoYW5kbGUpIHtcbiAgICAgIGhhbmRsZSA9IGV4cGFuZG9TdG9yZS5oYW5kbGUgPSBjcmVhdGVFdmVudEhhbmRsZXIoZWxlbWVudCwgZXZlbnRzKTtcbiAgICB9XG5cbiAgICAvLyBodHRwOi8vanNwZXJmLmNvbS9zdHJpbmctaW5kZXhvZi12cy1zcGxpdFxuICAgIHZhciB0eXBlcyA9IHR5cGUuaW5kZXhPZignICcpID49IDAgPyB0eXBlLnNwbGl0KCcgJykgOiBbdHlwZV07XG4gICAgdmFyIGkgPSB0eXBlcy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0eXBlID0gdHlwZXNbaV07XG4gICAgICB2YXIgZXZlbnRGbnMgPSBldmVudHNbdHlwZV07XG5cbiAgICAgIGlmICghZXZlbnRGbnMpIHtcbiAgICAgICAgZXZlbnRzW3R5cGVdID0gW107XG5cbiAgICAgICAgaWYgKHR5cGUgPT09ICdtb3VzZWVudGVyJyB8fCB0eXBlID09PSAnbW91c2VsZWF2ZScpIHtcbiAgICAgICAgICAvLyBSZWZlciB0byBqUXVlcnkncyBpbXBsZW1lbnRhdGlvbiBvZiBtb3VzZWVudGVyICYgbW91c2VsZWF2ZVxuICAgICAgICAgIC8vIFJlYWQgYWJvdXQgbW91c2VlbnRlciBhbmQgbW91c2VsZWF2ZTpcbiAgICAgICAgICAvLyBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2pzL2V2ZW50c19tb3VzZS5odG1sI2xpbms4XG5cbiAgICAgICAgICBqcUxpdGVPbihlbGVtZW50LCBNT1VTRV9FVkVOVF9NQVBbdHlwZV0sIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcywgcmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQ7XG4gICAgICAgICAgICAvLyBGb3IgbW91c2VudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG4gICAgICAgICAgICAvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuICAgICAgICAgICAgaWYgKCFyZWxhdGVkIHx8IChyZWxhdGVkICE9PSB0YXJnZXQgJiYgIXRhcmdldC5jb250YWlucyhyZWxhdGVkKSkpIHtcbiAgICAgICAgICAgICAgaGFuZGxlKGV2ZW50LCB0eXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh0eXBlICE9PSAnJGRlc3Ryb3knKSB7XG4gICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyRm4oZWxlbWVudCwgdHlwZSwgaGFuZGxlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZXZlbnRGbnMgPSBldmVudHNbdHlwZV07XG4gICAgICB9XG4gICAgICBldmVudEZucy5wdXNoKGZuKTtcbiAgICB9XG4gIH0sXG5cbiAgb2ZmOiBqcUxpdGVPZmYsXG5cbiAgb25lOiBmdW5jdGlvbihlbGVtZW50LCB0eXBlLCBmbikge1xuICAgIGVsZW1lbnQgPSBqcUxpdGUoZWxlbWVudCk7XG5cbiAgICAvL2FkZCB0aGUgbGlzdGVuZXIgdHdpY2Ugc28gdGhhdCB3aGVuIGl0IGlzIGNhbGxlZFxuICAgIC8veW91IGNhbiByZW1vdmUgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIGFuZCBzdGlsbCBiZVxuICAgIC8vYWJsZSB0byBjYWxsIGVsZW1lbnQub2ZmKGV2LCBmbikgbm9ybWFsbHlcbiAgICBlbGVtZW50Lm9uKHR5cGUsIGZ1bmN0aW9uIG9uRm4oKSB7XG4gICAgICBlbGVtZW50Lm9mZih0eXBlLCBmbik7XG4gICAgICBlbGVtZW50Lm9mZih0eXBlLCBvbkZuKTtcbiAgICB9KTtcbiAgICBlbGVtZW50Lm9uKHR5cGUsIGZuKTtcbiAgfSxcblxuICByZXBsYWNlV2l0aDogZnVuY3Rpb24oZWxlbWVudCwgcmVwbGFjZU5vZGUpIHtcbiAgICB2YXIgaW5kZXgsIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICBqcUxpdGVEZWFsb2MoZWxlbWVudCk7XG4gICAgZm9yRWFjaChuZXcgSlFMaXRlKHJlcGxhY2VOb2RlKSwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgaWYgKGluZGV4KSB7XG4gICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUobm9kZSwgaW5kZXgubmV4dFNpYmxpbmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyZW50LnJlcGxhY2VDaGlsZChub2RlLCBlbGVtZW50KTtcbiAgICAgIH1cbiAgICAgIGluZGV4ID0gbm9kZTtcbiAgICB9KTtcbiAgfSxcblxuICBjaGlsZHJlbjogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIHZhciBjaGlsZHJlbiA9IFtdO1xuICAgIGZvckVhY2goZWxlbWVudC5jaGlsZE5vZGVzLCBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICBpZiAoZWxlbWVudC5ub2RlVHlwZSA9PT0gTk9ERV9UWVBFX0VMRU1FTlQpXG4gICAgICAgIGNoaWxkcmVuLnB1c2goZWxlbWVudCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9LFxuXG4gIGNvbnRlbnRzOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQuY29udGVudERvY3VtZW50IHx8IGVsZW1lbnQuY2hpbGROb2RlcyB8fCBbXTtcbiAgfSxcblxuICBhcHBlbmQ6IGZ1bmN0aW9uKGVsZW1lbnQsIG5vZGUpIHtcbiAgICB2YXIgbm9kZVR5cGUgPSBlbGVtZW50Lm5vZGVUeXBlO1xuICAgIGlmIChub2RlVHlwZSAhPT0gTk9ERV9UWVBFX0VMRU1FTlQgJiYgbm9kZVR5cGUgIT09IE5PREVfVFlQRV9ET0NVTUVOVF9GUkFHTUVOVCkgcmV0dXJuO1xuXG4gICAgbm9kZSA9IG5ldyBKUUxpdGUobm9kZSk7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBub2RlLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZCA9IG5vZGVbaV07XG4gICAgICBlbGVtZW50LmFwcGVuZENoaWxkKGNoaWxkKTtcbiAgICB9XG4gIH0sXG5cbiAgcHJlcGVuZDogZnVuY3Rpb24oZWxlbWVudCwgbm9kZSkge1xuICAgIGlmIChlbGVtZW50Lm5vZGVUeXBlID09PSBOT0RFX1RZUEVfRUxFTUVOVCkge1xuICAgICAgdmFyIGluZGV4ID0gZWxlbWVudC5maXJzdENoaWxkO1xuICAgICAgZm9yRWFjaChuZXcgSlFMaXRlKG5vZGUpLCBmdW5jdGlvbihjaGlsZCkge1xuICAgICAgICBlbGVtZW50Lmluc2VydEJlZm9yZShjaGlsZCwgaW5kZXgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIHdyYXA6IGZ1bmN0aW9uKGVsZW1lbnQsIHdyYXBOb2RlKSB7XG4gICAgd3JhcE5vZGUgPSBqcUxpdGUod3JhcE5vZGUpLmVxKDApLmNsb25lKClbMF07XG4gICAgdmFyIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBwYXJlbnQucmVwbGFjZUNoaWxkKHdyYXBOb2RlLCBlbGVtZW50KTtcbiAgICB9XG4gICAgd3JhcE5vZGUuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gIH0sXG5cbiAgcmVtb3ZlOiBqcUxpdGVSZW1vdmUsXG5cbiAgZGV0YWNoOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAganFMaXRlUmVtb3ZlKGVsZW1lbnQsIHRydWUpO1xuICB9LFxuXG4gIGFmdGVyOiBmdW5jdGlvbihlbGVtZW50LCBuZXdFbGVtZW50KSB7XG4gICAgdmFyIGluZGV4ID0gZWxlbWVudCwgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIG5ld0VsZW1lbnQgPSBuZXcgSlFMaXRlKG5ld0VsZW1lbnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGlpID0gbmV3RWxlbWVudC5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICB2YXIgbm9kZSA9IG5ld0VsZW1lbnRbaV07XG4gICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKG5vZGUsIGluZGV4Lm5leHRTaWJsaW5nKTtcbiAgICAgIGluZGV4ID0gbm9kZTtcbiAgICB9XG4gIH0sXG5cbiAgYWRkQ2xhc3M6IGpxTGl0ZUFkZENsYXNzLFxuICByZW1vdmVDbGFzczoganFMaXRlUmVtb3ZlQ2xhc3MsXG5cbiAgdG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIHNlbGVjdG9yLCBjb25kaXRpb24pIHtcbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGZvckVhY2goc2VsZWN0b3Iuc3BsaXQoJyAnKSwgZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG4gICAgICAgIHZhciBjbGFzc0NvbmRpdGlvbiA9IGNvbmRpdGlvbjtcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGNsYXNzQ29uZGl0aW9uKSkge1xuICAgICAgICAgIGNsYXNzQ29uZGl0aW9uID0gIWpxTGl0ZUhhc0NsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgKGNsYXNzQ29uZGl0aW9uID8ganFMaXRlQWRkQ2xhc3MgOiBqcUxpdGVSZW1vdmVDbGFzcykoZWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcblxuICBwYXJlbnQ6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICB2YXIgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSBOT0RFX1RZUEVfRE9DVU1FTlRfRlJBR01FTlQgPyBwYXJlbnQgOiBudWxsO1xuICB9LFxuXG4gIG5leHQ6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmc7XG4gIH0sXG5cbiAgZmluZDogZnVuY3Rpb24oZWxlbWVudCwgc2VsZWN0b3IpIHtcbiAgICBpZiAoZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoc2VsZWN0b3IpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9LFxuXG4gIGNsb25lOiBqcUxpdGVDbG9uZSxcblxuICB0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oZWxlbWVudCwgZXZlbnQsIGV4dHJhUGFyYW1ldGVycykge1xuXG4gICAgdmFyIGR1bW15RXZlbnQsIGV2ZW50Rm5zQ29weSwgaGFuZGxlckFyZ3M7XG4gICAgdmFyIGV2ZW50TmFtZSA9IGV2ZW50LnR5cGUgfHwgZXZlbnQ7XG4gICAgdmFyIGV4cGFuZG9TdG9yZSA9IGpxTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50KTtcbiAgICB2YXIgZXZlbnRzID0gZXhwYW5kb1N0b3JlICYmIGV4cGFuZG9TdG9yZS5ldmVudHM7XG4gICAgdmFyIGV2ZW50Rm5zID0gZXZlbnRzICYmIGV2ZW50c1tldmVudE5hbWVdO1xuXG4gICAgaWYgKGV2ZW50Rm5zKSB7XG4gICAgICAvLyBDcmVhdGUgYSBkdW1teSBldmVudCB0byBwYXNzIHRvIHRoZSBoYW5kbGVyc1xuICAgICAgZHVtbXlFdmVudCA9IHtcbiAgICAgICAgcHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkgeyB0aGlzLmRlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlOyB9LFxuICAgICAgICBpc0RlZmF1bHRQcmV2ZW50ZWQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5kZWZhdWx0UHJldmVudGVkID09PSB0cnVlOyB9LFxuICAgICAgICBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkgeyB0aGlzLmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHRydWU7IH0sXG4gICAgICAgIGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID09PSB0cnVlOyB9LFxuICAgICAgICBzdG9wUHJvcGFnYXRpb246IG5vb3AsXG4gICAgICAgIHR5cGU6IGV2ZW50TmFtZSxcbiAgICAgICAgdGFyZ2V0OiBlbGVtZW50XG4gICAgICB9O1xuXG4gICAgICAvLyBJZiBhIGN1c3RvbSBldmVudCB3YXMgcHJvdmlkZWQgdGhlbiBleHRlbmQgb3VyIGR1bW15IGV2ZW50IHdpdGggaXRcbiAgICAgIGlmIChldmVudC50eXBlKSB7XG4gICAgICAgIGR1bW15RXZlbnQgPSBleHRlbmQoZHVtbXlFdmVudCwgZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICAvLyBDb3B5IGV2ZW50IGhhbmRsZXJzIGluIGNhc2UgZXZlbnQgaGFuZGxlcnMgYXJyYXkgaXMgbW9kaWZpZWQgZHVyaW5nIGV4ZWN1dGlvbi5cbiAgICAgIGV2ZW50Rm5zQ29weSA9IHNoYWxsb3dDb3B5KGV2ZW50Rm5zKTtcbiAgICAgIGhhbmRsZXJBcmdzID0gZXh0cmFQYXJhbWV0ZXJzID8gW2R1bW15RXZlbnRdLmNvbmNhdChleHRyYVBhcmFtZXRlcnMpIDogW2R1bW15RXZlbnRdO1xuXG4gICAgICBmb3JFYWNoKGV2ZW50Rm5zQ29weSwgZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgaWYgKCFkdW1teUV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkpIHtcbiAgICAgICAgICBmbi5hcHBseShlbGVtZW50LCBoYW5kbGVyQXJncyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSwgZnVuY3Rpb24oZm4sIG5hbWUpIHtcbiAgLyoqXG4gICAqIGNoYWluaW5nIGZ1bmN0aW9uc1xuICAgKi9cbiAgSlFMaXRlLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICB2YXIgdmFsdWU7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgaWkgPSB0aGlzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSBmbih0aGlzW2ldLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgICAgICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAvLyBhbnkgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhIHZhbHVlIG5lZWRzIHRvIGJlIHdyYXBwZWRcbiAgICAgICAgICB2YWx1ZSA9IGpxTGl0ZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGpxTGl0ZUFkZE5vZGVzKHZhbHVlLCBmbih0aGlzW2ldLCBhcmcxLCBhcmcyLCBhcmczKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpc0RlZmluZWQodmFsdWUpID8gdmFsdWUgOiB0aGlzO1xuICB9O1xuXG4gIC8vIGJpbmQgbGVnYWN5IGJpbmQvdW5iaW5kIHRvIG9uL29mZlxuICBKUUxpdGUucHJvdG90eXBlLmJpbmQgPSBKUUxpdGUucHJvdG90eXBlLm9uO1xuICBKUUxpdGUucHJvdG90eXBlLnVuYmluZCA9IEpRTGl0ZS5wcm90b3R5cGUub2ZmO1xufSk7XG5cblxuLy8gUHJvdmlkZXIgZm9yIHByaXZhdGUgJCRqcUxpdGUgc2VydmljZVxuZnVuY3Rpb24gJCRqcUxpdGVQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24gJCRqcUxpdGUoKSB7XG4gICAgcmV0dXJuIGV4dGVuZChKUUxpdGUsIHtcbiAgICAgIGhhc0NsYXNzOiBmdW5jdGlvbihub2RlLCBjbGFzc2VzKSB7XG4gICAgICAgIGlmIChub2RlLmF0dHIpIG5vZGUgPSBub2RlWzBdO1xuICAgICAgICByZXR1cm4ganFMaXRlSGFzQ2xhc3Mobm9kZSwgY2xhc3Nlcyk7XG4gICAgICB9LFxuICAgICAgYWRkQ2xhc3M6IGZ1bmN0aW9uKG5vZGUsIGNsYXNzZXMpIHtcbiAgICAgICAgaWYgKG5vZGUuYXR0cikgbm9kZSA9IG5vZGVbMF07XG4gICAgICAgIHJldHVybiBqcUxpdGVBZGRDbGFzcyhub2RlLCBjbGFzc2VzKTtcbiAgICAgIH0sXG4gICAgICByZW1vdmVDbGFzczogZnVuY3Rpb24obm9kZSwgY2xhc3Nlcykge1xuICAgICAgICBpZiAobm9kZS5hdHRyKSBub2RlID0gbm9kZVswXTtcbiAgICAgICAgcmV0dXJuIGpxTGl0ZVJlbW92ZUNsYXNzKG5vZGUsIGNsYXNzZXMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xufVxuXG4vKipcbiAqIENvbXB1dGVzIGEgaGFzaCBvZiBhbiAnb2JqJy5cbiAqIEhhc2ggb2YgYTpcbiAqICBzdHJpbmcgaXMgc3RyaW5nXG4gKiAgbnVtYmVyIGlzIG51bWJlciBhcyBzdHJpbmdcbiAqICBvYmplY3QgaXMgZWl0aGVyIHJlc3VsdCBvZiBjYWxsaW5nICQkaGFzaEtleSBmdW5jdGlvbiBvbiB0aGUgb2JqZWN0IG9yIHVuaXF1ZWx5IGdlbmVyYXRlZCBpZCxcbiAqICAgICAgICAgdGhhdCBpcyBhbHNvIGFzc2lnbmVkIHRvIHRoZSAkJGhhc2hLZXkgcHJvcGVydHkgb2YgdGhlIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0gb2JqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBoYXNoIHN0cmluZyBzdWNoIHRoYXQgdGhlIHNhbWUgaW5wdXQgd2lsbCBoYXZlIHRoZSBzYW1lIGhhc2ggc3RyaW5nLlxuICogICAgICAgICBUaGUgcmVzdWx0aW5nIHN0cmluZyBrZXkgaXMgaW4gJ3R5cGU6aGFzaEtleScgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBoYXNoS2V5KG9iaiwgbmV4dFVpZEZuKSB7XG4gIHZhciBrZXkgPSBvYmogJiYgb2JqLiQkaGFzaEtleTtcblxuICBpZiAoa2V5KSB7XG4gICAgaWYgKHR5cGVvZiBrZXkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGtleSA9IG9iai4kJGhhc2hLZXkoKTtcbiAgICB9XG4gICAgcmV0dXJuIGtleTtcbiAgfVxuXG4gIHZhciBvYmpUeXBlID0gdHlwZW9mIG9iajtcbiAgaWYgKG9ialR5cGUgPT0gJ2Z1bmN0aW9uJyB8fCAob2JqVHlwZSA9PSAnb2JqZWN0JyAmJiBvYmogIT09IG51bGwpKSB7XG4gICAga2V5ID0gb2JqLiQkaGFzaEtleSA9IG9ialR5cGUgKyAnOicgKyAobmV4dFVpZEZuIHx8IG5leHRVaWQpKCk7XG4gIH0gZWxzZSB7XG4gICAga2V5ID0gb2JqVHlwZSArICc6JyArIG9iajtcbiAgfVxuXG4gIHJldHVybiBrZXk7XG59XG5cbi8qKlxuICogSGFzaE1hcCB3aGljaCBjYW4gdXNlIG9iamVjdHMgYXMga2V5c1xuICovXG5mdW5jdGlvbiBIYXNoTWFwKGFycmF5LCBpc29sYXRlZFVpZCkge1xuICBpZiAoaXNvbGF0ZWRVaWQpIHtcbiAgICB2YXIgdWlkID0gMDtcbiAgICB0aGlzLm5leHRVaWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiArK3VpZDtcbiAgICB9O1xuICB9XG4gIGZvckVhY2goYXJyYXksIHRoaXMucHV0LCB0aGlzKTtcbn1cbkhhc2hNYXAucHJvdG90eXBlID0ge1xuICAvKipcbiAgICogU3RvcmUga2V5IHZhbHVlIHBhaXJcbiAgICogQHBhcmFtIGtleSBrZXkgdG8gc3RvcmUgY2FuIGJlIGFueSB0eXBlXG4gICAqIEBwYXJhbSB2YWx1ZSB2YWx1ZSB0byBzdG9yZSBjYW4gYmUgYW55IHR5cGVcbiAgICovXG4gIHB1dDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgIHRoaXNbaGFzaEtleShrZXksIHRoaXMubmV4dFVpZCldID0gdmFsdWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSBrZXlcbiAgICogQHJldHVybnMge09iamVjdH0gdGhlIHZhbHVlIGZvciB0aGUga2V5XG4gICAqL1xuICBnZXQ6IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiB0aGlzW2hhc2hLZXkoa2V5LCB0aGlzLm5leHRVaWQpXTtcbiAgfSxcblxuICAvKipcbiAgICogUmVtb3ZlIHRoZSBrZXkvdmFsdWUgcGFpclxuICAgKiBAcGFyYW0ga2V5XG4gICAqL1xuICByZW1vdmU6IGZ1bmN0aW9uKGtleSkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXNba2V5ID0gaGFzaEtleShrZXksIHRoaXMubmV4dFVpZCldO1xuICAgIGRlbGV0ZSB0aGlzW2tleV07XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59O1xuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG1vZHVsZSBuZ1xuICogQG5hbWUgYW5ndWxhci5pbmplY3RvclxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENyZWF0ZXMgYW4gaW5qZWN0b3Igb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgZm9yIHJldHJpZXZpbmcgc2VydmljZXMgYXMgd2VsbCBhcyBmb3JcbiAqIGRlcGVuZGVuY3kgaW5qZWN0aW9uIChzZWUge0BsaW5rIGd1aWRlL2RpIGRlcGVuZGVuY3kgaW5qZWN0aW9ufSkuXG4gKlxuICogQHBhcmFtIHtBcnJheS48c3RyaW5nfEZ1bmN0aW9uPn0gbW9kdWxlcyBBIGxpc3Qgb2YgbW9kdWxlIGZ1bmN0aW9ucyBvciB0aGVpciBhbGlhc2VzLiBTZWVcbiAqICAgICB7QGxpbmsgYW5ndWxhci5tb2R1bGV9LiBUaGUgYG5nYCBtb2R1bGUgbXVzdCBiZSBleHBsaWNpdGx5IGFkZGVkLlxuICogQHBhcmFtIHtib29sZWFuPX0gW3N0cmljdERpPWZhbHNlXSBXaGV0aGVyIHRoZSBpbmplY3RvciBzaG91bGQgYmUgaW4gc3RyaWN0IG1vZGUsIHdoaWNoXG4gKiAgICAgZGlzYWxsb3dzIGFyZ3VtZW50IG5hbWUgYW5ub3RhdGlvbiBpbmZlcmVuY2UuXG4gKiBAcmV0dXJucyB7aW5qZWN0b3J9IEluamVjdG9yIG9iamVjdC4gU2VlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LlxuICpcbiAqIEBleGFtcGxlXG4gKiBUeXBpY2FsIHVzYWdlXG4gKiBgYGBqc1xuICogICAvLyBjcmVhdGUgYW4gaW5qZWN0b3JcbiAqICAgdmFyICRpbmplY3RvciA9IGFuZ3VsYXIuaW5qZWN0b3IoWyduZyddKTtcbiAqXG4gKiAgIC8vIHVzZSB0aGUgaW5qZWN0b3IgdG8ga2ljayBvZmYgeW91ciBhcHBsaWNhdGlvblxuICogICAvLyB1c2UgdGhlIHR5cGUgaW5mZXJlbmNlIHRvIGF1dG8gaW5qZWN0IGFyZ3VtZW50cywgb3IgdXNlIGltcGxpY2l0IGluamVjdGlvblxuICogICAkaW5qZWN0b3IuaW52b2tlKGZ1bmN0aW9uKCRyb290U2NvcGUsICRjb21waWxlLCAkZG9jdW1lbnQpIHtcbiAqICAgICAkY29tcGlsZSgkZG9jdW1lbnQpKCRyb290U2NvcGUpO1xuICogICAgICRyb290U2NvcGUuJGRpZ2VzdCgpO1xuICogICB9KTtcbiAqIGBgYFxuICpcbiAqIFNvbWV0aW1lcyB5b3Ugd2FudCB0byBnZXQgYWNjZXNzIHRvIHRoZSBpbmplY3RvciBvZiBhIGN1cnJlbnRseSBydW5uaW5nIEFuZ3VsYXIgYXBwXG4gKiBmcm9tIG91dHNpZGUgQW5ndWxhci4gUGVyaGFwcywgeW91IHdhbnQgdG8gaW5qZWN0IGFuZCBjb21waWxlIHNvbWUgbWFya3VwIGFmdGVyIHRoZVxuICogYXBwbGljYXRpb24gaGFzIGJlZW4gYm9vdHN0cmFwcGVkLiBZb3UgY2FuIGRvIHRoaXMgdXNpbmcgdGhlIGV4dHJhIGBpbmplY3RvcigpYCBhZGRlZFxuICogdG8gSlF1ZXJ5L2pxTGl0ZSBlbGVtZW50cy4gU2VlIHtAbGluayBhbmd1bGFyLmVsZW1lbnR9LlxuICpcbiAqICpUaGlzIGlzIGZhaXJseSByYXJlIGJ1dCBjb3VsZCBiZSB0aGUgY2FzZSBpZiBhIHRoaXJkIHBhcnR5IGxpYnJhcnkgaXMgaW5qZWN0aW5nIHRoZVxuICogbWFya3VwLipcbiAqXG4gKiBJbiB0aGUgZm9sbG93aW5nIGV4YW1wbGUgYSBuZXcgYmxvY2sgb2YgSFRNTCBjb250YWluaW5nIGEgYG5nLWNvbnRyb2xsZXJgXG4gKiBkaXJlY3RpdmUgaXMgYWRkZWQgdG8gdGhlIGVuZCBvZiB0aGUgZG9jdW1lbnQgYm9keSBieSBKUXVlcnkuIFdlIHRoZW4gY29tcGlsZSBhbmQgbGlua1xuICogaXQgaW50byB0aGUgY3VycmVudCBBbmd1bGFySlMgc2NvcGUuXG4gKlxuICogYGBganNcbiAqIHZhciAkZGl2ID0gJCgnPGRpdiBuZy1jb250cm9sbGVyPVwiTXlDdHJsXCI+e3tjb250ZW50LmxhYmVsfX08L2Rpdj4nKTtcbiAqICQoZG9jdW1lbnQuYm9keSkuYXBwZW5kKCRkaXYpO1xuICpcbiAqIGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudCkuaW5qZWN0b3IoKS5pbnZva2UoZnVuY3Rpb24oJGNvbXBpbGUpIHtcbiAqICAgdmFyIHNjb3BlID0gYW5ndWxhci5lbGVtZW50KCRkaXYpLnNjb3BlKCk7XG4gKiAgICRjb21waWxlKCRkaXYpKHNjb3BlKTtcbiAqIH0pO1xuICogYGBgXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBtb2R1bGVcbiAqIEBuYW1lIGF1dG9cbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEltcGxpY2l0IG1vZHVsZSB3aGljaCBnZXRzIGF1dG9tYXRpY2FsbHkgYWRkZWQgdG8gZWFjaCB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfS5cbiAqL1xuXG52YXIgRk5fQVJHUyA9IC9eZnVuY3Rpb25cXHMqW15cXChdKlxcKFxccyooW15cXCldKilcXCkvbTtcbnZhciBGTl9BUkdfU1BMSVQgPSAvLC87XG52YXIgRk5fQVJHID0gL15cXHMqKF8/KShcXFMrPylcXDFcXHMqJC87XG52YXIgU1RSSVBfQ09NTUVOVFMgPSAvKChcXC9cXC8uKiQpfChcXC9cXCpbXFxzXFxTXSo/XFwqXFwvKSkvbWc7XG52YXIgJGluamVjdG9yTWluRXJyID0gbWluRXJyKCckaW5qZWN0b3InKTtcblxuZnVuY3Rpb24gYW5vbkZuKGZuKSB7XG4gIC8vIEZvciBhbm9ueW1vdXMgZnVuY3Rpb25zLCBzaG93aW5nIGF0IHRoZSB2ZXJ5IGxlYXN0IHRoZSBmdW5jdGlvbiBzaWduYXR1cmUgY2FuIGhlbHAgaW5cbiAgLy8gZGVidWdnaW5nLlxuICB2YXIgZm5UZXh0ID0gZm4udG9TdHJpbmcoKS5yZXBsYWNlKFNUUklQX0NPTU1FTlRTLCAnJyksXG4gICAgICBhcmdzID0gZm5UZXh0Lm1hdGNoKEZOX0FSR1MpO1xuICBpZiAoYXJncykge1xuICAgIHJldHVybiAnZnVuY3Rpb24oJyArIChhcmdzWzFdIHx8ICcnKS5yZXBsYWNlKC9bXFxzXFxyXFxuXSsvLCAnICcpICsgJyknO1xuICB9XG4gIHJldHVybiAnZm4nO1xufVxuXG5mdW5jdGlvbiBhbm5vdGF0ZShmbiwgc3RyaWN0RGksIG5hbWUpIHtcbiAgdmFyICRpbmplY3QsXG4gICAgICBmblRleHQsXG4gICAgICBhcmdEZWNsLFxuICAgICAgbGFzdDtcblxuICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKCEoJGluamVjdCA9IGZuLiRpbmplY3QpKSB7XG4gICAgICAkaW5qZWN0ID0gW107XG4gICAgICBpZiAoZm4ubGVuZ3RoKSB7XG4gICAgICAgIGlmIChzdHJpY3REaSkge1xuICAgICAgICAgIGlmICghaXNTdHJpbmcobmFtZSkgfHwgIW5hbWUpIHtcbiAgICAgICAgICAgIG5hbWUgPSBmbi5uYW1lIHx8IGFub25Gbihmbik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93ICRpbmplY3Rvck1pbkVycignc3RyaWN0ZGknLFxuICAgICAgICAgICAgJ3swfSBpcyBub3QgdXNpbmcgZXhwbGljaXQgYW5ub3RhdGlvbiBhbmQgY2Fubm90IGJlIGludm9rZWQgaW4gc3RyaWN0IG1vZGUnLCBuYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBmblRleHQgPSBmbi50b1N0cmluZygpLnJlcGxhY2UoU1RSSVBfQ09NTUVOVFMsICcnKTtcbiAgICAgICAgYXJnRGVjbCA9IGZuVGV4dC5tYXRjaChGTl9BUkdTKTtcbiAgICAgICAgZm9yRWFjaChhcmdEZWNsWzFdLnNwbGl0KEZOX0FSR19TUExJVCksIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICAgIGFyZy5yZXBsYWNlKEZOX0FSRywgZnVuY3Rpb24oYWxsLCB1bmRlcnNjb3JlLCBuYW1lKSB7XG4gICAgICAgICAgICAkaW5qZWN0LnB1c2gobmFtZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgZm4uJGluamVjdCA9ICRpbmplY3Q7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzQXJyYXkoZm4pKSB7XG4gICAgbGFzdCA9IGZuLmxlbmd0aCAtIDE7XG4gICAgYXNzZXJ0QXJnRm4oZm5bbGFzdF0sICdmbicpO1xuICAgICRpbmplY3QgPSBmbi5zbGljZSgwLCBsYXN0KTtcbiAgfSBlbHNlIHtcbiAgICBhc3NlcnRBcmdGbihmbiwgJ2ZuJywgdHJ1ZSk7XG4gIH1cbiAgcmV0dXJuICRpbmplY3Q7XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkaW5qZWN0b3JcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBgJGluamVjdG9yYCBpcyB1c2VkIHRvIHJldHJpZXZlIG9iamVjdCBpbnN0YW5jZXMgYXMgZGVmaW5lZCBieVxuICoge0BsaW5rIGF1dG8uJHByb3ZpZGUgcHJvdmlkZXJ9LCBpbnN0YW50aWF0ZSB0eXBlcywgaW52b2tlIG1ldGhvZHMsXG4gKiBhbmQgbG9hZCBtb2R1bGVzLlxuICpcbiAqIFRoZSBmb2xsb3dpbmcgYWx3YXlzIGhvbGRzIHRydWU6XG4gKlxuICogYGBganNcbiAqICAgdmFyICRpbmplY3RvciA9IGFuZ3VsYXIuaW5qZWN0b3IoKTtcbiAqICAgZXhwZWN0KCRpbmplY3Rvci5nZXQoJyRpbmplY3RvcicpKS50b0JlKCRpbmplY3Rvcik7XG4gKiAgIGV4cGVjdCgkaW5qZWN0b3IuaW52b2tlKGZ1bmN0aW9uKCRpbmplY3Rvcikge1xuICogICAgIHJldHVybiAkaW5qZWN0b3I7XG4gKiAgIH0pKS50b0JlKCRpbmplY3Rvcik7XG4gKiBgYGBcbiAqXG4gKiAjIEluamVjdGlvbiBGdW5jdGlvbiBBbm5vdGF0aW9uXG4gKlxuICogSmF2YVNjcmlwdCBkb2VzIG5vdCBoYXZlIGFubm90YXRpb25zLCBhbmQgYW5ub3RhdGlvbnMgYXJlIG5lZWRlZCBmb3IgZGVwZW5kZW5jeSBpbmplY3Rpb24uIFRoZVxuICogZm9sbG93aW5nIGFyZSBhbGwgdmFsaWQgd2F5cyBvZiBhbm5vdGF0aW5nIGZ1bmN0aW9uIHdpdGggaW5qZWN0aW9uIGFyZ3VtZW50cyBhbmQgYXJlIGVxdWl2YWxlbnQuXG4gKlxuICogYGBganNcbiAqICAgLy8gaW5mZXJyZWQgKG9ubHkgd29ya3MgaWYgY29kZSBub3QgbWluaWZpZWQvb2JmdXNjYXRlZClcbiAqICAgJGluamVjdG9yLmludm9rZShmdW5jdGlvbihzZXJ2aWNlQSl7fSk7XG4gKlxuICogICAvLyBhbm5vdGF0ZWRcbiAqICAgZnVuY3Rpb24gZXhwbGljaXQoc2VydmljZUEpIHt9O1xuICogICBleHBsaWNpdC4kaW5qZWN0ID0gWydzZXJ2aWNlQSddO1xuICogICAkaW5qZWN0b3IuaW52b2tlKGV4cGxpY2l0KTtcbiAqXG4gKiAgIC8vIGlubGluZVxuICogICAkaW5qZWN0b3IuaW52b2tlKFsnc2VydmljZUEnLCBmdW5jdGlvbihzZXJ2aWNlQSl7fV0pO1xuICogYGBgXG4gKlxuICogIyMgSW5mZXJlbmNlXG4gKlxuICogSW4gSmF2YVNjcmlwdCBjYWxsaW5nIGB0b1N0cmluZygpYCBvbiBhIGZ1bmN0aW9uIHJldHVybnMgdGhlIGZ1bmN0aW9uIGRlZmluaXRpb24uIFRoZSBkZWZpbml0aW9uXG4gKiBjYW4gdGhlbiBiZSBwYXJzZWQgYW5kIHRoZSBmdW5jdGlvbiBhcmd1bWVudHMgY2FuIGJlIGV4dHJhY3RlZC4gVGhpcyBtZXRob2Qgb2YgZGlzY292ZXJpbmdcbiAqIGFubm90YXRpb25zIGlzIGRpc2FsbG93ZWQgd2hlbiB0aGUgaW5qZWN0b3IgaXMgaW4gc3RyaWN0IG1vZGUuXG4gKiAqTk9URToqIFRoaXMgZG9lcyBub3Qgd29yayB3aXRoIG1pbmlmaWNhdGlvbiwgYW5kIG9iZnVzY2F0aW9uIHRvb2xzIHNpbmNlIHRoZXNlIHRvb2xzIGNoYW5nZSB0aGVcbiAqIGFyZ3VtZW50IG5hbWVzLlxuICpcbiAqICMjIGAkaW5qZWN0YCBBbm5vdGF0aW9uXG4gKiBCeSBhZGRpbmcgYW4gYCRpbmplY3RgIHByb3BlcnR5IG9udG8gYSBmdW5jdGlvbiB0aGUgaW5qZWN0aW9uIHBhcmFtZXRlcnMgY2FuIGJlIHNwZWNpZmllZC5cbiAqXG4gKiAjIyBJbmxpbmVcbiAqIEFzIGFuIGFycmF5IG9mIGluamVjdGlvbiBuYW1lcywgd2hlcmUgdGhlIGxhc3QgaXRlbSBpbiB0aGUgYXJyYXkgaXMgdGhlIGZ1bmN0aW9uIHRvIGNhbGwuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkaW5qZWN0b3IjZ2V0XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gYW4gaW5zdGFuY2Ugb2YgdGhlIHNlcnZpY2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGluc3RhbmNlIHRvIHJldHJpZXZlLlxuICogQHBhcmFtIHtzdHJpbmd9IGNhbGxlciBBbiBvcHRpb25hbCBzdHJpbmcgdG8gcHJvdmlkZSB0aGUgb3JpZ2luIG9mIHRoZSBmdW5jdGlvbiBjYWxsIGZvciBlcnJvciBtZXNzYWdlcy5cbiAqIEByZXR1cm4geyp9IFRoZSBpbnN0YW5jZS5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRpbmplY3RvciNpbnZva2VcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEludm9rZSB0aGUgbWV0aG9kIGFuZCBzdXBwbHkgdGhlIG1ldGhvZCBhcmd1bWVudHMgZnJvbSB0aGUgYCRpbmplY3RvcmAuXG4gKlxuICogQHBhcmFtIHshRnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuIEZ1bmN0aW9uIHBhcmFtZXRlcnMgYXJlIGluamVjdGVkIGFjY29yZGluZyB0byB0aGVcbiAqICAge0BsaW5rIGd1aWRlL2RpICRpbmplY3QgQW5ub3RhdGlvbn0gcnVsZXMuXG4gKiBAcGFyYW0ge09iamVjdD19IHNlbGYgVGhlIGB0aGlzYCBmb3IgdGhlIGludm9rZWQgbWV0aG9kLlxuICogQHBhcmFtIHtPYmplY3Q9fSBsb2NhbHMgT3B0aW9uYWwgb2JqZWN0LiBJZiBwcmVzZXQgdGhlbiBhbnkgYXJndW1lbnQgbmFtZXMgYXJlIHJlYWQgZnJvbSB0aGlzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QgZmlyc3QsIGJlZm9yZSB0aGUgYCRpbmplY3RvcmAgaXMgY29uc3VsdGVkLlxuICogQHJldHVybnMgeyp9IHRoZSB2YWx1ZSByZXR1cm5lZCBieSB0aGUgaW52b2tlZCBgZm5gIGZ1bmN0aW9uLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJGluamVjdG9yI2hhc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQWxsb3dzIHRoZSB1c2VyIHRvIHF1ZXJ5IGlmIHRoZSBwYXJ0aWN1bGFyIHNlcnZpY2UgZXhpc3RzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIHNlcnZpY2UgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIGluamVjdG9yIGhhcyBnaXZlbiBzZXJ2aWNlLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJGluamVjdG9yI2luc3RhbnRpYXRlXG4gKiBAZGVzY3JpcHRpb25cbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBKUyB0eXBlLiBUaGUgbWV0aG9kIHRha2VzIGEgY29uc3RydWN0b3IgZnVuY3Rpb24sIGludm9rZXMgdGhlIG5ld1xuICogb3BlcmF0b3IsIGFuZCBzdXBwbGllcyBhbGwgb2YgdGhlIGFyZ3VtZW50cyB0byB0aGUgY29uc3RydWN0b3IgZnVuY3Rpb24gYXMgc3BlY2lmaWVkIGJ5IHRoZVxuICogY29uc3RydWN0b3IgYW5ub3RhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBUeXBlIEFubm90YXRlZCBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gbG9jYWxzIE9wdGlvbmFsIG9iamVjdC4gSWYgcHJlc2V0IHRoZW4gYW55IGFyZ3VtZW50IG5hbWVzIGFyZSByZWFkIGZyb20gdGhpc1xuICogb2JqZWN0IGZpcnN0LCBiZWZvcmUgdGhlIGAkaW5qZWN0b3JgIGlzIGNvbnN1bHRlZC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IG5ldyBpbnN0YW5jZSBvZiBgVHlwZWAuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkaW5qZWN0b3IjYW5ub3RhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgYW4gYXJyYXkgb2Ygc2VydmljZSBuYW1lcyB3aGljaCB0aGUgZnVuY3Rpb24gaXMgcmVxdWVzdGluZyBmb3IgaW5qZWN0aW9uLiBUaGlzIEFQSSBpc1xuICogdXNlZCBieSB0aGUgaW5qZWN0b3IgdG8gZGV0ZXJtaW5lIHdoaWNoIHNlcnZpY2VzIG5lZWQgdG8gYmUgaW5qZWN0ZWQgaW50byB0aGUgZnVuY3Rpb24gd2hlbiB0aGVcbiAqIGZ1bmN0aW9uIGlzIGludm9rZWQuIFRoZXJlIGFyZSB0aHJlZSB3YXlzIGluIHdoaWNoIHRoZSBmdW5jdGlvbiBjYW4gYmUgYW5ub3RhdGVkIHdpdGggdGhlIG5lZWRlZFxuICogZGVwZW5kZW5jaWVzLlxuICpcbiAqICMgQXJndW1lbnQgbmFtZXNcbiAqXG4gKiBUaGUgc2ltcGxlc3QgZm9ybSBpcyB0byBleHRyYWN0IHRoZSBkZXBlbmRlbmNpZXMgZnJvbSB0aGUgYXJndW1lbnRzIG9mIHRoZSBmdW5jdGlvbi4gVGhpcyBpcyBkb25lXG4gKiBieSBjb252ZXJ0aW5nIHRoZSBmdW5jdGlvbiBpbnRvIGEgc3RyaW5nIHVzaW5nIGB0b1N0cmluZygpYCBtZXRob2QgYW5kIGV4dHJhY3RpbmcgdGhlIGFyZ3VtZW50XG4gKiBuYW1lcy5cbiAqIGBgYGpzXG4gKiAgIC8vIEdpdmVuXG4gKiAgIGZ1bmN0aW9uIE15Q29udHJvbGxlcigkc2NvcGUsICRyb3V0ZSkge1xuICogICAgIC8vIC4uLlxuICogICB9XG4gKlxuICogICAvLyBUaGVuXG4gKiAgIGV4cGVjdChpbmplY3Rvci5hbm5vdGF0ZShNeUNvbnRyb2xsZXIpKS50b0VxdWFsKFsnJHNjb3BlJywgJyRyb3V0ZSddKTtcbiAqIGBgYFxuICpcbiAqIFlvdSBjYW4gZGlzYWxsb3cgdGhpcyBtZXRob2QgYnkgdXNpbmcgc3RyaWN0IGluamVjdGlvbiBtb2RlLlxuICpcbiAqIFRoaXMgbWV0aG9kIGRvZXMgbm90IHdvcmsgd2l0aCBjb2RlIG1pbmlmaWNhdGlvbiAvIG9iZnVzY2F0aW9uLiBGb3IgdGhpcyByZWFzb24gdGhlIGZvbGxvd2luZ1xuICogYW5ub3RhdGlvbiBzdHJhdGVnaWVzIGFyZSBzdXBwb3J0ZWQuXG4gKlxuICogIyBUaGUgYCRpbmplY3RgIHByb3BlcnR5XG4gKlxuICogSWYgYSBmdW5jdGlvbiBoYXMgYW4gYCRpbmplY3RgIHByb3BlcnR5IGFuZCBpdHMgdmFsdWUgaXMgYW4gYXJyYXkgb2Ygc3RyaW5ncywgdGhlbiB0aGUgc3RyaW5nc1xuICogcmVwcmVzZW50IG5hbWVzIG9mIHNlcnZpY2VzIHRvIGJlIGluamVjdGVkIGludG8gdGhlIGZ1bmN0aW9uLlxuICogYGBganNcbiAqICAgLy8gR2l2ZW5cbiAqICAgdmFyIE15Q29udHJvbGxlciA9IGZ1bmN0aW9uKG9iZnVzY2F0ZWRTY29wZSwgb2JmdXNjYXRlZFJvdXRlKSB7XG4gKiAgICAgLy8gLi4uXG4gKiAgIH1cbiAqICAgLy8gRGVmaW5lIGZ1bmN0aW9uIGRlcGVuZGVuY2llc1xuICogICBNeUNvbnRyb2xsZXJbJyRpbmplY3QnXSA9IFsnJHNjb3BlJywgJyRyb3V0ZSddO1xuICpcbiAqICAgLy8gVGhlblxuICogICBleHBlY3QoaW5qZWN0b3IuYW5ub3RhdGUoTXlDb250cm9sbGVyKSkudG9FcXVhbChbJyRzY29wZScsICckcm91dGUnXSk7XG4gKiBgYGBcbiAqXG4gKiAjIFRoZSBhcnJheSBub3RhdGlvblxuICpcbiAqIEl0IGlzIG9mdGVuIGRlc2lyYWJsZSB0byBpbmxpbmUgSW5qZWN0ZWQgZnVuY3Rpb25zIGFuZCB0aGF0J3Mgd2hlbiBzZXR0aW5nIHRoZSBgJGluamVjdGAgcHJvcGVydHlcbiAqIGlzIHZlcnkgaW5jb252ZW5pZW50LiBJbiB0aGVzZSBzaXR1YXRpb25zIHVzaW5nIHRoZSBhcnJheSBub3RhdGlvbiB0byBzcGVjaWZ5IHRoZSBkZXBlbmRlbmNpZXMgaW5cbiAqIGEgd2F5IHRoYXQgc3Vydml2ZXMgbWluaWZpY2F0aW9uIGlzIGEgYmV0dGVyIGNob2ljZTpcbiAqXG4gKiBgYGBqc1xuICogICAvLyBXZSB3aXNoIHRvIHdyaXRlIHRoaXMgKG5vdCBtaW5pZmljYXRpb24gLyBvYmZ1c2NhdGlvbiBzYWZlKVxuICogICBpbmplY3Rvci5pbnZva2UoZnVuY3Rpb24oJGNvbXBpbGUsICRyb290U2NvcGUpIHtcbiAqICAgICAvLyAuLi5cbiAqICAgfSk7XG4gKlxuICogICAvLyBXZSBhcmUgZm9yY2VkIHRvIHdyaXRlIGJyZWFrIGlubGluaW5nXG4gKiAgIHZhciB0bXBGbiA9IGZ1bmN0aW9uKG9iZnVzY2F0ZWRDb21waWxlLCBvYmZ1c2NhdGVkUm9vdFNjb3BlKSB7XG4gKiAgICAgLy8gLi4uXG4gKiAgIH07XG4gKiAgIHRtcEZuLiRpbmplY3QgPSBbJyRjb21waWxlJywgJyRyb290U2NvcGUnXTtcbiAqICAgaW5qZWN0b3IuaW52b2tlKHRtcEZuKTtcbiAqXG4gKiAgIC8vIFRvIGJldHRlciBzdXBwb3J0IGlubGluZSBmdW5jdGlvbiB0aGUgaW5saW5lIGFubm90YXRpb24gaXMgc3VwcG9ydGVkXG4gKiAgIGluamVjdG9yLmludm9rZShbJyRjb21waWxlJywgJyRyb290U2NvcGUnLCBmdW5jdGlvbihvYmZDb21waWxlLCBvYmZSb290U2NvcGUpIHtcbiAqICAgICAvLyAuLi5cbiAqICAgfV0pO1xuICpcbiAqICAgLy8gVGhlcmVmb3JlXG4gKiAgIGV4cGVjdChpbmplY3Rvci5hbm5vdGF0ZShcbiAqICAgICAgWyckY29tcGlsZScsICckcm9vdFNjb3BlJywgZnVuY3Rpb24ob2JmdXNfJGNvbXBpbGUsIG9iZnVzXyRyb290U2NvcGUpIHt9XSlcbiAqICAgICkudG9FcXVhbChbJyRjb21waWxlJywgJyRyb290U2NvcGUnXSk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5LjxzdHJpbmd8RnVuY3Rpb24+fSBmbiBGdW5jdGlvbiBmb3Igd2hpY2ggZGVwZW5kZW50IHNlcnZpY2UgbmFtZXMgbmVlZCB0b1xuICogYmUgcmV0cmlldmVkIGFzIGRlc2NyaWJlZCBhYm92ZS5cbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBbc3RyaWN0RGk9ZmFsc2VdIERpc2FsbG93IGFyZ3VtZW50IG5hbWUgYW5ub3RhdGlvbiBpbmZlcmVuY2UuXG4gKlxuICogQHJldHVybnMge0FycmF5LjxzdHJpbmc+fSBUaGUgbmFtZXMgb2YgdGhlIHNlcnZpY2VzIHdoaWNoIHRoZSBmdW5jdGlvbiByZXF1aXJlcy5cbiAqL1xuXG5cblxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkcHJvdmlkZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFRoZSB7QGxpbmsgYXV0by4kcHJvdmlkZSAkcHJvdmlkZX0gc2VydmljZSBoYXMgYSBudW1iZXIgb2YgbWV0aG9kcyBmb3IgcmVnaXN0ZXJpbmcgY29tcG9uZW50c1xuICogd2l0aCB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0uIE1hbnkgb2YgdGhlc2UgZnVuY3Rpb25zIGFyZSBhbHNvIGV4cG9zZWQgb25cbiAqIHtAbGluayBhbmd1bGFyLk1vZHVsZX0uXG4gKlxuICogQW4gQW5ndWxhciAqKnNlcnZpY2UqKiBpcyBhIHNpbmdsZXRvbiBvYmplY3QgY3JlYXRlZCBieSBhICoqc2VydmljZSBmYWN0b3J5KiouICBUaGVzZSAqKnNlcnZpY2VcbiAqIGZhY3RvcmllcyoqIGFyZSBmdW5jdGlvbnMgd2hpY2gsIGluIHR1cm4sIGFyZSBjcmVhdGVkIGJ5IGEgKipzZXJ2aWNlIHByb3ZpZGVyKiouXG4gKiBUaGUgKipzZXJ2aWNlIHByb3ZpZGVycyoqIGFyZSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMuIFdoZW4gaW5zdGFudGlhdGVkIHRoZXkgbXVzdCBjb250YWluIGFcbiAqIHByb3BlcnR5IGNhbGxlZCBgJGdldGAsIHdoaWNoIGhvbGRzIHRoZSAqKnNlcnZpY2UgZmFjdG9yeSoqIGZ1bmN0aW9uLlxuICpcbiAqIFdoZW4geW91IHJlcXVlc3QgYSBzZXJ2aWNlLCB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0gaXMgcmVzcG9uc2libGUgZm9yIGZpbmRpbmcgdGhlXG4gKiBjb3JyZWN0ICoqc2VydmljZSBwcm92aWRlcioqLCBpbnN0YW50aWF0aW5nIGl0IGFuZCB0aGVuIGNhbGxpbmcgaXRzIGAkZ2V0YCAqKnNlcnZpY2UgZmFjdG9yeSoqXG4gKiBmdW5jdGlvbiB0byBnZXQgdGhlIGluc3RhbmNlIG9mIHRoZSAqKnNlcnZpY2UqKi5cbiAqXG4gKiBPZnRlbiBzZXJ2aWNlcyBoYXZlIG5vIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBhbmQgdGhlcmUgaXMgbm8gbmVlZCB0byBhZGQgbWV0aG9kcyB0byB0aGUgc2VydmljZVxuICogcHJvdmlkZXIuICBUaGUgcHJvdmlkZXIgd2lsbCBiZSBubyBtb3JlIHRoYW4gYSBjb25zdHJ1Y3RvciBmdW5jdGlvbiB3aXRoIGEgYCRnZXRgIHByb3BlcnR5LiBGb3JcbiAqIHRoZXNlIGNhc2VzIHRoZSB7QGxpbmsgYXV0by4kcHJvdmlkZSAkcHJvdmlkZX0gc2VydmljZSBoYXMgYWRkaXRpb25hbCBoZWxwZXIgbWV0aG9kcyB0byByZWdpc3RlclxuICogc2VydmljZXMgd2l0aG91dCBzcGVjaWZ5aW5nIGEgcHJvdmlkZXIuXG4gKlxuICogKiB7QGxpbmsgYXV0by4kcHJvdmlkZSNwcm92aWRlciBwcm92aWRlcihwcm92aWRlcil9IC0gcmVnaXN0ZXJzIGEgKipzZXJ2aWNlIHByb3ZpZGVyKiogd2l0aCB0aGVcbiAqICAgICB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfVxuICogKiB7QGxpbmsgYXV0by4kcHJvdmlkZSNjb25zdGFudCBjb25zdGFudChvYmopfSAtIHJlZ2lzdGVycyBhIHZhbHVlL29iamVjdCB0aGF0IGNhbiBiZSBhY2Nlc3NlZCBieVxuICogICAgIHByb3ZpZGVycyBhbmQgc2VydmljZXMuXG4gKiAqIHtAbGluayBhdXRvLiRwcm92aWRlI3ZhbHVlIHZhbHVlKG9iail9IC0gcmVnaXN0ZXJzIGEgdmFsdWUvb2JqZWN0IHRoYXQgY2FuIG9ubHkgYmUgYWNjZXNzZWQgYnlcbiAqICAgICBzZXJ2aWNlcywgbm90IHByb3ZpZGVycy5cbiAqICoge0BsaW5rIGF1dG8uJHByb3ZpZGUjZmFjdG9yeSBmYWN0b3J5KGZuKX0gLSByZWdpc3RlcnMgYSBzZXJ2aWNlICoqZmFjdG9yeSBmdW5jdGlvbioqLCBgZm5gLFxuICogICAgIHRoYXQgd2lsbCBiZSB3cmFwcGVkIGluIGEgKipzZXJ2aWNlIHByb3ZpZGVyKiogb2JqZWN0LCB3aG9zZSBgJGdldGAgcHJvcGVydHkgd2lsbCBjb250YWluIHRoZVxuICogICAgIGdpdmVuIGZhY3RvcnkgZnVuY3Rpb24uXG4gKiAqIHtAbGluayBhdXRvLiRwcm92aWRlI3NlcnZpY2Ugc2VydmljZShjbGFzcyl9IC0gcmVnaXN0ZXJzIGEgKipjb25zdHJ1Y3RvciBmdW5jdGlvbioqLCBgY2xhc3NgXG4gKiAgICAgdGhhdCB3aWxsIGJlIHdyYXBwZWQgaW4gYSAqKnNlcnZpY2UgcHJvdmlkZXIqKiBvYmplY3QsIHdob3NlIGAkZ2V0YCBwcm9wZXJ0eSB3aWxsIGluc3RhbnRpYXRlXG4gKiAgICAgIGEgbmV3IG9iamVjdCB1c2luZyB0aGUgZ2l2ZW4gY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gKlxuICogU2VlIHRoZSBpbmRpdmlkdWFsIG1ldGhvZHMgZm9yIG1vcmUgaW5mb3JtYXRpb24gYW5kIGV4YW1wbGVzLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJHByb3ZpZGUjcHJvdmlkZXJcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFJlZ2lzdGVyIGEgKipwcm92aWRlciBmdW5jdGlvbioqIHdpdGggdGhlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LiBQcm92aWRlciBmdW5jdGlvbnNcbiAqIGFyZSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMsIHdob3NlIGluc3RhbmNlcyBhcmUgcmVzcG9uc2libGUgZm9yIFwicHJvdmlkaW5nXCIgYSBmYWN0b3J5IGZvciBhXG4gKiBzZXJ2aWNlLlxuICpcbiAqIFNlcnZpY2UgcHJvdmlkZXIgbmFtZXMgc3RhcnQgd2l0aCB0aGUgbmFtZSBvZiB0aGUgc2VydmljZSB0aGV5IHByb3ZpZGUgZm9sbG93ZWQgYnkgYFByb3ZpZGVyYC5cbiAqIEZvciBleGFtcGxlLCB0aGUge0BsaW5rIG5nLiRsb2cgJGxvZ30gc2VydmljZSBoYXMgYSBwcm92aWRlciBjYWxsZWRcbiAqIHtAbGluayBuZy4kbG9nUHJvdmlkZXIgJGxvZ1Byb3ZpZGVyfS5cbiAqXG4gKiBTZXJ2aWNlIHByb3ZpZGVyIG9iamVjdHMgY2FuIGhhdmUgYWRkaXRpb25hbCBtZXRob2RzIHdoaWNoIGFsbG93IGNvbmZpZ3VyYXRpb24gb2YgdGhlIHByb3ZpZGVyXG4gKiBhbmQgaXRzIHNlcnZpY2UuIEltcG9ydGFudGx5LCB5b3UgY2FuIGNvbmZpZ3VyZSB3aGF0IGtpbmQgb2Ygc2VydmljZSBpcyBjcmVhdGVkIGJ5IHRoZSBgJGdldGBcbiAqIG1ldGhvZCwgb3IgaG93IHRoYXQgc2VydmljZSB3aWxsIGFjdC4gRm9yIGV4YW1wbGUsIHRoZSB7QGxpbmsgbmcuJGxvZ1Byb3ZpZGVyICRsb2dQcm92aWRlcn0gaGFzIGFcbiAqIG1ldGhvZCB7QGxpbmsgbmcuJGxvZ1Byb3ZpZGVyI2RlYnVnRW5hYmxlZCBkZWJ1Z0VuYWJsZWR9XG4gKiB3aGljaCBsZXRzIHlvdSBzcGVjaWZ5IHdoZXRoZXIgdGhlIHtAbGluayBuZy4kbG9nICRsb2d9IHNlcnZpY2Ugd2lsbCBsb2cgZGVidWcgbWVzc2FnZXMgdG8gdGhlXG4gKiBjb25zb2xlIG9yIG5vdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgaW5zdGFuY2UuIE5PVEU6IHRoZSBwcm92aWRlciB3aWxsIGJlIGF2YWlsYWJsZSB1bmRlciBgbmFtZSArXG4gICAgICAgICAgICAgICAgICAgICAgICAnUHJvdmlkZXInYCBrZXkuXG4gKiBAcGFyYW0geyhPYmplY3R8ZnVuY3Rpb24oKSl9IHByb3ZpZGVyIElmIHRoZSBwcm92aWRlciBpczpcbiAqXG4gKiAgIC0gYE9iamVjdGA6IHRoZW4gaXQgc2hvdWxkIGhhdmUgYSBgJGdldGAgbWV0aG9kLiBUaGUgYCRnZXRgIG1ldGhvZCB3aWxsIGJlIGludm9rZWQgdXNpbmdcbiAqICAgICB7QGxpbmsgYXV0by4kaW5qZWN0b3IjaW52b2tlICRpbmplY3Rvci5pbnZva2UoKX0gd2hlbiBhbiBpbnN0YW5jZSBuZWVkcyB0byBiZSBjcmVhdGVkLlxuICogICAtIGBDb25zdHJ1Y3RvcmA6IGEgbmV3IGluc3RhbmNlIG9mIHRoZSBwcm92aWRlciB3aWxsIGJlIGNyZWF0ZWQgdXNpbmdcbiAqICAgICB7QGxpbmsgYXV0by4kaW5qZWN0b3IjaW5zdGFudGlhdGUgJGluamVjdG9yLmluc3RhbnRpYXRlKCl9LCB0aGVuIHRyZWF0ZWQgYXMgYG9iamVjdGAuXG4gKlxuICogQHJldHVybnMge09iamVjdH0gcmVnaXN0ZXJlZCBwcm92aWRlciBpbnN0YW5jZVxuXG4gKiBAZXhhbXBsZVxuICpcbiAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBzaG93cyBob3cgdG8gY3JlYXRlIGEgc2ltcGxlIGV2ZW50IHRyYWNraW5nIHNlcnZpY2UgYW5kIHJlZ2lzdGVyIGl0IHVzaW5nXG4gKiB7QGxpbmsgYXV0by4kcHJvdmlkZSNwcm92aWRlciAkcHJvdmlkZS5wcm92aWRlcigpfS5cbiAqXG4gKiBgYGBqc1xuICogIC8vIERlZmluZSB0aGUgZXZlbnRUcmFja2VyIHByb3ZpZGVyXG4gKiAgZnVuY3Rpb24gRXZlbnRUcmFja2VyUHJvdmlkZXIoKSB7XG4gKiAgICB2YXIgdHJhY2tpbmdVcmwgPSAnL3RyYWNrJztcbiAqXG4gKiAgICAvLyBBIHByb3ZpZGVyIG1ldGhvZCBmb3IgY29uZmlndXJpbmcgd2hlcmUgdGhlIHRyYWNrZWQgZXZlbnRzIHNob3VsZCBiZWVuIHNhdmVkXG4gKiAgICB0aGlzLnNldFRyYWNraW5nVXJsID0gZnVuY3Rpb24odXJsKSB7XG4gKiAgICAgIHRyYWNraW5nVXJsID0gdXJsO1xuICogICAgfTtcbiAqXG4gKiAgICAvLyBUaGUgc2VydmljZSBmYWN0b3J5IGZ1bmN0aW9uXG4gKiAgICB0aGlzLiRnZXQgPSBbJyRodHRwJywgZnVuY3Rpb24oJGh0dHApIHtcbiAqICAgICAgdmFyIHRyYWNrZWRFdmVudHMgPSB7fTtcbiAqICAgICAgcmV0dXJuIHtcbiAqICAgICAgICAvLyBDYWxsIHRoaXMgdG8gdHJhY2sgYW4gZXZlbnRcbiAqICAgICAgICBldmVudDogZnVuY3Rpb24oZXZlbnQpIHtcbiAqICAgICAgICAgIHZhciBjb3VudCA9IHRyYWNrZWRFdmVudHNbZXZlbnRdIHx8IDA7XG4gKiAgICAgICAgICBjb3VudCArPSAxO1xuICogICAgICAgICAgdHJhY2tlZEV2ZW50c1tldmVudF0gPSBjb3VudDtcbiAqICAgICAgICAgIHJldHVybiBjb3VudDtcbiAqICAgICAgICB9LFxuICogICAgICAgIC8vIENhbGwgdGhpcyB0byBzYXZlIHRoZSB0cmFja2VkIGV2ZW50cyB0byB0aGUgdHJhY2tpbmdVcmxcbiAqICAgICAgICBzYXZlOiBmdW5jdGlvbigpIHtcbiAqICAgICAgICAgICRodHRwLnBvc3QodHJhY2tpbmdVcmwsIHRyYWNrZWRFdmVudHMpO1xuICogICAgICAgIH1cbiAqICAgICAgfTtcbiAqICAgIH1dO1xuICogIH1cbiAqXG4gKiAgZGVzY3JpYmUoJ2V2ZW50VHJhY2tlcicsIGZ1bmN0aW9uKCkge1xuICogICAgdmFyIHBvc3RTcHk7XG4gKlxuICogICAgYmVmb3JlRWFjaChtb2R1bGUoZnVuY3Rpb24oJHByb3ZpZGUpIHtcbiAqICAgICAgLy8gUmVnaXN0ZXIgdGhlIGV2ZW50VHJhY2tlciBwcm92aWRlclxuICogICAgICAkcHJvdmlkZS5wcm92aWRlcignZXZlbnRUcmFja2VyJywgRXZlbnRUcmFja2VyUHJvdmlkZXIpO1xuICogICAgfSkpO1xuICpcbiAqICAgIGJlZm9yZUVhY2gobW9kdWxlKGZ1bmN0aW9uKGV2ZW50VHJhY2tlclByb3ZpZGVyKSB7XG4gKiAgICAgIC8vIENvbmZpZ3VyZSBldmVudFRyYWNrZXIgcHJvdmlkZXJcbiAqICAgICAgZXZlbnRUcmFja2VyUHJvdmlkZXIuc2V0VHJhY2tpbmdVcmwoJy9jdXN0b20tdHJhY2snKTtcbiAqICAgIH0pKTtcbiAqXG4gKiAgICBpdCgndHJhY2tzIGV2ZW50cycsIGluamVjdChmdW5jdGlvbihldmVudFRyYWNrZXIpIHtcbiAqICAgICAgZXhwZWN0KGV2ZW50VHJhY2tlci5ldmVudCgnbG9naW4nKSkudG9FcXVhbCgxKTtcbiAqICAgICAgZXhwZWN0KGV2ZW50VHJhY2tlci5ldmVudCgnbG9naW4nKSkudG9FcXVhbCgyKTtcbiAqICAgIH0pKTtcbiAqXG4gKiAgICBpdCgnc2F2ZXMgdG8gdGhlIHRyYWNraW5nIHVybCcsIGluamVjdChmdW5jdGlvbihldmVudFRyYWNrZXIsICRodHRwKSB7XG4gKiAgICAgIHBvc3RTcHkgPSBzcHlPbigkaHR0cCwgJ3Bvc3QnKTtcbiAqICAgICAgZXZlbnRUcmFja2VyLmV2ZW50KCdsb2dpbicpO1xuICogICAgICBldmVudFRyYWNrZXIuc2F2ZSgpO1xuICogICAgICBleHBlY3QocG9zdFNweSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICogICAgICBleHBlY3QocG9zdFNweS5tb3N0UmVjZW50Q2FsbC5hcmdzWzBdKS5ub3QudG9FcXVhbCgnL3RyYWNrJyk7XG4gKiAgICAgIGV4cGVjdChwb3N0U3B5Lm1vc3RSZWNlbnRDYWxsLmFyZ3NbMF0pLnRvRXF1YWwoJy9jdXN0b20tdHJhY2snKTtcbiAqICAgICAgZXhwZWN0KHBvc3RTcHkubW9zdFJlY2VudENhbGwuYXJnc1sxXSkudG9FcXVhbCh7ICdsb2dpbic6IDEgfSk7XG4gKiAgICB9KSk7XG4gKiAgfSk7XG4gKiBgYGBcbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRwcm92aWRlI2ZhY3RvcnlcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFJlZ2lzdGVyIGEgKipzZXJ2aWNlIGZhY3RvcnkqKiwgd2hpY2ggd2lsbCBiZSBjYWxsZWQgdG8gcmV0dXJuIHRoZSBzZXJ2aWNlIGluc3RhbmNlLlxuICogVGhpcyBpcyBzaG9ydCBmb3IgcmVnaXN0ZXJpbmcgYSBzZXJ2aWNlIHdoZXJlIGl0cyBwcm92aWRlciBjb25zaXN0cyBvZiBvbmx5IGEgYCRnZXRgIHByb3BlcnR5LFxuICogd2hpY2ggaXMgdGhlIGdpdmVuIHNlcnZpY2UgZmFjdG9yeSBmdW5jdGlvbi5cbiAqIFlvdSBzaG91bGQgdXNlIHtAbGluayBhdXRvLiRwcm92aWRlI2ZhY3RvcnkgJHByb3ZpZGUuZmFjdG9yeShnZXRGbil9IGlmIHlvdSBkbyBub3QgbmVlZCB0b1xuICogY29uZmlndXJlIHlvdXIgc2VydmljZSBpbiBhIHByb3ZpZGVyLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gJGdldEZuIFRoZSAkZ2V0Rm4gZm9yIHRoZSBpbnN0YW5jZSBjcmVhdGlvbi4gSW50ZXJuYWxseSB0aGlzIGlzIGEgc2hvcnQgaGFuZFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGAkcHJvdmlkZS5wcm92aWRlcihuYW1lLCB7JGdldDogJGdldEZufSlgLlxuICogQHJldHVybnMge09iamVjdH0gcmVnaXN0ZXJlZCBwcm92aWRlciBpbnN0YW5jZVxuICpcbiAqIEBleGFtcGxlXG4gKiBIZXJlIGlzIGFuIGV4YW1wbGUgb2YgcmVnaXN0ZXJpbmcgYSBzZXJ2aWNlXG4gKiBgYGBqc1xuICogICAkcHJvdmlkZS5mYWN0b3J5KCdwaW5nJywgWyckaHR0cCcsIGZ1bmN0aW9uKCRodHRwKSB7XG4gKiAgICAgcmV0dXJuIGZ1bmN0aW9uIHBpbmcoKSB7XG4gKiAgICAgICByZXR1cm4gJGh0dHAuc2VuZCgnL3BpbmcnKTtcbiAqICAgICB9O1xuICogICB9XSk7XG4gKiBgYGBcbiAqIFlvdSB3b3VsZCB0aGVuIGluamVjdCBhbmQgdXNlIHRoaXMgc2VydmljZSBsaWtlIHRoaXM6XG4gKiBgYGBqc1xuICogICBzb21lTW9kdWxlLmNvbnRyb2xsZXIoJ0N0cmwnLCBbJ3BpbmcnLCBmdW5jdGlvbihwaW5nKSB7XG4gKiAgICAgcGluZygpO1xuICogICB9XSk7XG4gKiBgYGBcbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJHByb3ZpZGUjc2VydmljZVxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogUmVnaXN0ZXIgYSAqKnNlcnZpY2UgY29uc3RydWN0b3IqKiwgd2hpY2ggd2lsbCBiZSBpbnZva2VkIHdpdGggYG5ld2AgdG8gY3JlYXRlIHRoZSBzZXJ2aWNlXG4gKiBpbnN0YW5jZS5cbiAqIFRoaXMgaXMgc2hvcnQgZm9yIHJlZ2lzdGVyaW5nIGEgc2VydmljZSB3aGVyZSBpdHMgcHJvdmlkZXIncyBgJGdldGAgcHJvcGVydHkgaXMgdGhlIHNlcnZpY2VcbiAqIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGluc3RhbnRpYXRlIHRoZSBzZXJ2aWNlIGluc3RhbmNlLlxuICpcbiAqIFlvdSBzaG91bGQgdXNlIHtAbGluayBhdXRvLiRwcm92aWRlI3NlcnZpY2UgJHByb3ZpZGUuc2VydmljZShjbGFzcyl9IGlmIHlvdSBkZWZpbmUgeW91ciBzZXJ2aWNlXG4gKiBhcyBhIHR5cGUvY2xhc3MuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGluc3RhbmNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY29uc3RydWN0b3IgQSBjbGFzcyAoY29uc3RydWN0b3IgZnVuY3Rpb24pIHRoYXQgd2lsbCBiZSBpbnN0YW50aWF0ZWQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSByZWdpc3RlcmVkIHByb3ZpZGVyIGluc3RhbmNlXG4gKlxuICogQGV4YW1wbGVcbiAqIEhlcmUgaXMgYW4gZXhhbXBsZSBvZiByZWdpc3RlcmluZyBhIHNlcnZpY2UgdXNpbmdcbiAqIHtAbGluayBhdXRvLiRwcm92aWRlI3NlcnZpY2UgJHByb3ZpZGUuc2VydmljZShjbGFzcyl9LlxuICogYGBganNcbiAqICAgdmFyIFBpbmcgPSBmdW5jdGlvbigkaHR0cCkge1xuICogICAgIHRoaXMuJGh0dHAgPSAkaHR0cDtcbiAqICAgfTtcbiAqXG4gKiAgIFBpbmcuJGluamVjdCA9IFsnJGh0dHAnXTtcbiAqXG4gKiAgIFBpbmcucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbigpIHtcbiAqICAgICByZXR1cm4gdGhpcy4kaHR0cC5nZXQoJy9waW5nJyk7XG4gKiAgIH07XG4gKiAgICRwcm92aWRlLnNlcnZpY2UoJ3BpbmcnLCBQaW5nKTtcbiAqIGBgYFxuICogWW91IHdvdWxkIHRoZW4gaW5qZWN0IGFuZCB1c2UgdGhpcyBzZXJ2aWNlIGxpa2UgdGhpczpcbiAqIGBgYGpzXG4gKiAgIHNvbWVNb2R1bGUuY29udHJvbGxlcignQ3RybCcsIFsncGluZycsIGZ1bmN0aW9uKHBpbmcpIHtcbiAqICAgICBwaW5nLnNlbmQoKTtcbiAqICAgfV0pO1xuICogYGBgXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRwcm92aWRlI3ZhbHVlXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBSZWdpc3RlciBhICoqdmFsdWUgc2VydmljZSoqIHdpdGggdGhlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LCBzdWNoIGFzIGEgc3RyaW5nLCBhXG4gKiBudW1iZXIsIGFuIGFycmF5LCBhbiBvYmplY3Qgb3IgYSBmdW5jdGlvbi4gIFRoaXMgaXMgc2hvcnQgZm9yIHJlZ2lzdGVyaW5nIGEgc2VydmljZSB3aGVyZSBpdHNcbiAqIHByb3ZpZGVyJ3MgYCRnZXRgIHByb3BlcnR5IGlzIGEgZmFjdG9yeSBmdW5jdGlvbiB0aGF0IHRha2VzIG5vIGFyZ3VtZW50cyBhbmQgcmV0dXJucyB0aGUgKip2YWx1ZVxuICogc2VydmljZSoqLlxuICpcbiAqIFZhbHVlIHNlcnZpY2VzIGFyZSBzaW1pbGFyIHRvIGNvbnN0YW50IHNlcnZpY2VzLCBleGNlcHQgdGhhdCB0aGV5IGNhbm5vdCBiZSBpbmplY3RlZCBpbnRvIGFcbiAqIG1vZHVsZSBjb25maWd1cmF0aW9uIGZ1bmN0aW9uIChzZWUge0BsaW5rIGFuZ3VsYXIuTW9kdWxlI2NvbmZpZ30pIGJ1dCB0aGV5IGNhbiBiZSBvdmVycmlkZGVuIGJ5XG4gKiBhbiBBbmd1bGFyXG4gKiB7QGxpbmsgYXV0by4kcHJvdmlkZSNkZWNvcmF0b3IgZGVjb3JhdG9yfS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgaW5zdGFuY2UuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IHJlZ2lzdGVyZWQgcHJvdmlkZXIgaW5zdGFuY2VcbiAqXG4gKiBAZXhhbXBsZVxuICogSGVyZSBhcmUgc29tZSBleGFtcGxlcyBvZiBjcmVhdGluZyB2YWx1ZSBzZXJ2aWNlcy5cbiAqIGBgYGpzXG4gKiAgICRwcm92aWRlLnZhbHVlKCdBRE1JTl9VU0VSJywgJ2FkbWluJyk7XG4gKlxuICogICAkcHJvdmlkZS52YWx1ZSgnUm9sZUxvb2t1cCcsIHsgYWRtaW46IDAsIHdyaXRlcjogMSwgcmVhZGVyOiAyIH0pO1xuICpcbiAqICAgJHByb3ZpZGUudmFsdWUoJ2hhbGZPZicsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gKiAgICAgcmV0dXJuIHZhbHVlIC8gMjtcbiAqICAgfSk7XG4gKiBgYGBcbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJHByb3ZpZGUjY29uc3RhbnRcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFJlZ2lzdGVyIGEgKipjb25zdGFudCBzZXJ2aWNlKiosIHN1Y2ggYXMgYSBzdHJpbmcsIGEgbnVtYmVyLCBhbiBhcnJheSwgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb24sXG4gKiB3aXRoIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfS4gVW5saWtlIHtAbGluayBhdXRvLiRwcm92aWRlI3ZhbHVlIHZhbHVlfSBpdCBjYW4gYmVcbiAqIGluamVjdGVkIGludG8gYSBtb2R1bGUgY29uZmlndXJhdGlvbiBmdW5jdGlvbiAoc2VlIHtAbGluayBhbmd1bGFyLk1vZHVsZSNjb25maWd9KSBhbmQgaXQgY2Fubm90XG4gKiBiZSBvdmVycmlkZGVuIGJ5IGFuIEFuZ3VsYXIge0BsaW5rIGF1dG8uJHByb3ZpZGUjZGVjb3JhdG9yIGRlY29yYXRvcn0uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGNvbnN0YW50LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgY29uc3RhbnQgdmFsdWUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSByZWdpc3RlcmVkIGluc3RhbmNlXG4gKlxuICogQGV4YW1wbGVcbiAqIEhlcmUgYSBzb21lIGV4YW1wbGVzIG9mIGNyZWF0aW5nIGNvbnN0YW50czpcbiAqIGBgYGpzXG4gKiAgICRwcm92aWRlLmNvbnN0YW50KCdTSEFSRF9IRUlHSFQnLCAzMDYpO1xuICpcbiAqICAgJHByb3ZpZGUuY29uc3RhbnQoJ01ZX0NPTE9VUlMnLCBbJ3JlZCcsICdibHVlJywgJ2dyZXknXSk7XG4gKlxuICogICAkcHJvdmlkZS5jb25zdGFudCgnZG91YmxlJywgZnVuY3Rpb24odmFsdWUpIHtcbiAqICAgICByZXR1cm4gdmFsdWUgKiAyO1xuICogICB9KTtcbiAqIGBgYFxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkcHJvdmlkZSNkZWNvcmF0b3JcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFJlZ2lzdGVyIGEgKipzZXJ2aWNlIGRlY29yYXRvcioqIHdpdGggdGhlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LiBBIHNlcnZpY2UgZGVjb3JhdG9yXG4gKiBpbnRlcmNlcHRzIHRoZSBjcmVhdGlvbiBvZiBhIHNlcnZpY2UsIGFsbG93aW5nIGl0IHRvIG92ZXJyaWRlIG9yIG1vZGlmeSB0aGUgYmVoYXZpb3VyIG9mIHRoZVxuICogc2VydmljZS4gVGhlIG9iamVjdCByZXR1cm5lZCBieSB0aGUgZGVjb3JhdG9yIG1heSBiZSB0aGUgb3JpZ2luYWwgc2VydmljZSwgb3IgYSBuZXcgc2VydmljZVxuICogb2JqZWN0IHdoaWNoIHJlcGxhY2VzIG9yIHdyYXBzIGFuZCBkZWxlZ2F0ZXMgdG8gdGhlIG9yaWdpbmFsIHNlcnZpY2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIHNlcnZpY2UgdG8gZGVjb3JhdGUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGRlY29yYXRvciBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgaW52b2tlZCB3aGVuIHRoZSBzZXJ2aWNlIG5lZWRzIHRvIGJlXG4gKiAgICBpbnN0YW50aWF0ZWQgYW5kIHNob3VsZCByZXR1cm4gdGhlIGRlY29yYXRlZCBzZXJ2aWNlIGluc3RhbmNlLiBUaGUgZnVuY3Rpb24gaXMgY2FsbGVkIHVzaW5nXG4gKiAgICB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yI2ludm9rZSBpbmplY3Rvci5pbnZva2V9IG1ldGhvZCBhbmQgaXMgdGhlcmVmb3JlIGZ1bGx5IGluamVjdGFibGUuXG4gKiAgICBMb2NhbCBpbmplY3Rpb24gYXJndW1lbnRzOlxuICpcbiAqICAgICogYCRkZWxlZ2F0ZWAgLSBUaGUgb3JpZ2luYWwgc2VydmljZSBpbnN0YW5jZSwgd2hpY2ggY2FuIGJlIG1vbmtleSBwYXRjaGVkLCBjb25maWd1cmVkLFxuICogICAgICBkZWNvcmF0ZWQgb3IgZGVsZWdhdGVkIHRvLlxuICpcbiAqIEBleGFtcGxlXG4gKiBIZXJlIHdlIGRlY29yYXRlIHRoZSB7QGxpbmsgbmcuJGxvZyAkbG9nfSBzZXJ2aWNlIHRvIGNvbnZlcnQgd2FybmluZ3MgdG8gZXJyb3JzIGJ5IGludGVyY2VwdGluZ1xuICogY2FsbHMgdG8ge0BsaW5rIG5nLiRsb2cjZXJyb3IgJGxvZy53YXJuKCl9LlxuICogYGBganNcbiAqICAgJHByb3ZpZGUuZGVjb3JhdG9yKCckbG9nJywgWyckZGVsZWdhdGUnLCBmdW5jdGlvbigkZGVsZWdhdGUpIHtcbiAqICAgICAkZGVsZWdhdGUud2FybiA9ICRkZWxlZ2F0ZS5lcnJvcjtcbiAqICAgICByZXR1cm4gJGRlbGVnYXRlO1xuICogICB9XSk7XG4gKiBgYGBcbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUluamVjdG9yKG1vZHVsZXNUb0xvYWQsIHN0cmljdERpKSB7XG4gIHN0cmljdERpID0gKHN0cmljdERpID09PSB0cnVlKTtcbiAgdmFyIElOU1RBTlRJQVRJTkcgPSB7fSxcbiAgICAgIHByb3ZpZGVyU3VmZml4ID0gJ1Byb3ZpZGVyJyxcbiAgICAgIHBhdGggPSBbXSxcbiAgICAgIGxvYWRlZE1vZHVsZXMgPSBuZXcgSGFzaE1hcChbXSwgdHJ1ZSksXG4gICAgICBwcm92aWRlckNhY2hlID0ge1xuICAgICAgICAkcHJvdmlkZToge1xuICAgICAgICAgICAgcHJvdmlkZXI6IHN1cHBvcnRPYmplY3QocHJvdmlkZXIpLFxuICAgICAgICAgICAgZmFjdG9yeTogc3VwcG9ydE9iamVjdChmYWN0b3J5KSxcbiAgICAgICAgICAgIHNlcnZpY2U6IHN1cHBvcnRPYmplY3Qoc2VydmljZSksXG4gICAgICAgICAgICB2YWx1ZTogc3VwcG9ydE9iamVjdCh2YWx1ZSksXG4gICAgICAgICAgICBjb25zdGFudDogc3VwcG9ydE9iamVjdChjb25zdGFudCksXG4gICAgICAgICAgICBkZWNvcmF0b3I6IGRlY29yYXRvclxuICAgICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBwcm92aWRlckluamVjdG9yID0gKHByb3ZpZGVyQ2FjaGUuJGluamVjdG9yID1cbiAgICAgICAgICBjcmVhdGVJbnRlcm5hbEluamVjdG9yKHByb3ZpZGVyQ2FjaGUsIGZ1bmN0aW9uKHNlcnZpY2VOYW1lLCBjYWxsZXIpIHtcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzU3RyaW5nKGNhbGxlcikpIHtcbiAgICAgICAgICAgICAgcGF0aC5wdXNoKGNhbGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ3VucHInLCBcIlVua25vd24gcHJvdmlkZXI6IHswfVwiLCBwYXRoLmpvaW4oJyA8LSAnKSk7XG4gICAgICAgICAgfSkpLFxuICAgICAgaW5zdGFuY2VDYWNoZSA9IHt9LFxuICAgICAgaW5zdGFuY2VJbmplY3RvciA9IChpbnN0YW5jZUNhY2hlLiRpbmplY3RvciA9XG4gICAgICAgICAgY3JlYXRlSW50ZXJuYWxJbmplY3RvcihpbnN0YW5jZUNhY2hlLCBmdW5jdGlvbihzZXJ2aWNlTmFtZSwgY2FsbGVyKSB7XG4gICAgICAgICAgICB2YXIgcHJvdmlkZXIgPSBwcm92aWRlckluamVjdG9yLmdldChzZXJ2aWNlTmFtZSArIHByb3ZpZGVyU3VmZml4LCBjYWxsZXIpO1xuICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlSW5qZWN0b3IuaW52b2tlKHByb3ZpZGVyLiRnZXQsIHByb3ZpZGVyLCB1bmRlZmluZWQsIHNlcnZpY2VOYW1lKTtcbiAgICAgICAgICB9KSk7XG5cblxuICBmb3JFYWNoKGxvYWRNb2R1bGVzKG1vZHVsZXNUb0xvYWQpLCBmdW5jdGlvbihmbikgeyBpbnN0YW5jZUluamVjdG9yLmludm9rZShmbiB8fCBub29wKTsgfSk7XG5cbiAgcmV0dXJuIGluc3RhbmNlSW5qZWN0b3I7XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vICRwcm92aWRlclxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICBmdW5jdGlvbiBzdXBwb3J0T2JqZWN0KGRlbGVnYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgIGlmIChpc09iamVjdChrZXkpKSB7XG4gICAgICAgIGZvckVhY2goa2V5LCByZXZlcnNlUGFyYW1zKGRlbGVnYXRlKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVsZWdhdGUoa2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb3ZpZGVyKG5hbWUsIHByb3ZpZGVyXykge1xuICAgIGFzc2VydE5vdEhhc093blByb3BlcnR5KG5hbWUsICdzZXJ2aWNlJyk7XG4gICAgaWYgKGlzRnVuY3Rpb24ocHJvdmlkZXJfKSB8fCBpc0FycmF5KHByb3ZpZGVyXykpIHtcbiAgICAgIHByb3ZpZGVyXyA9IHByb3ZpZGVySW5qZWN0b3IuaW5zdGFudGlhdGUocHJvdmlkZXJfKTtcbiAgICB9XG4gICAgaWYgKCFwcm92aWRlcl8uJGdldCkge1xuICAgICAgdGhyb3cgJGluamVjdG9yTWluRXJyKCdwZ2V0JywgXCJQcm92aWRlciAnezB9JyBtdXN0IGRlZmluZSAkZ2V0IGZhY3RvcnkgbWV0aG9kLlwiLCBuYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb3ZpZGVyQ2FjaGVbbmFtZSArIHByb3ZpZGVyU3VmZml4XSA9IHByb3ZpZGVyXztcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuZm9yY2VSZXR1cm5WYWx1ZShuYW1lLCBmYWN0b3J5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGVuZm9yY2VkUmV0dXJuVmFsdWUoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gaW5zdGFuY2VJbmplY3Rvci5pbnZva2UoZmFjdG9yeSwgdGhpcyk7XG4gICAgICBpZiAoaXNVbmRlZmluZWQocmVzdWx0KSkge1xuICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ3VuZGVmJywgXCJQcm92aWRlciAnezB9JyBtdXN0IHJldHVybiBhIHZhbHVlIGZyb20gJGdldCBmYWN0b3J5IG1ldGhvZC5cIiwgbmFtZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBmYWN0b3J5KG5hbWUsIGZhY3RvcnlGbiwgZW5mb3JjZSkge1xuICAgIHJldHVybiBwcm92aWRlcihuYW1lLCB7XG4gICAgICAkZ2V0OiBlbmZvcmNlICE9PSBmYWxzZSA/IGVuZm9yY2VSZXR1cm5WYWx1ZShuYW1lLCBmYWN0b3J5Rm4pIDogZmFjdG9yeUZuXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXJ2aWNlKG5hbWUsIGNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkobmFtZSwgWyckaW5qZWN0b3InLCBmdW5jdGlvbigkaW5qZWN0b3IpIHtcbiAgICAgIHJldHVybiAkaW5qZWN0b3IuaW5zdGFudGlhdGUoY29uc3RydWN0b3IpO1xuICAgIH1dKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHZhbHVlKG5hbWUsIHZhbCkgeyByZXR1cm4gZmFjdG9yeShuYW1lLCB2YWx1ZUZuKHZhbCksIGZhbHNlKTsgfVxuXG4gIGZ1bmN0aW9uIGNvbnN0YW50KG5hbWUsIHZhbHVlKSB7XG4gICAgYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkobmFtZSwgJ2NvbnN0YW50Jyk7XG4gICAgcHJvdmlkZXJDYWNoZVtuYW1lXSA9IHZhbHVlO1xuICAgIGluc3RhbmNlQ2FjaGVbbmFtZV0gPSB2YWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlY29yYXRvcihzZXJ2aWNlTmFtZSwgZGVjb3JGbikge1xuICAgIHZhciBvcmlnUHJvdmlkZXIgPSBwcm92aWRlckluamVjdG9yLmdldChzZXJ2aWNlTmFtZSArIHByb3ZpZGVyU3VmZml4KSxcbiAgICAgICAgb3JpZyRnZXQgPSBvcmlnUHJvdmlkZXIuJGdldDtcblxuICAgIG9yaWdQcm92aWRlci4kZ2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgb3JpZ0luc3RhbmNlID0gaW5zdGFuY2VJbmplY3Rvci5pbnZva2Uob3JpZyRnZXQsIG9yaWdQcm92aWRlcik7XG4gICAgICByZXR1cm4gaW5zdGFuY2VJbmplY3Rvci5pbnZva2UoZGVjb3JGbiwgbnVsbCwgeyRkZWxlZ2F0ZTogb3JpZ0luc3RhbmNlfSk7XG4gICAgfTtcbiAgfVxuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBNb2R1bGUgTG9hZGluZ1xuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgZnVuY3Rpb24gbG9hZE1vZHVsZXMobW9kdWxlc1RvTG9hZCkge1xuICAgIHZhciBydW5CbG9ja3MgPSBbXSwgbW9kdWxlRm47XG4gICAgZm9yRWFjaChtb2R1bGVzVG9Mb2FkLCBmdW5jdGlvbihtb2R1bGUpIHtcbiAgICAgIGlmIChsb2FkZWRNb2R1bGVzLmdldChtb2R1bGUpKSByZXR1cm47XG4gICAgICBsb2FkZWRNb2R1bGVzLnB1dChtb2R1bGUsIHRydWUpO1xuXG4gICAgICBmdW5jdGlvbiBydW5JbnZva2VRdWV1ZShxdWV1ZSkge1xuICAgICAgICB2YXIgaSwgaWk7XG4gICAgICAgIGZvciAoaSA9IDAsIGlpID0gcXVldWUubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgIHZhciBpbnZva2VBcmdzID0gcXVldWVbaV0sXG4gICAgICAgICAgICAgIHByb3ZpZGVyID0gcHJvdmlkZXJJbmplY3Rvci5nZXQoaW52b2tlQXJnc1swXSk7XG5cbiAgICAgICAgICBwcm92aWRlcltpbnZva2VBcmdzWzFdXS5hcHBseShwcm92aWRlciwgaW52b2tlQXJnc1syXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGlzU3RyaW5nKG1vZHVsZSkpIHtcbiAgICAgICAgICBtb2R1bGVGbiA9IGFuZ3VsYXJNb2R1bGUobW9kdWxlKTtcbiAgICAgICAgICBydW5CbG9ja3MgPSBydW5CbG9ja3MuY29uY2F0KGxvYWRNb2R1bGVzKG1vZHVsZUZuLnJlcXVpcmVzKSkuY29uY2F0KG1vZHVsZUZuLl9ydW5CbG9ja3MpO1xuICAgICAgICAgIHJ1bkludm9rZVF1ZXVlKG1vZHVsZUZuLl9pbnZva2VRdWV1ZSk7XG4gICAgICAgICAgcnVuSW52b2tlUXVldWUobW9kdWxlRm4uX2NvbmZpZ0Jsb2Nrcyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvbihtb2R1bGUpKSB7XG4gICAgICAgICAgICBydW5CbG9ja3MucHVzaChwcm92aWRlckluamVjdG9yLmludm9rZShtb2R1bGUpKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KG1vZHVsZSkpIHtcbiAgICAgICAgICAgIHJ1bkJsb2Nrcy5wdXNoKHByb3ZpZGVySW5qZWN0b3IuaW52b2tlKG1vZHVsZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFzc2VydEFyZ0ZuKG1vZHVsZSwgJ21vZHVsZScpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChpc0FycmF5KG1vZHVsZSkpIHtcbiAgICAgICAgICBtb2R1bGUgPSBtb2R1bGVbbW9kdWxlLmxlbmd0aCAtIDFdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlLm1lc3NhZ2UgJiYgZS5zdGFjayAmJiBlLnN0YWNrLmluZGV4T2YoZS5tZXNzYWdlKSA9PSAtMSkge1xuICAgICAgICAgIC8vIFNhZmFyaSAmIEZGJ3Mgc3RhY2sgdHJhY2VzIGRvbid0IGNvbnRhaW4gZXJyb3IubWVzc2FnZSBjb250ZW50XG4gICAgICAgICAgLy8gdW5saWtlIHRob3NlIG9mIENocm9tZSBhbmQgSUVcbiAgICAgICAgICAvLyBTbyBpZiBzdGFjayBkb2Vzbid0IGNvbnRhaW4gbWVzc2FnZSwgd2UgY3JlYXRlIGEgbmV3IHN0cmluZyB0aGF0IGNvbnRhaW5zIGJvdGguXG4gICAgICAgICAgLy8gU2luY2UgZXJyb3Iuc3RhY2sgaXMgcmVhZC1vbmx5IGluIFNhZmFyaSwgSSdtIG92ZXJyaWRpbmcgZSBhbmQgbm90IGUuc3RhY2sgaGVyZS5cbiAgICAgICAgICAvKiBqc2hpbnQgLVcwMjIgKi9cbiAgICAgICAgICBlID0gZS5tZXNzYWdlICsgJ1xcbicgKyBlLnN0YWNrO1xuICAgICAgICB9XG4gICAgICAgIHRocm93ICRpbmplY3Rvck1pbkVycignbW9kdWxlcnInLCBcIkZhaWxlZCB0byBpbnN0YW50aWF0ZSBtb2R1bGUgezB9IGR1ZSB0bzpcXG57MX1cIixcbiAgICAgICAgICAgICAgICAgIG1vZHVsZSwgZS5zdGFjayB8fCBlLm1lc3NhZ2UgfHwgZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJ1bkJsb2NrcztcbiAgfVxuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBpbnRlcm5hbCBJbmplY3RvclxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICBmdW5jdGlvbiBjcmVhdGVJbnRlcm5hbEluamVjdG9yKGNhY2hlLCBmYWN0b3J5KSB7XG5cbiAgICBmdW5jdGlvbiBnZXRTZXJ2aWNlKHNlcnZpY2VOYW1lLCBjYWxsZXIpIHtcbiAgICAgIGlmIChjYWNoZS5oYXNPd25Qcm9wZXJ0eShzZXJ2aWNlTmFtZSkpIHtcbiAgICAgICAgaWYgKGNhY2hlW3NlcnZpY2VOYW1lXSA9PT0gSU5TVEFOVElBVElORykge1xuICAgICAgICAgIHRocm93ICRpbmplY3Rvck1pbkVycignY2RlcCcsICdDaXJjdWxhciBkZXBlbmRlbmN5IGZvdW5kOiB7MH0nLFxuICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlTmFtZSArICcgPC0gJyArIHBhdGguam9pbignIDwtICcpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2FjaGVbc2VydmljZU5hbWVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBwYXRoLnVuc2hpZnQoc2VydmljZU5hbWUpO1xuICAgICAgICAgIGNhY2hlW3NlcnZpY2VOYW1lXSA9IElOU1RBTlRJQVRJTkc7XG4gICAgICAgICAgcmV0dXJuIGNhY2hlW3NlcnZpY2VOYW1lXSA9IGZhY3Rvcnkoc2VydmljZU5hbWUsIGNhbGxlcik7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGlmIChjYWNoZVtzZXJ2aWNlTmFtZV0gPT09IElOU1RBTlRJQVRJTkcpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBjYWNoZVtzZXJ2aWNlTmFtZV07XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBwYXRoLnNoaWZ0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnZva2UoZm4sIHNlbGYsIGxvY2Fscywgc2VydmljZU5hbWUpIHtcbiAgICAgIGlmICh0eXBlb2YgbG9jYWxzID09PSAnc3RyaW5nJykge1xuICAgICAgICBzZXJ2aWNlTmFtZSA9IGxvY2FscztcbiAgICAgICAgbG9jYWxzID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIGFyZ3MgPSBbXSxcbiAgICAgICAgICAkaW5qZWN0ID0gY3JlYXRlSW5qZWN0b3IuJCRhbm5vdGF0ZShmbiwgc3RyaWN0RGksIHNlcnZpY2VOYW1lKSxcbiAgICAgICAgICBsZW5ndGgsIGksXG4gICAgICAgICAga2V5O1xuXG4gICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSAkaW5qZWN0Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGtleSA9ICRpbmplY3RbaV07XG4gICAgICAgIGlmICh0eXBlb2Yga2V5ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgIHRocm93ICRpbmplY3Rvck1pbkVycignaXRrbicsXG4gICAgICAgICAgICAgICAgICAnSW5jb3JyZWN0IGluamVjdGlvbiB0b2tlbiEgRXhwZWN0ZWQgc2VydmljZSBuYW1lIGFzIHN0cmluZywgZ290IHswfScsIGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgYXJncy5wdXNoKFxuICAgICAgICAgIGxvY2FscyAmJiBsb2NhbHMuaGFzT3duUHJvcGVydHkoa2V5KVxuICAgICAgICAgID8gbG9jYWxzW2tleV1cbiAgICAgICAgICA6IGdldFNlcnZpY2Uoa2V5LCBzZXJ2aWNlTmFtZSlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5KGZuKSkge1xuICAgICAgICBmbiA9IGZuW2xlbmd0aF07XG4gICAgICB9XG5cbiAgICAgIC8vIGh0dHA6Ly9qc3BlcmYuY29tL2FuZ3VsYXJqcy1pbnZva2UtYXBwbHktdnMtc3dpdGNoXG4gICAgICAvLyAjNTM4OFxuICAgICAgcmV0dXJuIGZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbnRpYXRlKFR5cGUsIGxvY2Fscywgc2VydmljZU5hbWUpIHtcbiAgICAgIC8vIENoZWNrIGlmIFR5cGUgaXMgYW5ub3RhdGVkIGFuZCB1c2UganVzdCB0aGUgZ2l2ZW4gZnVuY3Rpb24gYXQgbi0xIGFzIHBhcmFtZXRlclxuICAgICAgLy8gZS5nLiBzb21lTW9kdWxlLmZhY3RvcnkoJ2dyZWV0ZXInLCBbJyR3aW5kb3cnLCBmdW5jdGlvbihyZW5hbWVkJHdpbmRvdykge31dKTtcbiAgICAgIC8vIE9iamVjdCBjcmVhdGlvbjogaHR0cDovL2pzcGVyZi5jb20vY3JlYXRlLWNvbnN0cnVjdG9yLzJcbiAgICAgIHZhciBpbnN0YW5jZSA9IE9iamVjdC5jcmVhdGUoKGlzQXJyYXkoVHlwZSkgPyBUeXBlW1R5cGUubGVuZ3RoIC0gMV0gOiBUeXBlKS5wcm90b3R5cGUgfHwgbnVsbCk7XG4gICAgICB2YXIgcmV0dXJuZWRWYWx1ZSA9IGludm9rZShUeXBlLCBpbnN0YW5jZSwgbG9jYWxzLCBzZXJ2aWNlTmFtZSk7XG5cbiAgICAgIHJldHVybiBpc09iamVjdChyZXR1cm5lZFZhbHVlKSB8fCBpc0Z1bmN0aW9uKHJldHVybmVkVmFsdWUpID8gcmV0dXJuZWRWYWx1ZSA6IGluc3RhbmNlO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBpbnZva2U6IGludm9rZSxcbiAgICAgIGluc3RhbnRpYXRlOiBpbnN0YW50aWF0ZSxcbiAgICAgIGdldDogZ2V0U2VydmljZSxcbiAgICAgIGFubm90YXRlOiBjcmVhdGVJbmplY3Rvci4kJGFubm90YXRlLFxuICAgICAgaGFzOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIHJldHVybiBwcm92aWRlckNhY2hlLmhhc093blByb3BlcnR5KG5hbWUgKyBwcm92aWRlclN1ZmZpeCkgfHwgY2FjaGUuaGFzT3duUHJvcGVydHkobmFtZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuXG5jcmVhdGVJbmplY3Rvci4kJGFubm90YXRlID0gYW5ub3RhdGU7XG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkYW5jaG9yU2Nyb2xsUHJvdmlkZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzZSBgJGFuY2hvclNjcm9sbFByb3ZpZGVyYCB0byBkaXNhYmxlIGF1dG9tYXRpYyBzY3JvbGxpbmcgd2hlbmV2ZXJcbiAqIHtAbGluayBuZy4kbG9jYXRpb24jaGFzaCAkbG9jYXRpb24uaGFzaCgpfSBjaGFuZ2VzLlxuICovXG5mdW5jdGlvbiAkQW5jaG9yU2Nyb2xsUHJvdmlkZXIoKSB7XG5cbiAgdmFyIGF1dG9TY3JvbGxpbmdFbmFibGVkID0gdHJ1ZTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkYW5jaG9yU2Nyb2xsUHJvdmlkZXIjZGlzYWJsZUF1dG9TY3JvbGxpbmdcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEJ5IGRlZmF1bHQsIHtAbGluayBuZy4kYW5jaG9yU2Nyb2xsICRhbmNob3JTY3JvbGwoKX0gd2lsbCBhdXRvbWF0aWNhbGx5IGRldGVjdCBjaGFuZ2VzIHRvXG4gICAqIHtAbGluayBuZy4kbG9jYXRpb24jaGFzaCAkbG9jYXRpb24uaGFzaCgpfSBhbmQgc2Nyb2xsIHRvIHRoZSBlbGVtZW50IG1hdGNoaW5nIHRoZSBuZXcgaGFzaC48YnIgLz5cbiAgICogVXNlIHRoaXMgbWV0aG9kIHRvIGRpc2FibGUgYXV0b21hdGljIHNjcm9sbGluZy5cbiAgICpcbiAgICogSWYgYXV0b21hdGljIHNjcm9sbGluZyBpcyBkaXNhYmxlZCwgb25lIG11c3QgZXhwbGljaXRseSBjYWxsXG4gICAqIHtAbGluayBuZy4kYW5jaG9yU2Nyb2xsICRhbmNob3JTY3JvbGwoKX0gaW4gb3JkZXIgdG8gc2Nyb2xsIHRvIHRoZSBlbGVtZW50IHJlbGF0ZWQgdG8gdGhlXG4gICAqIGN1cnJlbnQgaGFzaC5cbiAgICovXG4gIHRoaXMuZGlzYWJsZUF1dG9TY3JvbGxpbmcgPSBmdW5jdGlvbigpIHtcbiAgICBhdXRvU2Nyb2xsaW5nRW5hYmxlZCA9IGZhbHNlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2Mgc2VydmljZVxuICAgKiBAbmFtZSAkYW5jaG9yU2Nyb2xsXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqIEByZXF1aXJlcyAkd2luZG93XG4gICAqIEByZXF1aXJlcyAkbG9jYXRpb25cbiAgICogQHJlcXVpcmVzICRyb290U2NvcGVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFdoZW4gY2FsbGVkLCBpdCBjaGVja3MgdGhlIGN1cnJlbnQgdmFsdWUgb2Yge0BsaW5rIG5nLiRsb2NhdGlvbiNoYXNoICRsb2NhdGlvbi5oYXNoKCl9IGFuZFxuICAgKiBzY3JvbGxzIHRvIHRoZSByZWxhdGVkIGVsZW1lbnQsIGFjY29yZGluZyB0byB0aGUgcnVsZXMgc3BlY2lmaWVkIGluIHRoZVxuICAgKiBbSHRtbDUgc3BlY10oaHR0cDovL2Rldi53My5vcmcvaHRtbDUvc3BlYy9PdmVydmlldy5odG1sI3RoZS1pbmRpY2F0ZWQtcGFydC1vZi10aGUtZG9jdW1lbnQpLlxuICAgKlxuICAgKiBJdCBhbHNvIHdhdGNoZXMgdGhlIHtAbGluayBuZy4kbG9jYXRpb24jaGFzaCAkbG9jYXRpb24uaGFzaCgpfSBhbmQgYXV0b21hdGljYWxseSBzY3JvbGxzIHRvXG4gICAqIG1hdGNoIGFueSBhbmNob3Igd2hlbmV2ZXIgaXQgY2hhbmdlcy4gVGhpcyBjYW4gYmUgZGlzYWJsZWQgYnkgY2FsbGluZ1xuICAgKiB7QGxpbmsgbmcuJGFuY2hvclNjcm9sbFByb3ZpZGVyI2Rpc2FibGVBdXRvU2Nyb2xsaW5nICRhbmNob3JTY3JvbGxQcm92aWRlci5kaXNhYmxlQXV0b1Njcm9sbGluZygpfS5cbiAgICpcbiAgICogQWRkaXRpb25hbGx5LCB5b3UgY2FuIHVzZSBpdHMge0BsaW5rIG5nLiRhbmNob3JTY3JvbGwjeU9mZnNldCB5T2Zmc2V0fSBwcm9wZXJ0eSB0byBzcGVjaWZ5IGFcbiAgICogdmVydGljYWwgc2Nyb2xsLW9mZnNldCAoZWl0aGVyIGZpeGVkIG9yIGR5bmFtaWMpLlxuICAgKlxuICAgKiBAcHJvcGVydHkgeyhudW1iZXJ8ZnVuY3Rpb258anFMaXRlKX0geU9mZnNldFxuICAgKiBJZiBzZXQsIHNwZWNpZmllcyBhIHZlcnRpY2FsIHNjcm9sbC1vZmZzZXQuIFRoaXMgaXMgb2Z0ZW4gdXNlZnVsIHdoZW4gdGhlcmUgYXJlIGZpeGVkXG4gICAqIHBvc2l0aW9uZWQgZWxlbWVudHMgYXQgdGhlIHRvcCBvZiB0aGUgcGFnZSwgc3VjaCBhcyBuYXZiYXJzLCBoZWFkZXJzIGV0Yy5cbiAgICpcbiAgICogYHlPZmZzZXRgIGNhbiBiZSBzcGVjaWZpZWQgaW4gdmFyaW91cyB3YXlzOlxuICAgKiAtICoqbnVtYmVyKio6IEEgZml4ZWQgbnVtYmVyIG9mIHBpeGVscyB0byBiZSB1c2VkIGFzIG9mZnNldC48YnIgLz48YnIgLz5cbiAgICogLSAqKmZ1bmN0aW9uKio6IEEgZ2V0dGVyIGZ1bmN0aW9uIGNhbGxlZCBldmVyeXRpbWUgYCRhbmNob3JTY3JvbGwoKWAgaXMgZXhlY3V0ZWQuIE11c3QgcmV0dXJuXG4gICAqICAgYSBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSBvZmZzZXQgKGluIHBpeGVscykuPGJyIC8+PGJyIC8+XG4gICAqIC0gKipqcUxpdGUqKjogQSBqcUxpdGUvalF1ZXJ5IGVsZW1lbnQgdG8gYmUgdXNlZCBmb3Igc3BlY2lmeWluZyB0aGUgb2Zmc2V0LiBUaGUgZGlzdGFuY2UgZnJvbVxuICAgKiAgIHRoZSB0b3Agb2YgdGhlIHBhZ2UgdG8gdGhlIGVsZW1lbnQncyBib3R0b20gd2lsbCBiZSB1c2VkIGFzIG9mZnNldC48YnIgLz5cbiAgICogICAqKk5vdGUqKjogVGhlIGVsZW1lbnQgd2lsbCBiZSB0YWtlbiBpbnRvIGFjY291bnQgb25seSBhcyBsb25nIGFzIGl0cyBgcG9zaXRpb25gIGlzIHNldCB0b1xuICAgKiAgIGBmaXhlZGAuIFRoaXMgb3B0aW9uIGlzIHVzZWZ1bCwgd2hlbiBkZWFsaW5nIHdpdGggcmVzcG9uc2l2ZSBuYXZiYXJzL2hlYWRlcnMgdGhhdCBhZGp1c3RcbiAgICogICB0aGVpciBoZWlnaHQgYW5kL29yIHBvc2l0aW9uaW5nIGFjY29yZGluZyB0byB0aGUgdmlld3BvcnQncyBzaXplLlxuICAgKlxuICAgKiA8YnIgLz5cbiAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAgICogSW4gb3JkZXIgZm9yIGB5T2Zmc2V0YCB0byB3b3JrIHByb3Blcmx5LCBzY3JvbGxpbmcgc2hvdWxkIHRha2UgcGxhY2Ugb24gdGhlIGRvY3VtZW50J3Mgcm9vdCBhbmRcbiAgICogbm90IHNvbWUgY2hpbGQgZWxlbWVudC5cbiAgICogPC9kaXY+XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgIDxleGFtcGxlIG1vZHVsZT1cImFuY2hvclNjcm9sbEV4YW1wbGVcIj5cbiAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPGRpdiBpZD1cInNjcm9sbEFyZWFcIiBuZy1jb250cm9sbGVyPVwiU2Nyb2xsQ29udHJvbGxlclwiPlxuICAgICAgICAgICA8YSBuZy1jbGljaz1cImdvdG9Cb3R0b20oKVwiPkdvIHRvIGJvdHRvbTwvYT5cbiAgICAgICAgICAgPGEgaWQ9XCJib3R0b21cIj48L2E+IFlvdSdyZSBhdCB0aGUgYm90dG9tIVxuICAgICAgICAgPC9kaXY+XG4gICAgICAgPC9maWxlPlxuICAgICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdhbmNob3JTY3JvbGxFeGFtcGxlJywgW10pXG4gICAgICAgICAgIC5jb250cm9sbGVyKCdTY3JvbGxDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGxvY2F0aW9uJywgJyRhbmNob3JTY3JvbGwnLFxuICAgICAgICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRsb2NhdGlvbiwgJGFuY2hvclNjcm9sbCkge1xuICAgICAgICAgICAgICAgJHNjb3BlLmdvdG9Cb3R0b20gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgLy8gc2V0IHRoZSBsb2NhdGlvbi5oYXNoIHRvIHRoZSBpZCBvZlxuICAgICAgICAgICAgICAgICAvLyB0aGUgZWxlbWVudCB5b3Ugd2lzaCB0byBzY3JvbGwgdG8uXG4gICAgICAgICAgICAgICAgICRsb2NhdGlvbi5oYXNoKCdib3R0b20nKTtcblxuICAgICAgICAgICAgICAgICAvLyBjYWxsICRhbmNob3JTY3JvbGwoKVxuICAgICAgICAgICAgICAgICAkYW5jaG9yU2Nyb2xsKCk7XG4gICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIH1dKTtcbiAgICAgICA8L2ZpbGU+XG4gICAgICAgPGZpbGUgbmFtZT1cInN0eWxlLmNzc1wiPlxuICAgICAgICAgI3Njcm9sbEFyZWEge1xuICAgICAgICAgICBoZWlnaHQ6IDI4MHB4O1xuICAgICAgICAgICBvdmVyZmxvdzogYXV0bztcbiAgICAgICAgIH1cblxuICAgICAgICAgI2JvdHRvbSB7XG4gICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICBtYXJnaW4tdG9wOiAyMDAwcHg7XG4gICAgICAgICB9XG4gICAgICAgPC9maWxlPlxuICAgICA8L2V4YW1wbGU+XG4gICAqXG4gICAqIDxociAvPlxuICAgKiBUaGUgZXhhbXBsZSBiZWxvdyBpbGx1c3RyYXRlcyB0aGUgdXNlIG9mIGEgdmVydGljYWwgc2Nyb2xsLW9mZnNldCAoc3BlY2lmaWVkIGFzIGEgZml4ZWQgdmFsdWUpLlxuICAgKiBTZWUge0BsaW5rIG5nLiRhbmNob3JTY3JvbGwjeU9mZnNldCAkYW5jaG9yU2Nyb2xsLnlPZmZzZXR9IGZvciBtb3JlIGRldGFpbHMuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgIDxleGFtcGxlIG1vZHVsZT1cImFuY2hvclNjcm9sbE9mZnNldEV4YW1wbGVcIj5cbiAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPGRpdiBjbGFzcz1cImZpeGVkLWhlYWRlclwiIG5nLWNvbnRyb2xsZXI9XCJoZWFkZXJDdHJsXCI+XG4gICAgICAgICAgIDxhIGhyZWY9XCJcIiBuZy1jbGljaz1cImdvdG9BbmNob3IoeClcIiBuZy1yZXBlYXQ9XCJ4IGluIFsxLDIsMyw0LDVdXCI+XG4gICAgICAgICAgICAgR28gdG8gYW5jaG9yIHt7eH19XG4gICAgICAgICAgIDwvYT5cbiAgICAgICAgIDwvZGl2PlxuICAgICAgICAgPGRpdiBpZD1cImFuY2hvcnt7eH19XCIgY2xhc3M9XCJhbmNob3JcIiBuZy1yZXBlYXQ9XCJ4IGluIFsxLDIsMyw0LDVdXCI+XG4gICAgICAgICAgIEFuY2hvciB7e3h9fSBvZiA1XG4gICAgICAgICA8L2Rpdj5cbiAgICAgICA8L2ZpbGU+XG4gICAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2FuY2hvclNjcm9sbE9mZnNldEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLnJ1bihbJyRhbmNob3JTY3JvbGwnLCBmdW5jdGlvbigkYW5jaG9yU2Nyb2xsKSB7XG4gICAgICAgICAgICAgJGFuY2hvclNjcm9sbC55T2Zmc2V0ID0gNTA7ICAgLy8gYWx3YXlzIHNjcm9sbCBieSA1MCBleHRyYSBwaXhlbHNcbiAgICAgICAgICAgfV0pXG4gICAgICAgICAgIC5jb250cm9sbGVyKCdoZWFkZXJDdHJsJywgWyckYW5jaG9yU2Nyb2xsJywgJyRsb2NhdGlvbicsICckc2NvcGUnLFxuICAgICAgICAgICAgIGZ1bmN0aW9uICgkYW5jaG9yU2Nyb2xsLCAkbG9jYXRpb24sICRzY29wZSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLmdvdG9BbmNob3IgPSBmdW5jdGlvbih4KSB7XG4gICAgICAgICAgICAgICAgIHZhciBuZXdIYXNoID0gJ2FuY2hvcicgKyB4O1xuICAgICAgICAgICAgICAgICBpZiAoJGxvY2F0aW9uLmhhc2goKSAhPT0gbmV3SGFzaCkge1xuICAgICAgICAgICAgICAgICAgIC8vIHNldCB0aGUgJGxvY2F0aW9uLmhhc2ggdG8gYG5ld0hhc2hgIGFuZFxuICAgICAgICAgICAgICAgICAgIC8vICRhbmNob3JTY3JvbGwgd2lsbCBhdXRvbWF0aWNhbGx5IHNjcm9sbCB0byBpdFxuICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5oYXNoKCdhbmNob3InICsgeCk7XG4gICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgLy8gY2FsbCAkYW5jaG9yU2Nyb2xsKCkgZXhwbGljaXRseSxcbiAgICAgICAgICAgICAgICAgICAvLyBzaW5jZSAkbG9jYXRpb24uaGFzaCBoYXNuJ3QgY2hhbmdlZFxuICAgICAgICAgICAgICAgICAgICRhbmNob3JTY3JvbGwoKTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgIF0pO1xuICAgICAgIDwvZmlsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgICBib2R5IHtcbiAgICAgICAgICAgcGFkZGluZy10b3A6IDUwcHg7XG4gICAgICAgICB9XG5cbiAgICAgICAgIC5hbmNob3Ige1xuICAgICAgICAgICBib3JkZXI6IDJweCBkYXNoZWQgRGFya09yY2hpZDtcbiAgICAgICAgICAgcGFkZGluZzogMTBweCAxMHB4IDIwMHB4IDEwcHg7XG4gICAgICAgICB9XG5cbiAgICAgICAgIC5maXhlZC1oZWFkZXIge1xuICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMik7XG4gICAgICAgICAgIGhlaWdodDogNTBweDtcbiAgICAgICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgICAgICB0b3A6IDA7IGxlZnQ6IDA7IHJpZ2h0OiAwO1xuICAgICAgICAgfVxuXG4gICAgICAgICAuZml4ZWQtaGVhZGVyID4gYSB7XG4gICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgbWFyZ2luOiA1cHggMTVweDtcbiAgICAgICAgIH1cbiAgICAgICA8L2ZpbGU+XG4gICAgIDwvZXhhbXBsZT5cbiAgICovXG4gIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsICckbG9jYXRpb24nLCAnJHJvb3RTY29wZScsIGZ1bmN0aW9uKCR3aW5kb3csICRsb2NhdGlvbiwgJHJvb3RTY29wZSkge1xuICAgIHZhciBkb2N1bWVudCA9ICR3aW5kb3cuZG9jdW1lbnQ7XG5cbiAgICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IGZpcnN0IGFuY2hvciBmcm9tIGEgTm9kZUxpc3RcbiAgICAvLyAodXNpbmcgYEFycmF5I3NvbWUoKWAgaW5zdGVhZCBvZiBgYW5ndWxhciNmb3JFYWNoKClgIHNpbmNlIGl0J3MgbW9yZSBwZXJmb3JtYW50XG4gICAgLy8gIGFuZCB3b3JraW5nIGluIGFsbCBzdXBwb3J0ZWQgYnJvd3NlcnMuKVxuICAgIGZ1bmN0aW9uIGdldEZpcnN0QW5jaG9yKGxpc3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBudWxsO1xuICAgICAgQXJyYXkucHJvdG90eXBlLnNvbWUuY2FsbChsaXN0LCBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgIGlmIChub2RlTmFtZV8oZWxlbWVudCkgPT09ICdhJykge1xuICAgICAgICAgIHJlc3VsdCA9IGVsZW1lbnQ7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRZT2Zmc2V0KCkge1xuXG4gICAgICB2YXIgb2Zmc2V0ID0gc2Nyb2xsLnlPZmZzZXQ7XG5cbiAgICAgIGlmIChpc0Z1bmN0aW9uKG9mZnNldCkpIHtcbiAgICAgICAgb2Zmc2V0ID0gb2Zmc2V0KCk7XG4gICAgICB9IGVsc2UgaWYgKGlzRWxlbWVudChvZmZzZXQpKSB7XG4gICAgICAgIHZhciBlbGVtID0gb2Zmc2V0WzBdO1xuICAgICAgICB2YXIgc3R5bGUgPSAkd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbSk7XG4gICAgICAgIGlmIChzdHlsZS5wb3NpdGlvbiAhPT0gJ2ZpeGVkJykge1xuICAgICAgICAgIG9mZnNldCA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b207XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIWlzTnVtYmVyKG9mZnNldCkpIHtcbiAgICAgICAgb2Zmc2V0ID0gMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9mZnNldDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzY3JvbGxUbyhlbGVtKSB7XG4gICAgICBpZiAoZWxlbSkge1xuICAgICAgICBlbGVtLnNjcm9sbEludG9WaWV3KCk7XG5cbiAgICAgICAgdmFyIG9mZnNldCA9IGdldFlPZmZzZXQoKTtcblxuICAgICAgICBpZiAob2Zmc2V0KSB7XG4gICAgICAgICAgLy8gYG9mZnNldGAgaXMgdGhlIG51bWJlciBvZiBwaXhlbHMgd2Ugc2hvdWxkIHNjcm9sbCBVUCBpbiBvcmRlciB0byBhbGlnbiBgZWxlbWAgcHJvcGVybHkuXG4gICAgICAgICAgLy8gVGhpcyBpcyB0cnVlIE9OTFkgaWYgdGhlIGNhbGwgdG8gYGVsZW0uc2Nyb2xsSW50b1ZpZXcoKWAgaW5pdGlhbGx5IGFsaWducyBgZWxlbWAgYXQgdGhlXG4gICAgICAgICAgLy8gdG9wIG9mIHRoZSB2aWV3cG9ydC5cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIElGIHRoZSBudW1iZXIgb2YgcGl4ZWxzIGZyb20gdGhlIHRvcCBvZiBgZWxlbWAgdG8gdGhlIGVuZCBvZiB0aGUgcGFnZSdzIGNvbnRlbnQgaXMgbGVzc1xuICAgICAgICAgIC8vIHRoYW4gdGhlIGhlaWdodCBvZiB0aGUgdmlld3BvcnQsIHRoZW4gYGVsZW0uc2Nyb2xsSW50b1ZpZXcoKWAgd2lsbCBhbGlnbiB0aGUgYGVsZW1gIHNvbWVcbiAgICAgICAgICAvLyB3YXkgZG93biB0aGUgcGFnZS5cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIFRoaXMgaXMgb2Z0ZW4gdGhlIGNhc2UgZm9yIGVsZW1lbnRzIG5lYXIgdGhlIGJvdHRvbSBvZiB0aGUgcGFnZS5cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIEluIHN1Y2ggY2FzZXMgd2UgZG8gbm90IG5lZWQgdG8gc2Nyb2xsIHRoZSB3aG9sZSBgb2Zmc2V0YCB1cCwganVzdCB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuXG4gICAgICAgICAgLy8gdGhlIHRvcCBvZiB0aGUgZWxlbWVudCBhbmQgdGhlIG9mZnNldCwgd2hpY2ggaXMgZW5vdWdoIHRvIGFsaWduIHRoZSB0b3Agb2YgYGVsZW1gIGF0IHRoZVxuICAgICAgICAgIC8vIGRlc2lyZWQgcG9zaXRpb24uXG4gICAgICAgICAgdmFyIGVsZW1Ub3AgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcbiAgICAgICAgICAkd2luZG93LnNjcm9sbEJ5KDAsIGVsZW1Ub3AgLSBvZmZzZXQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkd2luZG93LnNjcm9sbFRvKDAsIDApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjcm9sbCgpIHtcbiAgICAgIHZhciBoYXNoID0gJGxvY2F0aW9uLmhhc2goKSwgZWxtO1xuXG4gICAgICAvLyBlbXB0eSBoYXNoLCBzY3JvbGwgdG8gdGhlIHRvcCBvZiB0aGUgcGFnZVxuICAgICAgaWYgKCFoYXNoKSBzY3JvbGxUbyhudWxsKTtcblxuICAgICAgLy8gZWxlbWVudCB3aXRoIGdpdmVuIGlkXG4gICAgICBlbHNlIGlmICgoZWxtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaGFzaCkpKSBzY3JvbGxUbyhlbG0pO1xuXG4gICAgICAvLyBmaXJzdCBhbmNob3Igd2l0aCBnaXZlbiBuYW1lIDotRFxuICAgICAgZWxzZSBpZiAoKGVsbSA9IGdldEZpcnN0QW5jaG9yKGRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKGhhc2gpKSkpIHNjcm9sbFRvKGVsbSk7XG5cbiAgICAgIC8vIG5vIGVsZW1lbnQgYW5kIGhhc2ggPT0gJ3RvcCcsIHNjcm9sbCB0byB0aGUgdG9wIG9mIHRoZSBwYWdlXG4gICAgICBlbHNlIGlmIChoYXNoID09PSAndG9wJykgc2Nyb2xsVG8obnVsbCk7XG4gICAgfVxuXG4gICAgLy8gZG9lcyBub3Qgc2Nyb2xsIHdoZW4gdXNlciBjbGlja3Mgb24gYW5jaG9yIGxpbmsgdGhhdCBpcyBjdXJyZW50bHkgb25cbiAgICAvLyAobm8gdXJsIGNoYW5nZSwgbm8gJGxvY2F0aW9uLmhhc2goKSBjaGFuZ2UpLCBicm93c2VyIG5hdGl2ZSBkb2VzIHNjcm9sbFxuICAgIGlmIChhdXRvU2Nyb2xsaW5nRW5hYmxlZCkge1xuICAgICAgJHJvb3RTY29wZS4kd2F0Y2goZnVuY3Rpb24gYXV0b1Njcm9sbFdhdGNoKCkge3JldHVybiAkbG9jYXRpb24uaGFzaCgpO30sXG4gICAgICAgIGZ1bmN0aW9uIGF1dG9TY3JvbGxXYXRjaEFjdGlvbihuZXdWYWwsIG9sZFZhbCkge1xuICAgICAgICAgIC8vIHNraXAgdGhlIGluaXRpYWwgc2Nyb2xsIGlmICRsb2NhdGlvbi5oYXNoIGlzIGVtcHR5XG4gICAgICAgICAgaWYgKG5ld1ZhbCA9PT0gb2xkVmFsICYmIG5ld1ZhbCA9PT0gJycpIHJldHVybjtcblxuICAgICAgICAgIGpxTGl0ZURvY3VtZW50TG9hZGVkKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJHJvb3RTY29wZS4kZXZhbEFzeW5jKHNjcm9sbCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBzY3JvbGw7XG4gIH1dO1xufVxuXG52YXIgJGFuaW1hdGVNaW5FcnIgPSBtaW5FcnIoJyRhbmltYXRlJyk7XG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkYW5pbWF0ZVByb3ZpZGVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mICRhbmltYXRlIHRoYXQgZG9lc24ndCBwZXJmb3JtIGFueSBhbmltYXRpb25zLCBpbnN0ZWFkIGp1c3RcbiAqIHN5bmNocm9ub3VzbHkgcGVyZm9ybXMgRE9NXG4gKiB1cGRhdGVzIGFuZCBjYWxscyBkb25lKCkgY2FsbGJhY2tzLlxuICpcbiAqIEluIG9yZGVyIHRvIGVuYWJsZSBhbmltYXRpb25zIHRoZSBuZ0FuaW1hdGUgbW9kdWxlIGhhcyB0byBiZSBsb2FkZWQuXG4gKlxuICogVG8gc2VlIHRoZSBmdW5jdGlvbmFsIGltcGxlbWVudGF0aW9uIGNoZWNrIG91dCBzcmMvbmdBbmltYXRlL2FuaW1hdGUuanNcbiAqL1xudmFyICRBbmltYXRlUHJvdmlkZXIgPSBbJyRwcm92aWRlJywgZnVuY3Rpb24oJHByb3ZpZGUpIHtcblxuXG4gIHRoaXMuJCRzZWxlY3RvcnMgPSB7fTtcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRhbmltYXRlUHJvdmlkZXIjcmVnaXN0ZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJlZ2lzdGVycyBhIG5ldyBpbmplY3RhYmxlIGFuaW1hdGlvbiBmYWN0b3J5IGZ1bmN0aW9uLiBUaGUgZmFjdG9yeSBmdW5jdGlvbiBwcm9kdWNlcyB0aGVcbiAgICogYW5pbWF0aW9uIG9iamVjdCB3aGljaCBjb250YWlucyBjYWxsYmFjayBmdW5jdGlvbnMgZm9yIGVhY2ggZXZlbnQgdGhhdCBpcyBleHBlY3RlZCB0byBiZVxuICAgKiBhbmltYXRlZC5cbiAgICpcbiAgICogICAqIGBldmVudEZuYDogYGZ1bmN0aW9uKEVsZW1lbnQsIGRvbmVGdW5jdGlvbilgIFRoZSBlbGVtZW50IHRvIGFuaW1hdGUsIHRoZSBgZG9uZUZ1bmN0aW9uYFxuICAgKiAgIG11c3QgYmUgY2FsbGVkIG9uY2UgdGhlIGVsZW1lbnQgYW5pbWF0aW9uIGlzIGNvbXBsZXRlLiBJZiBhIGZ1bmN0aW9uIGlzIHJldHVybmVkIHRoZW4gdGhlXG4gICAqICAgYW5pbWF0aW9uIHNlcnZpY2Ugd2lsbCB1c2UgdGhpcyBmdW5jdGlvbiB0byBjYW5jZWwgdGhlIGFuaW1hdGlvbiB3aGVuZXZlciBhIGNhbmNlbCBldmVudCBpc1xuICAgKiAgIHRyaWdnZXJlZC5cbiAgICpcbiAgICpcbiAgICogYGBganNcbiAgICogICByZXR1cm4ge1xuICAgICAqICAgICBldmVudEZuIDogZnVuY3Rpb24oZWxlbWVudCwgZG9uZSkge1xuICAgICAqICAgICAgIC8vY29kZSB0byBydW4gdGhlIGFuaW1hdGlvblxuICAgICAqICAgICAgIC8vb25jZSBjb21wbGV0ZSwgdGhlbiBydW4gZG9uZSgpXG4gICAgICogICAgICAgcmV0dXJuIGZ1bmN0aW9uIGNhbmNlbGxhdGlvbkZ1bmN0aW9uKCkge1xuICAgICAqICAgICAgICAgLy9jb2RlIHRvIGNhbmNlbCB0aGUgYW5pbWF0aW9uXG4gICAgICogICAgICAgfVxuICAgICAqICAgICB9XG4gICAgICogICB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgYW5pbWF0aW9uLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmYWN0b3J5IFRoZSBmYWN0b3J5IGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBleGVjdXRlZCB0byByZXR1cm4gdGhlIGFuaW1hdGlvblxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdC5cbiAgICovXG4gIHRoaXMucmVnaXN0ZXIgPSBmdW5jdGlvbihuYW1lLCBmYWN0b3J5KSB7XG4gICAgdmFyIGtleSA9IG5hbWUgKyAnLWFuaW1hdGlvbic7XG4gICAgaWYgKG5hbWUgJiYgbmFtZS5jaGFyQXQoMCkgIT0gJy4nKSB0aHJvdyAkYW5pbWF0ZU1pbkVycignbm90Y3NlbCcsXG4gICAgICAgIFwiRXhwZWN0aW5nIGNsYXNzIHNlbGVjdG9yIHN0YXJ0aW5nIHdpdGggJy4nIGdvdCAnezB9Jy5cIiwgbmFtZSk7XG4gICAgdGhpcy4kJHNlbGVjdG9yc1tuYW1lLnN1YnN0cigxKV0gPSBrZXk7XG4gICAgJHByb3ZpZGUuZmFjdG9yeShrZXksIGZhY3RvcnkpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRhbmltYXRlUHJvdmlkZXIjY2xhc3NOYW1lRmlsdGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIGFuZC9vciByZXR1cm5zIHRoZSBDU1MgY2xhc3MgcmVndWxhciBleHByZXNzaW9uIHRoYXQgaXMgY2hlY2tlZCB3aGVuIHBlcmZvcm1pbmdcbiAgICogYW4gYW5pbWF0aW9uLiBVcG9uIGJvb3RzdHJhcCB0aGUgY2xhc3NOYW1lRmlsdGVyIHZhbHVlIGlzIG5vdCBzZXQgYXQgYWxsIGFuZCB3aWxsXG4gICAqIHRoZXJlZm9yZSBlbmFibGUgJGFuaW1hdGUgdG8gYXR0ZW1wdCB0byBwZXJmb3JtIGFuIGFuaW1hdGlvbiBvbiBhbnkgZWxlbWVudC5cbiAgICogV2hlbiBzZXR0aW5nIHRoZSBjbGFzc05hbWVGaWx0ZXIgdmFsdWUsIGFuaW1hdGlvbnMgd2lsbCBvbmx5IGJlIHBlcmZvcm1lZCBvbiBlbGVtZW50c1xuICAgKiB0aGF0IHN1Y2Nlc3NmdWxseSBtYXRjaCB0aGUgZmlsdGVyIGV4cHJlc3Npb24uIFRoaXMgaW4gdHVybiBjYW4gYm9vc3QgcGVyZm9ybWFuY2VcbiAgICogZm9yIGxvdy1wb3dlcmVkIGRldmljZXMgYXMgd2VsbCBhcyBhcHBsaWNhdGlvbnMgY29udGFpbmluZyBhIGxvdCBvZiBzdHJ1Y3R1cmFsIG9wZXJhdGlvbnMuXG4gICAqIEBwYXJhbSB7UmVnRXhwPX0gZXhwcmVzc2lvbiBUaGUgY2xhc3NOYW1lIGV4cHJlc3Npb24gd2hpY2ggd2lsbCBiZSBjaGVja2VkIGFnYWluc3QgYWxsIGFuaW1hdGlvbnNcbiAgICogQHJldHVybiB7UmVnRXhwfSBUaGUgY3VycmVudCBDU1MgY2xhc3NOYW1lIGV4cHJlc3Npb24gdmFsdWUuIElmIG51bGwgdGhlbiB0aGVyZSBpcyBubyBleHByZXNzaW9uIHZhbHVlXG4gICAqL1xuICB0aGlzLmNsYXNzTmFtZUZpbHRlciA9IGZ1bmN0aW9uKGV4cHJlc3Npb24pIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdGhpcy4kJGNsYXNzTmFtZUZpbHRlciA9IChleHByZXNzaW9uIGluc3RhbmNlb2YgUmVnRXhwKSA/IGV4cHJlc3Npb24gOiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy4kJGNsYXNzTmFtZUZpbHRlcjtcbiAgfTtcblxuICB0aGlzLiRnZXQgPSBbJyQkcScsICckJGFzeW5jQ2FsbGJhY2snLCAnJHJvb3RTY29wZScsIGZ1bmN0aW9uKCQkcSwgJCRhc3luY0NhbGxiYWNrLCAkcm9vdFNjb3BlKSB7XG5cbiAgICB2YXIgY3VycmVudERlZmVyO1xuXG4gICAgZnVuY3Rpb24gcnVuQW5pbWF0aW9uUG9zdERpZ2VzdChmbikge1xuICAgICAgdmFyIGNhbmNlbEZuLCBkZWZlciA9ICQkcS5kZWZlcigpO1xuICAgICAgZGVmZXIucHJvbWlzZS4kJGNhbmNlbEZuID0gZnVuY3Rpb24gbmdBbmltYXRlTWF5YmVDYW5jZWwoKSB7XG4gICAgICAgIGNhbmNlbEZuICYmIGNhbmNlbEZuKCk7XG4gICAgICB9O1xuXG4gICAgICAkcm9vdFNjb3BlLiQkcG9zdERpZ2VzdChmdW5jdGlvbiBuZ0FuaW1hdGVQb3N0RGlnZXN0KCkge1xuICAgICAgICBjYW5jZWxGbiA9IGZuKGZ1bmN0aW9uIG5nQW5pbWF0ZU5vdGlmeUNvbXBsZXRlKCkge1xuICAgICAgICAgIGRlZmVyLnJlc29sdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGRlZmVyLnByb21pc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzb2x2ZUVsZW1lbnRDbGFzc2VzKGVsZW1lbnQsIGNsYXNzZXMpIHtcbiAgICAgIHZhciB0b0FkZCA9IFtdLCB0b1JlbW92ZSA9IFtdO1xuXG4gICAgICB2YXIgaGFzQ2xhc3NlcyA9IGNyZWF0ZU1hcCgpO1xuICAgICAgZm9yRWFjaCgoZWxlbWVudC5hdHRyKCdjbGFzcycpIHx8ICcnKS5zcGxpdCgvXFxzKy8pLCBmdW5jdGlvbihjbGFzc05hbWUpIHtcbiAgICAgICAgaGFzQ2xhc3Nlc1tjbGFzc05hbWVdID0gdHJ1ZTtcbiAgICAgIH0pO1xuXG4gICAgICBmb3JFYWNoKGNsYXNzZXMsIGZ1bmN0aW9uKHN0YXR1cywgY2xhc3NOYW1lKSB7XG4gICAgICAgIHZhciBoYXNDbGFzcyA9IGhhc0NsYXNzZXNbY2xhc3NOYW1lXTtcblxuICAgICAgICAvLyBJZiB0aGUgbW9zdCByZWNlbnQgY2xhc3MgbWFuaXB1bGF0aW9uICh2aWEgJGFuaW1hdGUpIHdhcyB0byByZW1vdmUgdGhlIGNsYXNzLCBhbmQgdGhlXG4gICAgICAgIC8vIGVsZW1lbnQgY3VycmVudGx5IGhhcyB0aGUgY2xhc3MsIHRoZSBjbGFzcyBpcyBzY2hlZHVsZWQgZm9yIHJlbW92YWwuIE90aGVyd2lzZSwgaWZcbiAgICAgICAgLy8gdGhlIG1vc3QgcmVjZW50IGNsYXNzIG1hbmlwdWxhdGlvbiAodmlhICRhbmltYXRlKSB3YXMgdG8gYWRkIHRoZSBjbGFzcywgYW5kIHRoZVxuICAgICAgICAvLyBlbGVtZW50IGRvZXMgbm90IGN1cnJlbnRseSBoYXZlIHRoZSBjbGFzcywgdGhlIGNsYXNzIGlzIHNjaGVkdWxlZCB0byBiZSBhZGRlZC5cbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gZmFsc2UgJiYgaGFzQ2xhc3MpIHtcbiAgICAgICAgICB0b1JlbW92ZS5wdXNoKGNsYXNzTmFtZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID09PSB0cnVlICYmICFoYXNDbGFzcykge1xuICAgICAgICAgIHRvQWRkLnB1c2goY2xhc3NOYW1lKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiAodG9BZGQubGVuZ3RoICsgdG9SZW1vdmUubGVuZ3RoKSA+IDAgJiZcbiAgICAgICAgW3RvQWRkLmxlbmd0aCA/IHRvQWRkIDogbnVsbCwgdG9SZW1vdmUubGVuZ3RoID8gdG9SZW1vdmUgOiBudWxsXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYWNoZWRDbGFzc01hbmlwdWxhdGlvbihjYWNoZSwgY2xhc3Nlcywgb3ApIHtcbiAgICAgIGZvciAodmFyIGk9MCwgaWkgPSBjbGFzc2VzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgdmFyIGNsYXNzTmFtZSA9IGNsYXNzZXNbaV07XG4gICAgICAgIGNhY2hlW2NsYXNzTmFtZV0gPSBvcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhc3luY1Byb21pc2UoKSB7XG4gICAgICAvLyBvbmx5IHNlcnZlIG9uZSBpbnN0YW5jZSBvZiBhIHByb21pc2UgaW4gb3JkZXIgdG8gc2F2ZSBDUFUgY3ljbGVzXG4gICAgICBpZiAoIWN1cnJlbnREZWZlcikge1xuICAgICAgICBjdXJyZW50RGVmZXIgPSAkJHEuZGVmZXIoKTtcbiAgICAgICAgJCRhc3luY0NhbGxiYWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGN1cnJlbnREZWZlci5yZXNvbHZlKCk7XG4gICAgICAgICAgY3VycmVudERlZmVyID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3VycmVudERlZmVyLnByb21pc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwbHlTdHlsZXMoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgaWYgKGFuZ3VsYXIuaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgdmFyIHN0eWxlcyA9IGV4dGVuZChvcHRpb25zLmZyb20gfHwge30sIG9wdGlvbnMudG8gfHwge30pO1xuICAgICAgICBlbGVtZW50LmNzcyhzdHlsZXMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQG5nZG9jIHNlcnZpY2VcbiAgICAgKiBAbmFtZSAkYW5pbWF0ZVxuICAgICAqIEBkZXNjcmlwdGlvbiBUaGUgJGFuaW1hdGUgc2VydmljZSBwcm92aWRlcyBydWRpbWVudGFyeSBET00gbWFuaXB1bGF0aW9uIGZ1bmN0aW9ucyB0b1xuICAgICAqIGluc2VydCwgcmVtb3ZlIGFuZCBtb3ZlIGVsZW1lbnRzIHdpdGhpbiB0aGUgRE9NLCBhcyB3ZWxsIGFzIGFkZGluZyBhbmQgcmVtb3ZpbmcgY2xhc3Nlcy5cbiAgICAgKiBUaGlzIHNlcnZpY2UgaXMgdGhlIGNvcmUgc2VydmljZSB1c2VkIGJ5IHRoZSBuZ0FuaW1hdGUgJGFuaW1hdG9yIHNlcnZpY2Ugd2hpY2ggcHJvdmlkZXNcbiAgICAgKiBoaWdoLWxldmVsIGFuaW1hdGlvbiBob29rcyBmb3IgQ1NTIGFuZCBKYXZhU2NyaXB0LlxuICAgICAqXG4gICAgICogJGFuaW1hdGUgaXMgYXZhaWxhYmxlIGluIHRoZSBBbmd1bGFySlMgY29yZSwgaG93ZXZlciwgdGhlIG5nQW5pbWF0ZSBtb2R1bGUgbXVzdCBiZSBpbmNsdWRlZFxuICAgICAqIHRvIGVuYWJsZSBmdWxsIG91dCBhbmltYXRpb24gc3VwcG9ydC4gT3RoZXJ3aXNlLCAkYW5pbWF0ZSB3aWxsIG9ubHkgcGVyZm9ybSBzaW1wbGUgRE9NXG4gICAgICogbWFuaXB1bGF0aW9uIG9wZXJhdGlvbnMuXG4gICAgICpcbiAgICAgKiBUbyBsZWFybiBtb3JlIGFib3V0IGVuYWJsaW5nIGFuaW1hdGlvbiBzdXBwb3J0LCBjbGljayBoZXJlIHRvIHZpc2l0IHRoZSB7QGxpbmsgbmdBbmltYXRlXG4gICAgICogbmdBbmltYXRlIG1vZHVsZSBwYWdlfSBhcyB3ZWxsIGFzIHRoZSB7QGxpbmsgbmdBbmltYXRlLiRhbmltYXRlIG5nQW5pbWF0ZSAkYW5pbWF0ZSBzZXJ2aWNlXG4gICAgICogcGFnZX0uXG4gICAgICovXG4gICAgcmV0dXJuIHtcbiAgICAgIGFuaW1hdGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGZyb20sIHRvKSB7XG4gICAgICAgIGFwcGx5U3R5bGVzKGVsZW1lbnQsIHsgZnJvbTogZnJvbSwgdG86IHRvIH0pO1xuICAgICAgICByZXR1cm4gYXN5bmNQcm9taXNlKCk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNlbnRlclxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqIEBkZXNjcmlwdGlvbiBJbnNlcnRzIHRoZSBlbGVtZW50IGludG8gdGhlIERPTSBlaXRoZXIgYWZ0ZXIgdGhlIGBhZnRlcmAgZWxlbWVudCBvclxuICAgICAgICogYXMgdGhlIGZpcnN0IGNoaWxkIHdpdGhpbiB0aGUgYHBhcmVudGAgZWxlbWVudC4gV2hlbiB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkIGEgcHJvbWlzZVxuICAgICAgICogaXMgcmV0dXJuZWQgdGhhdCB3aWxsIGJlIHJlc29sdmVkIGF0IGEgbGF0ZXIgdGltZS5cbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB3aGljaCB3aWxsIGJlIGluc2VydGVkIGludG8gdGhlIERPTVxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBwYXJlbnQgdGhlIHBhcmVudCBlbGVtZW50IHdoaWNoIHdpbGwgYXBwZW5kIHRoZSBlbGVtZW50IGFzXG4gICAgICAgKiAgIGEgY2hpbGQgKGlmIHRoZSBhZnRlciBlbGVtZW50IGlzIG5vdCBwcmVzZW50KVxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBhZnRlciB0aGUgc2libGluZyBlbGVtZW50IHdoaWNoIHdpbGwgYXBwZW5kIHRoZSBlbGVtZW50XG4gICAgICAgKiAgIGFmdGVyIGl0c2VsZlxuICAgICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIGFuIG9wdGlvbmFsIGNvbGxlY3Rpb24gb2Ygc3R5bGVzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50LlxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlXG4gICAgICAgKi9cbiAgICAgIGVudGVyOiBmdW5jdGlvbihlbGVtZW50LCBwYXJlbnQsIGFmdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIGFwcGx5U3R5bGVzKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICBhZnRlciA/IGFmdGVyLmFmdGVyKGVsZW1lbnQpXG4gICAgICAgICAgICAgIDogcGFyZW50LnByZXBlbmQoZWxlbWVudCk7XG4gICAgICAgIHJldHVybiBhc3luY1Byb21pc2UoKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICpcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI2xlYXZlXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICogQGRlc2NyaXB0aW9uIFJlbW92ZXMgdGhlIGVsZW1lbnQgZnJvbSB0aGUgRE9NLiBXaGVuIHRoZSBmdW5jdGlvbiBpcyBjYWxsZWQgYSBwcm9taXNlXG4gICAgICAgKiBpcyByZXR1cm5lZCB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgYXQgYSBsYXRlciB0aW1lLlxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHdoaWNoIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBET01cbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBhbiBvcHRpb25hbCBjb2xsZWN0aW9uIG9mIG9wdGlvbnMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQuXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSB0aGUgYW5pbWF0aW9uIGNhbGxiYWNrIHByb21pc2VcbiAgICAgICAqL1xuICAgICAgbGVhdmU6IGZ1bmN0aW9uKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgcmV0dXJuIGFzeW5jUHJvbWlzZSgpO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGFuaW1hdGUjbW92ZVxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqIEBkZXNjcmlwdGlvbiBNb3ZlcyB0aGUgcG9zaXRpb24gb2YgdGhlIHByb3ZpZGVkIGVsZW1lbnQgd2l0aGluIHRoZSBET00gdG8gYmUgcGxhY2VkXG4gICAgICAgKiBlaXRoZXIgYWZ0ZXIgdGhlIGBhZnRlcmAgZWxlbWVudCBvciBpbnNpZGUgb2YgdGhlIGBwYXJlbnRgIGVsZW1lbnQuIFdoZW4gdGhlIGZ1bmN0aW9uXG4gICAgICAgKiBpcyBjYWxsZWQgYSBwcm9taXNlIGlzIHJldHVybmVkIHRoYXQgd2lsbCBiZSByZXNvbHZlZCBhdCBhIGxhdGVyIHRpbWUuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHdoaWNoIHdpbGwgYmUgbW92ZWQgYXJvdW5kIHdpdGhpbiB0aGVcbiAgICAgICAqICAgRE9NXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IHBhcmVudCB0aGUgcGFyZW50IGVsZW1lbnQgd2hlcmUgdGhlIGVsZW1lbnQgd2lsbCBiZVxuICAgICAgICogICBpbnNlcnRlZCBpbnRvIChpZiB0aGUgYWZ0ZXIgZWxlbWVudCBpcyBub3QgcHJlc2VudClcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gYWZ0ZXIgdGhlIHNpYmxpbmcgZWxlbWVudCB3aGVyZSB0aGUgZWxlbWVudCB3aWxsIGJlXG4gICAgICAgKiAgIHBvc2l0aW9uZWQgbmV4dCB0b1xuICAgICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIGFuIG9wdGlvbmFsIGNvbGxlY3Rpb24gb2Ygb3B0aW9ucyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudC5cbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IHRoZSBhbmltYXRpb24gY2FsbGJhY2sgcHJvbWlzZVxuICAgICAgICovXG4gICAgICBtb3ZlOiBmdW5jdGlvbihlbGVtZW50LCBwYXJlbnQsIGFmdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIC8vIERvIG5vdCByZW1vdmUgZWxlbWVudCBiZWZvcmUgaW5zZXJ0LiBSZW1vdmluZyB3aWxsIGNhdXNlIGRhdGEgYXNzb2NpYXRlZCB3aXRoIHRoZVxuICAgICAgICAvLyBlbGVtZW50IHRvIGJlIGRyb3BwZWQuIEluc2VydCB3aWxsIGltcGxpY2l0bHkgZG8gdGhlIHJlbW92ZS5cbiAgICAgICAgcmV0dXJuIHRoaXMuZW50ZXIoZWxlbWVudCwgcGFyZW50LCBhZnRlciwgb3B0aW9ucyk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNhZGRDbGFzc1xuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqIEBkZXNjcmlwdGlvbiBBZGRzIHRoZSBwcm92aWRlZCBjbGFzc05hbWUgQ1NTIGNsYXNzIHZhbHVlIHRvIHRoZSBwcm92aWRlZCBlbGVtZW50LlxuICAgICAgICogV2hlbiB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkIGEgcHJvbWlzZSBpcyByZXR1cm5lZCB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgYXQgYSBsYXRlciB0aW1lLlxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHdoaWNoIHdpbGwgaGF2ZSB0aGUgY2xhc3NOYW1lIHZhbHVlXG4gICAgICAgKiAgIGFkZGVkIHRvIGl0XG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lIHRoZSBDU1MgY2xhc3Mgd2hpY2ggd2lsbCBiZSBhZGRlZCB0byB0aGUgZWxlbWVudFxuICAgICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIGFuIG9wdGlvbmFsIGNvbGxlY3Rpb24gb2Ygb3B0aW9ucyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudC5cbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IHRoZSBhbmltYXRpb24gY2FsbGJhY2sgcHJvbWlzZVxuICAgICAgICovXG4gICAgICBhZGRDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgY2xhc3NOYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldENsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSwgW10sIG9wdGlvbnMpO1xuICAgICAgfSxcblxuICAgICAgJCRhZGRDbGFzc0ltbWVkaWF0ZWx5OiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgZWxlbWVudCA9IGpxTGl0ZShlbGVtZW50KTtcbiAgICAgICAgY2xhc3NOYW1lID0gIWlzU3RyaW5nKGNsYXNzTmFtZSlcbiAgICAgICAgICAgICAgICAgICAgICAgID8gKGlzQXJyYXkoY2xhc3NOYW1lKSA/IGNsYXNzTmFtZS5qb2luKCcgJykgOiAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgIDogY2xhc3NOYW1lO1xuICAgICAgICBmb3JFYWNoKGVsZW1lbnQsIGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICBqcUxpdGVBZGRDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgYXBwbHlTdHlsZXMoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiBhc3luY1Byb21pc2UoKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICpcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI3JlbW92ZUNsYXNzXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICogQGRlc2NyaXB0aW9uIFJlbW92ZXMgdGhlIHByb3ZpZGVkIGNsYXNzTmFtZSBDU1MgY2xhc3MgdmFsdWUgZnJvbSB0aGUgcHJvdmlkZWQgZWxlbWVudC5cbiAgICAgICAqIFdoZW4gdGhlIGZ1bmN0aW9uIGlzIGNhbGxlZCBhIHByb21pc2UgaXMgcmV0dXJuZWQgdGhhdCB3aWxsIGJlIHJlc29sdmVkIGF0IGEgbGF0ZXIgdGltZS5cbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB3aGljaCB3aWxsIGhhdmUgdGhlIGNsYXNzTmFtZSB2YWx1ZVxuICAgICAgICogICByZW1vdmVkIGZyb20gaXRcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWUgdGhlIENTUyBjbGFzcyB3aGljaCB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudFxuICAgICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIGFuIG9wdGlvbmFsIGNvbGxlY3Rpb24gb2Ygb3B0aW9ucyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudC5cbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IHRoZSBhbmltYXRpb24gY2FsbGJhY2sgcHJvbWlzZVxuICAgICAgICovXG4gICAgICByZW1vdmVDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgY2xhc3NOYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldENsYXNzKGVsZW1lbnQsIFtdLCBjbGFzc05hbWUsIG9wdGlvbnMpO1xuICAgICAgfSxcblxuICAgICAgJCRyZW1vdmVDbGFzc0ltbWVkaWF0ZWx5OiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgZWxlbWVudCA9IGpxTGl0ZShlbGVtZW50KTtcbiAgICAgICAgY2xhc3NOYW1lID0gIWlzU3RyaW5nKGNsYXNzTmFtZSlcbiAgICAgICAgICAgICAgICAgICAgICAgID8gKGlzQXJyYXkoY2xhc3NOYW1lKSA/IGNsYXNzTmFtZS5qb2luKCcgJykgOiAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgIDogY2xhc3NOYW1lO1xuICAgICAgICBmb3JFYWNoKGVsZW1lbnQsIGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICBqcUxpdGVSZW1vdmVDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgYXBwbHlTdHlsZXMoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiBhc3luY1Byb21pc2UoKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICpcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI3NldENsYXNzXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICogQGRlc2NyaXB0aW9uIEFkZHMgYW5kL29yIHJlbW92ZXMgdGhlIGdpdmVuIENTUyBjbGFzc2VzIHRvIGFuZCBmcm9tIHRoZSBlbGVtZW50LlxuICAgICAgICogV2hlbiB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkIGEgcHJvbWlzZSBpcyByZXR1cm5lZCB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgYXQgYSBsYXRlciB0aW1lLlxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHdoaWNoIHdpbGwgaGF2ZSBpdHMgQ1NTIGNsYXNzZXMgY2hhbmdlZFxuICAgICAgICogICByZW1vdmVkIGZyb20gaXRcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhZGQgdGhlIENTUyBjbGFzc2VzIHdoaWNoIHdpbGwgYmUgYWRkZWQgdG8gdGhlIGVsZW1lbnRcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZW1vdmUgdGhlIENTUyBjbGFzcyB3aGljaCB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudFxuICAgICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIGFuIG9wdGlvbmFsIGNvbGxlY3Rpb24gb2Ygb3B0aW9ucyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudC5cbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IHRoZSBhbmltYXRpb24gY2FsbGJhY2sgcHJvbWlzZVxuICAgICAgICovXG4gICAgICBzZXRDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgYWRkLCByZW1vdmUsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgU1RPUkFHRV9LRVkgPSAnJCRhbmltYXRlQ2xhc3Nlcyc7XG4gICAgICAgIHZhciBjcmVhdGVkQ2FjaGUgPSBmYWxzZTtcbiAgICAgICAgZWxlbWVudCA9IGpxTGl0ZShlbGVtZW50KTtcblxuICAgICAgICB2YXIgY2FjaGUgPSBlbGVtZW50LmRhdGEoU1RPUkFHRV9LRVkpO1xuICAgICAgICBpZiAoIWNhY2hlKSB7XG4gICAgICAgICAgY2FjaGUgPSB7XG4gICAgICAgICAgICBjbGFzc2VzOiB7fSxcbiAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgICAgICAgICB9O1xuICAgICAgICAgIGNyZWF0ZWRDYWNoZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucyAmJiBjYWNoZS5vcHRpb25zKSB7XG4gICAgICAgICAgY2FjaGUub3B0aW9ucyA9IGFuZ3VsYXIuZXh0ZW5kKGNhY2hlLm9wdGlvbnMgfHwge30sIG9wdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNsYXNzZXMgPSBjYWNoZS5jbGFzc2VzO1xuXG4gICAgICAgIGFkZCA9IGlzQXJyYXkoYWRkKSA/IGFkZCA6IGFkZC5zcGxpdCgnICcpO1xuICAgICAgICByZW1vdmUgPSBpc0FycmF5KHJlbW92ZSkgPyByZW1vdmUgOiByZW1vdmUuc3BsaXQoJyAnKTtcbiAgICAgICAgY2FjaGVkQ2xhc3NNYW5pcHVsYXRpb24oY2xhc3NlcywgYWRkLCB0cnVlKTtcbiAgICAgICAgY2FjaGVkQ2xhc3NNYW5pcHVsYXRpb24oY2xhc3NlcywgcmVtb3ZlLCBmYWxzZSk7XG5cbiAgICAgICAgaWYgKGNyZWF0ZWRDYWNoZSkge1xuICAgICAgICAgIGNhY2hlLnByb21pc2UgPSBydW5BbmltYXRpb25Qb3N0RGlnZXN0KGZ1bmN0aW9uKGRvbmUpIHtcbiAgICAgICAgICAgIHZhciBjYWNoZSA9IGVsZW1lbnQuZGF0YShTVE9SQUdFX0tFWSk7XG4gICAgICAgICAgICBlbGVtZW50LnJlbW92ZURhdGEoU1RPUkFHRV9LRVkpO1xuXG4gICAgICAgICAgICAvLyBpbiB0aGUgZXZlbnQgdGhhdCB0aGUgZWxlbWVudCBpcyByZW1vdmVkIGJlZm9yZSBwb3N0RGlnZXN0XG4gICAgICAgICAgICAvLyBpcyBydW4gdGhlbiB0aGUgY2FjaGUgd2lsbCBiZSB1bmRlZmluZWQgYW5kIHRoZXJlIHdpbGwgYmVcbiAgICAgICAgICAgIC8vIG5vIG5lZWQgYW55bW9yZSB0byBhZGQgb3IgcmVtb3ZlIGFuZCBvZiB0aGUgZWxlbWVudCBjbGFzc2VzXG4gICAgICAgICAgICBpZiAoY2FjaGUpIHtcbiAgICAgICAgICAgICAgdmFyIGNsYXNzZXMgPSByZXNvbHZlRWxlbWVudENsYXNzZXMoZWxlbWVudCwgY2FjaGUuY2xhc3Nlcyk7XG4gICAgICAgICAgICAgIGlmIChjbGFzc2VzKSB7XG4gICAgICAgICAgICAgICAgc2VsZi4kJHNldENsYXNzSW1tZWRpYXRlbHkoZWxlbWVudCwgY2xhc3Nlc1swXSwgY2xhc3Nlc1sxXSwgY2FjaGUub3B0aW9ucyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGVsZW1lbnQuZGF0YShTVE9SQUdFX0tFWSwgY2FjaGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNhY2hlLnByb21pc2U7XG4gICAgICB9LFxuXG4gICAgICAkJHNldENsYXNzSW1tZWRpYXRlbHk6IGZ1bmN0aW9uKGVsZW1lbnQsIGFkZCwgcmVtb3ZlLCBvcHRpb25zKSB7XG4gICAgICAgIGFkZCAmJiB0aGlzLiQkYWRkQ2xhc3NJbW1lZGlhdGVseShlbGVtZW50LCBhZGQpO1xuICAgICAgICByZW1vdmUgJiYgdGhpcy4kJHJlbW92ZUNsYXNzSW1tZWRpYXRlbHkoZWxlbWVudCwgcmVtb3ZlKTtcbiAgICAgICAgYXBwbHlTdHlsZXMoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiBhc3luY1Byb21pc2UoKTtcbiAgICAgIH0sXG5cbiAgICAgIGVuYWJsZWQ6IG5vb3AsXG4gICAgICBjYW5jZWw6IG5vb3BcbiAgICB9O1xuICB9XTtcbn1dO1xuXG5mdW5jdGlvbiAkJEFzeW5jQ2FsbGJhY2tQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckJHJBRicsICckdGltZW91dCcsIGZ1bmN0aW9uKCQkckFGLCAkdGltZW91dCkge1xuICAgIHJldHVybiAkJHJBRi5zdXBwb3J0ZWRcbiAgICAgID8gZnVuY3Rpb24oZm4pIHsgcmV0dXJuICQkckFGKGZuKTsgfVxuICAgICAgOiBmdW5jdGlvbihmbikge1xuICAgICAgICByZXR1cm4gJHRpbWVvdXQoZm4sIDAsIGZhbHNlKTtcbiAgICAgIH07XG4gIH1dO1xufVxuXG4vKiBnbG9iYWwgc3RyaXBIYXNoOiB0cnVlICovXG5cbi8qKlxuICogISBUaGlzIGlzIGEgcHJpdmF0ZSB1bmRvY3VtZW50ZWQgc2VydmljZSAhXG4gKlxuICogQG5hbWUgJGJyb3dzZXJcbiAqIEByZXF1aXJlcyAkbG9nXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgb2JqZWN0IGhhcyB0d28gZ29hbHM6XG4gKlxuICogLSBoaWRlIGFsbCB0aGUgZ2xvYmFsIHN0YXRlIGluIHRoZSBicm93c2VyIGNhdXNlZCBieSB0aGUgd2luZG93IG9iamVjdFxuICogLSBhYnN0cmFjdCBhd2F5IGFsbCB0aGUgYnJvd3NlciBzcGVjaWZpYyBmZWF0dXJlcyBhbmQgaW5jb25zaXN0ZW5jaWVzXG4gKlxuICogRm9yIHRlc3RzIHdlIHByb3ZpZGUge0BsaW5rIG5nTW9jay4kYnJvd3NlciBtb2NrIGltcGxlbWVudGF0aW9ufSBvZiB0aGUgYCRicm93c2VyYFxuICogc2VydmljZSwgd2hpY2ggY2FuIGJlIHVzZWQgZm9yIGNvbnZlbmllbnQgdGVzdGluZyBvZiB0aGUgYXBwbGljYXRpb24gd2l0aG91dCB0aGUgaW50ZXJhY3Rpb24gd2l0aFxuICogdGhlIHJlYWwgYnJvd3NlciBhcGlzLlxuICovXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSB3aW5kb3cgVGhlIGdsb2JhbCB3aW5kb3cgb2JqZWN0LlxuICogQHBhcmFtIHtvYmplY3R9IGRvY3VtZW50IGpRdWVyeSB3cmFwcGVkIGRvY3VtZW50LlxuICogQHBhcmFtIHtvYmplY3R9ICRsb2cgd2luZG93LmNvbnNvbGUgb3IgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgaW50ZXJmYWNlLlxuICogQHBhcmFtIHtvYmplY3R9ICRzbmlmZmVyICRzbmlmZmVyIHNlcnZpY2VcbiAqL1xuZnVuY3Rpb24gQnJvd3Nlcih3aW5kb3csIGRvY3VtZW50LCAkbG9nLCAkc25pZmZlcikge1xuICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICByYXdEb2N1bWVudCA9IGRvY3VtZW50WzBdLFxuICAgICAgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICBoaXN0b3J5ID0gd2luZG93Lmhpc3RvcnksXG4gICAgICBzZXRUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQsXG4gICAgICBjbGVhclRpbWVvdXQgPSB3aW5kb3cuY2xlYXJUaW1lb3V0LFxuICAgICAgcGVuZGluZ0RlZmVySWRzID0ge307XG5cbiAgc2VsZi5pc01vY2sgPSBmYWxzZTtcblxuICB2YXIgb3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQgPSAwO1xuICB2YXIgb3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzID0gW107XG5cbiAgLy8gVE9ETyh2b2p0YSk6IHJlbW92ZSB0aGlzIHRlbXBvcmFyeSBhcGlcbiAgc2VsZi4kJGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0ID0gY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3Q7XG4gIHNlbGYuJCRpbmNPdXRzdGFuZGluZ1JlcXVlc3RDb3VudCA9IGZ1bmN0aW9uKCkgeyBvdXRzdGFuZGluZ1JlcXVlc3RDb3VudCsrOyB9O1xuXG4gIC8qKlxuICAgKiBFeGVjdXRlcyB0aGUgYGZuYCBmdW5jdGlvbihzdXBwb3J0cyBjdXJyeWluZykgYW5kIGRlY3JlbWVudHMgdGhlIGBvdXRzdGFuZGluZ1JlcXVlc3RDYWxsYmFja3NgXG4gICAqIGNvdW50ZXIuIElmIHRoZSBjb3VudGVyIHJlYWNoZXMgMCwgYWxsIHRoZSBgb3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzYCBhcmUgZXhlY3V0ZWQuXG4gICAqL1xuICBmdW5jdGlvbiBjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdChmbikge1xuICAgIHRyeSB7XG4gICAgICBmbi5hcHBseShudWxsLCBzbGljZUFyZ3MoYXJndW1lbnRzLCAxKSk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIG91dHN0YW5kaW5nUmVxdWVzdENvdW50LS07XG4gICAgICBpZiAob3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQgPT09IDApIHtcbiAgICAgICAgd2hpbGUgKG91dHN0YW5kaW5nUmVxdWVzdENhbGxiYWNrcy5sZW5ndGgpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgb3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzLnBvcCgpKCk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgJGxvZy5lcnJvcihlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRIYXNoKHVybCkge1xuICAgIHZhciBpbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gICAgcmV0dXJuIGluZGV4ID09PSAtMSA/ICcnIDogdXJsLnN1YnN0cihpbmRleCArIDEpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIE5vdGU6IHRoaXMgbWV0aG9kIGlzIHVzZWQgb25seSBieSBzY2VuYXJpbyBydW5uZXJcbiAgICogVE9ETyh2b2p0YSk6IHByZWZpeCB0aGlzIG1ldGhvZCB3aXRoICQkID9cbiAgICogQHBhcmFtIHtmdW5jdGlvbigpfSBjYWxsYmFjayBGdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW4gbm8gb3V0c3RhbmRpbmcgcmVxdWVzdFxuICAgKi9cbiAgc2VsZi5ub3RpZnlXaGVuTm9PdXRzdGFuZGluZ1JlcXVlc3RzID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAvLyBmb3JjZSBicm93c2VyIHRvIGV4ZWN1dGUgYWxsIHBvbGxGbnMgLSB0aGlzIGlzIG5lZWRlZCBzbyB0aGF0IGNvb2tpZXMgYW5kIG90aGVyIHBvbGxlcnMgZmlyZVxuICAgIC8vIGF0IHNvbWUgZGV0ZXJtaW5pc3RpYyB0aW1lIGluIHJlc3BlY3QgdG8gdGhlIHRlc3QgcnVubmVyJ3MgYWN0aW9ucy4gTGVhdmluZyB0aGluZ3MgdXAgdG8gdGhlXG4gICAgLy8gcmVndWxhciBwb2xsZXIgd291bGQgcmVzdWx0IGluIGZsYWt5IHRlc3RzLlxuICAgIGZvckVhY2gocG9sbEZucywgZnVuY3Rpb24ocG9sbEZuKSB7IHBvbGxGbigpOyB9KTtcblxuICAgIGlmIChvdXRzdGFuZGluZ1JlcXVlc3RDb3VudCA9PT0gMCkge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgIH1cbiAgfTtcblxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBQb2xsIFdhdGNoZXIgQVBJXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIHZhciBwb2xsRm5zID0gW10sXG4gICAgICBwb2xsVGltZW91dDtcblxuICAvKipcbiAgICogQG5hbWUgJGJyb3dzZXIjYWRkUG9sbEZuXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gZm4gUG9sbCBmdW5jdGlvbiB0byBhZGRcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEFkZHMgYSBmdW5jdGlvbiB0byB0aGUgbGlzdCBvZiBmdW5jdGlvbnMgdGhhdCBwb2xsZXIgcGVyaW9kaWNhbGx5IGV4ZWN1dGVzLFxuICAgKiBhbmQgc3RhcnRzIHBvbGxpbmcgaWYgbm90IHN0YXJ0ZWQgeWV0LlxuICAgKlxuICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX0gdGhlIGFkZGVkIGZ1bmN0aW9uXG4gICAqL1xuICBzZWxmLmFkZFBvbGxGbiA9IGZ1bmN0aW9uKGZuKSB7XG4gICAgaWYgKGlzVW5kZWZpbmVkKHBvbGxUaW1lb3V0KSkgc3RhcnRQb2xsZXIoMTAwLCBzZXRUaW1lb3V0KTtcbiAgICBwb2xsRm5zLnB1c2goZm4pO1xuICAgIHJldHVybiBmbjtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IGludGVydmFsIEhvdyBvZnRlbiBzaG91bGQgYnJvd3NlciBjYWxsIHBvbGwgZnVuY3Rpb25zIChtcylcbiAgICogQHBhcmFtIHtmdW5jdGlvbigpfSBzZXRUaW1lb3V0IFJlZmVyZW5jZSB0byBhIHJlYWwgb3IgZmFrZSBgc2V0VGltZW91dGAgZnVuY3Rpb24uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDb25maWd1cmVzIHRoZSBwb2xsZXIgdG8gcnVuIGluIHRoZSBzcGVjaWZpZWQgaW50ZXJ2YWxzLCB1c2luZyB0aGUgc3BlY2lmaWVkXG4gICAqIHNldFRpbWVvdXQgZm4gYW5kIGtpY2tzIGl0IG9mZi5cbiAgICovXG4gIGZ1bmN0aW9uIHN0YXJ0UG9sbGVyKGludGVydmFsLCBzZXRUaW1lb3V0KSB7XG4gICAgKGZ1bmN0aW9uIGNoZWNrKCkge1xuICAgICAgZm9yRWFjaChwb2xsRm5zLCBmdW5jdGlvbihwb2xsRm4pIHsgcG9sbEZuKCk7IH0pO1xuICAgICAgcG9sbFRpbWVvdXQgPSBzZXRUaW1lb3V0KGNoZWNrLCBpbnRlcnZhbCk7XG4gICAgfSkoKTtcbiAgfVxuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIFVSTCBBUElcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICB2YXIgY2FjaGVkU3RhdGUsIGxhc3RIaXN0b3J5U3RhdGUsXG4gICAgICBsYXN0QnJvd3NlclVybCA9IGxvY2F0aW9uLmhyZWYsXG4gICAgICBiYXNlRWxlbWVudCA9IGRvY3VtZW50LmZpbmQoJ2Jhc2UnKSxcbiAgICAgIHJlbG9hZExvY2F0aW9uID0gbnVsbDtcblxuICBjYWNoZVN0YXRlKCk7XG4gIGxhc3RIaXN0b3J5U3RhdGUgPSBjYWNoZWRTdGF0ZTtcblxuICAvKipcbiAgICogQG5hbWUgJGJyb3dzZXIjdXJsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBHRVRURVI6XG4gICAqIFdpdGhvdXQgYW55IGFyZ3VtZW50LCB0aGlzIG1ldGhvZCBqdXN0IHJldHVybnMgY3VycmVudCB2YWx1ZSBvZiBsb2NhdGlvbi5ocmVmLlxuICAgKlxuICAgKiBTRVRURVI6XG4gICAqIFdpdGggYXQgbGVhc3Qgb25lIGFyZ3VtZW50LCB0aGlzIG1ldGhvZCBzZXRzIHVybCB0byBuZXcgdmFsdWUuXG4gICAqIElmIGh0bWw1IGhpc3RvcnkgYXBpIHN1cHBvcnRlZCwgcHVzaFN0YXRlL3JlcGxhY2VTdGF0ZSBpcyB1c2VkLCBvdGhlcndpc2VcbiAgICogbG9jYXRpb24uaHJlZi9sb2NhdGlvbi5yZXBsYWNlIGlzIHVzZWQuXG4gICAqIFJldHVybnMgaXRzIG93biBpbnN0YW5jZSB0byBhbGxvdyBjaGFpbmluZ1xuICAgKlxuICAgKiBOT1RFOiB0aGlzIGFwaSBpcyBpbnRlbmRlZCBmb3IgdXNlIG9ubHkgYnkgdGhlICRsb2NhdGlvbiBzZXJ2aWNlLiBQbGVhc2UgdXNlIHRoZVxuICAgKiB7QGxpbmsgbmcuJGxvY2F0aW9uICRsb2NhdGlvbiBzZXJ2aWNlfSB0byBjaGFuZ2UgdXJsLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIE5ldyB1cmwgKHdoZW4gdXNlZCBhcyBzZXR0ZXIpXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IHJlcGxhY2UgU2hvdWxkIG5ldyB1cmwgcmVwbGFjZSBjdXJyZW50IGhpc3RvcnkgcmVjb3JkP1xuICAgKiBAcGFyYW0ge29iamVjdD19IHN0YXRlIG9iamVjdCB0byB1c2Ugd2l0aCBwdXNoU3RhdGUvcmVwbGFjZVN0YXRlXG4gICAqL1xuICBzZWxmLnVybCA9IGZ1bmN0aW9uKHVybCwgcmVwbGFjZSwgc3RhdGUpIHtcbiAgICAvLyBJbiBtb2Rlcm4gYnJvd3NlcnMgYGhpc3Rvcnkuc3RhdGVgIGlzIGBudWxsYCBieSBkZWZhdWx0OyB0cmVhdGluZyBpdCBzZXBhcmF0ZWx5XG4gICAgLy8gZnJvbSBgdW5kZWZpbmVkYCB3b3VsZCBjYXVzZSBgJGJyb3dzZXIudXJsKCcvZm9vJylgIHRvIGNoYW5nZSBgaGlzdG9yeS5zdGF0ZWBcbiAgICAvLyB0byB1bmRlZmluZWQgdmlhIGBwdXNoU3RhdGVgLiBJbnN0ZWFkLCBsZXQncyBjaGFuZ2UgYHVuZGVmaW5lZGAgdG8gYG51bGxgIGhlcmUuXG4gICAgaWYgKGlzVW5kZWZpbmVkKHN0YXRlKSkge1xuICAgICAgc3RhdGUgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIEFuZHJvaWQgQnJvd3NlciBCRkNhY2hlIGNhdXNlcyBsb2NhdGlvbiwgaGlzdG9yeSByZWZlcmVuY2UgdG8gYmVjb21lIHN0YWxlLlxuICAgIGlmIChsb2NhdGlvbiAhPT0gd2luZG93LmxvY2F0aW9uKSBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgICBpZiAoaGlzdG9yeSAhPT0gd2luZG93Lmhpc3RvcnkpIGhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcblxuICAgIC8vIHNldHRlclxuICAgIGlmICh1cmwpIHtcbiAgICAgIHZhciBzYW1lU3RhdGUgPSBsYXN0SGlzdG9yeVN0YXRlID09PSBzdGF0ZTtcblxuICAgICAgLy8gRG9uJ3QgY2hhbmdlIGFueXRoaW5nIGlmIHByZXZpb3VzIGFuZCBjdXJyZW50IFVSTHMgYW5kIHN0YXRlcyBtYXRjaC4gVGhpcyBhbHNvIHByZXZlbnRzXG4gICAgICAvLyBJRTwxMCBmcm9tIGdldHRpbmcgaW50byByZWRpcmVjdCBsb29wIHdoZW4gaW4gTG9jYXRpb25IYXNoYmFuZ0luSHRtbDVVcmwgbW9kZS5cbiAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2NvbW1pdC9mZmIyNzAxXG4gICAgICBpZiAobGFzdEJyb3dzZXJVcmwgPT09IHVybCAmJiAoISRzbmlmZmVyLmhpc3RvcnkgfHwgc2FtZVN0YXRlKSkge1xuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgIH1cbiAgICAgIHZhciBzYW1lQmFzZSA9IGxhc3RCcm93c2VyVXJsICYmIHN0cmlwSGFzaChsYXN0QnJvd3NlclVybCkgPT09IHN0cmlwSGFzaCh1cmwpO1xuICAgICAgbGFzdEJyb3dzZXJVcmwgPSB1cmw7XG4gICAgICBsYXN0SGlzdG9yeVN0YXRlID0gc3RhdGU7XG4gICAgICAvLyBEb24ndCB1c2UgaGlzdG9yeSBBUEkgaWYgb25seSB0aGUgaGFzaCBjaGFuZ2VkXG4gICAgICAvLyBkdWUgdG8gYSBidWcgaW4gSUUxMC9JRTExIHdoaWNoIGxlYWRzXG4gICAgICAvLyB0byBub3QgZmlyaW5nIGEgYGhhc2hjaGFuZ2VgIG5vciBgcG9wc3RhdGVgIGV2ZW50XG4gICAgICAvLyBpbiBzb21lIGNhc2VzIChzZWUgIzkxNDMpLlxuICAgICAgaWYgKCRzbmlmZmVyLmhpc3RvcnkgJiYgKCFzYW1lQmFzZSB8fCAhc2FtZVN0YXRlKSkge1xuICAgICAgICBoaXN0b3J5W3JlcGxhY2UgPyAncmVwbGFjZVN0YXRlJyA6ICdwdXNoU3RhdGUnXShzdGF0ZSwgJycsIHVybCk7XG4gICAgICAgIGNhY2hlU3RhdGUoKTtcbiAgICAgICAgLy8gRG8gdGhlIGFzc2lnbm1lbnQgYWdhaW4gc28gdGhhdCB0aG9zZSB0d28gdmFyaWFibGVzIGFyZSByZWZlcmVudGlhbGx5IGlkZW50aWNhbC5cbiAgICAgICAgbGFzdEhpc3RvcnlTdGF0ZSA9IGNhY2hlZFN0YXRlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFzYW1lQmFzZSkge1xuICAgICAgICAgIHJlbG9hZExvY2F0aW9uID0gdXJsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXBsYWNlKSB7XG4gICAgICAgICAgbG9jYXRpb24ucmVwbGFjZSh1cmwpO1xuICAgICAgICB9IGVsc2UgaWYgKCFzYW1lQmFzZSkge1xuICAgICAgICAgIGxvY2F0aW9uLmhyZWYgPSB1cmw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbG9jYXRpb24uaGFzaCA9IGdldEhhc2godXJsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgLy8gZ2V0dGVyXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIC0gcmVsb2FkTG9jYXRpb24gaXMgbmVlZGVkIGFzIGJyb3dzZXJzIGRvbid0IGFsbG93IHRvIHJlYWQgb3V0XG4gICAgICAvLyAgIHRoZSBuZXcgbG9jYXRpb24uaHJlZiBpZiBhIHJlbG9hZCBoYXBwZW5lZC5cbiAgICAgIC8vIC0gdGhlIHJlcGxhY2VtZW50IGlzIGEgd29ya2Fyb3VuZCBmb3IgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NDA3MTcyXG4gICAgICByZXR1cm4gcmVsb2FkTG9jYXRpb24gfHwgbG9jYXRpb24uaHJlZi5yZXBsYWNlKC8lMjcvZyxcIidcIik7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAbmFtZSAkYnJvd3NlciNzdGF0ZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBtZXRob2QgaXMgYSBnZXR0ZXIuXG4gICAqXG4gICAqIFJldHVybiBoaXN0b3J5LnN0YXRlIG9yIG51bGwgaWYgaGlzdG9yeS5zdGF0ZSBpcyB1bmRlZmluZWQuXG4gICAqXG4gICAqIEByZXR1cm5zIHtvYmplY3R9IHN0YXRlXG4gICAqL1xuICBzZWxmLnN0YXRlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNhY2hlZFN0YXRlO1xuICB9O1xuXG4gIHZhciB1cmxDaGFuZ2VMaXN0ZW5lcnMgPSBbXSxcbiAgICAgIHVybENoYW5nZUluaXQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBjYWNoZVN0YXRlQW5kRmlyZVVybENoYW5nZSgpIHtcbiAgICBjYWNoZVN0YXRlKCk7XG4gICAgZmlyZVVybENoYW5nZSgpO1xuICB9XG5cbiAgLy8gVGhpcyB2YXJpYWJsZSBzaG91bGQgYmUgdXNlZCAqb25seSogaW5zaWRlIHRoZSBjYWNoZVN0YXRlIGZ1bmN0aW9uLlxuICB2YXIgbGFzdENhY2hlZFN0YXRlID0gbnVsbDtcbiAgZnVuY3Rpb24gY2FjaGVTdGF0ZSgpIHtcbiAgICAvLyBUaGlzIHNob3VsZCBiZSB0aGUgb25seSBwbGFjZSBpbiAkYnJvd3NlciB3aGVyZSBgaGlzdG9yeS5zdGF0ZWAgaXMgcmVhZC5cbiAgICBjYWNoZWRTdGF0ZSA9IHdpbmRvdy5oaXN0b3J5LnN0YXRlO1xuICAgIGNhY2hlZFN0YXRlID0gaXNVbmRlZmluZWQoY2FjaGVkU3RhdGUpID8gbnVsbCA6IGNhY2hlZFN0YXRlO1xuXG4gICAgLy8gUHJldmVudCBjYWxsYmFja3MgZm8gZmlyZSB0d2ljZSBpZiBib3RoIGhhc2hjaGFuZ2UgJiBwb3BzdGF0ZSB3ZXJlIGZpcmVkLlxuICAgIGlmIChlcXVhbHMoY2FjaGVkU3RhdGUsIGxhc3RDYWNoZWRTdGF0ZSkpIHtcbiAgICAgIGNhY2hlZFN0YXRlID0gbGFzdENhY2hlZFN0YXRlO1xuICAgIH1cbiAgICBsYXN0Q2FjaGVkU3RhdGUgPSBjYWNoZWRTdGF0ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpcmVVcmxDaGFuZ2UoKSB7XG4gICAgaWYgKGxhc3RCcm93c2VyVXJsID09PSBzZWxmLnVybCgpICYmIGxhc3RIaXN0b3J5U3RhdGUgPT09IGNhY2hlZFN0YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGFzdEJyb3dzZXJVcmwgPSBzZWxmLnVybCgpO1xuICAgIGxhc3RIaXN0b3J5U3RhdGUgPSBjYWNoZWRTdGF0ZTtcbiAgICBmb3JFYWNoKHVybENoYW5nZUxpc3RlbmVycywgZnVuY3Rpb24obGlzdGVuZXIpIHtcbiAgICAgIGxpc3RlbmVyKHNlbGYudXJsKCksIGNhY2hlZFN0YXRlKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbmFtZSAkYnJvd3NlciNvblVybENoYW5nZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmVnaXN0ZXIgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCwgd2hlbiB1cmwgY2hhbmdlcy5cbiAgICpcbiAgICogSXQncyBvbmx5IGNhbGxlZCB3aGVuIHRoZSB1cmwgaXMgY2hhbmdlZCBmcm9tIG91dHNpZGUgb2YgYW5ndWxhcjpcbiAgICogLSB1c2VyIHR5cGVzIGRpZmZlcmVudCB1cmwgaW50byBhZGRyZXNzIGJhclxuICAgKiAtIHVzZXIgY2xpY2tzIG9uIGhpc3RvcnkgKGZvcndhcmQvYmFjaykgYnV0dG9uXG4gICAqIC0gdXNlciBjbGlja3Mgb24gYSBsaW5rXG4gICAqXG4gICAqIEl0J3Mgbm90IGNhbGxlZCB3aGVuIHVybCBpcyBjaGFuZ2VkIGJ5ICRicm93c2VyLnVybCgpIG1ldGhvZFxuICAgKlxuICAgKiBUaGUgbGlzdGVuZXIgZ2V0cyBjYWxsZWQgd2l0aCBuZXcgdXJsIGFzIHBhcmFtZXRlci5cbiAgICpcbiAgICogTk9URTogdGhpcyBhcGkgaXMgaW50ZW5kZWQgZm9yIHVzZSBvbmx5IGJ5IHRoZSAkbG9jYXRpb24gc2VydmljZS4gUGxlYXNlIHVzZSB0aGVcbiAgICoge0BsaW5rIG5nLiRsb2NhdGlvbiAkbG9jYXRpb24gc2VydmljZX0gdG8gbW9uaXRvciB1cmwgY2hhbmdlcyBpbiBhbmd1bGFyIGFwcHMuXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oc3RyaW5nKX0gbGlzdGVuZXIgTGlzdGVuZXIgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdXJsIGNoYW5nZXMuXG4gICAqIEByZXR1cm4ge2Z1bmN0aW9uKHN0cmluZyl9IFJldHVybnMgdGhlIHJlZ2lzdGVyZWQgbGlzdGVuZXIgZm4gLSBoYW5keSBpZiB0aGUgZm4gaXMgYW5vbnltb3VzLlxuICAgKi9cbiAgc2VsZi5vblVybENoYW5nZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgLy8gVE9ETyh2b2p0YSk6IHJlZmFjdG9yIHRvIHVzZSBub2RlJ3Mgc3ludGF4IGZvciBldmVudHNcbiAgICBpZiAoIXVybENoYW5nZUluaXQpIHtcbiAgICAgIC8vIFdlIGxpc3RlbiBvbiBib3RoIChoYXNoY2hhbmdlL3BvcHN0YXRlKSB3aGVuIGF2YWlsYWJsZSwgYXMgc29tZSBicm93c2VycyAoZS5nLiBPcGVyYSlcbiAgICAgIC8vIGRvbid0IGZpcmUgcG9wc3RhdGUgd2hlbiB1c2VyIGNoYW5nZSB0aGUgYWRkcmVzcyBiYXIgYW5kIGRvbid0IGZpcmUgaGFzaGNoYW5nZSB3aGVuIHVybFxuICAgICAgLy8gY2hhbmdlZCBieSBwdXNoL3JlcGxhY2VTdGF0ZVxuXG4gICAgICAvLyBodG1sNSBoaXN0b3J5IGFwaSAtIHBvcHN0YXRlIGV2ZW50XG4gICAgICBpZiAoJHNuaWZmZXIuaGlzdG9yeSkganFMaXRlKHdpbmRvdykub24oJ3BvcHN0YXRlJywgY2FjaGVTdGF0ZUFuZEZpcmVVcmxDaGFuZ2UpO1xuICAgICAgLy8gaGFzaGNoYW5nZSBldmVudFxuICAgICAganFMaXRlKHdpbmRvdykub24oJ2hhc2hjaGFuZ2UnLCBjYWNoZVN0YXRlQW5kRmlyZVVybENoYW5nZSk7XG5cbiAgICAgIHVybENoYW5nZUluaXQgPSB0cnVlO1xuICAgIH1cblxuICAgIHVybENoYW5nZUxpc3RlbmVycy5wdXNoKGNhbGxiYWNrKTtcbiAgICByZXR1cm4gY2FsbGJhY2s7XG4gIH07XG5cbiAgLyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIHRoZSB1cmwgaGFzIGNoYW5nZWQgb3V0c2lkZSBvZiBBbmd1bGFyLlxuICAgKiBOZWVkcyB0byBiZSBleHBvcnRlZCB0byBiZSBhYmxlIHRvIGNoZWNrIGZvciBjaGFuZ2VzIHRoYXQgaGF2ZSBiZWVuIGRvbmUgaW4gc3luYyxcbiAgICogYXMgaGFzaGNoYW5nZS9wb3BzdGF0ZSBldmVudHMgZmlyZSBpbiBhc3luYy5cbiAgICovXG4gIHNlbGYuJCRjaGVja1VybENoYW5nZSA9IGZpcmVVcmxDaGFuZ2U7XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gTWlzYyBBUElcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAvKipcbiAgICogQG5hbWUgJGJyb3dzZXIjYmFzZUhyZWZcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJldHVybnMgY3VycmVudCA8YmFzZSBocmVmPlxuICAgKiAoYWx3YXlzIHJlbGF0aXZlIC0gd2l0aG91dCBkb21haW4pXG4gICAqXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjdXJyZW50IGJhc2UgaHJlZlxuICAgKi9cbiAgc2VsZi5iYXNlSHJlZiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBocmVmID0gYmFzZUVsZW1lbnQuYXR0cignaHJlZicpO1xuICAgIHJldHVybiBocmVmID8gaHJlZi5yZXBsYWNlKC9eKGh0dHBzP1xcOik/XFwvXFwvW15cXC9dKi8sICcnKSA6ICcnO1xuICB9O1xuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIENvb2tpZXMgQVBJXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIHZhciBsYXN0Q29va2llcyA9IHt9O1xuICB2YXIgbGFzdENvb2tpZVN0cmluZyA9ICcnO1xuICB2YXIgY29va2llUGF0aCA9IHNlbGYuYmFzZUhyZWYoKTtcblxuICBmdW5jdGlvbiBzYWZlRGVjb2RlVVJJQ29tcG9uZW50KHN0cikge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHN0cik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG5hbWUgJGJyb3dzZXIjY29va2llc1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgQ29va2llIG5hbWVcbiAgICogQHBhcmFtIHtzdHJpbmc9fSB2YWx1ZSBDb29raWUgdmFsdWVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoZSBjb29raWVzIG1ldGhvZCBwcm92aWRlcyBhICdwcml2YXRlJyBsb3cgbGV2ZWwgYWNjZXNzIHRvIGJyb3dzZXIgY29va2llcy5cbiAgICogSXQgaXMgbm90IG1lYW50IHRvIGJlIHVzZWQgZGlyZWN0bHksIHVzZSB0aGUgJGNvb2tpZSBzZXJ2aWNlIGluc3RlYWQuXG4gICAqXG4gICAqIFRoZSByZXR1cm4gdmFsdWVzIHZhcnkgZGVwZW5kaW5nIG9uIHRoZSBhcmd1bWVudHMgdGhhdCB0aGUgbWV0aG9kIHdhcyBjYWxsZWQgd2l0aCBhcyBmb2xsb3dzOlxuICAgKlxuICAgKiAtIGNvb2tpZXMoKSAtPiBoYXNoIG9mIGFsbCBjb29raWVzLCB0aGlzIGlzIE5PVCBhIGNvcHkgb2YgdGhlIGludGVybmFsIHN0YXRlLCBzbyBkbyBub3QgbW9kaWZ5XG4gICAqICAgaXRcbiAgICogLSBjb29raWVzKG5hbWUsIHZhbHVlKSAtPiBzZXQgbmFtZSB0byB2YWx1ZSwgaWYgdmFsdWUgaXMgdW5kZWZpbmVkIGRlbGV0ZSB0aGUgY29va2llXG4gICAqIC0gY29va2llcyhuYW1lKSAtPiB0aGUgc2FtZSBhcyAobmFtZSwgdW5kZWZpbmVkKSA9PSBERUxFVEVTIChubyBvbmUgY2FsbHMgaXQgcmlnaHQgbm93IHRoYXRcbiAgICogICB3YXkpXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IEhhc2ggb2YgYWxsIGNvb2tpZXMgKGlmIGNhbGxlZCB3aXRob3V0IGFueSBwYXJhbWV0ZXIpXG4gICAqL1xuICBzZWxmLmNvb2tpZXMgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgIHZhciBjb29raWVMZW5ndGgsIGNvb2tpZUFycmF5LCBjb29raWUsIGksIGluZGV4O1xuXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJhd0RvY3VtZW50LmNvb2tpZSA9IGVuY29kZVVSSUNvbXBvbmVudChuYW1lKSArIFwiPTtwYXRoPVwiICsgY29va2llUGF0aCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiO2V4cGlyZXM9VGh1LCAwMSBKYW4gMTk3MCAwMDowMDowMCBHTVRcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgICBjb29raWVMZW5ndGggPSAocmF3RG9jdW1lbnQuY29va2llID0gZW5jb2RlVVJJQ29tcG9uZW50KG5hbWUpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc7cGF0aD0nICsgY29va2llUGF0aCkubGVuZ3RoICsgMTtcblxuICAgICAgICAgIC8vIHBlciBodHRwOi8vd3d3LmlldGYub3JnL3JmYy9yZmMyMTA5LnR4dCBicm93c2VyIG11c3QgYWxsb3cgYXQgbWluaW11bTpcbiAgICAgICAgICAvLyAtIDMwMCBjb29raWVzXG4gICAgICAgICAgLy8gLSAyMCBjb29raWVzIHBlciB1bmlxdWUgZG9tYWluXG4gICAgICAgICAgLy8gLSA0MDk2IGJ5dGVzIHBlciBjb29raWVcbiAgICAgICAgICBpZiAoY29va2llTGVuZ3RoID4gNDA5Nikge1xuICAgICAgICAgICAgJGxvZy53YXJuKFwiQ29va2llICdcIiArIG5hbWUgK1xuICAgICAgICAgICAgICBcIicgcG9zc2libHkgbm90IHNldCBvciBvdmVyZmxvd2VkIGJlY2F1c2UgaXQgd2FzIHRvbyBsYXJnZSAoXCIgK1xuICAgICAgICAgICAgICBjb29raWVMZW5ndGggKyBcIiA+IDQwOTYgYnl0ZXMpIVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHJhd0RvY3VtZW50LmNvb2tpZSAhPT0gbGFzdENvb2tpZVN0cmluZykge1xuICAgICAgICBsYXN0Q29va2llU3RyaW5nID0gcmF3RG9jdW1lbnQuY29va2llO1xuICAgICAgICBjb29raWVBcnJheSA9IGxhc3RDb29raWVTdHJpbmcuc3BsaXQoXCI7IFwiKTtcbiAgICAgICAgbGFzdENvb2tpZXMgPSB7fTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29va2llQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb29raWUgPSBjb29raWVBcnJheVtpXTtcbiAgICAgICAgICBpbmRleCA9IGNvb2tpZS5pbmRleE9mKCc9Jyk7XG4gICAgICAgICAgaWYgKGluZGV4ID4gMCkgeyAvL2lnbm9yZSBuYW1lbGVzcyBjb29raWVzXG4gICAgICAgICAgICBuYW1lID0gc2FmZURlY29kZVVSSUNvbXBvbmVudChjb29raWUuc3Vic3RyaW5nKDAsIGluZGV4KSk7XG4gICAgICAgICAgICAvLyB0aGUgZmlyc3QgdmFsdWUgdGhhdCBpcyBzZWVuIGZvciBhIGNvb2tpZSBpcyB0aGUgbW9zdFxuICAgICAgICAgICAgLy8gc3BlY2lmaWMgb25lLiAgdmFsdWVzIGZvciB0aGUgc2FtZSBjb29raWUgbmFtZSB0aGF0XG4gICAgICAgICAgICAvLyBmb2xsb3cgYXJlIGZvciBsZXNzIHNwZWNpZmljIHBhdGhzLlxuICAgICAgICAgICAgaWYgKGxhc3RDb29raWVzW25hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgbGFzdENvb2tpZXNbbmFtZV0gPSBzYWZlRGVjb2RlVVJJQ29tcG9uZW50KGNvb2tpZS5zdWJzdHJpbmcoaW5kZXggKyAxKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbGFzdENvb2tpZXM7XG4gICAgfVxuICB9O1xuXG5cbiAgLyoqXG4gICAqIEBuYW1lICRicm93c2VyI2RlZmVyXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gZm4gQSBmdW5jdGlvbiwgd2hvJ3MgZXhlY3V0aW9uIHNob3VsZCBiZSBkZWZlcnJlZC5cbiAgICogQHBhcmFtIHtudW1iZXI9fSBbZGVsYXk9MF0gb2YgbWlsbGlzZWNvbmRzIHRvIGRlZmVyIHRoZSBmdW5jdGlvbiBleGVjdXRpb24uXG4gICAqIEByZXR1cm5zIHsqfSBEZWZlcklkIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2FuY2VsIHRoZSB0YXNrIHZpYSBgJGJyb3dzZXIuZGVmZXIuY2FuY2VsKClgLlxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogRXhlY3V0ZXMgYSBmbiBhc3luY2hyb25vdXNseSB2aWEgYHNldFRpbWVvdXQoZm4sIGRlbGF5KWAuXG4gICAqXG4gICAqIFVubGlrZSB3aGVuIGNhbGxpbmcgYHNldFRpbWVvdXRgIGRpcmVjdGx5LCBpbiB0ZXN0IHRoaXMgZnVuY3Rpb24gaXMgbW9ja2VkIGFuZCBpbnN0ZWFkIG9mIHVzaW5nXG4gICAqIGBzZXRUaW1lb3V0YCBpbiB0ZXN0cywgdGhlIGZucyBhcmUgcXVldWVkIGluIGFuIGFycmF5LCB3aGljaCBjYW4gYmUgcHJvZ3JhbW1hdGljYWxseSBmbHVzaGVkXG4gICAqIHZpYSBgJGJyb3dzZXIuZGVmZXIuZmx1c2goKWAuXG4gICAqXG4gICAqL1xuICBzZWxmLmRlZmVyID0gZnVuY3Rpb24oZm4sIGRlbGF5KSB7XG4gICAgdmFyIHRpbWVvdXRJZDtcbiAgICBvdXRzdGFuZGluZ1JlcXVlc3RDb3VudCsrO1xuICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBkZWxldGUgcGVuZGluZ0RlZmVySWRzW3RpbWVvdXRJZF07XG4gICAgICBjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdChmbik7XG4gICAgfSwgZGVsYXkgfHwgMCk7XG4gICAgcGVuZGluZ0RlZmVySWRzW3RpbWVvdXRJZF0gPSB0cnVlO1xuICAgIHJldHVybiB0aW1lb3V0SWQ7XG4gIH07XG5cblxuICAvKipcbiAgICogQG5hbWUgJGJyb3dzZXIjZGVmZXIuY2FuY2VsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDYW5jZWxzIGEgZGVmZXJyZWQgdGFzayBpZGVudGlmaWVkIHdpdGggYGRlZmVySWRgLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IGRlZmVySWQgVG9rZW4gcmV0dXJuZWQgYnkgdGhlIGAkYnJvd3Nlci5kZWZlcmAgZnVuY3Rpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdGFzayBoYXNuJ3QgZXhlY3V0ZWQgeWV0IGFuZCB3YXMgc3VjY2Vzc2Z1bGx5XG4gICAqICAgICAgICAgICAgICAgICAgICBjYW5jZWxlZC5cbiAgICovXG4gIHNlbGYuZGVmZXIuY2FuY2VsID0gZnVuY3Rpb24oZGVmZXJJZCkge1xuICAgIGlmIChwZW5kaW5nRGVmZXJJZHNbZGVmZXJJZF0pIHtcbiAgICAgIGRlbGV0ZSBwZW5kaW5nRGVmZXJJZHNbZGVmZXJJZF07XG4gICAgICBjbGVhclRpbWVvdXQoZGVmZXJJZCk7XG4gICAgICBjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdChub29wKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbn1cblxuZnVuY3Rpb24gJEJyb3dzZXJQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckd2luZG93JywgJyRsb2cnLCAnJHNuaWZmZXInLCAnJGRvY3VtZW50JyxcbiAgICAgIGZ1bmN0aW9uKCR3aW5kb3csICRsb2csICRzbmlmZmVyLCAkZG9jdW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBCcm93c2VyKCR3aW5kb3csICRkb2N1bWVudCwgJGxvZywgJHNuaWZmZXIpO1xuICAgICAgfV07XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRjYWNoZUZhY3RvcnlcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEZhY3RvcnkgdGhhdCBjb25zdHJ1Y3RzIHtAbGluayAkY2FjaGVGYWN0b3J5LkNhY2hlIENhY2hlfSBvYmplY3RzIGFuZCBnaXZlcyBhY2Nlc3MgdG9cbiAqIHRoZW0uXG4gKlxuICogYGBganNcbiAqXG4gKiAgdmFyIGNhY2hlID0gJGNhY2hlRmFjdG9yeSgnY2FjaGVJZCcpO1xuICogIGV4cGVjdCgkY2FjaGVGYWN0b3J5LmdldCgnY2FjaGVJZCcpKS50b0JlKGNhY2hlKTtcbiAqICBleHBlY3QoJGNhY2hlRmFjdG9yeS5nZXQoJ25vU3VjaENhY2hlSWQnKSkubm90LnRvQmVEZWZpbmVkKCk7XG4gKlxuICogIGNhY2hlLnB1dChcImtleVwiLCBcInZhbHVlXCIpO1xuICogIGNhY2hlLnB1dChcImFub3RoZXIga2V5XCIsIFwiYW5vdGhlciB2YWx1ZVwiKTtcbiAqXG4gKiAgLy8gV2UndmUgc3BlY2lmaWVkIG5vIG9wdGlvbnMgb24gY3JlYXRpb25cbiAqICBleHBlY3QoY2FjaGUuaW5mbygpKS50b0VxdWFsKHtpZDogJ2NhY2hlSWQnLCBzaXplOiAyfSk7XG4gKlxuICogYGBgXG4gKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjYWNoZUlkIE5hbWUgb3IgaWQgb2YgdGhlIG5ld2x5IGNyZWF0ZWQgY2FjaGUuXG4gKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgT3B0aW9ucyBvYmplY3QgdGhhdCBzcGVjaWZpZXMgdGhlIGNhY2hlIGJlaGF2aW9yLiBQcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBge251bWJlcj19YCBgY2FwYWNpdHlgIOKAlCB0dXJucyB0aGUgY2FjaGUgaW50byBMUlUgY2FjaGUuXG4gKlxuICogQHJldHVybnMge29iamVjdH0gTmV3bHkgY3JlYXRlZCBjYWNoZSBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHNldCBvZiBtZXRob2RzOlxuICpcbiAqIC0gYHtvYmplY3R9YCBgaW5mbygpYCDigJQgUmV0dXJucyBpZCwgc2l6ZSwgYW5kIG9wdGlvbnMgb2YgY2FjaGUuXG4gKiAtIGB7eyp9fWAgYHB1dCh7c3RyaW5nfSBrZXksIHsqfSB2YWx1ZSlgIOKAlCBQdXRzIGEgbmV3IGtleS12YWx1ZSBwYWlyIGludG8gdGhlIGNhY2hlIGFuZCByZXR1cm5zXG4gKiAgIGl0LlxuICogLSBge3sqfX1gIGBnZXQoe3N0cmluZ30ga2V5KWAg4oCUIFJldHVybnMgY2FjaGVkIHZhbHVlIGZvciBga2V5YCBvciB1bmRlZmluZWQgZm9yIGNhY2hlIG1pc3MuXG4gKiAtIGB7dm9pZH1gIGByZW1vdmUoe3N0cmluZ30ga2V5KWAg4oCUIFJlbW92ZXMgYSBrZXktdmFsdWUgcGFpciBmcm9tIHRoZSBjYWNoZS5cbiAqIC0gYHt2b2lkfWAgYHJlbW92ZUFsbCgpYCDigJQgUmVtb3ZlcyBhbGwgY2FjaGVkIHZhbHVlcy5cbiAqIC0gYHt2b2lkfWAgYGRlc3Ryb3koKWAg4oCUIFJlbW92ZXMgcmVmZXJlbmNlcyB0byB0aGlzIGNhY2hlIGZyb20gJGNhY2hlRmFjdG9yeS5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwiY2FjaGVFeGFtcGxlQXBwXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiQ2FjaGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJuZXdDYWNoZUtleVwiIHBsYWNlaG9sZGVyPVwiS2V5XCI+XG4gICAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJuZXdDYWNoZVZhbHVlXCIgcGxhY2Vob2xkZXI9XCJWYWx1ZVwiPlxuICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInB1dChuZXdDYWNoZUtleSwgbmV3Q2FjaGVWYWx1ZSlcIj5DYWNoZTwvYnV0dG9uPlxuXG4gICAgICAgICA8cCBuZy1pZj1cImtleXMubGVuZ3RoXCI+Q2FjaGVkIFZhbHVlczwvcD5cbiAgICAgICAgIDxkaXYgbmctcmVwZWF0PVwia2V5IGluIGtleXNcIj5cbiAgICAgICAgICAgPHNwYW4gbmctYmluZD1cImtleVwiPjwvc3Bhbj5cbiAgICAgICAgICAgPHNwYW4+OiA8L3NwYW4+XG4gICAgICAgICAgIDxiIG5nLWJpbmQ9XCJjYWNoZS5nZXQoa2V5KVwiPjwvYj5cbiAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICA8cD5DYWNoZSBJbmZvPC9wPlxuICAgICAgICAgPGRpdiBuZy1yZXBlYXQ9XCIoa2V5LCB2YWx1ZSkgaW4gY2FjaGUuaW5mbygpXCI+XG4gICAgICAgICAgIDxzcGFuIG5nLWJpbmQ9XCJrZXlcIj48L3NwYW4+XG4gICAgICAgICAgIDxzcGFuPjogPC9zcGFuPlxuICAgICAgICAgICA8YiBuZy1iaW5kPVwidmFsdWVcIj48L2I+XG4gICAgICAgICA8L2Rpdj5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgYW5ndWxhci5tb2R1bGUoJ2NhY2hlRXhhbXBsZUFwcCcsIFtdKS5cbiAgICAgICAgIGNvbnRyb2xsZXIoJ0NhY2hlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRjYWNoZUZhY3RvcnknLCBmdW5jdGlvbigkc2NvcGUsICRjYWNoZUZhY3RvcnkpIHtcbiAgICAgICAgICAgJHNjb3BlLmtleXMgPSBbXTtcbiAgICAgICAgICAgJHNjb3BlLmNhY2hlID0gJGNhY2hlRmFjdG9yeSgnY2FjaGVJZCcpO1xuICAgICAgICAgICAkc2NvcGUucHV0ID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgIGlmICgkc2NvcGUuY2FjaGUuZ2V0KGtleSkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgJHNjb3BlLmtleXMucHVzaChrZXkpO1xuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAkc2NvcGUuY2FjaGUucHV0KGtleSwgdmFsdWUgPT09IHVuZGVmaW5lZCA/IG51bGwgOiB2YWx1ZSk7XG4gICAgICAgICAgIH07XG4gICAgICAgICB9XSk7XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInN0eWxlLmNzc1wiPlxuICAgICAgIHAge1xuICAgICAgICAgbWFyZ2luOiAxMHB4IDAgM3B4O1xuICAgICAgIH1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5mdW5jdGlvbiAkQ2FjaGVGYWN0b3J5UHJvdmlkZXIoKSB7XG5cbiAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNhY2hlcyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gY2FjaGVGYWN0b3J5KGNhY2hlSWQsIG9wdGlvbnMpIHtcbiAgICAgIGlmIChjYWNoZUlkIGluIGNhY2hlcykge1xuICAgICAgICB0aHJvdyBtaW5FcnIoJyRjYWNoZUZhY3RvcnknKSgnaWlkJywgXCJDYWNoZUlkICd7MH0nIGlzIGFscmVhZHkgdGFrZW4hXCIsIGNhY2hlSWQpO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2l6ZSA9IDAsXG4gICAgICAgICAgc3RhdHMgPSBleHRlbmQoe30sIG9wdGlvbnMsIHtpZDogY2FjaGVJZH0pLFxuICAgICAgICAgIGRhdGEgPSB7fSxcbiAgICAgICAgICBjYXBhY2l0eSA9IChvcHRpb25zICYmIG9wdGlvbnMuY2FwYWNpdHkpIHx8IE51bWJlci5NQVhfVkFMVUUsXG4gICAgICAgICAgbHJ1SGFzaCA9IHt9LFxuICAgICAgICAgIGZyZXNoRW5kID0gbnVsbCxcbiAgICAgICAgICBzdGFsZUVuZCA9IG51bGw7XG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIHR5cGVcbiAgICAgICAqIEBuYW1lICRjYWNoZUZhY3RvcnkuQ2FjaGVcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIEEgY2FjaGUgb2JqZWN0IHVzZWQgdG8gc3RvcmUgYW5kIHJldHJpZXZlIGRhdGEsIHByaW1hcmlseSB1c2VkIGJ5XG4gICAgICAgKiB7QGxpbmsgJGh0dHAgJGh0dHB9IGFuZCB0aGUge0BsaW5rIG5nLmRpcmVjdGl2ZTpzY3JpcHQgc2NyaXB0fSBkaXJlY3RpdmUgdG8gY2FjaGVcbiAgICAgICAqIHRlbXBsYXRlcyBhbmQgb3RoZXIgZGF0YS5cbiAgICAgICAqXG4gICAgICAgKiBgYGBqc1xuICAgICAgICogIGFuZ3VsYXIubW9kdWxlKCdzdXBlckNhY2hlJylcbiAgICAgICAqICAgIC5mYWN0b3J5KCdzdXBlckNhY2hlJywgWyckY2FjaGVGYWN0b3J5JywgZnVuY3Rpb24oJGNhY2hlRmFjdG9yeSkge1xuICAgICAgICogICAgICByZXR1cm4gJGNhY2hlRmFjdG9yeSgnc3VwZXItY2FjaGUnKTtcbiAgICAgICAqICAgIH1dKTtcbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqIEV4YW1wbGUgdGVzdDpcbiAgICAgICAqXG4gICAgICAgKiBgYGBqc1xuICAgICAgICogIGl0KCdzaG91bGQgYmVoYXZlIGxpa2UgYSBjYWNoZScsIGluamVjdChmdW5jdGlvbihzdXBlckNhY2hlKSB7XG4gICAgICAgKiAgICBzdXBlckNhY2hlLnB1dCgna2V5JywgJ3ZhbHVlJyk7XG4gICAgICAgKiAgICBzdXBlckNhY2hlLnB1dCgnYW5vdGhlciBrZXknLCAnYW5vdGhlciB2YWx1ZScpO1xuICAgICAgICpcbiAgICAgICAqICAgIGV4cGVjdChzdXBlckNhY2hlLmluZm8oKSkudG9FcXVhbCh7XG4gICAgICAgKiAgICAgIGlkOiAnc3VwZXItY2FjaGUnLFxuICAgICAgICogICAgICBzaXplOiAyXG4gICAgICAgKiAgICB9KTtcbiAgICAgICAqXG4gICAgICAgKiAgICBzdXBlckNhY2hlLnJlbW92ZSgnYW5vdGhlciBrZXknKTtcbiAgICAgICAqICAgIGV4cGVjdChzdXBlckNhY2hlLmdldCgnYW5vdGhlciBrZXknKSkudG9CZVVuZGVmaW5lZCgpO1xuICAgICAgICpcbiAgICAgICAqICAgIHN1cGVyQ2FjaGUucmVtb3ZlQWxsKCk7XG4gICAgICAgKiAgICBleHBlY3Qoc3VwZXJDYWNoZS5pbmZvKCkpLnRvRXF1YWwoe1xuICAgICAgICogICAgICBpZDogJ3N1cGVyLWNhY2hlJyxcbiAgICAgICAqICAgICAgc2l6ZTogMFxuICAgICAgICogICAgfSk7XG4gICAgICAgKiAgfSkpO1xuICAgICAgICogYGBgXG4gICAgICAgKi9cbiAgICAgIHJldHVybiBjYWNoZXNbY2FjaGVJZF0gPSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGNhY2hlRmFjdG9yeS5DYWNoZSNwdXRcbiAgICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIEluc2VydHMgYSBuYW1lZCBlbnRyeSBpbnRvIHRoZSB7QGxpbmsgJGNhY2hlRmFjdG9yeS5DYWNoZSBDYWNoZX0gb2JqZWN0IHRvIGJlXG4gICAgICAgICAqIHJldHJpZXZlZCBsYXRlciwgYW5kIGluY3JlbWVudGluZyB0aGUgc2l6ZSBvZiB0aGUgY2FjaGUgaWYgdGhlIGtleSB3YXMgbm90IGFscmVhZHlcbiAgICAgICAgICogcHJlc2VudCBpbiB0aGUgY2FjaGUuIElmIGJlaGF2aW5nIGxpa2UgYW4gTFJVIGNhY2hlLCBpdCB3aWxsIGFsc28gcmVtb3ZlIHN0YWxlXG4gICAgICAgICAqIGVudHJpZXMgZnJvbSB0aGUgc2V0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBJdCB3aWxsIG5vdCBpbnNlcnQgdW5kZWZpbmVkIHZhbHVlcyBpbnRvIHRoZSBjYWNoZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSB0aGUga2V5IHVuZGVyIHdoaWNoIHRoZSBjYWNoZWQgZGF0YSBpcyBzdG9yZWQuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgdGhlIHZhbHVlIHRvIHN0b3JlIGFsb25nc2lkZSB0aGUga2V5LiBJZiBpdCBpcyB1bmRlZmluZWQsIHRoZSBrZXlcbiAgICAgICAgICogICAgd2lsbCBub3QgYmUgc3RvcmVkLlxuICAgICAgICAgKiBAcmV0dXJucyB7Kn0gdGhlIHZhbHVlIHN0b3JlZC5cbiAgICAgICAgICovXG4gICAgICAgIHB1dDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgIGlmIChjYXBhY2l0eSA8IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgICAgIHZhciBscnVFbnRyeSA9IGxydUhhc2hba2V5XSB8fCAobHJ1SGFzaFtrZXldID0ge2tleToga2V5fSk7XG5cbiAgICAgICAgICAgIHJlZnJlc2gobHJ1RW50cnkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpIHJldHVybjtcbiAgICAgICAgICBpZiAoIShrZXkgaW4gZGF0YSkpIHNpemUrKztcbiAgICAgICAgICBkYXRhW2tleV0gPSB2YWx1ZTtcblxuICAgICAgICAgIGlmIChzaXplID4gY2FwYWNpdHkpIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKHN0YWxlRW5kLmtleSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAqIEBuYW1lICRjYWNoZUZhY3RvcnkuQ2FjaGUjZ2V0XG4gICAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiBSZXRyaWV2ZXMgbmFtZWQgZGF0YSBzdG9yZWQgaW4gdGhlIHtAbGluayAkY2FjaGVGYWN0b3J5LkNhY2hlIENhY2hlfSBvYmplY3QuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgdGhlIGtleSBvZiB0aGUgZGF0YSB0byBiZSByZXRyaWV2ZWRcbiAgICAgICAgICogQHJldHVybnMgeyp9IHRoZSB2YWx1ZSBzdG9yZWQuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgIGlmIChjYXBhY2l0eSA8IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgICAgIHZhciBscnVFbnRyeSA9IGxydUhhc2hba2V5XTtcblxuICAgICAgICAgICAgaWYgKCFscnVFbnRyeSkgcmV0dXJuO1xuXG4gICAgICAgICAgICByZWZyZXNoKGxydUVudHJ5KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gZGF0YVtrZXldO1xuICAgICAgICB9LFxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGNhY2hlRmFjdG9yeS5DYWNoZSNyZW1vdmVcbiAgICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIFJlbW92ZXMgYW4gZW50cnkgZnJvbSB0aGUge0BsaW5rICRjYWNoZUZhY3RvcnkuQ2FjaGUgQ2FjaGV9IG9iamVjdC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSB0aGUga2V5IG9mIHRoZSBlbnRyeSB0byBiZSByZW1vdmVkXG4gICAgICAgICAqL1xuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgIGlmIChjYXBhY2l0eSA8IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgICAgIHZhciBscnVFbnRyeSA9IGxydUhhc2hba2V5XTtcblxuICAgICAgICAgICAgaWYgKCFscnVFbnRyeSkgcmV0dXJuO1xuXG4gICAgICAgICAgICBpZiAobHJ1RW50cnkgPT0gZnJlc2hFbmQpIGZyZXNoRW5kID0gbHJ1RW50cnkucDtcbiAgICAgICAgICAgIGlmIChscnVFbnRyeSA9PSBzdGFsZUVuZCkgc3RhbGVFbmQgPSBscnVFbnRyeS5uO1xuICAgICAgICAgICAgbGluayhscnVFbnRyeS5uLGxydUVudHJ5LnApO1xuXG4gICAgICAgICAgICBkZWxldGUgbHJ1SGFzaFtrZXldO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRlbGV0ZSBkYXRhW2tleV07XG4gICAgICAgICAgc2l6ZS0tO1xuICAgICAgICB9LFxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGNhY2hlRmFjdG9yeS5DYWNoZSNyZW1vdmVBbGxcbiAgICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIENsZWFycyB0aGUgY2FjaGUgb2JqZWN0IG9mIGFueSBlbnRyaWVzLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVtb3ZlQWxsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBkYXRhID0ge307XG4gICAgICAgICAgc2l6ZSA9IDA7XG4gICAgICAgICAgbHJ1SGFzaCA9IHt9O1xuICAgICAgICAgIGZyZXNoRW5kID0gc3RhbGVFbmQgPSBudWxsO1xuICAgICAgICB9LFxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGNhY2hlRmFjdG9yeS5DYWNoZSNkZXN0cm95XG4gICAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiBEZXN0cm95cyB0aGUge0BsaW5rICRjYWNoZUZhY3RvcnkuQ2FjaGUgQ2FjaGV9IG9iamVjdCBlbnRpcmVseSxcbiAgICAgICAgICogcmVtb3ZpbmcgaXQgZnJvbSB0aGUge0BsaW5rICRjYWNoZUZhY3RvcnkgJGNhY2hlRmFjdG9yeX0gc2V0LlxuICAgICAgICAgKi9cbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZGF0YSA9IG51bGw7XG4gICAgICAgICAgc3RhdHMgPSBudWxsO1xuICAgICAgICAgIGxydUhhc2ggPSBudWxsO1xuICAgICAgICAgIGRlbGV0ZSBjYWNoZXNbY2FjaGVJZF07XG4gICAgICAgIH0sXG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5LkNhY2hlI2luZm9cbiAgICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIFJldHJpZXZlIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBhIHBhcnRpY3VsYXIge0BsaW5rICRjYWNoZUZhY3RvcnkuQ2FjaGUgQ2FjaGV9LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7b2JqZWN0fSBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAgICAgICAqICAgPHVsPlxuICAgICAgICAgKiAgICAgPGxpPioqaWQqKjogdGhlIGlkIG9mIHRoZSBjYWNoZSBpbnN0YW5jZTwvbGk+XG4gICAgICAgICAqICAgICA8bGk+KipzaXplKio6IHRoZSBudW1iZXIgb2YgZW50cmllcyBrZXB0IGluIHRoZSBjYWNoZSBpbnN0YW5jZTwvbGk+XG4gICAgICAgICAqICAgICA8bGk+KiouLi4qKjogYW55IGFkZGl0aW9uYWwgcHJvcGVydGllcyBmcm9tIHRoZSBvcHRpb25zIG9iamVjdCB3aGVuIGNyZWF0aW5nIHRoZVxuICAgICAgICAgKiAgICAgICBjYWNoZS48L2xpPlxuICAgICAgICAgKiAgIDwvdWw+XG4gICAgICAgICAqL1xuICAgICAgICBpbmZvOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gZXh0ZW5kKHt9LCBzdGF0cywge3NpemU6IHNpemV9KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuXG4gICAgICAvKipcbiAgICAgICAqIG1ha2VzIHRoZSBgZW50cnlgIHRoZSBmcmVzaEVuZCBvZiB0aGUgTFJVIGxpbmtlZCBsaXN0XG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlZnJlc2goZW50cnkpIHtcbiAgICAgICAgaWYgKGVudHJ5ICE9IGZyZXNoRW5kKSB7XG4gICAgICAgICAgaWYgKCFzdGFsZUVuZCkge1xuICAgICAgICAgICAgc3RhbGVFbmQgPSBlbnRyeTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHN0YWxlRW5kID09IGVudHJ5KSB7XG4gICAgICAgICAgICBzdGFsZUVuZCA9IGVudHJ5Lm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbGluayhlbnRyeS5uLCBlbnRyeS5wKTtcbiAgICAgICAgICBsaW5rKGVudHJ5LCBmcmVzaEVuZCk7XG4gICAgICAgICAgZnJlc2hFbmQgPSBlbnRyeTtcbiAgICAgICAgICBmcmVzaEVuZC5uID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG5cbiAgICAgIC8qKlxuICAgICAgICogYmlkaXJlY3Rpb25hbGx5IGxpbmtzIHR3byBlbnRyaWVzIG9mIHRoZSBMUlUgbGlua2VkIGxpc3RcbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gbGluayhuZXh0RW50cnksIHByZXZFbnRyeSkge1xuICAgICAgICBpZiAobmV4dEVudHJ5ICE9IHByZXZFbnRyeSkge1xuICAgICAgICAgIGlmIChuZXh0RW50cnkpIG5leHRFbnRyeS5wID0gcHJldkVudHJ5OyAvL3Agc3RhbmRzIGZvciBwcmV2aW91cywgJ3ByZXYnIGRpZG4ndCBtaW5pZnlcbiAgICAgICAgICBpZiAocHJldkVudHJ5KSBwcmV2RW50cnkubiA9IG5leHRFbnRyeTsgLy9uIHN0YW5kcyBmb3IgbmV4dCwgJ25leHQnIGRpZG4ndCBtaW5pZnlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRjYWNoZUZhY3RvcnkjaW5mb1xuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogR2V0IGluZm9ybWF0aW9uIGFib3V0IGFsbCB0aGUgY2FjaGVzIHRoYXQgaGF2ZSBiZWVuIGNyZWF0ZWRcbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gLSBrZXktdmFsdWUgbWFwIG9mIGBjYWNoZUlkYCB0byB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgYGNhY2hlI2luZm9gXG4gICAqL1xuICAgIGNhY2hlRmFjdG9yeS5pbmZvID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaW5mbyA9IHt9O1xuICAgICAgZm9yRWFjaChjYWNoZXMsIGZ1bmN0aW9uKGNhY2hlLCBjYWNoZUlkKSB7XG4gICAgICAgIGluZm9bY2FjaGVJZF0gPSBjYWNoZS5pbmZvKCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH07XG5cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5I2dldFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogR2V0IGFjY2VzcyB0byBhIGNhY2hlIG9iamVjdCBieSB0aGUgYGNhY2hlSWRgIHVzZWQgd2hlbiBpdCB3YXMgY3JlYXRlZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNhY2hlSWQgTmFtZSBvciBpZCBvZiBhIGNhY2hlIHRvIGFjY2Vzcy5cbiAgICogQHJldHVybnMge29iamVjdH0gQ2FjaGUgb2JqZWN0IGlkZW50aWZpZWQgYnkgdGhlIGNhY2hlSWQgb3IgdW5kZWZpbmVkIGlmIG5vIHN1Y2ggY2FjaGUuXG4gICAqL1xuICAgIGNhY2hlRmFjdG9yeS5nZXQgPSBmdW5jdGlvbihjYWNoZUlkKSB7XG4gICAgICByZXR1cm4gY2FjaGVzW2NhY2hlSWRdO1xuICAgIH07XG5cblxuICAgIHJldHVybiBjYWNoZUZhY3Rvcnk7XG4gIH07XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICR0ZW1wbGF0ZUNhY2hlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgZmlyc3QgdGltZSBhIHRlbXBsYXRlIGlzIHVzZWQsIGl0IGlzIGxvYWRlZCBpbiB0aGUgdGVtcGxhdGUgY2FjaGUgZm9yIHF1aWNrIHJldHJpZXZhbC4gWW91XG4gKiBjYW4gbG9hZCB0ZW1wbGF0ZXMgZGlyZWN0bHkgaW50byB0aGUgY2FjaGUgaW4gYSBgc2NyaXB0YCB0YWcsIG9yIGJ5IGNvbnN1bWluZyB0aGVcbiAqIGAkdGVtcGxhdGVDYWNoZWAgc2VydmljZSBkaXJlY3RseS5cbiAqXG4gKiBBZGRpbmcgdmlhIHRoZSBgc2NyaXB0YCB0YWc6XG4gKlxuICogYGBgaHRtbFxuICogICA8c2NyaXB0IHR5cGU9XCJ0ZXh0L25nLXRlbXBsYXRlXCIgaWQ9XCJ0ZW1wbGF0ZUlkLmh0bWxcIj5cbiAqICAgICA8cD5UaGlzIGlzIHRoZSBjb250ZW50IG9mIHRoZSB0ZW1wbGF0ZTwvcD5cbiAqICAgPC9zY3JpcHQ+XG4gKiBgYGBcbiAqXG4gKiAqKk5vdGU6KiogdGhlIGBzY3JpcHRgIHRhZyBjb250YWluaW5nIHRoZSB0ZW1wbGF0ZSBkb2VzIG5vdCBuZWVkIHRvIGJlIGluY2x1ZGVkIGluIHRoZSBgaGVhZGAgb2ZcbiAqIHRoZSBkb2N1bWVudCwgYnV0IGl0IG11c3QgYmUgYSBkZXNjZW5kZW50IG9mIHRoZSB7QGxpbmsgbmcuJHJvb3RFbGVtZW50ICRyb290RWxlbWVudH0gKElFLFxuICogZWxlbWVudCB3aXRoIG5nLWFwcCBhdHRyaWJ1dGUpLCBvdGhlcndpc2UgdGhlIHRlbXBsYXRlIHdpbGwgYmUgaWdub3JlZC5cbiAqXG4gKiBBZGRpbmcgdmlhIHRoZSAkdGVtcGxhdGVDYWNoZSBzZXJ2aWNlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgbXlBcHAgPSBhbmd1bGFyLm1vZHVsZSgnbXlBcHAnLCBbXSk7XG4gKiBteUFwcC5ydW4oZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAqICAgJHRlbXBsYXRlQ2FjaGUucHV0KCd0ZW1wbGF0ZUlkLmh0bWwnLCAnVGhpcyBpcyB0aGUgY29udGVudCBvZiB0aGUgdGVtcGxhdGUnKTtcbiAqIH0pO1xuICogYGBgXG4gKlxuICogVG8gcmV0cmlldmUgdGhlIHRlbXBsYXRlIGxhdGVyLCBzaW1wbHkgdXNlIGl0IGluIHlvdXIgSFRNTDpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgbmctaW5jbHVkZT1cIiAndGVtcGxhdGVJZC5odG1sJyBcIj48L2Rpdj5cbiAqIGBgYFxuICpcbiAqIG9yIGdldCBpdCB2aWEgSmF2YXNjcmlwdDpcbiAqIGBgYGpzXG4gKiAkdGVtcGxhdGVDYWNoZS5nZXQoJ3RlbXBsYXRlSWQuaHRtbCcpXG4gKiBgYGBcbiAqXG4gKiBTZWUge0BsaW5rIG5nLiRjYWNoZUZhY3RvcnkgJGNhY2hlRmFjdG9yeX0uXG4gKlxuICovXG5mdW5jdGlvbiAkVGVtcGxhdGVDYWNoZVByb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSBbJyRjYWNoZUZhY3RvcnknLCBmdW5jdGlvbigkY2FjaGVGYWN0b3J5KSB7XG4gICAgcmV0dXJuICRjYWNoZUZhY3RvcnkoJ3RlbXBsYXRlcycpO1xuICB9XTtcbn1cblxuLyogISBWQVJJQUJMRS9GVU5DVElPTiBOQU1JTkcgQ09OVkVOVElPTlMgVEhBVCBBUFBMWSBUTyBUSElTIEZJTEUhXG4gKlxuICogRE9NLXJlbGF0ZWQgdmFyaWFibGVzOlxuICpcbiAqIC0gXCJub2RlXCIgLSBET00gTm9kZVxuICogLSBcImVsZW1lbnRcIiAtIERPTSBFbGVtZW50IG9yIE5vZGVcbiAqIC0gXCIkbm9kZVwiIG9yIFwiJGVsZW1lbnRcIiAtIGpxTGl0ZS13cmFwcGVkIG5vZGUgb3IgZWxlbWVudFxuICpcbiAqXG4gKiBDb21waWxlciByZWxhdGVkIHN0dWZmOlxuICpcbiAqIC0gXCJsaW5rRm5cIiAtIGxpbmtpbmcgZm4gb2YgYSBzaW5nbGUgZGlyZWN0aXZlXG4gKiAtIFwibm9kZUxpbmtGblwiIC0gZnVuY3Rpb24gdGhhdCBhZ2dyZWdhdGVzIGFsbCBsaW5raW5nIGZucyBmb3IgYSBwYXJ0aWN1bGFyIG5vZGVcbiAqIC0gXCJjaGlsZExpbmtGblwiIC0gIGZ1bmN0aW9uIHRoYXQgYWdncmVnYXRlcyBhbGwgbGlua2luZyBmbnMgZm9yIGNoaWxkIG5vZGVzIG9mIGEgcGFydGljdWxhciBub2RlXG4gKiAtIFwiY29tcG9zaXRlTGlua0ZuXCIgLSBmdW5jdGlvbiB0aGF0IGFnZ3JlZ2F0ZXMgYWxsIGxpbmtpbmcgZm5zIGZvciBhIGNvbXBpbGF0aW9uIHJvb3QgKG5vZGVMaXN0KVxuICovXG5cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJGNvbXBpbGVcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb21waWxlcyBhbiBIVE1MIHN0cmluZyBvciBET00gaW50byBhIHRlbXBsYXRlIGFuZCBwcm9kdWNlcyBhIHRlbXBsYXRlIGZ1bmN0aW9uLCB3aGljaFxuICogY2FuIHRoZW4gYmUgdXNlZCB0byBsaW5rIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIGBzY29wZWB9IGFuZCB0aGUgdGVtcGxhdGUgdG9nZXRoZXIuXG4gKlxuICogVGhlIGNvbXBpbGF0aW9uIGlzIGEgcHJvY2VzcyBvZiB3YWxraW5nIHRoZSBET00gdHJlZSBhbmQgbWF0Y2hpbmcgRE9NIGVsZW1lbnRzIHRvXG4gKiB7QGxpbmsgbmcuJGNvbXBpbGVQcm92aWRlciNkaXJlY3RpdmUgZGlyZWN0aXZlc30uXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICoqTm90ZToqKiBUaGlzIGRvY3VtZW50IGlzIGFuIGluLWRlcHRoIHJlZmVyZW5jZSBvZiBhbGwgZGlyZWN0aXZlIG9wdGlvbnMuXG4gKiBGb3IgYSBnZW50bGUgaW50cm9kdWN0aW9uIHRvIGRpcmVjdGl2ZXMgd2l0aCBleGFtcGxlcyBvZiBjb21tb24gdXNlIGNhc2VzLFxuICogc2VlIHRoZSB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlIGRpcmVjdGl2ZSBndWlkZX0uXG4gKiA8L2Rpdj5cbiAqXG4gKiAjIyBDb21wcmVoZW5zaXZlIERpcmVjdGl2ZSBBUElcbiAqXG4gKiBUaGVyZSBhcmUgbWFueSBkaWZmZXJlbnQgb3B0aW9ucyBmb3IgYSBkaXJlY3RpdmUuXG4gKlxuICogVGhlIGRpZmZlcmVuY2UgcmVzaWRlcyBpbiB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBmYWN0b3J5IGZ1bmN0aW9uLlxuICogWW91IGNhbiBlaXRoZXIgcmV0dXJuIGEgXCJEaXJlY3RpdmUgRGVmaW5pdGlvbiBPYmplY3RcIiAoc2VlIGJlbG93KSB0aGF0IGRlZmluZXMgdGhlIGRpcmVjdGl2ZSBwcm9wZXJ0aWVzLFxuICogb3IganVzdCB0aGUgYHBvc3RMaW5rYCBmdW5jdGlvbiAoYWxsIG90aGVyIHByb3BlcnRpZXMgd2lsbCBoYXZlIHRoZSBkZWZhdWx0IHZhbHVlcykuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXN1Y2Nlc3NcIj5cbiAqICoqQmVzdCBQcmFjdGljZToqKiBJdCdzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGUgXCJkaXJlY3RpdmUgZGVmaW5pdGlvbiBvYmplY3RcIiBmb3JtLlxuICogPC9kaXY+XG4gKlxuICogSGVyZSdzIGFuIGV4YW1wbGUgZGlyZWN0aXZlIGRlY2xhcmVkIHdpdGggYSBEaXJlY3RpdmUgRGVmaW5pdGlvbiBPYmplY3Q6XG4gKlxuICogYGBganNcbiAqICAgdmFyIG15TW9kdWxlID0gYW5ndWxhci5tb2R1bGUoLi4uKTtcbiAqXG4gKiAgIG15TW9kdWxlLmRpcmVjdGl2ZSgnZGlyZWN0aXZlTmFtZScsIGZ1bmN0aW9uIGZhY3RvcnkoaW5qZWN0YWJsZXMpIHtcbiAqICAgICB2YXIgZGlyZWN0aXZlRGVmaW5pdGlvbk9iamVjdCA9IHtcbiAqICAgICAgIHByaW9yaXR5OiAwLFxuICogICAgICAgdGVtcGxhdGU6ICc8ZGl2PjwvZGl2PicsIC8vIG9yIC8vIGZ1bmN0aW9uKHRFbGVtZW50LCB0QXR0cnMpIHsgLi4uIH0sXG4gKiAgICAgICAvLyBvclxuICogICAgICAgLy8gdGVtcGxhdGVVcmw6ICdkaXJlY3RpdmUuaHRtbCcsIC8vIG9yIC8vIGZ1bmN0aW9uKHRFbGVtZW50LCB0QXR0cnMpIHsgLi4uIH0sXG4gKiAgICAgICB0cmFuc2NsdWRlOiBmYWxzZSxcbiAqICAgICAgIHJlc3RyaWN0OiAnQScsXG4gKiAgICAgICB0ZW1wbGF0ZU5hbWVzcGFjZTogJ2h0bWwnLFxuICogICAgICAgc2NvcGU6IGZhbHNlLFxuICogICAgICAgY29udHJvbGxlcjogZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCAkdHJhbnNjbHVkZSwgb3RoZXJJbmplY3RhYmxlcykgeyAuLi4gfSxcbiAqICAgICAgIGNvbnRyb2xsZXJBczogJ3N0cmluZ0FsaWFzJyxcbiAqICAgICAgIHJlcXVpcmU6ICdzaWJsaW5nRGlyZWN0aXZlTmFtZScsIC8vIG9yIC8vIFsnXnBhcmVudERpcmVjdGl2ZU5hbWUnLCAnP29wdGlvbmFsRGlyZWN0aXZlTmFtZScsICc/Xm9wdGlvbmFsUGFyZW50J10sXG4gKiAgICAgICBjb21waWxlOiBmdW5jdGlvbiBjb21waWxlKHRFbGVtZW50LCB0QXR0cnMsIHRyYW5zY2x1ZGUpIHtcbiAqICAgICAgICAgcmV0dXJuIHtcbiAqICAgICAgICAgICBwcmU6IGZ1bmN0aW9uIHByZUxpbmsoc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMsIGNvbnRyb2xsZXIpIHsgLi4uIH0sXG4gKiAgICAgICAgICAgcG9zdDogZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMsIGNvbnRyb2xsZXIpIHsgLi4uIH1cbiAqICAgICAgICAgfVxuICogICAgICAgICAvLyBvclxuICogICAgICAgICAvLyByZXR1cm4gZnVuY3Rpb24gcG9zdExpbmsoIC4uLiApIHsgLi4uIH1cbiAqICAgICAgIH0sXG4gKiAgICAgICAvLyBvclxuICogICAgICAgLy8gbGluazoge1xuICogICAgICAgLy8gIHByZTogZnVuY3Rpb24gcHJlTGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgY29udHJvbGxlcikgeyAuLi4gfSxcbiAqICAgICAgIC8vICBwb3N0OiBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgY29udHJvbGxlcikgeyAuLi4gfVxuICogICAgICAgLy8gfVxuICogICAgICAgLy8gb3JcbiAqICAgICAgIC8vIGxpbms6IGZ1bmN0aW9uIHBvc3RMaW5rKCAuLi4gKSB7IC4uLiB9XG4gKiAgICAgfTtcbiAqICAgICByZXR1cm4gZGlyZWN0aXZlRGVmaW5pdGlvbk9iamVjdDtcbiAqICAgfSk7XG4gKiBgYGBcbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipOb3RlOioqIEFueSB1bnNwZWNpZmllZCBvcHRpb25zIHdpbGwgdXNlIHRoZSBkZWZhdWx0IHZhbHVlLiBZb3UgY2FuIHNlZSB0aGUgZGVmYXVsdCB2YWx1ZXMgYmVsb3cuXG4gKiA8L2Rpdj5cbiAqXG4gKiBUaGVyZWZvcmUgdGhlIGFib3ZlIGNhbiBiZSBzaW1wbGlmaWVkIGFzOlxuICpcbiAqIGBgYGpzXG4gKiAgIHZhciBteU1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKC4uLik7XG4gKlxuICogICBteU1vZHVsZS5kaXJlY3RpdmUoJ2RpcmVjdGl2ZU5hbWUnLCBmdW5jdGlvbiBmYWN0b3J5KGluamVjdGFibGVzKSB7XG4gKiAgICAgdmFyIGRpcmVjdGl2ZURlZmluaXRpb25PYmplY3QgPSB7XG4gKiAgICAgICBsaW5rOiBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycykgeyAuLi4gfVxuICogICAgIH07XG4gKiAgICAgcmV0dXJuIGRpcmVjdGl2ZURlZmluaXRpb25PYmplY3Q7XG4gKiAgICAgLy8gb3JcbiAqICAgICAvLyByZXR1cm4gZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMpIHsgLi4uIH1cbiAqICAgfSk7XG4gKiBgYGBcbiAqXG4gKlxuICpcbiAqICMjIyBEaXJlY3RpdmUgRGVmaW5pdGlvbiBPYmplY3RcbiAqXG4gKiBUaGUgZGlyZWN0aXZlIGRlZmluaXRpb24gb2JqZWN0IHByb3ZpZGVzIGluc3RydWN0aW9ucyB0byB0aGUge0BsaW5rIG5nLiRjb21waWxlXG4gKiBjb21waWxlcn0uIFRoZSBhdHRyaWJ1dGVzIGFyZTpcbiAqXG4gKiAjIyMjIGBtdWx0aUVsZW1lbnRgXG4gKiBXaGVuIHRoaXMgcHJvcGVydHkgaXMgc2V0IHRvIHRydWUsIHRoZSBIVE1MIGNvbXBpbGVyIHdpbGwgY29sbGVjdCBET00gbm9kZXMgYmV0d2VlblxuICogbm9kZXMgd2l0aCB0aGUgYXR0cmlidXRlcyBgZGlyZWN0aXZlLW5hbWUtc3RhcnRgIGFuZCBgZGlyZWN0aXZlLW5hbWUtZW5kYCwgYW5kIGdyb3VwIHRoZW1cbiAqIHRvZ2V0aGVyIGFzIHRoZSBkaXJlY3RpdmUgZWxlbWVudHMuIEl0IGlzIHJlY29tbWVuZGVkIHRoYXQgdGhpcyBmZWF0dXJlIGJlIHVzZWQgb24gZGlyZWN0aXZlc1xuICogd2hpY2ggYXJlIG5vdCBzdHJpY3RseSBiZWhhdmlvdXJhbCAoc3VjaCBhcyB7QGxpbmsgbmdDbGlja30pLCBhbmQgd2hpY2hcbiAqIGRvIG5vdCBtYW5pcHVsYXRlIG9yIHJlcGxhY2UgY2hpbGQgbm9kZXMgKHN1Y2ggYXMge0BsaW5rIG5nSW5jbHVkZX0pLlxuICpcbiAqICMjIyMgYHByaW9yaXR5YFxuICogV2hlbiB0aGVyZSBhcmUgbXVsdGlwbGUgZGlyZWN0aXZlcyBkZWZpbmVkIG9uIGEgc2luZ2xlIERPTSBlbGVtZW50LCBzb21ldGltZXMgaXRcbiAqIGlzIG5lY2Vzc2FyeSB0byBzcGVjaWZ5IHRoZSBvcmRlciBpbiB3aGljaCB0aGUgZGlyZWN0aXZlcyBhcmUgYXBwbGllZC4gVGhlIGBwcmlvcml0eWAgaXMgdXNlZFxuICogdG8gc29ydCB0aGUgZGlyZWN0aXZlcyBiZWZvcmUgdGhlaXIgYGNvbXBpbGVgIGZ1bmN0aW9ucyBnZXQgY2FsbGVkLiBQcmlvcml0eSBpcyBkZWZpbmVkIGFzIGFcbiAqIG51bWJlci4gRGlyZWN0aXZlcyB3aXRoIGdyZWF0ZXIgbnVtZXJpY2FsIGBwcmlvcml0eWAgYXJlIGNvbXBpbGVkIGZpcnN0LiBQcmUtbGluayBmdW5jdGlvbnNcbiAqIGFyZSBhbHNvIHJ1biBpbiBwcmlvcml0eSBvcmRlciwgYnV0IHBvc3QtbGluayBmdW5jdGlvbnMgYXJlIHJ1biBpbiByZXZlcnNlIG9yZGVyLiBUaGUgb3JkZXJcbiAqIG9mIGRpcmVjdGl2ZXMgd2l0aCB0aGUgc2FtZSBwcmlvcml0eSBpcyB1bmRlZmluZWQuIFRoZSBkZWZhdWx0IHByaW9yaXR5IGlzIGAwYC5cbiAqXG4gKiAjIyMjIGB0ZXJtaW5hbGBcbiAqIElmIHNldCB0byB0cnVlIHRoZW4gdGhlIGN1cnJlbnQgYHByaW9yaXR5YCB3aWxsIGJlIHRoZSBsYXN0IHNldCBvZiBkaXJlY3RpdmVzXG4gKiB3aGljaCB3aWxsIGV4ZWN1dGUgKGFueSBkaXJlY3RpdmVzIGF0IHRoZSBjdXJyZW50IHByaW9yaXR5IHdpbGwgc3RpbGwgZXhlY3V0ZVxuICogYXMgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiBvbiBzYW1lIGBwcmlvcml0eWAgaXMgdW5kZWZpbmVkKS4gTm90ZSB0aGF0IGV4cHJlc3Npb25zXG4gKiBhbmQgb3RoZXIgZGlyZWN0aXZlcyB1c2VkIGluIHRoZSBkaXJlY3RpdmUncyB0ZW1wbGF0ZSB3aWxsIGFsc28gYmUgZXhjbHVkZWQgZnJvbSBleGVjdXRpb24uXG4gKlxuICogIyMjIyBgc2NvcGVgXG4gKiAqKklmIHNldCB0byBgdHJ1ZWAsKiogdGhlbiBhIG5ldyBzY29wZSB3aWxsIGJlIGNyZWF0ZWQgZm9yIHRoaXMgZGlyZWN0aXZlLiBJZiBtdWx0aXBsZSBkaXJlY3RpdmVzIG9uIHRoZVxuICogc2FtZSBlbGVtZW50IHJlcXVlc3QgYSBuZXcgc2NvcGUsIG9ubHkgb25lIG5ldyBzY29wZSBpcyBjcmVhdGVkLiBUaGUgbmV3IHNjb3BlIHJ1bGUgZG9lcyBub3RcbiAqIGFwcGx5IGZvciB0aGUgcm9vdCBvZiB0aGUgdGVtcGxhdGUgc2luY2UgdGhlIHJvb3Qgb2YgdGhlIHRlbXBsYXRlIGFsd2F5cyBnZXRzIGEgbmV3IHNjb3BlLlxuICpcbiAqICoqSWYgc2V0IHRvIGB7fWAgKG9iamVjdCBoYXNoKSwqKiB0aGVuIGEgbmV3IFwiaXNvbGF0ZVwiIHNjb3BlIGlzIGNyZWF0ZWQuIFRoZSAnaXNvbGF0ZScgc2NvcGUgZGlmZmVycyBmcm9tXG4gKiBub3JtYWwgc2NvcGUgaW4gdGhhdCBpdCBkb2VzIG5vdCBwcm90b3R5cGljYWxseSBpbmhlcml0IGZyb20gdGhlIHBhcmVudCBzY29wZS4gVGhpcyBpcyB1c2VmdWxcbiAqIHdoZW4gY3JlYXRpbmcgcmV1c2FibGUgY29tcG9uZW50cywgd2hpY2ggc2hvdWxkIG5vdCBhY2NpZGVudGFsbHkgcmVhZCBvciBtb2RpZnkgZGF0YSBpbiB0aGVcbiAqIHBhcmVudCBzY29wZS5cbiAqXG4gKiBUaGUgJ2lzb2xhdGUnIHNjb3BlIHRha2VzIGFuIG9iamVjdCBoYXNoIHdoaWNoIGRlZmluZXMgYSBzZXQgb2YgbG9jYWwgc2NvcGUgcHJvcGVydGllc1xuICogZGVyaXZlZCBmcm9tIHRoZSBwYXJlbnQgc2NvcGUuIFRoZXNlIGxvY2FsIHByb3BlcnRpZXMgYXJlIHVzZWZ1bCBmb3IgYWxpYXNpbmcgdmFsdWVzIGZvclxuICogdGVtcGxhdGVzLiBMb2NhbHMgZGVmaW5pdGlvbiBpcyBhIGhhc2ggb2YgbG9jYWwgc2NvcGUgcHJvcGVydHkgdG8gaXRzIHNvdXJjZTpcbiAqXG4gKiAqIGBAYCBvciBgQGF0dHJgIC0gYmluZCBhIGxvY2FsIHNjb3BlIHByb3BlcnR5IHRvIHRoZSB2YWx1ZSBvZiBET00gYXR0cmlidXRlLiBUaGUgcmVzdWx0IGlzXG4gKiAgIGFsd2F5cyBhIHN0cmluZyBzaW5jZSBET00gYXR0cmlidXRlcyBhcmUgc3RyaW5ncy4gSWYgbm8gYGF0dHJgIG5hbWUgaXMgc3BlY2lmaWVkICB0aGVuIHRoZVxuICogICBhdHRyaWJ1dGUgbmFtZSBpcyBhc3N1bWVkIHRvIGJlIHRoZSBzYW1lIGFzIHRoZSBsb2NhbCBuYW1lLlxuICogICBHaXZlbiBgPHdpZGdldCBteS1hdHRyPVwiaGVsbG8ge3tuYW1lfX1cIj5gIGFuZCB3aWRnZXQgZGVmaW5pdGlvblxuICogICBvZiBgc2NvcGU6IHsgbG9jYWxOYW1lOidAbXlBdHRyJyB9YCwgdGhlbiB3aWRnZXQgc2NvcGUgcHJvcGVydHkgYGxvY2FsTmFtZWAgd2lsbCByZWZsZWN0XG4gKiAgIHRoZSBpbnRlcnBvbGF0ZWQgdmFsdWUgb2YgYGhlbGxvIHt7bmFtZX19YC4gQXMgdGhlIGBuYW1lYCBhdHRyaWJ1dGUgY2hhbmdlcyBzbyB3aWxsIHRoZVxuICogICBgbG9jYWxOYW1lYCBwcm9wZXJ0eSBvbiB0aGUgd2lkZ2V0IHNjb3BlLiBUaGUgYG5hbWVgIGlzIHJlYWQgZnJvbSB0aGUgcGFyZW50IHNjb3BlIChub3RcbiAqICAgY29tcG9uZW50IHNjb3BlKS5cbiAqXG4gKiAqIGA9YCBvciBgPWF0dHJgIC0gc2V0IHVwIGJpLWRpcmVjdGlvbmFsIGJpbmRpbmcgYmV0d2VlbiBhIGxvY2FsIHNjb3BlIHByb3BlcnR5IGFuZCB0aGVcbiAqICAgcGFyZW50IHNjb3BlIHByb3BlcnR5IG9mIG5hbWUgZGVmaW5lZCB2aWEgdGhlIHZhbHVlIG9mIHRoZSBgYXR0cmAgYXR0cmlidXRlLiBJZiBubyBgYXR0cmBcbiAqICAgbmFtZSBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgYXR0cmlidXRlIG5hbWUgaXMgYXNzdW1lZCB0byBiZSB0aGUgc2FtZSBhcyB0aGUgbG9jYWwgbmFtZS5cbiAqICAgR2l2ZW4gYDx3aWRnZXQgbXktYXR0cj1cInBhcmVudE1vZGVsXCI+YCBhbmQgd2lkZ2V0IGRlZmluaXRpb24gb2ZcbiAqICAgYHNjb3BlOiB7IGxvY2FsTW9kZWw6Jz1teUF0dHInIH1gLCB0aGVuIHdpZGdldCBzY29wZSBwcm9wZXJ0eSBgbG9jYWxNb2RlbGAgd2lsbCByZWZsZWN0IHRoZVxuICogICB2YWx1ZSBvZiBgcGFyZW50TW9kZWxgIG9uIHRoZSBwYXJlbnQgc2NvcGUuIEFueSBjaGFuZ2VzIHRvIGBwYXJlbnRNb2RlbGAgd2lsbCBiZSByZWZsZWN0ZWRcbiAqICAgaW4gYGxvY2FsTW9kZWxgIGFuZCBhbnkgY2hhbmdlcyBpbiBgbG9jYWxNb2RlbGAgd2lsbCByZWZsZWN0IGluIGBwYXJlbnRNb2RlbGAuIElmIHRoZSBwYXJlbnRcbiAqICAgc2NvcGUgcHJvcGVydHkgZG9lc24ndCBleGlzdCwgaXQgd2lsbCB0aHJvdyBhIE5PTl9BU1NJR05BQkxFX01PREVMX0VYUFJFU1NJT04gZXhjZXB0aW9uLiBZb3VcbiAqICAgY2FuIGF2b2lkIHRoaXMgYmVoYXZpb3IgdXNpbmcgYD0/YCBvciBgPT9hdHRyYCBpbiBvcmRlciB0byBmbGFnIHRoZSBwcm9wZXJ0eSBhcyBvcHRpb25hbC4gSWZcbiAqICAgeW91IHdhbnQgdG8gc2hhbGxvdyB3YXRjaCBmb3IgY2hhbmdlcyAoaS5lLiAkd2F0Y2hDb2xsZWN0aW9uIGluc3RlYWQgb2YgJHdhdGNoKSB5b3UgY2FuIHVzZVxuICogICBgPSpgIG9yIGA9KmF0dHJgIChgPSo/YCBvciBgPSo/YXR0cmAgaWYgdGhlIHByb3BlcnR5IGlzIG9wdGlvbmFsKS5cbiAqXG4gKiAqIGAmYCBvciBgJmF0dHJgIC0gcHJvdmlkZXMgYSB3YXkgdG8gZXhlY3V0ZSBhbiBleHByZXNzaW9uIGluIHRoZSBjb250ZXh0IG9mIHRoZSBwYXJlbnQgc2NvcGUuXG4gKiAgIElmIG5vIGBhdHRyYCBuYW1lIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBhdHRyaWJ1dGUgbmFtZSBpcyBhc3N1bWVkIHRvIGJlIHRoZSBzYW1lIGFzIHRoZVxuICogICBsb2NhbCBuYW1lLiBHaXZlbiBgPHdpZGdldCBteS1hdHRyPVwiY291bnQgPSBjb3VudCArIHZhbHVlXCI+YCBhbmQgd2lkZ2V0IGRlZmluaXRpb24gb2ZcbiAqICAgYHNjb3BlOiB7IGxvY2FsRm46JyZteUF0dHInIH1gLCB0aGVuIGlzb2xhdGUgc2NvcGUgcHJvcGVydHkgYGxvY2FsRm5gIHdpbGwgcG9pbnQgdG9cbiAqICAgYSBmdW5jdGlvbiB3cmFwcGVyIGZvciB0aGUgYGNvdW50ID0gY291bnQgKyB2YWx1ZWAgZXhwcmVzc2lvbi4gT2Z0ZW4gaXQncyBkZXNpcmFibGUgdG9cbiAqICAgcGFzcyBkYXRhIGZyb20gdGhlIGlzb2xhdGVkIHNjb3BlIHZpYSBhbiBleHByZXNzaW9uIHRvIHRoZSBwYXJlbnQgc2NvcGUsIHRoaXMgY2FuIGJlXG4gKiAgIGRvbmUgYnkgcGFzc2luZyBhIG1hcCBvZiBsb2NhbCB2YXJpYWJsZSBuYW1lcyBhbmQgdmFsdWVzIGludG8gdGhlIGV4cHJlc3Npb24gd3JhcHBlciBmbi5cbiAqICAgRm9yIGV4YW1wbGUsIGlmIHRoZSBleHByZXNzaW9uIGlzIGBpbmNyZW1lbnQoYW1vdW50KWAgdGhlbiB3ZSBjYW4gc3BlY2lmeSB0aGUgYW1vdW50IHZhbHVlXG4gKiAgIGJ5IGNhbGxpbmcgdGhlIGBsb2NhbEZuYCBhcyBgbG9jYWxGbih7YW1vdW50OiAyMn0pYC5cbiAqXG4gKlxuICogIyMjIyBgYmluZFRvQ29udHJvbGxlcmBcbiAqIFdoZW4gYW4gaXNvbGF0ZSBzY29wZSBpcyB1c2VkIGZvciBhIGNvbXBvbmVudCAoc2VlIGFib3ZlKSwgYW5kIGBjb250cm9sbGVyQXNgIGlzIHVzZWQsIGBiaW5kVG9Db250cm9sbGVyOiB0cnVlYCB3aWxsXG4gKiBhbGxvdyBhIGNvbXBvbmVudCB0byBoYXZlIGl0cyBwcm9wZXJ0aWVzIGJvdW5kIHRvIHRoZSBjb250cm9sbGVyLCByYXRoZXIgdGhhbiB0byBzY29wZS4gV2hlbiB0aGUgY29udHJvbGxlclxuICogaXMgaW5zdGFudGlhdGVkLCB0aGUgaW5pdGlhbCB2YWx1ZXMgb2YgdGhlIGlzb2xhdGUgc2NvcGUgYmluZGluZ3MgYXJlIGFscmVhZHkgYXZhaWxhYmxlLlxuICpcbiAqICMjIyMgYGNvbnRyb2xsZXJgXG4gKiBDb250cm9sbGVyIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLiBUaGUgY29udHJvbGxlciBpcyBpbnN0YW50aWF0ZWQgYmVmb3JlIHRoZVxuICogcHJlLWxpbmtpbmcgcGhhc2UgYW5kIGl0IGlzIHNoYXJlZCB3aXRoIG90aGVyIGRpcmVjdGl2ZXMgKHNlZVxuICogYHJlcXVpcmVgIGF0dHJpYnV0ZSkuIFRoaXMgYWxsb3dzIHRoZSBkaXJlY3RpdmVzIHRvIGNvbW11bmljYXRlIHdpdGggZWFjaCBvdGhlciBhbmQgYXVnbWVudFxuICogZWFjaCBvdGhlcidzIGJlaGF2aW9yLiBUaGUgY29udHJvbGxlciBpcyBpbmplY3RhYmxlIChhbmQgc3VwcG9ydHMgYnJhY2tldCBub3RhdGlvbikgd2l0aCB0aGUgZm9sbG93aW5nIGxvY2FsczpcbiAqXG4gKiAqIGAkc2NvcGVgIC0gQ3VycmVudCBzY29wZSBhc3NvY2lhdGVkIHdpdGggdGhlIGVsZW1lbnRcbiAqICogYCRlbGVtZW50YCAtIEN1cnJlbnQgZWxlbWVudFxuICogKiBgJGF0dHJzYCAtIEN1cnJlbnQgYXR0cmlidXRlcyBvYmplY3QgZm9yIHRoZSBlbGVtZW50XG4gKiAqIGAkdHJhbnNjbHVkZWAgLSBBIHRyYW5zY2x1ZGUgbGlua2luZyBmdW5jdGlvbiBwcmUtYm91bmQgdG8gdGhlIGNvcnJlY3QgdHJhbnNjbHVzaW9uIHNjb3BlOlxuICogICBgZnVuY3Rpb24oW3Njb3BlXSwgY2xvbmVMaW5raW5nRm4sIGZ1dHVyZVBhcmVudEVsZW1lbnQpYC5cbiAqICAgICogYHNjb3BlYDogb3B0aW9uYWwgYXJndW1lbnQgdG8gb3ZlcnJpZGUgdGhlIHNjb3BlLlxuICogICAgKiBgY2xvbmVMaW5raW5nRm5gOiBvcHRpb25hbCBhcmd1bWVudCB0byBjcmVhdGUgY2xvbmVzIG9mIHRoZSBvcmlnaW5hbCB0cmFuc2NsdWRlZCBjb250ZW50LlxuICogICAgKiBgZnV0dXJlUGFyZW50RWxlbWVudGA6XG4gKiAgICAgICAgKiBkZWZpbmVzIHRoZSBwYXJlbnQgdG8gd2hpY2ggdGhlIGBjbG9uZUxpbmtpbmdGbmAgd2lsbCBhZGQgdGhlIGNsb25lZCBlbGVtZW50cy5cbiAqICAgICAgICAqIGRlZmF1bHQ6IGAkZWxlbWVudC5wYXJlbnQoKWAgcmVzcC4gYCRlbGVtZW50YCBmb3IgYHRyYW5zY2x1ZGU6J2VsZW1lbnQnYCByZXNwLiBgdHJhbnNjbHVkZTp0cnVlYC5cbiAqICAgICAgICAqIG9ubHkgbmVlZGVkIGZvciB0cmFuc2NsdWRlcyB0aGF0IGFyZSBhbGxvd2VkIHRvIGNvbnRhaW4gbm9uIGh0bWwgZWxlbWVudHMgKGUuZy4gU1ZHIGVsZW1lbnRzKVxuICogICAgICAgICAgYW5kIHdoZW4gdGhlIGBjbG9uZUxpbmtpbkZuYCBpcyBwYXNzZWQsXG4gKiAgICAgICAgICBhcyB0aG9zZSBlbGVtZW50cyBuZWVkIHRvIGNyZWF0ZWQgYW5kIGNsb25lZCBpbiBhIHNwZWNpYWwgd2F5IHdoZW4gdGhleSBhcmUgZGVmaW5lZCBvdXRzaWRlIHRoZWlyXG4gKiAgICAgICAgICB1c3VhbCBjb250YWluZXJzIChlLmcuIGxpa2UgYDxzdmc+YCkuXG4gKiAgICAgICAgKiBTZWUgYWxzbyB0aGUgYGRpcmVjdGl2ZS50ZW1wbGF0ZU5hbWVzcGFjZWAgcHJvcGVydHkuXG4gKlxuICpcbiAqICMjIyMgYHJlcXVpcmVgXG4gKiBSZXF1aXJlIGFub3RoZXIgZGlyZWN0aXZlIGFuZCBpbmplY3QgaXRzIGNvbnRyb2xsZXIgYXMgdGhlIGZvdXJ0aCBhcmd1bWVudCB0byB0aGUgbGlua2luZyBmdW5jdGlvbi4gVGhlXG4gKiBgcmVxdWlyZWAgdGFrZXMgYSBzdHJpbmcgbmFtZSAob3IgYXJyYXkgb2Ygc3RyaW5ncykgb2YgdGhlIGRpcmVjdGl2ZShzKSB0byBwYXNzIGluLiBJZiBhbiBhcnJheSBpcyB1c2VkLCB0aGVcbiAqIGluamVjdGVkIGFyZ3VtZW50IHdpbGwgYmUgYW4gYXJyYXkgaW4gY29ycmVzcG9uZGluZyBvcmRlci4gSWYgbm8gc3VjaCBkaXJlY3RpdmUgY2FuIGJlXG4gKiBmb3VuZCwgb3IgaWYgdGhlIGRpcmVjdGl2ZSBkb2VzIG5vdCBoYXZlIGEgY29udHJvbGxlciwgdGhlbiBhbiBlcnJvciBpcyByYWlzZWQuIFRoZSBuYW1lIGNhbiBiZSBwcmVmaXhlZCB3aXRoOlxuICpcbiAqICogKG5vIHByZWZpeCkgLSBMb2NhdGUgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXIgb24gdGhlIGN1cnJlbnQgZWxlbWVudC4gVGhyb3cgYW4gZXJyb3IgaWYgbm90IGZvdW5kLlxuICogKiBgP2AgLSBBdHRlbXB0IHRvIGxvY2F0ZSB0aGUgcmVxdWlyZWQgY29udHJvbGxlciBvciBwYXNzIGBudWxsYCB0byB0aGUgYGxpbmtgIGZuIGlmIG5vdCBmb3VuZC5cbiAqICogYF5gIC0gTG9jYXRlIHRoZSByZXF1aXJlZCBjb250cm9sbGVyIGJ5IHNlYXJjaGluZyB0aGUgZWxlbWVudCBhbmQgaXRzIHBhcmVudHMuIFRocm93IGFuIGVycm9yIGlmIG5vdCBmb3VuZC5cbiAqICogYF5eYCAtIExvY2F0ZSB0aGUgcmVxdWlyZWQgY29udHJvbGxlciBieSBzZWFyY2hpbmcgdGhlIGVsZW1lbnQncyBwYXJlbnRzLiBUaHJvdyBhbiBlcnJvciBpZiBub3QgZm91bmQuXG4gKiAqIGA/XmAgLSBBdHRlbXB0IHRvIGxvY2F0ZSB0aGUgcmVxdWlyZWQgY29udHJvbGxlciBieSBzZWFyY2hpbmcgdGhlIGVsZW1lbnQgYW5kIGl0cyBwYXJlbnRzIG9yIHBhc3NcbiAqICAgYG51bGxgIHRvIHRoZSBgbGlua2AgZm4gaWYgbm90IGZvdW5kLlxuICogKiBgP15eYCAtIEF0dGVtcHQgdG8gbG9jYXRlIHRoZSByZXF1aXJlZCBjb250cm9sbGVyIGJ5IHNlYXJjaGluZyB0aGUgZWxlbWVudCdzIHBhcmVudHMsIG9yIHBhc3NcbiAqICAgYG51bGxgIHRvIHRoZSBgbGlua2AgZm4gaWYgbm90IGZvdW5kLlxuICpcbiAqXG4gKiAjIyMjIGBjb250cm9sbGVyQXNgXG4gKiBDb250cm9sbGVyIGFsaWFzIGF0IHRoZSBkaXJlY3RpdmUgc2NvcGUuIEFuIGFsaWFzIGZvciB0aGUgY29udHJvbGxlciBzbyBpdFxuICogY2FuIGJlIHJlZmVyZW5jZWQgYXQgdGhlIGRpcmVjdGl2ZSB0ZW1wbGF0ZS4gVGhlIGRpcmVjdGl2ZSBuZWVkcyB0byBkZWZpbmUgYSBzY29wZSBmb3IgdGhpc1xuICogY29uZmlndXJhdGlvbiB0byBiZSB1c2VkLiBVc2VmdWwgaW4gdGhlIGNhc2Ugd2hlbiBkaXJlY3RpdmUgaXMgdXNlZCBhcyBjb21wb25lbnQuXG4gKlxuICpcbiAqICMjIyMgYHJlc3RyaWN0YFxuICogU3RyaW5nIG9mIHN1YnNldCBvZiBgRUFDTWAgd2hpY2ggcmVzdHJpY3RzIHRoZSBkaXJlY3RpdmUgdG8gYSBzcGVjaWZpYyBkaXJlY3RpdmVcbiAqIGRlY2xhcmF0aW9uIHN0eWxlLiBJZiBvbWl0dGVkLCB0aGUgZGVmYXVsdHMgKGVsZW1lbnRzIGFuZCBhdHRyaWJ1dGVzKSBhcmUgdXNlZC5cbiAqXG4gKiAqIGBFYCAtIEVsZW1lbnQgbmFtZSAoZGVmYXVsdCk6IGA8bXktZGlyZWN0aXZlPjwvbXktZGlyZWN0aXZlPmBcbiAqICogYEFgIC0gQXR0cmlidXRlIChkZWZhdWx0KTogYDxkaXYgbXktZGlyZWN0aXZlPVwiZXhwXCI+PC9kaXY+YFxuICogKiBgQ2AgLSBDbGFzczogYDxkaXYgY2xhc3M9XCJteS1kaXJlY3RpdmU6IGV4cDtcIj48L2Rpdj5gXG4gKiAqIGBNYCAtIENvbW1lbnQ6IGA8IS0tIGRpcmVjdGl2ZTogbXktZGlyZWN0aXZlIGV4cCAtLT5gXG4gKlxuICpcbiAqICMjIyMgYHRlbXBsYXRlTmFtZXNwYWNlYFxuICogU3RyaW5nIHJlcHJlc2VudGluZyB0aGUgZG9jdW1lbnQgdHlwZSB1c2VkIGJ5IHRoZSBtYXJrdXAgaW4gdGhlIHRlbXBsYXRlLlxuICogQW5ndWxhckpTIG5lZWRzIHRoaXMgaW5mb3JtYXRpb24gYXMgdGhvc2UgZWxlbWVudHMgbmVlZCB0byBiZSBjcmVhdGVkIGFuZCBjbG9uZWRcbiAqIGluIGEgc3BlY2lhbCB3YXkgd2hlbiB0aGV5IGFyZSBkZWZpbmVkIG91dHNpZGUgdGhlaXIgdXN1YWwgY29udGFpbmVycyBsaWtlIGA8c3ZnPmAgYW5kIGA8bWF0aD5gLlxuICpcbiAqICogYGh0bWxgIC0gQWxsIHJvb3Qgbm9kZXMgaW4gdGhlIHRlbXBsYXRlIGFyZSBIVE1MLiBSb290IG5vZGVzIG1heSBhbHNvIGJlXG4gKiAgIHRvcC1sZXZlbCBlbGVtZW50cyBzdWNoIGFzIGA8c3ZnPmAgb3IgYDxtYXRoPmAuXG4gKiAqIGBzdmdgIC0gVGhlIHJvb3Qgbm9kZXMgaW4gdGhlIHRlbXBsYXRlIGFyZSBTVkcgZWxlbWVudHMgKGV4Y2x1ZGluZyBgPG1hdGg+YCkuXG4gKiAqIGBtYXRoYCAtIFRoZSByb290IG5vZGVzIGluIHRoZSB0ZW1wbGF0ZSBhcmUgTWF0aE1MIGVsZW1lbnRzIChleGNsdWRpbmcgYDxzdmc+YCkuXG4gKlxuICogSWYgbm8gYHRlbXBsYXRlTmFtZXNwYWNlYCBpcyBzcGVjaWZpZWQsIHRoZW4gdGhlIG5hbWVzcGFjZSBpcyBjb25zaWRlcmVkIHRvIGJlIGBodG1sYC5cbiAqXG4gKiAjIyMjIGB0ZW1wbGF0ZWBcbiAqIEhUTUwgbWFya3VwIHRoYXQgbWF5OlxuICogKiBSZXBsYWNlIHRoZSBjb250ZW50cyBvZiB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudCAoZGVmYXVsdCkuXG4gKiAqIFJlcGxhY2UgdGhlIGRpcmVjdGl2ZSdzIGVsZW1lbnQgaXRzZWxmIChpZiBgcmVwbGFjZWAgaXMgdHJ1ZSAtIERFUFJFQ0FURUQpLlxuICogKiBXcmFwIHRoZSBjb250ZW50cyBvZiB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudCAoaWYgYHRyYW5zY2x1ZGVgIGlzIHRydWUpLlxuICpcbiAqIFZhbHVlIG1heSBiZTpcbiAqXG4gKiAqIEEgc3RyaW5nLiBGb3IgZXhhbXBsZSBgPGRpdiByZWQtb24taG92ZXI+e3tkZWxldGVfc3RyfX08L2Rpdj5gLlxuICogKiBBIGZ1bmN0aW9uIHdoaWNoIHRha2VzIHR3byBhcmd1bWVudHMgYHRFbGVtZW50YCBhbmQgYHRBdHRyc2AgKGRlc2NyaWJlZCBpbiB0aGUgYGNvbXBpbGVgXG4gKiAgIGZ1bmN0aW9uIGFwaSBiZWxvdykgYW5kIHJldHVybnMgYSBzdHJpbmcgdmFsdWUuXG4gKlxuICpcbiAqICMjIyMgYHRlbXBsYXRlVXJsYFxuICogVGhpcyBpcyBzaW1pbGFyIHRvIGB0ZW1wbGF0ZWAgYnV0IHRoZSB0ZW1wbGF0ZSBpcyBsb2FkZWQgZnJvbSB0aGUgc3BlY2lmaWVkIFVSTCwgYXN5bmNocm9ub3VzbHkuXG4gKlxuICogQmVjYXVzZSB0ZW1wbGF0ZSBsb2FkaW5nIGlzIGFzeW5jaHJvbm91cyB0aGUgY29tcGlsZXIgd2lsbCBzdXNwZW5kIGNvbXBpbGF0aW9uIG9mIGRpcmVjdGl2ZXMgb24gdGhhdCBlbGVtZW50XG4gKiBmb3IgbGF0ZXIgd2hlbiB0aGUgdGVtcGxhdGUgaGFzIGJlZW4gcmVzb2x2ZWQuICBJbiB0aGUgbWVhbnRpbWUgaXQgd2lsbCBjb250aW51ZSB0byBjb21waWxlIGFuZCBsaW5rXG4gKiBzaWJsaW5nIGFuZCBwYXJlbnQgZWxlbWVudHMgYXMgdGhvdWdoIHRoaXMgZWxlbWVudCBoYWQgbm90IGNvbnRhaW5lZCBhbnkgZGlyZWN0aXZlcy5cbiAqXG4gKiBUaGUgY29tcGlsZXIgZG9lcyBub3Qgc3VzcGVuZCB0aGUgZW50aXJlIGNvbXBpbGF0aW9uIHRvIHdhaXQgZm9yIHRlbXBsYXRlcyB0byBiZSBsb2FkZWQgYmVjYXVzZSB0aGlzXG4gKiB3b3VsZCByZXN1bHQgaW4gdGhlIHdob2xlIGFwcCBcInN0YWxsaW5nXCIgdW50aWwgYWxsIHRlbXBsYXRlcyBhcmUgbG9hZGVkIGFzeW5jaHJvbm91c2x5IC0gZXZlbiBpbiB0aGVcbiAqIGNhc2Ugd2hlbiBvbmx5IG9uZSBkZWVwbHkgbmVzdGVkIGRpcmVjdGl2ZSBoYXMgYHRlbXBsYXRlVXJsYC5cbiAqXG4gKiBUZW1wbGF0ZSBsb2FkaW5nIGlzIGFzeW5jaHJvbm91cyBldmVuIGlmIHRoZSB0ZW1wbGF0ZSBoYXMgYmVlbiBwcmVsb2FkZWQgaW50byB0aGUge0BsaW5rICR0ZW1wbGF0ZUNhY2hlfVxuICpcbiAqIFlvdSBjYW4gc3BlY2lmeSBgdGVtcGxhdGVVcmxgIGFzIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgVVJMIG9yIGFzIGEgZnVuY3Rpb24gd2hpY2ggdGFrZXMgdHdvXG4gKiBhcmd1bWVudHMgYHRFbGVtZW50YCBhbmQgYHRBdHRyc2AgKGRlc2NyaWJlZCBpbiB0aGUgYGNvbXBpbGVgIGZ1bmN0aW9uIGFwaSBiZWxvdykgYW5kIHJldHVybnNcbiAqIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgdXJsLiAgSW4gZWl0aGVyIGNhc2UsIHRoZSB0ZW1wbGF0ZSBVUkwgaXMgcGFzc2VkIHRocm91Z2gge0BsaW5rXG4gKiAkc2NlI2dldFRydXN0ZWRSZXNvdXJjZVVybCAkc2NlLmdldFRydXN0ZWRSZXNvdXJjZVVybH0uXG4gKlxuICpcbiAqICMjIyMgYHJlcGxhY2VgIChbKkRFUFJFQ0FURUQqIV0sIHdpbGwgYmUgcmVtb3ZlZCBpbiBuZXh0IG1ham9yIHJlbGVhc2UgLSBpLmUuIHYyLjApXG4gKiBzcGVjaWZ5IHdoYXQgdGhlIHRlbXBsYXRlIHNob3VsZCByZXBsYWNlLiBEZWZhdWx0cyB0byBgZmFsc2VgLlxuICpcbiAqICogYHRydWVgIC0gdGhlIHRlbXBsYXRlIHdpbGwgcmVwbGFjZSB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudC5cbiAqICogYGZhbHNlYCAtIHRoZSB0ZW1wbGF0ZSB3aWxsIHJlcGxhY2UgdGhlIGNvbnRlbnRzIG9mIHRoZSBkaXJlY3RpdmUncyBlbGVtZW50LlxuICpcbiAqIFRoZSByZXBsYWNlbWVudCBwcm9jZXNzIG1pZ3JhdGVzIGFsbCBvZiB0aGUgYXR0cmlidXRlcyAvIGNsYXNzZXMgZnJvbSB0aGUgb2xkIGVsZW1lbnQgdG8gdGhlIG5ld1xuICogb25lLiBTZWUgdGhlIHtAbGluayBndWlkZS9kaXJlY3RpdmUjdGVtcGxhdGUtZXhwYW5kaW5nLWRpcmVjdGl2ZVxuICogRGlyZWN0aXZlcyBHdWlkZX0gZm9yIGFuIGV4YW1wbGUuXG4gKlxuICogVGhlcmUgYXJlIHZlcnkgZmV3IHNjZW5hcmlvcyB3aGVyZSBlbGVtZW50IHJlcGxhY2VtZW50IGlzIHJlcXVpcmVkIGZvciB0aGUgYXBwbGljYXRpb24gZnVuY3Rpb24sXG4gKiB0aGUgbWFpbiBvbmUgYmVpbmcgcmV1c2FibGUgY3VzdG9tIGNvbXBvbmVudHMgdGhhdCBhcmUgdXNlZCB3aXRoaW4gU1ZHIGNvbnRleHRzXG4gKiAoYmVjYXVzZSBTVkcgZG9lc24ndCB3b3JrIHdpdGggY3VzdG9tIGVsZW1lbnRzIGluIHRoZSBET00gdHJlZSkuXG4gKlxuICogIyMjIyBgdHJhbnNjbHVkZWBcbiAqIEV4dHJhY3QgdGhlIGNvbnRlbnRzIG9mIHRoZSBlbGVtZW50IHdoZXJlIHRoZSBkaXJlY3RpdmUgYXBwZWFycyBhbmQgbWFrZSBpdCBhdmFpbGFibGUgdG8gdGhlIGRpcmVjdGl2ZS5cbiAqIFRoZSBjb250ZW50cyBhcmUgY29tcGlsZWQgYW5kIHByb3ZpZGVkIHRvIHRoZSBkaXJlY3RpdmUgYXMgYSAqKnRyYW5zY2x1c2lvbiBmdW5jdGlvbioqLiBTZWUgdGhlXG4gKiB7QGxpbmsgJGNvbXBpbGUjdHJhbnNjbHVzaW9uIFRyYW5zY2x1c2lvbn0gc2VjdGlvbiBiZWxvdy5cbiAqXG4gKiBUaGVyZSBhcmUgdHdvIGtpbmRzIG9mIHRyYW5zY2x1c2lvbiBkZXBlbmRpbmcgdXBvbiB3aGV0aGVyIHlvdSB3YW50IHRvIHRyYW5zY2x1ZGUganVzdCB0aGUgY29udGVudHMgb2YgdGhlXG4gKiBkaXJlY3RpdmUncyBlbGVtZW50IG9yIHRoZSBlbnRpcmUgZWxlbWVudDpcbiAqXG4gKiAqIGB0cnVlYCAtIHRyYW5zY2x1ZGUgdGhlIGNvbnRlbnQgKGkuZS4gdGhlIGNoaWxkIG5vZGVzKSBvZiB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudC5cbiAqICogYCdlbGVtZW50J2AgLSB0cmFuc2NsdWRlIHRoZSB3aG9sZSBvZiB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudCBpbmNsdWRpbmcgYW55IGRpcmVjdGl2ZXMgb24gdGhpc1xuICogICBlbGVtZW50IHRoYXQgZGVmaW5lZCBhdCBhIGxvd2VyIHByaW9yaXR5IHRoYW4gdGhpcyBkaXJlY3RpdmUuIFdoZW4gdXNlZCwgdGhlIGB0ZW1wbGF0ZWBcbiAqICAgcHJvcGVydHkgaXMgaWdub3JlZC5cbiAqXG4gKlxuICogIyMjIyBgY29tcGlsZWBcbiAqXG4gKiBgYGBqc1xuICogICBmdW5jdGlvbiBjb21waWxlKHRFbGVtZW50LCB0QXR0cnMsIHRyYW5zY2x1ZGUpIHsgLi4uIH1cbiAqIGBgYFxuICpcbiAqIFRoZSBjb21waWxlIGZ1bmN0aW9uIGRlYWxzIHdpdGggdHJhbnNmb3JtaW5nIHRoZSB0ZW1wbGF0ZSBET00uIFNpbmNlIG1vc3QgZGlyZWN0aXZlcyBkbyBub3QgZG9cbiAqIHRlbXBsYXRlIHRyYW5zZm9ybWF0aW9uLCBpdCBpcyBub3QgdXNlZCBvZnRlbi4gVGhlIGNvbXBpbGUgZnVuY3Rpb24gdGFrZXMgdGhlIGZvbGxvd2luZyBhcmd1bWVudHM6XG4gKlxuICogICAqIGB0RWxlbWVudGAgLSB0ZW1wbGF0ZSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgd2hlcmUgdGhlIGRpcmVjdGl2ZSBoYXMgYmVlbiBkZWNsYXJlZC4gSXQgaXNcbiAqICAgICBzYWZlIHRvIGRvIHRlbXBsYXRlIHRyYW5zZm9ybWF0aW9uIG9uIHRoZSBlbGVtZW50IGFuZCBjaGlsZCBlbGVtZW50cyBvbmx5LlxuICpcbiAqICAgKiBgdEF0dHJzYCAtIHRlbXBsYXRlIGF0dHJpYnV0ZXMgLSBOb3JtYWxpemVkIGxpc3Qgb2YgYXR0cmlidXRlcyBkZWNsYXJlZCBvbiB0aGlzIGVsZW1lbnQgc2hhcmVkXG4gKiAgICAgYmV0d2VlbiBhbGwgZGlyZWN0aXZlIGNvbXBpbGUgZnVuY3Rpb25zLlxuICpcbiAqICAgKiBgdHJhbnNjbHVkZWAgLSAgWypERVBSRUNBVEVEKiFdIEEgdHJhbnNjbHVkZSBsaW5raW5nIGZ1bmN0aW9uOiBgZnVuY3Rpb24oc2NvcGUsIGNsb25lTGlua2luZ0ZuKWBcbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipOb3RlOioqIFRoZSB0ZW1wbGF0ZSBpbnN0YW5jZSBhbmQgdGhlIGxpbmsgaW5zdGFuY2UgbWF5IGJlIGRpZmZlcmVudCBvYmplY3RzIGlmIHRoZSB0ZW1wbGF0ZSBoYXNcbiAqIGJlZW4gY2xvbmVkLiBGb3IgdGhpcyByZWFzb24gaXQgaXMgKipub3QqKiBzYWZlIHRvIGRvIGFueXRoaW5nIG90aGVyIHRoYW4gRE9NIHRyYW5zZm9ybWF0aW9ucyB0aGF0XG4gKiBhcHBseSB0byBhbGwgY2xvbmVkIERPTSBub2RlcyB3aXRoaW4gdGhlIGNvbXBpbGUgZnVuY3Rpb24uIFNwZWNpZmljYWxseSwgRE9NIGxpc3RlbmVyIHJlZ2lzdHJhdGlvblxuICogc2hvdWxkIGJlIGRvbmUgaW4gYSBsaW5raW5nIGZ1bmN0aW9uIHJhdGhlciB0aGFuIGluIGEgY29tcGlsZSBmdW5jdGlvbi5cbiAqIDwvZGl2PlxuXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipOb3RlOioqIFRoZSBjb21waWxlIGZ1bmN0aW9uIGNhbm5vdCBoYW5kbGUgZGlyZWN0aXZlcyB0aGF0IHJlY3Vyc2l2ZWx5IHVzZSB0aGVtc2VsdmVzIGluIHRoZWlyXG4gKiBvd24gdGVtcGxhdGVzIG9yIGNvbXBpbGUgZnVuY3Rpb25zLiBDb21waWxpbmcgdGhlc2UgZGlyZWN0aXZlcyByZXN1bHRzIGluIGFuIGluZmluaXRlIGxvb3AgYW5kIGFcbiAqIHN0YWNrIG92ZXJmbG93IGVycm9ycy5cbiAqXG4gKiBUaGlzIGNhbiBiZSBhdm9pZGVkIGJ5IG1hbnVhbGx5IHVzaW5nICRjb21waWxlIGluIHRoZSBwb3N0TGluayBmdW5jdGlvbiB0byBpbXBlcmF0aXZlbHkgY29tcGlsZVxuICogYSBkaXJlY3RpdmUncyB0ZW1wbGF0ZSBpbnN0ZWFkIG9mIHJlbHlpbmcgb24gYXV0b21hdGljIHRlbXBsYXRlIGNvbXBpbGF0aW9uIHZpYSBgdGVtcGxhdGVgIG9yXG4gKiBgdGVtcGxhdGVVcmxgIGRlY2xhcmF0aW9uIG9yIG1hbnVhbCBjb21waWxhdGlvbiBpbnNpZGUgdGhlIGNvbXBpbGUgZnVuY3Rpb24uXG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZXJyb3JcIj5cbiAqICoqTm90ZToqKiBUaGUgYHRyYW5zY2x1ZGVgIGZ1bmN0aW9uIHRoYXQgaXMgcGFzc2VkIHRvIHRoZSBjb21waWxlIGZ1bmN0aW9uIGlzIGRlcHJlY2F0ZWQsIGFzIGl0XG4gKiAgIGUuZy4gZG9lcyBub3Qga25vdyBhYm91dCB0aGUgcmlnaHQgb3V0ZXIgc2NvcGUuIFBsZWFzZSB1c2UgdGhlIHRyYW5zY2x1ZGUgZnVuY3Rpb24gdGhhdCBpcyBwYXNzZWRcbiAqICAgdG8gdGhlIGxpbmsgZnVuY3Rpb24gaW5zdGVhZC5cbiAqIDwvZGl2PlxuXG4gKiBBIGNvbXBpbGUgZnVuY3Rpb24gY2FuIGhhdmUgYSByZXR1cm4gdmFsdWUgd2hpY2ggY2FuIGJlIGVpdGhlciBhIGZ1bmN0aW9uIG9yIGFuIG9iamVjdC5cbiAqXG4gKiAqIHJldHVybmluZyBhIChwb3N0LWxpbmspIGZ1bmN0aW9uIC0gaXMgZXF1aXZhbGVudCB0byByZWdpc3RlcmluZyB0aGUgbGlua2luZyBmdW5jdGlvbiB2aWEgdGhlXG4gKiAgIGBsaW5rYCBwcm9wZXJ0eSBvZiB0aGUgY29uZmlnIG9iamVjdCB3aGVuIHRoZSBjb21waWxlIGZ1bmN0aW9uIGlzIGVtcHR5LlxuICpcbiAqICogcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGZ1bmN0aW9uKHMpIHJlZ2lzdGVyZWQgdmlhIGBwcmVgIGFuZCBgcG9zdGAgcHJvcGVydGllcyAtIGFsbG93cyB5b3UgdG9cbiAqICAgY29udHJvbCB3aGVuIGEgbGlua2luZyBmdW5jdGlvbiBzaG91bGQgYmUgY2FsbGVkIGR1cmluZyB0aGUgbGlua2luZyBwaGFzZS4gU2VlIGluZm8gYWJvdXRcbiAqICAgcHJlLWxpbmtpbmcgYW5kIHBvc3QtbGlua2luZyBmdW5jdGlvbnMgYmVsb3cuXG4gKlxuICpcbiAqICMjIyMgYGxpbmtgXG4gKiBUaGlzIHByb3BlcnR5IGlzIHVzZWQgb25seSBpZiB0aGUgYGNvbXBpbGVgIHByb3BlcnR5IGlzIG5vdCBkZWZpbmVkLlxuICpcbiAqIGBgYGpzXG4gKiAgIGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMsIGNvbnRyb2xsZXIsIHRyYW5zY2x1ZGVGbikgeyAuLi4gfVxuICogYGBgXG4gKlxuICogVGhlIGxpbmsgZnVuY3Rpb24gaXMgcmVzcG9uc2libGUgZm9yIHJlZ2lzdGVyaW5nIERPTSBsaXN0ZW5lcnMgYXMgd2VsbCBhcyB1cGRhdGluZyB0aGUgRE9NLiBJdCBpc1xuICogZXhlY3V0ZWQgYWZ0ZXIgdGhlIHRlbXBsYXRlIGhhcyBiZWVuIGNsb25lZC4gVGhpcyBpcyB3aGVyZSBtb3N0IG9mIHRoZSBkaXJlY3RpdmUgbG9naWMgd2lsbCBiZVxuICogcHV0LlxuICpcbiAqICAgKiBgc2NvcGVgIC0ge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgU2NvcGV9IC0gVGhlIHNjb3BlIHRvIGJlIHVzZWQgYnkgdGhlXG4gKiAgICAgZGlyZWN0aXZlIGZvciByZWdpc3RlcmluZyB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggd2F0Y2hlc30uXG4gKlxuICogICAqIGBpRWxlbWVudGAgLSBpbnN0YW5jZSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgd2hlcmUgdGhlIGRpcmVjdGl2ZSBpcyB0byBiZSB1c2VkLiBJdCBpcyBzYWZlIHRvXG4gKiAgICAgbWFuaXB1bGF0ZSB0aGUgY2hpbGRyZW4gb2YgdGhlIGVsZW1lbnQgb25seSBpbiBgcG9zdExpbmtgIGZ1bmN0aW9uIHNpbmNlIHRoZSBjaGlsZHJlbiBoYXZlXG4gKiAgICAgYWxyZWFkeSBiZWVuIGxpbmtlZC5cbiAqXG4gKiAgICogYGlBdHRyc2AgLSBpbnN0YW5jZSBhdHRyaWJ1dGVzIC0gTm9ybWFsaXplZCBsaXN0IG9mIGF0dHJpYnV0ZXMgZGVjbGFyZWQgb24gdGhpcyBlbGVtZW50IHNoYXJlZFxuICogICAgIGJldHdlZW4gYWxsIGRpcmVjdGl2ZSBsaW5raW5nIGZ1bmN0aW9ucy5cbiAqXG4gKiAgICogYGNvbnRyb2xsZXJgIC0gYSBjb250cm9sbGVyIGluc3RhbmNlIC0gQSBjb250cm9sbGVyIGluc3RhbmNlIGlmIGF0IGxlYXN0IG9uZSBkaXJlY3RpdmUgb24gdGhlXG4gKiAgICAgZWxlbWVudCBkZWZpbmVzIGEgY29udHJvbGxlci4gVGhlIGNvbnRyb2xsZXIgaXMgc2hhcmVkIGFtb25nIGFsbCB0aGUgZGlyZWN0aXZlcywgd2hpY2ggYWxsb3dzXG4gKiAgICAgdGhlIGRpcmVjdGl2ZXMgdG8gdXNlIHRoZSBjb250cm9sbGVycyBhcyBhIGNvbW11bmljYXRpb24gY2hhbm5lbC5cbiAqXG4gKiAgICogYHRyYW5zY2x1ZGVGbmAgLSBBIHRyYW5zY2x1ZGUgbGlua2luZyBmdW5jdGlvbiBwcmUtYm91bmQgdG8gdGhlIGNvcnJlY3QgdHJhbnNjbHVzaW9uIHNjb3BlLlxuICogICAgIFRoaXMgaXMgdGhlIHNhbWUgYXMgdGhlIGAkdHJhbnNjbHVkZWBcbiAqICAgICBwYXJhbWV0ZXIgb2YgZGlyZWN0aXZlIGNvbnRyb2xsZXJzLCBzZWUgdGhlcmUgZm9yIGRldGFpbHMuXG4gKiAgICAgYGZ1bmN0aW9uKFtzY29wZV0sIGNsb25lTGlua2luZ0ZuLCBmdXR1cmVQYXJlbnRFbGVtZW50KWAuXG4gKlxuICogIyMjIyBQcmUtbGlua2luZyBmdW5jdGlvblxuICpcbiAqIEV4ZWN1dGVkIGJlZm9yZSB0aGUgY2hpbGQgZWxlbWVudHMgYXJlIGxpbmtlZC4gTm90IHNhZmUgdG8gZG8gRE9NIHRyYW5zZm9ybWF0aW9uIHNpbmNlIHRoZVxuICogY29tcGlsZXIgbGlua2luZyBmdW5jdGlvbiB3aWxsIGZhaWwgdG8gbG9jYXRlIHRoZSBjb3JyZWN0IGVsZW1lbnRzIGZvciBsaW5raW5nLlxuICpcbiAqICMjIyMgUG9zdC1saW5raW5nIGZ1bmN0aW9uXG4gKlxuICogRXhlY3V0ZWQgYWZ0ZXIgdGhlIGNoaWxkIGVsZW1lbnRzIGFyZSBsaW5rZWQuXG4gKlxuICogTm90ZSB0aGF0IGNoaWxkIGVsZW1lbnRzIHRoYXQgY29udGFpbiBgdGVtcGxhdGVVcmxgIGRpcmVjdGl2ZXMgd2lsbCBub3QgaGF2ZSBiZWVuIGNvbXBpbGVkXG4gKiBhbmQgbGlua2VkIHNpbmNlIHRoZXkgYXJlIHdhaXRpbmcgZm9yIHRoZWlyIHRlbXBsYXRlIHRvIGxvYWQgYXN5bmNocm9ub3VzbHkgYW5kIHRoZWlyIG93blxuICogY29tcGlsYXRpb24gYW5kIGxpbmtpbmcgaGFzIGJlZW4gc3VzcGVuZGVkIHVudGlsIHRoYXQgb2NjdXJzLlxuICpcbiAqIEl0IGlzIHNhZmUgdG8gZG8gRE9NIHRyYW5zZm9ybWF0aW9uIGluIHRoZSBwb3N0LWxpbmtpbmcgZnVuY3Rpb24gb24gZWxlbWVudHMgdGhhdCBhcmUgbm90IHdhaXRpbmdcbiAqIGZvciB0aGVpciBhc3luYyB0ZW1wbGF0ZXMgdG8gYmUgcmVzb2x2ZWQuXG4gKlxuICpcbiAqICMjIyBUcmFuc2NsdXNpb25cbiAqXG4gKiBUcmFuc2NsdXNpb24gaXMgdGhlIHByb2Nlc3Mgb2YgZXh0cmFjdGluZyBhIGNvbGxlY3Rpb24gb2YgRE9NIGVsZW1lbnQgZnJvbSBvbmUgcGFydCBvZiB0aGUgRE9NIGFuZFxuICogY29weWluZyB0aGVtIHRvIGFub3RoZXIgcGFydCBvZiB0aGUgRE9NLCB3aGlsZSBtYWludGFpbmluZyB0aGVpciBjb25uZWN0aW9uIHRvIHRoZSBvcmlnaW5hbCBBbmd1bGFySlNcbiAqIHNjb3BlIGZyb20gd2hlcmUgdGhleSB3ZXJlIHRha2VuLlxuICpcbiAqIFRyYW5zY2x1c2lvbiBpcyB1c2VkIChvZnRlbiB3aXRoIHtAbGluayBuZ1RyYW5zY2x1ZGV9KSB0byBpbnNlcnQgdGhlXG4gKiBvcmlnaW5hbCBjb250ZW50cyBvZiBhIGRpcmVjdGl2ZSdzIGVsZW1lbnQgaW50byBhIHNwZWNpZmllZCBwbGFjZSBpbiB0aGUgdGVtcGxhdGUgb2YgdGhlIGRpcmVjdGl2ZS5cbiAqIFRoZSBiZW5lZml0IG9mIHRyYW5zY2x1c2lvbiwgb3ZlciBzaW1wbHkgbW92aW5nIHRoZSBET00gZWxlbWVudHMgbWFudWFsbHksIGlzIHRoYXQgdGhlIHRyYW5zY2x1ZGVkXG4gKiBjb250ZW50IGhhcyBhY2Nlc3MgdG8gdGhlIHByb3BlcnRpZXMgb24gdGhlIHNjb3BlIGZyb20gd2hpY2ggaXQgd2FzIHRha2VuLCBldmVuIGlmIHRoZSBkaXJlY3RpdmVcbiAqIGhhcyBpc29sYXRlZCBzY29wZS5cbiAqIFNlZSB0aGUge0BsaW5rIGd1aWRlL2RpcmVjdGl2ZSNjcmVhdGluZy1hLWRpcmVjdGl2ZS10aGF0LXdyYXBzLW90aGVyLWVsZW1lbnRzIERpcmVjdGl2ZXMgR3VpZGV9LlxuICpcbiAqIFRoaXMgbWFrZXMgaXQgcG9zc2libGUgZm9yIHRoZSB3aWRnZXQgdG8gaGF2ZSBwcml2YXRlIHN0YXRlIGZvciBpdHMgdGVtcGxhdGUsIHdoaWxlIHRoZSB0cmFuc2NsdWRlZFxuICogY29udGVudCBoYXMgYWNjZXNzIHRvIGl0cyBvcmlnaW5hdGluZyBzY29wZS5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipOb3RlOioqIFdoZW4gdGVzdGluZyBhbiBlbGVtZW50IHRyYW5zY2x1ZGUgZGlyZWN0aXZlIHlvdSBtdXN0IG5vdCBwbGFjZSB0aGUgZGlyZWN0aXZlIGF0IHRoZSByb290IG9mIHRoZVxuICogRE9NIGZyYWdtZW50IHRoYXQgaXMgYmVpbmcgY29tcGlsZWQuIFNlZSB7QGxpbmsgZ3VpZGUvdW5pdC10ZXN0aW5nI3Rlc3RpbmctdHJhbnNjbHVzaW9uLWRpcmVjdGl2ZXNcbiAqIFRlc3RpbmcgVHJhbnNjbHVzaW9uIERpcmVjdGl2ZXN9LlxuICogPC9kaXY+XG4gKlxuICogIyMjIyBUcmFuc2NsdXNpb24gRnVuY3Rpb25zXG4gKlxuICogV2hlbiBhIGRpcmVjdGl2ZSByZXF1ZXN0cyB0cmFuc2NsdXNpb24sIHRoZSBjb21waWxlciBleHRyYWN0cyBpdHMgY29udGVudHMgYW5kIHByb3ZpZGVzIGEgKip0cmFuc2NsdXNpb25cbiAqIGZ1bmN0aW9uKiogdG8gdGhlIGRpcmVjdGl2ZSdzIGBsaW5rYCBmdW5jdGlvbiBhbmQgYGNvbnRyb2xsZXJgLiBUaGlzIHRyYW5zY2x1c2lvbiBmdW5jdGlvbiBpcyBhIHNwZWNpYWxcbiAqICoqbGlua2luZyBmdW5jdGlvbioqIHRoYXQgd2lsbCByZXR1cm4gdGhlIGNvbXBpbGVkIGNvbnRlbnRzIGxpbmtlZCB0byBhIG5ldyB0cmFuc2NsdXNpb24gc2NvcGUuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIj5cbiAqIElmIHlvdSBhcmUganVzdCB1c2luZyB7QGxpbmsgbmdUcmFuc2NsdWRlfSB0aGVuIHlvdSBkb24ndCBuZWVkIHRvIHdvcnJ5IGFib3V0IHRoaXMgZnVuY3Rpb24sIHNpbmNlXG4gKiBuZ1RyYW5zY2x1ZGUgd2lsbCBkZWFsIHdpdGggaXQgZm9yIHVzLlxuICogPC9kaXY+XG4gKlxuICogSWYgeW91IHdhbnQgdG8gbWFudWFsbHkgY29udHJvbCB0aGUgaW5zZXJ0aW9uIGFuZCByZW1vdmFsIG9mIHRoZSB0cmFuc2NsdWRlZCBjb250ZW50IGluIHlvdXIgZGlyZWN0aXZlXG4gKiB0aGVuIHlvdSBtdXN0IHVzZSB0aGlzIHRyYW5zY2x1ZGUgZnVuY3Rpb24uIFdoZW4geW91IGNhbGwgYSB0cmFuc2NsdWRlIGZ1bmN0aW9uIGl0IHJldHVybnMgYSBhIGpxTGl0ZS9KUXVlcnlcbiAqIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoZSBjb21waWxlZCBET00sIHdoaWNoIGlzIGxpbmtlZCB0byB0aGUgY29ycmVjdCB0cmFuc2NsdXNpb24gc2NvcGUuXG4gKlxuICogV2hlbiB5b3UgY2FsbCBhIHRyYW5zY2x1c2lvbiBmdW5jdGlvbiB5b3UgY2FuIHBhc3MgaW4gYSAqKmNsb25lIGF0dGFjaCBmdW5jdGlvbioqLiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHNcbiAqIHR3byBwYXJhbWV0ZXJzLCBgZnVuY3Rpb24oY2xvbmUsIHNjb3BlKSB7IC4uLiB9YCwgd2hlcmUgdGhlIGBjbG9uZWAgaXMgYSBmcmVzaCBjb21waWxlZCBjb3B5IG9mIHlvdXIgdHJhbnNjbHVkZWRcbiAqIGNvbnRlbnQgYW5kIHRoZSBgc2NvcGVgIGlzIHRoZSBuZXdseSBjcmVhdGVkIHRyYW5zY2x1c2lvbiBzY29wZSwgdG8gd2hpY2ggdGhlIGNsb25lIGlzIGJvdW5kLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCI+XG4gKiAqKkJlc3QgUHJhY3RpY2UqKjogQWx3YXlzIHByb3ZpZGUgYSBgY2xvbmVGbmAgKGNsb25lIGF0dGFjaCBmdW5jdGlvbikgd2hlbiB5b3UgY2FsbCBhIHRyYW5zbHVkZSBmdW5jdGlvblxuICogc2luY2UgeW91IHRoZW4gZ2V0IGEgZnJlc2ggY2xvbmUgb2YgdGhlIG9yaWdpbmFsIERPTSBhbmQgYWxzbyBoYXZlIGFjY2VzcyB0byB0aGUgbmV3IHRyYW5zY2x1c2lvbiBzY29wZS5cbiAqIDwvZGl2PlxuICpcbiAqIEl0IGlzIG5vcm1hbCBwcmFjdGljZSB0byBhdHRhY2ggeW91ciB0cmFuc2NsdWRlZCBjb250ZW50IChgY2xvbmVgKSB0byB0aGUgRE9NIGluc2lkZSB5b3VyICoqY2xvbmVcbiAqIGF0dGFjaCBmdW5jdGlvbioqOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgdHJhbnNjbHVkZWRDb250ZW50LCB0cmFuc2NsdXNpb25TY29wZTtcbiAqXG4gKiAkdHJhbnNjbHVkZShmdW5jdGlvbihjbG9uZSwgc2NvcGUpIHtcbiAqICAgZWxlbWVudC5hcHBlbmQoY2xvbmUpO1xuICogICB0cmFuc2NsdWRlZENvbnRlbnQgPSBjbG9uZTtcbiAqICAgdHJhbnNjbHVzaW9uU2NvcGUgPSBzY29wZTtcbiAqIH0pO1xuICogYGBgXG4gKlxuICogTGF0ZXIsIGlmIHlvdSB3YW50IHRvIHJlbW92ZSB0aGUgdHJhbnNjbHVkZWQgY29udGVudCBmcm9tIHlvdXIgRE9NIHRoZW4geW91IHNob3VsZCBhbHNvIGRlc3Ryb3kgdGhlXG4gKiBhc3NvY2lhdGVkIHRyYW5zY2x1c2lvbiBzY29wZTpcbiAqXG4gKiBgYGBqc1xuICogdHJhbnNjbHVkZWRDb250ZW50LnJlbW92ZSgpO1xuICogdHJhbnNjbHVzaW9uU2NvcGUuJGRlc3Ryb3koKTtcbiAqIGBgYFxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCI+XG4gKiAqKkJlc3QgUHJhY3RpY2UqKjogaWYgeW91IGludGVuZCB0byBhZGQgYW5kIHJlbW92ZSB0cmFuc2NsdWRlZCBjb250ZW50IG1hbnVhbGx5IGluIHlvdXIgZGlyZWN0aXZlXG4gKiAoYnkgY2FsbGluZyB0aGUgdHJhbnNjbHVkZSBmdW5jdGlvbiB0byBnZXQgdGhlIERPTSBhbmQgYW5kIGNhbGxpbmcgYGVsZW1lbnQucmVtb3ZlKClgIHRvIHJlbW92ZSBpdCksXG4gKiB0aGVuIHlvdSBhcmUgYWxzbyByZXNwb25zaWJsZSBmb3IgY2FsbGluZyBgJGRlc3Ryb3lgIG9uIHRoZSB0cmFuc2NsdXNpb24gc2NvcGUuXG4gKiA8L2Rpdj5cbiAqXG4gKiBUaGUgYnVpbHQtaW4gRE9NIG1hbmlwdWxhdGlvbiBkaXJlY3RpdmVzLCBzdWNoIGFzIHtAbGluayBuZ0lmfSwge0BsaW5rIG5nU3dpdGNofSBhbmQge0BsaW5rIG5nUmVwZWF0fVxuICogYXV0b21hdGljYWxseSBkZXN0cm95IHRoZWlyIHRyYW5zbHVkZWQgY2xvbmVzIGFzIG5lY2Vzc2FyeSBzbyB5b3UgZG8gbm90IG5lZWQgdG8gd29ycnkgYWJvdXQgdGhpcyBpZlxuICogeW91IGFyZSBzaW1wbHkgdXNpbmcge0BsaW5rIG5nVHJhbnNjbHVkZX0gdG8gaW5qZWN0IHRoZSB0cmFuc2NsdXNpb24gaW50byB5b3VyIGRpcmVjdGl2ZS5cbiAqXG4gKlxuICogIyMjIyBUcmFuc2NsdXNpb24gU2NvcGVzXG4gKlxuICogV2hlbiB5b3UgY2FsbCBhIHRyYW5zY2x1ZGUgZnVuY3Rpb24gaXQgcmV0dXJucyBhIERPTSBmcmFnbWVudCB0aGF0IGlzIHByZS1ib3VuZCB0byBhICoqdHJhbnNjbHVzaW9uXG4gKiBzY29wZSoqLiBUaGlzIHNjb3BlIGlzIHNwZWNpYWwsIGluIHRoYXQgaXQgaXMgYSBjaGlsZCBvZiB0aGUgZGlyZWN0aXZlJ3Mgc2NvcGUgKGFuZCBzbyBnZXRzIGRlc3Ryb3llZFxuICogd2hlbiB0aGUgZGlyZWN0aXZlJ3Mgc2NvcGUgZ2V0cyBkZXN0cm95ZWQpIGJ1dCBpdCBpbmhlcml0cyB0aGUgcHJvcGVydGllcyBvZiB0aGUgc2NvcGUgZnJvbSB3aGljaCBpdFxuICogd2FzIHRha2VuLlxuICpcbiAqIEZvciBleGFtcGxlIGNvbnNpZGVyIGEgZGlyZWN0aXZlIHRoYXQgdXNlcyB0cmFuc2NsdXNpb24gYW5kIGlzb2xhdGVkIHNjb3BlLiBUaGUgRE9NIGhpZXJhcmNoeSBtaWdodCBsb29rXG4gKiBsaWtlIHRoaXM6XG4gKlxuICogYGBgaHRtbFxuICogPGRpdiBuZy1hcHA+XG4gKiAgIDxkaXYgaXNvbGF0ZT5cbiAqICAgICA8ZGl2IHRyYW5zY2x1c2lvbj5cbiAqICAgICA8L2Rpdj5cbiAqICAgPC9kaXY+XG4gKiA8L2Rpdj5cbiAqIGBgYFxuICpcbiAqIFRoZSBgJHBhcmVudGAgc2NvcGUgaGllcmFyY2h5IHdpbGwgbG9vayBsaWtlIHRoaXM6XG4gKlxuICogYGBgXG4gKiAtICRyb290U2NvcGVcbiAqICAgLSBpc29sYXRlXG4gKiAgICAgLSB0cmFuc2NsdXNpb25cbiAqIGBgYFxuICpcbiAqIGJ1dCB0aGUgc2NvcGVzIHdpbGwgaW5oZXJpdCBwcm90b3R5cGljYWxseSBmcm9tIGRpZmZlcmVudCBzY29wZXMgdG8gdGhlaXIgYCRwYXJlbnRgLlxuICpcbiAqIGBgYFxuICogLSAkcm9vdFNjb3BlXG4gKiAgIC0gdHJhbnNjbHVzaW9uXG4gKiAtIGlzb2xhdGVcbiAqIGBgYFxuICpcbiAqXG4gKiAjIyMgQXR0cmlidXRlc1xuICpcbiAqIFRoZSB7QGxpbmsgbmcuJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMgQXR0cmlidXRlc30gb2JqZWN0IC0gcGFzc2VkIGFzIGEgcGFyYW1ldGVyIGluIHRoZVxuICogYGxpbmsoKWAgb3IgYGNvbXBpbGUoKWAgZnVuY3Rpb25zLiBJdCBoYXMgYSB2YXJpZXR5IG9mIHVzZXMuXG4gKlxuICogYWNjZXNzaW5nICpOb3JtYWxpemVkIGF0dHJpYnV0ZSBuYW1lczoqXG4gKiBEaXJlY3RpdmVzIGxpa2UgJ25nQmluZCcgY2FuIGJlIGV4cHJlc3NlZCBpbiBtYW55IHdheXM6ICduZzpiaW5kJywgYGRhdGEtbmctYmluZGAsIG9yICd4LW5nLWJpbmQnLlxuICogdGhlIGF0dHJpYnV0ZXMgb2JqZWN0IGFsbG93cyBmb3Igbm9ybWFsaXplZCBhY2Nlc3MgdG9cbiAqICAgdGhlIGF0dHJpYnV0ZXMuXG4gKlxuICogKiAqRGlyZWN0aXZlIGludGVyLWNvbW11bmljYXRpb246KiBBbGwgZGlyZWN0aXZlcyBzaGFyZSB0aGUgc2FtZSBpbnN0YW5jZSBvZiB0aGUgYXR0cmlidXRlc1xuICogICBvYmplY3Qgd2hpY2ggYWxsb3dzIHRoZSBkaXJlY3RpdmVzIHRvIHVzZSB0aGUgYXR0cmlidXRlcyBvYmplY3QgYXMgaW50ZXIgZGlyZWN0aXZlXG4gKiAgIGNvbW11bmljYXRpb24uXG4gKlxuICogKiAqU3VwcG9ydHMgaW50ZXJwb2xhdGlvbjoqIEludGVycG9sYXRpb24gYXR0cmlidXRlcyBhcmUgYXNzaWduZWQgdG8gdGhlIGF0dHJpYnV0ZSBvYmplY3RcbiAqICAgYWxsb3dpbmcgb3RoZXIgZGlyZWN0aXZlcyB0byByZWFkIHRoZSBpbnRlcnBvbGF0ZWQgdmFsdWUuXG4gKlxuICogKiAqT2JzZXJ2aW5nIGludGVycG9sYXRlZCBhdHRyaWJ1dGVzOiogVXNlIGAkb2JzZXJ2ZWAgdG8gb2JzZXJ2ZSB0aGUgdmFsdWUgY2hhbmdlcyBvZiBhdHRyaWJ1dGVzXG4gKiAgIHRoYXQgY29udGFpbiBpbnRlcnBvbGF0aW9uIChlLmcuIGBzcmM9XCJ7e2Jhcn19XCJgKS4gTm90IG9ubHkgaXMgdGhpcyB2ZXJ5IGVmZmljaWVudCBidXQgaXQncyBhbHNvXG4gKiAgIHRoZSBvbmx5IHdheSB0byBlYXNpbHkgZ2V0IHRoZSBhY3R1YWwgdmFsdWUgYmVjYXVzZSBkdXJpbmcgdGhlIGxpbmtpbmcgcGhhc2UgdGhlIGludGVycG9sYXRpb25cbiAqICAgaGFzbid0IGJlZW4gZXZhbHVhdGVkIHlldCBhbmQgc28gdGhlIHZhbHVlIGlzIGF0IHRoaXMgdGltZSBzZXQgdG8gYHVuZGVmaW5lZGAuXG4gKlxuICogYGBganNcbiAqIGZ1bmN0aW9uIGxpbmtpbmdGbihzY29wZSwgZWxtLCBhdHRycywgY3RybCkge1xuICogICAvLyBnZXQgdGhlIGF0dHJpYnV0ZSB2YWx1ZVxuICogICBjb25zb2xlLmxvZyhhdHRycy5uZ01vZGVsKTtcbiAqXG4gKiAgIC8vIGNoYW5nZSB0aGUgYXR0cmlidXRlXG4gKiAgIGF0dHJzLiRzZXQoJ25nTW9kZWwnLCAnbmV3IHZhbHVlJyk7XG4gKlxuICogICAvLyBvYnNlcnZlIGNoYW5nZXMgdG8gaW50ZXJwb2xhdGVkIGF0dHJpYnV0ZVxuICogICBhdHRycy4kb2JzZXJ2ZSgnbmdNb2RlbCcsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gKiAgICAgY29uc29sZS5sb2coJ25nTW9kZWwgaGFzIGNoYW5nZWQgdmFsdWUgdG8gJyArIHZhbHVlKTtcbiAqICAgfSk7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiAjIyBFeGFtcGxlXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICoqTm90ZSoqOiBUeXBpY2FsbHkgZGlyZWN0aXZlcyBhcmUgcmVnaXN0ZXJlZCB3aXRoIGBtb2R1bGUuZGlyZWN0aXZlYC4gVGhlIGV4YW1wbGUgYmVsb3cgaXNcbiAqIHRvIGlsbHVzdHJhdGUgaG93IGAkY29tcGlsZWAgd29ya3MuXG4gKiA8L2Rpdj5cbiAqXG4gPGV4YW1wbGUgbW9kdWxlPVwiY29tcGlsZUV4YW1wbGVcIj5cbiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgPHNjcmlwdD5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdjb21waWxlRXhhbXBsZScsIFtdLCBmdW5jdGlvbigkY29tcGlsZVByb3ZpZGVyKSB7XG4gICAgICAgIC8vIGNvbmZpZ3VyZSBuZXcgJ2NvbXBpbGUnIGRpcmVjdGl2ZSBieSBwYXNzaW5nIGEgZGlyZWN0aXZlXG4gICAgICAgIC8vIGZhY3RvcnkgZnVuY3Rpb24uIFRoZSBmYWN0b3J5IGZ1bmN0aW9uIGluamVjdHMgdGhlICckY29tcGlsZSdcbiAgICAgICAgJGNvbXBpbGVQcm92aWRlci5kaXJlY3RpdmUoJ2NvbXBpbGUnLCBmdW5jdGlvbigkY29tcGlsZSkge1xuICAgICAgICAgIC8vIGRpcmVjdGl2ZSBmYWN0b3J5IGNyZWF0ZXMgYSBsaW5rIGZ1bmN0aW9uXG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICAgICAgc2NvcGUuJHdhdGNoKFxuICAgICAgICAgICAgICBmdW5jdGlvbihzY29wZSkge1xuICAgICAgICAgICAgICAgICAvLyB3YXRjaCB0aGUgJ2NvbXBpbGUnIGV4cHJlc3Npb24gZm9yIGNoYW5nZXNcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NvcGUuJGV2YWwoYXR0cnMuY29tcGlsZSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgLy8gd2hlbiB0aGUgJ2NvbXBpbGUnIGV4cHJlc3Npb24gY2hhbmdlc1xuICAgICAgICAgICAgICAgIC8vIGFzc2lnbiBpdCBpbnRvIHRoZSBjdXJyZW50IERPTVxuICAgICAgICAgICAgICAgIGVsZW1lbnQuaHRtbCh2YWx1ZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBjb21waWxlIHRoZSBuZXcgRE9NIGFuZCBsaW5rIGl0IHRvIHRoZSBjdXJyZW50XG4gICAgICAgICAgICAgICAgLy8gc2NvcGUuXG4gICAgICAgICAgICAgICAgLy8gTk9URTogd2Ugb25seSBjb21waWxlIC5jaGlsZE5vZGVzIHNvIHRoYXRcbiAgICAgICAgICAgICAgICAvLyB3ZSBkb24ndCBnZXQgaW50byBpbmZpbml0ZSBsb29wIGNvbXBpbGluZyBvdXJzZWx2ZXNcbiAgICAgICAgICAgICAgICAkY29tcGlsZShlbGVtZW50LmNvbnRlbnRzKCkpKHNjb3BlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgICAuY29udHJvbGxlcignR3JlZXRlckNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAkc2NvcGUubmFtZSA9ICdBbmd1bGFyJztcbiAgICAgICAgJHNjb3BlLmh0bWwgPSAnSGVsbG8ge3tuYW1lfX0nO1xuICAgICAgfV0pO1xuICAgIDwvc2NyaXB0PlxuICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkdyZWV0ZXJDb250cm9sbGVyXCI+XG4gICAgICA8aW5wdXQgbmctbW9kZWw9XCJuYW1lXCI+IDxicj5cbiAgICAgIDx0ZXh0YXJlYSBuZy1tb2RlbD1cImh0bWxcIj48L3RleHRhcmVhPiA8YnI+XG4gICAgICA8ZGl2IGNvbXBpbGU9XCJodG1sXCI+PC9kaXY+XG4gICAgPC9kaXY+XG4gICA8L2ZpbGU+XG4gICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgIGl0KCdzaG91bGQgYXV0byBjb21waWxlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgdmFyIHRleHRhcmVhID0gJCgndGV4dGFyZWEnKTtcbiAgICAgICB2YXIgb3V0cHV0ID0gJCgnZGl2W2NvbXBpbGVdJyk7XG4gICAgICAgLy8gVGhlIGluaXRpYWwgc3RhdGUgcmVhZHMgJ0hlbGxvIEFuZ3VsYXInLlxuICAgICAgIGV4cGVjdChvdXRwdXQuZ2V0VGV4dCgpKS50b0JlKCdIZWxsbyBBbmd1bGFyJyk7XG4gICAgICAgdGV4dGFyZWEuY2xlYXIoKTtcbiAgICAgICB0ZXh0YXJlYS5zZW5kS2V5cygne3tuYW1lfX0hJyk7XG4gICAgICAgZXhwZWN0KG91dHB1dC5nZXRUZXh0KCkpLnRvQmUoJ0FuZ3VsYXIhJyk7XG4gICAgIH0pO1xuICAgPC9maWxlPlxuIDwvZXhhbXBsZT5cblxuICpcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xET01FbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgb3IgSFRNTCBzdHJpbmcgdG8gY29tcGlsZSBpbnRvIGEgdGVtcGxhdGUgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKGFuZ3VsYXIuU2NvcGUsIGNsb25lQXR0YWNoRm49KX0gdHJhbnNjbHVkZSBmdW5jdGlvbiBhdmFpbGFibGUgdG8gZGlyZWN0aXZlcyAtIERFUFJFQ0FURUQuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWVycm9yXCI+XG4gKiAqKk5vdGU6KiogUGFzc2luZyBhIGB0cmFuc2NsdWRlYCBmdW5jdGlvbiB0byB0aGUgJGNvbXBpbGUgZnVuY3Rpb24gaXMgZGVwcmVjYXRlZCwgYXMgaXRcbiAqICAgZS5nLiB3aWxsIG5vdCB1c2UgdGhlIHJpZ2h0IG91dGVyIHNjb3BlLiBQbGVhc2UgcGFzcyB0aGUgdHJhbnNjbHVkZSBmdW5jdGlvbiBhcyBhXG4gKiAgIGBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbmAgdG8gdGhlIGxpbmsgZnVuY3Rpb24gaW5zdGVhZC5cbiAqIDwvZGl2PlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXhQcmlvcml0eSBvbmx5IGFwcGx5IGRpcmVjdGl2ZXMgbG93ZXIgdGhhbiBnaXZlbiBwcmlvcml0eSAoT25seSBlZmZlY3RzIHRoZVxuICogICAgICAgICAgICAgICAgIHJvb3QgZWxlbWVudChzKSwgbm90IHRoZWlyIGNoaWxkcmVuKVxuICogQHJldHVybnMge2Z1bmN0aW9uKHNjb3BlLCBjbG9uZUF0dGFjaEZuPSwgb3B0aW9ucz0pfSBhIGxpbmsgZnVuY3Rpb24gd2hpY2ggaXMgdXNlZCB0byBiaW5kIHRlbXBsYXRlXG4gKiAoYSBET00gZWxlbWVudC90cmVlKSB0byBhIHNjb3BlLiBXaGVyZTpcbiAqXG4gKiAgKiBgc2NvcGVgIC0gQSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBTY29wZX0gdG8gYmluZCB0by5cbiAqICAqIGBjbG9uZUF0dGFjaEZuYCAtIElmIGBjbG9uZUF0dGFjaEZuYCBpcyBwcm92aWRlZCwgdGhlbiB0aGUgbGluayBmdW5jdGlvbiB3aWxsIGNsb25lIHRoZVxuICogIGB0ZW1wbGF0ZWAgYW5kIGNhbGwgdGhlIGBjbG9uZUF0dGFjaEZuYCBmdW5jdGlvbiBhbGxvd2luZyB0aGUgY2FsbGVyIHRvIGF0dGFjaCB0aGVcbiAqICBjbG9uZWQgZWxlbWVudHMgdG8gdGhlIERPTSBkb2N1bWVudCBhdCB0aGUgYXBwcm9wcmlhdGUgcGxhY2UuIFRoZSBgY2xvbmVBdHRhY2hGbmAgaXNcbiAqICBjYWxsZWQgYXM6IDxicj4gYGNsb25lQXR0YWNoRm4oY2xvbmVkRWxlbWVudCwgc2NvcGUpYCB3aGVyZTpcbiAqXG4gKiAgICAgICogYGNsb25lZEVsZW1lbnRgIC0gaXMgYSBjbG9uZSBvZiB0aGUgb3JpZ2luYWwgYGVsZW1lbnRgIHBhc3NlZCBpbnRvIHRoZSBjb21waWxlci5cbiAqICAgICAgKiBgc2NvcGVgIC0gaXMgdGhlIGN1cnJlbnQgc2NvcGUgd2l0aCB3aGljaCB0aGUgbGlua2luZyBmdW5jdGlvbiBpcyB3b3JraW5nIHdpdGguXG4gKlxuICogICogYG9wdGlvbnNgIC0gQW4gb3B0aW9uYWwgb2JqZWN0IGhhc2ggd2l0aCBsaW5raW5nIG9wdGlvbnMuIElmIGBvcHRpb25zYCBpcyBwcm92aWRlZCwgdGhlbiB0aGUgZm9sbG93aW5nXG4gKiAga2V5cyBtYXkgYmUgdXNlZCB0byBjb250cm9sIGxpbmtpbmcgYmVoYXZpb3I6XG4gKlxuICogICAgICAqIGBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbmAgLSB0aGUgdHJhbnNjbHVkZSBmdW5jdGlvbiBtYWRlIGF2YWlsYWJsZSB0b1xuICogICAgICAgIGRpcmVjdGl2ZXM7IGlmIGdpdmVuLCBpdCB3aWxsIGJlIHBhc3NlZCB0aHJvdWdoIHRvIHRoZSBsaW5rIGZ1bmN0aW9ucyBvZlxuICogICAgICAgIGRpcmVjdGl2ZXMgZm91bmQgaW4gYGVsZW1lbnRgIGR1cmluZyBjb21waWxhdGlvbi5cbiAqICAgICAgKiBgdHJhbnNjbHVkZUNvbnRyb2xsZXJzYCAtIGFuIG9iamVjdCBoYXNoIHdpdGgga2V5cyB0aGF0IG1hcCBjb250cm9sbGVyIG5hbWVzXG4gKiAgICAgICAgdG8gY29udHJvbGxlciBpbnN0YW5jZXM7IGlmIGdpdmVuLCBpdCB3aWxsIG1ha2UgdGhlIGNvbnRyb2xsZXJzXG4gKiAgICAgICAgYXZhaWxhYmxlIHRvIGRpcmVjdGl2ZXMuXG4gKiAgICAgICogYGZ1dHVyZVBhcmVudEVsZW1lbnRgIC0gZGVmaW5lcyB0aGUgcGFyZW50IHRvIHdoaWNoIHRoZSBgY2xvbmVBdHRhY2hGbmAgd2lsbCBhZGRcbiAqICAgICAgICB0aGUgY2xvbmVkIGVsZW1lbnRzOyBvbmx5IG5lZWRlZCBmb3IgdHJhbnNjbHVkZXMgdGhhdCBhcmUgYWxsb3dlZCB0byBjb250YWluIG5vbiBodG1sXG4gKiAgICAgICAgZWxlbWVudHMgKGUuZy4gU1ZHIGVsZW1lbnRzKS4gU2VlIGFsc28gdGhlIGRpcmVjdGl2ZS5jb250cm9sbGVyIHByb3BlcnR5LlxuICpcbiAqIENhbGxpbmcgdGhlIGxpbmtpbmcgZnVuY3Rpb24gcmV0dXJucyB0aGUgZWxlbWVudCBvZiB0aGUgdGVtcGxhdGUuIEl0IGlzIGVpdGhlciB0aGUgb3JpZ2luYWxcbiAqIGVsZW1lbnQgcGFzc2VkIGluLCBvciB0aGUgY2xvbmUgb2YgdGhlIGVsZW1lbnQgaWYgdGhlIGBjbG9uZUF0dGFjaEZuYCBpcyBwcm92aWRlZC5cbiAqXG4gKiBBZnRlciBsaW5raW5nIHRoZSB2aWV3IGlzIG5vdCB1cGRhdGVkIHVudGlsIGFmdGVyIGEgY2FsbCB0byAkZGlnZXN0IHdoaWNoIHR5cGljYWxseSBpcyBkb25lIGJ5XG4gKiBBbmd1bGFyIGF1dG9tYXRpY2FsbHkuXG4gKlxuICogSWYgeW91IG5lZWQgYWNjZXNzIHRvIHRoZSBib3VuZCB2aWV3LCB0aGVyZSBhcmUgdHdvIHdheXMgdG8gZG8gaXQ6XG4gKlxuICogLSBJZiB5b3UgYXJlIG5vdCBhc2tpbmcgdGhlIGxpbmtpbmcgZnVuY3Rpb24gdG8gY2xvbmUgdGhlIHRlbXBsYXRlLCBjcmVhdGUgdGhlIERPTSBlbGVtZW50KHMpXG4gKiAgIGJlZm9yZSB5b3Ugc2VuZCB0aGVtIHRvIHRoZSBjb21waWxlciBhbmQga2VlcCB0aGlzIHJlZmVyZW5jZSBhcm91bmQuXG4gKiAgIGBgYGpzXG4gKiAgICAgdmFyIGVsZW1lbnQgPSAkY29tcGlsZSgnPHA+e3t0b3RhbH19PC9wPicpKHNjb3BlKTtcbiAqICAgYGBgXG4gKlxuICogLSBpZiBvbiB0aGUgb3RoZXIgaGFuZCwgeW91IG5lZWQgdGhlIGVsZW1lbnQgdG8gYmUgY2xvbmVkLCB0aGUgdmlldyByZWZlcmVuY2UgZnJvbSB0aGUgb3JpZ2luYWxcbiAqICAgZXhhbXBsZSB3b3VsZCBub3QgcG9pbnQgdG8gdGhlIGNsb25lLCBidXQgcmF0aGVyIHRvIHRoZSBvcmlnaW5hbCB0ZW1wbGF0ZSB0aGF0IHdhcyBjbG9uZWQuIEluXG4gKiAgIHRoaXMgY2FzZSwgeW91IGNhbiBhY2Nlc3MgdGhlIGNsb25lIHZpYSB0aGUgY2xvbmVBdHRhY2hGbjpcbiAqICAgYGBganNcbiAqICAgICB2YXIgdGVtcGxhdGVFbGVtZW50ID0gYW5ndWxhci5lbGVtZW50KCc8cD57e3RvdGFsfX08L3A+JyksXG4gKiAgICAgICAgIHNjb3BlID0gLi4uLjtcbiAqXG4gKiAgICAgdmFyIGNsb25lZEVsZW1lbnQgPSAkY29tcGlsZSh0ZW1wbGF0ZUVsZW1lbnQpKHNjb3BlLCBmdW5jdGlvbihjbG9uZWRFbGVtZW50LCBzY29wZSkge1xuICogICAgICAgLy9hdHRhY2ggdGhlIGNsb25lIHRvIERPTSBkb2N1bWVudCBhdCB0aGUgcmlnaHQgcGxhY2VcbiAqICAgICB9KTtcbiAqXG4gKiAgICAgLy9ub3cgd2UgaGF2ZSByZWZlcmVuY2UgdG8gdGhlIGNsb25lZCBET00gdmlhIGBjbG9uZWRFbGVtZW50YFxuICogICBgYGBcbiAqXG4gKlxuICogRm9yIGluZm9ybWF0aW9uIG9uIGhvdyB0aGUgY29tcGlsZXIgd29ya3MsIHNlZSB0aGVcbiAqIHtAbGluayBndWlkZS9jb21waWxlciBBbmd1bGFyIEhUTUwgQ29tcGlsZXJ9IHNlY3Rpb24gb2YgdGhlIERldmVsb3BlciBHdWlkZS5cbiAqL1xuXG52YXIgJGNvbXBpbGVNaW5FcnIgPSBtaW5FcnIoJyRjb21waWxlJyk7XG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkY29tcGlsZVByb3ZpZGVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKi9cbiRDb21waWxlUHJvdmlkZXIuJGluamVjdCA9IFsnJHByb3ZpZGUnLCAnJCRzYW5pdGl6ZVVyaVByb3ZpZGVyJ107XG5mdW5jdGlvbiAkQ29tcGlsZVByb3ZpZGVyKCRwcm92aWRlLCAkJHNhbml0aXplVXJpUHJvdmlkZXIpIHtcbiAgdmFyIGhhc0RpcmVjdGl2ZXMgPSB7fSxcbiAgICAgIFN1ZmZpeCA9ICdEaXJlY3RpdmUnLFxuICAgICAgQ09NTUVOVF9ESVJFQ1RJVkVfUkVHRVhQID0gL15cXHMqZGlyZWN0aXZlXFw6XFxzKihbXFx3XFwtXSspXFxzKyguKikkLyxcbiAgICAgIENMQVNTX0RJUkVDVElWRV9SRUdFWFAgPSAvKChbXFx3XFwtXSspKD86XFw6KFteO10rKSk/Oz8pLyxcbiAgICAgIEFMTF9PUl9OT1RISU5HX0FUVFJTID0gbWFrZU1hcCgnbmdTcmMsbmdTcmNzZXQsc3JjLHNyY3NldCcpLFxuICAgICAgUkVRVUlSRV9QUkVGSVhfUkVHRVhQID0gL14oPzooXFxeXFxePyk/KFxcPyk/KFxcXlxcXj8pPyk/LztcblxuICAvLyBSZWY6IGh0dHA6Ly9kZXZlbG9wZXJzLndoYXR3Zy5vcmcvd2ViYXBwYXBpcy5odG1sI2V2ZW50LWhhbmRsZXItaWRsLWF0dHJpYnV0ZXNcbiAgLy8gVGhlIGFzc3VtcHRpb24gaXMgdGhhdCBmdXR1cmUgRE9NIGV2ZW50IGF0dHJpYnV0ZSBuYW1lcyB3aWxsIGJlZ2luIHdpdGhcbiAgLy8gJ29uJyBhbmQgYmUgY29tcG9zZWQgb2Ygb25seSBFbmdsaXNoIGxldHRlcnMuXG4gIHZhciBFVkVOVF9IQU5ETEVSX0FUVFJfUkVHRVhQID0gL14ob25bYS16XSt8Zm9ybWFjdGlvbikkLztcblxuICBmdW5jdGlvbiBwYXJzZUlzb2xhdGVCaW5kaW5ncyhzY29wZSwgZGlyZWN0aXZlTmFtZSkge1xuICAgIHZhciBMT0NBTF9SRUdFWFAgPSAvXlxccyooW0AmXXw9KFxcKj8pKShcXD8/KVxccyooXFx3KilcXHMqJC87XG5cbiAgICB2YXIgYmluZGluZ3MgPSB7fTtcblxuICAgIGZvckVhY2goc2NvcGUsIGZ1bmN0aW9uKGRlZmluaXRpb24sIHNjb3BlTmFtZSkge1xuICAgICAgdmFyIG1hdGNoID0gZGVmaW5pdGlvbi5tYXRjaChMT0NBTF9SRUdFWFApO1xuXG4gICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdpc2NwJyxcbiAgICAgICAgICAgIFwiSW52YWxpZCBpc29sYXRlIHNjb3BlIGRlZmluaXRpb24gZm9yIGRpcmVjdGl2ZSAnezB9Jy5cIiArXG4gICAgICAgICAgICBcIiBEZWZpbml0aW9uOiB7Li4uIHsxfTogJ3syfScgLi4ufVwiLFxuICAgICAgICAgICAgZGlyZWN0aXZlTmFtZSwgc2NvcGVOYW1lLCBkZWZpbml0aW9uKTtcbiAgICAgIH1cblxuICAgICAgYmluZGluZ3Nbc2NvcGVOYW1lXSA9IHtcbiAgICAgICAgbW9kZTogbWF0Y2hbMV1bMF0sXG4gICAgICAgIGNvbGxlY3Rpb246IG1hdGNoWzJdID09PSAnKicsXG4gICAgICAgIG9wdGlvbmFsOiBtYXRjaFszXSA9PT0gJz8nLFxuICAgICAgICBhdHRyTmFtZTogbWF0Y2hbNF0gfHwgc2NvcGVOYW1lXG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGJpbmRpbmdzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGNvbXBpbGVQcm92aWRlciNkaXJlY3RpdmVcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJlZ2lzdGVyIGEgbmV3IGRpcmVjdGl2ZSB3aXRoIHRoZSBjb21waWxlci5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fSBuYW1lIE5hbWUgb2YgdGhlIGRpcmVjdGl2ZSBpbiBjYW1lbC1jYXNlIChpLmUuIDxjb2RlPm5nQmluZDwvY29kZT4gd2hpY2hcbiAgICogICAgd2lsbCBtYXRjaCBhcyA8Y29kZT5uZy1iaW5kPC9jb2RlPiksIG9yIGFuIG9iamVjdCBtYXAgb2YgZGlyZWN0aXZlcyB3aGVyZSB0aGUga2V5cyBhcmUgdGhlXG4gICAqICAgIG5hbWVzIGFuZCB0aGUgdmFsdWVzIGFyZSB0aGUgZmFjdG9yaWVzLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5fSBkaXJlY3RpdmVGYWN0b3J5IEFuIGluamVjdGFibGUgZGlyZWN0aXZlIGZhY3RvcnkgZnVuY3Rpb24uIFNlZVxuICAgKiAgICB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlfSBmb3IgbW9yZSBpbmZvLlxuICAgKiBAcmV0dXJucyB7bmcuJGNvbXBpbGVQcm92aWRlcn0gU2VsZiBmb3IgY2hhaW5pbmcuXG4gICAqL1xuICAgdGhpcy5kaXJlY3RpdmUgPSBmdW5jdGlvbiByZWdpc3RlckRpcmVjdGl2ZShuYW1lLCBkaXJlY3RpdmVGYWN0b3J5KSB7XG4gICAgYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkobmFtZSwgJ2RpcmVjdGl2ZScpO1xuICAgIGlmIChpc1N0cmluZyhuYW1lKSkge1xuICAgICAgYXNzZXJ0QXJnKGRpcmVjdGl2ZUZhY3RvcnksICdkaXJlY3RpdmVGYWN0b3J5Jyk7XG4gICAgICBpZiAoIWhhc0RpcmVjdGl2ZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgaGFzRGlyZWN0aXZlc1tuYW1lXSA9IFtdO1xuICAgICAgICAkcHJvdmlkZS5mYWN0b3J5KG5hbWUgKyBTdWZmaXgsIFsnJGluamVjdG9yJywgJyRleGNlcHRpb25IYW5kbGVyJyxcbiAgICAgICAgICBmdW5jdGlvbigkaW5qZWN0b3IsICRleGNlcHRpb25IYW5kbGVyKSB7XG4gICAgICAgICAgICB2YXIgZGlyZWN0aXZlcyA9IFtdO1xuICAgICAgICAgICAgZm9yRWFjaChoYXNEaXJlY3RpdmVzW25hbWVdLCBmdW5jdGlvbihkaXJlY3RpdmVGYWN0b3J5LCBpbmRleCkge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciBkaXJlY3RpdmUgPSAkaW5qZWN0b3IuaW52b2tlKGRpcmVjdGl2ZUZhY3RvcnkpO1xuICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGRpcmVjdGl2ZSkpIHtcbiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZSA9IHsgY29tcGlsZTogdmFsdWVGbihkaXJlY3RpdmUpIH07XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghZGlyZWN0aXZlLmNvbXBpbGUgJiYgZGlyZWN0aXZlLmxpbmspIHtcbiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS5jb21waWxlID0gdmFsdWVGbihkaXJlY3RpdmUubGluayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS5wcmlvcml0eSA9IGRpcmVjdGl2ZS5wcmlvcml0eSB8fCAwO1xuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS5pbmRleCA9IGluZGV4O1xuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS5uYW1lID0gZGlyZWN0aXZlLm5hbWUgfHwgbmFtZTtcbiAgICAgICAgICAgICAgICBkaXJlY3RpdmUucmVxdWlyZSA9IGRpcmVjdGl2ZS5yZXF1aXJlIHx8IChkaXJlY3RpdmUuY29udHJvbGxlciAmJiBkaXJlY3RpdmUubmFtZSk7XG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlLnJlc3RyaWN0ID0gZGlyZWN0aXZlLnJlc3RyaWN0IHx8ICdFQSc7XG4gICAgICAgICAgICAgICAgaWYgKGlzT2JqZWN0KGRpcmVjdGl2ZS5zY29wZSkpIHtcbiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS4kJGlzb2xhdGVCaW5kaW5ncyA9IHBhcnNlSXNvbGF0ZUJpbmRpbmdzKGRpcmVjdGl2ZS5zY29wZSwgZGlyZWN0aXZlLm5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkaXJlY3RpdmVzLnB1c2goZGlyZWN0aXZlKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBkaXJlY3RpdmVzO1xuICAgICAgICAgIH1dKTtcbiAgICAgIH1cbiAgICAgIGhhc0RpcmVjdGl2ZXNbbmFtZV0ucHVzaChkaXJlY3RpdmVGYWN0b3J5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yRWFjaChuYW1lLCByZXZlcnNlUGFyYW1zKHJlZ2lzdGVyRGlyZWN0aXZlKSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGNvbXBpbGVQcm92aWRlciNhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdFxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmV0cmlldmVzIG9yIG92ZXJyaWRlcyB0aGUgZGVmYXVsdCByZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBpcyB1c2VkIGZvciB3aGl0ZWxpc3Rpbmcgb2Ygc2FmZVxuICAgKiB1cmxzIGR1cmluZyBhW2hyZWZdIHNhbml0aXphdGlvbi5cbiAgICpcbiAgICogVGhlIHNhbml0aXphdGlvbiBpcyBhIHNlY3VyaXR5IG1lYXN1cmUgYWltZWQgYXQgcHJldmVudGluZyBYU1MgYXR0YWNrcyB2aWEgaHRtbCBsaW5rcy5cbiAgICpcbiAgICogQW55IHVybCBhYm91dCB0byBiZSBhc3NpZ25lZCB0byBhW2hyZWZdIHZpYSBkYXRhLWJpbmRpbmcgaXMgZmlyc3Qgbm9ybWFsaXplZCBhbmQgdHVybmVkIGludG9cbiAgICogYW4gYWJzb2x1dGUgdXJsLiBBZnRlcndhcmRzLCB0aGUgdXJsIGlzIG1hdGNoZWQgYWdhaW5zdCB0aGUgYGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0YFxuICAgKiByZWd1bGFyIGV4cHJlc3Npb24uIElmIGEgbWF0Y2ggaXMgZm91bmQsIHRoZSBvcmlnaW5hbCB1cmwgaXMgd3JpdHRlbiBpbnRvIHRoZSBkb20uIE90aGVyd2lzZSxcbiAgICogdGhlIGFic29sdXRlIHVybCBpcyBwcmVmaXhlZCB3aXRoIGAndW5zYWZlOidgIHN0cmluZyBhbmQgb25seSB0aGVuIGlzIGl0IHdyaXR0ZW4gaW50byB0aGUgRE9NLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlZ0V4cD19IHJlZ2V4cCBOZXcgcmVnZXhwIHRvIHdoaXRlbGlzdCB1cmxzIHdpdGguXG4gICAqIEByZXR1cm5zIHtSZWdFeHB8bmcuJGNvbXBpbGVQcm92aWRlcn0gQ3VycmVudCBSZWdFeHAgaWYgY2FsbGVkIHdpdGhvdXQgdmFsdWUgb3Igc2VsZiBmb3JcbiAgICogICAgY2hhaW5pbmcgb3RoZXJ3aXNlLlxuICAgKi9cbiAgdGhpcy5hSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdCA9IGZ1bmN0aW9uKHJlZ2V4cCkge1xuICAgIGlmIChpc0RlZmluZWQocmVnZXhwKSkge1xuICAgICAgJCRzYW5pdGl6ZVVyaVByb3ZpZGVyLmFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0KHJlZ2V4cCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICQkc2FuaXRpemVVcmlQcm92aWRlci5hSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdCgpO1xuICAgIH1cbiAgfTtcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRjb21waWxlUHJvdmlkZXIjaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0XG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZXRyaWV2ZXMgb3Igb3ZlcnJpZGVzIHRoZSBkZWZhdWx0IHJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IGlzIHVzZWQgZm9yIHdoaXRlbGlzdGluZyBvZiBzYWZlXG4gICAqIHVybHMgZHVyaW5nIGltZ1tzcmNdIHNhbml0aXphdGlvbi5cbiAgICpcbiAgICogVGhlIHNhbml0aXphdGlvbiBpcyBhIHNlY3VyaXR5IG1lYXN1cmUgYWltZWQgYXQgcHJldmVudCBYU1MgYXR0YWNrcyB2aWEgaHRtbCBsaW5rcy5cbiAgICpcbiAgICogQW55IHVybCBhYm91dCB0byBiZSBhc3NpZ25lZCB0byBpbWdbc3JjXSB2aWEgZGF0YS1iaW5kaW5nIGlzIGZpcnN0IG5vcm1hbGl6ZWQgYW5kIHR1cm5lZCBpbnRvXG4gICAqIGFuIGFic29sdXRlIHVybC4gQWZ0ZXJ3YXJkcywgdGhlIHVybCBpcyBtYXRjaGVkIGFnYWluc3QgdGhlIGBpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3RgXG4gICAqIHJlZ3VsYXIgZXhwcmVzc2lvbi4gSWYgYSBtYXRjaCBpcyBmb3VuZCwgdGhlIG9yaWdpbmFsIHVybCBpcyB3cml0dGVuIGludG8gdGhlIGRvbS4gT3RoZXJ3aXNlLFxuICAgKiB0aGUgYWJzb2x1dGUgdXJsIGlzIHByZWZpeGVkIHdpdGggYCd1bnNhZmU6J2Agc3RyaW5nIGFuZCBvbmx5IHRoZW4gaXMgaXQgd3JpdHRlbiBpbnRvIHRoZSBET00uXG4gICAqXG4gICAqIEBwYXJhbSB7UmVnRXhwPX0gcmVnZXhwIE5ldyByZWdleHAgdG8gd2hpdGVsaXN0IHVybHMgd2l0aC5cbiAgICogQHJldHVybnMge1JlZ0V4cHxuZy4kY29tcGlsZVByb3ZpZGVyfSBDdXJyZW50IFJlZ0V4cCBpZiBjYWxsZWQgd2l0aG91dCB2YWx1ZSBvciBzZWxmIGZvclxuICAgKiAgICBjaGFpbmluZyBvdGhlcndpc2UuXG4gICAqL1xuICB0aGlzLmltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCA9IGZ1bmN0aW9uKHJlZ2V4cCkge1xuICAgIGlmIChpc0RlZmluZWQocmVnZXhwKSkge1xuICAgICAgJCRzYW5pdGl6ZVVyaVByb3ZpZGVyLmltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdChyZWdleHApO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAkJHNhbml0aXplVXJpUHJvdmlkZXIuaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0KCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICAkY29tcGlsZVByb3ZpZGVyI2RlYnVnSW5mb0VuYWJsZWRcbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFuPX0gZW5hYmxlZCB1cGRhdGUgdGhlIGRlYnVnSW5mb0VuYWJsZWQgc3RhdGUgaWYgcHJvdmlkZWQsIG90aGVyd2lzZSBqdXN0IHJldHVybiB0aGVcbiAgICogY3VycmVudCBkZWJ1Z0luZm9FbmFibGVkIHN0YXRlXG4gICAqIEByZXR1cm5zIHsqfSBjdXJyZW50IHZhbHVlIGlmIHVzZWQgYXMgZ2V0dGVyIG9yIGl0c2VsZiAoY2hhaW5pbmcpIGlmIHVzZWQgYXMgc2V0dGVyXG4gICAqXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDYWxsIHRoaXMgbWV0aG9kIHRvIGVuYWJsZS9kaXNhYmxlIHZhcmlvdXMgZGVidWcgcnVudGltZSBpbmZvcm1hdGlvbiBpbiB0aGUgY29tcGlsZXIgc3VjaCBhcyBhZGRpbmdcbiAgICogYmluZGluZyBpbmZvcm1hdGlvbiBhbmQgYSByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgc2NvcGUgb24gdG8gRE9NIGVsZW1lbnRzLlxuICAgKiBJZiBlbmFibGVkLCB0aGUgY29tcGlsZXIgd2lsbCBhZGQgdGhlIGZvbGxvd2luZyB0byBET00gZWxlbWVudHMgdGhhdCBoYXZlIGJlZW4gYm91bmQgdG8gdGhlIHNjb3BlXG4gICAqICogYG5nLWJpbmRpbmdgIENTUyBjbGFzc1xuICAgKiAqIGAkYmluZGluZ2AgZGF0YSBwcm9wZXJ0eSBjb250YWluaW5nIGFuIGFycmF5IG9mIHRoZSBiaW5kaW5nIGV4cHJlc3Npb25zXG4gICAqXG4gICAqIFlvdSBtYXkgd2FudCB0byBkaXNhYmxlIHRoaXMgaW4gcHJvZHVjdGlvbiBmb3IgYSBzaWduaWZpY2FudCBwZXJmb3JtYW5jZSBib29zdC4gU2VlXG4gICAqIHtAbGluayBndWlkZS9wcm9kdWN0aW9uI2Rpc2FibGluZy1kZWJ1Zy1kYXRhIERpc2FibGluZyBEZWJ1ZyBEYXRhfSBmb3IgbW9yZS5cbiAgICpcbiAgICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZS5cbiAgICovXG4gIHZhciBkZWJ1Z0luZm9FbmFibGVkID0gdHJ1ZTtcbiAgdGhpcy5kZWJ1Z0luZm9FbmFibGVkID0gZnVuY3Rpb24oZW5hYmxlZCkge1xuICAgIGlmIChpc0RlZmluZWQoZW5hYmxlZCkpIHtcbiAgICAgIGRlYnVnSW5mb0VuYWJsZWQgPSBlbmFibGVkO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBkZWJ1Z0luZm9FbmFibGVkO1xuICB9O1xuXG4gIHRoaXMuJGdldCA9IFtcbiAgICAgICAgICAgICckaW5qZWN0b3InLCAnJGludGVycG9sYXRlJywgJyRleGNlcHRpb25IYW5kbGVyJywgJyR0ZW1wbGF0ZVJlcXVlc3QnLCAnJHBhcnNlJyxcbiAgICAgICAgICAgICckY29udHJvbGxlcicsICckcm9vdFNjb3BlJywgJyRkb2N1bWVudCcsICckc2NlJywgJyRhbmltYXRlJywgJyQkc2FuaXRpemVVcmknLFxuICAgIGZ1bmN0aW9uKCRpbmplY3RvciwgICAkaW50ZXJwb2xhdGUsICAgJGV4Y2VwdGlvbkhhbmRsZXIsICAgJHRlbXBsYXRlUmVxdWVzdCwgICAkcGFyc2UsXG4gICAgICAgICAgICAgJGNvbnRyb2xsZXIsICAgJHJvb3RTY29wZSwgICAkZG9jdW1lbnQsICAgJHNjZSwgICAkYW5pbWF0ZSwgICAkJHNhbml0aXplVXJpKSB7XG5cbiAgICB2YXIgQXR0cmlidXRlcyA9IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHJpYnV0ZXNUb0NvcHkpIHtcbiAgICAgIGlmIChhdHRyaWJ1dGVzVG9Db3B5KSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYXR0cmlidXRlc1RvQ29weSk7XG4gICAgICAgIHZhciBpLCBsLCBrZXk7XG5cbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICB0aGlzW2tleV0gPSBhdHRyaWJ1dGVzVG9Db3B5W2tleV07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJGF0dHIgPSB7fTtcbiAgICAgIH1cblxuICAgICAgdGhpcy4kJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIH07XG5cbiAgICBBdHRyaWJ1dGVzLnByb3RvdHlwZSA9IHtcbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJG5vcm1hbGl6ZVxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIENvbnZlcnRzIGFuIGF0dHJpYnV0ZSBuYW1lIChlLmcuIGRhc2gvY29sb24vdW5kZXJzY29yZS1kZWxpbWl0ZWQgc3RyaW5nLCBvcHRpb25hbGx5IHByZWZpeGVkIHdpdGggYHgtYCBvclxuICAgICAgICogYGRhdGEtYCkgdG8gaXRzIG5vcm1hbGl6ZWQsIGNhbWVsQ2FzZSBmb3JtLlxuICAgICAgICpcbiAgICAgICAqIEFsc28gdGhlcmUgaXMgc3BlY2lhbCBjYXNlIGZvciBNb3ogcHJlZml4IHN0YXJ0aW5nIHdpdGggdXBwZXIgY2FzZSBsZXR0ZXIuXG4gICAgICAgKlxuICAgICAgICogRm9yIGZ1cnRoZXIgaW5mb3JtYXRpb24gY2hlY2sgb3V0IHRoZSBndWlkZSBvbiB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlI21hdGNoaW5nLWRpcmVjdGl2ZXMgTWF0Y2hpbmcgRGlyZWN0aXZlc31cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIHRvIG5vcm1hbGl6ZVxuICAgICAgICovXG4gICAgICAkbm9ybWFsaXplOiBkaXJlY3RpdmVOb3JtYWxpemUsXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkYWRkQ2xhc3NcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBBZGRzIHRoZSBDU1MgY2xhc3MgdmFsdWUgc3BlY2lmaWVkIGJ5IHRoZSBjbGFzc1ZhbCBwYXJhbWV0ZXIgdG8gdGhlIGVsZW1lbnQuIElmIGFuaW1hdGlvbnNcbiAgICAgICAqIGFyZSBlbmFibGVkIHRoZW4gYW4gYW5pbWF0aW9uIHdpbGwgYmUgdHJpZ2dlcmVkIGZvciB0aGUgY2xhc3MgYWRkaXRpb24uXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzVmFsIFRoZSBjbGFzc05hbWUgdmFsdWUgdGhhdCB3aWxsIGJlIGFkZGVkIHRvIHRoZSBlbGVtZW50XG4gICAgICAgKi9cbiAgICAgICRhZGRDbGFzczogZnVuY3Rpb24oY2xhc3NWYWwpIHtcbiAgICAgICAgaWYgKGNsYXNzVmFsICYmIGNsYXNzVmFsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAkYW5pbWF0ZS5hZGRDbGFzcyh0aGlzLiQkZWxlbWVudCwgY2xhc3NWYWwpO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyRyZW1vdmVDbGFzc1xuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFJlbW92ZXMgdGhlIENTUyBjbGFzcyB2YWx1ZSBzcGVjaWZpZWQgYnkgdGhlIGNsYXNzVmFsIHBhcmFtZXRlciBmcm9tIHRoZSBlbGVtZW50LiBJZlxuICAgICAgICogYW5pbWF0aW9ucyBhcmUgZW5hYmxlZCB0aGVuIGFuIGFuaW1hdGlvbiB3aWxsIGJlIHRyaWdnZXJlZCBmb3IgdGhlIGNsYXNzIHJlbW92YWwuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzVmFsIFRoZSBjbGFzc05hbWUgdmFsdWUgdGhhdCB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudFxuICAgICAgICovXG4gICAgICAkcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKGNsYXNzVmFsKSB7XG4gICAgICAgIGlmIChjbGFzc1ZhbCAmJiBjbGFzc1ZhbC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgJGFuaW1hdGUucmVtb3ZlQ2xhc3ModGhpcy4kJGVsZW1lbnQsIGNsYXNzVmFsKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkdXBkYXRlQ2xhc3NcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBBZGRzIGFuZCByZW1vdmVzIHRoZSBhcHByb3ByaWF0ZSBDU1MgY2xhc3MgdmFsdWVzIHRvIHRoZSBlbGVtZW50IGJhc2VkIG9uIHRoZSBkaWZmZXJlbmNlXG4gICAgICAgKiBiZXR3ZWVuIHRoZSBuZXcgYW5kIG9sZCBDU1MgY2xhc3MgdmFsdWVzIChzcGVjaWZpZWQgYXMgbmV3Q2xhc3NlcyBhbmQgb2xkQ2xhc3NlcykuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5ld0NsYXNzZXMgVGhlIGN1cnJlbnQgQ1NTIGNsYXNzTmFtZSB2YWx1ZVxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG9sZENsYXNzZXMgVGhlIGZvcm1lciBDU1MgY2xhc3NOYW1lIHZhbHVlXG4gICAgICAgKi9cbiAgICAgICR1cGRhdGVDbGFzczogZnVuY3Rpb24obmV3Q2xhc3Nlcywgb2xkQ2xhc3Nlcykge1xuICAgICAgICB2YXIgdG9BZGQgPSB0b2tlbkRpZmZlcmVuY2UobmV3Q2xhc3Nlcywgb2xkQ2xhc3Nlcyk7XG4gICAgICAgIGlmICh0b0FkZCAmJiB0b0FkZC5sZW5ndGgpIHtcbiAgICAgICAgICAkYW5pbWF0ZS5hZGRDbGFzcyh0aGlzLiQkZWxlbWVudCwgdG9BZGQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRvUmVtb3ZlID0gdG9rZW5EaWZmZXJlbmNlKG9sZENsYXNzZXMsIG5ld0NsYXNzZXMpO1xuICAgICAgICBpZiAodG9SZW1vdmUgJiYgdG9SZW1vdmUubGVuZ3RoKSB7XG4gICAgICAgICAgJGFuaW1hdGUucmVtb3ZlQ2xhc3ModGhpcy4kJGVsZW1lbnQsIHRvUmVtb3ZlKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBTZXQgYSBub3JtYWxpemVkIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudCBpbiBhIHdheSBzdWNoIHRoYXQgYWxsIGRpcmVjdGl2ZXNcbiAgICAgICAqIGNhbiBzaGFyZSB0aGUgYXR0cmlidXRlLiBUaGlzIGZ1bmN0aW9uIHByb3Blcmx5IGhhbmRsZXMgYm9vbGVhbiBhdHRyaWJ1dGVzLlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBOb3JtYWxpemVkIGtleS4gKGllIG5nQXR0cmlidXRlKVxuICAgICAgICogQHBhcmFtIHtzdHJpbmd8Ym9vbGVhbn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC4gSWYgYG51bGxgIGF0dHJpYnV0ZSB3aWxsIGJlIGRlbGV0ZWQuXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSB3cml0ZUF0dHIgSWYgZmFsc2UsIGRvZXMgbm90IHdyaXRlIHRoZSB2YWx1ZSB0byBET00gZWxlbWVudCBhdHRyaWJ1dGUuXG4gICAgICAgKiAgICAgRGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gYXR0ck5hbWUgT3B0aW9uYWwgbm9uZSBub3JtYWxpemVkIG5hbWUuIERlZmF1bHRzIHRvIGtleS5cbiAgICAgICAqL1xuICAgICAgJHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSwgd3JpdGVBdHRyLCBhdHRyTmFtZSkge1xuICAgICAgICAvLyBUT0RPOiBkZWNpZGUgd2hldGhlciBvciBub3QgdG8gdGhyb3cgYW4gZXJyb3IgaWYgXCJjbGFzc1wiXG4gICAgICAgIC8vaXMgc2V0IHRocm91Z2ggdGhpcyBmdW5jdGlvbiBzaW5jZSBpdCBtYXkgY2F1c2UgJHVwZGF0ZUNsYXNzIHRvXG4gICAgICAgIC8vYmVjb21lIHVuc3RhYmxlLlxuXG4gICAgICAgIHZhciBub2RlID0gdGhpcy4kJGVsZW1lbnRbMF0sXG4gICAgICAgICAgICBib29sZWFuS2V5ID0gZ2V0Qm9vbGVhbkF0dHJOYW1lKG5vZGUsIGtleSksXG4gICAgICAgICAgICBhbGlhc2VkS2V5ID0gZ2V0QWxpYXNlZEF0dHJOYW1lKG5vZGUsIGtleSksXG4gICAgICAgICAgICBvYnNlcnZlciA9IGtleSxcbiAgICAgICAgICAgIG5vZGVOYW1lO1xuXG4gICAgICAgIGlmIChib29sZWFuS2V5KSB7XG4gICAgICAgICAgdGhpcy4kJGVsZW1lbnQucHJvcChrZXksIHZhbHVlKTtcbiAgICAgICAgICBhdHRyTmFtZSA9IGJvb2xlYW5LZXk7XG4gICAgICAgIH0gZWxzZSBpZiAoYWxpYXNlZEtleSkge1xuICAgICAgICAgIHRoaXNbYWxpYXNlZEtleV0gPSB2YWx1ZTtcbiAgICAgICAgICBvYnNlcnZlciA9IGFsaWFzZWRLZXk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzW2tleV0gPSB2YWx1ZTtcblxuICAgICAgICAvLyB0cmFuc2xhdGUgbm9ybWFsaXplZCBrZXkgdG8gYWN0dWFsIGtleVxuICAgICAgICBpZiAoYXR0ck5hbWUpIHtcbiAgICAgICAgICB0aGlzLiRhdHRyW2tleV0gPSBhdHRyTmFtZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhdHRyTmFtZSA9IHRoaXMuJGF0dHJba2V5XTtcbiAgICAgICAgICBpZiAoIWF0dHJOYW1lKSB7XG4gICAgICAgICAgICB0aGlzLiRhdHRyW2tleV0gPSBhdHRyTmFtZSA9IHNuYWtlX2Nhc2Uoa2V5LCAnLScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG5vZGVOYW1lID0gbm9kZU5hbWVfKHRoaXMuJCRlbGVtZW50KTtcblxuICAgICAgICBpZiAoKG5vZGVOYW1lID09PSAnYScgJiYga2V5ID09PSAnaHJlZicpIHx8XG4gICAgICAgICAgICAobm9kZU5hbWUgPT09ICdpbWcnICYmIGtleSA9PT0gJ3NyYycpKSB7XG4gICAgICAgICAgLy8gc2FuaXRpemUgYVtocmVmXSBhbmQgaW1nW3NyY10gdmFsdWVzXG4gICAgICAgICAgdGhpc1trZXldID0gdmFsdWUgPSAkJHNhbml0aXplVXJpKHZhbHVlLCBrZXkgPT09ICdzcmMnKTtcbiAgICAgICAgfSBlbHNlIGlmIChub2RlTmFtZSA9PT0gJ2ltZycgJiYga2V5ID09PSAnc3Jjc2V0Jykge1xuICAgICAgICAgIC8vIHNhbml0aXplIGltZ1tzcmNzZXRdIHZhbHVlc1xuICAgICAgICAgIHZhciByZXN1bHQgPSBcIlwiO1xuXG4gICAgICAgICAgLy8gZmlyc3QgY2hlY2sgaWYgdGhlcmUgYXJlIHNwYWNlcyBiZWNhdXNlIGl0J3Mgbm90IHRoZSBzYW1lIHBhdHRlcm5cbiAgICAgICAgICB2YXIgdHJpbW1lZFNyY3NldCA9IHRyaW0odmFsdWUpO1xuICAgICAgICAgIC8vICAgICAgICAgICAgICAgICggICA5OTl4ICAgLHwgICA5OTl3ICAgLHwgICAsfCwgICApXG4gICAgICAgICAgdmFyIHNyY1BhdHRlcm4gPSAvKFxccytcXGQreFxccyosfFxccytcXGQrd1xccyosfFxccyssfCxcXHMrKS87XG4gICAgICAgICAgdmFyIHBhdHRlcm4gPSAvXFxzLy50ZXN0KHRyaW1tZWRTcmNzZXQpID8gc3JjUGF0dGVybiA6IC8oLCkvO1xuXG4gICAgICAgICAgLy8gc3BsaXQgc3Jjc2V0IGludG8gdHVwbGUgb2YgdXJpIGFuZCBkZXNjcmlwdG9yIGV4Y2VwdCBmb3IgdGhlIGxhc3QgaXRlbVxuICAgICAgICAgIHZhciByYXdVcmlzID0gdHJpbW1lZFNyY3NldC5zcGxpdChwYXR0ZXJuKTtcblxuICAgICAgICAgIC8vIGZvciBlYWNoIHR1cGxlc1xuICAgICAgICAgIHZhciBuYnJVcmlzV2l0aDJwYXJ0cyA9IE1hdGguZmxvb3IocmF3VXJpcy5sZW5ndGggLyAyKTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5iclVyaXNXaXRoMnBhcnRzOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBpbm5lcklkeCA9IGkgKiAyO1xuICAgICAgICAgICAgLy8gc2FuaXRpemUgdGhlIHVyaVxuICAgICAgICAgICAgcmVzdWx0ICs9ICQkc2FuaXRpemVVcmkodHJpbShyYXdVcmlzW2lubmVySWR4XSksIHRydWUpO1xuICAgICAgICAgICAgLy8gYWRkIHRoZSBkZXNjcmlwdG9yXG4gICAgICAgICAgICByZXN1bHQgKz0gKFwiIFwiICsgdHJpbShyYXdVcmlzW2lubmVySWR4ICsgMV0pKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBzcGxpdCB0aGUgbGFzdCBpdGVtIGludG8gdXJpIGFuZCBkZXNjcmlwdG9yXG4gICAgICAgICAgdmFyIGxhc3RUdXBsZSA9IHRyaW0ocmF3VXJpc1tpICogMl0pLnNwbGl0KC9cXHMvKTtcblxuICAgICAgICAgIC8vIHNhbml0aXplIHRoZSBsYXN0IHVyaVxuICAgICAgICAgIHJlc3VsdCArPSAkJHNhbml0aXplVXJpKHRyaW0obGFzdFR1cGxlWzBdKSwgdHJ1ZSk7XG5cbiAgICAgICAgICAvLyBhbmQgYWRkIHRoZSBsYXN0IGRlc2NyaXB0b3IgaWYgYW55XG4gICAgICAgICAgaWYgKGxhc3RUdXBsZS5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSAoXCIgXCIgKyB0cmltKGxhc3RUdXBsZVsxXSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzW2tleV0gPSB2YWx1ZSA9IHJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3cml0ZUF0dHIgIT09IGZhbHNlKSB7XG4gICAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuJCRlbGVtZW50LnJlbW92ZUF0dHIoYXR0ck5hbWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLiQkZWxlbWVudC5hdHRyKGF0dHJOYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZmlyZSBvYnNlcnZlcnNcbiAgICAgICAgdmFyICQkb2JzZXJ2ZXJzID0gdGhpcy4kJG9ic2VydmVycztcbiAgICAgICAgJCRvYnNlcnZlcnMgJiYgZm9yRWFjaCgkJG9ic2VydmVyc1tvYnNlcnZlcl0sIGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZuKHZhbHVlKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyRvYnNlcnZlXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogT2JzZXJ2ZXMgYW4gaW50ZXJwb2xhdGVkIGF0dHJpYnV0ZS5cbiAgICAgICAqXG4gICAgICAgKiBUaGUgb2JzZXJ2ZXIgZnVuY3Rpb24gd2lsbCBiZSBpbnZva2VkIG9uY2UgZHVyaW5nIHRoZSBuZXh0IGAkZGlnZXN0YCBmb2xsb3dpbmdcbiAgICAgICAqIGNvbXBpbGF0aW9uLiBUaGUgb2JzZXJ2ZXIgaXMgdGhlbiBpbnZva2VkIHdoZW5ldmVyIHRoZSBpbnRlcnBvbGF0ZWQgdmFsdWVcbiAgICAgICAqIGNoYW5nZXMuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBOb3JtYWxpemVkIGtleS4gKGllIG5nQXR0cmlidXRlKSAuXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKGludGVycG9sYXRlZFZhbHVlKX0gZm4gRnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuZXZlclxuICAgICAgICAgICAgICAgIHRoZSBpbnRlcnBvbGF0ZWQgdmFsdWUgb2YgdGhlIGF0dHJpYnV0ZSBjaGFuZ2VzLlxuICAgICAgICogICAgICAgIFNlZSB0aGUge0BsaW5rIGd1aWRlL2RpcmVjdGl2ZSN0ZXh0LWFuZC1hdHRyaWJ1dGUtYmluZGluZ3MgRGlyZWN0aXZlc30gZ3VpZGUgZm9yIG1vcmUgaW5mby5cbiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBSZXR1cm5zIGEgZGVyZWdpc3RyYXRpb24gZnVuY3Rpb24gZm9yIHRoaXMgb2JzZXJ2ZXIuXG4gICAgICAgKi9cbiAgICAgICRvYnNlcnZlOiBmdW5jdGlvbihrZXksIGZuKSB7XG4gICAgICAgIHZhciBhdHRycyA9IHRoaXMsXG4gICAgICAgICAgICAkJG9ic2VydmVycyA9IChhdHRycy4kJG9ic2VydmVycyB8fCAoYXR0cnMuJCRvYnNlcnZlcnMgPSBjcmVhdGVNYXAoKSkpLFxuICAgICAgICAgICAgbGlzdGVuZXJzID0gKCQkb2JzZXJ2ZXJzW2tleV0gfHwgKCQkb2JzZXJ2ZXJzW2tleV0gPSBbXSkpO1xuXG4gICAgICAgIGxpc3RlbmVycy5wdXNoKGZuKTtcbiAgICAgICAgJHJvb3RTY29wZS4kZXZhbEFzeW5jKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmICghbGlzdGVuZXJzLiQkaW50ZXIgJiYgYXR0cnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgLy8gbm8gb25lIHJlZ2lzdGVyZWQgYXR0cmlidXRlIGludGVycG9sYXRpb24gZnVuY3Rpb24sIHNvIGxldHMgY2FsbCBpdCBtYW51YWxseVxuICAgICAgICAgICAgZm4oYXR0cnNba2V5XSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgYXJyYXlSZW1vdmUobGlzdGVuZXJzLCBmbik7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcblxuXG4gICAgZnVuY3Rpb24gc2FmZUFkZENsYXNzKCRlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgICRlbGVtZW50LmFkZENsYXNzKGNsYXNzTmFtZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlnbm9yZSwgc2luY2UgaXQgbWVhbnMgdGhhdCB3ZSBhcmUgdHJ5aW5nIHRvIHNldCBjbGFzcyBvblxuICAgICAgICAvLyBTVkcgZWxlbWVudCwgd2hlcmUgY2xhc3MgbmFtZSBpcyByZWFkLW9ubHkuXG4gICAgICB9XG4gICAgfVxuXG5cbiAgICB2YXIgc3RhcnRTeW1ib2wgPSAkaW50ZXJwb2xhdGUuc3RhcnRTeW1ib2woKSxcbiAgICAgICAgZW5kU3ltYm9sID0gJGludGVycG9sYXRlLmVuZFN5bWJvbCgpLFxuICAgICAgICBkZW5vcm1hbGl6ZVRlbXBsYXRlID0gKHN0YXJ0U3ltYm9sID09ICd7eycgfHwgZW5kU3ltYm9sICA9PSAnfX0nKVxuICAgICAgICAgICAgPyBpZGVudGl0eVxuICAgICAgICAgICAgOiBmdW5jdGlvbiBkZW5vcm1hbGl6ZVRlbXBsYXRlKHRlbXBsYXRlKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0ZW1wbGF0ZS5yZXBsYWNlKC9cXHtcXHsvZywgc3RhcnRTeW1ib2wpLnJlcGxhY2UoL319L2csIGVuZFN5bWJvbCk7XG4gICAgICAgIH0sXG4gICAgICAgIE5HX0FUVFJfQklORElORyA9IC9ebmdBdHRyW0EtWl0vO1xuXG4gICAgY29tcGlsZS4kJGFkZEJpbmRpbmdJbmZvID0gZGVidWdJbmZvRW5hYmxlZCA/IGZ1bmN0aW9uICQkYWRkQmluZGluZ0luZm8oJGVsZW1lbnQsIGJpbmRpbmcpIHtcbiAgICAgIHZhciBiaW5kaW5ncyA9ICRlbGVtZW50LmRhdGEoJyRiaW5kaW5nJykgfHwgW107XG5cbiAgICAgIGlmIChpc0FycmF5KGJpbmRpbmcpKSB7XG4gICAgICAgIGJpbmRpbmdzID0gYmluZGluZ3MuY29uY2F0KGJpbmRpbmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmluZGluZ3MucHVzaChiaW5kaW5nKTtcbiAgICAgIH1cblxuICAgICAgJGVsZW1lbnQuZGF0YSgnJGJpbmRpbmcnLCBiaW5kaW5ncyk7XG4gICAgfSA6IG5vb3A7XG5cbiAgICBjb21waWxlLiQkYWRkQmluZGluZ0NsYXNzID0gZGVidWdJbmZvRW5hYmxlZCA/IGZ1bmN0aW9uICQkYWRkQmluZGluZ0NsYXNzKCRlbGVtZW50KSB7XG4gICAgICBzYWZlQWRkQ2xhc3MoJGVsZW1lbnQsICduZy1iaW5kaW5nJyk7XG4gICAgfSA6IG5vb3A7XG5cbiAgICBjb21waWxlLiQkYWRkU2NvcGVJbmZvID0gZGVidWdJbmZvRW5hYmxlZCA/IGZ1bmN0aW9uICQkYWRkU2NvcGVJbmZvKCRlbGVtZW50LCBzY29wZSwgaXNvbGF0ZWQsIG5vVGVtcGxhdGUpIHtcbiAgICAgIHZhciBkYXRhTmFtZSA9IGlzb2xhdGVkID8gKG5vVGVtcGxhdGUgPyAnJGlzb2xhdGVTY29wZU5vVGVtcGxhdGUnIDogJyRpc29sYXRlU2NvcGUnKSA6ICckc2NvcGUnO1xuICAgICAgJGVsZW1lbnQuZGF0YShkYXRhTmFtZSwgc2NvcGUpO1xuICAgIH0gOiBub29wO1xuXG4gICAgY29tcGlsZS4kJGFkZFNjb3BlQ2xhc3MgPSBkZWJ1Z0luZm9FbmFibGVkID8gZnVuY3Rpb24gJCRhZGRTY29wZUNsYXNzKCRlbGVtZW50LCBpc29sYXRlZCkge1xuICAgICAgc2FmZUFkZENsYXNzKCRlbGVtZW50LCBpc29sYXRlZCA/ICduZy1pc29sYXRlLXNjb3BlJyA6ICduZy1zY29wZScpO1xuICAgIH0gOiBub29wO1xuXG4gICAgcmV0dXJuIGNvbXBpbGU7XG5cbiAgICAvLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgICBmdW5jdGlvbiBjb21waWxlKCRjb21waWxlTm9kZXMsIHRyYW5zY2x1ZGVGbiwgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzQ29tcGlsZUNvbnRleHQpIHtcbiAgICAgIGlmICghKCRjb21waWxlTm9kZXMgaW5zdGFuY2VvZiBqcUxpdGUpKSB7XG4gICAgICAgIC8vIGpxdWVyeSBhbHdheXMgcmV3cmFwcywgd2hlcmVhcyB3ZSBuZWVkIHRvIHByZXNlcnZlIHRoZSBvcmlnaW5hbCBzZWxlY3RvciBzbyB0aGF0IHdlIGNhblxuICAgICAgICAvLyBtb2RpZnkgaXQuXG4gICAgICAgICRjb21waWxlTm9kZXMgPSBqcUxpdGUoJGNvbXBpbGVOb2Rlcyk7XG4gICAgICB9XG4gICAgICAvLyBXZSBjYW4gbm90IGNvbXBpbGUgdG9wIGxldmVsIHRleHQgZWxlbWVudHMgc2luY2UgdGV4dCBub2RlcyBjYW4gYmUgbWVyZ2VkIGFuZCB3ZSB3aWxsXG4gICAgICAvLyBub3QgYmUgYWJsZSB0byBhdHRhY2ggc2NvcGUgZGF0YSB0byB0aGVtLCBzbyB3ZSB3aWxsIHdyYXAgdGhlbSBpbiA8c3Bhbj5cbiAgICAgIGZvckVhY2goJGNvbXBpbGVOb2RlcywgZnVuY3Rpb24obm9kZSwgaW5kZXgpIHtcbiAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gTk9ERV9UWVBFX1RFWFQgJiYgbm9kZS5ub2RlVmFsdWUubWF0Y2goL1xcUysvKSAvKiBub24tZW1wdHkgKi8gKSB7XG4gICAgICAgICAgJGNvbXBpbGVOb2Rlc1tpbmRleF0gPSBqcUxpdGUobm9kZSkud3JhcCgnPHNwYW4+PC9zcGFuPicpLnBhcmVudCgpWzBdO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHZhciBjb21wb3NpdGVMaW5rRm4gPVxuICAgICAgICAgICAgICBjb21waWxlTm9kZXMoJGNvbXBpbGVOb2RlcywgdHJhbnNjbHVkZUZuLCAkY29tcGlsZU5vZGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSwgcHJldmlvdXNDb21waWxlQ29udGV4dCk7XG4gICAgICBjb21waWxlLiQkYWRkU2NvcGVDbGFzcygkY29tcGlsZU5vZGVzKTtcbiAgICAgIHZhciBuYW1lc3BhY2UgPSBudWxsO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHB1YmxpY0xpbmtGbihzY29wZSwgY2xvbmVDb25uZWN0Rm4sIG9wdGlvbnMpIHtcbiAgICAgICAgYXNzZXJ0QXJnKHNjb3BlLCAnc2NvcGUnKTtcblxuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgdmFyIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuID0gb3B0aW9ucy5wYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbixcbiAgICAgICAgICB0cmFuc2NsdWRlQ29udHJvbGxlcnMgPSBvcHRpb25zLnRyYW5zY2x1ZGVDb250cm9sbGVycyxcbiAgICAgICAgICBmdXR1cmVQYXJlbnRFbGVtZW50ID0gb3B0aW9ucy5mdXR1cmVQYXJlbnRFbGVtZW50O1xuXG4gICAgICAgIC8vIFdoZW4gYHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuYCBpcyBwYXNzZWQsIGl0IGlzIGFcbiAgICAgICAgLy8gYGNvbnRyb2xsZXJzQm91bmRUcmFuc2NsdWRlYCBmdW5jdGlvbiAoaXQgd2FzIHByZXZpb3VzbHkgcGFzc2VkXG4gICAgICAgIC8vIGFzIGB0cmFuc2NsdWRlYCB0byBkaXJlY3RpdmUubGluaykgc28gd2UgbXVzdCB1bndyYXAgaXQgdG8gZ2V0XG4gICAgICAgIC8vIGl0cyBgYm91bmRUcmFuc2NsdWRlRm5gXG4gICAgICAgIGlmIChwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbiAmJiBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbi4kJGJvdW5kVHJhbnNjbHVkZSkge1xuICAgICAgICAgIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuID0gcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4uJCRib3VuZFRyYW5zY2x1ZGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIW5hbWVzcGFjZSkge1xuICAgICAgICAgIG5hbWVzcGFjZSA9IGRldGVjdE5hbWVzcGFjZUZvckNoaWxkRWxlbWVudHMoZnV0dXJlUGFyZW50RWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyICRsaW5rTm9kZTtcbiAgICAgICAgaWYgKG5hbWVzcGFjZSAhPT0gJ2h0bWwnKSB7XG4gICAgICAgICAgLy8gV2hlbiB1c2luZyBhIGRpcmVjdGl2ZSB3aXRoIHJlcGxhY2U6dHJ1ZSBhbmQgdGVtcGxhdGVVcmwgdGhlICRjb21waWxlTm9kZXNcbiAgICAgICAgICAvLyAob3IgYSBjaGlsZCBlbGVtZW50IGluc2lkZSBvZiB0aGVtKVxuICAgICAgICAgIC8vIG1pZ2h0IGNoYW5nZSwgc28gd2UgbmVlZCB0byByZWNyZWF0ZSB0aGUgbmFtZXNwYWNlIGFkYXB0ZWQgY29tcGlsZU5vZGVzXG4gICAgICAgICAgLy8gZm9yIGNhbGwgdG8gdGhlIGxpbmsgZnVuY3Rpb24uXG4gICAgICAgICAgLy8gTm90ZTogVGhpcyB3aWxsIGFscmVhZHkgY2xvbmUgdGhlIG5vZGVzLi4uXG4gICAgICAgICAgJGxpbmtOb2RlID0ganFMaXRlKFxuICAgICAgICAgICAgd3JhcFRlbXBsYXRlKG5hbWVzcGFjZSwganFMaXRlKCc8ZGl2PicpLmFwcGVuZCgkY29tcGlsZU5vZGVzKS5odG1sKCkpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChjbG9uZUNvbm5lY3RGbikge1xuICAgICAgICAgIC8vIGltcG9ydGFudCEhOiB3ZSBtdXN0IGNhbGwgb3VyIGpxTGl0ZS5jbG9uZSgpIHNpbmNlIHRoZSBqUXVlcnkgb25lIGlzIHRyeWluZyB0byBiZSBzbWFydFxuICAgICAgICAgIC8vIGFuZCBzb21ldGltZXMgY2hhbmdlcyB0aGUgc3RydWN0dXJlIG9mIHRoZSBET00uXG4gICAgICAgICAgJGxpbmtOb2RlID0gSlFMaXRlUHJvdG90eXBlLmNsb25lLmNhbGwoJGNvbXBpbGVOb2Rlcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJGxpbmtOb2RlID0gJGNvbXBpbGVOb2RlcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0cmFuc2NsdWRlQ29udHJvbGxlcnMpIHtcbiAgICAgICAgICBmb3IgKHZhciBjb250cm9sbGVyTmFtZSBpbiB0cmFuc2NsdWRlQ29udHJvbGxlcnMpIHtcbiAgICAgICAgICAgICRsaW5rTm9kZS5kYXRhKCckJyArIGNvbnRyb2xsZXJOYW1lICsgJ0NvbnRyb2xsZXInLCB0cmFuc2NsdWRlQ29udHJvbGxlcnNbY29udHJvbGxlck5hbWVdLmluc3RhbmNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb21waWxlLiQkYWRkU2NvcGVJbmZvKCRsaW5rTm9kZSwgc2NvcGUpO1xuXG4gICAgICAgIGlmIChjbG9uZUNvbm5lY3RGbikgY2xvbmVDb25uZWN0Rm4oJGxpbmtOb2RlLCBzY29wZSk7XG4gICAgICAgIGlmIChjb21wb3NpdGVMaW5rRm4pIGNvbXBvc2l0ZUxpbmtGbihzY29wZSwgJGxpbmtOb2RlLCAkbGlua05vZGUsIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuKTtcbiAgICAgICAgcmV0dXJuICRsaW5rTm9kZTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGV0ZWN0TmFtZXNwYWNlRm9yQ2hpbGRFbGVtZW50cyhwYXJlbnRFbGVtZW50KSB7XG4gICAgICAvLyBUT0RPOiBNYWtlIHRoaXMgZGV0ZWN0IE1hdGhNTCBhcyB3ZWxsLi4uXG4gICAgICB2YXIgbm9kZSA9IHBhcmVudEVsZW1lbnQgJiYgcGFyZW50RWxlbWVudFswXTtcbiAgICAgIGlmICghbm9kZSkge1xuICAgICAgICByZXR1cm4gJ2h0bWwnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5vZGVOYW1lXyhub2RlKSAhPT0gJ2ZvcmVpZ25vYmplY3QnICYmIG5vZGUudG9TdHJpbmcoKS5tYXRjaCgvU1ZHLykgPyAnc3ZnJyA6ICdodG1sJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21waWxlIGZ1bmN0aW9uIG1hdGNoZXMgZWFjaCBub2RlIGluIG5vZGVMaXN0IGFnYWluc3QgdGhlIGRpcmVjdGl2ZXMuIE9uY2UgYWxsIGRpcmVjdGl2ZXNcbiAgICAgKiBmb3IgYSBwYXJ0aWN1bGFyIG5vZGUgYXJlIGNvbGxlY3RlZCB0aGVpciBjb21waWxlIGZ1bmN0aW9ucyBhcmUgZXhlY3V0ZWQuIFRoZSBjb21waWxlXG4gICAgICogZnVuY3Rpb25zIHJldHVybiB2YWx1ZXMgLSB0aGUgbGlua2luZyBmdW5jdGlvbnMgLSBhcmUgY29tYmluZWQgaW50byBhIGNvbXBvc2l0ZSBsaW5raW5nXG4gICAgICogZnVuY3Rpb24sIHdoaWNoIGlzIHRoZSBhIGxpbmtpbmcgZnVuY3Rpb24gZm9yIHRoZSBub2RlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtOb2RlTGlzdH0gbm9kZUxpc3QgYW4gYXJyYXkgb2Ygbm9kZXMgb3IgTm9kZUxpc3QgdG8gY29tcGlsZVxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oYW5ndWxhci5TY29wZSwgY2xvbmVBdHRhY2hGbj0pfSB0cmFuc2NsdWRlRm4gQSBsaW5raW5nIGZ1bmN0aW9uLCB3aGVyZSB0aGVcbiAgICAgKiAgICAgICAgc2NvcGUgYXJndW1lbnQgaXMgYXV0by1nZW5lcmF0ZWQgdG8gdGhlIG5ldyBjaGlsZCBvZiB0aGUgdHJhbnNjbHVkZWQgcGFyZW50IHNjb3BlLlxuICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudD19ICRyb290RWxlbWVudCBJZiB0aGUgbm9kZUxpc3QgaXMgdGhlIHJvb3Qgb2YgdGhlIGNvbXBpbGF0aW9uIHRyZWUgdGhlblxuICAgICAqICAgICAgICB0aGUgcm9vdEVsZW1lbnQgbXVzdCBiZSBzZXQgdGhlIGpxTGl0ZSBjb2xsZWN0aW9uIG9mIHRoZSBjb21waWxlIHJvb3QuIFRoaXMgaXNcbiAgICAgKiAgICAgICAgbmVlZGVkIHNvIHRoYXQgdGhlIGpxTGl0ZSBjb2xsZWN0aW9uIGl0ZW1zIGNhbiBiZSByZXBsYWNlZCB3aXRoIHdpZGdldHMuXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBtYXhQcmlvcml0eSBNYXggZGlyZWN0aXZlIHByaW9yaXR5LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBjb21wb3NpdGUgbGlua2luZyBmdW5jdGlvbiBvZiBhbGwgb2YgdGhlIG1hdGNoZWQgZGlyZWN0aXZlcyBvciBudWxsLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBpbGVOb2Rlcyhub2RlTGlzdCwgdHJhbnNjbHVkZUZuLCAkcm9vdEVsZW1lbnQsIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNDb21waWxlQ29udGV4dCkge1xuICAgICAgdmFyIGxpbmtGbnMgPSBbXSxcbiAgICAgICAgICBhdHRycywgZGlyZWN0aXZlcywgbm9kZUxpbmtGbiwgY2hpbGROb2RlcywgY2hpbGRMaW5rRm4sIGxpbmtGbkZvdW5kLCBub2RlTGlua0ZuRm91bmQ7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZUxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYXR0cnMgPSBuZXcgQXR0cmlidXRlcygpO1xuXG4gICAgICAgIC8vIHdlIG11c3QgYWx3YXlzIHJlZmVyIHRvIG5vZGVMaXN0W2ldIHNpbmNlIHRoZSBub2RlcyBjYW4gYmUgcmVwbGFjZWQgdW5kZXJuZWF0aCB1cy5cbiAgICAgICAgZGlyZWN0aXZlcyA9IGNvbGxlY3REaXJlY3RpdmVzKG5vZGVMaXN0W2ldLCBbXSwgYXR0cnMsIGkgPT09IDAgPyBtYXhQcmlvcml0eSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZ25vcmVEaXJlY3RpdmUpO1xuXG4gICAgICAgIG5vZGVMaW5rRm4gPSAoZGlyZWN0aXZlcy5sZW5ndGgpXG4gICAgICAgICAgICA/IGFwcGx5RGlyZWN0aXZlc1RvTm9kZShkaXJlY3RpdmVzLCBub2RlTGlzdFtpXSwgYXR0cnMsIHRyYW5zY2x1ZGVGbiwgJHJvb3RFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsLCBbXSwgW10sIHByZXZpb3VzQ29tcGlsZUNvbnRleHQpXG4gICAgICAgICAgICA6IG51bGw7XG5cbiAgICAgICAgaWYgKG5vZGVMaW5rRm4gJiYgbm9kZUxpbmtGbi5zY29wZSkge1xuICAgICAgICAgIGNvbXBpbGUuJCRhZGRTY29wZUNsYXNzKGF0dHJzLiQkZWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBjaGlsZExpbmtGbiA9IChub2RlTGlua0ZuICYmIG5vZGVMaW5rRm4udGVybWluYWwgfHxcbiAgICAgICAgICAgICAgICAgICAgICAhKGNoaWxkTm9kZXMgPSBub2RlTGlzdFtpXS5jaGlsZE5vZGVzKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICFjaGlsZE5vZGVzLmxlbmd0aClcbiAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgOiBjb21waWxlTm9kZXMoY2hpbGROb2RlcyxcbiAgICAgICAgICAgICAgICAgbm9kZUxpbmtGbiA/IChcbiAgICAgICAgICAgICAgICAgIChub2RlTGlua0ZuLnRyYW5zY2x1ZGVPblRoaXNFbGVtZW50IHx8ICFub2RlTGlua0ZuLnRlbXBsYXRlT25UaGlzRWxlbWVudClcbiAgICAgICAgICAgICAgICAgICAgICYmIG5vZGVMaW5rRm4udHJhbnNjbHVkZSkgOiB0cmFuc2NsdWRlRm4pO1xuXG4gICAgICAgIGlmIChub2RlTGlua0ZuIHx8IGNoaWxkTGlua0ZuKSB7XG4gICAgICAgICAgbGlua0Zucy5wdXNoKGksIG5vZGVMaW5rRm4sIGNoaWxkTGlua0ZuKTtcbiAgICAgICAgICBsaW5rRm5Gb3VuZCA9IHRydWU7XG4gICAgICAgICAgbm9kZUxpbmtGbkZvdW5kID0gbm9kZUxpbmtGbkZvdW5kIHx8IG5vZGVMaW5rRm47XG4gICAgICAgIH1cblxuICAgICAgICAvL3VzZSB0aGUgcHJldmlvdXMgY29udGV4dCBvbmx5IGZvciB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgdmlydHVhbCBncm91cFxuICAgICAgICBwcmV2aW91c0NvbXBpbGVDb250ZXh0ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgLy8gcmV0dXJuIGEgbGlua2luZyBmdW5jdGlvbiBpZiB3ZSBoYXZlIGZvdW5kIGFueXRoaW5nLCBudWxsIG90aGVyd2lzZVxuICAgICAgcmV0dXJuIGxpbmtGbkZvdW5kID8gY29tcG9zaXRlTGlua0ZuIDogbnVsbDtcblxuICAgICAgZnVuY3Rpb24gY29tcG9zaXRlTGlua0ZuKHNjb3BlLCBub2RlTGlzdCwgJHJvb3RFbGVtZW50LCBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbikge1xuICAgICAgICB2YXIgbm9kZUxpbmtGbiwgY2hpbGRMaW5rRm4sIG5vZGUsIGNoaWxkU2NvcGUsIGksIGlpLCBpZHgsIGNoaWxkQm91bmRUcmFuc2NsdWRlRm47XG4gICAgICAgIHZhciBzdGFibGVOb2RlTGlzdDtcblxuXG4gICAgICAgIGlmIChub2RlTGlua0ZuRm91bmQpIHtcbiAgICAgICAgICAvLyBjb3B5IG5vZGVMaXN0IHNvIHRoYXQgaWYgYSBub2RlTGlua0ZuIHJlbW92ZXMgb3IgYWRkcyBhbiBlbGVtZW50IGF0IHRoaXMgRE9NIGxldmVsIG91clxuICAgICAgICAgIC8vIG9mZnNldHMgZG9uJ3QgZ2V0IHNjcmV3ZWQgdXBcbiAgICAgICAgICB2YXIgbm9kZUxpc3RMZW5ndGggPSBub2RlTGlzdC5sZW5ndGg7XG4gICAgICAgICAgc3RhYmxlTm9kZUxpc3QgPSBuZXcgQXJyYXkobm9kZUxpc3RMZW5ndGgpO1xuXG4gICAgICAgICAgLy8gY3JlYXRlIGEgc3BhcnNlIGFycmF5IGJ5IG9ubHkgY29weWluZyB0aGUgZWxlbWVudHMgd2hpY2ggaGF2ZSBhIGxpbmtGblxuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsaW5rRm5zLmxlbmd0aDsgaSs9Mykge1xuICAgICAgICAgICAgaWR4ID0gbGlua0Zuc1tpXTtcbiAgICAgICAgICAgIHN0YWJsZU5vZGVMaXN0W2lkeF0gPSBub2RlTGlzdFtpZHhdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGFibGVOb2RlTGlzdCA9IG5vZGVMaXN0O1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSBsaW5rRm5zLmxlbmd0aDsgaSA8IGlpOykge1xuICAgICAgICAgIG5vZGUgPSBzdGFibGVOb2RlTGlzdFtsaW5rRm5zW2krK11dO1xuICAgICAgICAgIG5vZGVMaW5rRm4gPSBsaW5rRm5zW2krK107XG4gICAgICAgICAgY2hpbGRMaW5rRm4gPSBsaW5rRm5zW2krK107XG5cbiAgICAgICAgICBpZiAobm9kZUxpbmtGbikge1xuICAgICAgICAgICAgaWYgKG5vZGVMaW5rRm4uc2NvcGUpIHtcbiAgICAgICAgICAgICAgY2hpbGRTY29wZSA9IHNjb3BlLiRuZXcoKTtcbiAgICAgICAgICAgICAgY29tcGlsZS4kJGFkZFNjb3BlSW5mbyhqcUxpdGUobm9kZSksIGNoaWxkU2NvcGUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY2hpbGRTY29wZSA9IHNjb3BlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobm9kZUxpbmtGbi50cmFuc2NsdWRlT25UaGlzRWxlbWVudCkge1xuICAgICAgICAgICAgICBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuID0gY3JlYXRlQm91bmRUcmFuc2NsdWRlRm4oXG4gICAgICAgICAgICAgICAgICBzY29wZSwgbm9kZUxpbmtGbi50cmFuc2NsdWRlLCBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbixcbiAgICAgICAgICAgICAgICAgIG5vZGVMaW5rRm4uZWxlbWVudFRyYW5zY2x1ZGVPblRoaXNFbGVtZW50KTtcblxuICAgICAgICAgICAgfSBlbHNlIGlmICghbm9kZUxpbmtGbi50ZW1wbGF0ZU9uVGhpc0VsZW1lbnQgJiYgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4pIHtcbiAgICAgICAgICAgICAgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbiA9IHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbiAmJiB0cmFuc2NsdWRlRm4pIHtcbiAgICAgICAgICAgICAgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbiA9IGNyZWF0ZUJvdW5kVHJhbnNjbHVkZUZuKHNjb3BlLCB0cmFuc2NsdWRlRm4pO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuID0gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbm9kZUxpbmtGbihjaGlsZExpbmtGbiwgY2hpbGRTY29wZSwgbm9kZSwgJHJvb3RFbGVtZW50LCBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuKTtcblxuICAgICAgICAgIH0gZWxzZSBpZiAoY2hpbGRMaW5rRm4pIHtcbiAgICAgICAgICAgIGNoaWxkTGlua0ZuKHNjb3BlLCBub2RlLmNoaWxkTm9kZXMsIHVuZGVmaW5lZCwgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUJvdW5kVHJhbnNjbHVkZUZuKHNjb3BlLCB0cmFuc2NsdWRlRm4sIHByZXZpb3VzQm91bmRUcmFuc2NsdWRlRm4sIGVsZW1lbnRUcmFuc2NsdXNpb24pIHtcblxuICAgICAgdmFyIGJvdW5kVHJhbnNjbHVkZUZuID0gZnVuY3Rpb24odHJhbnNjbHVkZWRTY29wZSwgY2xvbmVGbiwgY29udHJvbGxlcnMsIGZ1dHVyZVBhcmVudEVsZW1lbnQsIGNvbnRhaW5pbmdTY29wZSkge1xuXG4gICAgICAgIGlmICghdHJhbnNjbHVkZWRTY29wZSkge1xuICAgICAgICAgIHRyYW5zY2x1ZGVkU2NvcGUgPSBzY29wZS4kbmV3KGZhbHNlLCBjb250YWluaW5nU2NvcGUpO1xuICAgICAgICAgIHRyYW5zY2x1ZGVkU2NvcGUuJCR0cmFuc2NsdWRlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJhbnNjbHVkZUZuKHRyYW5zY2x1ZGVkU2NvcGUsIGNsb25lRm4sIHtcbiAgICAgICAgICBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbjogcHJldmlvdXNCb3VuZFRyYW5zY2x1ZGVGbixcbiAgICAgICAgICB0cmFuc2NsdWRlQ29udHJvbGxlcnM6IGNvbnRyb2xsZXJzLFxuICAgICAgICAgIGZ1dHVyZVBhcmVudEVsZW1lbnQ6IGZ1dHVyZVBhcmVudEVsZW1lbnRcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gYm91bmRUcmFuc2NsdWRlRm47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG9va3MgZm9yIGRpcmVjdGl2ZXMgb24gdGhlIGdpdmVuIG5vZGUgYW5kIGFkZHMgdGhlbSB0byB0aGUgZGlyZWN0aXZlIGNvbGxlY3Rpb24gd2hpY2ggaXNcbiAgICAgKiBzb3J0ZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbm9kZSBOb2RlIHRvIHNlYXJjaC5cbiAgICAgKiBAcGFyYW0gZGlyZWN0aXZlcyBBbiBhcnJheSB0byB3aGljaCB0aGUgZGlyZWN0aXZlcyBhcmUgYWRkZWQgdG8uIFRoaXMgYXJyYXkgaXMgc29ydGVkIGJlZm9yZVxuICAgICAqICAgICAgICB0aGUgZnVuY3Rpb24gcmV0dXJucy5cbiAgICAgKiBAcGFyYW0gYXR0cnMgVGhlIHNoYXJlZCBhdHRycyBvYmplY3Qgd2hpY2ggaXMgdXNlZCB0byBwb3B1bGF0ZSB0aGUgbm9ybWFsaXplZCBhdHRyaWJ1dGVzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gbWF4UHJpb3JpdHkgTWF4IGRpcmVjdGl2ZSBwcmlvcml0eS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb2xsZWN0RGlyZWN0aXZlcyhub2RlLCBkaXJlY3RpdmVzLCBhdHRycywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSkge1xuICAgICAgdmFyIG5vZGVUeXBlID0gbm9kZS5ub2RlVHlwZSxcbiAgICAgICAgICBhdHRyc01hcCA9IGF0dHJzLiRhdHRyLFxuICAgICAgICAgIG1hdGNoLFxuICAgICAgICAgIGNsYXNzTmFtZTtcblxuICAgICAgc3dpdGNoIChub2RlVHlwZSkge1xuICAgICAgICBjYXNlIE5PREVfVFlQRV9FTEVNRU5UOiAvKiBFbGVtZW50ICovXG4gICAgICAgICAgLy8gdXNlIHRoZSBub2RlIG5hbWU6IDxkaXJlY3RpdmU+XG4gICAgICAgICAgYWRkRGlyZWN0aXZlKGRpcmVjdGl2ZXMsXG4gICAgICAgICAgICAgIGRpcmVjdGl2ZU5vcm1hbGl6ZShub2RlTmFtZV8obm9kZSkpLCAnRScsIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUpO1xuXG4gICAgICAgICAgLy8gaXRlcmF0ZSBvdmVyIHRoZSBhdHRyaWJ1dGVzXG4gICAgICAgICAgZm9yICh2YXIgYXR0ciwgbmFtZSwgbk5hbWUsIG5nQXR0ck5hbWUsIHZhbHVlLCBpc05nQXR0ciwgbkF0dHJzID0gbm9kZS5hdHRyaWJ1dGVzLFxuICAgICAgICAgICAgICAgICAgIGogPSAwLCBqaiA9IG5BdHRycyAmJiBuQXR0cnMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuICAgICAgICAgICAgdmFyIGF0dHJTdGFydE5hbWUgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBhdHRyRW5kTmFtZSA9IGZhbHNlO1xuXG4gICAgICAgICAgICBhdHRyID0gbkF0dHJzW2pdO1xuICAgICAgICAgICAgbmFtZSA9IGF0dHIubmFtZTtcbiAgICAgICAgICAgIHZhbHVlID0gdHJpbShhdHRyLnZhbHVlKTtcblxuICAgICAgICAgICAgLy8gc3VwcG9ydCBuZ0F0dHIgYXR0cmlidXRlIGJpbmRpbmdcbiAgICAgICAgICAgIG5nQXR0ck5hbWUgPSBkaXJlY3RpdmVOb3JtYWxpemUobmFtZSk7XG4gICAgICAgICAgICBpZiAoaXNOZ0F0dHIgPSBOR19BVFRSX0JJTkRJTkcudGVzdChuZ0F0dHJOYW1lKSkge1xuICAgICAgICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKFBSRUZJWF9SRUdFWFAsICcnKVxuICAgICAgICAgICAgICAgIC5zdWJzdHIoOCkucmVwbGFjZSgvXyguKS9nLCBmdW5jdGlvbihtYXRjaCwgbGV0dGVyKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBkaXJlY3RpdmVOTmFtZSA9IG5nQXR0ck5hbWUucmVwbGFjZSgvKFN0YXJ0fEVuZCkkLywgJycpO1xuICAgICAgICAgICAgaWYgKGRpcmVjdGl2ZUlzTXVsdGlFbGVtZW50KGRpcmVjdGl2ZU5OYW1lKSkge1xuICAgICAgICAgICAgICBpZiAobmdBdHRyTmFtZSA9PT0gZGlyZWN0aXZlTk5hbWUgKyAnU3RhcnQnKSB7XG4gICAgICAgICAgICAgICAgYXR0clN0YXJ0TmFtZSA9IG5hbWU7XG4gICAgICAgICAgICAgICAgYXR0ckVuZE5hbWUgPSBuYW1lLnN1YnN0cigwLCBuYW1lLmxlbmd0aCAtIDUpICsgJ2VuZCc7XG4gICAgICAgICAgICAgICAgbmFtZSA9IG5hbWUuc3Vic3RyKDAsIG5hbWUubGVuZ3RoIC0gNik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbk5hbWUgPSBkaXJlY3RpdmVOb3JtYWxpemUobmFtZS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgICAgIGF0dHJzTWFwW25OYW1lXSA9IG5hbWU7XG4gICAgICAgICAgICBpZiAoaXNOZ0F0dHIgfHwgIWF0dHJzLmhhc093blByb3BlcnR5KG5OYW1lKSkge1xuICAgICAgICAgICAgICAgIGF0dHJzW25OYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGlmIChnZXRCb29sZWFuQXR0ck5hbWUobm9kZSwgbk5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICBhdHRyc1tuTmFtZV0gPSB0cnVlOyAvLyBwcmVzZW5jZSBtZWFucyB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWRkQXR0ckludGVycG9sYXRlRGlyZWN0aXZlKG5vZGUsIGRpcmVjdGl2ZXMsIHZhbHVlLCBuTmFtZSwgaXNOZ0F0dHIpO1xuICAgICAgICAgICAgYWRkRGlyZWN0aXZlKGRpcmVjdGl2ZXMsIG5OYW1lLCAnQScsIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUsIGF0dHJTdGFydE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJFbmROYW1lKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyB1c2UgY2xhc3MgYXMgZGlyZWN0aXZlXG4gICAgICAgICAgY2xhc3NOYW1lID0gbm9kZS5jbGFzc05hbWU7XG4gICAgICAgICAgaWYgKGlzT2JqZWN0KGNsYXNzTmFtZSkpIHtcbiAgICAgICAgICAgICAgLy8gTWF5YmUgU1ZHQW5pbWF0ZWRTdHJpbmdcbiAgICAgICAgICAgICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lLmFuaW1WYWw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc1N0cmluZyhjbGFzc05hbWUpICYmIGNsYXNzTmFtZSAhPT0gJycpIHtcbiAgICAgICAgICAgIHdoaWxlIChtYXRjaCA9IENMQVNTX0RJUkVDVElWRV9SRUdFWFAuZXhlYyhjbGFzc05hbWUpKSB7XG4gICAgICAgICAgICAgIG5OYW1lID0gZGlyZWN0aXZlTm9ybWFsaXplKG1hdGNoWzJdKTtcbiAgICAgICAgICAgICAgaWYgKGFkZERpcmVjdGl2ZShkaXJlY3RpdmVzLCBuTmFtZSwgJ0MnLCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlKSkge1xuICAgICAgICAgICAgICAgIGF0dHJzW25OYW1lXSA9IHRyaW0obWF0Y2hbM10pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5zdWJzdHIobWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBOT0RFX1RZUEVfVEVYVDogLyogVGV4dCBOb2RlICovXG4gICAgICAgICAgYWRkVGV4dEludGVycG9sYXRlRGlyZWN0aXZlKGRpcmVjdGl2ZXMsIG5vZGUubm9kZVZhbHVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBOT0RFX1RZUEVfQ09NTUVOVDogLyogQ29tbWVudCAqL1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBtYXRjaCA9IENPTU1FTlRfRElSRUNUSVZFX1JFR0VYUC5leGVjKG5vZGUubm9kZVZhbHVlKTtcbiAgICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgICBuTmFtZSA9IGRpcmVjdGl2ZU5vcm1hbGl6ZShtYXRjaFsxXSk7XG4gICAgICAgICAgICAgIGlmIChhZGREaXJlY3RpdmUoZGlyZWN0aXZlcywgbk5hbWUsICdNJywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSkpIHtcbiAgICAgICAgICAgICAgICBhdHRyc1tuTmFtZV0gPSB0cmltKG1hdGNoWzJdKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIHR1cm5zIG91dCB0aGF0IHVuZGVyIHNvbWUgY2lyY3Vtc3RhbmNlcyBJRTkgdGhyb3dzIGVycm9ycyB3aGVuIG9uZSBhdHRlbXB0cyB0byByZWFkXG4gICAgICAgICAgICAvLyBjb21tZW50J3Mgbm9kZSB2YWx1ZS5cbiAgICAgICAgICAgIC8vIEp1c3QgaWdub3JlIGl0IGFuZCBjb250aW51ZS4gKENhbid0IHNlZW0gdG8gcmVwcm9kdWNlIGluIHRlc3QgY2FzZS4pXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBkaXJlY3RpdmVzLnNvcnQoYnlQcmlvcml0eSk7XG4gICAgICByZXR1cm4gZGlyZWN0aXZlcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHaXZlbiBhIG5vZGUgd2l0aCBhbiBkaXJlY3RpdmUtc3RhcnQgaXQgY29sbGVjdHMgYWxsIG9mIHRoZSBzaWJsaW5ncyB1bnRpbCBpdCBmaW5kc1xuICAgICAqIGRpcmVjdGl2ZS1lbmQuXG4gICAgICogQHBhcmFtIG5vZGVcbiAgICAgKiBAcGFyYW0gYXR0clN0YXJ0XG4gICAgICogQHBhcmFtIGF0dHJFbmRcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBncm91cFNjYW4obm9kZSwgYXR0clN0YXJ0LCBhdHRyRW5kKSB7XG4gICAgICB2YXIgbm9kZXMgPSBbXTtcbiAgICAgIHZhciBkZXB0aCA9IDA7XG4gICAgICBpZiAoYXR0clN0YXJ0ICYmIG5vZGUuaGFzQXR0cmlidXRlICYmIG5vZGUuaGFzQXR0cmlidXRlKGF0dHJTdGFydCkpIHtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIGlmICghbm9kZSkge1xuICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ3V0ZXJkaXInLFxuICAgICAgICAgICAgICAgICAgICAgIFwiVW50ZXJtaW5hdGVkIGF0dHJpYnV0ZSwgZm91bmQgJ3swfScgYnV0IG5vIG1hdGNoaW5nICd7MX0nIGZvdW5kLlwiLFxuICAgICAgICAgICAgICAgICAgICAgIGF0dHJTdGFydCwgYXR0ckVuZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09IE5PREVfVFlQRV9FTEVNRU5UKSB7XG4gICAgICAgICAgICBpZiAobm9kZS5oYXNBdHRyaWJ1dGUoYXR0clN0YXJ0KSkgZGVwdGgrKztcbiAgICAgICAgICAgIGlmIChub2RlLmhhc0F0dHJpYnV0ZShhdHRyRW5kKSkgZGVwdGgtLTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbm9kZXMucHVzaChub2RlKTtcbiAgICAgICAgICBub2RlID0gbm9kZS5uZXh0U2libGluZztcbiAgICAgICAgfSB3aGlsZSAoZGVwdGggPiAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBqcUxpdGUobm9kZXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdyYXBwZXIgZm9yIGxpbmtpbmcgZnVuY3Rpb24gd2hpY2ggY29udmVydHMgbm9ybWFsIGxpbmtpbmcgZnVuY3Rpb24gaW50byBhIGdyb3VwZWRcbiAgICAgKiBsaW5raW5nIGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSBsaW5rRm5cbiAgICAgKiBAcGFyYW0gYXR0clN0YXJ0XG4gICAgICogQHBhcmFtIGF0dHJFbmRcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gICAgICovXG4gICAgZnVuY3Rpb24gZ3JvdXBFbGVtZW50c0xpbmtGbldyYXBwZXIobGlua0ZuLCBhdHRyU3RhcnQsIGF0dHJFbmQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGNvbnRyb2xsZXJzLCB0cmFuc2NsdWRlRm4pIHtcbiAgICAgICAgZWxlbWVudCA9IGdyb3VwU2NhbihlbGVtZW50WzBdLCBhdHRyU3RhcnQsIGF0dHJFbmQpO1xuICAgICAgICByZXR1cm4gbGlua0ZuKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY29udHJvbGxlcnMsIHRyYW5zY2x1ZGVGbik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9uY2UgdGhlIGRpcmVjdGl2ZXMgaGF2ZSBiZWVuIGNvbGxlY3RlZCwgdGhlaXIgY29tcGlsZSBmdW5jdGlvbnMgYXJlIGV4ZWN1dGVkLiBUaGlzIG1ldGhvZFxuICAgICAqIGlzIHJlc3BvbnNpYmxlIGZvciBpbmxpbmluZyBkaXJlY3RpdmUgdGVtcGxhdGVzIGFzIHdlbGwgYXMgdGVybWluYXRpbmcgdGhlIGFwcGxpY2F0aW9uXG4gICAgICogb2YgdGhlIGRpcmVjdGl2ZXMgaWYgdGhlIHRlcm1pbmFsIGRpcmVjdGl2ZSBoYXMgYmVlbiByZWFjaGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtBcnJheX0gZGlyZWN0aXZlcyBBcnJheSBvZiBjb2xsZWN0ZWQgZGlyZWN0aXZlcyB0byBleGVjdXRlIHRoZWlyIGNvbXBpbGUgZnVuY3Rpb24uXG4gICAgICogICAgICAgIHRoaXMgbmVlZHMgdG8gYmUgcHJlLXNvcnRlZCBieSBwcmlvcml0eSBvcmRlci5cbiAgICAgKiBAcGFyYW0ge05vZGV9IGNvbXBpbGVOb2RlIFRoZSByYXcgRE9NIG5vZGUgdG8gYXBwbHkgdGhlIGNvbXBpbGUgZnVuY3Rpb25zIHRvXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHRlbXBsYXRlQXR0cnMgVGhlIHNoYXJlZCBhdHRyaWJ1dGUgZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKGFuZ3VsYXIuU2NvcGUsIGNsb25lQXR0YWNoRm49KX0gdHJhbnNjbHVkZUZuIEEgbGlua2luZyBmdW5jdGlvbiwgd2hlcmUgdGhlXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlIGFyZ3VtZW50IGlzIGF1dG8tZ2VuZXJhdGVkIHRvIHRoZSBuZXdcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQgb2YgdGhlIHRyYW5zY2x1ZGVkIHBhcmVudCBzY29wZS5cbiAgICAgKiBAcGFyYW0ge0pRTGl0ZX0ganFDb2xsZWN0aW9uIElmIHdlIGFyZSB3b3JraW5nIG9uIHRoZSByb290IG9mIHRoZSBjb21waWxlIHRyZWUgdGhlbiB0aGlzXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmd1bWVudCBoYXMgdGhlIHJvb3QganFMaXRlIGFycmF5IHNvIHRoYXQgd2UgY2FuIHJlcGxhY2Ugbm9kZXNcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uIGl0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gb3JpZ2luYWxSZXBsYWNlRGlyZWN0aXZlIEFuIG9wdGlvbmFsIGRpcmVjdGl2ZSB0aGF0IHdpbGwgYmUgaWdub3JlZCB3aGVuXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGlsaW5nIHRoZSB0cmFuc2NsdXNpb24uXG4gICAgICogQHBhcmFtIHtBcnJheS48RnVuY3Rpb24+fSBwcmVMaW5rRm5zXG4gICAgICogQHBhcmFtIHtBcnJheS48RnVuY3Rpb24+fSBwb3N0TGlua0Zuc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcmV2aW91c0NvbXBpbGVDb250ZXh0IENvbnRleHQgdXNlZCBmb3IgcHJldmlvdXMgY29tcGlsYXRpb24gb2YgdGhlIGN1cnJlbnRcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBsaW5rRm5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcHBseURpcmVjdGl2ZXNUb05vZGUoZGlyZWN0aXZlcywgY29tcGlsZU5vZGUsIHRlbXBsYXRlQXR0cnMsIHRyYW5zY2x1ZGVGbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAganFDb2xsZWN0aW9uLCBvcmlnaW5hbFJlcGxhY2VEaXJlY3RpdmUsIHByZUxpbmtGbnMsIHBvc3RMaW5rRm5zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c0NvbXBpbGVDb250ZXh0KSB7XG4gICAgICBwcmV2aW91c0NvbXBpbGVDb250ZXh0ID0gcHJldmlvdXNDb21waWxlQ29udGV4dCB8fCB7fTtcblxuICAgICAgdmFyIHRlcm1pbmFsUHJpb3JpdHkgPSAtTnVtYmVyLk1BWF9WQUxVRSxcbiAgICAgICAgICBuZXdTY29wZURpcmVjdGl2ZSxcbiAgICAgICAgICBjb250cm9sbGVyRGlyZWN0aXZlcyA9IHByZXZpb3VzQ29tcGlsZUNvbnRleHQuY29udHJvbGxlckRpcmVjdGl2ZXMsXG4gICAgICAgICAgY29udHJvbGxlcnMsXG4gICAgICAgICAgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlID0gcHJldmlvdXNDb21waWxlQ29udGV4dC5uZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUsXG4gICAgICAgICAgdGVtcGxhdGVEaXJlY3RpdmUgPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0LnRlbXBsYXRlRGlyZWN0aXZlLFxuICAgICAgICAgIG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmUgPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0Lm5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmUsXG4gICAgICAgICAgaGFzVHJhbnNjbHVkZURpcmVjdGl2ZSA9IGZhbHNlLFxuICAgICAgICAgIGhhc1RlbXBsYXRlID0gZmFsc2UsXG4gICAgICAgICAgaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUgPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0Lmhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlLFxuICAgICAgICAgICRjb21waWxlTm9kZSA9IHRlbXBsYXRlQXR0cnMuJCRlbGVtZW50ID0ganFMaXRlKGNvbXBpbGVOb2RlKSxcbiAgICAgICAgICBkaXJlY3RpdmUsXG4gICAgICAgICAgZGlyZWN0aXZlTmFtZSxcbiAgICAgICAgICAkdGVtcGxhdGUsXG4gICAgICAgICAgcmVwbGFjZURpcmVjdGl2ZSA9IG9yaWdpbmFsUmVwbGFjZURpcmVjdGl2ZSxcbiAgICAgICAgICBjaGlsZFRyYW5zY2x1ZGVGbiA9IHRyYW5zY2x1ZGVGbixcbiAgICAgICAgICBsaW5rRm4sXG4gICAgICAgICAgZGlyZWN0aXZlVmFsdWU7XG5cbiAgICAgIC8vIGV4ZWN1dGVzIGFsbCBkaXJlY3RpdmVzIG9uIHRoZSBjdXJyZW50IGVsZW1lbnRcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGRpcmVjdGl2ZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICBkaXJlY3RpdmUgPSBkaXJlY3RpdmVzW2ldO1xuICAgICAgICB2YXIgYXR0clN0YXJ0ID0gZGlyZWN0aXZlLiQkc3RhcnQ7XG4gICAgICAgIHZhciBhdHRyRW5kID0gZGlyZWN0aXZlLiQkZW5kO1xuXG4gICAgICAgIC8vIGNvbGxlY3QgbXVsdGlibG9jayBzZWN0aW9uc1xuICAgICAgICBpZiAoYXR0clN0YXJ0KSB7XG4gICAgICAgICAgJGNvbXBpbGVOb2RlID0gZ3JvdXBTY2FuKGNvbXBpbGVOb2RlLCBhdHRyU3RhcnQsIGF0dHJFbmQpO1xuICAgICAgICB9XG4gICAgICAgICR0ZW1wbGF0ZSA9IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAodGVybWluYWxQcmlvcml0eSA+IGRpcmVjdGl2ZS5wcmlvcml0eSkge1xuICAgICAgICAgIGJyZWFrOyAvLyBwcmV2ZW50IGZ1cnRoZXIgcHJvY2Vzc2luZyBvZiBkaXJlY3RpdmVzXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGlyZWN0aXZlVmFsdWUgPSBkaXJlY3RpdmUuc2NvcGUpIHtcblxuICAgICAgICAgIC8vIHNraXAgdGhlIGNoZWNrIGZvciBkaXJlY3RpdmVzIHdpdGggYXN5bmMgdGVtcGxhdGVzLCB3ZSdsbCBjaGVjayB0aGUgZGVyaXZlZCBzeW5jXG4gICAgICAgICAgLy8gZGlyZWN0aXZlIHdoZW4gdGhlIHRlbXBsYXRlIGFycml2ZXNcbiAgICAgICAgICBpZiAoIWRpcmVjdGl2ZS50ZW1wbGF0ZVVybCkge1xuICAgICAgICAgICAgaWYgKGlzT2JqZWN0KGRpcmVjdGl2ZVZhbHVlKSkge1xuICAgICAgICAgICAgICAvLyBUaGlzIGRpcmVjdGl2ZSBpcyB0cnlpbmcgdG8gYWRkIGFuIGlzb2xhdGVkIHNjb3BlLlxuICAgICAgICAgICAgICAvLyBDaGVjayB0aGF0IHRoZXJlIGlzIG5vIHNjb3BlIG9mIGFueSBraW5kIGFscmVhZHlcbiAgICAgICAgICAgICAgYXNzZXJ0Tm9EdXBsaWNhdGUoJ25ldy9pc29sYXRlZCBzY29wZScsIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSB8fCBuZXdTY29wZURpcmVjdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlLCAkY29tcGlsZU5vZGUpO1xuICAgICAgICAgICAgICBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgPSBkaXJlY3RpdmU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBUaGlzIGRpcmVjdGl2ZSBpcyB0cnlpbmcgdG8gYWRkIGEgY2hpbGQgc2NvcGUuXG4gICAgICAgICAgICAgIC8vIENoZWNrIHRoYXQgdGhlcmUgaXMgbm8gaXNvbGF0ZWQgc2NvcGUgYWxyZWFkeVxuICAgICAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZSgnbmV3L2lzb2xhdGVkIHNjb3BlJywgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLCBkaXJlY3RpdmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb21waWxlTm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV3U2NvcGVEaXJlY3RpdmUgPSBuZXdTY29wZURpcmVjdGl2ZSB8fCBkaXJlY3RpdmU7XG4gICAgICAgIH1cblxuICAgICAgICBkaXJlY3RpdmVOYW1lID0gZGlyZWN0aXZlLm5hbWU7XG5cbiAgICAgICAgaWYgKCFkaXJlY3RpdmUudGVtcGxhdGVVcmwgJiYgZGlyZWN0aXZlLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgICBkaXJlY3RpdmVWYWx1ZSA9IGRpcmVjdGl2ZS5jb250cm9sbGVyO1xuICAgICAgICAgIGNvbnRyb2xsZXJEaXJlY3RpdmVzID0gY29udHJvbGxlckRpcmVjdGl2ZXMgfHwge307XG4gICAgICAgICAgYXNzZXJ0Tm9EdXBsaWNhdGUoXCInXCIgKyBkaXJlY3RpdmVOYW1lICsgXCInIGNvbnRyb2xsZXJcIixcbiAgICAgICAgICAgICAgY29udHJvbGxlckRpcmVjdGl2ZXNbZGlyZWN0aXZlTmFtZV0sIGRpcmVjdGl2ZSwgJGNvbXBpbGVOb2RlKTtcbiAgICAgICAgICBjb250cm9sbGVyRGlyZWN0aXZlc1tkaXJlY3RpdmVOYW1lXSA9IGRpcmVjdGl2ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkaXJlY3RpdmVWYWx1ZSA9IGRpcmVjdGl2ZS50cmFuc2NsdWRlKSB7XG4gICAgICAgICAgaGFzVHJhbnNjbHVkZURpcmVjdGl2ZSA9IHRydWU7XG5cbiAgICAgICAgICAvLyBTcGVjaWFsIGNhc2UgbmdJZiBhbmQgbmdSZXBlYXQgc28gdGhhdCB3ZSBkb24ndCBjb21wbGFpbiBhYm91dCBkdXBsaWNhdGUgdHJhbnNjbHVzaW9uLlxuICAgICAgICAgIC8vIFRoaXMgb3B0aW9uIHNob3VsZCBvbmx5IGJlIHVzZWQgYnkgZGlyZWN0aXZlcyB0aGF0IGtub3cgaG93IHRvIHNhZmVseSBoYW5kbGUgZWxlbWVudCB0cmFuc2NsdXNpb24sXG4gICAgICAgICAgLy8gd2hlcmUgdGhlIHRyYW5zY2x1ZGVkIG5vZGVzIGFyZSBhZGRlZCBvciByZXBsYWNlZCBhZnRlciBsaW5raW5nLlxuICAgICAgICAgIGlmICghZGlyZWN0aXZlLiQkdGxiKSB7XG4gICAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZSgndHJhbnNjbHVzaW9uJywgbm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZSwgZGlyZWN0aXZlLCAkY29tcGlsZU5vZGUpO1xuICAgICAgICAgICAgbm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZSA9IGRpcmVjdGl2ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZGlyZWN0aXZlVmFsdWUgPT0gJ2VsZW1lbnQnKSB7XG4gICAgICAgICAgICBoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICB0ZXJtaW5hbFByaW9yaXR5ID0gZGlyZWN0aXZlLnByaW9yaXR5O1xuICAgICAgICAgICAgJHRlbXBsYXRlID0gJGNvbXBpbGVOb2RlO1xuICAgICAgICAgICAgJGNvbXBpbGVOb2RlID0gdGVtcGxhdGVBdHRycy4kJGVsZW1lbnQgPVxuICAgICAgICAgICAgICAgIGpxTGl0ZShkb2N1bWVudC5jcmVhdGVDb21tZW50KCcgJyArIGRpcmVjdGl2ZU5hbWUgKyAnOiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZUF0dHJzW2RpcmVjdGl2ZU5hbWVdICsgJyAnKSk7XG4gICAgICAgICAgICBjb21waWxlTm9kZSA9ICRjb21waWxlTm9kZVswXTtcbiAgICAgICAgICAgIHJlcGxhY2VXaXRoKGpxQ29sbGVjdGlvbiwgc2xpY2VBcmdzKCR0ZW1wbGF0ZSksIGNvbXBpbGVOb2RlKTtcblxuICAgICAgICAgICAgY2hpbGRUcmFuc2NsdWRlRm4gPSBjb21waWxlKCR0ZW1wbGF0ZSwgdHJhbnNjbHVkZUZuLCB0ZXJtaW5hbFByaW9yaXR5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VEaXJlY3RpdmUgJiYgcmVwbGFjZURpcmVjdGl2ZS5uYW1lLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEb24ndCBwYXNzIGluOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gLSBjb250cm9sbGVyRGlyZWN0aXZlcyAtIG90aGVyd2lzZSB3ZSdsbCBjcmVhdGUgZHVwbGljYXRlcyBjb250cm9sbGVyc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gLSBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgb3IgdGVtcGxhdGVEaXJlY3RpdmUgLSBjb21iaW5pbmcgdGVtcGxhdGVzIHdpdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgZWxlbWVudCB0cmFuc2NsdXNpb24gZG9lc24ndCBtYWtlIHNlbnNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgb25seSBub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlIHNvIHRoYXQgd2UgcHJldmVudCBwdXR0aW5nIHRyYW5zY2x1c2lvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb24gdGhlIHNhbWUgZWxlbWVudCBtb3JlIHRoYW4gb25jZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmU6IG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJHRlbXBsYXRlID0ganFMaXRlKGpxTGl0ZUNsb25lKGNvbXBpbGVOb2RlKSkuY29udGVudHMoKTtcbiAgICAgICAgICAgICRjb21waWxlTm9kZS5lbXB0eSgpOyAvLyBjbGVhciBjb250ZW50c1xuICAgICAgICAgICAgY2hpbGRUcmFuc2NsdWRlRm4gPSBjb21waWxlKCR0ZW1wbGF0ZSwgdHJhbnNjbHVkZUZuKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGlyZWN0aXZlLnRlbXBsYXRlKSB7XG4gICAgICAgICAgaGFzVGVtcGxhdGUgPSB0cnVlO1xuICAgICAgICAgIGFzc2VydE5vRHVwbGljYXRlKCd0ZW1wbGF0ZScsIHRlbXBsYXRlRGlyZWN0aXZlLCBkaXJlY3RpdmUsICRjb21waWxlTm9kZSk7XG4gICAgICAgICAgdGVtcGxhdGVEaXJlY3RpdmUgPSBkaXJlY3RpdmU7XG5cbiAgICAgICAgICBkaXJlY3RpdmVWYWx1ZSA9IChpc0Z1bmN0aW9uKGRpcmVjdGl2ZS50ZW1wbGF0ZSkpXG4gICAgICAgICAgICAgID8gZGlyZWN0aXZlLnRlbXBsYXRlKCRjb21waWxlTm9kZSwgdGVtcGxhdGVBdHRycylcbiAgICAgICAgICAgICAgOiBkaXJlY3RpdmUudGVtcGxhdGU7XG5cbiAgICAgICAgICBkaXJlY3RpdmVWYWx1ZSA9IGRlbm9ybWFsaXplVGVtcGxhdGUoZGlyZWN0aXZlVmFsdWUpO1xuXG4gICAgICAgICAgaWYgKGRpcmVjdGl2ZS5yZXBsYWNlKSB7XG4gICAgICAgICAgICByZXBsYWNlRGlyZWN0aXZlID0gZGlyZWN0aXZlO1xuICAgICAgICAgICAgaWYgKGpxTGl0ZUlzVGV4dE5vZGUoZGlyZWN0aXZlVmFsdWUpKSB7XG4gICAgICAgICAgICAgICR0ZW1wbGF0ZSA9IFtdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgJHRlbXBsYXRlID0gcmVtb3ZlQ29tbWVudHMod3JhcFRlbXBsYXRlKGRpcmVjdGl2ZS50ZW1wbGF0ZU5hbWVzcGFjZSwgdHJpbShkaXJlY3RpdmVWYWx1ZSkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbXBpbGVOb2RlID0gJHRlbXBsYXRlWzBdO1xuXG4gICAgICAgICAgICBpZiAoJHRlbXBsYXRlLmxlbmd0aCAhPSAxIHx8IGNvbXBpbGVOb2RlLm5vZGVUeXBlICE9PSBOT0RFX1RZUEVfRUxFTUVOVCkge1xuICAgICAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycigndHBscnQnLFxuICAgICAgICAgICAgICAgICAgXCJUZW1wbGF0ZSBmb3IgZGlyZWN0aXZlICd7MH0nIG11c3QgaGF2ZSBleGFjdGx5IG9uZSByb290IGVsZW1lbnQuIHsxfVwiLFxuICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlTmFtZSwgJycpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXBsYWNlV2l0aChqcUNvbGxlY3Rpb24sICRjb21waWxlTm9kZSwgY29tcGlsZU5vZGUpO1xuXG4gICAgICAgICAgICB2YXIgbmV3VGVtcGxhdGVBdHRycyA9IHskYXR0cjoge319O1xuXG4gICAgICAgICAgICAvLyBjb21iaW5lIGRpcmVjdGl2ZXMgZnJvbSB0aGUgb3JpZ2luYWwgbm9kZSBhbmQgZnJvbSB0aGUgdGVtcGxhdGU6XG4gICAgICAgICAgICAvLyAtIHRha2UgdGhlIGFycmF5IG9mIGRpcmVjdGl2ZXMgZm9yIHRoaXMgZWxlbWVudFxuICAgICAgICAgICAgLy8gLSBzcGxpdCBpdCBpbnRvIHR3byBwYXJ0cywgdGhvc2UgdGhhdCBhbHJlYWR5IGFwcGxpZWQgKHByb2Nlc3NlZCkgYW5kIHRob3NlIHRoYXQgd2VyZW4ndCAodW5wcm9jZXNzZWQpXG4gICAgICAgICAgICAvLyAtIGNvbGxlY3QgZGlyZWN0aXZlcyBmcm9tIHRoZSB0ZW1wbGF0ZSBhbmQgc29ydCB0aGVtIGJ5IHByaW9yaXR5XG4gICAgICAgICAgICAvLyAtIGNvbWJpbmUgZGlyZWN0aXZlcyBhczogcHJvY2Vzc2VkICsgdGVtcGxhdGUgKyB1bnByb2Nlc3NlZFxuICAgICAgICAgICAgdmFyIHRlbXBsYXRlRGlyZWN0aXZlcyA9IGNvbGxlY3REaXJlY3RpdmVzKGNvbXBpbGVOb2RlLCBbXSwgbmV3VGVtcGxhdGVBdHRycyk7XG4gICAgICAgICAgICB2YXIgdW5wcm9jZXNzZWREaXJlY3RpdmVzID0gZGlyZWN0aXZlcy5zcGxpY2UoaSArIDEsIGRpcmVjdGl2ZXMubGVuZ3RoIC0gKGkgKyAxKSk7XG5cbiAgICAgICAgICAgIGlmIChuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUpIHtcbiAgICAgICAgICAgICAgbWFya0RpcmVjdGl2ZXNBc0lzb2xhdGUodGVtcGxhdGVEaXJlY3RpdmVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRpcmVjdGl2ZXMgPSBkaXJlY3RpdmVzLmNvbmNhdCh0ZW1wbGF0ZURpcmVjdGl2ZXMpLmNvbmNhdCh1bnByb2Nlc3NlZERpcmVjdGl2ZXMpO1xuICAgICAgICAgICAgbWVyZ2VUZW1wbGF0ZUF0dHJpYnV0ZXModGVtcGxhdGVBdHRycywgbmV3VGVtcGxhdGVBdHRycyk7XG5cbiAgICAgICAgICAgIGlpID0gZGlyZWN0aXZlcy5sZW5ndGg7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICRjb21waWxlTm9kZS5odG1sKGRpcmVjdGl2ZVZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGlyZWN0aXZlLnRlbXBsYXRlVXJsKSB7XG4gICAgICAgICAgaGFzVGVtcGxhdGUgPSB0cnVlO1xuICAgICAgICAgIGFzc2VydE5vRHVwbGljYXRlKCd0ZW1wbGF0ZScsIHRlbXBsYXRlRGlyZWN0aXZlLCBkaXJlY3RpdmUsICRjb21waWxlTm9kZSk7XG4gICAgICAgICAgdGVtcGxhdGVEaXJlY3RpdmUgPSBkaXJlY3RpdmU7XG5cbiAgICAgICAgICBpZiAoZGlyZWN0aXZlLnJlcGxhY2UpIHtcbiAgICAgICAgICAgIHJlcGxhY2VEaXJlY3RpdmUgPSBkaXJlY3RpdmU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbm9kZUxpbmtGbiA9IGNvbXBpbGVUZW1wbGF0ZVVybChkaXJlY3RpdmVzLnNwbGljZShpLCBkaXJlY3RpdmVzLmxlbmd0aCAtIGkpLCAkY29tcGlsZU5vZGUsXG4gICAgICAgICAgICAgIHRlbXBsYXRlQXR0cnMsIGpxQ29sbGVjdGlvbiwgaGFzVHJhbnNjbHVkZURpcmVjdGl2ZSAmJiBjaGlsZFRyYW5zY2x1ZGVGbiwgcHJlTGlua0ZucywgcG9zdExpbmtGbnMsIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyRGlyZWN0aXZlczogY29udHJvbGxlckRpcmVjdGl2ZXMsXG4gICAgICAgICAgICAgICAgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlOiBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVEaXJlY3RpdmU6IHRlbXBsYXRlRGlyZWN0aXZlLFxuICAgICAgICAgICAgICAgIG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmU6IG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmVcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgaWkgPSBkaXJlY3RpdmVzLmxlbmd0aDtcbiAgICAgICAgfSBlbHNlIGlmIChkaXJlY3RpdmUuY29tcGlsZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsaW5rRm4gPSBkaXJlY3RpdmUuY29tcGlsZSgkY29tcGlsZU5vZGUsIHRlbXBsYXRlQXR0cnMsIGNoaWxkVHJhbnNjbHVkZUZuKTtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGxpbmtGbikpIHtcbiAgICAgICAgICAgICAgYWRkTGlua0ZucyhudWxsLCBsaW5rRm4sIGF0dHJTdGFydCwgYXR0ckVuZCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxpbmtGbikge1xuICAgICAgICAgICAgICBhZGRMaW5rRm5zKGxpbmtGbi5wcmUsIGxpbmtGbi5wb3N0LCBhdHRyU3RhcnQsIGF0dHJFbmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUsIHN0YXJ0aW5nVGFnKCRjb21waWxlTm9kZSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkaXJlY3RpdmUudGVybWluYWwpIHtcbiAgICAgICAgICBub2RlTGlua0ZuLnRlcm1pbmFsID0gdHJ1ZTtcbiAgICAgICAgICB0ZXJtaW5hbFByaW9yaXR5ID0gTWF0aC5tYXgodGVybWluYWxQcmlvcml0eSwgZGlyZWN0aXZlLnByaW9yaXR5KTtcbiAgICAgICAgfVxuXG4gICAgICB9XG5cbiAgICAgIG5vZGVMaW5rRm4uc2NvcGUgPSBuZXdTY29wZURpcmVjdGl2ZSAmJiBuZXdTY29wZURpcmVjdGl2ZS5zY29wZSA9PT0gdHJ1ZTtcbiAgICAgIG5vZGVMaW5rRm4udHJhbnNjbHVkZU9uVGhpc0VsZW1lbnQgPSBoYXNUcmFuc2NsdWRlRGlyZWN0aXZlO1xuICAgICAgbm9kZUxpbmtGbi5lbGVtZW50VHJhbnNjbHVkZU9uVGhpc0VsZW1lbnQgPSBoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZTtcbiAgICAgIG5vZGVMaW5rRm4udGVtcGxhdGVPblRoaXNFbGVtZW50ID0gaGFzVGVtcGxhdGU7XG4gICAgICBub2RlTGlua0ZuLnRyYW5zY2x1ZGUgPSBjaGlsZFRyYW5zY2x1ZGVGbjtcblxuICAgICAgcHJldmlvdXNDb21waWxlQ29udGV4dC5oYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSA9IGhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlO1xuXG4gICAgICAvLyBtaWdodCBiZSBub3JtYWwgb3IgZGVsYXllZCBub2RlTGlua0ZuIGRlcGVuZGluZyBvbiBpZiB0ZW1wbGF0ZVVybCBpcyBwcmVzZW50XG4gICAgICByZXR1cm4gbm9kZUxpbmtGbjtcblxuICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgZnVuY3Rpb24gYWRkTGlua0ZucyhwcmUsIHBvc3QsIGF0dHJTdGFydCwgYXR0ckVuZCkge1xuICAgICAgICBpZiAocHJlKSB7XG4gICAgICAgICAgaWYgKGF0dHJTdGFydCkgcHJlID0gZ3JvdXBFbGVtZW50c0xpbmtGbldyYXBwZXIocHJlLCBhdHRyU3RhcnQsIGF0dHJFbmQpO1xuICAgICAgICAgIHByZS5yZXF1aXJlID0gZGlyZWN0aXZlLnJlcXVpcmU7XG4gICAgICAgICAgcHJlLmRpcmVjdGl2ZU5hbWUgPSBkaXJlY3RpdmVOYW1lO1xuICAgICAgICAgIGlmIChuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgPT09IGRpcmVjdGl2ZSB8fCBkaXJlY3RpdmUuJCRpc29sYXRlU2NvcGUpIHtcbiAgICAgICAgICAgIHByZSA9IGNsb25lQW5kQW5ub3RhdGVGbihwcmUsIHtpc29sYXRlU2NvcGU6IHRydWV9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcHJlTGlua0Zucy5wdXNoKHByZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvc3QpIHtcbiAgICAgICAgICBpZiAoYXR0clN0YXJ0KSBwb3N0ID0gZ3JvdXBFbGVtZW50c0xpbmtGbldyYXBwZXIocG9zdCwgYXR0clN0YXJ0LCBhdHRyRW5kKTtcbiAgICAgICAgICBwb3N0LnJlcXVpcmUgPSBkaXJlY3RpdmUucmVxdWlyZTtcbiAgICAgICAgICBwb3N0LmRpcmVjdGl2ZU5hbWUgPSBkaXJlY3RpdmVOYW1lO1xuICAgICAgICAgIGlmIChuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgPT09IGRpcmVjdGl2ZSB8fCBkaXJlY3RpdmUuJCRpc29sYXRlU2NvcGUpIHtcbiAgICAgICAgICAgIHBvc3QgPSBjbG9uZUFuZEFubm90YXRlRm4ocG9zdCwge2lzb2xhdGVTY29wZTogdHJ1ZX0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwb3N0TGlua0Zucy5wdXNoKHBvc3QpO1xuICAgICAgICB9XG4gICAgICB9XG5cblxuICAgICAgZnVuY3Rpb24gZ2V0Q29udHJvbGxlcnMoZGlyZWN0aXZlTmFtZSwgcmVxdWlyZSwgJGVsZW1lbnQsIGVsZW1lbnRDb250cm9sbGVycykge1xuICAgICAgICB2YXIgdmFsdWUsIHJldHJpZXZhbE1ldGhvZCA9ICdkYXRhJywgb3B0aW9uYWwgPSBmYWxzZTtcbiAgICAgICAgdmFyICRzZWFyY2hFbGVtZW50ID0gJGVsZW1lbnQ7XG4gICAgICAgIHZhciBtYXRjaDtcbiAgICAgICAgaWYgKGlzU3RyaW5nKHJlcXVpcmUpKSB7XG4gICAgICAgICAgbWF0Y2ggPSByZXF1aXJlLm1hdGNoKFJFUVVJUkVfUFJFRklYX1JFR0VYUCk7XG4gICAgICAgICAgcmVxdWlyZSA9IHJlcXVpcmUuc3Vic3RyaW5nKG1hdGNoWzBdLmxlbmd0aCk7XG5cbiAgICAgICAgICBpZiAobWF0Y2hbM10pIHtcbiAgICAgICAgICAgIGlmIChtYXRjaFsxXSkgbWF0Y2hbM10gPSBudWxsO1xuICAgICAgICAgICAgZWxzZSBtYXRjaFsxXSA9IG1hdGNoWzNdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobWF0Y2hbMV0gPT09ICdeJykge1xuICAgICAgICAgICAgcmV0cmlldmFsTWV0aG9kID0gJ2luaGVyaXRlZERhdGEnO1xuICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2hbMV0gPT09ICdeXicpIHtcbiAgICAgICAgICAgIHJldHJpZXZhbE1ldGhvZCA9ICdpbmhlcml0ZWREYXRhJztcbiAgICAgICAgICAgICRzZWFyY2hFbGVtZW50ID0gJGVsZW1lbnQucGFyZW50KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtYXRjaFsyXSA9PT0gJz8nKSB7XG4gICAgICAgICAgICBvcHRpb25hbCA9IHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFsdWUgPSBudWxsO1xuXG4gICAgICAgICAgaWYgKGVsZW1lbnRDb250cm9sbGVycyAmJiByZXRyaWV2YWxNZXRob2QgPT09ICdkYXRhJykge1xuICAgICAgICAgICAgaWYgKHZhbHVlID0gZWxlbWVudENvbnRyb2xsZXJzW3JlcXVpcmVdKSB7XG4gICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuaW5zdGFuY2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhbHVlID0gdmFsdWUgfHwgJHNlYXJjaEVsZW1lbnRbcmV0cmlldmFsTWV0aG9kXSgnJCcgKyByZXF1aXJlICsgJ0NvbnRyb2xsZXInKTtcblxuICAgICAgICAgIGlmICghdmFsdWUgJiYgIW9wdGlvbmFsKSB7XG4gICAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignY3RyZXEnLFxuICAgICAgICAgICAgICAgIFwiQ29udHJvbGxlciAnezB9JywgcmVxdWlyZWQgYnkgZGlyZWN0aXZlICd7MX0nLCBjYW4ndCBiZSBmb3VuZCFcIixcbiAgICAgICAgICAgICAgICByZXF1aXJlLCBkaXJlY3RpdmVOYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHZhbHVlIHx8IG51bGw7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShyZXF1aXJlKSkge1xuICAgICAgICAgIHZhbHVlID0gW107XG4gICAgICAgICAgZm9yRWFjaChyZXF1aXJlLCBmdW5jdGlvbihyZXF1aXJlKSB7XG4gICAgICAgICAgICB2YWx1ZS5wdXNoKGdldENvbnRyb2xsZXJzKGRpcmVjdGl2ZU5hbWUsIHJlcXVpcmUsICRlbGVtZW50LCBlbGVtZW50Q29udHJvbGxlcnMpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG5cblxuICAgICAgZnVuY3Rpb24gbm9kZUxpbmtGbihjaGlsZExpbmtGbiwgc2NvcGUsIGxpbmtOb2RlLCAkcm9vdEVsZW1lbnQsIGJvdW5kVHJhbnNjbHVkZUZuKSB7XG4gICAgICAgIHZhciBpLCBpaSwgbGlua0ZuLCBjb250cm9sbGVyLCBpc29sYXRlU2NvcGUsIGVsZW1lbnRDb250cm9sbGVycywgdHJhbnNjbHVkZUZuLCAkZWxlbWVudCxcbiAgICAgICAgICAgIGF0dHJzO1xuXG4gICAgICAgIGlmIChjb21waWxlTm9kZSA9PT0gbGlua05vZGUpIHtcbiAgICAgICAgICBhdHRycyA9IHRlbXBsYXRlQXR0cnM7XG4gICAgICAgICAgJGVsZW1lbnQgPSB0ZW1wbGF0ZUF0dHJzLiQkZWxlbWVudDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkZWxlbWVudCA9IGpxTGl0ZShsaW5rTm9kZSk7XG4gICAgICAgICAgYXR0cnMgPSBuZXcgQXR0cmlidXRlcygkZWxlbWVudCwgdGVtcGxhdGVBdHRycyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlKSB7XG4gICAgICAgICAgaXNvbGF0ZVNjb3BlID0gc2NvcGUuJG5ldyh0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChib3VuZFRyYW5zY2x1ZGVGbikge1xuICAgICAgICAgIC8vIHRyYWNrIGBib3VuZFRyYW5zY2x1ZGVGbmAgc28gaXQgY2FuIGJlIHVud3JhcHBlZCBpZiBgdHJhbnNjbHVkZUZuYFxuICAgICAgICAgIC8vIGlzIGxhdGVyIHBhc3NlZCBhcyBgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm5gIHRvIGBwdWJsaWNMaW5rRm5gXG4gICAgICAgICAgdHJhbnNjbHVkZUZuID0gY29udHJvbGxlcnNCb3VuZFRyYW5zY2x1ZGU7XG4gICAgICAgICAgdHJhbnNjbHVkZUZuLiQkYm91bmRUcmFuc2NsdWRlID0gYm91bmRUcmFuc2NsdWRlRm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udHJvbGxlckRpcmVjdGl2ZXMpIHtcbiAgICAgICAgICAvLyBUT0RPOiBtZXJnZSBgY29udHJvbGxlcnNgIGFuZCBgZWxlbWVudENvbnRyb2xsZXJzYCBpbnRvIHNpbmdsZSBvYmplY3QuXG4gICAgICAgICAgY29udHJvbGxlcnMgPSB7fTtcbiAgICAgICAgICBlbGVtZW50Q29udHJvbGxlcnMgPSB7fTtcbiAgICAgICAgICBmb3JFYWNoKGNvbnRyb2xsZXJEaXJlY3RpdmVzLCBmdW5jdGlvbihkaXJlY3RpdmUpIHtcbiAgICAgICAgICAgIHZhciBsb2NhbHMgPSB7XG4gICAgICAgICAgICAgICRzY29wZTogZGlyZWN0aXZlID09PSBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgfHwgZGlyZWN0aXZlLiQkaXNvbGF0ZVNjb3BlID8gaXNvbGF0ZVNjb3BlIDogc2NvcGUsXG4gICAgICAgICAgICAgICRlbGVtZW50OiAkZWxlbWVudCxcbiAgICAgICAgICAgICAgJGF0dHJzOiBhdHRycyxcbiAgICAgICAgICAgICAgJHRyYW5zY2x1ZGU6IHRyYW5zY2x1ZGVGblxuICAgICAgICAgICAgfSwgY29udHJvbGxlckluc3RhbmNlO1xuXG4gICAgICAgICAgICBjb250cm9sbGVyID0gZGlyZWN0aXZlLmNvbnRyb2xsZXI7XG4gICAgICAgICAgICBpZiAoY29udHJvbGxlciA9PSAnQCcpIHtcbiAgICAgICAgICAgICAgY29udHJvbGxlciA9IGF0dHJzW2RpcmVjdGl2ZS5uYW1lXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29udHJvbGxlckluc3RhbmNlID0gJGNvbnRyb2xsZXIoY29udHJvbGxlciwgbG9jYWxzLCB0cnVlLCBkaXJlY3RpdmUuY29udHJvbGxlckFzKTtcblxuICAgICAgICAgICAgLy8gRm9yIGRpcmVjdGl2ZXMgd2l0aCBlbGVtZW50IHRyYW5zY2x1c2lvbiB0aGUgZWxlbWVudCBpcyBhIGNvbW1lbnQsXG4gICAgICAgICAgICAvLyBidXQgalF1ZXJ5IC5kYXRhIGRvZXNuJ3Qgc3VwcG9ydCBhdHRhY2hpbmcgZGF0YSB0byBjb21tZW50IG5vZGVzIGFzIGl0J3MgaGFyZCB0b1xuICAgICAgICAgICAgLy8gY2xlYW4gdXAgKGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzgzMzUpLlxuICAgICAgICAgICAgLy8gSW5zdGVhZCwgd2Ugc2F2ZSB0aGUgY29udHJvbGxlcnMgZm9yIHRoZSBlbGVtZW50IGluIGEgbG9jYWwgaGFzaCBhbmQgYXR0YWNoIHRvIC5kYXRhXG4gICAgICAgICAgICAvLyBsYXRlciwgb25jZSB3ZSBoYXZlIHRoZSBhY3R1YWwgZWxlbWVudC5cbiAgICAgICAgICAgIGVsZW1lbnRDb250cm9sbGVyc1tkaXJlY3RpdmUubmFtZV0gPSBjb250cm9sbGVySW5zdGFuY2U7XG4gICAgICAgICAgICBpZiAoIWhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlKSB7XG4gICAgICAgICAgICAgICRlbGVtZW50LmRhdGEoJyQnICsgZGlyZWN0aXZlLm5hbWUgKyAnQ29udHJvbGxlcicsIGNvbnRyb2xsZXJJbnN0YW5jZS5pbnN0YW5jZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnRyb2xsZXJzW2RpcmVjdGl2ZS5uYW1lXSA9IGNvbnRyb2xsZXJJbnN0YW5jZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUpIHtcbiAgICAgICAgICBjb21waWxlLiQkYWRkU2NvcGVJbmZvKCRlbGVtZW50LCBpc29sYXRlU2NvcGUsIHRydWUsICEodGVtcGxhdGVEaXJlY3RpdmUgJiYgKHRlbXBsYXRlRGlyZWN0aXZlID09PSBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgfHxcbiAgICAgICAgICAgICAgdGVtcGxhdGVEaXJlY3RpdmUgPT09IG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZS4kJG9yaWdpbmFsRGlyZWN0aXZlKSkpO1xuICAgICAgICAgIGNvbXBpbGUuJCRhZGRTY29wZUNsYXNzKCRlbGVtZW50LCB0cnVlKTtcblxuICAgICAgICAgIHZhciBpc29sYXRlU2NvcGVDb250cm9sbGVyID0gY29udHJvbGxlcnMgJiYgY29udHJvbGxlcnNbbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLm5hbWVdO1xuICAgICAgICAgIHZhciBpc29sYXRlQmluZGluZ0NvbnRleHQgPSBpc29sYXRlU2NvcGU7XG4gICAgICAgICAgaWYgKGlzb2xhdGVTY29wZUNvbnRyb2xsZXIgJiYgaXNvbGF0ZVNjb3BlQ29udHJvbGxlci5pZGVudGlmaWVyICYmXG4gICAgICAgICAgICAgIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZS5iaW5kVG9Db250cm9sbGVyID09PSB0cnVlKSB7XG4gICAgICAgICAgICBpc29sYXRlQmluZGluZ0NvbnRleHQgPSBpc29sYXRlU2NvcGVDb250cm9sbGVyLmluc3RhbmNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZvckVhY2goaXNvbGF0ZVNjb3BlLiQkaXNvbGF0ZUJpbmRpbmdzID0gbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLiQkaXNvbGF0ZUJpbmRpbmdzLCBmdW5jdGlvbihkZWZpbml0aW9uLCBzY29wZU5hbWUpIHtcbiAgICAgICAgICAgIHZhciBhdHRyTmFtZSA9IGRlZmluaXRpb24uYXR0ck5hbWUsXG4gICAgICAgICAgICAgICAgb3B0aW9uYWwgPSBkZWZpbml0aW9uLm9wdGlvbmFsLFxuICAgICAgICAgICAgICAgIG1vZGUgPSBkZWZpbml0aW9uLm1vZGUsIC8vIEAsID0sIG9yICZcbiAgICAgICAgICAgICAgICBsYXN0VmFsdWUsXG4gICAgICAgICAgICAgICAgcGFyZW50R2V0LCBwYXJlbnRTZXQsIGNvbXBhcmU7XG5cbiAgICAgICAgICAgIHN3aXRjaCAobW9kZSkge1xuXG4gICAgICAgICAgICAgIGNhc2UgJ0AnOlxuICAgICAgICAgICAgICAgIGF0dHJzLiRvYnNlcnZlKGF0dHJOYW1lLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgaXNvbGF0ZUJpbmRpbmdDb250ZXh0W3Njb3BlTmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBhdHRycy4kJG9ic2VydmVyc1thdHRyTmFtZV0uJCRzY29wZSA9IHNjb3BlO1xuICAgICAgICAgICAgICAgIGlmIChhdHRyc1thdHRyTmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBhdHRyaWJ1dGUgaGFzIGJlZW4gcHJvdmlkZWQgdGhlbiB3ZSB0cmlnZ2VyIGFuIGludGVycG9sYXRpb24gdG8gZW5zdXJlXG4gICAgICAgICAgICAgICAgICAvLyB0aGUgdmFsdWUgaXMgdGhlcmUgZm9yIHVzZSBpbiB0aGUgbGluayBmblxuICAgICAgICAgICAgICAgICAgaXNvbGF0ZUJpbmRpbmdDb250ZXh0W3Njb3BlTmFtZV0gPSAkaW50ZXJwb2xhdGUoYXR0cnNbYXR0ck5hbWVdKShzY29wZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgJz0nOlxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25hbCAmJiAhYXR0cnNbYXR0ck5hbWVdKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBhcmVudEdldCA9ICRwYXJzZShhdHRyc1thdHRyTmFtZV0pO1xuICAgICAgICAgICAgICAgIGlmIChwYXJlbnRHZXQubGl0ZXJhbCkge1xuICAgICAgICAgICAgICAgICAgY29tcGFyZSA9IGVxdWFscztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgY29tcGFyZSA9IGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIGEgPT09IGIgfHwgKGEgIT09IGEgJiYgYiAhPT0gYik7IH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBhcmVudFNldCA9IHBhcmVudEdldC5hc3NpZ24gfHwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAvLyByZXNldCB0aGUgY2hhbmdlLCBvciB3ZSB3aWxsIHRocm93IHRoaXMgZXhjZXB0aW9uIG9uIGV2ZXJ5ICRkaWdlc3RcbiAgICAgICAgICAgICAgICAgIGxhc3RWYWx1ZSA9IGlzb2xhdGVCaW5kaW5nQ29udGV4dFtzY29wZU5hbWVdID0gcGFyZW50R2V0KHNjb3BlKTtcbiAgICAgICAgICAgICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdub25hc3NpZ24nLFxuICAgICAgICAgICAgICAgICAgICAgIFwiRXhwcmVzc2lvbiAnezB9JyB1c2VkIHdpdGggZGlyZWN0aXZlICd7MX0nIGlzIG5vbi1hc3NpZ25hYmxlIVwiLFxuICAgICAgICAgICAgICAgICAgICAgIGF0dHJzW2F0dHJOYW1lXSwgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLm5hbWUpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgbGFzdFZhbHVlID0gaXNvbGF0ZUJpbmRpbmdDb250ZXh0W3Njb3BlTmFtZV0gPSBwYXJlbnRHZXQoc2NvcGUpO1xuICAgICAgICAgICAgICAgIHZhciBwYXJlbnRWYWx1ZVdhdGNoID0gZnVuY3Rpb24gcGFyZW50VmFsdWVXYXRjaChwYXJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgaWYgKCFjb21wYXJlKHBhcmVudFZhbHVlLCBpc29sYXRlQmluZGluZ0NvbnRleHRbc2NvcGVOYW1lXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gd2UgYXJlIG91dCBvZiBzeW5jIGFuZCBuZWVkIHRvIGNvcHlcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb21wYXJlKHBhcmVudFZhbHVlLCBsYXN0VmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gcGFyZW50IGNoYW5nZWQgYW5kIGl0IGhhcyBwcmVjZWRlbmNlXG4gICAgICAgICAgICAgICAgICAgICAgaXNvbGF0ZUJpbmRpbmdDb250ZXh0W3Njb3BlTmFtZV0gPSBwYXJlbnRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgcGFyZW50IGNhbiBiZSBhc3NpZ25lZCB0aGVuIGRvIHNvXG4gICAgICAgICAgICAgICAgICAgICAgcGFyZW50U2V0KHNjb3BlLCBwYXJlbnRWYWx1ZSA9IGlzb2xhdGVCaW5kaW5nQ29udGV4dFtzY29wZU5hbWVdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGxhc3RWYWx1ZSA9IHBhcmVudFZhbHVlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcGFyZW50VmFsdWVXYXRjaC4kc3RhdGVmdWwgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciB1bndhdGNoO1xuICAgICAgICAgICAgICAgIGlmIChkZWZpbml0aW9uLmNvbGxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgIHVud2F0Y2ggPSBzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKGF0dHJzW2F0dHJOYW1lXSwgcGFyZW50VmFsdWVXYXRjaCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHVud2F0Y2ggPSBzY29wZS4kd2F0Y2goJHBhcnNlKGF0dHJzW2F0dHJOYW1lXSwgcGFyZW50VmFsdWVXYXRjaCksIG51bGwsIHBhcmVudEdldC5saXRlcmFsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaXNvbGF0ZVNjb3BlLiRvbignJGRlc3Ryb3knLCB1bndhdGNoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlICcmJzpcbiAgICAgICAgICAgICAgICBwYXJlbnRHZXQgPSAkcGFyc2UoYXR0cnNbYXR0ck5hbWVdKTtcbiAgICAgICAgICAgICAgICBpc29sYXRlQmluZGluZ0NvbnRleHRbc2NvcGVOYW1lXSA9IGZ1bmN0aW9uKGxvY2Fscykge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcmVudEdldChzY29wZSwgbG9jYWxzKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250cm9sbGVycykge1xuICAgICAgICAgIGZvckVhY2goY29udHJvbGxlcnMsIGZ1bmN0aW9uKGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjb250cm9sbGVycyA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBQUkVMSU5LSU5HXG4gICAgICAgIGZvciAoaSA9IDAsIGlpID0gcHJlTGlua0Zucy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgbGlua0ZuID0gcHJlTGlua0Zuc1tpXTtcbiAgICAgICAgICBpbnZva2VMaW5rRm4obGlua0ZuLFxuICAgICAgICAgICAgICBsaW5rRm4uaXNvbGF0ZVNjb3BlID8gaXNvbGF0ZVNjb3BlIDogc2NvcGUsXG4gICAgICAgICAgICAgICRlbGVtZW50LFxuICAgICAgICAgICAgICBhdHRycyxcbiAgICAgICAgICAgICAgbGlua0ZuLnJlcXVpcmUgJiYgZ2V0Q29udHJvbGxlcnMobGlua0ZuLmRpcmVjdGl2ZU5hbWUsIGxpbmtGbi5yZXF1aXJlLCAkZWxlbWVudCwgZWxlbWVudENvbnRyb2xsZXJzKSxcbiAgICAgICAgICAgICAgdHJhbnNjbHVkZUZuXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJFQ1VSU0lPTlxuICAgICAgICAvLyBXZSBvbmx5IHBhc3MgdGhlIGlzb2xhdGUgc2NvcGUsIGlmIHRoZSBpc29sYXRlIGRpcmVjdGl2ZSBoYXMgYSB0ZW1wbGF0ZSxcbiAgICAgICAgLy8gb3RoZXJ3aXNlIHRoZSBjaGlsZCBlbGVtZW50cyBkbyBub3QgYmVsb25nIHRvIHRoZSBpc29sYXRlIGRpcmVjdGl2ZS5cbiAgICAgICAgdmFyIHNjb3BlVG9DaGlsZCA9IHNjb3BlO1xuICAgICAgICBpZiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlICYmIChuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUudGVtcGxhdGUgfHwgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLnRlbXBsYXRlVXJsID09PSBudWxsKSkge1xuICAgICAgICAgIHNjb3BlVG9DaGlsZCA9IGlzb2xhdGVTY29wZTtcbiAgICAgICAgfVxuICAgICAgICBjaGlsZExpbmtGbiAmJiBjaGlsZExpbmtGbihzY29wZVRvQ2hpbGQsIGxpbmtOb2RlLmNoaWxkTm9kZXMsIHVuZGVmaW5lZCwgYm91bmRUcmFuc2NsdWRlRm4pO1xuXG4gICAgICAgIC8vIFBPU1RMSU5LSU5HXG4gICAgICAgIGZvciAoaSA9IHBvc3RMaW5rRm5zLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgbGlua0ZuID0gcG9zdExpbmtGbnNbaV07XG4gICAgICAgICAgaW52b2tlTGlua0ZuKGxpbmtGbixcbiAgICAgICAgICAgICAgbGlua0ZuLmlzb2xhdGVTY29wZSA/IGlzb2xhdGVTY29wZSA6IHNjb3BlLFxuICAgICAgICAgICAgICAkZWxlbWVudCxcbiAgICAgICAgICAgICAgYXR0cnMsXG4gICAgICAgICAgICAgIGxpbmtGbi5yZXF1aXJlICYmIGdldENvbnRyb2xsZXJzKGxpbmtGbi5kaXJlY3RpdmVOYW1lLCBsaW5rRm4ucmVxdWlyZSwgJGVsZW1lbnQsIGVsZW1lbnRDb250cm9sbGVycyksXG4gICAgICAgICAgICAgIHRyYW5zY2x1ZGVGblxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGlzIGlzIHRoZSBmdW5jdGlvbiB0aGF0IGlzIGluamVjdGVkIGFzIGAkdHJhbnNjbHVkZWAuXG4gICAgICAgIC8vIE5vdGU6IGFsbCBhcmd1bWVudHMgYXJlIG9wdGlvbmFsIVxuICAgICAgICBmdW5jdGlvbiBjb250cm9sbGVyc0JvdW5kVHJhbnNjbHVkZShzY29wZSwgY2xvbmVBdHRhY2hGbiwgZnV0dXJlUGFyZW50RWxlbWVudCkge1xuICAgICAgICAgIHZhciB0cmFuc2NsdWRlQ29udHJvbGxlcnM7XG5cbiAgICAgICAgICAvLyBObyBzY29wZSBwYXNzZWQgaW46XG4gICAgICAgICAgaWYgKCFpc1Njb3BlKHNjb3BlKSkge1xuICAgICAgICAgICAgZnV0dXJlUGFyZW50RWxlbWVudCA9IGNsb25lQXR0YWNoRm47XG4gICAgICAgICAgICBjbG9uZUF0dGFjaEZuID0gc2NvcGU7XG4gICAgICAgICAgICBzY29wZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUpIHtcbiAgICAgICAgICAgIHRyYW5zY2x1ZGVDb250cm9sbGVycyA9IGVsZW1lbnRDb250cm9sbGVycztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFmdXR1cmVQYXJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICBmdXR1cmVQYXJlbnRFbGVtZW50ID0gaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUgPyAkZWxlbWVudC5wYXJlbnQoKSA6ICRlbGVtZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYm91bmRUcmFuc2NsdWRlRm4oc2NvcGUsIGNsb25lQXR0YWNoRm4sIHRyYW5zY2x1ZGVDb250cm9sbGVycywgZnV0dXJlUGFyZW50RWxlbWVudCwgc2NvcGVUb0NoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1hcmtEaXJlY3RpdmVzQXNJc29sYXRlKGRpcmVjdGl2ZXMpIHtcbiAgICAgIC8vIG1hcmsgYWxsIGRpcmVjdGl2ZXMgYXMgbmVlZGluZyBpc29sYXRlIHNjb3BlLlxuICAgICAgZm9yICh2YXIgaiA9IDAsIGpqID0gZGlyZWN0aXZlcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG4gICAgICAgIGRpcmVjdGl2ZXNbal0gPSBpbmhlcml0KGRpcmVjdGl2ZXNbal0sIHskJGlzb2xhdGVTY29wZTogdHJ1ZX0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGxvb2tzIHVwIHRoZSBkaXJlY3RpdmUgYW5kIGRlY29yYXRlcyBpdCB3aXRoIGV4Y2VwdGlvbiBoYW5kbGluZyBhbmQgcHJvcGVyIHBhcmFtZXRlcnMuIFdlXG4gICAgICogY2FsbCB0aGlzIHRoZSBib3VuZERpcmVjdGl2ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIG5hbWUgb2YgdGhlIGRpcmVjdGl2ZSB0byBsb29rIHVwLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhdGlvbiBUaGUgZGlyZWN0aXZlIG11c3QgYmUgZm91bmQgaW4gc3BlY2lmaWMgZm9ybWF0LlxuICAgICAqICAgU3RyaW5nIGNvbnRhaW5pbmcgYW55IG9mIHRoZXNlcyBjaGFyYWN0ZXJzOlxuICAgICAqXG4gICAgICogICAqIGBFYDogZWxlbWVudCBuYW1lXG4gICAgICogICAqIGBBJzogYXR0cmlidXRlXG4gICAgICogICAqIGBDYDogY2xhc3NcbiAgICAgKiAgICogYE1gOiBjb21tZW50XG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgZGlyZWN0aXZlIHdhcyBhZGRlZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZGREaXJlY3RpdmUodERpcmVjdGl2ZXMsIG5hbWUsIGxvY2F0aW9uLCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlLCBzdGFydEF0dHJOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRBdHRyTmFtZSkge1xuICAgICAgaWYgKG5hbWUgPT09IGlnbm9yZURpcmVjdGl2ZSkgcmV0dXJuIG51bGw7XG4gICAgICB2YXIgbWF0Y2ggPSBudWxsO1xuICAgICAgaWYgKGhhc0RpcmVjdGl2ZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgZm9yICh2YXIgZGlyZWN0aXZlLCBkaXJlY3RpdmVzID0gJGluamVjdG9yLmdldChuYW1lICsgU3VmZml4KSxcbiAgICAgICAgICAgIGkgPSAwLCBpaSA9IGRpcmVjdGl2ZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBkaXJlY3RpdmUgPSBkaXJlY3RpdmVzW2ldO1xuICAgICAgICAgICAgaWYgKChtYXhQcmlvcml0eSA9PT0gdW5kZWZpbmVkIHx8IG1heFByaW9yaXR5ID4gZGlyZWN0aXZlLnByaW9yaXR5KSAmJlxuICAgICAgICAgICAgICAgICBkaXJlY3RpdmUucmVzdHJpY3QuaW5kZXhPZihsb2NhdGlvbikgIT0gLTEpIHtcbiAgICAgICAgICAgICAgaWYgKHN0YXJ0QXR0ck5hbWUpIHtcbiAgICAgICAgICAgICAgICBkaXJlY3RpdmUgPSBpbmhlcml0KGRpcmVjdGl2ZSwgeyQkc3RhcnQ6IHN0YXJ0QXR0ck5hbWUsICQkZW5kOiBlbmRBdHRyTmFtZX0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHREaXJlY3RpdmVzLnB1c2goZGlyZWN0aXZlKTtcbiAgICAgICAgICAgICAgbWF0Y2ggPSBkaXJlY3RpdmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZSkgeyAkZXhjZXB0aW9uSGFuZGxlcihlKTsgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBsb29rcyB1cCB0aGUgZGlyZWN0aXZlIGFuZCByZXR1cm5zIHRydWUgaWYgaXQgaXMgYSBtdWx0aS1lbGVtZW50IGRpcmVjdGl2ZSxcbiAgICAgKiBhbmQgdGhlcmVmb3JlIHJlcXVpcmVzIERPTSBub2RlcyBiZXR3ZWVuIC1zdGFydCBhbmQgLWVuZCBtYXJrZXJzIHRvIGJlIGdyb3VwZWRcbiAgICAgKiB0b2dldGhlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIG5hbWUgb2YgdGhlIGRpcmVjdGl2ZSB0byBsb29rIHVwLlxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgZGlyZWN0aXZlIHdhcyByZWdpc3RlcmVkIGFzIG11bHRpLWVsZW1lbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGlyZWN0aXZlSXNNdWx0aUVsZW1lbnQobmFtZSkge1xuICAgICAgaWYgKGhhc0RpcmVjdGl2ZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgZm9yICh2YXIgZGlyZWN0aXZlLCBkaXJlY3RpdmVzID0gJGluamVjdG9yLmdldChuYW1lICsgU3VmZml4KSxcbiAgICAgICAgICAgIGkgPSAwLCBpaSA9IGRpcmVjdGl2ZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgIGRpcmVjdGl2ZSA9IGRpcmVjdGl2ZXNbaV07XG4gICAgICAgICAgaWYgKGRpcmVjdGl2ZS5tdWx0aUVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdoZW4gdGhlIGVsZW1lbnQgaXMgcmVwbGFjZWQgd2l0aCBIVE1MIHRlbXBsYXRlIHRoZW4gdGhlIG5ldyBhdHRyaWJ1dGVzXG4gICAgICogb24gdGhlIHRlbXBsYXRlIG5lZWQgdG8gYmUgbWVyZ2VkIHdpdGggdGhlIGV4aXN0aW5nIGF0dHJpYnV0ZXMgaW4gdGhlIERPTS5cbiAgICAgKiBUaGUgZGVzaXJlZCBlZmZlY3QgaXMgdG8gaGF2ZSBib3RoIG9mIHRoZSBhdHRyaWJ1dGVzIHByZXNlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZHN0IGRlc3RpbmF0aW9uIGF0dHJpYnV0ZXMgKG9yaWdpbmFsIERPTSlcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gc3JjIHNvdXJjZSBhdHRyaWJ1dGVzIChmcm9tIHRoZSBkaXJlY3RpdmUgdGVtcGxhdGUpXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVyZ2VUZW1wbGF0ZUF0dHJpYnV0ZXMoZHN0LCBzcmMpIHtcbiAgICAgIHZhciBzcmNBdHRyID0gc3JjLiRhdHRyLFxuICAgICAgICAgIGRzdEF0dHIgPSBkc3QuJGF0dHIsXG4gICAgICAgICAgJGVsZW1lbnQgPSBkc3QuJCRlbGVtZW50O1xuXG4gICAgICAvLyByZWFwcGx5IHRoZSBvbGQgYXR0cmlidXRlcyB0byB0aGUgbmV3IGVsZW1lbnRcbiAgICAgIGZvckVhY2goZHN0LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIGlmIChrZXkuY2hhckF0KDApICE9ICckJykge1xuICAgICAgICAgIGlmIChzcmNba2V5XSAmJiBzcmNba2V5XSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHZhbHVlICs9IChrZXkgPT09ICdzdHlsZScgPyAnOycgOiAnICcpICsgc3JjW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICAgIGRzdC4kc2V0KGtleSwgdmFsdWUsIHRydWUsIHNyY0F0dHJba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBjb3B5IHRoZSBuZXcgYXR0cmlidXRlcyBvbiB0aGUgb2xkIGF0dHJzIG9iamVjdFxuICAgICAgZm9yRWFjaChzcmMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKGtleSA9PSAnY2xhc3MnKSB7XG4gICAgICAgICAgc2FmZUFkZENsYXNzKCRlbGVtZW50LCB2YWx1ZSk7XG4gICAgICAgICAgZHN0WydjbGFzcyddID0gKGRzdFsnY2xhc3MnXSA/IGRzdFsnY2xhc3MnXSArICcgJyA6ICcnKSArIHZhbHVlO1xuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PSAnc3R5bGUnKSB7XG4gICAgICAgICAgJGVsZW1lbnQuYXR0cignc3R5bGUnLCAkZWxlbWVudC5hdHRyKCdzdHlsZScpICsgJzsnICsgdmFsdWUpO1xuICAgICAgICAgIGRzdFsnc3R5bGUnXSA9IChkc3RbJ3N0eWxlJ10gPyBkc3RbJ3N0eWxlJ10gKyAnOycgOiAnJykgKyB2YWx1ZTtcbiAgICAgICAgICAvLyBgZHN0YCB3aWxsIG5ldmVyIGNvbnRhaW4gaGFzT3duUHJvcGVydHkgYXMgRE9NIHBhcnNlciB3b24ndCBsZXQgaXQuXG4gICAgICAgICAgLy8gWW91IHdpbGwgZ2V0IGFuIFwiSW52YWxpZENoYXJhY3RlckVycm9yOiBET00gRXhjZXB0aW9uIDVcIiBlcnJvciBpZiB5b3VcbiAgICAgICAgICAvLyBoYXZlIGFuIGF0dHJpYnV0ZSBsaWtlIFwiaGFzLW93bi1wcm9wZXJ0eVwiIG9yIFwiZGF0YS1oYXMtb3duLXByb3BlcnR5XCIsIGV0Yy5cbiAgICAgICAgfSBlbHNlIGlmIChrZXkuY2hhckF0KDApICE9ICckJyAmJiAhZHN0Lmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICBkc3Rba2V5XSA9IHZhbHVlO1xuICAgICAgICAgIGRzdEF0dHJba2V5XSA9IHNyY0F0dHJba2V5XTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBjb21waWxlVGVtcGxhdGVVcmwoZGlyZWN0aXZlcywgJGNvbXBpbGVOb2RlLCB0QXR0cnMsXG4gICAgICAgICRyb290RWxlbWVudCwgY2hpbGRUcmFuc2NsdWRlRm4sIHByZUxpbmtGbnMsIHBvc3RMaW5rRm5zLCBwcmV2aW91c0NvbXBpbGVDb250ZXh0KSB7XG4gICAgICB2YXIgbGlua1F1ZXVlID0gW10sXG4gICAgICAgICAgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4sXG4gICAgICAgICAgYWZ0ZXJUZW1wbGF0ZUNoaWxkTGlua0ZuLFxuICAgICAgICAgIGJlZm9yZVRlbXBsYXRlQ29tcGlsZU5vZGUgPSAkY29tcGlsZU5vZGVbMF0sXG4gICAgICAgICAgb3JpZ0FzeW5jRGlyZWN0aXZlID0gZGlyZWN0aXZlcy5zaGlmdCgpLFxuICAgICAgICAgIGRlcml2ZWRTeW5jRGlyZWN0aXZlID0gaW5oZXJpdChvcmlnQXN5bmNEaXJlY3RpdmUsIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBudWxsLCB0cmFuc2NsdWRlOiBudWxsLCByZXBsYWNlOiBudWxsLCAkJG9yaWdpbmFsRGlyZWN0aXZlOiBvcmlnQXN5bmNEaXJlY3RpdmVcbiAgICAgICAgICB9KSxcbiAgICAgICAgICB0ZW1wbGF0ZVVybCA9IChpc0Z1bmN0aW9uKG9yaWdBc3luY0RpcmVjdGl2ZS50ZW1wbGF0ZVVybCkpXG4gICAgICAgICAgICAgID8gb3JpZ0FzeW5jRGlyZWN0aXZlLnRlbXBsYXRlVXJsKCRjb21waWxlTm9kZSwgdEF0dHJzKVxuICAgICAgICAgICAgICA6IG9yaWdBc3luY0RpcmVjdGl2ZS50ZW1wbGF0ZVVybCxcbiAgICAgICAgICB0ZW1wbGF0ZU5hbWVzcGFjZSA9IG9yaWdBc3luY0RpcmVjdGl2ZS50ZW1wbGF0ZU5hbWVzcGFjZTtcblxuICAgICAgJGNvbXBpbGVOb2RlLmVtcHR5KCk7XG5cbiAgICAgICR0ZW1wbGF0ZVJlcXVlc3QoJHNjZS5nZXRUcnVzdGVkUmVzb3VyY2VVcmwodGVtcGxhdGVVcmwpKVxuICAgICAgICAudGhlbihmdW5jdGlvbihjb250ZW50KSB7XG4gICAgICAgICAgdmFyIGNvbXBpbGVOb2RlLCB0ZW1wVGVtcGxhdGVBdHRycywgJHRlbXBsYXRlLCBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuO1xuXG4gICAgICAgICAgY29udGVudCA9IGRlbm9ybWFsaXplVGVtcGxhdGUoY29udGVudCk7XG5cbiAgICAgICAgICBpZiAob3JpZ0FzeW5jRGlyZWN0aXZlLnJlcGxhY2UpIHtcbiAgICAgICAgICAgIGlmIChqcUxpdGVJc1RleHROb2RlKGNvbnRlbnQpKSB7XG4gICAgICAgICAgICAgICR0ZW1wbGF0ZSA9IFtdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgJHRlbXBsYXRlID0gcmVtb3ZlQ29tbWVudHMod3JhcFRlbXBsYXRlKHRlbXBsYXRlTmFtZXNwYWNlLCB0cmltKGNvbnRlbnQpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb21waWxlTm9kZSA9ICR0ZW1wbGF0ZVswXTtcblxuICAgICAgICAgICAgaWYgKCR0ZW1wbGF0ZS5sZW5ndGggIT0gMSB8fCBjb21waWxlTm9kZS5ub2RlVHlwZSAhPT0gTk9ERV9UWVBFX0VMRU1FTlQpIHtcbiAgICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ3RwbHJ0JyxcbiAgICAgICAgICAgICAgICAgIFwiVGVtcGxhdGUgZm9yIGRpcmVjdGl2ZSAnezB9JyBtdXN0IGhhdmUgZXhhY3RseSBvbmUgcm9vdCBlbGVtZW50LiB7MX1cIixcbiAgICAgICAgICAgICAgICAgIG9yaWdBc3luY0RpcmVjdGl2ZS5uYW1lLCB0ZW1wbGF0ZVVybCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRlbXBUZW1wbGF0ZUF0dHJzID0geyRhdHRyOiB7fX07XG4gICAgICAgICAgICByZXBsYWNlV2l0aCgkcm9vdEVsZW1lbnQsICRjb21waWxlTm9kZSwgY29tcGlsZU5vZGUpO1xuICAgICAgICAgICAgdmFyIHRlbXBsYXRlRGlyZWN0aXZlcyA9IGNvbGxlY3REaXJlY3RpdmVzKGNvbXBpbGVOb2RlLCBbXSwgdGVtcFRlbXBsYXRlQXR0cnMpO1xuXG4gICAgICAgICAgICBpZiAoaXNPYmplY3Qob3JpZ0FzeW5jRGlyZWN0aXZlLnNjb3BlKSkge1xuICAgICAgICAgICAgICBtYXJrRGlyZWN0aXZlc0FzSXNvbGF0ZSh0ZW1wbGF0ZURpcmVjdGl2ZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGlyZWN0aXZlcyA9IHRlbXBsYXRlRGlyZWN0aXZlcy5jb25jYXQoZGlyZWN0aXZlcyk7XG4gICAgICAgICAgICBtZXJnZVRlbXBsYXRlQXR0cmlidXRlcyh0QXR0cnMsIHRlbXBUZW1wbGF0ZUF0dHJzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29tcGlsZU5vZGUgPSBiZWZvcmVUZW1wbGF0ZUNvbXBpbGVOb2RlO1xuICAgICAgICAgICAgJGNvbXBpbGVOb2RlLmh0bWwoY29udGVudCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGlyZWN0aXZlcy51bnNoaWZ0KGRlcml2ZWRTeW5jRGlyZWN0aXZlKTtcblxuICAgICAgICAgIGFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuID0gYXBwbHlEaXJlY3RpdmVzVG9Ob2RlKGRpcmVjdGl2ZXMsIGNvbXBpbGVOb2RlLCB0QXR0cnMsXG4gICAgICAgICAgICAgIGNoaWxkVHJhbnNjbHVkZUZuLCAkY29tcGlsZU5vZGUsIG9yaWdBc3luY0RpcmVjdGl2ZSwgcHJlTGlua0ZucywgcG9zdExpbmtGbnMsXG4gICAgICAgICAgICAgIHByZXZpb3VzQ29tcGlsZUNvbnRleHQpO1xuICAgICAgICAgIGZvckVhY2goJHJvb3RFbGVtZW50LCBmdW5jdGlvbihub2RlLCBpKSB7XG4gICAgICAgICAgICBpZiAobm9kZSA9PSBjb21waWxlTm9kZSkge1xuICAgICAgICAgICAgICAkcm9vdEVsZW1lbnRbaV0gPSAkY29tcGlsZU5vZGVbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYWZ0ZXJUZW1wbGF0ZUNoaWxkTGlua0ZuID0gY29tcGlsZU5vZGVzKCRjb21waWxlTm9kZVswXS5jaGlsZE5vZGVzLCBjaGlsZFRyYW5zY2x1ZGVGbik7XG5cbiAgICAgICAgICB3aGlsZSAobGlua1F1ZXVlLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIHNjb3BlID0gbGlua1F1ZXVlLnNoaWZ0KCksXG4gICAgICAgICAgICAgICAgYmVmb3JlVGVtcGxhdGVMaW5rTm9kZSA9IGxpbmtRdWV1ZS5zaGlmdCgpLFxuICAgICAgICAgICAgICAgIGxpbmtSb290RWxlbWVudCA9IGxpbmtRdWV1ZS5zaGlmdCgpLFxuICAgICAgICAgICAgICAgIGJvdW5kVHJhbnNjbHVkZUZuID0gbGlua1F1ZXVlLnNoaWZ0KCksXG4gICAgICAgICAgICAgICAgbGlua05vZGUgPSAkY29tcGlsZU5vZGVbMF07XG5cbiAgICAgICAgICAgIGlmIChzY29wZS4kJGRlc3Ryb3llZCkgY29udGludWU7XG5cbiAgICAgICAgICAgIGlmIChiZWZvcmVUZW1wbGF0ZUxpbmtOb2RlICE9PSBiZWZvcmVUZW1wbGF0ZUNvbXBpbGVOb2RlKSB7XG4gICAgICAgICAgICAgIHZhciBvbGRDbGFzc2VzID0gYmVmb3JlVGVtcGxhdGVMaW5rTm9kZS5jbGFzc05hbWU7XG5cbiAgICAgICAgICAgICAgaWYgKCEocHJldmlvdXNDb21waWxlQ29udGV4dC5oYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSAmJlxuICAgICAgICAgICAgICAgICAgb3JpZ0FzeW5jRGlyZWN0aXZlLnJlcGxhY2UpKSB7XG4gICAgICAgICAgICAgICAgLy8gaXQgd2FzIGNsb25lZCB0aGVyZWZvcmUgd2UgaGF2ZSB0byBjbG9uZSBhcyB3ZWxsLlxuICAgICAgICAgICAgICAgIGxpbmtOb2RlID0ganFMaXRlQ2xvbmUoY29tcGlsZU5vZGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJlcGxhY2VXaXRoKGxpbmtSb290RWxlbWVudCwganFMaXRlKGJlZm9yZVRlbXBsYXRlTGlua05vZGUpLCBsaW5rTm9kZSk7XG5cbiAgICAgICAgICAgICAgLy8gQ29weSBpbiBDU1MgY2xhc3NlcyBmcm9tIG9yaWdpbmFsIG5vZGVcbiAgICAgICAgICAgICAgc2FmZUFkZENsYXNzKGpxTGl0ZShsaW5rTm9kZSksIG9sZENsYXNzZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuLnRyYW5zY2x1ZGVPblRoaXNFbGVtZW50KSB7XG4gICAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBjcmVhdGVCb3VuZFRyYW5zY2x1ZGVGbihzY29wZSwgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4udHJhbnNjbHVkZSwgYm91bmRUcmFuc2NsdWRlRm4pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbiA9IGJvdW5kVHJhbnNjbHVkZUZuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4oYWZ0ZXJUZW1wbGF0ZUNoaWxkTGlua0ZuLCBzY29wZSwgbGlua05vZGUsICRyb290RWxlbWVudCxcbiAgICAgICAgICAgICAgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxpbmtRdWV1ZSA9IG51bGw7XG4gICAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gZGVsYXllZE5vZGVMaW5rRm4oaWdub3JlQ2hpbGRMaW5rRm4sIHNjb3BlLCBub2RlLCByb290RWxlbWVudCwgYm91bmRUcmFuc2NsdWRlRm4pIHtcbiAgICAgICAgdmFyIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBib3VuZFRyYW5zY2x1ZGVGbjtcbiAgICAgICAgaWYgKHNjb3BlLiQkZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgIGlmIChsaW5rUXVldWUpIHtcbiAgICAgICAgICBsaW5rUXVldWUucHVzaChzY29wZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3RFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChhZnRlclRlbXBsYXRlTm9kZUxpbmtGbi50cmFuc2NsdWRlT25UaGlzRWxlbWVudCkge1xuICAgICAgICAgICAgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbiA9IGNyZWF0ZUJvdW5kVHJhbnNjbHVkZUZuKHNjb3BlLCBhZnRlclRlbXBsYXRlTm9kZUxpbmtGbi50cmFuc2NsdWRlLCBib3VuZFRyYW5zY2x1ZGVGbik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuKGFmdGVyVGVtcGxhdGVDaGlsZExpbmtGbiwgc2NvcGUsIG5vZGUsIHJvb3RFbGVtZW50LCBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIFNvcnRpbmcgZnVuY3Rpb24gZm9yIGJvdW5kIGRpcmVjdGl2ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYnlQcmlvcml0eShhLCBiKSB7XG4gICAgICB2YXIgZGlmZiA9IGIucHJpb3JpdHkgLSBhLnByaW9yaXR5O1xuICAgICAgaWYgKGRpZmYgIT09IDApIHJldHVybiBkaWZmO1xuICAgICAgaWYgKGEubmFtZSAhPT0gYi5uYW1lKSByZXR1cm4gKGEubmFtZSA8IGIubmFtZSkgPyAtMSA6IDE7XG4gICAgICByZXR1cm4gYS5pbmRleCAtIGIuaW5kZXg7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBhc3NlcnROb0R1cGxpY2F0ZSh3aGF0LCBwcmV2aW91c0RpcmVjdGl2ZSwgZGlyZWN0aXZlLCBlbGVtZW50KSB7XG4gICAgICBpZiAocHJldmlvdXNEaXJlY3RpdmUpIHtcbiAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ211bHRpZGlyJywgJ011bHRpcGxlIGRpcmVjdGl2ZXMgW3swfSwgezF9XSBhc2tpbmcgZm9yIHsyfSBvbjogezN9JyxcbiAgICAgICAgICAgIHByZXZpb3VzRGlyZWN0aXZlLm5hbWUsIGRpcmVjdGl2ZS5uYW1lLCB3aGF0LCBzdGFydGluZ1RhZyhlbGVtZW50KSk7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBhZGRUZXh0SW50ZXJwb2xhdGVEaXJlY3RpdmUoZGlyZWN0aXZlcywgdGV4dCkge1xuICAgICAgdmFyIGludGVycG9sYXRlRm4gPSAkaW50ZXJwb2xhdGUodGV4dCwgdHJ1ZSk7XG4gICAgICBpZiAoaW50ZXJwb2xhdGVGbikge1xuICAgICAgICBkaXJlY3RpdmVzLnB1c2goe1xuICAgICAgICAgIHByaW9yaXR5OiAwLFxuICAgICAgICAgIGNvbXBpbGU6IGZ1bmN0aW9uIHRleHRJbnRlcnBvbGF0ZUNvbXBpbGVGbih0ZW1wbGF0ZU5vZGUpIHtcbiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZU5vZGVQYXJlbnQgPSB0ZW1wbGF0ZU5vZGUucGFyZW50KCksXG4gICAgICAgICAgICAgICAgaGFzQ29tcGlsZVBhcmVudCA9ICEhdGVtcGxhdGVOb2RlUGFyZW50Lmxlbmd0aDtcblxuICAgICAgICAgICAgLy8gV2hlbiB0cmFuc2NsdWRpbmcgYSB0ZW1wbGF0ZSB0aGF0IGhhcyBiaW5kaW5ncyBpbiB0aGUgcm9vdFxuICAgICAgICAgICAgLy8gd2UgZG9uJ3QgaGF2ZSBhIHBhcmVudCBhbmQgdGh1cyBuZWVkIHRvIGFkZCB0aGUgY2xhc3MgZHVyaW5nIGxpbmtpbmcgZm4uXG4gICAgICAgICAgICBpZiAoaGFzQ29tcGlsZVBhcmVudCkgY29tcGlsZS4kJGFkZEJpbmRpbmdDbGFzcyh0ZW1wbGF0ZU5vZGVQYXJlbnQpO1xuXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gdGV4dEludGVycG9sYXRlTGlua0ZuKHNjb3BlLCBub2RlKSB7XG4gICAgICAgICAgICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudCgpO1xuICAgICAgICAgICAgICBpZiAoIWhhc0NvbXBpbGVQYXJlbnQpIGNvbXBpbGUuJCRhZGRCaW5kaW5nQ2xhc3MocGFyZW50KTtcbiAgICAgICAgICAgICAgY29tcGlsZS4kJGFkZEJpbmRpbmdJbmZvKHBhcmVudCwgaW50ZXJwb2xhdGVGbi5leHByZXNzaW9ucyk7XG4gICAgICAgICAgICAgIHNjb3BlLiR3YXRjaChpbnRlcnBvbGF0ZUZuLCBmdW5jdGlvbiBpbnRlcnBvbGF0ZUZuV2F0Y2hBY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICBub2RlWzBdLm5vZGVWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIHdyYXBUZW1wbGF0ZSh0eXBlLCB0ZW1wbGF0ZSkge1xuICAgICAgdHlwZSA9IGxvd2VyY2FzZSh0eXBlIHx8ICdodG1sJyk7XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ3N2Zyc6XG4gICAgICBjYXNlICdtYXRoJzpcbiAgICAgICAgdmFyIHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgd3JhcHBlci5pbm5lckhUTUwgPSAnPCcgKyB0eXBlICsgJz4nICsgdGVtcGxhdGUgKyAnPC8nICsgdHlwZSArICc+JztcbiAgICAgICAgcmV0dXJuIHdyYXBwZXIuY2hpbGROb2Rlc1swXS5jaGlsZE5vZGVzO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHRlbXBsYXRlO1xuICAgICAgfVxuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gZ2V0VHJ1c3RlZENvbnRleHQobm9kZSwgYXR0ck5vcm1hbGl6ZWROYW1lKSB7XG4gICAgICBpZiAoYXR0ck5vcm1hbGl6ZWROYW1lID09IFwic3JjZG9jXCIpIHtcbiAgICAgICAgcmV0dXJuICRzY2UuSFRNTDtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBub2RlTmFtZV8obm9kZSk7XG4gICAgICAvLyBtYWN0aW9uW3hsaW5rOmhyZWZdIGNhbiBzb3VyY2UgU1ZHLiAgSXQncyBub3QgbGltaXRlZCB0byA8bWFjdGlvbj4uXG4gICAgICBpZiAoYXR0ck5vcm1hbGl6ZWROYW1lID09IFwieGxpbmtIcmVmXCIgfHxcbiAgICAgICAgICAodGFnID09IFwiZm9ybVwiICYmIGF0dHJOb3JtYWxpemVkTmFtZSA9PSBcImFjdGlvblwiKSB8fFxuICAgICAgICAgICh0YWcgIT0gXCJpbWdcIiAmJiAoYXR0ck5vcm1hbGl6ZWROYW1lID09IFwic3JjXCIgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyTm9ybWFsaXplZE5hbWUgPT0gXCJuZ1NyY1wiKSkpIHtcbiAgICAgICAgcmV0dXJuICRzY2UuUkVTT1VSQ0VfVVJMO1xuICAgICAgfVxuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gYWRkQXR0ckludGVycG9sYXRlRGlyZWN0aXZlKG5vZGUsIGRpcmVjdGl2ZXMsIHZhbHVlLCBuYW1lLCBhbGxPck5vdGhpbmcpIHtcbiAgICAgIHZhciB0cnVzdGVkQ29udGV4dCA9IGdldFRydXN0ZWRDb250ZXh0KG5vZGUsIG5hbWUpO1xuICAgICAgYWxsT3JOb3RoaW5nID0gQUxMX09SX05PVEhJTkdfQVRUUlNbbmFtZV0gfHwgYWxsT3JOb3RoaW5nO1xuXG4gICAgICB2YXIgaW50ZXJwb2xhdGVGbiA9ICRpbnRlcnBvbGF0ZSh2YWx1ZSwgdHJ1ZSwgdHJ1c3RlZENvbnRleHQsIGFsbE9yTm90aGluZyk7XG5cbiAgICAgIC8vIG5vIGludGVycG9sYXRpb24gZm91bmQgLT4gaWdub3JlXG4gICAgICBpZiAoIWludGVycG9sYXRlRm4pIHJldHVybjtcblxuXG4gICAgICBpZiAobmFtZSA9PT0gXCJtdWx0aXBsZVwiICYmIG5vZGVOYW1lXyhub2RlKSA9PT0gXCJzZWxlY3RcIikge1xuICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycihcInNlbG11bHRpXCIsXG4gICAgICAgICAgICBcIkJpbmRpbmcgdG8gdGhlICdtdWx0aXBsZScgYXR0cmlidXRlIGlzIG5vdCBzdXBwb3J0ZWQuIEVsZW1lbnQ6IHswfVwiLFxuICAgICAgICAgICAgc3RhcnRpbmdUYWcobm9kZSkpO1xuICAgICAgfVxuXG4gICAgICBkaXJlY3RpdmVzLnB1c2goe1xuICAgICAgICBwcmlvcml0eTogMTAwLFxuICAgICAgICBjb21waWxlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHByZTogZnVuY3Rpb24gYXR0ckludGVycG9sYXRlUHJlTGlua0ZuKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgICAgICAgICAgdmFyICQkb2JzZXJ2ZXJzID0gKGF0dHIuJCRvYnNlcnZlcnMgfHwgKGF0dHIuJCRvYnNlcnZlcnMgPSB7fSkpO1xuXG4gICAgICAgICAgICAgICAgaWYgKEVWRU5UX0hBTkRMRVJfQVRUUl9SRUdFWFAudGVzdChuYW1lKSkge1xuICAgICAgICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ25vZG9tZXZlbnRzJyxcbiAgICAgICAgICAgICAgICAgICAgICBcIkludGVycG9sYXRpb25zIGZvciBIVE1MIERPTSBldmVudCBhdHRyaWJ1dGVzIGFyZSBkaXNhbGxvd2VkLiAgUGxlYXNlIHVzZSB0aGUgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5nLSB2ZXJzaW9ucyAoc3VjaCBhcyBuZy1jbGljayBpbnN0ZWFkIG9mIG9uY2xpY2spIGluc3RlYWQuXCIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBhdHRyaWJ1dGUgaGFzIGNoYW5nZWQgc2luY2UgbGFzdCAkaW50ZXJwb2xhdGUoKWVkXG4gICAgICAgICAgICAgICAgdmFyIG5ld1ZhbHVlID0gYXR0cltuYW1lXTtcbiAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIGludGVycG9sYXRlIGFnYWluIHNpbmNlIHRoZSBhdHRyaWJ1dGUgdmFsdWUgaGFzIGJlZW4gdXBkYXRlZFxuICAgICAgICAgICAgICAgICAgLy8gKGUuZy4gYnkgYW5vdGhlciBkaXJlY3RpdmUncyBjb21waWxlIGZ1bmN0aW9uKVxuICAgICAgICAgICAgICAgICAgLy8gZW5zdXJlIHVuc2V0L2VtcHR5IHZhbHVlcyBtYWtlIGludGVycG9sYXRlRm4gZmFsc3lcbiAgICAgICAgICAgICAgICAgIGludGVycG9sYXRlRm4gPSBuZXdWYWx1ZSAmJiAkaW50ZXJwb2xhdGUobmV3VmFsdWUsIHRydWUsIHRydXN0ZWRDb250ZXh0LCBhbGxPck5vdGhpbmcpO1xuICAgICAgICAgICAgICAgICAgdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBpZiBhdHRyaWJ1dGUgd2FzIHVwZGF0ZWQgc28gdGhhdCB0aGVyZSBpcyBubyBpbnRlcnBvbGF0aW9uIGdvaW5nIG9uIHdlIGRvbid0IHdhbnQgdG9cbiAgICAgICAgICAgICAgICAvLyByZWdpc3RlciBhbnkgb2JzZXJ2ZXJzXG4gICAgICAgICAgICAgICAgaWYgKCFpbnRlcnBvbGF0ZUZuKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAvLyBpbml0aWFsaXplIGF0dHIgb2JqZWN0IHNvIHRoYXQgaXQncyByZWFkeSBpbiBjYXNlIHdlIG5lZWQgdGhlIHZhbHVlIGZvciBpc29sYXRlXG4gICAgICAgICAgICAgICAgLy8gc2NvcGUgaW5pdGlhbGl6YXRpb24sIG90aGVyd2lzZSB0aGUgdmFsdWUgd291bGQgbm90IGJlIGF2YWlsYWJsZSBmcm9tIGlzb2xhdGVcbiAgICAgICAgICAgICAgICAvLyBkaXJlY3RpdmUncyBsaW5raW5nIGZuIGR1cmluZyBsaW5raW5nIHBoYXNlXG4gICAgICAgICAgICAgICAgYXR0cltuYW1lXSA9IGludGVycG9sYXRlRm4oc2NvcGUpO1xuXG4gICAgICAgICAgICAgICAgKCQkb2JzZXJ2ZXJzW25hbWVdIHx8ICgkJG9ic2VydmVyc1tuYW1lXSA9IFtdKSkuJCRpbnRlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgKGF0dHIuJCRvYnNlcnZlcnMgJiYgYXR0ci4kJG9ic2VydmVyc1tuYW1lXS4kJHNjb3BlIHx8IHNjb3BlKS5cbiAgICAgICAgICAgICAgICAgICR3YXRjaChpbnRlcnBvbGF0ZUZuLCBmdW5jdGlvbiBpbnRlcnBvbGF0ZUZuV2F0Y2hBY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vc3BlY2lhbCBjYXNlIGZvciBjbGFzcyBhdHRyaWJ1dGUgYWRkaXRpb24gKyByZW1vdmFsXG4gICAgICAgICAgICAgICAgICAgIC8vc28gdGhhdCBjbGFzcyBjaGFuZ2VzIGNhbiB0YXAgaW50byB0aGUgYW5pbWF0aW9uXG4gICAgICAgICAgICAgICAgICAgIC8vaG9va3MgcHJvdmlkZWQgYnkgdGhlICRhbmltYXRlIHNlcnZpY2UuIEJlIHN1cmUgdG9cbiAgICAgICAgICAgICAgICAgICAgLy9za2lwIGFuaW1hdGlvbnMgd2hlbiB0aGUgZmlyc3QgZGlnZXN0IG9jY3VycyAod2hlblxuICAgICAgICAgICAgICAgICAgICAvL2JvdGggdGhlIG5ldyBhbmQgdGhlIG9sZCB2YWx1ZXMgYXJlIHRoZSBzYW1lKSBzaW5jZVxuICAgICAgICAgICAgICAgICAgICAvL3RoZSBDU1MgY2xhc3NlcyBhcmUgdGhlIG5vbi1pbnRlcnBvbGF0ZWQgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgIGlmIChuYW1lID09PSAnY2xhc3MnICYmIG5ld1ZhbHVlICE9IG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgYXR0ci4kdXBkYXRlQ2xhc3MobmV3VmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBhdHRyLiRzZXQobmFtZSwgbmV3VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIFRoaXMgaXMgYSBzcGVjaWFsIGpxTGl0ZS5yZXBsYWNlV2l0aCwgd2hpY2ggY2FuIHJlcGxhY2UgaXRlbXMgd2hpY2hcbiAgICAgKiBoYXZlIG5vIHBhcmVudHMsIHByb3ZpZGVkIHRoYXQgdGhlIGNvbnRhaW5pbmcganFMaXRlIGNvbGxlY3Rpb24gaXMgcHJvdmlkZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0pxTGl0ZT19ICRyb290RWxlbWVudCBUaGUgcm9vdCBvZiB0aGUgY29tcGlsZSB0cmVlLiBVc2VkIHNvIHRoYXQgd2UgY2FuIHJlcGxhY2Ugbm9kZXNcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgcm9vdCBvZiB0aGUgdHJlZS5cbiAgICAgKiBAcGFyYW0ge0pxTGl0ZX0gZWxlbWVudHNUb1JlbW92ZSBUaGUganFMaXRlIGVsZW1lbnQgd2hpY2ggd2UgYXJlIGdvaW5nIHRvIHJlcGxhY2UuIFdlIGtlZXBcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgc2hlbGwsIGJ1dCByZXBsYWNlIGl0cyBET00gbm9kZSByZWZlcmVuY2UuXG4gICAgICogQHBhcmFtIHtOb2RlfSBuZXdOb2RlIFRoZSBuZXcgRE9NIG5vZGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVwbGFjZVdpdGgoJHJvb3RFbGVtZW50LCBlbGVtZW50c1RvUmVtb3ZlLCBuZXdOb2RlKSB7XG4gICAgICB2YXIgZmlyc3RFbGVtZW50VG9SZW1vdmUgPSBlbGVtZW50c1RvUmVtb3ZlWzBdLFxuICAgICAgICAgIHJlbW92ZUNvdW50ID0gZWxlbWVudHNUb1JlbW92ZS5sZW5ndGgsXG4gICAgICAgICAgcGFyZW50ID0gZmlyc3RFbGVtZW50VG9SZW1vdmUucGFyZW50Tm9kZSxcbiAgICAgICAgICBpLCBpaTtcblxuICAgICAgaWYgKCRyb290RWxlbWVudCkge1xuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9ICRyb290RWxlbWVudC5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgaWYgKCRyb290RWxlbWVudFtpXSA9PSBmaXJzdEVsZW1lbnRUb1JlbW92ZSkge1xuICAgICAgICAgICAgJHJvb3RFbGVtZW50W2krK10gPSBuZXdOb2RlO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IGksIGoyID0gaiArIHJlbW92ZUNvdW50IC0gMSxcbiAgICAgICAgICAgICAgICAgICAgIGpqID0gJHJvb3RFbGVtZW50Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgaiA8IGpqOyBqKyssIGoyKyspIHtcbiAgICAgICAgICAgICAgaWYgKGoyIDwgamopIHtcbiAgICAgICAgICAgICAgICAkcm9vdEVsZW1lbnRbal0gPSAkcm9vdEVsZW1lbnRbajJdO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSAkcm9vdEVsZW1lbnRbal07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICRyb290RWxlbWVudC5sZW5ndGggLT0gcmVtb3ZlQ291bnQgLSAxO1xuXG4gICAgICAgICAgICAvLyBJZiB0aGUgcmVwbGFjZWQgZWxlbWVudCBpcyBhbHNvIHRoZSBqUXVlcnkgLmNvbnRleHQgdGhlbiByZXBsYWNlIGl0XG4gICAgICAgICAgICAvLyAuY29udGV4dCBpcyBhIGRlcHJlY2F0ZWQgalF1ZXJ5IGFwaSwgc28gd2Ugc2hvdWxkIHNldCBpdCBvbmx5IHdoZW4galF1ZXJ5IHNldCBpdFxuICAgICAgICAgICAgLy8gaHR0cDovL2FwaS5qcXVlcnkuY29tL2NvbnRleHQvXG4gICAgICAgICAgICBpZiAoJHJvb3RFbGVtZW50LmNvbnRleHQgPT09IGZpcnN0RWxlbWVudFRvUmVtb3ZlKSB7XG4gICAgICAgICAgICAgICRyb290RWxlbWVudC5jb250ZXh0ID0gbmV3Tm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgIHBhcmVudC5yZXBsYWNlQ2hpbGQobmV3Tm9kZSwgZmlyc3RFbGVtZW50VG9SZW1vdmUpO1xuICAgICAgfVxuXG4gICAgICAvLyBUT0RPKHBlcmYpOiB3aGF0J3MgdGhpcyBkb2N1bWVudCBmcmFnbWVudCBmb3I/IGlzIGl0IG5lZWRlZD8gY2FuIHdlIGF0IGxlYXN0IHJldXNlIGl0P1xuICAgICAgdmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoZmlyc3RFbGVtZW50VG9SZW1vdmUpO1xuXG4gICAgICAvLyBDb3B5IG92ZXIgdXNlciBkYXRhICh0aGF0IGluY2x1ZGVzIEFuZ3VsYXIncyAkc2NvcGUgZXRjLikuIERvbid0IGNvcHkgcHJpdmF0ZVxuICAgICAgLy8gZGF0YSBoZXJlIGJlY2F1c2UgdGhlcmUncyBubyBwdWJsaWMgaW50ZXJmYWNlIGluIGpRdWVyeSB0byBkbyB0aGF0IGFuZCBjb3B5aW5nIG92ZXJcbiAgICAgIC8vIGV2ZW50IGxpc3RlbmVycyAod2hpY2ggaXMgdGhlIG1haW4gdXNlIG9mIHByaXZhdGUgZGF0YSkgd291bGRuJ3Qgd29yayBhbnl3YXkuXG4gICAgICBqcUxpdGUobmV3Tm9kZSkuZGF0YShqcUxpdGUoZmlyc3RFbGVtZW50VG9SZW1vdmUpLmRhdGEoKSk7XG5cbiAgICAgIC8vIFJlbW92ZSBkYXRhIG9mIHRoZSByZXBsYWNlZCBlbGVtZW50LiBXZSBjYW5ub3QganVzdCBjYWxsIC5yZW1vdmUoKVxuICAgICAgLy8gb24gdGhlIGVsZW1lbnQgaXQgc2luY2UgdGhhdCB3b3VsZCBkZWFsbG9jYXRlIHNjb3BlIHRoYXQgaXMgbmVlZGVkXG4gICAgICAvLyBmb3IgdGhlIG5ldyBub2RlLiBJbnN0ZWFkLCByZW1vdmUgdGhlIGRhdGEgXCJtYW51YWxseVwiLlxuICAgICAgaWYgKCFqUXVlcnkpIHtcbiAgICAgICAgZGVsZXRlIGpxTGl0ZS5jYWNoZVtmaXJzdEVsZW1lbnRUb1JlbW92ZVtqcUxpdGUuZXhwYW5kb11dO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8galF1ZXJ5IDIueCBkb2Vzbid0IGV4cG9zZSB0aGUgZGF0YSBzdG9yYWdlLiBVc2UgalF1ZXJ5LmNsZWFuRGF0YSB0byBjbGVhbiB1cCBhZnRlclxuICAgICAgICAvLyB0aGUgcmVwbGFjZWQgZWxlbWVudC4gVGhlIGNsZWFuRGF0YSB2ZXJzaW9uIG1vbmtleS1wYXRjaGVkIGJ5IEFuZ3VsYXIgd291bGQgY2F1c2VcbiAgICAgICAgLy8gdGhlIHNjb3BlIHRvIGJlIHRyYXNoZWQgYW5kIHdlIGRvIG5lZWQgdGhlIHZlcnkgc2FtZSBzY29wZSB0byB3b3JrIHdpdGggdGhlIG5ld1xuICAgICAgICAvLyBlbGVtZW50LiBIb3dldmVyLCB3ZSBjYW5ub3QganVzdCBjYWNoZSB0aGUgbm9uLXBhdGNoZWQgdmVyc2lvbiBhbmQgdXNlIGl0IGhlcmUgYXNcbiAgICAgICAgLy8gdGhhdCB3b3VsZCBicmVhayBpZiBhbm90aGVyIGxpYnJhcnkgcGF0Y2hlcyB0aGUgbWV0aG9kIGFmdGVyIEFuZ3VsYXIgZG9lcyAob25lXG4gICAgICAgIC8vIGV4YW1wbGUgaXMgalF1ZXJ5IFVJKS4gSW5zdGVhZCwgc2V0IGEgZmxhZyBpbmRpY2F0aW5nIHNjb3BlIGRlc3Ryb3lpbmcgc2hvdWxkIGJlXG4gICAgICAgIC8vIHNraXBwZWQgdGhpcyBvbmUgdGltZS5cbiAgICAgICAgc2tpcERlc3Ryb3lPbk5leHRKUXVlcnlDbGVhbkRhdGEgPSB0cnVlO1xuICAgICAgICBqUXVlcnkuY2xlYW5EYXRhKFtmaXJzdEVsZW1lbnRUb1JlbW92ZV0pO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBrID0gMSwga2sgPSBlbGVtZW50c1RvUmVtb3ZlLmxlbmd0aDsgayA8IGtrOyBrKyspIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBlbGVtZW50c1RvUmVtb3ZlW2tdO1xuICAgICAgICBqcUxpdGUoZWxlbWVudCkucmVtb3ZlKCk7IC8vIG11c3QgZG8gdGhpcyB3YXkgdG8gY2xlYW4gdXAgZXhwYW5kb1xuICAgICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgICAgICAgZGVsZXRlIGVsZW1lbnRzVG9SZW1vdmVba107XG4gICAgICB9XG5cbiAgICAgIGVsZW1lbnRzVG9SZW1vdmVbMF0gPSBuZXdOb2RlO1xuICAgICAgZWxlbWVudHNUb1JlbW92ZS5sZW5ndGggPSAxO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gY2xvbmVBbmRBbm5vdGF0ZUZuKGZuLCBhbm5vdGF0aW9uKSB7XG4gICAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uKCkgeyByZXR1cm4gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTsgfSwgZm4sIGFubm90YXRpb24pO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gaW52b2tlTGlua0ZuKGxpbmtGbiwgc2NvcGUsICRlbGVtZW50LCBhdHRycywgY29udHJvbGxlcnMsIHRyYW5zY2x1ZGVGbikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGlua0ZuKHNjb3BlLCAkZWxlbWVudCwgYXR0cnMsIGNvbnRyb2xsZXJzLCB0cmFuc2NsdWRlRm4pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlLCBzdGFydGluZ1RhZygkZWxlbWVudCkpO1xuICAgICAgfVxuICAgIH1cbiAgfV07XG59XG5cbnZhciBQUkVGSVhfUkVHRVhQID0gL14oKD86eHxkYXRhKVtcXDpcXC1fXSkvaTtcbi8qKlxuICogQ29udmVydHMgYWxsIGFjY2VwdGVkIGRpcmVjdGl2ZXMgZm9ybWF0IGludG8gcHJvcGVyIGRpcmVjdGl2ZSBuYW1lLlxuICogQHBhcmFtIG5hbWUgTmFtZSB0byBub3JtYWxpemVcbiAqL1xuZnVuY3Rpb24gZGlyZWN0aXZlTm9ybWFsaXplKG5hbWUpIHtcbiAgcmV0dXJuIGNhbWVsQ2FzZShuYW1lLnJlcGxhY2UoUFJFRklYX1JFR0VYUCwgJycpKTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgdHlwZVxuICogQG5hbWUgJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgc2hhcmVkIG9iamVjdCBiZXR3ZWVuIGRpcmVjdGl2ZSBjb21waWxlIC8gbGlua2luZyBmdW5jdGlvbnMgd2hpY2ggY29udGFpbnMgbm9ybWFsaXplZCBET01cbiAqIGVsZW1lbnQgYXR0cmlidXRlcy4gVGhlIHZhbHVlcyByZWZsZWN0IGN1cnJlbnQgYmluZGluZyBzdGF0ZSBge3sgfX1gLiBUaGUgbm9ybWFsaXphdGlvbiBpc1xuICogbmVlZGVkIHNpbmNlIGFsbCBvZiB0aGVzZSBhcmUgdHJlYXRlZCBhcyBlcXVpdmFsZW50IGluIEFuZ3VsYXI6XG4gKlxuICogYGBgXG4gKiAgICA8c3BhbiBuZzpiaW5kPVwiYVwiIG5nLWJpbmQ9XCJhXCIgZGF0YS1uZy1iaW5kPVwiYVwiIHgtbmctYmluZD1cImFcIj5cbiAqIGBgYFxuICovXG5cbi8qKlxuICogQG5nZG9jIHByb3BlcnR5XG4gKiBAbmFtZSAkY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkYXR0clxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQSBtYXAgb2YgRE9NIGVsZW1lbnQgYXR0cmlidXRlIG5hbWVzIHRvIHRoZSBub3JtYWxpemVkIG5hbWUuIFRoaXMgaXNcbiAqIG5lZWRlZCB0byBkbyByZXZlcnNlIGxvb2t1cCBmcm9tIG5vcm1hbGl6ZWQgbmFtZSBiYWNrIHRvIGFjdHVhbCBuYW1lLlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkc2V0XG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU2V0IERPTSBlbGVtZW50IGF0dHJpYnV0ZSB2YWx1ZS5cbiAqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTm9ybWFsaXplZCBlbGVtZW50IGF0dHJpYnV0ZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byBtb2RpZnkuIFRoZSBuYW1lIGlzXG4gKiAgICAgICAgICByZXZlcnNlLXRyYW5zbGF0ZWQgdXNpbmcgdGhlIHtAbGluayBuZy4kY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkYXR0ciAkYXR0cn1cbiAqICAgICAgICAgIHByb3BlcnR5IHRvIHRoZSBvcmlnaW5hbCBuYW1lLlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIFZhbHVlIHRvIHNldCB0aGUgYXR0cmlidXRlIHRvLiBUaGUgdmFsdWUgY2FuIGJlIGFuIGludGVycG9sYXRlZCBzdHJpbmcuXG4gKi9cblxuXG5cbi8qKlxuICogQ2xvc3VyZSBjb21waWxlciB0eXBlIGluZm9ybWF0aW9uXG4gKi9cblxuZnVuY3Rpb24gbm9kZXNldExpbmtpbmdGbihcbiAgLyogYW5ndWxhci5TY29wZSAqLyBzY29wZSxcbiAgLyogTm9kZUxpc3QgKi8gbm9kZUxpc3QsXG4gIC8qIEVsZW1lbnQgKi8gcm9vdEVsZW1lbnQsXG4gIC8qIGZ1bmN0aW9uKEZ1bmN0aW9uKSAqLyBib3VuZFRyYW5zY2x1ZGVGblxuKSB7fVxuXG5mdW5jdGlvbiBkaXJlY3RpdmVMaW5raW5nRm4oXG4gIC8qIG5vZGVzZXRMaW5raW5nRm4gKi8gbm9kZXNldExpbmtpbmdGbixcbiAgLyogYW5ndWxhci5TY29wZSAqLyBzY29wZSxcbiAgLyogTm9kZSAqLyBub2RlLFxuICAvKiBFbGVtZW50ICovIHJvb3RFbGVtZW50LFxuICAvKiBmdW5jdGlvbihGdW5jdGlvbikgKi8gYm91bmRUcmFuc2NsdWRlRm5cbikge31cblxuZnVuY3Rpb24gdG9rZW5EaWZmZXJlbmNlKHN0cjEsIHN0cjIpIHtcbiAgdmFyIHZhbHVlcyA9ICcnLFxuICAgICAgdG9rZW5zMSA9IHN0cjEuc3BsaXQoL1xccysvKSxcbiAgICAgIHRva2VuczIgPSBzdHIyLnNwbGl0KC9cXHMrLyk7XG5cbiAgb3V0ZXI6XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zMS5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2VuczFbaV07XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCB0b2tlbnMyLmxlbmd0aDsgaisrKSB7XG4gICAgICBpZiAodG9rZW4gPT0gdG9rZW5zMltqXSkgY29udGludWUgb3V0ZXI7XG4gICAgfVxuICAgIHZhbHVlcyArPSAodmFsdWVzLmxlbmd0aCA+IDAgPyAnICcgOiAnJykgKyB0b2tlbjtcbiAgfVxuICByZXR1cm4gdmFsdWVzO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDb21tZW50cyhqcU5vZGVzKSB7XG4gIGpxTm9kZXMgPSBqcUxpdGUoanFOb2Rlcyk7XG4gIHZhciBpID0ganFOb2Rlcy5sZW5ndGg7XG5cbiAgaWYgKGkgPD0gMSkge1xuICAgIHJldHVybiBqcU5vZGVzO1xuICB9XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciBub2RlID0ganFOb2Rlc1tpXTtcbiAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gTk9ERV9UWVBFX0NPTU1FTlQpIHtcbiAgICAgIHNwbGljZS5jYWxsKGpxTm9kZXMsIGksIDEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4ganFOb2Rlcztcbn1cblxudmFyICRjb250cm9sbGVyTWluRXJyID0gbWluRXJyKCckY29udHJvbGxlcicpO1xuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJGNvbnRyb2xsZXJQcm92aWRlclxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUge0BsaW5rIG5nLiRjb250cm9sbGVyICRjb250cm9sbGVyIHNlcnZpY2V9IGlzIHVzZWQgYnkgQW5ndWxhciB0byBjcmVhdGUgbmV3XG4gKiBjb250cm9sbGVycy5cbiAqXG4gKiBUaGlzIHByb3ZpZGVyIGFsbG93cyBjb250cm9sbGVyIHJlZ2lzdHJhdGlvbiB2aWEgdGhlXG4gKiB7QGxpbmsgbmcuJGNvbnRyb2xsZXJQcm92aWRlciNyZWdpc3RlciByZWdpc3Rlcn0gbWV0aG9kLlxuICovXG5mdW5jdGlvbiAkQ29udHJvbGxlclByb3ZpZGVyKCkge1xuICB2YXIgY29udHJvbGxlcnMgPSB7fSxcbiAgICAgIGdsb2JhbHMgPSBmYWxzZSxcbiAgICAgIENOVFJMX1JFRyA9IC9eKFxcUyspKFxccythc1xccysoXFx3KykpPyQvO1xuXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGNvbnRyb2xsZXJQcm92aWRlciNyZWdpc3RlclxuICAgKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IG5hbWUgQ29udHJvbGxlciBuYW1lLCBvciBhbiBvYmplY3QgbWFwIG9mIGNvbnRyb2xsZXJzIHdoZXJlIHRoZSBrZXlzIGFyZVxuICAgKiAgICB0aGUgbmFtZXMgYW5kIHRoZSB2YWx1ZXMgYXJlIHRoZSBjb25zdHJ1Y3RvcnMuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb258QXJyYXl9IGNvbnN0cnVjdG9yIENvbnRyb2xsZXIgY29uc3RydWN0b3IgZm4gKG9wdGlvbmFsbHkgZGVjb3JhdGVkIHdpdGggRElcbiAgICogICAgYW5ub3RhdGlvbnMgaW4gdGhlIGFycmF5IG5vdGF0aW9uKS5cbiAgICovXG4gIHRoaXMucmVnaXN0ZXIgPSBmdW5jdGlvbihuYW1lLCBjb25zdHJ1Y3Rvcikge1xuICAgIGFzc2VydE5vdEhhc093blByb3BlcnR5KG5hbWUsICdjb250cm9sbGVyJyk7XG4gICAgaWYgKGlzT2JqZWN0KG5hbWUpKSB7XG4gICAgICBleHRlbmQoY29udHJvbGxlcnMsIG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250cm9sbGVyc1tuYW1lXSA9IGNvbnN0cnVjdG9yO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkY29udHJvbGxlclByb3ZpZGVyI2FsbG93R2xvYmFsc1xuICAgKiBAZGVzY3JpcHRpb24gSWYgY2FsbGVkLCBhbGxvd3MgYCRjb250cm9sbGVyYCB0byBmaW5kIGNvbnRyb2xsZXIgY29uc3RydWN0b3JzIG9uIGB3aW5kb3dgXG4gICAqL1xuICB0aGlzLmFsbG93R2xvYmFscyA9IGZ1bmN0aW9uKCkge1xuICAgIGdsb2JhbHMgPSB0cnVlO1xuICB9O1xuXG5cbiAgdGhpcy4kZ2V0ID0gWyckaW5qZWN0b3InLCAnJHdpbmRvdycsIGZ1bmN0aW9uKCRpbmplY3RvciwgJHdpbmRvdykge1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIHNlcnZpY2VcbiAgICAgKiBAbmFtZSAkY29udHJvbGxlclxuICAgICAqIEByZXF1aXJlcyAkaW5qZWN0b3JcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSBjb25zdHJ1Y3RvciBJZiBjYWxsZWQgd2l0aCBhIGZ1bmN0aW9uIHRoZW4gaXQncyBjb25zaWRlcmVkIHRvIGJlIHRoZVxuICAgICAqICAgIGNvbnRyb2xsZXIgY29uc3RydWN0b3IgZnVuY3Rpb24uIE90aGVyd2lzZSBpdCdzIGNvbnNpZGVyZWQgdG8gYmUgYSBzdHJpbmcgd2hpY2ggaXMgdXNlZFxuICAgICAqICAgIHRvIHJldHJpZXZlIHRoZSBjb250cm9sbGVyIGNvbnN0cnVjdG9yIHVzaW5nIHRoZSBmb2xsb3dpbmcgc3RlcHM6XG4gICAgICpcbiAgICAgKiAgICAqIGNoZWNrIGlmIGEgY29udHJvbGxlciB3aXRoIGdpdmVuIG5hbWUgaXMgcmVnaXN0ZXJlZCB2aWEgYCRjb250cm9sbGVyUHJvdmlkZXJgXG4gICAgICogICAgKiBjaGVjayBpZiBldmFsdWF0aW5nIHRoZSBzdHJpbmcgb24gdGhlIGN1cnJlbnQgc2NvcGUgcmV0dXJucyBhIGNvbnN0cnVjdG9yXG4gICAgICogICAgKiBpZiAkY29udHJvbGxlclByb3ZpZGVyI2FsbG93R2xvYmFscywgY2hlY2sgYHdpbmRvd1tjb25zdHJ1Y3Rvcl1gIG9uIHRoZSBnbG9iYWxcbiAgICAgKiAgICAgIGB3aW5kb3dgIG9iamVjdCAobm90IHJlY29tbWVuZGVkKVxuICAgICAqXG4gICAgICogICAgVGhlIHN0cmluZyBjYW4gdXNlIHRoZSBgY29udHJvbGxlciBhcyBwcm9wZXJ0eWAgc3ludGF4LCB3aGVyZSB0aGUgY29udHJvbGxlciBpbnN0YW5jZSBpcyBwdWJsaXNoZWRcbiAgICAgKiAgICBhcyB0aGUgc3BlY2lmaWVkIHByb3BlcnR5IG9uIHRoZSBgc2NvcGVgOyB0aGUgYHNjb3BlYCBtdXN0IGJlIGluamVjdGVkIGludG8gYGxvY2Fsc2AgcGFyYW0gZm9yIHRoaXNcbiAgICAgKiAgICB0byB3b3JrIGNvcnJlY3RseS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBsb2NhbHMgSW5qZWN0aW9uIGxvY2FscyBmb3IgQ29udHJvbGxlci5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEluc3RhbmNlIG9mIGdpdmVuIGNvbnRyb2xsZXIuXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBgJGNvbnRyb2xsZXJgIHNlcnZpY2UgaXMgcmVzcG9uc2libGUgZm9yIGluc3RhbnRpYXRpbmcgY29udHJvbGxlcnMuXG4gICAgICpcbiAgICAgKiBJdCdzIGp1c3QgYSBzaW1wbGUgY2FsbCB0byB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfSwgYnV0IGV4dHJhY3RlZCBpbnRvXG4gICAgICogYSBzZXJ2aWNlLCBzbyB0aGF0IG9uZSBjYW4gb3ZlcnJpZGUgdGhpcyBzZXJ2aWNlIHdpdGggW0JDIHZlcnNpb25dKGh0dHBzOi8vZ2lzdC5naXRodWIuY29tLzE2NDk3ODgpLlxuICAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbihleHByZXNzaW9uLCBsb2NhbHMsIGxhdGVyLCBpZGVudCkge1xuICAgICAgLy8gUFJJVkFURSBBUEk6XG4gICAgICAvLyAgIHBhcmFtIGBsYXRlcmAgLS0tIGluZGljYXRlcyB0aGF0IHRoZSBjb250cm9sbGVyJ3MgY29uc3RydWN0b3IgaXMgaW52b2tlZCBhdCBhIGxhdGVyIHRpbWUuXG4gICAgICAvLyAgICAgICAgICAgICAgICAgICAgIElmIHRydWUsICRjb250cm9sbGVyIHdpbGwgYWxsb2NhdGUgdGhlIG9iamVjdCB3aXRoIHRoZSBjb3JyZWN0XG4gICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHByb3RvdHlwZSBjaGFpbiwgYnV0IHdpbGwgbm90IGludm9rZSB0aGUgY29udHJvbGxlciB1bnRpbCBhIHJldHVybmVkXG4gICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrIGlzIGludm9rZWQuXG4gICAgICAvLyAgIHBhcmFtIGBpZGVudGAgLS0tIEFuIG9wdGlvbmFsIGxhYmVsIHdoaWNoIG92ZXJyaWRlcyB0aGUgbGFiZWwgcGFyc2VkIGZyb20gdGhlIGNvbnRyb2xsZXJcbiAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbiwgaWYgYW55LlxuICAgICAgdmFyIGluc3RhbmNlLCBtYXRjaCwgY29uc3RydWN0b3IsIGlkZW50aWZpZXI7XG4gICAgICBsYXRlciA9IGxhdGVyID09PSB0cnVlO1xuICAgICAgaWYgKGlkZW50ICYmIGlzU3RyaW5nKGlkZW50KSkge1xuICAgICAgICBpZGVudGlmaWVyID0gaWRlbnQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1N0cmluZyhleHByZXNzaW9uKSkge1xuICAgICAgICBtYXRjaCA9IGV4cHJlc3Npb24ubWF0Y2goQ05UUkxfUkVHKTtcbiAgICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICAgIHRocm93ICRjb250cm9sbGVyTWluRXJyKCdjdHJsZm10JyxcbiAgICAgICAgICAgIFwiQmFkbHkgZm9ybWVkIGNvbnRyb2xsZXIgc3RyaW5nICd7MH0nLiBcIiArXG4gICAgICAgICAgICBcIk11c3QgbWF0Y2ggYF9fbmFtZV9fIGFzIF9faWRfX2Agb3IgYF9fbmFtZV9fYC5cIiwgZXhwcmVzc2lvbik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3RydWN0b3IgPSBtYXRjaFsxXSxcbiAgICAgICAgaWRlbnRpZmllciA9IGlkZW50aWZpZXIgfHwgbWF0Y2hbM107XG4gICAgICAgIGV4cHJlc3Npb24gPSBjb250cm9sbGVycy5oYXNPd25Qcm9wZXJ0eShjb25zdHJ1Y3RvcilcbiAgICAgICAgICAgID8gY29udHJvbGxlcnNbY29uc3RydWN0b3JdXG4gICAgICAgICAgICA6IGdldHRlcihsb2NhbHMuJHNjb3BlLCBjb25zdHJ1Y3RvciwgdHJ1ZSkgfHxcbiAgICAgICAgICAgICAgICAoZ2xvYmFscyA/IGdldHRlcigkd2luZG93LCBjb25zdHJ1Y3RvciwgdHJ1ZSkgOiB1bmRlZmluZWQpO1xuXG4gICAgICAgIGFzc2VydEFyZ0ZuKGV4cHJlc3Npb24sIGNvbnN0cnVjdG9yLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGxhdGVyKSB7XG4gICAgICAgIC8vIEluc3RhbnRpYXRlIGNvbnRyb2xsZXIgbGF0ZXI6XG4gICAgICAgIC8vIFRoaXMgbWFjaGluZXJ5IGlzIHVzZWQgdG8gY3JlYXRlIGFuIGluc3RhbmNlIG9mIHRoZSBvYmplY3QgYmVmb3JlIGNhbGxpbmcgdGhlXG4gICAgICAgIC8vIGNvbnRyb2xsZXIncyBjb25zdHJ1Y3RvciBpdHNlbGYuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFRoaXMgYWxsb3dzIHByb3BlcnRpZXMgdG8gYmUgYWRkZWQgdG8gdGhlIGNvbnRyb2xsZXIgYmVmb3JlIHRoZSBjb25zdHJ1Y3RvciBpc1xuICAgICAgICAvLyBpbnZva2VkLiBQcmltYXJpbHksIHRoaXMgaXMgdXNlZCBmb3IgaXNvbGF0ZSBzY29wZSBiaW5kaW5ncyBpbiAkY29tcGlsZS5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gVGhpcyBmZWF0dXJlIGlzIG5vdCBpbnRlbmRlZCBmb3IgdXNlIGJ5IGFwcGxpY2F0aW9ucywgYW5kIGlzIHRodXMgbm90IGRvY3VtZW50ZWRcbiAgICAgICAgLy8gcHVibGljbHkuXG4gICAgICAgIC8vIE9iamVjdCBjcmVhdGlvbjogaHR0cDovL2pzcGVyZi5jb20vY3JlYXRlLWNvbnN0cnVjdG9yLzJcbiAgICAgICAgdmFyIGNvbnRyb2xsZXJQcm90b3R5cGUgPSAoaXNBcnJheShleHByZXNzaW9uKSA/XG4gICAgICAgICAgZXhwcmVzc2lvbltleHByZXNzaW9uLmxlbmd0aCAtIDFdIDogZXhwcmVzc2lvbikucHJvdG90eXBlO1xuICAgICAgICBpbnN0YW5jZSA9IE9iamVjdC5jcmVhdGUoY29udHJvbGxlclByb3RvdHlwZSB8fCBudWxsKTtcblxuICAgICAgICBpZiAoaWRlbnRpZmllcikge1xuICAgICAgICAgIGFkZElkZW50aWZpZXIobG9jYWxzLCBpZGVudGlmaWVyLCBpbnN0YW5jZSwgY29uc3RydWN0b3IgfHwgZXhwcmVzc2lvbi5uYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJGluamVjdG9yLmludm9rZShleHByZXNzaW9uLCBpbnN0YW5jZSwgbG9jYWxzLCBjb25zdHJ1Y3Rvcik7XG4gICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgICB9LCB7XG4gICAgICAgICAgaW5zdGFuY2U6IGluc3RhbmNlLFxuICAgICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXJcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGluc3RhbmNlID0gJGluamVjdG9yLmluc3RhbnRpYXRlKGV4cHJlc3Npb24sIGxvY2FscywgY29uc3RydWN0b3IpO1xuXG4gICAgICBpZiAoaWRlbnRpZmllcikge1xuICAgICAgICBhZGRJZGVudGlmaWVyKGxvY2FscywgaWRlbnRpZmllciwgaW5zdGFuY2UsIGNvbnN0cnVjdG9yIHx8IGV4cHJlc3Npb24ubmFtZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gYWRkSWRlbnRpZmllcihsb2NhbHMsIGlkZW50aWZpZXIsIGluc3RhbmNlLCBuYW1lKSB7XG4gICAgICBpZiAoIShsb2NhbHMgJiYgaXNPYmplY3QobG9jYWxzLiRzY29wZSkpKSB7XG4gICAgICAgIHRocm93IG1pbkVycignJGNvbnRyb2xsZXInKSgnbm9zY3AnLFxuICAgICAgICAgIFwiQ2Fubm90IGV4cG9ydCBjb250cm9sbGVyICd7MH0nIGFzICd7MX0nISBObyAkc2NvcGUgb2JqZWN0IHByb3ZpZGVkIHZpYSBgbG9jYWxzYC5cIixcbiAgICAgICAgICBuYW1lLCBpZGVudGlmaWVyKTtcbiAgICAgIH1cblxuICAgICAgbG9jYWxzLiRzY29wZVtpZGVudGlmaWVyXSA9IGluc3RhbmNlO1xuICAgIH1cbiAgfV07XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRkb2N1bWVudFxuICogQHJlcXVpcmVzICR3aW5kb3dcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEge0BsaW5rIGFuZ3VsYXIuZWxlbWVudCBqUXVlcnkgb3IganFMaXRlfSB3cmFwcGVyIGZvciB0aGUgYnJvd3NlcidzIGB3aW5kb3cuZG9jdW1lbnRgIG9iamVjdC5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwiZG9jdW1lbnRFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxwPiRkb2N1bWVudCB0aXRsZTogPGIgbmctYmluZD1cInRpdGxlXCI+PC9iPjwvcD5cbiAgICAgICAgIDxwPndpbmRvdy5kb2N1bWVudCB0aXRsZTogPGIgbmctYmluZD1cIndpbmRvd1RpdGxlXCI+PC9iPjwvcD5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgYW5ndWxhci5tb2R1bGUoJ2RvY3VtZW50RXhhbXBsZScsIFtdKVxuICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGRvY3VtZW50JywgZnVuY3Rpb24oJHNjb3BlLCAkZG9jdW1lbnQpIHtcbiAgICAgICAgICAgJHNjb3BlLnRpdGxlID0gJGRvY3VtZW50WzBdLnRpdGxlO1xuICAgICAgICAgICAkc2NvcGUud2luZG93VGl0bGUgPSBhbmd1bGFyLmVsZW1lbnQod2luZG93LmRvY3VtZW50KVswXS50aXRsZTtcbiAgICAgICAgIH1dKTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5mdW5jdGlvbiAkRG9jdW1lbnRQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckd2luZG93JywgZnVuY3Rpb24od2luZG93KSB7XG4gICAgcmV0dXJuIGpxTGl0ZSh3aW5kb3cuZG9jdW1lbnQpO1xuICB9XTtcbn1cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJGV4Y2VwdGlvbkhhbmRsZXJcbiAqIEByZXF1aXJlcyBuZy4kbG9nXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBbnkgdW5jYXVnaHQgZXhjZXB0aW9uIGluIGFuZ3VsYXIgZXhwcmVzc2lvbnMgaXMgZGVsZWdhdGVkIHRvIHRoaXMgc2VydmljZS5cbiAqIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIHNpbXBseSBkZWxlZ2F0ZXMgdG8gYCRsb2cuZXJyb3JgIHdoaWNoIGxvZ3MgaXQgaW50b1xuICogdGhlIGJyb3dzZXIgY29uc29sZS5cbiAqXG4gKiBJbiB1bml0IHRlc3RzLCBpZiBgYW5ndWxhci1tb2Nrcy5qc2AgaXMgbG9hZGVkLCB0aGlzIHNlcnZpY2UgaXMgb3ZlcnJpZGRlbiBieVxuICoge0BsaW5rIG5nTW9jay4kZXhjZXB0aW9uSGFuZGxlciBtb2NrICRleGNlcHRpb25IYW5kbGVyfSB3aGljaCBhaWRzIGluIHRlc3RpbmcuXG4gKlxuICogIyMgRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogICBhbmd1bGFyLm1vZHVsZSgnZXhjZXB0aW9uT3ZlcnJpZGUnLCBbXSkuZmFjdG9yeSgnJGV4Y2VwdGlvbkhhbmRsZXInLCBmdW5jdGlvbigpIHtcbiAqICAgICByZXR1cm4gZnVuY3Rpb24oZXhjZXB0aW9uLCBjYXVzZSkge1xuICogICAgICAgZXhjZXB0aW9uLm1lc3NhZ2UgKz0gJyAoY2F1c2VkIGJ5IFwiJyArIGNhdXNlICsgJ1wiKSc7XG4gKiAgICAgICB0aHJvdyBleGNlcHRpb247XG4gKiAgICAgfTtcbiAqICAgfSk7XG4gKiBgYGBcbiAqXG4gKiBUaGlzIGV4YW1wbGUgd2lsbCBvdmVycmlkZSB0aGUgbm9ybWFsIGFjdGlvbiBvZiBgJGV4Y2VwdGlvbkhhbmRsZXJgLCB0byBtYWtlIGFuZ3VsYXJcbiAqIGV4Y2VwdGlvbnMgZmFpbCBoYXJkIHdoZW4gdGhleSBoYXBwZW4sIGluc3RlYWQgb2YganVzdCBsb2dnaW5nIHRvIHRoZSBjb25zb2xlLlxuICpcbiAqIDxociAvPlxuICogTm90ZSwgdGhhdCBjb2RlIGV4ZWN1dGVkIGluIGV2ZW50LWxpc3RlbmVycyAoZXZlbiB0aG9zZSByZWdpc3RlcmVkIHVzaW5nIGpxTGl0ZSdzIGBvbmAvYGJpbmRgXG4gKiBtZXRob2RzKSBkb2VzIG5vdCBkZWxlZ2F0ZSBleGNlcHRpb25zIHRvIHRoZSB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXIgJGV4Y2VwdGlvbkhhbmRsZXJ9XG4gKiAodW5sZXNzIGV4ZWN1dGVkIGR1cmluZyBhIGRpZ2VzdCkuXG4gKlxuICogSWYgeW91IHdpc2gsIHlvdSBjYW4gbWFudWFsbHkgZGVsZWdhdGUgZXhjZXB0aW9ucywgZS5nLlxuICogYHRyeSB7IC4uLiB9IGNhdGNoKGUpIHsgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7IH1gXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXhjZXB0aW9uIEV4Y2VwdGlvbiBhc3NvY2lhdGVkIHdpdGggdGhlIGVycm9yLlxuICogQHBhcmFtIHtzdHJpbmc9fSBjYXVzZSBvcHRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY29udGV4dCBpbiB3aGljaFxuICogICAgICAgdGhlIGVycm9yIHdhcyB0aHJvd24uXG4gKlxuICovXG5mdW5jdGlvbiAkRXhjZXB0aW9uSGFuZGxlclByb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSBbJyRsb2cnLCBmdW5jdGlvbigkbG9nKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGV4Y2VwdGlvbiwgY2F1c2UpIHtcbiAgICAgICRsb2cuZXJyb3IuYXBwbHkoJGxvZywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XTtcbn1cblxudmFyIEFQUExJQ0FUSU9OX0pTT04gPSAnYXBwbGljYXRpb24vanNvbic7XG52YXIgQ09OVEVOVF9UWVBFX0FQUExJQ0FUSU9OX0pTT04gPSB7J0NvbnRlbnQtVHlwZSc6IEFQUExJQ0FUSU9OX0pTT04gKyAnO2NoYXJzZXQ9dXRmLTgnfTtcbnZhciBKU09OX1NUQVJUID0gL15cXFt8Xlxceyg/IVxceykvO1xudmFyIEpTT05fRU5EUyA9IHtcbiAgJ1snOiAvXSQvLFxuICAneyc6IC99JC9cbn07XG52YXIgSlNPTl9QUk9URUNUSU9OX1BSRUZJWCA9IC9eXFwpXFxdXFx9Jyw/XFxuLztcblxuZnVuY3Rpb24gZGVmYXVsdEh0dHBSZXNwb25zZVRyYW5zZm9ybShkYXRhLCBoZWFkZXJzKSB7XG4gIGlmIChpc1N0cmluZyhkYXRhKSkge1xuICAgIC8vIFN0cmlwIGpzb24gdnVsbmVyYWJpbGl0eSBwcm90ZWN0aW9uIHByZWZpeCBhbmQgdHJpbSB3aGl0ZXNwYWNlXG4gICAgdmFyIHRlbXBEYXRhID0gZGF0YS5yZXBsYWNlKEpTT05fUFJPVEVDVElPTl9QUkVGSVgsICcnKS50cmltKCk7XG5cbiAgICBpZiAodGVtcERhdGEpIHtcbiAgICAgIHZhciBjb250ZW50VHlwZSA9IGhlYWRlcnMoJ0NvbnRlbnQtVHlwZScpO1xuICAgICAgaWYgKChjb250ZW50VHlwZSAmJiAoY29udGVudFR5cGUuaW5kZXhPZihBUFBMSUNBVElPTl9KU09OKSA9PT0gMCkpIHx8IGlzSnNvbkxpa2UodGVtcERhdGEpKSB7XG4gICAgICAgIGRhdGEgPSBmcm9tSnNvbih0ZW1wRGF0YSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGlzSnNvbkxpa2Uoc3RyKSB7XG4gICAgdmFyIGpzb25TdGFydCA9IHN0ci5tYXRjaChKU09OX1NUQVJUKTtcbiAgICByZXR1cm4ganNvblN0YXJ0ICYmIEpTT05fRU5EU1tqc29uU3RhcnRbMF1dLnRlc3Qoc3RyKTtcbn1cblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8ga2V5IHZhbHVlIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBoZWFkZXJzIFJhdyBoZWFkZXJzIGFzIGEgc3RyaW5nXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBQYXJzZWQgaGVhZGVycyBhcyBrZXkgdmFsdWUgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSBjcmVhdGVNYXAoKSwga2V5LCB2YWwsIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSByZXR1cm4gcGFyc2VkO1xuXG4gIGZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gbG93ZXJjYXNlKHRyaW0obGluZS5zdWJzdHIoMCwgaSkpKTtcbiAgICB2YWwgPSB0cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn1cblxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHByb3ZpZGVzIGFjY2VzcyB0byBwYXJzZWQgaGVhZGVycy5cbiAqXG4gKiBIZWFkZXJzIGFyZSBsYXp5IHBhcnNlZCB3aGVuIGZpcnN0IHJlcXVlc3RlZC5cbiAqIEBzZWUgcGFyc2VIZWFkZXJzXG4gKlxuICogQHBhcmFtIHsoc3RyaW5nfE9iamVjdCl9IGhlYWRlcnMgSGVhZGVycyB0byBwcm92aWRlIGFjY2VzcyB0by5cbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmc9KX0gUmV0dXJucyBhIGdldHRlciBmdW5jdGlvbiB3aGljaCBpZiBjYWxsZWQgd2l0aDpcbiAqXG4gKiAgIC0gaWYgY2FsbGVkIHdpdGggc2luZ2xlIGFuIGFyZ3VtZW50IHJldHVybnMgYSBzaW5nbGUgaGVhZGVyIHZhbHVlIG9yIG51bGxcbiAqICAgLSBpZiBjYWxsZWQgd2l0aCBubyBhcmd1bWVudHMgcmV0dXJucyBhbiBvYmplY3QgY29udGFpbmluZyBhbGwgaGVhZGVycy5cbiAqL1xuZnVuY3Rpb24gaGVhZGVyc0dldHRlcihoZWFkZXJzKSB7XG4gIHZhciBoZWFkZXJzT2JqID0gaXNPYmplY3QoaGVhZGVycykgPyBoZWFkZXJzIDogdW5kZWZpbmVkO1xuXG4gIHJldHVybiBmdW5jdGlvbihuYW1lKSB7XG4gICAgaWYgKCFoZWFkZXJzT2JqKSBoZWFkZXJzT2JqID0gIHBhcnNlSGVhZGVycyhoZWFkZXJzKTtcblxuICAgIGlmIChuYW1lKSB7XG4gICAgICB2YXIgdmFsdWUgPSBoZWFkZXJzT2JqW2xvd2VyY2FzZShuYW1lKV07XG4gICAgICBpZiAodmFsdWUgPT09IHZvaWQgMCkge1xuICAgICAgICB2YWx1ZSA9IG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhlYWRlcnNPYmo7XG4gIH07XG59XG5cblxuLyoqXG4gKiBDaGFpbiBhbGwgZ2l2ZW4gZnVuY3Rpb25zXG4gKlxuICogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIGZvciBib3RoIHJlcXVlc3QgYW5kIHJlc3BvbnNlIHRyYW5zZm9ybWluZ1xuICpcbiAqIEBwYXJhbSB7Kn0gZGF0YSBEYXRhIHRvIHRyYW5zZm9ybS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oc3RyaW5nPSl9IGhlYWRlcnMgSFRUUCBoZWFkZXJzIGdldHRlciBmbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzdGF0dXMgSFRUUCBzdGF0dXMgY29kZSBvZiB0aGUgcmVzcG9uc2UuXG4gKiBAcGFyYW0geyhGdW5jdGlvbnxBcnJheS48RnVuY3Rpb24+KX0gZm5zIEZ1bmN0aW9uIG9yIGFuIGFycmF5IG9mIGZ1bmN0aW9ucy5cbiAqIEByZXR1cm5zIHsqfSBUcmFuc2Zvcm1lZCBkYXRhLlxuICovXG5mdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIHN0YXR1cywgZm5zKSB7XG4gIGlmIChpc0Z1bmN0aW9uKGZucykpXG4gICAgcmV0dXJuIGZucyhkYXRhLCBoZWFkZXJzLCBzdGF0dXMpO1xuXG4gIGZvckVhY2goZm5zLCBmdW5jdGlvbihmbikge1xuICAgIGRhdGEgPSBmbihkYXRhLCBoZWFkZXJzLCBzdGF0dXMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuXG5mdW5jdGlvbiBpc1N1Y2Nlc3Moc3RhdHVzKSB7XG4gIHJldHVybiAyMDAgPD0gc3RhdHVzICYmIHN0YXR1cyA8IDMwMDtcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJGh0dHBQcm92aWRlclxuICogQGRlc2NyaXB0aW9uXG4gKiBVc2UgYCRodHRwUHJvdmlkZXJgIHRvIGNoYW5nZSB0aGUgZGVmYXVsdCBiZWhhdmlvciBvZiB0aGUge0BsaW5rIG5nLiRodHRwICRodHRwfSBzZXJ2aWNlLlxuICogKi9cbmZ1bmN0aW9uICRIdHRwUHJvdmlkZXIoKSB7XG4gIC8qKlxuICAgKiBAbmdkb2MgcHJvcGVydHlcbiAgICogQG5hbWUgJGh0dHBQcm92aWRlciNkZWZhdWx0c1xuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogT2JqZWN0IGNvbnRhaW5pbmcgZGVmYXVsdCB2YWx1ZXMgZm9yIGFsbCB7QGxpbmsgbmcuJGh0dHAgJGh0dHB9IHJlcXVlc3RzLlxuICAgKlxuICAgKiAtICoqYGRlZmF1bHRzLmNhY2hlYCoqIC0ge09iamVjdH0gLSBhbiBvYmplY3QgYnVpbHQgd2l0aCB7QGxpbmsgbmcuJGNhY2hlRmFjdG9yeSBgJGNhY2hlRmFjdG9yeWB9XG4gICAqIHRoYXQgd2lsbCBwcm92aWRlIHRoZSBjYWNoZSBmb3IgYWxsIHJlcXVlc3RzIHdobyBzZXQgdGhlaXIgYGNhY2hlYCBwcm9wZXJ0eSB0byBgdHJ1ZWAuXG4gICAqIElmIHlvdSBzZXQgdGhlIGBkZWZhdWx0LmNhY2hlID0gZmFsc2VgIHRoZW4gb25seSByZXF1ZXN0cyB0aGF0IHNwZWNpZnkgdGhlaXIgb3duIGN1c3RvbVxuICAgKiBjYWNoZSBvYmplY3Qgd2lsbCBiZSBjYWNoZWQuIFNlZSB7QGxpbmsgJGh0dHAjY2FjaGluZyAkaHR0cCBDYWNoaW5nfSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICpcbiAgICogLSAqKmBkZWZhdWx0cy54c3JmQ29va2llTmFtZWAqKiAtIHtzdHJpbmd9IC0gTmFtZSBvZiBjb29raWUgY29udGFpbmluZyB0aGUgWFNSRiB0b2tlbi5cbiAgICogRGVmYXVsdHMgdmFsdWUgaXMgYCdYU1JGLVRPS0VOJ2AuXG4gICAqXG4gICAqIC0gKipgZGVmYXVsdHMueHNyZkhlYWRlck5hbWVgKiogLSB7c3RyaW5nfSAtIE5hbWUgb2YgSFRUUCBoZWFkZXIgdG8gcG9wdWxhdGUgd2l0aCB0aGVcbiAgICogWFNSRiB0b2tlbi4gRGVmYXVsdHMgdmFsdWUgaXMgYCdYLVhTUkYtVE9LRU4nYC5cbiAgICpcbiAgICogLSAqKmBkZWZhdWx0cy5oZWFkZXJzYCoqIC0ge09iamVjdH0gLSBEZWZhdWx0IGhlYWRlcnMgZm9yIGFsbCAkaHR0cCByZXF1ZXN0cy5cbiAgICogUmVmZXIgdG8ge0BsaW5rIG5nLiRodHRwI3NldHRpbmctaHR0cC1oZWFkZXJzICRodHRwfSBmb3IgZG9jdW1lbnRhdGlvbiBvblxuICAgKiBzZXR0aW5nIGRlZmF1bHQgaGVhZGVycy5cbiAgICogICAgIC0gKipgZGVmYXVsdHMuaGVhZGVycy5jb21tb25gKipcbiAgICogICAgIC0gKipgZGVmYXVsdHMuaGVhZGVycy5wb3N0YCoqXG4gICAqICAgICAtICoqYGRlZmF1bHRzLmhlYWRlcnMucHV0YCoqXG4gICAqICAgICAtICoqYGRlZmF1bHRzLmhlYWRlcnMucGF0Y2hgKipcbiAgICpcbiAgICoqL1xuICB2YXIgZGVmYXVsdHMgPSB0aGlzLmRlZmF1bHRzID0ge1xuICAgIC8vIHRyYW5zZm9ybSBpbmNvbWluZyByZXNwb25zZSBkYXRhXG4gICAgdHJhbnNmb3JtUmVzcG9uc2U6IFtkZWZhdWx0SHR0cFJlc3BvbnNlVHJhbnNmb3JtXSxcblxuICAgIC8vIHRyYW5zZm9ybSBvdXRnb2luZyByZXF1ZXN0IGRhdGFcbiAgICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24oZCkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0KGQpICYmICFpc0ZpbGUoZCkgJiYgIWlzQmxvYihkKSAmJiAhaXNGb3JtRGF0YShkKSA/IHRvSnNvbihkKSA6IGQ7XG4gICAgfV0sXG5cbiAgICAvLyBkZWZhdWx0IGhlYWRlcnNcbiAgICBoZWFkZXJzOiB7XG4gICAgICBjb21tb246IHtcbiAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gICAgICB9LFxuICAgICAgcG9zdDogICBzaGFsbG93Q29weShDT05URU5UX1RZUEVfQVBQTElDQVRJT05fSlNPTiksXG4gICAgICBwdXQ6ICAgIHNoYWxsb3dDb3B5KENPTlRFTlRfVFlQRV9BUFBMSUNBVElPTl9KU09OKSxcbiAgICAgIHBhdGNoOiAgc2hhbGxvd0NvcHkoQ09OVEVOVF9UWVBFX0FQUExJQ0FUSU9OX0pTT04pXG4gICAgfSxcblxuICAgIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gICAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nXG4gIH07XG5cbiAgdmFyIHVzZUFwcGx5QXN5bmMgPSBmYWxzZTtcbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGh0dHBQcm92aWRlciN1c2VBcHBseUFzeW5jXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBDb25maWd1cmUgJGh0dHAgc2VydmljZSB0byBjb21iaW5lIHByb2Nlc3Npbmcgb2YgbXVsdGlwbGUgaHR0cCByZXNwb25zZXMgcmVjZWl2ZWQgYXQgYXJvdW5kXG4gICAqIHRoZSBzYW1lIHRpbWUgdmlhIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRhcHBseUFzeW5jICRyb290U2NvcGUuJGFwcGx5QXN5bmN9LiBUaGlzIGNhbiByZXN1bHQgaW5cbiAgICogc2lnbmlmaWNhbnQgcGVyZm9ybWFuY2UgaW1wcm92ZW1lbnQgZm9yIGJpZ2dlciBhcHBsaWNhdGlvbnMgdGhhdCBtYWtlIG1hbnkgSFRUUCByZXF1ZXN0c1xuICAgKiBjb25jdXJyZW50bHkgKGNvbW1vbiBkdXJpbmcgYXBwbGljYXRpb24gYm9vdHN0cmFwKS5cbiAgICpcbiAgICogRGVmYXVsdHMgdG8gZmFsc2UuIElmIG5vIHZhbHVlIGlzIHNwZWNpZmVkLCByZXR1cm5zIHRoZSBjdXJyZW50IGNvbmZpZ3VyZWQgdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IHZhbHVlIElmIHRydWUsIHdoZW4gcmVxdWVzdHMgYXJlIGxvYWRlZCwgdGhleSB3aWxsIHNjaGVkdWxlIGEgZGVmZXJyZWRcbiAgICogICAgXCJhcHBseVwiIG9uIHRoZSBuZXh0IHRpY2ssIGdpdmluZyB0aW1lIGZvciBzdWJzZXF1ZW50IHJlcXVlc3RzIGluIGEgcm91Z2hseSB+MTBtcyB3aW5kb3dcbiAgICogICAgdG8gbG9hZCBhbmQgc2hhcmUgdGhlIHNhbWUgZGlnZXN0IGN5Y2xlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbnxPYmplY3R9IElmIGEgdmFsdWUgaXMgc3BlY2lmaWVkLCByZXR1cm5zIHRoZSAkaHR0cFByb3ZpZGVyIGZvciBjaGFpbmluZy5cbiAgICogICAgb3RoZXJ3aXNlLCByZXR1cm5zIHRoZSBjdXJyZW50IGNvbmZpZ3VyZWQgdmFsdWUuXG4gICAqKi9cbiAgdGhpcy51c2VBcHBseUFzeW5jID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgdXNlQXBwbHlBc3luYyA9ICEhdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIHVzZUFwcGx5QXN5bmM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBwcm9wZXJ0eVxuICAgKiBAbmFtZSAkaHR0cFByb3ZpZGVyI2ludGVyY2VwdG9yc1xuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogQXJyYXkgY29udGFpbmluZyBzZXJ2aWNlIGZhY3RvcmllcyBmb3IgYWxsIHN5bmNocm9ub3VzIG9yIGFzeW5jaHJvbm91cyB7QGxpbmsgbmcuJGh0dHAgJGh0dHB9XG4gICAqIHByZS1wcm9jZXNzaW5nIG9mIHJlcXVlc3Qgb3IgcG9zdHByb2Nlc3Npbmcgb2YgcmVzcG9uc2VzLlxuICAgKlxuICAgKiBUaGVzZSBzZXJ2aWNlIGZhY3RvcmllcyBhcmUgb3JkZXJlZCBieSByZXF1ZXN0LCBpLmUuIHRoZXkgYXJlIGFwcGxpZWQgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4gICAqIGFycmF5LCBvbiByZXF1ZXN0LCBidXQgcmV2ZXJzZSBvcmRlciwgb24gcmVzcG9uc2UuXG4gICAqXG4gICAqIHtAbGluayBuZy4kaHR0cCNpbnRlcmNlcHRvcnMgSW50ZXJjZXB0b3JzIGRldGFpbGVkIGluZm99XG4gICAqKi9cbiAgdmFyIGludGVyY2VwdG9yRmFjdG9yaWVzID0gdGhpcy5pbnRlcmNlcHRvcnMgPSBbXTtcblxuICB0aGlzLiRnZXQgPSBbJyRodHRwQmFja2VuZCcsICckYnJvd3NlcicsICckY2FjaGVGYWN0b3J5JywgJyRyb290U2NvcGUnLCAnJHEnLCAnJGluamVjdG9yJyxcbiAgICAgIGZ1bmN0aW9uKCRodHRwQmFja2VuZCwgJGJyb3dzZXIsICRjYWNoZUZhY3RvcnksICRyb290U2NvcGUsICRxLCAkaW5qZWN0b3IpIHtcblxuICAgIHZhciBkZWZhdWx0Q2FjaGUgPSAkY2FjaGVGYWN0b3J5KCckaHR0cCcpO1xuXG4gICAgLyoqXG4gICAgICogSW50ZXJjZXB0b3JzIHN0b3JlZCBpbiByZXZlcnNlIG9yZGVyLiBJbm5lciBpbnRlcmNlcHRvcnMgYmVmb3JlIG91dGVyIGludGVyY2VwdG9ycy5cbiAgICAgKiBUaGUgcmV2ZXJzYWwgaXMgbmVlZGVkIHNvIHRoYXQgd2UgY2FuIGJ1aWxkIHVwIHRoZSBpbnRlcmNlcHRpb24gY2hhaW4gYXJvdW5kIHRoZVxuICAgICAqIHNlcnZlciByZXF1ZXN0LlxuICAgICAqL1xuICAgIHZhciByZXZlcnNlZEludGVyY2VwdG9ycyA9IFtdO1xuXG4gICAgZm9yRWFjaChpbnRlcmNlcHRvckZhY3RvcmllcywgZnVuY3Rpb24oaW50ZXJjZXB0b3JGYWN0b3J5KSB7XG4gICAgICByZXZlcnNlZEludGVyY2VwdG9ycy51bnNoaWZ0KGlzU3RyaW5nKGludGVyY2VwdG9yRmFjdG9yeSlcbiAgICAgICAgICA/ICRpbmplY3Rvci5nZXQoaW50ZXJjZXB0b3JGYWN0b3J5KSA6ICRpbmplY3Rvci5pbnZva2UoaW50ZXJjZXB0b3JGYWN0b3J5KSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2Mgc2VydmljZVxuICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICogQG5hbWUgJGh0dHBcbiAgICAgKiBAcmVxdWlyZXMgbmcuJGh0dHBCYWNrZW5kXG4gICAgICogQHJlcXVpcmVzICRjYWNoZUZhY3RvcnlcbiAgICAgKiBAcmVxdWlyZXMgJHJvb3RTY29wZVxuICAgICAqIEByZXF1aXJlcyAkcVxuICAgICAqIEByZXF1aXJlcyAkaW5qZWN0b3JcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFRoZSBgJGh0dHBgIHNlcnZpY2UgaXMgYSBjb3JlIEFuZ3VsYXIgc2VydmljZSB0aGF0IGZhY2lsaXRhdGVzIGNvbW11bmljYXRpb24gd2l0aCB0aGUgcmVtb3RlXG4gICAgICogSFRUUCBzZXJ2ZXJzIHZpYSB0aGUgYnJvd3NlcidzIFtYTUxIdHRwUmVxdWVzdF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4veG1saHR0cHJlcXVlc3QpXG4gICAgICogb2JqZWN0IG9yIHZpYSBbSlNPTlBdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSlNPTlApLlxuICAgICAqXG4gICAgICogRm9yIHVuaXQgdGVzdGluZyBhcHBsaWNhdGlvbnMgdGhhdCB1c2UgYCRodHRwYCBzZXJ2aWNlLCBzZWVcbiAgICAgKiB7QGxpbmsgbmdNb2NrLiRodHRwQmFja2VuZCAkaHR0cEJhY2tlbmQgbW9ja30uXG4gICAgICpcbiAgICAgKiBGb3IgYSBoaWdoZXIgbGV2ZWwgb2YgYWJzdHJhY3Rpb24sIHBsZWFzZSBjaGVjayBvdXQgdGhlIHtAbGluayBuZ1Jlc291cmNlLiRyZXNvdXJjZVxuICAgICAqICRyZXNvdXJjZX0gc2VydmljZS5cbiAgICAgKlxuICAgICAqIFRoZSAkaHR0cCBBUEkgaXMgYmFzZWQgb24gdGhlIHtAbGluayBuZy4kcSBkZWZlcnJlZC9wcm9taXNlIEFQSXN9IGV4cG9zZWQgYnlcbiAgICAgKiB0aGUgJHEgc2VydmljZS4gV2hpbGUgZm9yIHNpbXBsZSB1c2FnZSBwYXR0ZXJucyB0aGlzIGRvZXNuJ3QgbWF0dGVyIG11Y2gsIGZvciBhZHZhbmNlZCB1c2FnZVxuICAgICAqIGl0IGlzIGltcG9ydGFudCB0byBmYW1pbGlhcml6ZSB5b3Vyc2VsZiB3aXRoIHRoZXNlIEFQSXMgYW5kIHRoZSBndWFyYW50ZWVzIHRoZXkgcHJvdmlkZS5cbiAgICAgKlxuICAgICAqXG4gICAgICogIyMgR2VuZXJhbCB1c2FnZVxuICAgICAqIFRoZSBgJGh0dHBgIHNlcnZpY2UgaXMgYSBmdW5jdGlvbiB3aGljaCB0YWtlcyBhIHNpbmdsZSBhcmd1bWVudCDigJQgYSBjb25maWd1cmF0aW9uIG9iamVjdCDigJRcbiAgICAgKiB0aGF0IGlzIHVzZWQgdG8gZ2VuZXJhdGUgYW4gSFRUUCByZXF1ZXN0IGFuZCByZXR1cm5zICBhIHtAbGluayBuZy4kcSBwcm9taXNlfVxuICAgICAqIHdpdGggdHdvICRodHRwIHNwZWNpZmljIG1ldGhvZHM6IGBzdWNjZXNzYCBhbmQgYGVycm9yYC5cbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogICAvLyBTaW1wbGUgR0VUIHJlcXVlc3QgZXhhbXBsZSA6XG4gICAgICogICAkaHR0cC5nZXQoJy9zb21lVXJsJykuXG4gICAgICogICAgIHN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgKiAgICAgICAvLyB0aGlzIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIGFzeW5jaHJvbm91c2x5XG4gICAgICogICAgICAgLy8gd2hlbiB0aGUgcmVzcG9uc2UgaXMgYXZhaWxhYmxlXG4gICAgICogICAgIH0pLlxuICAgICAqICAgICBlcnJvcihmdW5jdGlvbihkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAqICAgICAgIC8vIGNhbGxlZCBhc3luY2hyb25vdXNseSBpZiBhbiBlcnJvciBvY2N1cnNcbiAgICAgKiAgICAgICAvLyBvciBzZXJ2ZXIgcmV0dXJucyByZXNwb25zZSB3aXRoIGFuIGVycm9yIHN0YXR1cy5cbiAgICAgKiAgICAgfSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqICAgLy8gU2ltcGxlIFBPU1QgcmVxdWVzdCBleGFtcGxlIChwYXNzaW5nIGRhdGEpIDpcbiAgICAgKiAgICRodHRwLnBvc3QoJy9zb21lVXJsJywge21zZzonaGVsbG8gd29yZCEnfSkuXG4gICAgICogICAgIHN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHtcbiAgICAgKiAgICAgICAvLyB0aGlzIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIGFzeW5jaHJvbm91c2x5XG4gICAgICogICAgICAgLy8gd2hlbiB0aGUgcmVzcG9uc2UgaXMgYXZhaWxhYmxlXG4gICAgICogICAgIH0pLlxuICAgICAqICAgICBlcnJvcihmdW5jdGlvbihkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAqICAgICAgIC8vIGNhbGxlZCBhc3luY2hyb25vdXNseSBpZiBhbiBlcnJvciBvY2N1cnNcbiAgICAgKiAgICAgICAvLyBvciBzZXJ2ZXIgcmV0dXJucyByZXNwb25zZSB3aXRoIGFuIGVycm9yIHN0YXR1cy5cbiAgICAgKiAgICAgfSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKlxuICAgICAqIFNpbmNlIHRoZSByZXR1cm5lZCB2YWx1ZSBvZiBjYWxsaW5nIHRoZSAkaHR0cCBmdW5jdGlvbiBpcyBhIGBwcm9taXNlYCwgeW91IGNhbiBhbHNvIHVzZVxuICAgICAqIHRoZSBgdGhlbmAgbWV0aG9kIHRvIHJlZ2lzdGVyIGNhbGxiYWNrcywgYW5kIHRoZXNlIGNhbGxiYWNrcyB3aWxsIHJlY2VpdmUgYSBzaW5nbGUgYXJndW1lbnQg4oCTXG4gICAgICogYW4gb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgcmVzcG9uc2UuIFNlZSB0aGUgQVBJIHNpZ25hdHVyZSBhbmQgdHlwZSBpbmZvIGJlbG93IGZvciBtb3JlXG4gICAgICogZGV0YWlscy5cbiAgICAgKlxuICAgICAqIEEgcmVzcG9uc2Ugc3RhdHVzIGNvZGUgYmV0d2VlbiAyMDAgYW5kIDI5OSBpcyBjb25zaWRlcmVkIGEgc3VjY2VzcyBzdGF0dXMgYW5kXG4gICAgICogd2lsbCByZXN1bHQgaW4gdGhlIHN1Y2Nlc3MgY2FsbGJhY2sgYmVpbmcgY2FsbGVkLiBOb3RlIHRoYXQgaWYgdGhlIHJlc3BvbnNlIGlzIGEgcmVkaXJlY3QsXG4gICAgICogWE1MSHR0cFJlcXVlc3Qgd2lsbCB0cmFuc3BhcmVudGx5IGZvbGxvdyBpdCwgbWVhbmluZyB0aGF0IHRoZSBlcnJvciBjYWxsYmFjayB3aWxsIG5vdCBiZVxuICAgICAqIGNhbGxlZCBmb3Igc3VjaCByZXNwb25zZXMuXG4gICAgICpcbiAgICAgKiAjIyBXcml0aW5nIFVuaXQgVGVzdHMgdGhhdCB1c2UgJGh0dHBcbiAgICAgKiBXaGVuIHVuaXQgdGVzdGluZyAodXNpbmcge0BsaW5rIG5nTW9jayBuZ01vY2t9KSwgaXQgaXMgbmVjZXNzYXJ5IHRvIGNhbGxcbiAgICAgKiB7QGxpbmsgbmdNb2NrLiRodHRwQmFja2VuZCNmbHVzaCAkaHR0cEJhY2tlbmQuZmx1c2goKX0gdG8gZmx1c2ggZWFjaCBwZW5kaW5nXG4gICAgICogcmVxdWVzdCB1c2luZyB0cmFpbmVkIHJlc3BvbnNlcy5cbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqICRodHRwQmFja2VuZC5leHBlY3RHRVQoLi4uKTtcbiAgICAgKiAkaHR0cC5nZXQoLi4uKTtcbiAgICAgKiAkaHR0cEJhY2tlbmQuZmx1c2goKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqICMjIFNob3J0Y3V0IG1ldGhvZHNcbiAgICAgKlxuICAgICAqIFNob3J0Y3V0IG1ldGhvZHMgYXJlIGFsc28gYXZhaWxhYmxlLiBBbGwgc2hvcnRjdXQgbWV0aG9kcyByZXF1aXJlIHBhc3NpbmcgaW4gdGhlIFVSTCwgYW5kXG4gICAgICogcmVxdWVzdCBkYXRhIG11c3QgYmUgcGFzc2VkIGluIGZvciBQT1NUL1BVVCByZXF1ZXN0cy5cbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogICAkaHR0cC5nZXQoJy9zb21lVXJsJykuc3VjY2VzcyhzdWNjZXNzQ2FsbGJhY2spO1xuICAgICAqICAgJGh0dHAucG9zdCgnL3NvbWVVcmwnLCBkYXRhKS5zdWNjZXNzKHN1Y2Nlc3NDYWxsYmFjayk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBDb21wbGV0ZSBsaXN0IG9mIHNob3J0Y3V0IG1ldGhvZHM6XG4gICAgICpcbiAgICAgKiAtIHtAbGluayBuZy4kaHR0cCNnZXQgJGh0dHAuZ2V0fVxuICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI2hlYWQgJGh0dHAuaGVhZH1cbiAgICAgKiAtIHtAbGluayBuZy4kaHR0cCNwb3N0ICRodHRwLnBvc3R9XG4gICAgICogLSB7QGxpbmsgbmcuJGh0dHAjcHV0ICRodHRwLnB1dH1cbiAgICAgKiAtIHtAbGluayBuZy4kaHR0cCNkZWxldGUgJGh0dHAuZGVsZXRlfVxuICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI2pzb25wICRodHRwLmpzb25wfVxuICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI3BhdGNoICRodHRwLnBhdGNofVxuICAgICAqXG4gICAgICpcbiAgICAgKiAjIyBTZXR0aW5nIEhUVFAgSGVhZGVyc1xuICAgICAqXG4gICAgICogVGhlICRodHRwIHNlcnZpY2Ugd2lsbCBhdXRvbWF0aWNhbGx5IGFkZCBjZXJ0YWluIEhUVFAgaGVhZGVycyB0byBhbGwgcmVxdWVzdHMuIFRoZXNlIGRlZmF1bHRzXG4gICAgICogY2FuIGJlIGZ1bGx5IGNvbmZpZ3VyZWQgYnkgYWNjZXNzaW5nIHRoZSBgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzYCBjb25maWd1cmF0aW9uXG4gICAgICogb2JqZWN0LCB3aGljaCBjdXJyZW50bHkgY29udGFpbnMgdGhpcyBkZWZhdWx0IGNvbmZpZ3VyYXRpb246XG4gICAgICpcbiAgICAgKiAtIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uYCAoaGVhZGVycyB0aGF0IGFyZSBjb21tb24gZm9yIGFsbCByZXF1ZXN0cyk6XG4gICAgICogICAtIGBBY2NlcHQ6IGFwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICogLyAqYFxuICAgICAqIC0gYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5wb3N0YDogKGhlYWRlciBkZWZhdWx0cyBmb3IgUE9TVCByZXF1ZXN0cylcbiAgICAgKiAgIC0gYENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbmBcbiAgICAgKiAtIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMucHV0YCAoaGVhZGVyIGRlZmF1bHRzIGZvciBQVVQgcmVxdWVzdHMpXG4gICAgICogICAtIGBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25gXG4gICAgICpcbiAgICAgKiBUbyBhZGQgb3Igb3ZlcndyaXRlIHRoZXNlIGRlZmF1bHRzLCBzaW1wbHkgYWRkIG9yIHJlbW92ZSBhIHByb3BlcnR5IGZyb20gdGhlc2UgY29uZmlndXJhdGlvblxuICAgICAqIG9iamVjdHMuIFRvIGFkZCBoZWFkZXJzIGZvciBhbiBIVFRQIG1ldGhvZCBvdGhlciB0aGFuIFBPU1Qgb3IgUFVULCBzaW1wbHkgYWRkIGEgbmV3IG9iamVjdFxuICAgICAqIHdpdGggdGhlIGxvd2VyY2FzZWQgSFRUUCBtZXRob2QgbmFtZSBhcyB0aGUga2V5LCBlLmcuXG4gICAgICogYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5nZXQgPSB7ICdNeS1IZWFkZXInIDogJ3ZhbHVlJyB9LlxuICAgICAqXG4gICAgICogVGhlIGRlZmF1bHRzIGNhbiBhbHNvIGJlIHNldCBhdCBydW50aW1lIHZpYSB0aGUgYCRodHRwLmRlZmF1bHRzYCBvYmplY3QgaW4gdGhlIHNhbWVcbiAgICAgKiBmYXNoaW9uLiBGb3IgZXhhbXBsZTpcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIG1vZHVsZS5ydW4oZnVuY3Rpb24oJGh0dHApIHtcbiAgICAgKiAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgWW1WbGNEcGliMjl3J1xuICAgICAqIH0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogSW4gYWRkaXRpb24sIHlvdSBjYW4gc3VwcGx5IGEgYGhlYWRlcnNgIHByb3BlcnR5IGluIHRoZSBjb25maWcgb2JqZWN0IHBhc3NlZCB3aGVuXG4gICAgICogY2FsbGluZyBgJGh0dHAoY29uZmlnKWAsIHdoaWNoIG92ZXJyaWRlcyB0aGUgZGVmYXVsdHMgd2l0aG91dCBjaGFuZ2luZyB0aGVtIGdsb2JhbGx5LlxuICAgICAqXG4gICAgICogVG8gZXhwbGljaXRseSByZW1vdmUgYSBoZWFkZXIgYXV0b21hdGljYWxseSBhZGRlZCB2aWEgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzIG9uIGEgcGVyIHJlcXVlc3QgYmFzaXMsXG4gICAgICogVXNlIHRoZSBgaGVhZGVyc2AgcHJvcGVydHksIHNldHRpbmcgdGhlIGRlc2lyZWQgaGVhZGVyIHRvIGB1bmRlZmluZWRgLiBGb3IgZXhhbXBsZTpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogdmFyIHJlcSA9IHtcbiAgICAgKiAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICogIHVybDogJ2h0dHA6Ly9leGFtcGxlLmNvbScsXG4gICAgICogIGhlYWRlcnM6IHtcbiAgICAgKiAgICAnQ29udGVudC1UeXBlJzogdW5kZWZpbmVkXG4gICAgICogIH0sXG4gICAgICogIGRhdGE6IHsgdGVzdDogJ3Rlc3QnIH0sXG4gICAgICogfVxuICAgICAqXG4gICAgICogJGh0dHAocmVxKS5zdWNjZXNzKGZ1bmN0aW9uKCl7Li4ufSkuZXJyb3IoZnVuY3Rpb24oKXsuLi59KTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqICMjIFRyYW5zZm9ybWluZyBSZXF1ZXN0cyBhbmQgUmVzcG9uc2VzXG4gICAgICpcbiAgICAgKiBCb3RoIHJlcXVlc3RzIGFuZCByZXNwb25zZXMgY2FuIGJlIHRyYW5zZm9ybWVkIHVzaW5nIHRyYW5zZm9ybWF0aW9uIGZ1bmN0aW9uczogYHRyYW5zZm9ybVJlcXVlc3RgXG4gICAgICogYW5kIGB0cmFuc2Zvcm1SZXNwb25zZWAuIFRoZXNlIHByb3BlcnRpZXMgY2FuIGJlIGEgc2luZ2xlIGZ1bmN0aW9uIHRoYXQgcmV0dXJuc1xuICAgICAqIHRoZSB0cmFuc2Zvcm1lZCB2YWx1ZSAoYGZ1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIsIHN0YXR1cylgKSBvciBhbiBhcnJheSBvZiBzdWNoIHRyYW5zZm9ybWF0aW9uIGZ1bmN0aW9ucyxcbiAgICAgKiB3aGljaCBhbGxvd3MgeW91IHRvIGBwdXNoYCBvciBgdW5zaGlmdGAgYSBuZXcgdHJhbnNmb3JtYXRpb24gZnVuY3Rpb24gaW50byB0aGUgdHJhbnNmb3JtYXRpb24gY2hhaW4uXG4gICAgICpcbiAgICAgKiAjIyMgRGVmYXVsdCBUcmFuc2Zvcm1hdGlvbnNcbiAgICAgKlxuICAgICAqIFRoZSBgJGh0dHBQcm92aWRlcmAgcHJvdmlkZXIgYW5kIGAkaHR0cGAgc2VydmljZSBleHBvc2UgYGRlZmF1bHRzLnRyYW5zZm9ybVJlcXVlc3RgIGFuZFxuICAgICAqIGBkZWZhdWx0cy50cmFuc2Zvcm1SZXNwb25zZWAgcHJvcGVydGllcy4gSWYgYSByZXF1ZXN0IGRvZXMgbm90IHByb3ZpZGUgaXRzIG93biB0cmFuc2Zvcm1hdGlvbnNcbiAgICAgKiB0aGVuIHRoZXNlIHdpbGwgYmUgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIFlvdSBjYW4gYXVnbWVudCBvciByZXBsYWNlIHRoZSBkZWZhdWx0IHRyYW5zZm9ybWF0aW9ucyBieSBtb2RpZnlpbmcgdGhlc2UgcHJvcGVydGllcyBieSBhZGRpbmcgdG8gb3JcbiAgICAgKiByZXBsYWNpbmcgdGhlIGFycmF5LlxuICAgICAqXG4gICAgICogQW5ndWxhciBwcm92aWRlcyB0aGUgZm9sbG93aW5nIGRlZmF1bHQgdHJhbnNmb3JtYXRpb25zOlxuICAgICAqXG4gICAgICogUmVxdWVzdCB0cmFuc2Zvcm1hdGlvbnMgKGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLnRyYW5zZm9ybVJlcXVlc3RgIGFuZCBgJGh0dHAuZGVmYXVsdHMudHJhbnNmb3JtUmVxdWVzdGApOlxuICAgICAqXG4gICAgICogLSBJZiB0aGUgYGRhdGFgIHByb3BlcnR5IG9mIHRoZSByZXF1ZXN0IGNvbmZpZ3VyYXRpb24gb2JqZWN0IGNvbnRhaW5zIGFuIG9iamVjdCwgc2VyaWFsaXplIGl0XG4gICAgICogICBpbnRvIEpTT04gZm9ybWF0LlxuICAgICAqXG4gICAgICogUmVzcG9uc2UgdHJhbnNmb3JtYXRpb25zIChgJGh0dHBQcm92aWRlci5kZWZhdWx0cy50cmFuc2Zvcm1SZXNwb25zZWAgYW5kIGAkaHR0cC5kZWZhdWx0cy50cmFuc2Zvcm1SZXNwb25zZWApOlxuICAgICAqXG4gICAgICogIC0gSWYgWFNSRiBwcmVmaXggaXMgZGV0ZWN0ZWQsIHN0cmlwIGl0IChzZWUgU2VjdXJpdHkgQ29uc2lkZXJhdGlvbnMgc2VjdGlvbiBiZWxvdykuXG4gICAgICogIC0gSWYgSlNPTiByZXNwb25zZSBpcyBkZXRlY3RlZCwgZGVzZXJpYWxpemUgaXQgdXNpbmcgYSBKU09OIHBhcnNlci5cbiAgICAgKlxuICAgICAqXG4gICAgICogIyMjIE92ZXJyaWRpbmcgdGhlIERlZmF1bHQgVHJhbnNmb3JtYXRpb25zIFBlciBSZXF1ZXN0XG4gICAgICpcbiAgICAgKiBJZiB5b3Ugd2lzaCBvdmVycmlkZSB0aGUgcmVxdWVzdC9yZXNwb25zZSB0cmFuc2Zvcm1hdGlvbnMgb25seSBmb3IgYSBzaW5nbGUgcmVxdWVzdCB0aGVuIHByb3ZpZGVcbiAgICAgKiBgdHJhbnNmb3JtUmVxdWVzdGAgYW5kL29yIGB0cmFuc2Zvcm1SZXNwb25zZWAgcHJvcGVydGllcyBvbiB0aGUgY29uZmlndXJhdGlvbiBvYmplY3QgcGFzc2VkXG4gICAgICogaW50byBgJGh0dHBgLlxuICAgICAqXG4gICAgICogTm90ZSB0aGF0IGlmIHlvdSBwcm92aWRlIHRoZXNlIHByb3BlcnRpZXMgb24gdGhlIGNvbmZpZyBvYmplY3QgdGhlIGRlZmF1bHQgdHJhbnNmb3JtYXRpb25zIHdpbGwgYmVcbiAgICAgKiBvdmVyd3JpdHRlbi4gSWYgeW91IHdpc2ggdG8gYXVnbWVudCB0aGUgZGVmYXVsdCB0cmFuc2Zvcm1hdGlvbnMgdGhlbiB5b3UgbXVzdCBpbmNsdWRlIHRoZW0gaW4geW91clxuICAgICAqIGxvY2FsIHRyYW5zZm9ybWF0aW9uIGFycmF5LlxuICAgICAqXG4gICAgICogVGhlIGZvbGxvd2luZyBjb2RlIGRlbW9uc3RyYXRlcyBhZGRpbmcgYSBuZXcgcmVzcG9uc2UgdHJhbnNmb3JtYXRpb24gdG8gYmUgcnVuIGFmdGVyIHRoZSBkZWZhdWx0IHJlc3BvbnNlXG4gICAgICogdHJhbnNmb3JtYXRpb25zIGhhdmUgYmVlbiBydW4uXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIGZ1bmN0aW9uIGFwcGVuZFRyYW5zZm9ybShkZWZhdWx0cywgdHJhbnNmb3JtKSB7XG4gICAgICpcbiAgICAgKiAgIC8vIFdlIGNhbid0IGd1YXJhbnRlZSB0aGF0IHRoZSBkZWZhdWx0IHRyYW5zZm9ybWF0aW9uIGlzIGFuIGFycmF5XG4gICAgICogICBkZWZhdWx0cyA9IGFuZ3VsYXIuaXNBcnJheShkZWZhdWx0cykgPyBkZWZhdWx0cyA6IFtkZWZhdWx0c107XG4gICAgICpcbiAgICAgKiAgIC8vIEFwcGVuZCB0aGUgbmV3IHRyYW5zZm9ybWF0aW9uIHRvIHRoZSBkZWZhdWx0c1xuICAgICAqICAgcmV0dXJuIGRlZmF1bHRzLmNvbmNhdCh0cmFuc2Zvcm0pO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqICRodHRwKHtcbiAgICAgKiAgIHVybDogJy4uLicsXG4gICAgICogICBtZXRob2Q6ICdHRVQnLFxuICAgICAqICAgdHJhbnNmb3JtUmVzcG9uc2U6IGFwcGVuZFRyYW5zZm9ybSgkaHR0cC5kZWZhdWx0cy50cmFuc2Zvcm1SZXNwb25zZSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgICAgcmV0dXJuIGRvVHJhbnNmb3JtKHZhbHVlKTtcbiAgICAgKiAgIH0pXG4gICAgICogfSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKlxuICAgICAqICMjIENhY2hpbmdcbiAgICAgKlxuICAgICAqIFRvIGVuYWJsZSBjYWNoaW5nLCBzZXQgdGhlIHJlcXVlc3QgY29uZmlndXJhdGlvbiBgY2FjaGVgIHByb3BlcnR5IHRvIGB0cnVlYCAodG8gdXNlIGRlZmF1bHRcbiAgICAgKiBjYWNoZSkgb3IgdG8gYSBjdXN0b20gY2FjaGUgb2JqZWN0IChidWlsdCB3aXRoIHtAbGluayBuZy4kY2FjaGVGYWN0b3J5IGAkY2FjaGVGYWN0b3J5YH0pLlxuICAgICAqIFdoZW4gdGhlIGNhY2hlIGlzIGVuYWJsZWQsIGAkaHR0cGAgc3RvcmVzIHRoZSByZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXIgaW4gdGhlIHNwZWNpZmllZFxuICAgICAqIGNhY2hlLiBUaGUgbmV4dCB0aW1lIHRoZSBzYW1lIHJlcXVlc3QgaXMgbWFkZSwgdGhlIHJlc3BvbnNlIGlzIHNlcnZlZCBmcm9tIHRoZSBjYWNoZSB3aXRob3V0XG4gICAgICogc2VuZGluZyBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlci5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCBldmVuIGlmIHRoZSByZXNwb25zZSBpcyBzZXJ2ZWQgZnJvbSBjYWNoZSwgZGVsaXZlcnkgb2YgdGhlIGRhdGEgaXMgYXN5bmNocm9ub3VzIGluXG4gICAgICogdGhlIHNhbWUgd2F5IHRoYXQgcmVhbCByZXF1ZXN0cyBhcmUuXG4gICAgICpcbiAgICAgKiBJZiB0aGVyZSBhcmUgbXVsdGlwbGUgR0VUIHJlcXVlc3RzIGZvciB0aGUgc2FtZSBVUkwgdGhhdCBzaG91bGQgYmUgY2FjaGVkIHVzaW5nIHRoZSBzYW1lXG4gICAgICogY2FjaGUsIGJ1dCB0aGUgY2FjaGUgaXMgbm90IHBvcHVsYXRlZCB5ZXQsIG9ubHkgb25lIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB3aWxsIGJlIG1hZGUgYW5kXG4gICAgICogdGhlIHJlbWFpbmluZyByZXF1ZXN0cyB3aWxsIGJlIGZ1bGZpbGxlZCB1c2luZyB0aGUgcmVzcG9uc2UgZnJvbSB0aGUgZmlyc3QgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIFlvdSBjYW4gY2hhbmdlIHRoZSBkZWZhdWx0IGNhY2hlIHRvIGEgbmV3IG9iamVjdCAoYnVpbHQgd2l0aFxuICAgICAqIHtAbGluayBuZy4kY2FjaGVGYWN0b3J5IGAkY2FjaGVGYWN0b3J5YH0pIGJ5IHVwZGF0aW5nIHRoZVxuICAgICAqIHtAbGluayBuZy4kaHR0cCNkZWZhdWx0cyBgJGh0dHAuZGVmYXVsdHMuY2FjaGVgfSBwcm9wZXJ0eS4gQWxsIHJlcXVlc3RzIHdobyBzZXRcbiAgICAgKiB0aGVpciBgY2FjaGVgIHByb3BlcnR5IHRvIGB0cnVlYCB3aWxsIG5vdyB1c2UgdGhpcyBjYWNoZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBJZiB5b3Ugc2V0IHRoZSBkZWZhdWx0IGNhY2hlIHRvIGBmYWxzZWAgdGhlbiBvbmx5IHJlcXVlc3RzIHRoYXQgc3BlY2lmeSB0aGVpciBvd24gY3VzdG9tXG4gICAgICogY2FjaGUgb2JqZWN0IHdpbGwgYmUgY2FjaGVkLlxuICAgICAqXG4gICAgICogIyMgSW50ZXJjZXB0b3JzXG4gICAgICpcbiAgICAgKiBCZWZvcmUgeW91IHN0YXJ0IGNyZWF0aW5nIGludGVyY2VwdG9ycywgYmUgc3VyZSB0byB1bmRlcnN0YW5kIHRoZVxuICAgICAqIHtAbGluayBuZy4kcSAkcSBhbmQgZGVmZXJyZWQvcHJvbWlzZSBBUElzfS5cbiAgICAgKlxuICAgICAqIEZvciBwdXJwb3NlcyBvZiBnbG9iYWwgZXJyb3IgaGFuZGxpbmcsIGF1dGhlbnRpY2F0aW9uLCBvciBhbnkga2luZCBvZiBzeW5jaHJvbm91cyBvclxuICAgICAqIGFzeW5jaHJvbm91cyBwcmUtcHJvY2Vzc2luZyBvZiByZXF1ZXN0IG9yIHBvc3Rwcm9jZXNzaW5nIG9mIHJlc3BvbnNlcywgaXQgaXMgZGVzaXJhYmxlIHRvIGJlXG4gICAgICogYWJsZSB0byBpbnRlcmNlcHQgcmVxdWVzdHMgYmVmb3JlIHRoZXkgYXJlIGhhbmRlZCB0byB0aGUgc2VydmVyIGFuZFxuICAgICAqIHJlc3BvbnNlcyBiZWZvcmUgdGhleSBhcmUgaGFuZGVkIG92ZXIgdG8gdGhlIGFwcGxpY2F0aW9uIGNvZGUgdGhhdFxuICAgICAqIGluaXRpYXRlZCB0aGVzZSByZXF1ZXN0cy4gVGhlIGludGVyY2VwdG9ycyBsZXZlcmFnZSB0aGUge0BsaW5rIG5nLiRxXG4gICAgICogcHJvbWlzZSBBUElzfSB0byBmdWxmaWxsIHRoaXMgbmVlZCBmb3IgYm90aCBzeW5jaHJvbm91cyBhbmQgYXN5bmNocm9ub3VzIHByZS1wcm9jZXNzaW5nLlxuICAgICAqXG4gICAgICogVGhlIGludGVyY2VwdG9ycyBhcmUgc2VydmljZSBmYWN0b3JpZXMgdGhhdCBhcmUgcmVnaXN0ZXJlZCB3aXRoIHRoZSBgJGh0dHBQcm92aWRlcmAgYnlcbiAgICAgKiBhZGRpbmcgdGhlbSB0byB0aGUgYCRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzYCBhcnJheS4gVGhlIGZhY3RvcnkgaXMgY2FsbGVkIGFuZFxuICAgICAqIGluamVjdGVkIHdpdGggZGVwZW5kZW5jaWVzIChpZiBzcGVjaWZpZWQpIGFuZCByZXR1cm5zIHRoZSBpbnRlcmNlcHRvci5cbiAgICAgKlxuICAgICAqIFRoZXJlIGFyZSB0d28ga2luZHMgb2YgaW50ZXJjZXB0b3JzIChhbmQgdHdvIGtpbmRzIG9mIHJlamVjdGlvbiBpbnRlcmNlcHRvcnMpOlxuICAgICAqXG4gICAgICogICAqIGByZXF1ZXN0YDogaW50ZXJjZXB0b3JzIGdldCBjYWxsZWQgd2l0aCBhIGh0dHAgYGNvbmZpZ2Agb2JqZWN0LiBUaGUgZnVuY3Rpb24gaXMgZnJlZSB0b1xuICAgICAqICAgICBtb2RpZnkgdGhlIGBjb25maWdgIG9iamVjdCBvciBjcmVhdGUgYSBuZXcgb25lLiBUaGUgZnVuY3Rpb24gbmVlZHMgdG8gcmV0dXJuIHRoZSBgY29uZmlnYFxuICAgICAqICAgICBvYmplY3QgZGlyZWN0bHksIG9yIGEgcHJvbWlzZSBjb250YWluaW5nIHRoZSBgY29uZmlnYCBvciBhIG5ldyBgY29uZmlnYCBvYmplY3QuXG4gICAgICogICAqIGByZXF1ZXN0RXJyb3JgOiBpbnRlcmNlcHRvciBnZXRzIGNhbGxlZCB3aGVuIGEgcHJldmlvdXMgaW50ZXJjZXB0b3IgdGhyZXcgYW4gZXJyb3Igb3JcbiAgICAgKiAgICAgcmVzb2x2ZWQgd2l0aCBhIHJlamVjdGlvbi5cbiAgICAgKiAgICogYHJlc3BvbnNlYDogaW50ZXJjZXB0b3JzIGdldCBjYWxsZWQgd2l0aCBodHRwIGByZXNwb25zZWAgb2JqZWN0LiBUaGUgZnVuY3Rpb24gaXMgZnJlZSB0b1xuICAgICAqICAgICBtb2RpZnkgdGhlIGByZXNwb25zZWAgb2JqZWN0IG9yIGNyZWF0ZSBhIG5ldyBvbmUuIFRoZSBmdW5jdGlvbiBuZWVkcyB0byByZXR1cm4gdGhlIGByZXNwb25zZWBcbiAgICAgKiAgICAgb2JqZWN0IGRpcmVjdGx5LCBvciBhcyBhIHByb21pc2UgY29udGFpbmluZyB0aGUgYHJlc3BvbnNlYCBvciBhIG5ldyBgcmVzcG9uc2VgIG9iamVjdC5cbiAgICAgKiAgICogYHJlc3BvbnNlRXJyb3JgOiBpbnRlcmNlcHRvciBnZXRzIGNhbGxlZCB3aGVuIGEgcHJldmlvdXMgaW50ZXJjZXB0b3IgdGhyZXcgYW4gZXJyb3Igb3JcbiAgICAgKiAgICAgcmVzb2x2ZWQgd2l0aCBhIHJlamVjdGlvbi5cbiAgICAgKlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAgIC8vIHJlZ2lzdGVyIHRoZSBpbnRlcmNlcHRvciBhcyBhIHNlcnZpY2VcbiAgICAgKiAgICRwcm92aWRlLmZhY3RvcnkoJ215SHR0cEludGVyY2VwdG9yJywgZnVuY3Rpb24oJHEsIGRlcGVuZGVuY3kxLCBkZXBlbmRlbmN5Mikge1xuICAgICAqICAgICByZXR1cm4ge1xuICAgICAqICAgICAgIC8vIG9wdGlvbmFsIG1ldGhvZFxuICAgICAqICAgICAgICdyZXF1ZXN0JzogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICogICAgICAgICAvLyBkbyBzb21ldGhpbmcgb24gc3VjY2Vzc1xuICAgICAqICAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgKiAgICAgICB9LFxuICAgICAqXG4gICAgICogICAgICAgLy8gb3B0aW9uYWwgbWV0aG9kXG4gICAgICogICAgICAncmVxdWVzdEVycm9yJzogZnVuY3Rpb24ocmVqZWN0aW9uKSB7XG4gICAgICogICAgICAgICAvLyBkbyBzb21ldGhpbmcgb24gZXJyb3JcbiAgICAgKiAgICAgICAgIGlmIChjYW5SZWNvdmVyKHJlamVjdGlvbikpIHtcbiAgICAgKiAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlT3JOZXdQcm9taXNlXG4gICAgICogICAgICAgICB9XG4gICAgICogICAgICAgICByZXR1cm4gJHEucmVqZWN0KHJlamVjdGlvbik7XG4gICAgICogICAgICAgfSxcbiAgICAgKlxuICAgICAqXG4gICAgICpcbiAgICAgKiAgICAgICAvLyBvcHRpb25hbCBtZXRob2RcbiAgICAgKiAgICAgICAncmVzcG9uc2UnOiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAqICAgICAgICAgLy8gZG8gc29tZXRoaW5nIG9uIHN1Y2Nlc3NcbiAgICAgKiAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgKiAgICAgICB9LFxuICAgICAqXG4gICAgICogICAgICAgLy8gb3B0aW9uYWwgbWV0aG9kXG4gICAgICogICAgICAncmVzcG9uc2VFcnJvcic6IGZ1bmN0aW9uKHJlamVjdGlvbikge1xuICAgICAqICAgICAgICAgLy8gZG8gc29tZXRoaW5nIG9uIGVycm9yXG4gICAgICogICAgICAgICBpZiAoY2FuUmVjb3ZlcihyZWplY3Rpb24pKSB7XG4gICAgICogICAgICAgICAgIHJldHVybiByZXNwb25zZU9yTmV3UHJvbWlzZVxuICAgICAqICAgICAgICAgfVxuICAgICAqICAgICAgICAgcmV0dXJuICRxLnJlamVjdChyZWplY3Rpb24pO1xuICAgICAqICAgICAgIH1cbiAgICAgKiAgICAgfTtcbiAgICAgKiAgIH0pO1xuICAgICAqXG4gICAgICogICAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5wdXNoKCdteUh0dHBJbnRlcmNlcHRvcicpO1xuICAgICAqXG4gICAgICpcbiAgICAgKiAgIC8vIGFsdGVybmF0aXZlbHksIHJlZ2lzdGVyIHRoZSBpbnRlcmNlcHRvciB2aWEgYW4gYW5vbnltb3VzIGZhY3RvcnlcbiAgICAgKiAgICRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLnB1c2goZnVuY3Rpb24oJHEsIGRlcGVuZGVuY3kxLCBkZXBlbmRlbmN5Mikge1xuICAgICAqICAgICByZXR1cm4ge1xuICAgICAqICAgICAgJ3JlcXVlc3QnOiBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgKiAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlXG4gICAgICogICAgICAgfSxcbiAgICAgKlxuICAgICAqICAgICAgICdyZXNwb25zZSc6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICogICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZVxuICAgICAqICAgICAgIH1cbiAgICAgKiAgICAgfTtcbiAgICAgKiAgIH0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogIyMgU2VjdXJpdHkgQ29uc2lkZXJhdGlvbnNcbiAgICAgKlxuICAgICAqIFdoZW4gZGVzaWduaW5nIHdlYiBhcHBsaWNhdGlvbnMsIGNvbnNpZGVyIHNlY3VyaXR5IHRocmVhdHMgZnJvbTpcbiAgICAgKlxuICAgICAqIC0gW0pTT04gdnVsbmVyYWJpbGl0eV0oaHR0cDovL2hhYWNrZWQuY29tL2FyY2hpdmUvMjAwOC8xMS8yMC9hbmF0b215LW9mLWEtc3VidGxlLWpzb24tdnVsbmVyYWJpbGl0eS5hc3B4KVxuICAgICAqIC0gW1hTUkZdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3Jvc3Mtc2l0ZV9yZXF1ZXN0X2ZvcmdlcnkpXG4gICAgICpcbiAgICAgKiBCb3RoIHNlcnZlciBhbmQgdGhlIGNsaWVudCBtdXN0IGNvb3BlcmF0ZSBpbiBvcmRlciB0byBlbGltaW5hdGUgdGhlc2UgdGhyZWF0cy4gQW5ndWxhciBjb21lc1xuICAgICAqIHByZS1jb25maWd1cmVkIHdpdGggc3RyYXRlZ2llcyB0aGF0IGFkZHJlc3MgdGhlc2UgaXNzdWVzLCBidXQgZm9yIHRoaXMgdG8gd29yayBiYWNrZW5kIHNlcnZlclxuICAgICAqIGNvb3BlcmF0aW9uIGlzIHJlcXVpcmVkLlxuICAgICAqXG4gICAgICogIyMjIEpTT04gVnVsbmVyYWJpbGl0eSBQcm90ZWN0aW9uXG4gICAgICpcbiAgICAgKiBBIFtKU09OIHZ1bG5lcmFiaWxpdHldKGh0dHA6Ly9oYWFja2VkLmNvbS9hcmNoaXZlLzIwMDgvMTEvMjAvYW5hdG9teS1vZi1hLXN1YnRsZS1qc29uLXZ1bG5lcmFiaWxpdHkuYXNweClcbiAgICAgKiBhbGxvd3MgdGhpcmQgcGFydHkgd2Vic2l0ZSB0byB0dXJuIHlvdXIgSlNPTiByZXNvdXJjZSBVUkwgaW50b1xuICAgICAqIFtKU09OUF0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9KU09OUCkgcmVxdWVzdCB1bmRlciBzb21lIGNvbmRpdGlvbnMuIFRvXG4gICAgICogY291bnRlciB0aGlzIHlvdXIgc2VydmVyIGNhbiBwcmVmaXggYWxsIEpTT04gcmVxdWVzdHMgd2l0aCBmb2xsb3dpbmcgc3RyaW5nIGBcIildfScsXFxuXCJgLlxuICAgICAqIEFuZ3VsYXIgd2lsbCBhdXRvbWF0aWNhbGx5IHN0cmlwIHRoZSBwcmVmaXggYmVmb3JlIHByb2Nlc3NpbmcgaXQgYXMgSlNPTi5cbiAgICAgKlxuICAgICAqIEZvciBleGFtcGxlIGlmIHlvdXIgc2VydmVyIG5lZWRzIHRvIHJldHVybjpcbiAgICAgKiBgYGBqc1xuICAgICAqIFsnb25lJywndHdvJ11cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIHdoaWNoIGlzIHZ1bG5lcmFibGUgdG8gYXR0YWNrLCB5b3VyIHNlcnZlciBjYW4gcmV0dXJuOlxuICAgICAqIGBgYGpzXG4gICAgICogKV19JyxcbiAgICAgKiBbJ29uZScsJ3R3byddXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBBbmd1bGFyIHdpbGwgc3RyaXAgdGhlIHByZWZpeCwgYmVmb3JlIHByb2Nlc3NpbmcgdGhlIEpTT04uXG4gICAgICpcbiAgICAgKlxuICAgICAqICMjIyBDcm9zcyBTaXRlIFJlcXVlc3QgRm9yZ2VyeSAoWFNSRikgUHJvdGVjdGlvblxuICAgICAqXG4gICAgICogW1hTUkZdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3Jvc3Mtc2l0ZV9yZXF1ZXN0X2ZvcmdlcnkpIGlzIGEgdGVjaG5pcXVlIGJ5IHdoaWNoXG4gICAgICogYW4gdW5hdXRob3JpemVkIHNpdGUgY2FuIGdhaW4geW91ciB1c2VyJ3MgcHJpdmF0ZSBkYXRhLiBBbmd1bGFyIHByb3ZpZGVzIGEgbWVjaGFuaXNtXG4gICAgICogdG8gY291bnRlciBYU1JGLiBXaGVuIHBlcmZvcm1pbmcgWEhSIHJlcXVlc3RzLCB0aGUgJGh0dHAgc2VydmljZSByZWFkcyBhIHRva2VuIGZyb20gYSBjb29raWVcbiAgICAgKiAoYnkgZGVmYXVsdCwgYFhTUkYtVE9LRU5gKSBhbmQgc2V0cyBpdCBhcyBhbiBIVFRQIGhlYWRlciAoYFgtWFNSRi1UT0tFTmApLiBTaW5jZSBvbmx5XG4gICAgICogSmF2YVNjcmlwdCB0aGF0IHJ1bnMgb24geW91ciBkb21haW4gY291bGQgcmVhZCB0aGUgY29va2llLCB5b3VyIHNlcnZlciBjYW4gYmUgYXNzdXJlZCB0aGF0XG4gICAgICogdGhlIFhIUiBjYW1lIGZyb20gSmF2YVNjcmlwdCBydW5uaW5nIG9uIHlvdXIgZG9tYWluLiBUaGUgaGVhZGVyIHdpbGwgbm90IGJlIHNldCBmb3JcbiAgICAgKiBjcm9zcy1kb21haW4gcmVxdWVzdHMuXG4gICAgICpcbiAgICAgKiBUbyB0YWtlIGFkdmFudGFnZSBvZiB0aGlzLCB5b3VyIHNlcnZlciBuZWVkcyB0byBzZXQgYSB0b2tlbiBpbiBhIEphdmFTY3JpcHQgcmVhZGFibGUgc2Vzc2lvblxuICAgICAqIGNvb2tpZSBjYWxsZWQgYFhTUkYtVE9LRU5gIG9uIHRoZSBmaXJzdCBIVFRQIEdFVCByZXF1ZXN0LiBPbiBzdWJzZXF1ZW50IFhIUiByZXF1ZXN0cyB0aGVcbiAgICAgKiBzZXJ2ZXIgY2FuIHZlcmlmeSB0aGF0IHRoZSBjb29raWUgbWF0Y2hlcyBgWC1YU1JGLVRPS0VOYCBIVFRQIGhlYWRlciwgYW5kIHRoZXJlZm9yZSBiZSBzdXJlXG4gICAgICogdGhhdCBvbmx5IEphdmFTY3JpcHQgcnVubmluZyBvbiB5b3VyIGRvbWFpbiBjb3VsZCBoYXZlIHNlbnQgdGhlIHJlcXVlc3QuIFRoZSB0b2tlbiBtdXN0IGJlXG4gICAgICogdW5pcXVlIGZvciBlYWNoIHVzZXIgYW5kIG11c3QgYmUgdmVyaWZpYWJsZSBieSB0aGUgc2VydmVyICh0byBwcmV2ZW50IHRoZSBKYXZhU2NyaXB0IGZyb21cbiAgICAgKiBtYWtpbmcgdXAgaXRzIG93biB0b2tlbnMpLiBXZSByZWNvbW1lbmQgdGhhdCB0aGUgdG9rZW4gaXMgYSBkaWdlc3Qgb2YgeW91ciBzaXRlJ3NcbiAgICAgKiBhdXRoZW50aWNhdGlvbiBjb29raWUgd2l0aCBhIFtzYWx0XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TYWx0XyhjcnlwdG9ncmFwaHkmIzQxOylcbiAgICAgKiBmb3IgYWRkZWQgc2VjdXJpdHkuXG4gICAgICpcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgaGVhZGVycyBjYW4gYmUgc3BlY2lmaWVkIHVzaW5nIHRoZSB4c3JmSGVhZGVyTmFtZSBhbmQgeHNyZkNvb2tpZU5hbWVcbiAgICAgKiBwcm9wZXJ0aWVzIG9mIGVpdGhlciAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzIGF0IGNvbmZpZy10aW1lLCAkaHR0cC5kZWZhdWx0cyBhdCBydW4tdGltZSxcbiAgICAgKiBvciB0aGUgcGVyLXJlcXVlc3QgY29uZmlnIG9iamVjdC5cbiAgICAgKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBPYmplY3QgZGVzY3JpYmluZyB0aGUgcmVxdWVzdCB0byBiZSBtYWRlIGFuZCBob3cgaXQgc2hvdWxkIGJlXG4gICAgICogICAgcHJvY2Vzc2VkLiBUaGUgb2JqZWN0IGhhcyBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICAgKlxuICAgICAqICAgIC0gKiptZXRob2QqKiDigJMgYHtzdHJpbmd9YCDigJMgSFRUUCBtZXRob2QgKGUuZy4gJ0dFVCcsICdQT1NUJywgZXRjKVxuICAgICAqICAgIC0gKip1cmwqKiDigJMgYHtzdHJpbmd9YCDigJMgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIG9mIHRoZSByZXNvdXJjZSB0aGF0IGlzIGJlaW5nIHJlcXVlc3RlZC5cbiAgICAgKiAgICAtICoqcGFyYW1zKiog4oCTIGB7T2JqZWN0LjxzdHJpbmd8T2JqZWN0Pn1gIOKAkyBNYXAgb2Ygc3RyaW5ncyBvciBvYmplY3RzIHdoaWNoIHdpbGwgYmUgdHVybmVkXG4gICAgICogICAgICB0byBgP2tleTE9dmFsdWUxJmtleTI9dmFsdWUyYCBhZnRlciB0aGUgdXJsLiBJZiB0aGUgdmFsdWUgaXMgbm90IGEgc3RyaW5nLCBpdCB3aWxsIGJlXG4gICAgICogICAgICBKU09OaWZpZWQuXG4gICAgICogICAgLSAqKmRhdGEqKiDigJMgYHtzdHJpbmd8T2JqZWN0fWAg4oCTIERhdGEgdG8gYmUgc2VudCBhcyB0aGUgcmVxdWVzdCBtZXNzYWdlIGRhdGEuXG4gICAgICogICAgLSAqKmhlYWRlcnMqKiDigJMgYHtPYmplY3R9YCDigJMgTWFwIG9mIHN0cmluZ3Mgb3IgZnVuY3Rpb25zIHdoaWNoIHJldHVybiBzdHJpbmdzIHJlcHJlc2VudGluZ1xuICAgICAqICAgICAgSFRUUCBoZWFkZXJzIHRvIHNlbmQgdG8gdGhlIHNlcnZlci4gSWYgdGhlIHJldHVybiB2YWx1ZSBvZiBhIGZ1bmN0aW9uIGlzIG51bGwsIHRoZVxuICAgICAqICAgICAgaGVhZGVyIHdpbGwgbm90IGJlIHNlbnQuXG4gICAgICogICAgLSAqKnhzcmZIZWFkZXJOYW1lKiog4oCTIGB7c3RyaW5nfWAg4oCTIE5hbWUgb2YgSFRUUCBoZWFkZXIgdG8gcG9wdWxhdGUgd2l0aCB0aGUgWFNSRiB0b2tlbi5cbiAgICAgKiAgICAtICoqeHNyZkNvb2tpZU5hbWUqKiDigJMgYHtzdHJpbmd9YCDigJMgTmFtZSBvZiBjb29raWUgY29udGFpbmluZyB0aGUgWFNSRiB0b2tlbi5cbiAgICAgKiAgICAtICoqdHJhbnNmb3JtUmVxdWVzdCoqIOKAk1xuICAgICAqICAgICAgYHtmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyKXxBcnJheS48ZnVuY3Rpb24oZGF0YSwgaGVhZGVyc0dldHRlcik+fWAg4oCTXG4gICAgICogICAgICB0cmFuc2Zvcm0gZnVuY3Rpb24gb3IgYW4gYXJyYXkgb2Ygc3VjaCBmdW5jdGlvbnMuIFRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gdGFrZXMgdGhlIGh0dHBcbiAgICAgKiAgICAgIHJlcXVlc3QgYm9keSBhbmQgaGVhZGVycyBhbmQgcmV0dXJucyBpdHMgdHJhbnNmb3JtZWQgKHR5cGljYWxseSBzZXJpYWxpemVkKSB2ZXJzaW9uLlxuICAgICAqICAgICAgU2VlIHtAbGluayBuZy4kaHR0cCNvdmVycmlkaW5nLXRoZS1kZWZhdWx0LXRyYW5zZm9ybWF0aW9ucy1wZXItcmVxdWVzdFxuICAgICAqICAgICAgT3ZlcnJpZGluZyB0aGUgRGVmYXVsdCBUcmFuc2Zvcm1hdGlvbnN9XG4gICAgICogICAgLSAqKnRyYW5zZm9ybVJlc3BvbnNlKiog4oCTXG4gICAgICogICAgICBge2Z1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIsIHN0YXR1cyl8QXJyYXkuPGZ1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIsIHN0YXR1cyk+fWAg4oCTXG4gICAgICogICAgICB0cmFuc2Zvcm0gZnVuY3Rpb24gb3IgYW4gYXJyYXkgb2Ygc3VjaCBmdW5jdGlvbnMuIFRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gdGFrZXMgdGhlIGh0dHBcbiAgICAgKiAgICAgIHJlc3BvbnNlIGJvZHksIGhlYWRlcnMgYW5kIHN0YXR1cyBhbmQgcmV0dXJucyBpdHMgdHJhbnNmb3JtZWQgKHR5cGljYWxseSBkZXNlcmlhbGl6ZWQpIHZlcnNpb24uXG4gICAgICogICAgICBTZWUge0BsaW5rIG5nLiRodHRwI292ZXJyaWRpbmctdGhlLWRlZmF1bHQtdHJhbnNmb3JtYXRpb25zLXBlci1yZXF1ZXN0XG4gICAgICogICAgICBPdmVycmlkaW5nIHRoZSBEZWZhdWx0IFRyYW5zZm9ybWF0aW9uc31cbiAgICAgKiAgICAtICoqY2FjaGUqKiDigJMgYHtib29sZWFufENhY2hlfWAg4oCTIElmIHRydWUsIGEgZGVmYXVsdCAkaHR0cCBjYWNoZSB3aWxsIGJlIHVzZWQgdG8gY2FjaGUgdGhlXG4gICAgICogICAgICBHRVQgcmVxdWVzdCwgb3RoZXJ3aXNlIGlmIGEgY2FjaGUgaW5zdGFuY2UgYnVpbHQgd2l0aFxuICAgICAqICAgICAge0BsaW5rIG5nLiRjYWNoZUZhY3RvcnkgJGNhY2hlRmFjdG9yeX0sIHRoaXMgY2FjaGUgd2lsbCBiZSB1c2VkIGZvclxuICAgICAqICAgICAgY2FjaGluZy5cbiAgICAgKiAgICAtICoqdGltZW91dCoqIOKAkyBge251bWJlcnxQcm9taXNlfWAg4oCTIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzLCBvciB7QGxpbmsgbmcuJHEgcHJvbWlzZX1cbiAgICAgKiAgICAgIHRoYXQgc2hvdWxkIGFib3J0IHRoZSByZXF1ZXN0IHdoZW4gcmVzb2x2ZWQuXG4gICAgICogICAgLSAqKndpdGhDcmVkZW50aWFscyoqIC0gYHtib29sZWFufWAgLSB3aGV0aGVyIHRvIHNldCB0aGUgYHdpdGhDcmVkZW50aWFsc2AgZmxhZyBvbiB0aGVcbiAgICAgKiAgICAgIFhIUiBvYmplY3QuIFNlZSBbcmVxdWVzdHMgd2l0aCBjcmVkZW50aWFsc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvSFRUUC9BY2Nlc3NfY29udHJvbF9DT1JTI1JlcXVlc3RzX3dpdGhfY3JlZGVudGlhbHMpXG4gICAgICogICAgICBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAgKiAgICAtICoqcmVzcG9uc2VUeXBlKiogLSBge3N0cmluZ31gIC0gc2VlXG4gICAgICogICAgICBbcmVxdWVzdFR5cGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvRE9NL1hNTEh0dHBSZXF1ZXN0I3Jlc3BvbnNlVHlwZSkuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IFJldHVybnMgYSB7QGxpbmsgbmcuJHEgcHJvbWlzZX0gb2JqZWN0IHdpdGggdGhlXG4gICAgICogICBzdGFuZGFyZCBgdGhlbmAgbWV0aG9kIGFuZCB0d28gaHR0cCBzcGVjaWZpYyBtZXRob2RzOiBgc3VjY2Vzc2AgYW5kIGBlcnJvcmAuIFRoZSBgdGhlbmBcbiAgICAgKiAgIG1ldGhvZCB0YWtlcyB0d28gYXJndW1lbnRzIGEgc3VjY2VzcyBhbmQgYW4gZXJyb3IgY2FsbGJhY2sgd2hpY2ggd2lsbCBiZSBjYWxsZWQgd2l0aCBhXG4gICAgICogICByZXNwb25zZSBvYmplY3QuIFRoZSBgc3VjY2Vzc2AgYW5kIGBlcnJvcmAgbWV0aG9kcyB0YWtlIGEgc2luZ2xlIGFyZ3VtZW50IC0gYSBmdW5jdGlvbiB0aGF0XG4gICAgICogICB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSByZXF1ZXN0IHN1Y2NlZWRzIG9yIGZhaWxzIHJlc3BlY3RpdmVseS4gVGhlIGFyZ3VtZW50cyBwYXNzZWQgaW50b1xuICAgICAqICAgdGhlc2UgZnVuY3Rpb25zIGFyZSBkZXN0cnVjdHVyZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIHJlc3BvbnNlIG9iamVjdCBwYXNzZWQgaW50byB0aGVcbiAgICAgKiAgIGB0aGVuYCBtZXRob2QuIFRoZSByZXNwb25zZSBvYmplY3QgaGFzIHRoZXNlIHByb3BlcnRpZXM6XG4gICAgICpcbiAgICAgKiAgIC0gKipkYXRhKiog4oCTIGB7c3RyaW5nfE9iamVjdH1gIOKAkyBUaGUgcmVzcG9uc2UgYm9keSB0cmFuc2Zvcm1lZCB3aXRoIHRoZSB0cmFuc2Zvcm1cbiAgICAgKiAgICAgZnVuY3Rpb25zLlxuICAgICAqICAgLSAqKnN0YXR1cyoqIOKAkyBge251bWJlcn1gIOKAkyBIVFRQIHN0YXR1cyBjb2RlIG9mIHRoZSByZXNwb25zZS5cbiAgICAgKiAgIC0gKipoZWFkZXJzKiog4oCTIGB7ZnVuY3Rpb24oW2hlYWRlck5hbWVdKX1gIOKAkyBIZWFkZXIgZ2V0dGVyIGZ1bmN0aW9uLlxuICAgICAqICAgLSAqKmNvbmZpZyoqIOKAkyBge09iamVjdH1gIOKAkyBUaGUgY29uZmlndXJhdGlvbiBvYmplY3QgdGhhdCB3YXMgdXNlZCB0byBnZW5lcmF0ZSB0aGUgcmVxdWVzdC5cbiAgICAgKiAgIC0gKipzdGF0dXNUZXh0Kiog4oCTIGB7c3RyaW5nfWAg4oCTIEhUVFAgc3RhdHVzIHRleHQgb2YgdGhlIHJlc3BvbnNlLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHtBcnJheS48T2JqZWN0Pn0gcGVuZGluZ1JlcXVlc3RzIEFycmF5IG9mIGNvbmZpZyBvYmplY3RzIGZvciBjdXJyZW50bHkgcGVuZGluZ1xuICAgICAqICAgcmVxdWVzdHMuIFRoaXMgaXMgcHJpbWFyaWx5IG1lYW50IHRvIGJlIHVzZWQgZm9yIGRlYnVnZ2luZyBwdXJwb3Nlcy5cbiAgICAgKlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbjxleGFtcGxlIG1vZHVsZT1cImh0dHBFeGFtcGxlXCI+XG48ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJGZXRjaENvbnRyb2xsZXJcIj5cbiAgICA8c2VsZWN0IG5nLW1vZGVsPVwibWV0aG9kXCI+XG4gICAgICA8b3B0aW9uPkdFVDwvb3B0aW9uPlxuICAgICAgPG9wdGlvbj5KU09OUDwvb3B0aW9uPlxuICAgIDwvc2VsZWN0PlxuICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwidXJsXCIgc2l6ZT1cIjgwXCIvPlxuICAgIDxidXR0b24gaWQ9XCJmZXRjaGJ0blwiIG5nLWNsaWNrPVwiZmV0Y2goKVwiPmZldGNoPC9idXR0b24+PGJyPlxuICAgIDxidXR0b24gaWQ9XCJzYW1wbGVnZXRidG5cIiBuZy1jbGljaz1cInVwZGF0ZU1vZGVsKCdHRVQnLCAnaHR0cC1oZWxsby5odG1sJylcIj5TYW1wbGUgR0VUPC9idXR0b24+XG4gICAgPGJ1dHRvbiBpZD1cInNhbXBsZWpzb25wYnRuXCJcbiAgICAgIG5nLWNsaWNrPVwidXBkYXRlTW9kZWwoJ0pTT05QJyxcbiAgICAgICAgICAgICAgICAgICAgJ2h0dHBzOi8vYW5ndWxhcmpzLm9yZy9ncmVldC5waHA/Y2FsbGJhY2s9SlNPTl9DQUxMQkFDSyZuYW1lPVN1cGVyJTIwSGVybycpXCI+XG4gICAgICBTYW1wbGUgSlNPTlBcbiAgICA8L2J1dHRvbj5cbiAgICA8YnV0dG9uIGlkPVwiaW52YWxpZGpzb25wYnRuXCJcbiAgICAgIG5nLWNsaWNrPVwidXBkYXRlTW9kZWwoJ0pTT05QJywgJ2h0dHBzOi8vYW5ndWxhcmpzLm9yZy9kb2VzbnRleGlzdCZjYWxsYmFjaz1KU09OX0NBTExCQUNLJylcIj5cbiAgICAgICAgSW52YWxpZCBKU09OUFxuICAgICAgPC9idXR0b24+XG4gICAgPHByZT5odHRwIHN0YXR1cyBjb2RlOiB7e3N0YXR1c319PC9wcmU+XG4gICAgPHByZT5odHRwIHJlc3BvbnNlIGRhdGE6IHt7ZGF0YX19PC9wcmU+XG4gIDwvZGl2PlxuPC9maWxlPlxuPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICBhbmd1bGFyLm1vZHVsZSgnaHR0cEV4YW1wbGUnLCBbXSlcbiAgICAuY29udHJvbGxlcignRmV0Y2hDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGh0dHAnLCAnJHRlbXBsYXRlQ2FjaGUnLFxuICAgICAgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCwgJHRlbXBsYXRlQ2FjaGUpIHtcbiAgICAgICAgJHNjb3BlLm1ldGhvZCA9ICdHRVQnO1xuICAgICAgICAkc2NvcGUudXJsID0gJ2h0dHAtaGVsbG8uaHRtbCc7XG5cbiAgICAgICAgJHNjb3BlLmZldGNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJHNjb3BlLmNvZGUgPSBudWxsO1xuICAgICAgICAgICRzY29wZS5yZXNwb25zZSA9IG51bGw7XG5cbiAgICAgICAgICAkaHR0cCh7bWV0aG9kOiAkc2NvcGUubWV0aG9kLCB1cmw6ICRzY29wZS51cmwsIGNhY2hlOiAkdGVtcGxhdGVDYWNoZX0pLlxuICAgICAgICAgICAgc3VjY2VzcyhmdW5jdGlvbihkYXRhLCBzdGF0dXMpIHtcbiAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHN0YXR1cztcbiAgICAgICAgICAgICAgJHNjb3BlLmRhdGEgPSBkYXRhO1xuICAgICAgICAgICAgfSkuXG4gICAgICAgICAgICBlcnJvcihmdW5jdGlvbihkYXRhLCBzdGF0dXMpIHtcbiAgICAgICAgICAgICAgJHNjb3BlLmRhdGEgPSBkYXRhIHx8IFwiUmVxdWVzdCBmYWlsZWRcIjtcbiAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHN0YXR1cztcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUudXBkYXRlTW9kZWwgPSBmdW5jdGlvbihtZXRob2QsIHVybCkge1xuICAgICAgICAgICRzY29wZS5tZXRob2QgPSBtZXRob2Q7XG4gICAgICAgICAgJHNjb3BlLnVybCA9IHVybDtcbiAgICAgICAgfTtcbiAgICAgIH1dKTtcbjwvZmlsZT5cbjxmaWxlIG5hbWU9XCJodHRwLWhlbGxvLmh0bWxcIj5cbiAgSGVsbG8sICRodHRwIVxuPC9maWxlPlxuPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICB2YXIgc3RhdHVzID0gZWxlbWVudChieS5iaW5kaW5nKCdzdGF0dXMnKSk7XG4gIHZhciBkYXRhID0gZWxlbWVudChieS5iaW5kaW5nKCdkYXRhJykpO1xuICB2YXIgZmV0Y2hCdG4gPSBlbGVtZW50KGJ5LmlkKCdmZXRjaGJ0bicpKTtcbiAgdmFyIHNhbXBsZUdldEJ0biA9IGVsZW1lbnQoYnkuaWQoJ3NhbXBsZWdldGJ0bicpKTtcbiAgdmFyIHNhbXBsZUpzb25wQnRuID0gZWxlbWVudChieS5pZCgnc2FtcGxlanNvbnBidG4nKSk7XG4gIHZhciBpbnZhbGlkSnNvbnBCdG4gPSBlbGVtZW50KGJ5LmlkKCdpbnZhbGlkanNvbnBidG4nKSk7XG5cbiAgaXQoJ3Nob3VsZCBtYWtlIGFuIHhociBHRVQgcmVxdWVzdCcsIGZ1bmN0aW9uKCkge1xuICAgIHNhbXBsZUdldEJ0bi5jbGljaygpO1xuICAgIGZldGNoQnRuLmNsaWNrKCk7XG4gICAgZXhwZWN0KHN0YXR1cy5nZXRUZXh0KCkpLnRvTWF0Y2goJzIwMCcpO1xuICAgIGV4cGVjdChkYXRhLmdldFRleHQoKSkudG9NYXRjaCgvSGVsbG8sIFxcJGh0dHAhLyk7XG4gIH0pO1xuXG4vLyBDb21tZW50ZWQgb3V0IGR1ZSB0byBmbGFrZXMuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy85MTg1XG4vLyBpdCgnc2hvdWxkIG1ha2UgYSBKU09OUCByZXF1ZXN0IHRvIGFuZ3VsYXJqcy5vcmcnLCBmdW5jdGlvbigpIHtcbi8vICAgc2FtcGxlSnNvbnBCdG4uY2xpY2soKTtcbi8vICAgZmV0Y2hCdG4uY2xpY2soKTtcbi8vICAgZXhwZWN0KHN0YXR1cy5nZXRUZXh0KCkpLnRvTWF0Y2goJzIwMCcpO1xuLy8gICBleHBlY3QoZGF0YS5nZXRUZXh0KCkpLnRvTWF0Y2goL1N1cGVyIEhlcm8hLyk7XG4vLyB9KTtcblxuICBpdCgnc2hvdWxkIG1ha2UgSlNPTlAgcmVxdWVzdCB0byBpbnZhbGlkIFVSTCBhbmQgaW52b2tlIHRoZSBlcnJvciBoYW5kbGVyJyxcbiAgICAgIGZ1bmN0aW9uKCkge1xuICAgIGludmFsaWRKc29ucEJ0bi5jbGljaygpO1xuICAgIGZldGNoQnRuLmNsaWNrKCk7XG4gICAgZXhwZWN0KHN0YXR1cy5nZXRUZXh0KCkpLnRvTWF0Y2goJzAnKTtcbiAgICBleHBlY3QoZGF0YS5nZXRUZXh0KCkpLnRvTWF0Y2goJ1JlcXVlc3QgZmFpbGVkJyk7XG4gIH0pO1xuPC9maWxlPlxuPC9leGFtcGxlPlxuICAgICAqL1xuICAgIGZ1bmN0aW9uICRodHRwKHJlcXVlc3RDb25maWcpIHtcblxuICAgICAgaWYgKCFhbmd1bGFyLmlzT2JqZWN0KHJlcXVlc3RDb25maWcpKSB7XG4gICAgICAgIHRocm93IG1pbkVycignJGh0dHAnKSgnYmFkcmVxJywgJ0h0dHAgcmVxdWVzdCBjb25maWd1cmF0aW9uIG11c3QgYmUgYW4gb2JqZWN0LiAgUmVjZWl2ZWQ6IHswfScsIHJlcXVlc3RDb25maWcpO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29uZmlnID0gZXh0ZW5kKHtcbiAgICAgICAgbWV0aG9kOiAnZ2V0JyxcbiAgICAgICAgdHJhbnNmb3JtUmVxdWVzdDogZGVmYXVsdHMudHJhbnNmb3JtUmVxdWVzdCxcbiAgICAgICAgdHJhbnNmb3JtUmVzcG9uc2U6IGRlZmF1bHRzLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICB9LCByZXF1ZXN0Q29uZmlnKTtcblxuICAgICAgY29uZmlnLmhlYWRlcnMgPSBtZXJnZUhlYWRlcnMocmVxdWVzdENvbmZpZyk7XG4gICAgICBjb25maWcubWV0aG9kID0gdXBwZXJjYXNlKGNvbmZpZy5tZXRob2QpO1xuXG4gICAgICB2YXIgc2VydmVyUmVxdWVzdCA9IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgICAgICB2YXIgaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xuICAgICAgICB2YXIgcmVxRGF0YSA9IHRyYW5zZm9ybURhdGEoY29uZmlnLmRhdGEsIGhlYWRlcnNHZXR0ZXIoaGVhZGVycyksIHVuZGVmaW5lZCwgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3QpO1xuXG4gICAgICAgIC8vIHN0cmlwIGNvbnRlbnQtdHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICBpZiAoaXNVbmRlZmluZWQocmVxRGF0YSkpIHtcbiAgICAgICAgICBmb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uKHZhbHVlLCBoZWFkZXIpIHtcbiAgICAgICAgICAgIGlmIChsb3dlcmNhc2UoaGVhZGVyKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgaGVhZGVyc1toZWFkZXJdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpICYmICFpc1VuZGVmaW5lZChkZWZhdWx0cy53aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICAgICAgY29uZmlnLndpdGhDcmVkZW50aWFscyA9IGRlZmF1bHRzLndpdGhDcmVkZW50aWFscztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNlbmQgcmVxdWVzdFxuICAgICAgICByZXR1cm4gc2VuZFJlcShjb25maWcsIHJlcURhdGEpLnRoZW4odHJhbnNmb3JtUmVzcG9uc2UsIHRyYW5zZm9ybVJlc3BvbnNlKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBjaGFpbiA9IFtzZXJ2ZXJSZXF1ZXN0LCB1bmRlZmluZWRdO1xuICAgICAgdmFyIHByb21pc2UgPSAkcS53aGVuKGNvbmZpZyk7XG5cbiAgICAgIC8vIGFwcGx5IGludGVyY2VwdG9yc1xuICAgICAgZm9yRWFjaChyZXZlcnNlZEludGVyY2VwdG9ycywgZnVuY3Rpb24oaW50ZXJjZXB0b3IpIHtcbiAgICAgICAgaWYgKGludGVyY2VwdG9yLnJlcXVlc3QgfHwgaW50ZXJjZXB0b3IucmVxdWVzdEVycm9yKSB7XG4gICAgICAgICAgY2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5yZXF1ZXN0LCBpbnRlcmNlcHRvci5yZXF1ZXN0RXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnRlcmNlcHRvci5yZXNwb25zZSB8fCBpbnRlcmNlcHRvci5yZXNwb25zZUVycm9yKSB7XG4gICAgICAgICAgY2hhaW4ucHVzaChpbnRlcmNlcHRvci5yZXNwb25zZSwgaW50ZXJjZXB0b3IucmVzcG9uc2VFcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG4gICAgICAgIHZhciB0aGVuRm4gPSBjaGFpbi5zaGlmdCgpO1xuICAgICAgICB2YXIgcmVqZWN0Rm4gPSBjaGFpbi5zaGlmdCgpO1xuXG4gICAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4odGhlbkZuLCByZWplY3RGbik7XG4gICAgICB9XG5cbiAgICAgIHByb21pc2Uuc3VjY2VzcyA9IGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgIGZuKHJlc3BvbnNlLmRhdGEsIHJlc3BvbnNlLnN0YXR1cywgcmVzcG9uc2UuaGVhZGVycywgY29uZmlnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgfTtcblxuICAgICAgcHJvbWlzZS5lcnJvciA9IGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgIHByb21pc2UudGhlbihudWxsLCBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgIGZuKHJlc3BvbnNlLmRhdGEsIHJlc3BvbnNlLnN0YXR1cywgcmVzcG9uc2UuaGVhZGVycywgY29uZmlnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHByb21pc2U7XG5cbiAgICAgIGZ1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKHJlc3BvbnNlKSB7XG4gICAgICAgIC8vIG1ha2UgYSBjb3B5IHNpbmNlIHRoZSByZXNwb25zZSBtdXN0IGJlIGNhY2hlYWJsZVxuICAgICAgICB2YXIgcmVzcCA9IGV4dGVuZCh7fSwgcmVzcG9uc2UpO1xuICAgICAgICBpZiAoIXJlc3BvbnNlLmRhdGEpIHtcbiAgICAgICAgICByZXNwLmRhdGEgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3AuZGF0YSA9IHRyYW5zZm9ybURhdGEocmVzcG9uc2UuZGF0YSwgcmVzcG9uc2UuaGVhZGVycywgcmVzcG9uc2Uuc3RhdHVzLCBjb25maWcudHJhbnNmb3JtUmVzcG9uc2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoaXNTdWNjZXNzKHJlc3BvbnNlLnN0YXR1cykpXG4gICAgICAgICAgPyByZXNwXG4gICAgICAgICAgOiAkcS5yZWplY3QocmVzcCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGV4ZWN1dGVIZWFkZXJGbnMoaGVhZGVycykge1xuICAgICAgICB2YXIgaGVhZGVyQ29udGVudCwgcHJvY2Vzc2VkSGVhZGVycyA9IHt9O1xuXG4gICAgICAgIGZvckVhY2goaGVhZGVycywgZnVuY3Rpb24oaGVhZGVyRm4sIGhlYWRlcikge1xuICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGhlYWRlckZuKSkge1xuICAgICAgICAgICAgaGVhZGVyQ29udGVudCA9IGhlYWRlckZuKCk7XG4gICAgICAgICAgICBpZiAoaGVhZGVyQ29udGVudCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgIHByb2Nlc3NlZEhlYWRlcnNbaGVhZGVyXSA9IGhlYWRlckNvbnRlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb2Nlc3NlZEhlYWRlcnNbaGVhZGVyXSA9IGhlYWRlckZuO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHByb2Nlc3NlZEhlYWRlcnM7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG1lcmdlSGVhZGVycyhjb25maWcpIHtcbiAgICAgICAgdmFyIGRlZkhlYWRlcnMgPSBkZWZhdWx0cy5oZWFkZXJzLFxuICAgICAgICAgICAgcmVxSGVhZGVycyA9IGV4dGVuZCh7fSwgY29uZmlnLmhlYWRlcnMpLFxuICAgICAgICAgICAgZGVmSGVhZGVyTmFtZSwgbG93ZXJjYXNlRGVmSGVhZGVyTmFtZSwgcmVxSGVhZGVyTmFtZTtcblxuICAgICAgICBkZWZIZWFkZXJzID0gZXh0ZW5kKHt9LCBkZWZIZWFkZXJzLmNvbW1vbiwgZGVmSGVhZGVyc1tsb3dlcmNhc2UoY29uZmlnLm1ldGhvZCldKTtcblxuICAgICAgICAvLyB1c2luZyBmb3ItaW4gaW5zdGVhZCBvZiBmb3JFYWNoIHRvIGF2b2lkIHVuZWNlc3NhcnkgaXRlcmF0aW9uIGFmdGVyIGhlYWRlciBoYXMgYmVlbiBmb3VuZFxuICAgICAgICBkZWZhdWx0SGVhZGVyc0l0ZXJhdGlvbjpcbiAgICAgICAgZm9yIChkZWZIZWFkZXJOYW1lIGluIGRlZkhlYWRlcnMpIHtcbiAgICAgICAgICBsb3dlcmNhc2VEZWZIZWFkZXJOYW1lID0gbG93ZXJjYXNlKGRlZkhlYWRlck5hbWUpO1xuXG4gICAgICAgICAgZm9yIChyZXFIZWFkZXJOYW1lIGluIHJlcUhlYWRlcnMpIHtcbiAgICAgICAgICAgIGlmIChsb3dlcmNhc2UocmVxSGVhZGVyTmFtZSkgPT09IGxvd2VyY2FzZURlZkhlYWRlck5hbWUpIHtcbiAgICAgICAgICAgICAgY29udGludWUgZGVmYXVsdEhlYWRlcnNJdGVyYXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmVxSGVhZGVyc1tkZWZIZWFkZXJOYW1lXSA9IGRlZkhlYWRlcnNbZGVmSGVhZGVyTmFtZV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBleGVjdXRlIGlmIGhlYWRlciB2YWx1ZSBpcyBhIGZ1bmN0aW9uIGZvciBtZXJnZWQgaGVhZGVyc1xuICAgICAgICByZXR1cm4gZXhlY3V0ZUhlYWRlckZucyhyZXFIZWFkZXJzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAkaHR0cC5wZW5kaW5nUmVxdWVzdHMgPSBbXTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkaHR0cCNnZXRcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBHRVRgIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFJlbGF0aXZlIG9yIGFic29sdXRlIFVSTCBzcGVjaWZ5aW5nIHRoZSBkZXN0aW5hdGlvbiBvZiB0aGUgcmVxdWVzdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJGh0dHAjZGVsZXRlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgREVMRVRFYCByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBSZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkwgc3BlY2lmeWluZyB0aGUgZGVzdGluYXRpb24gb2YgdGhlIHJlcXVlc3RcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gRnV0dXJlIG9iamVjdFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRodHRwI2hlYWRcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBIRUFEYCByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBSZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkwgc3BlY2lmeWluZyB0aGUgZGVzdGluYXRpb24gb2YgdGhlIHJlcXVlc3RcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gRnV0dXJlIG9iamVjdFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRodHRwI2pzb25wXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgSlNPTlBgIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFJlbGF0aXZlIG9yIGFic29sdXRlIFVSTCBzcGVjaWZ5aW5nIHRoZSBkZXN0aW5hdGlvbiBvZiB0aGUgcmVxdWVzdC5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgIFRoZSBuYW1lIG9mIHRoZSBjYWxsYmFjayBzaG91bGQgYmUgdGhlIHN0cmluZyBgSlNPTl9DQUxMQkFDS2AuXG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IEZ1dHVyZSBvYmplY3RcbiAgICAgKi9cbiAgICBjcmVhdGVTaG9ydE1ldGhvZHMoJ2dldCcsICdkZWxldGUnLCAnaGVhZCcsICdqc29ucCcpO1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRodHRwI3Bvc3RcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBQT1NUYCByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBSZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkwgc3BlY2lmeWluZyB0aGUgZGVzdGluYXRpb24gb2YgdGhlIHJlcXVlc3RcbiAgICAgKiBAcGFyYW0geyp9IGRhdGEgUmVxdWVzdCBjb250ZW50XG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IEZ1dHVyZSBvYmplY3RcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkaHR0cCNwdXRcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBQVVRgIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFJlbGF0aXZlIG9yIGFic29sdXRlIFVSTCBzcGVjaWZ5aW5nIHRoZSBkZXN0aW5hdGlvbiBvZiB0aGUgcmVxdWVzdFxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBSZXF1ZXN0IGNvbnRlbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gRnV0dXJlIG9iamVjdFxuICAgICAqL1xuXG4gICAgIC8qKlxuICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAqIEBuYW1lICRodHRwI3BhdGNoXG4gICAgICAqXG4gICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgUEFUQ0hgIHJlcXVlc3QuXG4gICAgICAqXG4gICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgUmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMIHNwZWNpZnlpbmcgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSByZXF1ZXN0XG4gICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBSZXF1ZXN0IGNvbnRlbnRcbiAgICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0XG4gICAgICAqL1xuICAgIGNyZWF0ZVNob3J0TWV0aG9kc1dpdGhEYXRhKCdwb3N0JywgJ3B1dCcsICdwYXRjaCcpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmdkb2MgcHJvcGVydHlcbiAgICAgICAgICogQG5hbWUgJGh0dHAjZGVmYXVsdHNcbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIFJ1bnRpbWUgZXF1aXZhbGVudCBvZiB0aGUgYCRodHRwUHJvdmlkZXIuZGVmYXVsdHNgIHByb3BlcnR5LiBBbGxvd3MgY29uZmlndXJhdGlvbiBvZlxuICAgICAgICAgKiBkZWZhdWx0IGhlYWRlcnMsIHdpdGhDcmVkZW50aWFscyBhcyB3ZWxsIGFzIHJlcXVlc3QgYW5kIHJlc3BvbnNlIHRyYW5zZm9ybWF0aW9ucy5cbiAgICAgICAgICpcbiAgICAgICAgICogU2VlIFwiU2V0dGluZyBIVFRQIEhlYWRlcnNcIiBhbmQgXCJUcmFuc2Zvcm1pbmcgUmVxdWVzdHMgYW5kIFJlc3BvbnNlc1wiIHNlY3Rpb25zIGFib3ZlLlxuICAgICAgICAgKi9cbiAgICAkaHR0cC5kZWZhdWx0cyA9IGRlZmF1bHRzO1xuXG5cbiAgICByZXR1cm4gJGh0dHA7XG5cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVNob3J0TWV0aG9kcyhuYW1lcykge1xuICAgICAgZm9yRWFjaChhcmd1bWVudHMsIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgJGh0dHBbbmFtZV0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgICAgICAgIHJldHVybiAkaHR0cChleHRlbmQoY29uZmlnIHx8IHt9LCB7XG4gICAgICAgICAgICBtZXRob2Q6IG5hbWUsXG4gICAgICAgICAgICB1cmw6IHVybFxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gY3JlYXRlU2hvcnRNZXRob2RzV2l0aERhdGEobmFtZSkge1xuICAgICAgZm9yRWFjaChhcmd1bWVudHMsIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgJGh0dHBbbmFtZV0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgICAgICAgIHJldHVybiAkaHR0cChleHRlbmQoY29uZmlnIHx8IHt9LCB7XG4gICAgICAgICAgICBtZXRob2Q6IG5hbWUsXG4gICAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIE1ha2VzIHRoZSByZXF1ZXN0LlxuICAgICAqXG4gICAgICogISEhIEFDQ0VTU0VTIENMT1NVUkUgVkFSUzpcbiAgICAgKiAkaHR0cEJhY2tlbmQsIGRlZmF1bHRzLCAkbG9nLCAkcm9vdFNjb3BlLCBkZWZhdWx0Q2FjaGUsICRodHRwLnBlbmRpbmdSZXF1ZXN0c1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNlbmRSZXEoY29uZmlnLCByZXFEYXRhKSB7XG4gICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpLFxuICAgICAgICAgIHByb21pc2UgPSBkZWZlcnJlZC5wcm9taXNlLFxuICAgICAgICAgIGNhY2hlLFxuICAgICAgICAgIGNhY2hlZFJlc3AsXG4gICAgICAgICAgcmVxSGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzLFxuICAgICAgICAgIHVybCA9IGJ1aWxkVXJsKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMpO1xuXG4gICAgICAkaHR0cC5wZW5kaW5nUmVxdWVzdHMucHVzaChjb25maWcpO1xuICAgICAgcHJvbWlzZS50aGVuKHJlbW92ZVBlbmRpbmdSZXEsIHJlbW92ZVBlbmRpbmdSZXEpO1xuXG5cbiAgICAgIGlmICgoY29uZmlnLmNhY2hlIHx8IGRlZmF1bHRzLmNhY2hlKSAmJiBjb25maWcuY2FjaGUgIT09IGZhbHNlICYmXG4gICAgICAgICAgKGNvbmZpZy5tZXRob2QgPT09ICdHRVQnIHx8IGNvbmZpZy5tZXRob2QgPT09ICdKU09OUCcpKSB7XG4gICAgICAgIGNhY2hlID0gaXNPYmplY3QoY29uZmlnLmNhY2hlKSA/IGNvbmZpZy5jYWNoZVxuICAgICAgICAgICAgICA6IGlzT2JqZWN0KGRlZmF1bHRzLmNhY2hlKSA/IGRlZmF1bHRzLmNhY2hlXG4gICAgICAgICAgICAgIDogZGVmYXVsdENhY2hlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2FjaGUpIHtcbiAgICAgICAgY2FjaGVkUmVzcCA9IGNhY2hlLmdldCh1cmwpO1xuICAgICAgICBpZiAoaXNEZWZpbmVkKGNhY2hlZFJlc3ApKSB7XG4gICAgICAgICAgaWYgKGlzUHJvbWlzZUxpa2UoY2FjaGVkUmVzcCkpIHtcbiAgICAgICAgICAgIC8vIGNhY2hlZCByZXF1ZXN0IGhhcyBhbHJlYWR5IGJlZW4gc2VudCwgYnV0IHRoZXJlIGlzIG5vIHJlc3BvbnNlIHlldFxuICAgICAgICAgICAgY2FjaGVkUmVzcC50aGVuKHJlc29sdmVQcm9taXNlV2l0aFJlc3VsdCwgcmVzb2x2ZVByb21pc2VXaXRoUmVzdWx0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gc2VydmluZyBmcm9tIGNhY2hlXG4gICAgICAgICAgICBpZiAoaXNBcnJheShjYWNoZWRSZXNwKSkge1xuICAgICAgICAgICAgICByZXNvbHZlUHJvbWlzZShjYWNoZWRSZXNwWzFdLCBjYWNoZWRSZXNwWzBdLCBzaGFsbG93Q29weShjYWNoZWRSZXNwWzJdKSwgY2FjaGVkUmVzcFszXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXNvbHZlUHJvbWlzZShjYWNoZWRSZXNwLCAyMDAsIHt9LCAnT0snKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gcHV0IHRoZSBwcm9taXNlIGZvciB0aGUgbm9uLXRyYW5zZm9ybWVkIHJlc3BvbnNlIGludG8gY2FjaGUgYXMgYSBwbGFjZWhvbGRlclxuICAgICAgICAgIGNhY2hlLnB1dCh1cmwsIHByb21pc2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cblxuICAgICAgLy8gaWYgd2Ugd29uJ3QgaGF2ZSB0aGUgcmVzcG9uc2UgaW4gY2FjaGUsIHNldCB0aGUgeHNyZiBoZWFkZXJzIGFuZFxuICAgICAgLy8gc2VuZCB0aGUgcmVxdWVzdCB0byB0aGUgYmFja2VuZFxuICAgICAgaWYgKGlzVW5kZWZpbmVkKGNhY2hlZFJlc3ApKSB7XG4gICAgICAgIHZhciB4c3JmVmFsdWUgPSB1cmxJc1NhbWVPcmlnaW4oY29uZmlnLnVybClcbiAgICAgICAgICAgID8gJGJyb3dzZXIuY29va2llcygpW2NvbmZpZy54c3JmQ29va2llTmFtZSB8fCBkZWZhdWx0cy54c3JmQ29va2llTmFtZV1cbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgICAgcmVxSGVhZGVyc1soY29uZmlnLnhzcmZIZWFkZXJOYW1lIHx8IGRlZmF1bHRzLnhzcmZIZWFkZXJOYW1lKV0gPSB4c3JmVmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICAkaHR0cEJhY2tlbmQoY29uZmlnLm1ldGhvZCwgdXJsLCByZXFEYXRhLCBkb25lLCByZXFIZWFkZXJzLCBjb25maWcudGltZW91dCxcbiAgICAgICAgICAgIGNvbmZpZy53aXRoQ3JlZGVudGlhbHMsIGNvbmZpZy5yZXNwb25zZVR5cGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcblxuXG4gICAgICAvKipcbiAgICAgICAqIENhbGxiYWNrIHJlZ2lzdGVyZWQgdG8gJGh0dHBCYWNrZW5kKCk6XG4gICAgICAgKiAgLSBjYWNoZXMgdGhlIHJlc3BvbnNlIGlmIGRlc2lyZWRcbiAgICAgICAqICAtIHJlc29sdmVzIHRoZSByYXcgJGh0dHAgcHJvbWlzZVxuICAgICAgICogIC0gY2FsbHMgJGFwcGx5XG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGRvbmUoc3RhdHVzLCByZXNwb25zZSwgaGVhZGVyc1N0cmluZywgc3RhdHVzVGV4dCkge1xuICAgICAgICBpZiAoY2FjaGUpIHtcbiAgICAgICAgICBpZiAoaXNTdWNjZXNzKHN0YXR1cykpIHtcbiAgICAgICAgICAgIGNhY2hlLnB1dCh1cmwsIFtzdGF0dXMsIHJlc3BvbnNlLCBwYXJzZUhlYWRlcnMoaGVhZGVyc1N0cmluZyksIHN0YXR1c1RleHRdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gcmVtb3ZlIHByb21pc2UgZnJvbSB0aGUgY2FjaGVcbiAgICAgICAgICAgIGNhY2hlLnJlbW92ZSh1cmwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJlc29sdmVIdHRwUHJvbWlzZSgpIHtcbiAgICAgICAgICByZXNvbHZlUHJvbWlzZShyZXNwb25zZSwgc3RhdHVzLCBoZWFkZXJzU3RyaW5nLCBzdGF0dXNUZXh0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1c2VBcHBseUFzeW5jKSB7XG4gICAgICAgICAgJHJvb3RTY29wZS4kYXBwbHlBc3luYyhyZXNvbHZlSHR0cFByb21pc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmVIdHRwUHJvbWlzZSgpO1xuICAgICAgICAgIGlmICghJHJvb3RTY29wZS4kJHBoYXNlKSAkcm9vdFNjb3BlLiRhcHBseSgpO1xuICAgICAgICB9XG4gICAgICB9XG5cblxuICAgICAgLyoqXG4gICAgICAgKiBSZXNvbHZlcyB0aGUgcmF3ICRodHRwIHByb21pc2UuXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVQcm9taXNlKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMsIHN0YXR1c1RleHQpIHtcbiAgICAgICAgLy8gbm9ybWFsaXplIGludGVybmFsIHN0YXR1c2VzIHRvIDBcbiAgICAgICAgc3RhdHVzID0gTWF0aC5tYXgoc3RhdHVzLCAwKTtcblxuICAgICAgICAoaXNTdWNjZXNzKHN0YXR1cykgPyBkZWZlcnJlZC5yZXNvbHZlIDogZGVmZXJyZWQucmVqZWN0KSh7XG4gICAgICAgICAgZGF0YTogcmVzcG9uc2UsXG4gICAgICAgICAgc3RhdHVzOiBzdGF0dXMsXG4gICAgICAgICAgaGVhZGVyczogaGVhZGVyc0dldHRlcihoZWFkZXJzKSxcbiAgICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgICBzdGF0dXNUZXh0OiBzdGF0dXNUZXh0XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByZXNvbHZlUHJvbWlzZVdpdGhSZXN1bHQocmVzdWx0KSB7XG4gICAgICAgIHJlc29sdmVQcm9taXNlKHJlc3VsdC5kYXRhLCByZXN1bHQuc3RhdHVzLCBzaGFsbG93Q29weShyZXN1bHQuaGVhZGVycygpKSwgcmVzdWx0LnN0YXR1c1RleHQpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByZW1vdmVQZW5kaW5nUmVxKCkge1xuICAgICAgICB2YXIgaWR4ID0gJGh0dHAucGVuZGluZ1JlcXVlc3RzLmluZGV4T2YoY29uZmlnKTtcbiAgICAgICAgaWYgKGlkeCAhPT0gLTEpICRodHRwLnBlbmRpbmdSZXF1ZXN0cy5zcGxpY2UoaWR4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGJ1aWxkVXJsKHVybCwgcGFyYW1zKSB7XG4gICAgICBpZiAoIXBhcmFtcykgcmV0dXJuIHVybDtcbiAgICAgIHZhciBwYXJ0cyA9IFtdO1xuICAgICAgZm9yRWFjaFNvcnRlZChwYXJhbXMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IGlzVW5kZWZpbmVkKHZhbHVlKSkgcmV0dXJuO1xuICAgICAgICBpZiAoIWlzQXJyYXkodmFsdWUpKSB2YWx1ZSA9IFt2YWx1ZV07XG5cbiAgICAgICAgZm9yRWFjaCh2YWx1ZSwgZnVuY3Rpb24odikge1xuICAgICAgICAgIGlmIChpc09iamVjdCh2KSkge1xuICAgICAgICAgICAgaWYgKGlzRGF0ZSh2KSkge1xuICAgICAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdiA9IHRvSnNvbih2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcGFydHMucHVzaChlbmNvZGVVcmlRdWVyeShrZXkpICsgJz0nICtcbiAgICAgICAgICAgICAgICAgICAgIGVuY29kZVVyaVF1ZXJ5KHYpKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIGlmIChwYXJ0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHVybCArPSAoKHVybC5pbmRleE9mKCc/JykgPT0gLTEpID8gJz8nIDogJyYnKSArIHBhcnRzLmpvaW4oJyYnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1cmw7XG4gICAgfVxuICB9XTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlWGhyKCkge1xuICAgIHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRodHRwQmFja2VuZFxuICogQHJlcXVpcmVzICR3aW5kb3dcbiAqIEByZXF1aXJlcyAkZG9jdW1lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEhUVFAgYmFja2VuZCB1c2VkIGJ5IHRoZSB7QGxpbmsgbmcuJGh0dHAgc2VydmljZX0gdGhhdCBkZWxlZ2F0ZXMgdG9cbiAqIFhNTEh0dHBSZXF1ZXN0IG9iamVjdCBvciBKU09OUCBhbmQgZGVhbHMgd2l0aCBicm93c2VyIGluY29tcGF0aWJpbGl0aWVzLlxuICpcbiAqIFlvdSBzaG91bGQgbmV2ZXIgbmVlZCB0byB1c2UgdGhpcyBzZXJ2aWNlIGRpcmVjdGx5LCBpbnN0ZWFkIHVzZSB0aGUgaGlnaGVyLWxldmVsIGFic3RyYWN0aW9uczpcbiAqIHtAbGluayBuZy4kaHR0cCAkaHR0cH0gb3Ige0BsaW5rIG5nUmVzb3VyY2UuJHJlc291cmNlICRyZXNvdXJjZX0uXG4gKlxuICogRHVyaW5nIHRlc3RpbmcgdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBzd2FwcGVkIHdpdGgge0BsaW5rIG5nTW9jay4kaHR0cEJhY2tlbmQgbW9ja1xuICogJGh0dHBCYWNrZW5kfSB3aGljaCBjYW4gYmUgdHJhaW5lZCB3aXRoIHJlc3BvbnNlcy5cbiAqL1xuZnVuY3Rpb24gJEh0dHBCYWNrZW5kUHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJGJyb3dzZXInLCAnJHdpbmRvdycsICckZG9jdW1lbnQnLCBmdW5jdGlvbigkYnJvd3NlciwgJHdpbmRvdywgJGRvY3VtZW50KSB7XG4gICAgcmV0dXJuIGNyZWF0ZUh0dHBCYWNrZW5kKCRicm93c2VyLCBjcmVhdGVYaHIsICRicm93c2VyLmRlZmVyLCAkd2luZG93LmFuZ3VsYXIuY2FsbGJhY2tzLCAkZG9jdW1lbnRbMF0pO1xuICB9XTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSHR0cEJhY2tlbmQoJGJyb3dzZXIsIGNyZWF0ZVhociwgJGJyb3dzZXJEZWZlciwgY2FsbGJhY2tzLCByYXdEb2N1bWVudCkge1xuICAvLyBUT0RPKHZvanRhKTogZml4IHRoZSBzaWduYXR1cmVcbiAgcmV0dXJuIGZ1bmN0aW9uKG1ldGhvZCwgdXJsLCBwb3N0LCBjYWxsYmFjaywgaGVhZGVycywgdGltZW91dCwgd2l0aENyZWRlbnRpYWxzLCByZXNwb25zZVR5cGUpIHtcbiAgICAkYnJvd3Nlci4kJGluY091dHN0YW5kaW5nUmVxdWVzdENvdW50KCk7XG4gICAgdXJsID0gdXJsIHx8ICRicm93c2VyLnVybCgpO1xuXG4gICAgaWYgKGxvd2VyY2FzZShtZXRob2QpID09ICdqc29ucCcpIHtcbiAgICAgIHZhciBjYWxsYmFja0lkID0gJ18nICsgKGNhbGxiYWNrcy5jb3VudGVyKyspLnRvU3RyaW5nKDM2KTtcbiAgICAgIGNhbGxiYWNrc1tjYWxsYmFja0lkXSA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgY2FsbGJhY2tzW2NhbGxiYWNrSWRdLmRhdGEgPSBkYXRhO1xuICAgICAgICBjYWxsYmFja3NbY2FsbGJhY2tJZF0uY2FsbGVkID0gdHJ1ZTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBqc29ucERvbmUgPSBqc29ucFJlcSh1cmwucmVwbGFjZSgnSlNPTl9DQUxMQkFDSycsICdhbmd1bGFyLmNhbGxiYWNrcy4nICsgY2FsbGJhY2tJZCksXG4gICAgICAgICAgY2FsbGJhY2tJZCwgZnVuY3Rpb24oc3RhdHVzLCB0ZXh0KSB7XG4gICAgICAgIGNvbXBsZXRlUmVxdWVzdChjYWxsYmFjaywgc3RhdHVzLCBjYWxsYmFja3NbY2FsbGJhY2tJZF0uZGF0YSwgXCJcIiwgdGV4dCk7XG4gICAgICAgIGNhbGxiYWNrc1tjYWxsYmFja0lkXSA9IG5vb3A7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuXG4gICAgICB2YXIgeGhyID0gY3JlYXRlWGhyKCk7XG5cbiAgICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsLCB0cnVlKTtcbiAgICAgIGZvckVhY2goaGVhZGVycywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24gcmVxdWVzdExvYWRlZCgpIHtcbiAgICAgICAgdmFyIHN0YXR1c1RleHQgPSB4aHIuc3RhdHVzVGV4dCB8fCAnJztcblxuICAgICAgICAvLyByZXNwb25zZVRleHQgaXMgdGhlIG9sZC1zY2hvb2wgd2F5IG9mIHJldHJpZXZpbmcgcmVzcG9uc2UgKHN1cHBvcnRlZCBieSBJRTggJiA5KVxuICAgICAgICAvLyByZXNwb25zZS9yZXNwb25zZVR5cGUgcHJvcGVydGllcyB3ZXJlIGludHJvZHVjZWQgaW4gWEhSIExldmVsMiBzcGVjIChzdXBwb3J0ZWQgYnkgSUUxMClcbiAgICAgICAgdmFyIHJlc3BvbnNlID0gKCdyZXNwb25zZScgaW4geGhyKSA/IHhoci5yZXNwb25zZSA6IHhoci5yZXNwb25zZVRleHQ7XG5cbiAgICAgICAgLy8gbm9ybWFsaXplIElFOSBidWcgKGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzE0NTApXG4gICAgICAgIHZhciBzdGF0dXMgPSB4aHIuc3RhdHVzID09PSAxMjIzID8gMjA0IDogeGhyLnN0YXR1cztcblxuICAgICAgICAvLyBmaXggc3RhdHVzIGNvZGUgd2hlbiBpdCBpcyAwICgwIHN0YXR1cyBpcyB1bmRvY3VtZW50ZWQpLlxuICAgICAgICAvLyBPY2N1cnMgd2hlbiBhY2Nlc3NpbmcgZmlsZSByZXNvdXJjZXMgb3Igb24gQW5kcm9pZCA0LjEgc3RvY2sgYnJvd3NlclxuICAgICAgICAvLyB3aGlsZSByZXRyaWV2aW5nIGZpbGVzIGZyb20gYXBwbGljYXRpb24gY2FjaGUuXG4gICAgICAgIGlmIChzdGF0dXMgPT09IDApIHtcbiAgICAgICAgICBzdGF0dXMgPSByZXNwb25zZSA/IDIwMCA6IHVybFJlc29sdmUodXJsKS5wcm90b2NvbCA9PSAnZmlsZScgPyA0MDQgOiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgY29tcGxldGVSZXF1ZXN0KGNhbGxiYWNrLFxuICAgICAgICAgICAgc3RhdHVzLFxuICAgICAgICAgICAgcmVzcG9uc2UsXG4gICAgICAgICAgICB4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCksXG4gICAgICAgICAgICBzdGF0dXNUZXh0KTtcbiAgICAgIH07XG5cbiAgICAgIHZhciByZXF1ZXN0RXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gVGhlIHJlc3BvbnNlIGlzIGFsd2F5cyBlbXB0eVxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly94aHIuc3BlYy53aGF0d2cub3JnLyNyZXF1ZXN0LWVycm9yLXN0ZXBzIGFuZCBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1uZXR3b3JrLWVycm9yXG4gICAgICAgIGNvbXBsZXRlUmVxdWVzdChjYWxsYmFjaywgLTEsIG51bGwsIG51bGwsICcnKTtcbiAgICAgIH07XG5cbiAgICAgIHhoci5vbmVycm9yID0gcmVxdWVzdEVycm9yO1xuICAgICAgeGhyLm9uYWJvcnQgPSByZXF1ZXN0RXJyb3I7XG5cbiAgICAgIGlmICh3aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXNwb25zZVR5cGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gcmVzcG9uc2VUeXBlO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gV2ViS2l0IGFkZGVkIHN1cHBvcnQgZm9yIHRoZSBqc29uIHJlc3BvbnNlVHlwZSB2YWx1ZSBvbiAwOS8wMy8yMDEzXG4gICAgICAgICAgLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTczNjQ4LiBWZXJzaW9ucyBvZiBTYWZhcmkgcHJpb3IgdG8gNyBhcmVcbiAgICAgICAgICAvLyBrbm93biB0byB0aHJvdyB3aGVuIHNldHRpbmcgdGhlIHZhbHVlIFwianNvblwiIGFzIHRoZSByZXNwb25zZSB0eXBlLiBPdGhlciBvbGRlclxuICAgICAgICAgIC8vIGJyb3dzZXJzIGltcGxlbWVudGluZyB0aGUgcmVzcG9uc2VUeXBlXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyBUaGUganNvbiByZXNwb25zZSB0eXBlIGNhbiBiZSBpZ25vcmVkIGlmIG5vdCBzdXBwb3J0ZWQsIGJlY2F1c2UgSlNPTiBwYXlsb2FkcyBhcmVcbiAgICAgICAgICAvLyBwYXJzZWQgb24gdGhlIGNsaWVudC1zaWRlIHJlZ2FyZGxlc3MuXG4gICAgICAgICAgaWYgKHJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB4aHIuc2VuZChwb3N0IHx8IG51bGwpO1xuICAgIH1cblxuICAgIGlmICh0aW1lb3V0ID4gMCkge1xuICAgICAgdmFyIHRpbWVvdXRJZCA9ICRicm93c2VyRGVmZXIodGltZW91dFJlcXVlc3QsIHRpbWVvdXQpO1xuICAgIH0gZWxzZSBpZiAoaXNQcm9taXNlTGlrZSh0aW1lb3V0KSkge1xuICAgICAgdGltZW91dC50aGVuKHRpbWVvdXRSZXF1ZXN0KTtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIHRpbWVvdXRSZXF1ZXN0KCkge1xuICAgICAganNvbnBEb25lICYmIGpzb25wRG9uZSgpO1xuICAgICAgeGhyICYmIHhoci5hYm9ydCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXBsZXRlUmVxdWVzdChjYWxsYmFjaywgc3RhdHVzLCByZXNwb25zZSwgaGVhZGVyc1N0cmluZywgc3RhdHVzVGV4dCkge1xuICAgICAgLy8gY2FuY2VsIHRpbWVvdXQgYW5kIHN1YnNlcXVlbnQgdGltZW91dCBwcm9taXNlIHJlc29sdXRpb25cbiAgICAgIGlmICh0aW1lb3V0SWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAkYnJvd3NlckRlZmVyLmNhbmNlbCh0aW1lb3V0SWQpO1xuICAgICAgfVxuICAgICAganNvbnBEb25lID0geGhyID0gbnVsbDtcblxuICAgICAgY2FsbGJhY2soc3RhdHVzLCByZXNwb25zZSwgaGVhZGVyc1N0cmluZywgc3RhdHVzVGV4dCk7XG4gICAgICAkYnJvd3Nlci4kJGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0KG5vb3ApO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBqc29ucFJlcSh1cmwsIGNhbGxiYWNrSWQsIGRvbmUpIHtcbiAgICAvLyB3ZSBjYW4ndCB1c2UgalF1ZXJ5L2pxTGl0ZSBoZXJlIGJlY2F1c2UgalF1ZXJ5IGRvZXMgY3Jhenkgc2hpdCB3aXRoIHNjcmlwdCBlbGVtZW50cywgZS5nLjpcbiAgICAvLyAtIGZldGNoZXMgbG9jYWwgc2NyaXB0cyB2aWEgWEhSIGFuZCBldmFscyB0aGVtXG4gICAgLy8gLSBhZGRzIGFuZCBpbW1lZGlhdGVseSByZW1vdmVzIHNjcmlwdCBlbGVtZW50cyBmcm9tIHRoZSBkb2N1bWVudFxuICAgIHZhciBzY3JpcHQgPSByYXdEb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKSwgY2FsbGJhY2sgPSBudWxsO1xuICAgIHNjcmlwdC50eXBlID0gXCJ0ZXh0L2phdmFzY3JpcHRcIjtcbiAgICBzY3JpcHQuc3JjID0gdXJsO1xuICAgIHNjcmlwdC5hc3luYyA9IHRydWU7XG5cbiAgICBjYWxsYmFjayA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyRm4oc2NyaXB0LCBcImxvYWRcIiwgY2FsbGJhY2spO1xuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lckZuKHNjcmlwdCwgXCJlcnJvclwiLCBjYWxsYmFjayk7XG4gICAgICByYXdEb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHNjcmlwdCk7XG4gICAgICBzY3JpcHQgPSBudWxsO1xuICAgICAgdmFyIHN0YXR1cyA9IC0xO1xuICAgICAgdmFyIHRleHQgPSBcInVua25vd25cIjtcblxuICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC50eXBlID09PSBcImxvYWRcIiAmJiAhY2FsbGJhY2tzW2NhbGxiYWNrSWRdLmNhbGxlZCkge1xuICAgICAgICAgIGV2ZW50ID0geyB0eXBlOiBcImVycm9yXCIgfTtcbiAgICAgICAgfVxuICAgICAgICB0ZXh0ID0gZXZlbnQudHlwZTtcbiAgICAgICAgc3RhdHVzID0gZXZlbnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwO1xuICAgICAgfVxuXG4gICAgICBpZiAoZG9uZSkge1xuICAgICAgICBkb25lKHN0YXR1cywgdGV4dCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGFkZEV2ZW50TGlzdGVuZXJGbihzY3JpcHQsIFwibG9hZFwiLCBjYWxsYmFjayk7XG4gICAgYWRkRXZlbnRMaXN0ZW5lckZuKHNjcmlwdCwgXCJlcnJvclwiLCBjYWxsYmFjayk7XG4gICAgcmF3RG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgIHJldHVybiBjYWxsYmFjaztcbiAgfVxufVxuXG52YXIgJGludGVycG9sYXRlTWluRXJyID0gbWluRXJyKCckaW50ZXJwb2xhdGUnKTtcblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRpbnRlcnBvbGF0ZVByb3ZpZGVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVXNlZCBmb3IgY29uZmlndXJpbmcgdGhlIGludGVycG9sYXRpb24gbWFya3VwLiBEZWZhdWx0cyB0byBge3tgIGFuZCBgfX1gLlxuICpcbiAqIEBleGFtcGxlXG48ZXhhbXBsZSBtb2R1bGU9XCJjdXN0b21JbnRlcnBvbGF0aW9uQXBwXCI+XG48ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuPHNjcmlwdD5cbiAgdmFyIGN1c3RvbUludGVycG9sYXRpb25BcHAgPSBhbmd1bGFyLm1vZHVsZSgnY3VzdG9tSW50ZXJwb2xhdGlvbkFwcCcsIFtdKTtcblxuICBjdXN0b21JbnRlcnBvbGF0aW9uQXBwLmNvbmZpZyhmdW5jdGlvbigkaW50ZXJwb2xhdGVQcm92aWRlcikge1xuICAgICRpbnRlcnBvbGF0ZVByb3ZpZGVyLnN0YXJ0U3ltYm9sKCcvLycpO1xuICAgICRpbnRlcnBvbGF0ZVByb3ZpZGVyLmVuZFN5bWJvbCgnLy8nKTtcbiAgfSk7XG5cblxuICBjdXN0b21JbnRlcnBvbGF0aW9uQXBwLmNvbnRyb2xsZXIoJ0RlbW9Db250cm9sbGVyJywgZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmxhYmVsID0gXCJUaGlzIGJpbmRpbmcgaXMgYnJvdWdodCB5b3UgYnkgLy8gaW50ZXJwb2xhdGlvbiBzeW1ib2xzLlwiO1xuICB9KTtcbjwvc2NyaXB0PlxuPGRpdiBuZy1hcHA9XCJBcHBcIiBuZy1jb250cm9sbGVyPVwiRGVtb0NvbnRyb2xsZXIgYXMgZGVtb1wiPlxuICAgIC8vZGVtby5sYWJlbC8vXG48L2Rpdj5cbjwvZmlsZT5cbjxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgaXQoJ3Nob3VsZCBpbnRlcnBvbGF0ZSBiaW5kaW5nIHdpdGggY3VzdG9tIHN5bWJvbHMnLCBmdW5jdGlvbigpIHtcbiAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdkZW1vLmxhYmVsJykpLmdldFRleHQoKSkudG9CZSgnVGhpcyBiaW5kaW5nIGlzIGJyb3VnaHQgeW91IGJ5IC8vIGludGVycG9sYXRpb24gc3ltYm9scy4nKTtcbiAgfSk7XG48L2ZpbGU+XG48L2V4YW1wbGU+XG4gKi9cbmZ1bmN0aW9uICRJbnRlcnBvbGF0ZVByb3ZpZGVyKCkge1xuICB2YXIgc3RhcnRTeW1ib2wgPSAne3snO1xuICB2YXIgZW5kU3ltYm9sID0gJ319JztcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkaW50ZXJwb2xhdGVQcm92aWRlciNzdGFydFN5bWJvbFxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU3ltYm9sIHRvIGRlbm90ZSBzdGFydCBvZiBleHByZXNzaW9uIGluIHRoZSBpbnRlcnBvbGF0ZWQgc3RyaW5nLiBEZWZhdWx0cyB0byBge3tgLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHZhbHVlIG5ldyB2YWx1ZSB0byBzZXQgdGhlIHN0YXJ0aW5nIHN5bWJvbCB0by5cbiAgICogQHJldHVybnMge3N0cmluZ3xzZWxmfSBSZXR1cm5zIHRoZSBzeW1ib2wgd2hlbiB1c2VkIGFzIGdldHRlciBhbmQgc2VsZiBpZiB1c2VkIGFzIHNldHRlci5cbiAgICovXG4gIHRoaXMuc3RhcnRTeW1ib2wgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgc3RhcnRTeW1ib2wgPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gc3RhcnRTeW1ib2w7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRpbnRlcnBvbGF0ZVByb3ZpZGVyI2VuZFN5bWJvbFxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU3ltYm9sIHRvIGRlbm90ZSB0aGUgZW5kIG9mIGV4cHJlc3Npb24gaW4gdGhlIGludGVycG9sYXRlZCBzdHJpbmcuIERlZmF1bHRzIHRvIGB9fWAuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gdmFsdWUgbmV3IHZhbHVlIHRvIHNldCB0aGUgZW5kaW5nIHN5bWJvbCB0by5cbiAgICogQHJldHVybnMge3N0cmluZ3xzZWxmfSBSZXR1cm5zIHRoZSBzeW1ib2wgd2hlbiB1c2VkIGFzIGdldHRlciBhbmQgc2VsZiBpZiB1c2VkIGFzIHNldHRlci5cbiAgICovXG4gIHRoaXMuZW5kU3ltYm9sID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIGVuZFN5bWJvbCA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBlbmRTeW1ib2w7XG4gICAgfVxuICB9O1xuXG5cbiAgdGhpcy4kZ2V0ID0gWyckcGFyc2UnLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCAnJHNjZScsIGZ1bmN0aW9uKCRwYXJzZSwgJGV4Y2VwdGlvbkhhbmRsZXIsICRzY2UpIHtcbiAgICB2YXIgc3RhcnRTeW1ib2xMZW5ndGggPSBzdGFydFN5bWJvbC5sZW5ndGgsXG4gICAgICAgIGVuZFN5bWJvbExlbmd0aCA9IGVuZFN5bWJvbC5sZW5ndGgsXG4gICAgICAgIGVzY2FwZWRTdGFydFJlZ2V4cCA9IG5ldyBSZWdFeHAoc3RhcnRTeW1ib2wucmVwbGFjZSgvLi9nLCBlc2NhcGUpLCAnZycpLFxuICAgICAgICBlc2NhcGVkRW5kUmVnZXhwID0gbmV3IFJlZ0V4cChlbmRTeW1ib2wucmVwbGFjZSgvLi9nLCBlc2NhcGUpLCAnZycpO1xuXG4gICAgZnVuY3Rpb24gZXNjYXBlKGNoKSB7XG4gICAgICByZXR1cm4gJ1xcXFxcXFxcXFxcXCcgKyBjaDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2Mgc2VydmljZVxuICAgICAqIEBuYW1lICRpbnRlcnBvbGF0ZVxuICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICpcbiAgICAgKiBAcmVxdWlyZXMgJHBhcnNlXG4gICAgICogQHJlcXVpcmVzICRzY2VcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqXG4gICAgICogQ29tcGlsZXMgYSBzdHJpbmcgd2l0aCBtYXJrdXAgaW50byBhbiBpbnRlcnBvbGF0aW9uIGZ1bmN0aW9uLiBUaGlzIHNlcnZpY2UgaXMgdXNlZCBieSB0aGVcbiAgICAgKiBIVE1MIHtAbGluayBuZy4kY29tcGlsZSAkY29tcGlsZX0gc2VydmljZSBmb3IgZGF0YSBiaW5kaW5nLiBTZWVcbiAgICAgKiB7QGxpbmsgbmcuJGludGVycG9sYXRlUHJvdmlkZXIgJGludGVycG9sYXRlUHJvdmlkZXJ9IGZvciBjb25maWd1cmluZyB0aGVcbiAgICAgKiBpbnRlcnBvbGF0aW9uIG1hcmt1cC5cbiAgICAgKlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAgIHZhciAkaW50ZXJwb2xhdGUgPSAuLi47IC8vIGluamVjdGVkXG4gICAgICogICB2YXIgZXhwID0gJGludGVycG9sYXRlKCdIZWxsbyB7e25hbWUgfCB1cHBlcmNhc2V9fSEnKTtcbiAgICAgKiAgIGV4cGVjdChleHAoe25hbWU6J0FuZ3VsYXInfSkudG9FcXVhbCgnSGVsbG8gQU5HVUxBUiEnKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIGAkaW50ZXJwb2xhdGVgIHRha2VzIGFuIG9wdGlvbmFsIGZvdXJ0aCBhcmd1bWVudCwgYGFsbE9yTm90aGluZ2AuIElmIGBhbGxPck5vdGhpbmdgIGlzXG4gICAgICogYHRydWVgLCB0aGUgaW50ZXJwb2xhdGlvbiBmdW5jdGlvbiB3aWxsIHJldHVybiBgdW5kZWZpbmVkYCB1bmxlc3MgYWxsIGVtYmVkZGVkIGV4cHJlc3Npb25zXG4gICAgICogZXZhbHVhdGUgdG8gYSB2YWx1ZSBvdGhlciB0aGFuIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAgIHZhciAkaW50ZXJwb2xhdGUgPSAuLi47IC8vIGluamVjdGVkXG4gICAgICogICB2YXIgY29udGV4dCA9IHtncmVldGluZzogJ0hlbGxvJywgbmFtZTogdW5kZWZpbmVkIH07XG4gICAgICpcbiAgICAgKiAgIC8vIGRlZmF1bHQgXCJmb3JnaXZpbmdcIiBtb2RlXG4gICAgICogICB2YXIgZXhwID0gJGludGVycG9sYXRlKCd7e2dyZWV0aW5nfX0ge3tuYW1lfX0hJyk7XG4gICAgICogICBleHBlY3QoZXhwKGNvbnRleHQpKS50b0VxdWFsKCdIZWxsbyAhJyk7XG4gICAgICpcbiAgICAgKiAgIC8vIFwiYWxsT3JOb3RoaW5nXCIgbW9kZVxuICAgICAqICAgZXhwID0gJGludGVycG9sYXRlKCd7e2dyZWV0aW5nfX0ge3tuYW1lfX0hJywgZmFsc2UsIG51bGwsIHRydWUpO1xuICAgICAqICAgZXhwZWN0KGV4cChjb250ZXh0KSkudG9CZVVuZGVmaW5lZCgpO1xuICAgICAqICAgY29udGV4dC5uYW1lID0gJ0FuZ3VsYXInO1xuICAgICAqICAgZXhwZWN0KGV4cChjb250ZXh0KSkudG9FcXVhbCgnSGVsbG8gQW5ndWxhciEnKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIGBhbGxPck5vdGhpbmdgIGlzIHVzZWZ1bCBmb3IgaW50ZXJwb2xhdGluZyBVUkxzLiBgbmdTcmNgIGFuZCBgbmdTcmNzZXRgIHVzZSB0aGlzIGJlaGF2aW9yLlxuICAgICAqXG4gICAgICogIyMjI0VzY2FwZWQgSW50ZXJwb2xhdGlvblxuICAgICAqICRpbnRlcnBvbGF0ZSBwcm92aWRlcyBhIG1lY2hhbmlzbSBmb3IgZXNjYXBpbmcgaW50ZXJwb2xhdGlvbiBtYXJrZXJzLiBTdGFydCBhbmQgZW5kIG1hcmtlcnNcbiAgICAgKiBjYW4gYmUgZXNjYXBlZCBieSBwcmVjZWRpbmcgZWFjaCBvZiB0aGVpciBjaGFyYWN0ZXJzIHdpdGggYSBSRVZFUlNFIFNPTElEVVMgVSswMDVDIChiYWNrc2xhc2gpLlxuICAgICAqIEl0IHdpbGwgYmUgcmVuZGVyZWQgYXMgYSByZWd1bGFyIHN0YXJ0L2VuZCBtYXJrZXIsIGFuZCB3aWxsIG5vdCBiZSBpbnRlcnByZXRlZCBhcyBhbiBleHByZXNzaW9uXG4gICAgICogb3IgYmluZGluZy5cbiAgICAgKlxuICAgICAqIFRoaXMgZW5hYmxlcyB3ZWItc2VydmVycyB0byBwcmV2ZW50IHNjcmlwdCBpbmplY3Rpb24gYXR0YWNrcyBhbmQgZGVmYWNpbmcgYXR0YWNrcywgdG8gc29tZVxuICAgICAqIGRlZ3JlZSwgd2hpbGUgYWxzbyBlbmFibGluZyBjb2RlIGV4YW1wbGVzIHRvIHdvcmsgd2l0aG91dCByZWx5aW5nIG9uIHRoZVxuICAgICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdOb25CaW5kYWJsZSBuZ05vbkJpbmRhYmxlfSBkaXJlY3RpdmUuXG4gICAgICpcbiAgICAgKiAqKkZvciBzZWN1cml0eSBwdXJwb3NlcywgaXQgaXMgc3Ryb25nbHkgZW5jb3VyYWdlZCB0aGF0IHdlYiBzZXJ2ZXJzIGVzY2FwZSB1c2VyLXN1cHBsaWVkIGRhdGEsXG4gICAgICogcmVwbGFjaW5nIGFuZ2xlIGJyYWNrZXRzICgmbHQ7LCAmZ3Q7KSB3aXRoICZhbXA7bHQ7IGFuZCAmYW1wO2d0OyByZXNwZWN0aXZlbHksIGFuZCByZXBsYWNpbmcgYWxsXG4gICAgICogaW50ZXJwb2xhdGlvbiBzdGFydC9lbmQgbWFya2VycyB3aXRoIHRoZWlyIGVzY2FwZWQgY291bnRlcnBhcnRzLioqXG4gICAgICpcbiAgICAgKiBFc2NhcGVkIGludGVycG9sYXRpb24gbWFya2VycyBhcmUgb25seSByZXBsYWNlZCB3aXRoIHRoZSBhY3R1YWwgaW50ZXJwb2xhdGlvbiBtYXJrZXJzIGluIHJlbmRlcmVkXG4gICAgICogb3V0cHV0IHdoZW4gdGhlICRpbnRlcnBvbGF0ZSBzZXJ2aWNlIHByb2Nlc3NlcyB0aGUgdGV4dC4gU28sIGZvciBIVE1MIGVsZW1lbnRzIGludGVycG9sYXRlZFxuICAgICAqIGJ5IHtAbGluayBuZy4kY29tcGlsZSAkY29tcGlsZX0sIG9yIG90aGVyd2lzZSBpbnRlcnBvbGF0ZWQgd2l0aCB0aGUgYG11c3RIYXZlRXhwcmVzc2lvbmAgcGFyYW1ldGVyXG4gICAgICogc2V0IHRvIGB0cnVlYCwgdGhlIGludGVycG9sYXRlZCB0ZXh0IG11c3QgY29udGFpbiBhbiB1bmVzY2FwZWQgaW50ZXJwb2xhdGlvbiBleHByZXNzaW9uLiBBcyBzdWNoLFxuICAgICAqIHRoaXMgaXMgdHlwaWNhbGx5IHVzZWZ1bCBvbmx5IHdoZW4gdXNlci1kYXRhIGlzIHVzZWQgaW4gcmVuZGVyaW5nIGEgdGVtcGxhdGUgZnJvbSB0aGUgc2VydmVyLCBvclxuICAgICAqIHdoZW4gb3RoZXJ3aXNlIHVudHJ1c3RlZCBkYXRhIGlzIHVzZWQgYnkgYSBkaXJlY3RpdmUuXG4gICAgICpcbiAgICAgKiA8ZXhhbXBsZT5cbiAgICAgKiAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgKiAgICA8ZGl2IG5nLWluaXQ9XCJ1c2VybmFtZT0nQSB1c2VyJ1wiPlxuICAgICAqICAgICAgPHAgbmctaW5pdD1cImFwcHRpdGxlPSdFc2NhcGluZyBkZW1vJ1wiPnt7YXBwdGl0bGV9fTogXFx7XFx7IHVzZXJuYW1lID0gXCJkZWZhY2VkIHZhbHVlXCI7IFxcfVxcfVxuICAgICAqICAgICAgICA8L3A+XG4gICAgICogICAgICA8cD48c3Ryb25nPnt7dXNlcm5hbWV9fTwvc3Ryb25nPiBhdHRlbXB0cyB0byBpbmplY3QgY29kZSB3aGljaCB3aWxsIGRlZmFjZSB0aGVcbiAgICAgKiAgICAgICAgYXBwbGljYXRpb24sIGJ1dCBmYWlscyB0byBhY2NvbXBsaXNoIHRoZWlyIHRhc2ssIGJlY2F1c2UgdGhlIHNlcnZlciBoYXMgY29ycmVjdGx5XG4gICAgICogICAgICAgIGVzY2FwZWQgdGhlIGludGVycG9sYXRpb24gc3RhcnQvZW5kIG1hcmtlcnMgd2l0aCBSRVZFUlNFIFNPTElEVVMgVSswMDVDIChiYWNrc2xhc2gpXG4gICAgICogICAgICAgIGNoYXJhY3RlcnMuPC9wPlxuICAgICAqICAgICAgPHA+SW5zdGVhZCwgdGhlIHJlc3VsdCBvZiB0aGUgYXR0ZW1wdGVkIHNjcmlwdCBpbmplY3Rpb24gaXMgdmlzaWJsZSwgYW5kIGNhbiBiZSByZW1vdmVkXG4gICAgICogICAgICAgIGZyb20gdGhlIGRhdGFiYXNlIGJ5IGFuIGFkbWluaXN0cmF0b3IuPC9wPlxuICAgICAqICAgIDwvZGl2PlxuICAgICAqICA8L2ZpbGU+XG4gICAgICogPC9leGFtcGxlPlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgVGhlIHRleHQgd2l0aCBtYXJrdXAgdG8gaW50ZXJwb2xhdGUuXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gbXVzdEhhdmVFeHByZXNzaW9uIGlmIHNldCB0byB0cnVlIHRoZW4gdGhlIGludGVycG9sYXRpb24gc3RyaW5nIG11c3QgaGF2ZVxuICAgICAqICAgIGVtYmVkZGVkIGV4cHJlc3Npb24gaW4gb3JkZXIgdG8gcmV0dXJuIGFuIGludGVycG9sYXRpb24gZnVuY3Rpb24uIFN0cmluZ3Mgd2l0aCBub1xuICAgICAqICAgIGVtYmVkZGVkIGV4cHJlc3Npb24gd2lsbCByZXR1cm4gbnVsbCBmb3IgdGhlIGludGVycG9sYXRpb24gZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSB0cnVzdGVkQ29udGV4dCB3aGVuIHByb3ZpZGVkLCB0aGUgcmV0dXJuZWQgZnVuY3Rpb24gcGFzc2VzIHRoZSBpbnRlcnBvbGF0ZWRcbiAgICAgKiAgICByZXN1bHQgdGhyb3VnaCB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkICRzY2UuZ2V0VHJ1c3RlZChpbnRlcnBvbGF0ZWRSZXN1bHQsXG4gICAgICogICAgdHJ1c3RlZENvbnRleHQpfSBiZWZvcmUgcmV0dXJuaW5nIGl0LiAgUmVmZXIgdG8gdGhlIHtAbGluayBuZy4kc2NlICRzY2V9IHNlcnZpY2UgdGhhdFxuICAgICAqICAgIHByb3ZpZGVzIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIGZvciBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGFsbE9yTm90aGluZyBpZiBgdHJ1ZWAsIHRoZW4gdGhlIHJldHVybmVkIGZ1bmN0aW9uIHJldHVybnMgdW5kZWZpbmVkXG4gICAgICogICAgdW5sZXNzIGFsbCBlbWJlZGRlZCBleHByZXNzaW9ucyBldmFsdWF0ZSB0byBhIHZhbHVlIG90aGVyIHRoYW4gYHVuZGVmaW5lZGAuXG4gICAgICogQHJldHVybnMge2Z1bmN0aW9uKGNvbnRleHQpfSBhbiBpbnRlcnBvbGF0aW9uIGZ1bmN0aW9uIHdoaWNoIGlzIHVzZWQgdG8gY29tcHV0ZSB0aGVcbiAgICAgKiAgICBpbnRlcnBvbGF0ZWQgc3RyaW5nLiBUaGUgZnVuY3Rpb24gaGFzIHRoZXNlIHBhcmFtZXRlcnM6XG4gICAgICpcbiAgICAgKiAtIGBjb250ZXh0YDogZXZhbHVhdGlvbiBjb250ZXh0IGZvciBhbGwgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlIGludGVycG9sYXRlZCB0ZXh0XG4gICAgICovXG4gICAgZnVuY3Rpb24gJGludGVycG9sYXRlKHRleHQsIG11c3RIYXZlRXhwcmVzc2lvbiwgdHJ1c3RlZENvbnRleHQsIGFsbE9yTm90aGluZykge1xuICAgICAgYWxsT3JOb3RoaW5nID0gISFhbGxPck5vdGhpbmc7XG4gICAgICB2YXIgc3RhcnRJbmRleCxcbiAgICAgICAgICBlbmRJbmRleCxcbiAgICAgICAgICBpbmRleCA9IDAsXG4gICAgICAgICAgZXhwcmVzc2lvbnMgPSBbXSxcbiAgICAgICAgICBwYXJzZUZucyA9IFtdLFxuICAgICAgICAgIHRleHRMZW5ndGggPSB0ZXh0Lmxlbmd0aCxcbiAgICAgICAgICBleHAsXG4gICAgICAgICAgY29uY2F0ID0gW10sXG4gICAgICAgICAgZXhwcmVzc2lvblBvc2l0aW9ucyA9IFtdO1xuXG4gICAgICB3aGlsZSAoaW5kZXggPCB0ZXh0TGVuZ3RoKSB7XG4gICAgICAgIGlmICgoKHN0YXJ0SW5kZXggPSB0ZXh0LmluZGV4T2Yoc3RhcnRTeW1ib2wsIGluZGV4KSkgIT0gLTEpICYmXG4gICAgICAgICAgICAgKChlbmRJbmRleCA9IHRleHQuaW5kZXhPZihlbmRTeW1ib2wsIHN0YXJ0SW5kZXggKyBzdGFydFN5bWJvbExlbmd0aCkpICE9IC0xKSkge1xuICAgICAgICAgIGlmIChpbmRleCAhPT0gc3RhcnRJbmRleCkge1xuICAgICAgICAgICAgY29uY2F0LnB1c2godW5lc2NhcGVUZXh0KHRleHQuc3Vic3RyaW5nKGluZGV4LCBzdGFydEluZGV4KSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBleHAgPSB0ZXh0LnN1YnN0cmluZyhzdGFydEluZGV4ICsgc3RhcnRTeW1ib2xMZW5ndGgsIGVuZEluZGV4KTtcbiAgICAgICAgICBleHByZXNzaW9ucy5wdXNoKGV4cCk7XG4gICAgICAgICAgcGFyc2VGbnMucHVzaCgkcGFyc2UoZXhwLCBwYXJzZVN0cmluZ2lmeUludGVyY2VwdG9yKSk7XG4gICAgICAgICAgaW5kZXggPSBlbmRJbmRleCArIGVuZFN5bWJvbExlbmd0aDtcbiAgICAgICAgICBleHByZXNzaW9uUG9zaXRpb25zLnB1c2goY29uY2F0Lmxlbmd0aCk7XG4gICAgICAgICAgY29uY2F0LnB1c2goJycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHdlIGRpZCBub3QgZmluZCBhbiBpbnRlcnBvbGF0aW9uLCBzbyB3ZSBoYXZlIHRvIGFkZCB0aGUgcmVtYWluZGVyIHRvIHRoZSBzZXBhcmF0b3JzIGFycmF5XG4gICAgICAgICAgaWYgKGluZGV4ICE9PSB0ZXh0TGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25jYXQucHVzaCh1bmVzY2FwZVRleHQodGV4dC5zdWJzdHJpbmcoaW5kZXgpKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIENvbmNhdGVuYXRpbmcgZXhwcmVzc2lvbnMgbWFrZXMgaXQgaGFyZCB0byByZWFzb24gYWJvdXQgd2hldGhlciBzb21lIGNvbWJpbmF0aW9uIG9mXG4gICAgICAvLyBjb25jYXRlbmF0ZWQgdmFsdWVzIGFyZSB1bnNhZmUgdG8gdXNlIGFuZCBjb3VsZCBlYXNpbHkgbGVhZCB0byBYU1MuICBCeSByZXF1aXJpbmcgdGhhdCBhXG4gICAgICAvLyBzaW5nbGUgZXhwcmVzc2lvbiBiZSB1c2VkIGZvciBpZnJhbWVbc3JjXSwgb2JqZWN0W3NyY10sIGV0Yy4sIHdlIGVuc3VyZSB0aGF0IHRoZSB2YWx1ZVxuICAgICAgLy8gdGhhdCdzIHVzZWQgaXMgYXNzaWduZWQgb3IgY29uc3RydWN0ZWQgYnkgc29tZSBKUyBjb2RlIHNvbWV3aGVyZSB0aGF0IGlzIG1vcmUgdGVzdGFibGUgb3JcbiAgICAgIC8vIG1ha2UgaXQgb2J2aW91cyB0aGF0IHlvdSBib3VuZCB0aGUgdmFsdWUgdG8gc29tZSB1c2VyIGNvbnRyb2xsZWQgdmFsdWUuICBUaGlzIGhlbHBzIHJlZHVjZVxuICAgICAgLy8gdGhlIGxvYWQgd2hlbiBhdWRpdGluZyBmb3IgWFNTIGlzc3Vlcy5cbiAgICAgIGlmICh0cnVzdGVkQ29udGV4dCAmJiBjb25jYXQubGVuZ3RoID4gMSkge1xuICAgICAgICAgIHRocm93ICRpbnRlcnBvbGF0ZU1pbkVycignbm9jb25jYXQnLFxuICAgICAgICAgICAgICBcIkVycm9yIHdoaWxlIGludGVycG9sYXRpbmc6IHswfVxcblN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIGRpc2FsbG93cyBcIiArXG4gICAgICAgICAgICAgIFwiaW50ZXJwb2xhdGlvbnMgdGhhdCBjb25jYXRlbmF0ZSBtdWx0aXBsZSBleHByZXNzaW9ucyB3aGVuIGEgdHJ1c3RlZCB2YWx1ZSBpcyBcIiArXG4gICAgICAgICAgICAgIFwicmVxdWlyZWQuICBTZWUgaHR0cDovL2RvY3MuYW5ndWxhcmpzLm9yZy9hcGkvbmcuJHNjZVwiLCB0ZXh0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFtdXN0SGF2ZUV4cHJlc3Npb24gfHwgZXhwcmVzc2lvbnMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBjb21wdXRlID0gZnVuY3Rpb24odmFsdWVzKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gZXhwcmVzc2lvbnMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgaWYgKGFsbE9yTm90aGluZyAmJiBpc1VuZGVmaW5lZCh2YWx1ZXNbaV0pKSByZXR1cm47XG4gICAgICAgICAgICBjb25jYXRbZXhwcmVzc2lvblBvc2l0aW9uc1tpXV0gPSB2YWx1ZXNbaV07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBjb25jYXQuam9pbignJyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGdldFZhbHVlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1c3RlZENvbnRleHQgP1xuICAgICAgICAgICAgJHNjZS5nZXRUcnVzdGVkKHRydXN0ZWRDb250ZXh0LCB2YWx1ZSkgOlxuICAgICAgICAgICAgJHNjZS52YWx1ZU9mKHZhbHVlKTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgc3RyaW5naWZ5ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkgeyAvLyBudWxsIHx8IHVuZGVmaW5lZFxuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgICAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICAgICAgICB2YWx1ZSA9ICcnICsgdmFsdWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgdmFsdWUgPSB0b0pzb24odmFsdWUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uIGludGVycG9sYXRpb25Gbihjb250ZXh0KSB7XG4gICAgICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgICAgICB2YXIgaWkgPSBleHByZXNzaW9ucy5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gbmV3IEFycmF5KGlpKTtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgZm9yICg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFsdWVzW2ldID0gcGFyc2VGbnNbaV0oY29udGV4dCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4gY29tcHV0ZSh2YWx1ZXMpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgIHZhciBuZXdFcnIgPSAkaW50ZXJwb2xhdGVNaW5FcnIoJ2ludGVycicsIFwiQ2FuJ3QgaW50ZXJwb2xhdGU6IHswfVxcbnsxfVwiLCB0ZXh0LFxuICAgICAgICAgICAgICAgICAgZXJyLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihuZXdFcnIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSwge1xuICAgICAgICAgIC8vIGFsbCBvZiB0aGVzZSBwcm9wZXJ0aWVzIGFyZSB1bmRvY3VtZW50ZWQgZm9yIG5vd1xuICAgICAgICAgIGV4cDogdGV4dCwgLy9qdXN0IGZvciBjb21wYXRpYmlsaXR5IHdpdGggcmVndWxhciB3YXRjaGVycyBjcmVhdGVkIHZpYSAkd2F0Y2hcbiAgICAgICAgICBleHByZXNzaW9uczogZXhwcmVzc2lvbnMsXG4gICAgICAgICAgJCR3YXRjaERlbGVnYXRlOiBmdW5jdGlvbihzY29wZSwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5KSB7XG4gICAgICAgICAgICB2YXIgbGFzdFZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIHNjb3BlLiR3YXRjaEdyb3VwKHBhcnNlRm5zLCBmdW5jdGlvbiBpbnRlcnBvbGF0ZUZuV2F0Y2hlcih2YWx1ZXMsIG9sZFZhbHVlcykge1xuICAgICAgICAgICAgICB2YXIgY3VyclZhbHVlID0gY29tcHV0ZSh2YWx1ZXMpO1xuICAgICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihsaXN0ZW5lcikpIHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIGN1cnJWYWx1ZSwgdmFsdWVzICE9PSBvbGRWYWx1ZXMgPyBsYXN0VmFsdWUgOiBjdXJyVmFsdWUsIHNjb3BlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBsYXN0VmFsdWUgPSBjdXJyVmFsdWU7XG4gICAgICAgICAgICB9LCBvYmplY3RFcXVhbGl0eSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdW5lc2NhcGVUZXh0KHRleHQpIHtcbiAgICAgICAgcmV0dXJuIHRleHQucmVwbGFjZShlc2NhcGVkU3RhcnRSZWdleHAsIHN0YXJ0U3ltYm9sKS5cbiAgICAgICAgICByZXBsYWNlKGVzY2FwZWRFbmRSZWdleHAsIGVuZFN5bWJvbCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHBhcnNlU3RyaW5naWZ5SW50ZXJjZXB0b3IodmFsdWUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YWx1ZSA9IGdldFZhbHVlKHZhbHVlKTtcbiAgICAgICAgICByZXR1cm4gYWxsT3JOb3RoaW5nICYmICFpc0RlZmluZWQodmFsdWUpID8gdmFsdWUgOiBzdHJpbmdpZnkodmFsdWUpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICB2YXIgbmV3RXJyID0gJGludGVycG9sYXRlTWluRXJyKCdpbnRlcnInLCBcIkNhbid0IGludGVycG9sYXRlOiB7MH1cXG57MX1cIiwgdGV4dCxcbiAgICAgICAgICAgIGVyci50b1N0cmluZygpKTtcbiAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihuZXdFcnIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJGludGVycG9sYXRlI3N0YXJ0U3ltYm9sXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU3ltYm9sIHRvIGRlbm90ZSB0aGUgc3RhcnQgb2YgZXhwcmVzc2lvbiBpbiB0aGUgaW50ZXJwb2xhdGVkIHN0cmluZy4gRGVmYXVsdHMgdG8gYHt7YC5cbiAgICAgKlxuICAgICAqIFVzZSB7QGxpbmsgbmcuJGludGVycG9sYXRlUHJvdmlkZXIjc3RhcnRTeW1ib2wgYCRpbnRlcnBvbGF0ZVByb3ZpZGVyLnN0YXJ0U3ltYm9sYH0gdG8gY2hhbmdlXG4gICAgICogdGhlIHN5bWJvbC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IHN0YXJ0IHN5bWJvbC5cbiAgICAgKi9cbiAgICAkaW50ZXJwb2xhdGUuc3RhcnRTeW1ib2wgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzdGFydFN5bWJvbDtcbiAgICB9O1xuXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJGludGVycG9sYXRlI2VuZFN5bWJvbFxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFN5bWJvbCB0byBkZW5vdGUgdGhlIGVuZCBvZiBleHByZXNzaW9uIGluIHRoZSBpbnRlcnBvbGF0ZWQgc3RyaW5nLiBEZWZhdWx0cyB0byBgfX1gLlxuICAgICAqXG4gICAgICogVXNlIHtAbGluayBuZy4kaW50ZXJwb2xhdGVQcm92aWRlciNlbmRTeW1ib2wgYCRpbnRlcnBvbGF0ZVByb3ZpZGVyLmVuZFN5bWJvbGB9IHRvIGNoYW5nZVxuICAgICAqIHRoZSBzeW1ib2wuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBlbmQgc3ltYm9sLlxuICAgICAqL1xuICAgICRpbnRlcnBvbGF0ZS5lbmRTeW1ib2wgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBlbmRTeW1ib2w7XG4gICAgfTtcblxuICAgIHJldHVybiAkaW50ZXJwb2xhdGU7XG4gIH1dO1xufVxuXG5mdW5jdGlvbiAkSW50ZXJ2YWxQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckcm9vdFNjb3BlJywgJyR3aW5kb3cnLCAnJHEnLCAnJCRxJyxcbiAgICAgICBmdW5jdGlvbigkcm9vdFNjb3BlLCAgICR3aW5kb3csICAgJHEsICAgJCRxKSB7XG4gICAgdmFyIGludGVydmFscyA9IHt9O1xuXG5cbiAgICAgLyoqXG4gICAgICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAgICAqIEBuYW1lICRpbnRlcnZhbFxuICAgICAgKlxuICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICogQW5ndWxhcidzIHdyYXBwZXIgZm9yIGB3aW5kb3cuc2V0SW50ZXJ2YWxgLiBUaGUgYGZuYCBmdW5jdGlvbiBpcyBleGVjdXRlZCBldmVyeSBgZGVsYXlgXG4gICAgICAqIG1pbGxpc2Vjb25kcy5cbiAgICAgICpcbiAgICAgICogVGhlIHJldHVybiB2YWx1ZSBvZiByZWdpc3RlcmluZyBhbiBpbnRlcnZhbCBmdW5jdGlvbiBpcyBhIHByb21pc2UuIFRoaXMgcHJvbWlzZSB3aWxsIGJlXG4gICAgICAqIG5vdGlmaWVkIHVwb24gZWFjaCB0aWNrIG9mIHRoZSBpbnRlcnZhbCwgYW5kIHdpbGwgYmUgcmVzb2x2ZWQgYWZ0ZXIgYGNvdW50YCBpdGVyYXRpb25zLCBvclxuICAgICAgKiBydW4gaW5kZWZpbml0ZWx5IGlmIGBjb3VudGAgaXMgbm90IGRlZmluZWQuIFRoZSB2YWx1ZSBvZiB0aGUgbm90aWZpY2F0aW9uIHdpbGwgYmUgdGhlXG4gICAgICAqIG51bWJlciBvZiBpdGVyYXRpb25zIHRoYXQgaGF2ZSBydW4uXG4gICAgICAqIFRvIGNhbmNlbCBhbiBpbnRlcnZhbCwgY2FsbCBgJGludGVydmFsLmNhbmNlbChwcm9taXNlKWAuXG4gICAgICAqXG4gICAgICAqIEluIHRlc3RzIHlvdSBjYW4gdXNlIHtAbGluayBuZ01vY2suJGludGVydmFsI2ZsdXNoIGAkaW50ZXJ2YWwuZmx1c2gobWlsbGlzKWB9IHRvXG4gICAgICAqIG1vdmUgZm9yd2FyZCBieSBgbWlsbGlzYCBtaWxsaXNlY29uZHMgYW5kIHRyaWdnZXIgYW55IGZ1bmN0aW9ucyBzY2hlZHVsZWQgdG8gcnVuIGluIHRoYXRcbiAgICAgICogdGltZS5cbiAgICAgICpcbiAgICAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAgICAgICogKipOb3RlKio6IEludGVydmFscyBjcmVhdGVkIGJ5IHRoaXMgc2VydmljZSBtdXN0IGJlIGV4cGxpY2l0bHkgZGVzdHJveWVkIHdoZW4geW91IGFyZSBmaW5pc2hlZFxuICAgICAgKiB3aXRoIHRoZW0uICBJbiBwYXJ0aWN1bGFyIHRoZXkgYXJlIG5vdCBhdXRvbWF0aWNhbGx5IGRlc3Ryb3llZCB3aGVuIGEgY29udHJvbGxlcidzIHNjb3BlIG9yIGFcbiAgICAgICogZGlyZWN0aXZlJ3MgZWxlbWVudCBhcmUgZGVzdHJveWVkLlxuICAgICAgKiBZb3Ugc2hvdWxkIHRha2UgdGhpcyBpbnRvIGNvbnNpZGVyYXRpb24gYW5kIG1ha2Ugc3VyZSB0byBhbHdheXMgY2FuY2VsIHRoZSBpbnRlcnZhbCBhdCB0aGVcbiAgICAgICogYXBwcm9wcmlhdGUgbW9tZW50LiAgU2VlIHRoZSBleGFtcGxlIGJlbG93IGZvciBtb3JlIGRldGFpbHMgb24gaG93IGFuZCB3aGVuIHRvIGRvIHRoaXMuXG4gICAgICAqIDwvZGl2PlxuICAgICAgKlxuICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGZuIEEgZnVuY3Rpb24gdGhhdCBzaG91bGQgYmUgY2FsbGVkIHJlcGVhdGVkbHkuXG4gICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkZWxheSBOdW1iZXIgb2YgbWlsbGlzZWNvbmRzIGJldHdlZW4gZWFjaCBmdW5jdGlvbiBjYWxsLlxuICAgICAgKiBAcGFyYW0ge251bWJlcj19IFtjb3VudD0wXSBOdW1iZXIgb2YgdGltZXMgdG8gcmVwZWF0LiBJZiBub3Qgc2V0LCBvciAwLCB3aWxsIHJlcGVhdFxuICAgICAgKiAgIGluZGVmaW5pdGVseS5cbiAgICAgICogQHBhcmFtIHtib29sZWFuPX0gW2ludm9rZUFwcGx5PXRydWVdIElmIHNldCB0byBgZmFsc2VgIHNraXBzIG1vZGVsIGRpcnR5IGNoZWNraW5nLCBvdGhlcndpc2VcbiAgICAgICogICB3aWxsIGludm9rZSBgZm5gIHdpdGhpbiB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGFwcGx5ICRhcHBseX0gYmxvY2suXG4gICAgICAqIEByZXR1cm5zIHtwcm9taXNlfSBBIHByb21pc2Ugd2hpY2ggd2lsbCBiZSBub3RpZmllZCBvbiBlYWNoIGl0ZXJhdGlvbi5cbiAgICAgICpcbiAgICAgICogQGV4YW1wbGVcbiAgICAgICogPGV4YW1wbGUgbW9kdWxlPVwiaW50ZXJ2YWxFeGFtcGxlXCI+XG4gICAgICAqIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAqICAgPHNjcmlwdD5cbiAgICAgICogICAgIGFuZ3VsYXIubW9kdWxlKCdpbnRlcnZhbEV4YW1wbGUnLCBbXSlcbiAgICAgICogICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGludGVydmFsJyxcbiAgICAgICogICAgICAgICBmdW5jdGlvbigkc2NvcGUsICRpbnRlcnZhbCkge1xuICAgICAgKiAgICAgICAgICAgJHNjb3BlLmZvcm1hdCA9ICdNL2QveXkgaDptbTpzcyBhJztcbiAgICAgICogICAgICAgICAgICRzY29wZS5ibG9vZF8xID0gMTAwO1xuICAgICAgKiAgICAgICAgICAgJHNjb3BlLmJsb29kXzIgPSAxMjA7XG4gICAgICAqXG4gICAgICAqICAgICAgICAgICB2YXIgc3RvcDtcbiAgICAgICogICAgICAgICAgICRzY29wZS5maWdodCA9IGZ1bmN0aW9uKCkge1xuICAgICAgKiAgICAgICAgICAgICAvLyBEb24ndCBzdGFydCBhIG5ldyBmaWdodCBpZiB3ZSBhcmUgYWxyZWFkeSBmaWdodGluZ1xuICAgICAgKiAgICAgICAgICAgICBpZiAoIGFuZ3VsYXIuaXNEZWZpbmVkKHN0b3ApICkgcmV0dXJuO1xuICAgICAgKlxuICAgICAgKiAgICAgICAgICAgICBzdG9wID0gJGludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgKiAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYmxvb2RfMSA+IDAgJiYgJHNjb3BlLmJsb29kXzIgPiAwKSB7XG4gICAgICAqICAgICAgICAgICAgICAgICAkc2NvcGUuYmxvb2RfMSA9ICRzY29wZS5ibG9vZF8xIC0gMztcbiAgICAgICogICAgICAgICAgICAgICAgICRzY29wZS5ibG9vZF8yID0gJHNjb3BlLmJsb29kXzIgLSA0O1xuICAgICAgKiAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAqICAgICAgICAgICAgICAgICAkc2NvcGUuc3RvcEZpZ2h0KCk7XG4gICAgICAqICAgICAgICAgICAgICAgfVxuICAgICAgKiAgICAgICAgICAgICB9LCAxMDApO1xuICAgICAgKiAgICAgICAgICAgfTtcbiAgICAgICpcbiAgICAgICogICAgICAgICAgICRzY29wZS5zdG9wRmlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICogICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKHN0b3ApKSB7XG4gICAgICAqICAgICAgICAgICAgICAgJGludGVydmFsLmNhbmNlbChzdG9wKTtcbiAgICAgICogICAgICAgICAgICAgICBzdG9wID0gdW5kZWZpbmVkO1xuICAgICAgKiAgICAgICAgICAgICB9XG4gICAgICAqICAgICAgICAgICB9O1xuICAgICAgKlxuICAgICAgKiAgICAgICAgICAgJHNjb3BlLnJlc2V0RmlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICogICAgICAgICAgICAgJHNjb3BlLmJsb29kXzEgPSAxMDA7XG4gICAgICAqICAgICAgICAgICAgICRzY29wZS5ibG9vZF8yID0gMTIwO1xuICAgICAgKiAgICAgICAgICAgfTtcbiAgICAgICpcbiAgICAgICogICAgICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAqICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBpbnRlcnZhbCBpcyBkZXN0cm95ZWQgdG9vXG4gICAgICAqICAgICAgICAgICAgICRzY29wZS5zdG9wRmlnaHQoKTtcbiAgICAgICogICAgICAgICAgIH0pO1xuICAgICAgKiAgICAgICAgIH1dKVxuICAgICAgKiAgICAgICAvLyBSZWdpc3RlciB0aGUgJ215Q3VycmVudFRpbWUnIGRpcmVjdGl2ZSBmYWN0b3J5IG1ldGhvZC5cbiAgICAgICogICAgICAgLy8gV2UgaW5qZWN0ICRpbnRlcnZhbCBhbmQgZGF0ZUZpbHRlciBzZXJ2aWNlIHNpbmNlIHRoZSBmYWN0b3J5IG1ldGhvZCBpcyBESS5cbiAgICAgICogICAgICAgLmRpcmVjdGl2ZSgnbXlDdXJyZW50VGltZScsIFsnJGludGVydmFsJywgJ2RhdGVGaWx0ZXInLFxuICAgICAgKiAgICAgICAgIGZ1bmN0aW9uKCRpbnRlcnZhbCwgZGF0ZUZpbHRlcikge1xuICAgICAgKiAgICAgICAgICAgLy8gcmV0dXJuIHRoZSBkaXJlY3RpdmUgbGluayBmdW5jdGlvbi4gKGNvbXBpbGUgZnVuY3Rpb24gbm90IG5lZWRlZClcbiAgICAgICogICAgICAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICogICAgICAgICAgICAgdmFyIGZvcm1hdCwgIC8vIGRhdGUgZm9ybWF0XG4gICAgICAqICAgICAgICAgICAgICAgICBzdG9wVGltZTsgLy8gc28gdGhhdCB3ZSBjYW4gY2FuY2VsIHRoZSB0aW1lIHVwZGF0ZXNcbiAgICAgICpcbiAgICAgICogICAgICAgICAgICAgLy8gdXNlZCB0byB1cGRhdGUgdGhlIFVJXG4gICAgICAqICAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVRpbWUoKSB7XG4gICAgICAqICAgICAgICAgICAgICAgZWxlbWVudC50ZXh0KGRhdGVGaWx0ZXIobmV3IERhdGUoKSwgZm9ybWF0KSk7XG4gICAgICAqICAgICAgICAgICAgIH1cbiAgICAgICpcbiAgICAgICogICAgICAgICAgICAgLy8gd2F0Y2ggdGhlIGV4cHJlc3Npb24sIGFuZCB1cGRhdGUgdGhlIFVJIG9uIGNoYW5nZS5cbiAgICAgICogICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGF0dHJzLm15Q3VycmVudFRpbWUsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAqICAgICAgICAgICAgICAgZm9ybWF0ID0gdmFsdWU7XG4gICAgICAqICAgICAgICAgICAgICAgdXBkYXRlVGltZSgpO1xuICAgICAgKiAgICAgICAgICAgICB9KTtcbiAgICAgICpcbiAgICAgICogICAgICAgICAgICAgc3RvcFRpbWUgPSAkaW50ZXJ2YWwodXBkYXRlVGltZSwgMTAwMCk7XG4gICAgICAqXG4gICAgICAqICAgICAgICAgICAgIC8vIGxpc3RlbiBvbiBET00gZGVzdHJveSAocmVtb3ZhbCkgZXZlbnQsIGFuZCBjYW5jZWwgdGhlIG5leHQgVUkgdXBkYXRlXG4gICAgICAqICAgICAgICAgICAgIC8vIHRvIHByZXZlbnQgdXBkYXRpbmcgdGltZSBhZnRlciB0aGUgRE9NIGVsZW1lbnQgd2FzIHJlbW92ZWQuXG4gICAgICAqICAgICAgICAgICAgIGVsZW1lbnQub24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAqICAgICAgICAgICAgICAgJGludGVydmFsLmNhbmNlbChzdG9wVGltZSk7XG4gICAgICAqICAgICAgICAgICAgIH0pO1xuICAgICAgKiAgICAgICAgICAgfVxuICAgICAgKiAgICAgICAgIH1dKTtcbiAgICAgICogICA8L3NjcmlwdD5cbiAgICAgICpcbiAgICAgICogICA8ZGl2PlxuICAgICAgKiAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICogICAgICAgRGF0ZSBmb3JtYXQ6IDxpbnB1dCBuZy1tb2RlbD1cImZvcm1hdFwiPiA8aHIvPlxuICAgICAgKiAgICAgICBDdXJyZW50IHRpbWUgaXM6IDxzcGFuIG15LWN1cnJlbnQtdGltZT1cImZvcm1hdFwiPjwvc3Bhbj5cbiAgICAgICogICAgICAgPGhyLz5cbiAgICAgICogICAgICAgQmxvb2QgMSA6IDxmb250IGNvbG9yPSdyZWQnPnt7Ymxvb2RfMX19PC9mb250PlxuICAgICAgKiAgICAgICBCbG9vZCAyIDogPGZvbnQgY29sb3I9J3JlZCc+e3tibG9vZF8yfX08L2ZvbnQ+XG4gICAgICAqICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtbmctY2xpY2s9XCJmaWdodCgpXCI+RmlnaHQ8L2J1dHRvbj5cbiAgICAgICogICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1uZy1jbGljaz1cInN0b3BGaWdodCgpXCI+U3RvcEZpZ2h0PC9idXR0b24+XG4gICAgICAqICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtbmctY2xpY2s9XCJyZXNldEZpZ2h0KClcIj5yZXNldEZpZ2h0PC9idXR0b24+XG4gICAgICAqICAgICA8L2Rpdj5cbiAgICAgICogICA8L2Rpdj5cbiAgICAgICpcbiAgICAgICogPC9maWxlPlxuICAgICAgKiA8L2V4YW1wbGU+XG4gICAgICAqL1xuICAgIGZ1bmN0aW9uIGludGVydmFsKGZuLCBkZWxheSwgY291bnQsIGludm9rZUFwcGx5KSB7XG4gICAgICB2YXIgc2V0SW50ZXJ2YWwgPSAkd2luZG93LnNldEludGVydmFsLFxuICAgICAgICAgIGNsZWFySW50ZXJ2YWwgPSAkd2luZG93LmNsZWFySW50ZXJ2YWwsXG4gICAgICAgICAgaXRlcmF0aW9uID0gMCxcbiAgICAgICAgICBza2lwQXBwbHkgPSAoaXNEZWZpbmVkKGludm9rZUFwcGx5KSAmJiAhaW52b2tlQXBwbHkpLFxuICAgICAgICAgIGRlZmVycmVkID0gKHNraXBBcHBseSA/ICQkcSA6ICRxKS5kZWZlcigpLFxuICAgICAgICAgIHByb21pc2UgPSBkZWZlcnJlZC5wcm9taXNlO1xuXG4gICAgICBjb3VudCA9IGlzRGVmaW5lZChjb3VudCkgPyBjb3VudCA6IDA7XG5cbiAgICAgIHByb21pc2UudGhlbihudWxsLCBudWxsLCBmbik7XG5cbiAgICAgIHByb21pc2UuJCRpbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gdGljaygpIHtcbiAgICAgICAgZGVmZXJyZWQubm90aWZ5KGl0ZXJhdGlvbisrKTtcblxuICAgICAgICBpZiAoY291bnQgPiAwICYmIGl0ZXJhdGlvbiA+PSBjb3VudCkge1xuICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoaXRlcmF0aW9uKTtcbiAgICAgICAgICBjbGVhckludGVydmFsKHByb21pc2UuJCRpbnRlcnZhbElkKTtcbiAgICAgICAgICBkZWxldGUgaW50ZXJ2YWxzW3Byb21pc2UuJCRpbnRlcnZhbElkXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghc2tpcEFwcGx5KSAkcm9vdFNjb3BlLiRhcHBseSgpO1xuXG4gICAgICB9LCBkZWxheSk7XG5cbiAgICAgIGludGVydmFsc1twcm9taXNlLiQkaW50ZXJ2YWxJZF0gPSBkZWZlcnJlZDtcblxuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuXG5cbiAgICAgLyoqXG4gICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICogQG5hbWUgJGludGVydmFsI2NhbmNlbFxuICAgICAgKlxuICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICogQ2FuY2VscyBhIHRhc2sgYXNzb2NpYXRlZCB3aXRoIHRoZSBgcHJvbWlzZWAuXG4gICAgICAqXG4gICAgICAqIEBwYXJhbSB7cHJvbWlzZX0gcHJvbWlzZSByZXR1cm5lZCBieSB0aGUgYCRpbnRlcnZhbGAgZnVuY3Rpb24uXG4gICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdGFzayB3YXMgc3VjY2Vzc2Z1bGx5IGNhbmNlbGVkLlxuICAgICAgKi9cbiAgICBpbnRlcnZhbC5jYW5jZWwgPSBmdW5jdGlvbihwcm9taXNlKSB7XG4gICAgICBpZiAocHJvbWlzZSAmJiBwcm9taXNlLiQkaW50ZXJ2YWxJZCBpbiBpbnRlcnZhbHMpIHtcbiAgICAgICAgaW50ZXJ2YWxzW3Byb21pc2UuJCRpbnRlcnZhbElkXS5yZWplY3QoJ2NhbmNlbGVkJyk7XG4gICAgICAgICR3aW5kb3cuY2xlYXJJbnRlcnZhbChwcm9taXNlLiQkaW50ZXJ2YWxJZCk7XG4gICAgICAgIGRlbGV0ZSBpbnRlcnZhbHNbcHJvbWlzZS4kJGludGVydmFsSWRdO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGludGVydmFsO1xuICB9XTtcbn1cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJGxvY2FsZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogJGxvY2FsZSBzZXJ2aWNlIHByb3ZpZGVzIGxvY2FsaXphdGlvbiBydWxlcyBmb3IgdmFyaW91cyBBbmd1bGFyIGNvbXBvbmVudHMuIEFzIG9mIHJpZ2h0IG5vdyB0aGVcbiAqIG9ubHkgcHVibGljIGFwaSBpczpcbiAqXG4gKiAqIGBpZGAg4oCTIGB7c3RyaW5nfWAg4oCTIGxvY2FsZSBpZCBmb3JtYXR0ZWQgYXMgYGxhbmd1YWdlSWQtY291bnRyeUlkYCAoZS5nLiBgZW4tdXNgKVxuICovXG5mdW5jdGlvbiAkTG9jYWxlUHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpZDogJ2VuLXVzJyxcblxuICAgICAgTlVNQkVSX0ZPUk1BVFM6IHtcbiAgICAgICAgREVDSU1BTF9TRVA6ICcuJyxcbiAgICAgICAgR1JPVVBfU0VQOiAnLCcsXG4gICAgICAgIFBBVFRFUk5TOiBbXG4gICAgICAgICAgeyAvLyBEZWNpbWFsIFBhdHRlcm5cbiAgICAgICAgICAgIG1pbkludDogMSxcbiAgICAgICAgICAgIG1pbkZyYWM6IDAsXG4gICAgICAgICAgICBtYXhGcmFjOiAzLFxuICAgICAgICAgICAgcG9zUHJlOiAnJyxcbiAgICAgICAgICAgIHBvc1N1ZjogJycsXG4gICAgICAgICAgICBuZWdQcmU6ICctJyxcbiAgICAgICAgICAgIG5lZ1N1ZjogJycsXG4gICAgICAgICAgICBnU2l6ZTogMyxcbiAgICAgICAgICAgIGxnU2l6ZTogM1xuICAgICAgICAgIH0seyAvL0N1cnJlbmN5IFBhdHRlcm5cbiAgICAgICAgICAgIG1pbkludDogMSxcbiAgICAgICAgICAgIG1pbkZyYWM6IDIsXG4gICAgICAgICAgICBtYXhGcmFjOiAyLFxuICAgICAgICAgICAgcG9zUHJlOiAnXFx1MDBBNCcsXG4gICAgICAgICAgICBwb3NTdWY6ICcnLFxuICAgICAgICAgICAgbmVnUHJlOiAnKFxcdTAwQTQnLFxuICAgICAgICAgICAgbmVnU3VmOiAnKScsXG4gICAgICAgICAgICBnU2l6ZTogMyxcbiAgICAgICAgICAgIGxnU2l6ZTogM1xuICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgQ1VSUkVOQ1lfU1lNOiAnJCdcbiAgICAgIH0sXG5cbiAgICAgIERBVEVUSU1FX0ZPUk1BVFM6IHtcbiAgICAgICAgTU9OVEg6XG4gICAgICAgICAgICAnSmFudWFyeSxGZWJydWFyeSxNYXJjaCxBcHJpbCxNYXksSnVuZSxKdWx5LEF1Z3VzdCxTZXB0ZW1iZXIsT2N0b2JlcixOb3ZlbWJlcixEZWNlbWJlcidcbiAgICAgICAgICAgIC5zcGxpdCgnLCcpLFxuICAgICAgICBTSE9SVE1PTlRIOiAgJ0phbixGZWIsTWFyLEFwcixNYXksSnVuLEp1bCxBdWcsU2VwLE9jdCxOb3YsRGVjJy5zcGxpdCgnLCcpLFxuICAgICAgICBEQVk6ICdTdW5kYXksTW9uZGF5LFR1ZXNkYXksV2VkbmVzZGF5LFRodXJzZGF5LEZyaWRheSxTYXR1cmRheScuc3BsaXQoJywnKSxcbiAgICAgICAgU0hPUlREQVk6ICdTdW4sTW9uLFR1ZSxXZWQsVGh1LEZyaSxTYXQnLnNwbGl0KCcsJyksXG4gICAgICAgIEFNUE1TOiBbJ0FNJywnUE0nXSxcbiAgICAgICAgbWVkaXVtOiAnTU1NIGQsIHkgaDptbTpzcyBhJyxcbiAgICAgICAgJ3Nob3J0JzogJ00vZC95eSBoOm1tIGEnLFxuICAgICAgICBmdWxsRGF0ZTogJ0VFRUUsIE1NTU0gZCwgeScsXG4gICAgICAgIGxvbmdEYXRlOiAnTU1NTSBkLCB5JyxcbiAgICAgICAgbWVkaXVtRGF0ZTogJ01NTSBkLCB5JyxcbiAgICAgICAgc2hvcnREYXRlOiAnTS9kL3l5JyxcbiAgICAgICAgbWVkaXVtVGltZTogJ2g6bW06c3MgYScsXG4gICAgICAgIHNob3J0VGltZTogJ2g6bW0gYSdcbiAgICAgIH0sXG5cbiAgICAgIHBsdXJhbENhdDogZnVuY3Rpb24obnVtKSB7XG4gICAgICAgIGlmIChudW0gPT09IDEpIHtcbiAgICAgICAgICByZXR1cm4gJ29uZSc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICdvdGhlcic7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbn1cblxudmFyIFBBVEhfTUFUQ0ggPSAvXihbXlxcPyNdKikoXFw/KFteI10qKSk/KCMoLiopKT8kLyxcbiAgICBERUZBVUxUX1BPUlRTID0geydodHRwJzogODAsICdodHRwcyc6IDQ0MywgJ2Z0cCc6IDIxfTtcbnZhciAkbG9jYXRpb25NaW5FcnIgPSBtaW5FcnIoJyRsb2NhdGlvbicpO1xuXG5cbi8qKlxuICogRW5jb2RlIHBhdGggdXNpbmcgZW5jb2RlVXJpU2VnbWVudCwgaWdub3JpbmcgZm9yd2FyZCBzbGFzaGVzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUGF0aCB0byBlbmNvZGVcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICB2YXIgc2VnbWVudHMgPSBwYXRoLnNwbGl0KCcvJyksXG4gICAgICBpID0gc2VnbWVudHMubGVuZ3RoO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICBzZWdtZW50c1tpXSA9IGVuY29kZVVyaVNlZ21lbnQoc2VnbWVudHNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIHNlZ21lbnRzLmpvaW4oJy8nKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VBYnNvbHV0ZVVybChhYnNvbHV0ZVVybCwgbG9jYXRpb25PYmopIHtcbiAgdmFyIHBhcnNlZFVybCA9IHVybFJlc29sdmUoYWJzb2x1dGVVcmwpO1xuXG4gIGxvY2F0aW9uT2JqLiQkcHJvdG9jb2wgPSBwYXJzZWRVcmwucHJvdG9jb2w7XG4gIGxvY2F0aW9uT2JqLiQkaG9zdCA9IHBhcnNlZFVybC5ob3N0bmFtZTtcbiAgbG9jYXRpb25PYmouJCRwb3J0ID0gaW50KHBhcnNlZFVybC5wb3J0KSB8fCBERUZBVUxUX1BPUlRTW3BhcnNlZFVybC5wcm90b2NvbF0gfHwgbnVsbDtcbn1cblxuXG5mdW5jdGlvbiBwYXJzZUFwcFVybChyZWxhdGl2ZVVybCwgbG9jYXRpb25PYmopIHtcbiAgdmFyIHByZWZpeGVkID0gKHJlbGF0aXZlVXJsLmNoYXJBdCgwKSAhPT0gJy8nKTtcbiAgaWYgKHByZWZpeGVkKSB7XG4gICAgcmVsYXRpdmVVcmwgPSAnLycgKyByZWxhdGl2ZVVybDtcbiAgfVxuICB2YXIgbWF0Y2ggPSB1cmxSZXNvbHZlKHJlbGF0aXZlVXJsKTtcbiAgbG9jYXRpb25PYmouJCRwYXRoID0gZGVjb2RlVVJJQ29tcG9uZW50KHByZWZpeGVkICYmIG1hdGNoLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nID9cbiAgICAgIG1hdGNoLnBhdGhuYW1lLnN1YnN0cmluZygxKSA6IG1hdGNoLnBhdGhuYW1lKTtcbiAgbG9jYXRpb25PYmouJCRzZWFyY2ggPSBwYXJzZUtleVZhbHVlKG1hdGNoLnNlYXJjaCk7XG4gIGxvY2F0aW9uT2JqLiQkaGFzaCA9IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaC5oYXNoKTtcblxuICAvLyBtYWtlIHN1cmUgcGF0aCBzdGFydHMgd2l0aCAnLyc7XG4gIGlmIChsb2NhdGlvbk9iai4kJHBhdGggJiYgbG9jYXRpb25PYmouJCRwYXRoLmNoYXJBdCgwKSAhPSAnLycpIHtcbiAgICBsb2NhdGlvbk9iai4kJHBhdGggPSAnLycgKyBsb2NhdGlvbk9iai4kJHBhdGg7XG4gIH1cbn1cblxuXG4vKipcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmVnaW5cbiAqIEBwYXJhbSB7c3RyaW5nfSB3aG9sZVxuICogQHJldHVybnMge3N0cmluZ30gcmV0dXJucyB0ZXh0IGZyb20gd2hvbGUgYWZ0ZXIgYmVnaW4gb3IgdW5kZWZpbmVkIGlmIGl0IGRvZXMgbm90IGJlZ2luIHdpdGhcbiAqICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gYmVnaW5zV2l0aChiZWdpbiwgd2hvbGUpIHtcbiAgaWYgKHdob2xlLmluZGV4T2YoYmVnaW4pID09PSAwKSB7XG4gICAgcmV0dXJuIHdob2xlLnN1YnN0cihiZWdpbi5sZW5ndGgpO1xuICB9XG59XG5cblxuZnVuY3Rpb24gc3RyaXBIYXNoKHVybCkge1xuICB2YXIgaW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICByZXR1cm4gaW5kZXggPT0gLTEgPyB1cmwgOiB1cmwuc3Vic3RyKDAsIGluZGV4KTtcbn1cblxuZnVuY3Rpb24gdHJpbUVtcHR5SGFzaCh1cmwpIHtcbiAgcmV0dXJuIHVybC5yZXBsYWNlKC8oIy4rKXwjJC8sICckMScpO1xufVxuXG5cbmZ1bmN0aW9uIHN0cmlwRmlsZSh1cmwpIHtcbiAgcmV0dXJuIHVybC5zdWJzdHIoMCwgc3RyaXBIYXNoKHVybCkubGFzdEluZGV4T2YoJy8nKSArIDEpO1xufVxuXG4vKiByZXR1cm4gdGhlIHNlcnZlciBvbmx5IChzY2hlbWU6Ly9ob3N0OnBvcnQpICovXG5mdW5jdGlvbiBzZXJ2ZXJCYXNlKHVybCkge1xuICByZXR1cm4gdXJsLnN1YnN0cmluZygwLCB1cmwuaW5kZXhPZignLycsIHVybC5pbmRleE9mKCcvLycpICsgMikpO1xufVxuXG5cbi8qKlxuICogTG9jYXRpb25IdG1sNVVybCByZXByZXNlbnRzIGFuIHVybFxuICogVGhpcyBvYmplY3QgaXMgZXhwb3NlZCBhcyAkbG9jYXRpb24gc2VydmljZSB3aGVuIEhUTUw1IG1vZGUgaXMgZW5hYmxlZCBhbmQgc3VwcG9ydGVkXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwQmFzZSBhcHBsaWNhdGlvbiBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VQcmVmaXggdXJsIHBhdGggcHJlZml4XG4gKi9cbmZ1bmN0aW9uIExvY2F0aW9uSHRtbDVVcmwoYXBwQmFzZSwgYmFzZVByZWZpeCkge1xuICB0aGlzLiQkaHRtbDUgPSB0cnVlO1xuICBiYXNlUHJlZml4ID0gYmFzZVByZWZpeCB8fCAnJztcbiAgdmFyIGFwcEJhc2VOb0ZpbGUgPSBzdHJpcEZpbGUoYXBwQmFzZSk7XG4gIHBhcnNlQWJzb2x1dGVVcmwoYXBwQmFzZSwgdGhpcyk7XG5cblxuICAvKipcbiAgICogUGFyc2UgZ2l2ZW4gaHRtbDUgKHJlZ3VsYXIpIHVybCBzdHJpbmcgaW50byBwcm9wZXJ0aWVzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgSFRNTDUgdXJsXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLiQkcGFyc2UgPSBmdW5jdGlvbih1cmwpIHtcbiAgICB2YXIgcGF0aFVybCA9IGJlZ2luc1dpdGgoYXBwQmFzZU5vRmlsZSwgdXJsKTtcbiAgICBpZiAoIWlzU3RyaW5nKHBhdGhVcmwpKSB7XG4gICAgICB0aHJvdyAkbG9jYXRpb25NaW5FcnIoJ2lwdGhwcmZ4JywgJ0ludmFsaWQgdXJsIFwiezB9XCIsIG1pc3NpbmcgcGF0aCBwcmVmaXggXCJ7MX1cIi4nLCB1cmwsXG4gICAgICAgICAgYXBwQmFzZU5vRmlsZSk7XG4gICAgfVxuXG4gICAgcGFyc2VBcHBVcmwocGF0aFVybCwgdGhpcyk7XG5cbiAgICBpZiAoIXRoaXMuJCRwYXRoKSB7XG4gICAgICB0aGlzLiQkcGF0aCA9ICcvJztcbiAgICB9XG5cbiAgICB0aGlzLiQkY29tcG9zZSgpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDb21wb3NlIHVybCBhbmQgdXBkYXRlIGBhYnNVcmxgIHByb3BlcnR5XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLiQkY29tcG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzZWFyY2ggPSB0b0tleVZhbHVlKHRoaXMuJCRzZWFyY2gpLFxuICAgICAgICBoYXNoID0gdGhpcy4kJGhhc2ggPyAnIycgKyBlbmNvZGVVcmlTZWdtZW50KHRoaXMuJCRoYXNoKSA6ICcnO1xuXG4gICAgdGhpcy4kJHVybCA9IGVuY29kZVBhdGgodGhpcy4kJHBhdGgpICsgKHNlYXJjaCA/ICc/JyArIHNlYXJjaCA6ICcnKSArIGhhc2g7XG4gICAgdGhpcy4kJGFic1VybCA9IGFwcEJhc2VOb0ZpbGUgKyB0aGlzLiQkdXJsLnN1YnN0cigxKTsgLy8gZmlyc3QgY2hhciBpcyBhbHdheXMgJy8nXG4gIH07XG5cbiAgdGhpcy4kJHBhcnNlTGlua1VybCA9IGZ1bmN0aW9uKHVybCwgcmVsSHJlZikge1xuICAgIGlmIChyZWxIcmVmICYmIHJlbEhyZWZbMF0gPT09ICcjJykge1xuICAgICAgLy8gc3BlY2lhbCBjYXNlIGZvciBsaW5rcyB0byBoYXNoIGZyYWdtZW50czpcbiAgICAgIC8vIGtlZXAgdGhlIG9sZCB1cmwgYW5kIG9ubHkgcmVwbGFjZSB0aGUgaGFzaCBmcmFnbWVudFxuICAgICAgdGhpcy5oYXNoKHJlbEhyZWYuc2xpY2UoMSkpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHZhciBhcHBVcmwsIHByZXZBcHBVcmw7XG4gICAgdmFyIHJld3JpdHRlblVybDtcblxuICAgIGlmICgoYXBwVXJsID0gYmVnaW5zV2l0aChhcHBCYXNlLCB1cmwpKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwcmV2QXBwVXJsID0gYXBwVXJsO1xuICAgICAgaWYgKChhcHBVcmwgPSBiZWdpbnNXaXRoKGJhc2VQcmVmaXgsIGFwcFVybCkpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV3cml0dGVuVXJsID0gYXBwQmFzZU5vRmlsZSArIChiZWdpbnNXaXRoKCcvJywgYXBwVXJsKSB8fCBhcHBVcmwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV3cml0dGVuVXJsID0gYXBwQmFzZSArIHByZXZBcHBVcmw7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICgoYXBwVXJsID0gYmVnaW5zV2l0aChhcHBCYXNlTm9GaWxlLCB1cmwpKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXdyaXR0ZW5VcmwgPSBhcHBCYXNlTm9GaWxlICsgYXBwVXJsO1xuICAgIH0gZWxzZSBpZiAoYXBwQmFzZU5vRmlsZSA9PSB1cmwgKyAnLycpIHtcbiAgICAgIHJld3JpdHRlblVybCA9IGFwcEJhc2VOb0ZpbGU7XG4gICAgfVxuICAgIGlmIChyZXdyaXR0ZW5VcmwpIHtcbiAgICAgIHRoaXMuJCRwYXJzZShyZXdyaXR0ZW5VcmwpO1xuICAgIH1cbiAgICByZXR1cm4gISFyZXdyaXR0ZW5Vcmw7XG4gIH07XG59XG5cblxuLyoqXG4gKiBMb2NhdGlvbkhhc2hiYW5nVXJsIHJlcHJlc2VudHMgdXJsXG4gKiBUaGlzIG9iamVjdCBpcyBleHBvc2VkIGFzICRsb2NhdGlvbiBzZXJ2aWNlIHdoZW4gZGV2ZWxvcGVyIGRvZXNuJ3Qgb3B0IGludG8gaHRtbDUgbW9kZS5cbiAqIEl0IGFsc28gc2VydmVzIGFzIHRoZSBiYXNlIGNsYXNzIGZvciBodG1sNSBtb2RlIGZhbGxiYWNrIG9uIGxlZ2FjeSBicm93c2Vycy5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcHBCYXNlIGFwcGxpY2F0aW9uIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gaGFzaFByZWZpeCBoYXNoYmFuZyBwcmVmaXhcbiAqL1xuZnVuY3Rpb24gTG9jYXRpb25IYXNoYmFuZ1VybChhcHBCYXNlLCBoYXNoUHJlZml4KSB7XG4gIHZhciBhcHBCYXNlTm9GaWxlID0gc3RyaXBGaWxlKGFwcEJhc2UpO1xuXG4gIHBhcnNlQWJzb2x1dGVVcmwoYXBwQmFzZSwgdGhpcyk7XG5cblxuICAvKipcbiAgICogUGFyc2UgZ2l2ZW4gaGFzaGJhbmcgdXJsIGludG8gcHJvcGVydGllc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIEhhc2hiYW5nIHVybFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy4kJHBhcnNlID0gZnVuY3Rpb24odXJsKSB7XG4gICAgdmFyIHdpdGhvdXRCYXNlVXJsID0gYmVnaW5zV2l0aChhcHBCYXNlLCB1cmwpIHx8IGJlZ2luc1dpdGgoYXBwQmFzZU5vRmlsZSwgdXJsKTtcbiAgICB2YXIgd2l0aG91dEhhc2hVcmw7XG5cbiAgICBpZiAod2l0aG91dEJhc2VVcmwuY2hhckF0KDApID09PSAnIycpIHtcblxuICAgICAgLy8gVGhlIHJlc3Qgb2YgdGhlIHVybCBzdGFydHMgd2l0aCBhIGhhc2ggc28gd2UgaGF2ZVxuICAgICAgLy8gZ290IGVpdGhlciBhIGhhc2hiYW5nIHBhdGggb3IgYSBwbGFpbiBoYXNoIGZyYWdtZW50XG4gICAgICB3aXRob3V0SGFzaFVybCA9IGJlZ2luc1dpdGgoaGFzaFByZWZpeCwgd2l0aG91dEJhc2VVcmwpO1xuICAgICAgaWYgKGlzVW5kZWZpbmVkKHdpdGhvdXRIYXNoVXJsKSkge1xuICAgICAgICAvLyBUaGVyZSB3YXMgbm8gaGFzaGJhbmcgcHJlZml4IHNvIHdlIGp1c3QgaGF2ZSBhIGhhc2ggZnJhZ21lbnRcbiAgICAgICAgd2l0aG91dEhhc2hVcmwgPSB3aXRob3V0QmFzZVVybDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGVyZSB3YXMgbm8gaGFzaGJhbmcgcGF0aCBub3IgaGFzaCBmcmFnbWVudDpcbiAgICAgIC8vIElmIHdlIGFyZSBpbiBIVE1MNSBtb2RlIHdlIHVzZSB3aGF0IGlzIGxlZnQgYXMgdGhlIHBhdGg7XG4gICAgICAvLyBPdGhlcndpc2Ugd2UgaWdub3JlIHdoYXQgaXMgbGVmdFxuICAgICAgd2l0aG91dEhhc2hVcmwgPSB0aGlzLiQkaHRtbDUgPyB3aXRob3V0QmFzZVVybCA6ICcnO1xuICAgIH1cblxuICAgIHBhcnNlQXBwVXJsKHdpdGhvdXRIYXNoVXJsLCB0aGlzKTtcblxuICAgIHRoaXMuJCRwYXRoID0gcmVtb3ZlV2luZG93c0RyaXZlTmFtZSh0aGlzLiQkcGF0aCwgd2l0aG91dEhhc2hVcmwsIGFwcEJhc2UpO1xuXG4gICAgdGhpcy4kJGNvbXBvc2UoKTtcblxuICAgIC8qXG4gICAgICogSW4gV2luZG93cywgb24gYW4gYW5jaG9yIG5vZGUgb24gZG9jdW1lbnRzIGxvYWRlZCBmcm9tXG4gICAgICogdGhlIGZpbGVzeXN0ZW0sIHRoZSBicm93c2VyIHdpbGwgcmV0dXJuIGEgcGF0aG5hbWVcbiAgICAgKiBwcmVmaXhlZCB3aXRoIHRoZSBkcml2ZSBuYW1lICgnL0M6L3BhdGgnKSB3aGVuIGFcbiAgICAgKiBwYXRobmFtZSB3aXRob3V0IGEgZHJpdmUgaXMgc2V0OlxuICAgICAqICAqIGEuc2V0QXR0cmlidXRlKCdocmVmJywgJy9mb28nKVxuICAgICAqICAgKiBhLnBhdGhuYW1lID09PSAnL0M6L2ZvbycgLy90cnVlXG4gICAgICpcbiAgICAgKiBJbnNpZGUgb2YgQW5ndWxhciwgd2UncmUgYWx3YXlzIHVzaW5nIHBhdGhuYW1lcyB0aGF0XG4gICAgICogZG8gbm90IGluY2x1ZGUgZHJpdmUgbmFtZXMgZm9yIHJvdXRpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVtb3ZlV2luZG93c0RyaXZlTmFtZShwYXRoLCB1cmwsIGJhc2UpIHtcbiAgICAgIC8qXG4gICAgICBNYXRjaGVzIHBhdGhzIGZvciBmaWxlIHByb3RvY29sIG9uIHdpbmRvd3MsXG4gICAgICBzdWNoIGFzIC9DOi9mb28vYmFyLCBhbmQgY2FwdHVyZXMgb25seSAvZm9vL2Jhci5cbiAgICAgICovXG4gICAgICB2YXIgd2luZG93c0ZpbGVQYXRoRXhwID0gL15cXC9bQS1aXTooXFwvLiopLztcblxuICAgICAgdmFyIGZpcnN0UGF0aFNlZ21lbnRNYXRjaDtcblxuICAgICAgLy9HZXQgdGhlIHJlbGF0aXZlIHBhdGggZnJvbSB0aGUgaW5wdXQgVVJMLlxuICAgICAgaWYgKHVybC5pbmRleE9mKGJhc2UpID09PSAwKSB7XG4gICAgICAgIHVybCA9IHVybC5yZXBsYWNlKGJhc2UsICcnKTtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGlucHV0IFVSTCBpbnRlbnRpb25hbGx5IGNvbnRhaW5zIGEgZmlyc3QgcGF0aCBzZWdtZW50IHRoYXQgZW5kcyB3aXRoIGEgY29sb24uXG4gICAgICBpZiAod2luZG93c0ZpbGVQYXRoRXhwLmV4ZWModXJsKSkge1xuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICAgIH1cblxuICAgICAgZmlyc3RQYXRoU2VnbWVudE1hdGNoID0gd2luZG93c0ZpbGVQYXRoRXhwLmV4ZWMocGF0aCk7XG4gICAgICByZXR1cm4gZmlyc3RQYXRoU2VnbWVudE1hdGNoID8gZmlyc3RQYXRoU2VnbWVudE1hdGNoWzFdIDogcGF0aDtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIENvbXBvc2UgaGFzaGJhbmcgdXJsIGFuZCB1cGRhdGUgYGFic1VybGAgcHJvcGVydHlcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHRoaXMuJCRjb21wb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNlYXJjaCA9IHRvS2V5VmFsdWUodGhpcy4kJHNlYXJjaCksXG4gICAgICAgIGhhc2ggPSB0aGlzLiQkaGFzaCA/ICcjJyArIGVuY29kZVVyaVNlZ21lbnQodGhpcy4kJGhhc2gpIDogJyc7XG5cbiAgICB0aGlzLiQkdXJsID0gZW5jb2RlUGF0aCh0aGlzLiQkcGF0aCkgKyAoc2VhcmNoID8gJz8nICsgc2VhcmNoIDogJycpICsgaGFzaDtcbiAgICB0aGlzLiQkYWJzVXJsID0gYXBwQmFzZSArICh0aGlzLiQkdXJsID8gaGFzaFByZWZpeCArIHRoaXMuJCR1cmwgOiAnJyk7XG4gIH07XG5cbiAgdGhpcy4kJHBhcnNlTGlua1VybCA9IGZ1bmN0aW9uKHVybCwgcmVsSHJlZikge1xuICAgIGlmIChzdHJpcEhhc2goYXBwQmFzZSkgPT0gc3RyaXBIYXNoKHVybCkpIHtcbiAgICAgIHRoaXMuJCRwYXJzZSh1cmwpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcbn1cblxuXG4vKipcbiAqIExvY2F0aW9uSGFzaGJhbmdVcmwgcmVwcmVzZW50cyB1cmxcbiAqIFRoaXMgb2JqZWN0IGlzIGV4cG9zZWQgYXMgJGxvY2F0aW9uIHNlcnZpY2Ugd2hlbiBodG1sNSBoaXN0b3J5IGFwaSBpcyBlbmFibGVkIGJ1dCB0aGUgYnJvd3NlclxuICogZG9lcyBub3Qgc3VwcG9ydCBpdC5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcHBCYXNlIGFwcGxpY2F0aW9uIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gaGFzaFByZWZpeCBoYXNoYmFuZyBwcmVmaXhcbiAqL1xuZnVuY3Rpb24gTG9jYXRpb25IYXNoYmFuZ0luSHRtbDVVcmwoYXBwQmFzZSwgaGFzaFByZWZpeCkge1xuICB0aGlzLiQkaHRtbDUgPSB0cnVlO1xuICBMb2NhdGlvbkhhc2hiYW5nVXJsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgdmFyIGFwcEJhc2VOb0ZpbGUgPSBzdHJpcEZpbGUoYXBwQmFzZSk7XG5cbiAgdGhpcy4kJHBhcnNlTGlua1VybCA9IGZ1bmN0aW9uKHVybCwgcmVsSHJlZikge1xuICAgIGlmIChyZWxIcmVmICYmIHJlbEhyZWZbMF0gPT09ICcjJykge1xuICAgICAgLy8gc3BlY2lhbCBjYXNlIGZvciBsaW5rcyB0byBoYXNoIGZyYWdtZW50czpcbiAgICAgIC8vIGtlZXAgdGhlIG9sZCB1cmwgYW5kIG9ubHkgcmVwbGFjZSB0aGUgaGFzaCBmcmFnbWVudFxuICAgICAgdGhpcy5oYXNoKHJlbEhyZWYuc2xpY2UoMSkpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHJld3JpdHRlblVybDtcbiAgICB2YXIgYXBwVXJsO1xuXG4gICAgaWYgKGFwcEJhc2UgPT0gc3RyaXBIYXNoKHVybCkpIHtcbiAgICAgIHJld3JpdHRlblVybCA9IHVybDtcbiAgICB9IGVsc2UgaWYgKChhcHBVcmwgPSBiZWdpbnNXaXRoKGFwcEJhc2VOb0ZpbGUsIHVybCkpKSB7XG4gICAgICByZXdyaXR0ZW5VcmwgPSBhcHBCYXNlICsgaGFzaFByZWZpeCArIGFwcFVybDtcbiAgICB9IGVsc2UgaWYgKGFwcEJhc2VOb0ZpbGUgPT09IHVybCArICcvJykge1xuICAgICAgcmV3cml0dGVuVXJsID0gYXBwQmFzZU5vRmlsZTtcbiAgICB9XG4gICAgaWYgKHJld3JpdHRlblVybCkge1xuICAgICAgdGhpcy4kJHBhcnNlKHJld3JpdHRlblVybCk7XG4gICAgfVxuICAgIHJldHVybiAhIXJld3JpdHRlblVybDtcbiAgfTtcblxuICB0aGlzLiQkY29tcG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzZWFyY2ggPSB0b0tleVZhbHVlKHRoaXMuJCRzZWFyY2gpLFxuICAgICAgICBoYXNoID0gdGhpcy4kJGhhc2ggPyAnIycgKyBlbmNvZGVVcmlTZWdtZW50KHRoaXMuJCRoYXNoKSA6ICcnO1xuXG4gICAgdGhpcy4kJHVybCA9IGVuY29kZVBhdGgodGhpcy4kJHBhdGgpICsgKHNlYXJjaCA/ICc/JyArIHNlYXJjaCA6ICcnKSArIGhhc2g7XG4gICAgLy8gaW5jbHVkZSBoYXNoUHJlZml4IGluICQkYWJzVXJsIHdoZW4gJCR1cmwgaXMgZW1wdHkgc28gSUU4ICYgOSBkbyBub3QgcmVsb2FkIHBhZ2UgYmVjYXVzZSBvZiByZW1vdmFsIG9mICcjJ1xuICAgIHRoaXMuJCRhYnNVcmwgPSBhcHBCYXNlICsgaGFzaFByZWZpeCArIHRoaXMuJCR1cmw7XG4gIH07XG5cbn1cblxuXG52YXIgbG9jYXRpb25Qcm90b3R5cGUgPSB7XG5cbiAgLyoqXG4gICAqIEFyZSB3ZSBpbiBodG1sNSBtb2RlP1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgJCRodG1sNTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEhhcyBhbnkgY2hhbmdlIGJlZW4gcmVwbGFjaW5nP1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgJCRyZXBsYWNlOiBmYWxzZSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jYWJzVXJsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgb25seS5cbiAgICpcbiAgICogUmV0dXJuIGZ1bGwgdXJsIHJlcHJlc2VudGF0aW9uIHdpdGggYWxsIHNlZ21lbnRzIGVuY29kZWQgYWNjb3JkaW5nIHRvIHJ1bGVzIHNwZWNpZmllZCBpblxuICAgKiBbUkZDIDM5ODZdKGh0dHA6Ly93d3cuaWV0Zi5vcmcvcmZjL3JmYzM5ODYudHh0KS5cbiAgICpcbiAgICpcbiAgICogYGBganNcbiAgICogLy8gZ2l2ZW4gdXJsIGh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXG4gICAqIHZhciBhYnNVcmwgPSAkbG9jYXRpb24uYWJzVXJsKCk7XG4gICAqIC8vID0+IFwiaHR0cDovL2V4YW1wbGUuY29tLyMvc29tZS9wYXRoP2Zvbz1iYXImYmF6PXhveG9cIlxuICAgKiBgYGBcbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfSBmdWxsIHVybFxuICAgKi9cbiAgYWJzVXJsOiBsb2NhdGlvbkdldHRlcignJCRhYnNVcmwnKSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jdXJsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgLyBzZXR0ZXIuXG4gICAqXG4gICAqIFJldHVybiB1cmwgKGUuZy4gYC9wYXRoP2E9YiNoYXNoYCkgd2hlbiBjYWxsZWQgd2l0aG91dCBhbnkgcGFyYW1ldGVyLlxuICAgKlxuICAgKiBDaGFuZ2UgcGF0aCwgc2VhcmNoIGFuZCBoYXNoLCB3aGVuIGNhbGxlZCB3aXRoIHBhcmFtZXRlciBhbmQgcmV0dXJuIGAkbG9jYXRpb25gLlxuICAgKlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAvLyBnaXZlbiB1cmwgaHR0cDovL2V4YW1wbGUuY29tLyMvc29tZS9wYXRoP2Zvbz1iYXImYmF6PXhveG9cbiAgICogdmFyIHVybCA9ICRsb2NhdGlvbi51cmwoKTtcbiAgICogLy8gPT4gXCIvc29tZS9wYXRoP2Zvbz1iYXImYmF6PXhveG9cIlxuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmc9fSB1cmwgTmV3IHVybCB3aXRob3V0IGJhc2UgcHJlZml4IChlLmcuIGAvcGF0aD9hPWIjaGFzaGApXG4gICAqIEByZXR1cm4ge3N0cmluZ30gdXJsXG4gICAqL1xuICB1cmw6IGZ1bmN0aW9uKHVybCkge1xuICAgIGlmIChpc1VuZGVmaW5lZCh1cmwpKVxuICAgICAgcmV0dXJuIHRoaXMuJCR1cmw7XG5cbiAgICB2YXIgbWF0Y2ggPSBQQVRIX01BVENILmV4ZWModXJsKTtcbiAgICBpZiAobWF0Y2hbMV0gfHwgdXJsID09PSAnJykgdGhpcy5wYXRoKGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFsxXSkpO1xuICAgIGlmIChtYXRjaFsyXSB8fCBtYXRjaFsxXSB8fCB1cmwgPT09ICcnKSB0aGlzLnNlYXJjaChtYXRjaFszXSB8fCAnJyk7XG4gICAgdGhpcy5oYXNoKG1hdGNoWzVdIHx8ICcnKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2NhdGlvbiNwcm90b2NvbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIG9ubHkuXG4gICAqXG4gICAqIFJldHVybiBwcm90b2NvbCBvZiBjdXJyZW50IHVybC5cbiAgICpcbiAgICpcbiAgICogYGBganNcbiAgICogLy8gZ2l2ZW4gdXJsIGh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXG4gICAqIHZhciBwcm90b2NvbCA9ICRsb2NhdGlvbi5wcm90b2NvbCgpO1xuICAgKiAvLyA9PiBcImh0dHBcIlxuICAgKiBgYGBcbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfSBwcm90b2NvbCBvZiBjdXJyZW50IHVybFxuICAgKi9cbiAgcHJvdG9jb2w6IGxvY2F0aW9uR2V0dGVyKCckJHByb3RvY29sJyksXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvY2F0aW9uI2hvc3RcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciBvbmx5LlxuICAgKlxuICAgKiBSZXR1cm4gaG9zdCBvZiBjdXJyZW50IHVybC5cbiAgICpcbiAgICpcbiAgICogYGBganNcbiAgICogLy8gZ2l2ZW4gdXJsIGh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXG4gICAqIHZhciBob3N0ID0gJGxvY2F0aW9uLmhvc3QoKTtcbiAgICogLy8gPT4gXCJleGFtcGxlLmNvbVwiXG4gICAqIGBgYFxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IGhvc3Qgb2YgY3VycmVudCB1cmwuXG4gICAqL1xuICBob3N0OiBsb2NhdGlvbkdldHRlcignJCRob3N0JyksXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvY2F0aW9uI3BvcnRcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciBvbmx5LlxuICAgKlxuICAgKiBSZXR1cm4gcG9ydCBvZiBjdXJyZW50IHVybC5cbiAgICpcbiAgICpcbiAgICogYGBganNcbiAgICogLy8gZ2l2ZW4gdXJsIGh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXG4gICAqIHZhciBwb3J0ID0gJGxvY2F0aW9uLnBvcnQoKTtcbiAgICogLy8gPT4gODBcbiAgICogYGBgXG4gICAqXG4gICAqIEByZXR1cm4ge051bWJlcn0gcG9ydFxuICAgKi9cbiAgcG9ydDogbG9jYXRpb25HZXR0ZXIoJyQkcG9ydCcpLFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2NhdGlvbiNwYXRoXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgLyBzZXR0ZXIuXG4gICAqXG4gICAqIFJldHVybiBwYXRoIG9mIGN1cnJlbnQgdXJsIHdoZW4gY2FsbGVkIHdpdGhvdXQgYW55IHBhcmFtZXRlci5cbiAgICpcbiAgICogQ2hhbmdlIHBhdGggd2hlbiBjYWxsZWQgd2l0aCBwYXJhbWV0ZXIgYW5kIHJldHVybiBgJGxvY2F0aW9uYC5cbiAgICpcbiAgICogTm90ZTogUGF0aCBzaG91bGQgYWx3YXlzIGJlZ2luIHdpdGggZm9yd2FyZCBzbGFzaCAoLyksIHRoaXMgbWV0aG9kIHdpbGwgYWRkIHRoZSBmb3J3YXJkIHNsYXNoXG4gICAqIGlmIGl0IGlzIG1pc3NpbmcuXG4gICAqXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIC8vIGdpdmVuIHVybCBodHRwOi8vZXhhbXBsZS5jb20vIy9zb21lL3BhdGg/Zm9vPWJhciZiYXo9eG94b1xuICAgKiB2YXIgcGF0aCA9ICRsb2NhdGlvbi5wYXRoKCk7XG4gICAqIC8vID0+IFwiL3NvbWUvcGF0aFwiXG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0geyhzdHJpbmd8bnVtYmVyKT19IHBhdGggTmV3IHBhdGhcbiAgICogQHJldHVybiB7c3RyaW5nfSBwYXRoXG4gICAqL1xuICBwYXRoOiBsb2NhdGlvbkdldHRlclNldHRlcignJCRwYXRoJywgZnVuY3Rpb24ocGF0aCkge1xuICAgIHBhdGggPSBwYXRoICE9PSBudWxsID8gcGF0aC50b1N0cmluZygpIDogJyc7XG4gICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xuICB9KSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jc2VhcmNoXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgLyBzZXR0ZXIuXG4gICAqXG4gICAqIFJldHVybiBzZWFyY2ggcGFydCAoYXMgb2JqZWN0KSBvZiBjdXJyZW50IHVybCB3aGVuIGNhbGxlZCB3aXRob3V0IGFueSBwYXJhbWV0ZXIuXG4gICAqXG4gICAqIENoYW5nZSBzZWFyY2ggcGFydCB3aGVuIGNhbGxlZCB3aXRoIHBhcmFtZXRlciBhbmQgcmV0dXJuIGAkbG9jYXRpb25gLlxuICAgKlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAvLyBnaXZlbiB1cmwgaHR0cDovL2V4YW1wbGUuY29tLyMvc29tZS9wYXRoP2Zvbz1iYXImYmF6PXhveG9cbiAgICogdmFyIHNlYXJjaE9iamVjdCA9ICRsb2NhdGlvbi5zZWFyY2goKTtcbiAgICogLy8gPT4ge2ZvbzogJ2JhcicsIGJhejogJ3hveG8nfVxuICAgKlxuICAgKiAvLyBzZXQgZm9vIHRvICd5aXBlZSdcbiAgICogJGxvY2F0aW9uLnNlYXJjaCgnZm9vJywgJ3lpcGVlJyk7XG4gICAqIC8vICRsb2NhdGlvbi5zZWFyY2goKSA9PiB7Zm9vOiAneWlwZWUnLCBiYXo6ICd4b3hvJ31cbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdC48c3RyaW5nPnxPYmplY3QuPEFycmF5LjxzdHJpbmc+Pn0gc2VhcmNoIE5ldyBzZWFyY2ggcGFyYW1zIC0gc3RyaW5nIG9yXG4gICAqIGhhc2ggb2JqZWN0LlxuICAgKlxuICAgKiBXaGVuIGNhbGxlZCB3aXRoIGEgc2luZ2xlIGFyZ3VtZW50IHRoZSBtZXRob2QgYWN0cyBhcyBhIHNldHRlciwgc2V0dGluZyB0aGUgYHNlYXJjaGAgY29tcG9uZW50XG4gICAqIG9mIGAkbG9jYXRpb25gIHRvIHRoZSBzcGVjaWZpZWQgdmFsdWUuXG4gICAqXG4gICAqIElmIHRoZSBhcmd1bWVudCBpcyBhIGhhc2ggb2JqZWN0IGNvbnRhaW5pbmcgYW4gYXJyYXkgb2YgdmFsdWVzLCB0aGVzZSB2YWx1ZXMgd2lsbCBiZSBlbmNvZGVkXG4gICAqIGFzIGR1cGxpY2F0ZSBzZWFyY2ggcGFyYW1ldGVycyBpbiB0aGUgdXJsLlxuICAgKlxuICAgKiBAcGFyYW0geyhzdHJpbmd8TnVtYmVyfEFycmF5PHN0cmluZz58Ym9vbGVhbik9fSBwYXJhbVZhbHVlIElmIGBzZWFyY2hgIGlzIGEgc3RyaW5nIG9yIG51bWJlciwgdGhlbiBgcGFyYW1WYWx1ZWBcbiAgICogd2lsbCBvdmVycmlkZSBvbmx5IGEgc2luZ2xlIHNlYXJjaCBwcm9wZXJ0eS5cbiAgICpcbiAgICogSWYgYHBhcmFtVmFsdWVgIGlzIGFuIGFycmF5LCBpdCB3aWxsIG92ZXJyaWRlIHRoZSBwcm9wZXJ0eSBvZiB0aGUgYHNlYXJjaGAgY29tcG9uZW50IG9mXG4gICAqIGAkbG9jYXRpb25gIHNwZWNpZmllZCB2aWEgdGhlIGZpcnN0IGFyZ3VtZW50LlxuICAgKlxuICAgKiBJZiBgcGFyYW1WYWx1ZWAgaXMgYG51bGxgLCB0aGUgcHJvcGVydHkgc3BlY2lmaWVkIHZpYSB0aGUgZmlyc3QgYXJndW1lbnQgd2lsbCBiZSBkZWxldGVkLlxuICAgKlxuICAgKiBJZiBgcGFyYW1WYWx1ZWAgaXMgYHRydWVgLCB0aGUgcHJvcGVydHkgc3BlY2lmaWVkIHZpYSB0aGUgZmlyc3QgYXJndW1lbnQgd2lsbCBiZSBhZGRlZCB3aXRoIG5vXG4gICAqIHZhbHVlIG5vciB0cmFpbGluZyBlcXVhbCBzaWduLlxuICAgKlxuICAgKiBAcmV0dXJuIHtPYmplY3R9IElmIGNhbGxlZCB3aXRoIG5vIGFyZ3VtZW50cyByZXR1cm5zIHRoZSBwYXJzZWQgYHNlYXJjaGAgb2JqZWN0LiBJZiBjYWxsZWQgd2l0aFxuICAgKiBvbmUgb3IgbW9yZSBhcmd1bWVudHMgcmV0dXJucyBgJGxvY2F0aW9uYCBvYmplY3QgaXRzZWxmLlxuICAgKi9cbiAgc2VhcmNoOiBmdW5jdGlvbihzZWFyY2gsIHBhcmFtVmFsdWUpIHtcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgcmV0dXJuIHRoaXMuJCRzZWFyY2g7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGlmIChpc1N0cmluZyhzZWFyY2gpIHx8IGlzTnVtYmVyKHNlYXJjaCkpIHtcbiAgICAgICAgICBzZWFyY2ggPSBzZWFyY2gudG9TdHJpbmcoKTtcbiAgICAgICAgICB0aGlzLiQkc2VhcmNoID0gcGFyc2VLZXlWYWx1ZShzZWFyY2gpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHNlYXJjaCkpIHtcbiAgICAgICAgICBzZWFyY2ggPSBjb3B5KHNlYXJjaCwge30pO1xuICAgICAgICAgIC8vIHJlbW92ZSBvYmplY3QgdW5kZWZpbmVkIG9yIG51bGwgcHJvcGVydGllc1xuICAgICAgICAgIGZvckVhY2goc2VhcmNoLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkgZGVsZXRlIHNlYXJjaFtrZXldO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgdGhpcy4kJHNlYXJjaCA9IHNlYXJjaDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyAkbG9jYXRpb25NaW5FcnIoJ2lzcmNoYXJnJyxcbiAgICAgICAgICAgICAgJ1RoZSBmaXJzdCBhcmd1bWVudCBvZiB0aGUgYCRsb2NhdGlvbiNzZWFyY2goKWAgY2FsbCBtdXN0IGJlIGEgc3RyaW5nIG9yIGFuIG9iamVjdC4nKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChpc1VuZGVmaW5lZChwYXJhbVZhbHVlKSB8fCBwYXJhbVZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgZGVsZXRlIHRoaXMuJCRzZWFyY2hbc2VhcmNoXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLiQkc2VhcmNoW3NlYXJjaF0gPSBwYXJhbVZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy4kJGNvbXBvc2UoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jaGFzaFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIC8gc2V0dGVyLlxuICAgKlxuICAgKiBSZXR1cm4gaGFzaCBmcmFnbWVudCB3aGVuIGNhbGxlZCB3aXRob3V0IGFueSBwYXJhbWV0ZXIuXG4gICAqXG4gICAqIENoYW5nZSBoYXNoIGZyYWdtZW50IHdoZW4gY2FsbGVkIHdpdGggcGFyYW1ldGVyIGFuZCByZXR1cm4gYCRsb2NhdGlvbmAuXG4gICAqXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIC8vIGdpdmVuIHVybCBodHRwOi8vZXhhbXBsZS5jb20vIy9zb21lL3BhdGg/Zm9vPWJhciZiYXo9eG94byNoYXNoVmFsdWVcbiAgICogdmFyIGhhc2ggPSAkbG9jYXRpb24uaGFzaCgpO1xuICAgKiAvLyA9PiBcImhhc2hWYWx1ZVwiXG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0geyhzdHJpbmd8bnVtYmVyKT19IGhhc2ggTmV3IGhhc2ggZnJhZ21lbnRcbiAgICogQHJldHVybiB7c3RyaW5nfSBoYXNoXG4gICAqL1xuICBoYXNoOiBsb2NhdGlvbkdldHRlclNldHRlcignJCRoYXNoJywgZnVuY3Rpb24oaGFzaCkge1xuICAgIHJldHVybiBoYXNoICE9PSBudWxsID8gaGFzaC50b1N0cmluZygpIDogJyc7XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2NhdGlvbiNyZXBsYWNlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBJZiBjYWxsZWQsIGFsbCBjaGFuZ2VzIHRvICRsb2NhdGlvbiBkdXJpbmcgY3VycmVudCBgJGRpZ2VzdGAgd2lsbCBiZSByZXBsYWNpbmcgY3VycmVudCBoaXN0b3J5XG4gICAqIHJlY29yZCwgaW5zdGVhZCBvZiBhZGRpbmcgbmV3IG9uZS5cbiAgICovXG4gIHJlcGxhY2U6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuJCRyZXBsYWNlID0gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufTtcblxuZm9yRWFjaChbTG9jYXRpb25IYXNoYmFuZ0luSHRtbDVVcmwsIExvY2F0aW9uSGFzaGJhbmdVcmwsIExvY2F0aW9uSHRtbDVVcmxdLCBmdW5jdGlvbihMb2NhdGlvbikge1xuICBMb2NhdGlvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKGxvY2F0aW9uUHJvdG90eXBlKTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jc3RhdGVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciAvIHNldHRlci5cbiAgICpcbiAgICogUmV0dXJuIHRoZSBoaXN0b3J5IHN0YXRlIG9iamVjdCB3aGVuIGNhbGxlZCB3aXRob3V0IGFueSBwYXJhbWV0ZXIuXG4gICAqXG4gICAqIENoYW5nZSB0aGUgaGlzdG9yeSBzdGF0ZSBvYmplY3Qgd2hlbiBjYWxsZWQgd2l0aCBvbmUgcGFyYW1ldGVyIGFuZCByZXR1cm4gYCRsb2NhdGlvbmAuXG4gICAqIFRoZSBzdGF0ZSBvYmplY3QgaXMgbGF0ZXIgcGFzc2VkIHRvIGBwdXNoU3RhdGVgIG9yIGByZXBsYWNlU3RhdGVgLlxuICAgKlxuICAgKiBOT1RFOiBUaGlzIG1ldGhvZCBpcyBzdXBwb3J0ZWQgb25seSBpbiBIVE1MNSBtb2RlIGFuZCBvbmx5IGluIGJyb3dzZXJzIHN1cHBvcnRpbmdcbiAgICogdGhlIEhUTUw1IEhpc3RvcnkgQVBJIChpLmUuIG1ldGhvZHMgYHB1c2hTdGF0ZWAgYW5kIGByZXBsYWNlU3RhdGVgKS4gSWYgeW91IG5lZWQgdG8gc3VwcG9ydFxuICAgKiBvbGRlciBicm93c2VycyAobGlrZSBJRTkgb3IgQW5kcm9pZCA8IDQuMCksIGRvbid0IHVzZSB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3Q9fSBzdGF0ZSBTdGF0ZSBvYmplY3QgZm9yIHB1c2hTdGF0ZSBvciByZXBsYWNlU3RhdGVcbiAgICogQHJldHVybiB7b2JqZWN0fSBzdGF0ZVxuICAgKi9cbiAgTG9jYXRpb24ucHJvdG90eXBlLnN0YXRlID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpXG4gICAgICByZXR1cm4gdGhpcy4kJHN0YXRlO1xuXG4gICAgaWYgKExvY2F0aW9uICE9PSBMb2NhdGlvbkh0bWw1VXJsIHx8ICF0aGlzLiQkaHRtbDUpIHtcbiAgICAgIHRocm93ICRsb2NhdGlvbk1pbkVycignbm9zdGF0ZScsICdIaXN0b3J5IEFQSSBzdGF0ZSBzdXBwb3J0IGlzIGF2YWlsYWJsZSBvbmx5ICcgK1xuICAgICAgICAnaW4gSFRNTDUgbW9kZSBhbmQgb25seSBpbiBicm93c2VycyBzdXBwb3J0aW5nIEhUTUw1IEhpc3RvcnkgQVBJJyk7XG4gICAgfVxuICAgIC8vIFRoZSB1c2VyIG1pZ2h0IG1vZGlmeSBgc3RhdGVPYmplY3RgIGFmdGVyIGludm9raW5nIGAkbG9jYXRpb24uc3RhdGUoc3RhdGVPYmplY3QpYFxuICAgIC8vIGJ1dCB3ZSdyZSBjaGFuZ2luZyB0aGUgJCRzdGF0ZSByZWZlcmVuY2UgdG8gJGJyb3dzZXIuc3RhdGUoKSBkdXJpbmcgdGhlICRkaWdlc3RcbiAgICAvLyBzbyB0aGUgbW9kaWZpY2F0aW9uIHdpbmRvdyBpcyBuYXJyb3cuXG4gICAgdGhpcy4kJHN0YXRlID0gaXNVbmRlZmluZWQoc3RhdGUpID8gbnVsbCA6IHN0YXRlO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG59KTtcblxuXG5mdW5jdGlvbiBsb2NhdGlvbkdldHRlcihwcm9wZXJ0eSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXNbcHJvcGVydHldO1xuICB9O1xufVxuXG5cbmZ1bmN0aW9uIGxvY2F0aW9uR2V0dGVyU2V0dGVyKHByb3BlcnR5LCBwcmVwcm9jZXNzKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpXG4gICAgICByZXR1cm4gdGhpc1twcm9wZXJ0eV07XG5cbiAgICB0aGlzW3Byb3BlcnR5XSA9IHByZXByb2Nlc3ModmFsdWUpO1xuICAgIHRoaXMuJCRjb21wb3NlKCk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkbG9jYXRpb25cbiAqXG4gKiBAcmVxdWlyZXMgJHJvb3RFbGVtZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgJGxvY2F0aW9uIHNlcnZpY2UgcGFyc2VzIHRoZSBVUkwgaW4gdGhlIGJyb3dzZXIgYWRkcmVzcyBiYXIgKGJhc2VkIG9uIHRoZVxuICogW3dpbmRvdy5sb2NhdGlvbl0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vd2luZG93LmxvY2F0aW9uKSkgYW5kIG1ha2VzIHRoZSBVUkxcbiAqIGF2YWlsYWJsZSB0byB5b3VyIGFwcGxpY2F0aW9uLiBDaGFuZ2VzIHRvIHRoZSBVUkwgaW4gdGhlIGFkZHJlc3MgYmFyIGFyZSByZWZsZWN0ZWQgaW50b1xuICogJGxvY2F0aW9uIHNlcnZpY2UgYW5kIGNoYW5nZXMgdG8gJGxvY2F0aW9uIGFyZSByZWZsZWN0ZWQgaW50byB0aGUgYnJvd3NlciBhZGRyZXNzIGJhci5cbiAqXG4gKiAqKlRoZSAkbG9jYXRpb24gc2VydmljZToqKlxuICpcbiAqIC0gRXhwb3NlcyB0aGUgY3VycmVudCBVUkwgaW4gdGhlIGJyb3dzZXIgYWRkcmVzcyBiYXIsIHNvIHlvdSBjYW5cbiAqICAgLSBXYXRjaCBhbmQgb2JzZXJ2ZSB0aGUgVVJMLlxuICogICAtIENoYW5nZSB0aGUgVVJMLlxuICogLSBTeW5jaHJvbml6ZXMgdGhlIFVSTCB3aXRoIHRoZSBicm93c2VyIHdoZW4gdGhlIHVzZXJcbiAqICAgLSBDaGFuZ2VzIHRoZSBhZGRyZXNzIGJhci5cbiAqICAgLSBDbGlja3MgdGhlIGJhY2sgb3IgZm9yd2FyZCBidXR0b24gKG9yIGNsaWNrcyBhIEhpc3RvcnkgbGluaykuXG4gKiAgIC0gQ2xpY2tzIG9uIGEgbGluay5cbiAqIC0gUmVwcmVzZW50cyB0aGUgVVJMIG9iamVjdCBhcyBhIHNldCBvZiBtZXRob2RzIChwcm90b2NvbCwgaG9zdCwgcG9ydCwgcGF0aCwgc2VhcmNoLCBoYXNoKS5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBzZWUge0BsaW5rIGd1aWRlLyRsb2NhdGlvbiBEZXZlbG9wZXIgR3VpZGU6IFVzaW5nICRsb2NhdGlvbn1cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJGxvY2F0aW9uUHJvdmlkZXJcbiAqIEBkZXNjcmlwdGlvblxuICogVXNlIHRoZSBgJGxvY2F0aW9uUHJvdmlkZXJgIHRvIGNvbmZpZ3VyZSBob3cgdGhlIGFwcGxpY2F0aW9uIGRlZXAgbGlua2luZyBwYXRocyBhcmUgc3RvcmVkLlxuICovXG5mdW5jdGlvbiAkTG9jYXRpb25Qcm92aWRlcigpIHtcbiAgdmFyIGhhc2hQcmVmaXggPSAnJyxcbiAgICAgIGh0bWw1TW9kZSA9IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgIHJlcXVpcmVCYXNlOiB0cnVlLFxuICAgICAgICByZXdyaXRlTGlua3M6IHRydWVcbiAgICAgIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvY2F0aW9uUHJvdmlkZXIjaGFzaFByZWZpeFxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBwcmVmaXggUHJlZml4IGZvciBoYXNoIHBhcnQgKGNvbnRhaW5pbmcgcGF0aCBhbmQgc2VhcmNoKVxuICAgKiBAcmV0dXJucyB7Kn0gY3VycmVudCB2YWx1ZSBpZiB1c2VkIGFzIGdldHRlciBvciBpdHNlbGYgKGNoYWluaW5nKSBpZiB1c2VkIGFzIHNldHRlclxuICAgKi9cbiAgdGhpcy5oYXNoUHJlZml4ID0gZnVuY3Rpb24ocHJlZml4KSB7XG4gICAgaWYgKGlzRGVmaW5lZChwcmVmaXgpKSB7XG4gICAgICBoYXNoUHJlZml4ID0gcHJlZml4O1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBoYXNoUHJlZml4O1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb25Qcm92aWRlciNodG1sNU1vZGVcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEBwYXJhbSB7KGJvb2xlYW58T2JqZWN0KT19IG1vZGUgSWYgYm9vbGVhbiwgc2V0cyBgaHRtbDVNb2RlLmVuYWJsZWRgIHRvIHZhbHVlLlxuICAgKiAgIElmIG9iamVjdCwgc2V0cyBgZW5hYmxlZGAsIGByZXF1aXJlQmFzZWAgYW5kIGByZXdyaXRlTGlua3NgIHRvIHJlc3BlY3RpdmUgdmFsdWVzLiBTdXBwb3J0ZWRcbiAgICogICBwcm9wZXJ0aWVzOlxuICAgKiAgIC0gKiplbmFibGVkKiog4oCTIGB7Ym9vbGVhbn1gIOKAkyAoZGVmYXVsdDogZmFsc2UpIElmIHRydWUsIHdpbGwgcmVseSBvbiBgaGlzdG9yeS5wdXNoU3RhdGVgIHRvXG4gICAqICAgICBjaGFuZ2UgdXJscyB3aGVyZSBzdXBwb3J0ZWQuIFdpbGwgZmFsbCBiYWNrIHRvIGhhc2gtcHJlZml4ZWQgcGF0aHMgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3RcbiAgICogICAgIHN1cHBvcnQgYHB1c2hTdGF0ZWAuXG4gICAqICAgLSAqKnJlcXVpcmVCYXNlKiogLSBge2Jvb2xlYW59YCAtIChkZWZhdWx0OiBgdHJ1ZWApIFdoZW4gaHRtbDVNb2RlIGlzIGVuYWJsZWQsIHNwZWNpZmllc1xuICAgKiAgICAgd2hldGhlciBvciBub3QgYSA8YmFzZT4gdGFnIGlzIHJlcXVpcmVkIHRvIGJlIHByZXNlbnQuIElmIGBlbmFibGVkYCBhbmQgYHJlcXVpcmVCYXNlYCBhcmVcbiAgICogICAgIHRydWUsIGFuZCBhIGJhc2UgdGFnIGlzIG5vdCBwcmVzZW50LCBhbiBlcnJvciB3aWxsIGJlIHRocm93biB3aGVuIGAkbG9jYXRpb25gIGlzIGluamVjdGVkLlxuICAgKiAgICAgU2VlIHRoZSB7QGxpbmsgZ3VpZGUvJGxvY2F0aW9uICRsb2NhdGlvbiBndWlkZSBmb3IgbW9yZSBpbmZvcm1hdGlvbn1cbiAgICogICAtICoqcmV3cml0ZUxpbmtzKiogLSBge2Jvb2xlYW59YCAtIChkZWZhdWx0OiBgdHJ1ZWApIFdoZW4gaHRtbDVNb2RlIGlzIGVuYWJsZWQsXG4gICAqICAgICBlbmFibGVzL2Rpc2FibGVzIHVybCByZXdyaXRpbmcgZm9yIHJlbGF0aXZlIGxpbmtzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBodG1sNU1vZGUgb2JqZWN0IGlmIHVzZWQgYXMgZ2V0dGVyIG9yIGl0c2VsZiAoY2hhaW5pbmcpIGlmIHVzZWQgYXMgc2V0dGVyXG4gICAqL1xuICB0aGlzLmh0bWw1TW9kZSA9IGZ1bmN0aW9uKG1vZGUpIHtcbiAgICBpZiAoaXNCb29sZWFuKG1vZGUpKSB7XG4gICAgICBodG1sNU1vZGUuZW5hYmxlZCA9IG1vZGU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KG1vZGUpKSB7XG5cbiAgICAgIGlmIChpc0Jvb2xlYW4obW9kZS5lbmFibGVkKSkge1xuICAgICAgICBodG1sNU1vZGUuZW5hYmxlZCA9IG1vZGUuZW5hYmxlZDtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzQm9vbGVhbihtb2RlLnJlcXVpcmVCYXNlKSkge1xuICAgICAgICBodG1sNU1vZGUucmVxdWlyZUJhc2UgPSBtb2RlLnJlcXVpcmVCYXNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNCb29sZWFuKG1vZGUucmV3cml0ZUxpbmtzKSkge1xuICAgICAgICBodG1sNU1vZGUucmV3cml0ZUxpbmtzID0gbW9kZS5yZXdyaXRlTGlua3M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaHRtbDVNb2RlO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIGV2ZW50XG4gICAqIEBuYW1lICRsb2NhdGlvbiMkbG9jYXRpb25DaGFuZ2VTdGFydFxuICAgKiBAZXZlbnRUeXBlIGJyb2FkY2FzdCBvbiByb290IHNjb3BlXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBCcm9hZGNhc3RlZCBiZWZvcmUgYSBVUkwgd2lsbCBjaGFuZ2UuXG4gICAqXG4gICAqIFRoaXMgY2hhbmdlIGNhbiBiZSBwcmV2ZW50ZWQgYnkgY2FsbGluZ1xuICAgKiBgcHJldmVudERlZmF1bHRgIG1ldGhvZCBvZiB0aGUgZXZlbnQuIFNlZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb259IGZvciBtb3JlXG4gICAqIGRldGFpbHMgYWJvdXQgZXZlbnQgb2JqZWN0LiBVcG9uIHN1Y2Nlc3NmdWwgY2hhbmdlXG4gICAqIHtAbGluayBuZy4kbG9jYXRpb24jJGxvY2F0aW9uQ2hhbmdlU3VjY2VzcyAkbG9jYXRpb25DaGFuZ2VTdWNjZXNzfSBpcyBmaXJlZC5cbiAgICpcbiAgICogVGhlIGBuZXdTdGF0ZWAgYW5kIGBvbGRTdGF0ZWAgcGFyYW1ldGVycyBtYXkgYmUgZGVmaW5lZCBvbmx5IGluIEhUTUw1IG1vZGUgYW5kIHdoZW5cbiAgICogdGhlIGJyb3dzZXIgc3VwcG9ydHMgdGhlIEhUTUw1IEhpc3RvcnkgQVBJLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYW5ndWxhckV2ZW50IFN5bnRoZXRpYyBldmVudCBvYmplY3QuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZXdVcmwgTmV3IFVSTFxuICAgKiBAcGFyYW0ge3N0cmluZz19IG9sZFVybCBVUkwgdGhhdCB3YXMgYmVmb3JlIGl0IHdhcyBjaGFuZ2VkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5ld1N0YXRlIE5ldyBoaXN0b3J5IHN0YXRlIG9iamVjdFxuICAgKiBAcGFyYW0ge3N0cmluZz19IG9sZFN0YXRlIEhpc3Rvcnkgc3RhdGUgb2JqZWN0IHRoYXQgd2FzIGJlZm9yZSBpdCB3YXMgY2hhbmdlZC5cbiAgICovXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBldmVudFxuICAgKiBAbmFtZSAkbG9jYXRpb24jJGxvY2F0aW9uQ2hhbmdlU3VjY2Vzc1xuICAgKiBAZXZlbnRUeXBlIGJyb2FkY2FzdCBvbiByb290IHNjb3BlXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBCcm9hZGNhc3RlZCBhZnRlciBhIFVSTCB3YXMgY2hhbmdlZC5cbiAgICpcbiAgICogVGhlIGBuZXdTdGF0ZWAgYW5kIGBvbGRTdGF0ZWAgcGFyYW1ldGVycyBtYXkgYmUgZGVmaW5lZCBvbmx5IGluIEhUTUw1IG1vZGUgYW5kIHdoZW5cbiAgICogdGhlIGJyb3dzZXIgc3VwcG9ydHMgdGhlIEhUTUw1IEhpc3RvcnkgQVBJLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYW5ndWxhckV2ZW50IFN5bnRoZXRpYyBldmVudCBvYmplY3QuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZXdVcmwgTmV3IFVSTFxuICAgKiBAcGFyYW0ge3N0cmluZz19IG9sZFVybCBVUkwgdGhhdCB3YXMgYmVmb3JlIGl0IHdhcyBjaGFuZ2VkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5ld1N0YXRlIE5ldyBoaXN0b3J5IHN0YXRlIG9iamVjdFxuICAgKiBAcGFyYW0ge3N0cmluZz19IG9sZFN0YXRlIEhpc3Rvcnkgc3RhdGUgb2JqZWN0IHRoYXQgd2FzIGJlZm9yZSBpdCB3YXMgY2hhbmdlZC5cbiAgICovXG5cbiAgdGhpcy4kZ2V0ID0gWyckcm9vdFNjb3BlJywgJyRicm93c2VyJywgJyRzbmlmZmVyJywgJyRyb290RWxlbWVudCcsICckd2luZG93JyxcbiAgICAgIGZ1bmN0aW9uKCRyb290U2NvcGUsICRicm93c2VyLCAkc25pZmZlciwgJHJvb3RFbGVtZW50LCAkd2luZG93KSB7XG4gICAgdmFyICRsb2NhdGlvbixcbiAgICAgICAgTG9jYXRpb25Nb2RlLFxuICAgICAgICBiYXNlSHJlZiA9ICRicm93c2VyLmJhc2VIcmVmKCksIC8vIGlmIGJhc2VbaHJlZl0gaXMgdW5kZWZpbmVkLCBpdCBkZWZhdWx0cyB0byAnJ1xuICAgICAgICBpbml0aWFsVXJsID0gJGJyb3dzZXIudXJsKCksXG4gICAgICAgIGFwcEJhc2U7XG5cbiAgICBpZiAoaHRtbDVNb2RlLmVuYWJsZWQpIHtcbiAgICAgIGlmICghYmFzZUhyZWYgJiYgaHRtbDVNb2RlLnJlcXVpcmVCYXNlKSB7XG4gICAgICAgIHRocm93ICRsb2NhdGlvbk1pbkVycignbm9iYXNlJyxcbiAgICAgICAgICBcIiRsb2NhdGlvbiBpbiBIVE1MNSBtb2RlIHJlcXVpcmVzIGEgPGJhc2U+IHRhZyB0byBiZSBwcmVzZW50IVwiKTtcbiAgICAgIH1cbiAgICAgIGFwcEJhc2UgPSBzZXJ2ZXJCYXNlKGluaXRpYWxVcmwpICsgKGJhc2VIcmVmIHx8ICcvJyk7XG4gICAgICBMb2NhdGlvbk1vZGUgPSAkc25pZmZlci5oaXN0b3J5ID8gTG9jYXRpb25IdG1sNVVybCA6IExvY2F0aW9uSGFzaGJhbmdJbkh0bWw1VXJsO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcHBCYXNlID0gc3RyaXBIYXNoKGluaXRpYWxVcmwpO1xuICAgICAgTG9jYXRpb25Nb2RlID0gTG9jYXRpb25IYXNoYmFuZ1VybDtcbiAgICB9XG4gICAgJGxvY2F0aW9uID0gbmV3IExvY2F0aW9uTW9kZShhcHBCYXNlLCAnIycgKyBoYXNoUHJlZml4KTtcbiAgICAkbG9jYXRpb24uJCRwYXJzZUxpbmtVcmwoaW5pdGlhbFVybCwgaW5pdGlhbFVybCk7XG5cbiAgICAkbG9jYXRpb24uJCRzdGF0ZSA9ICRicm93c2VyLnN0YXRlKCk7XG5cbiAgICB2YXIgSUdOT1JFX1VSSV9SRUdFWFAgPSAvXlxccyooamF2YXNjcmlwdHxtYWlsdG8pOi9pO1xuXG4gICAgZnVuY3Rpb24gc2V0QnJvd3NlclVybFdpdGhGYWxsYmFjayh1cmwsIHJlcGxhY2UsIHN0YXRlKSB7XG4gICAgICB2YXIgb2xkVXJsID0gJGxvY2F0aW9uLnVybCgpO1xuICAgICAgdmFyIG9sZFN0YXRlID0gJGxvY2F0aW9uLiQkc3RhdGU7XG4gICAgICB0cnkge1xuICAgICAgICAkYnJvd3Nlci51cmwodXJsLCByZXBsYWNlLCBzdGF0ZSk7XG5cbiAgICAgICAgLy8gTWFrZSBzdXJlICRsb2NhdGlvbi5zdGF0ZSgpIHJldHVybnMgcmVmZXJlbnRpYWxseSBpZGVudGljYWwgKG5vdCBqdXN0IGRlZXBseSBlcXVhbClcbiAgICAgICAgLy8gc3RhdGUgb2JqZWN0OyB0aGlzIG1ha2VzIHBvc3NpYmxlIHF1aWNrIGNoZWNraW5nIGlmIHRoZSBzdGF0ZSBjaGFuZ2VkIGluIHRoZSBkaWdlc3RcbiAgICAgICAgLy8gbG9vcC4gQ2hlY2tpbmcgZGVlcCBlcXVhbGl0eSB3b3VsZCBiZSB0b28gZXhwZW5zaXZlLlxuICAgICAgICAkbG9jYXRpb24uJCRzdGF0ZSA9ICRicm93c2VyLnN0YXRlKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIFJlc3RvcmUgb2xkIHZhbHVlcyBpZiBwdXNoU3RhdGUgZmFpbHNcbiAgICAgICAgJGxvY2F0aW9uLnVybChvbGRVcmwpO1xuICAgICAgICAkbG9jYXRpb24uJCRzdGF0ZSA9IG9sZFN0YXRlO1xuXG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgJHJvb3RFbGVtZW50Lm9uKCdjbGljaycsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAvLyBUT0RPKHZvanRhKTogcmV3cml0ZSBsaW5rIHdoZW4gb3BlbmluZyBpbiBuZXcgdGFiL3dpbmRvdyAoaW4gbGVnYWN5IGJyb3dzZXIpXG4gICAgICAvLyBjdXJyZW50bHkgd2Ugb3BlbiBuaWNlIHVybCBsaW5rIGFuZCByZWRpcmVjdCB0aGVuXG5cbiAgICAgIGlmICghaHRtbDVNb2RlLnJld3JpdGVMaW5rcyB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuc2hpZnRLZXkgfHwgZXZlbnQud2hpY2ggPT0gMiB8fCBldmVudC5idXR0b24gPT0gMikgcmV0dXJuO1xuXG4gICAgICB2YXIgZWxtID0ganFMaXRlKGV2ZW50LnRhcmdldCk7XG5cbiAgICAgIC8vIHRyYXZlcnNlIHRoZSBET00gdXAgdG8gZmluZCBmaXJzdCBBIHRhZ1xuICAgICAgd2hpbGUgKG5vZGVOYW1lXyhlbG1bMF0pICE9PSAnYScpIHtcbiAgICAgICAgLy8gaWdub3JlIHJld3JpdGluZyBpZiBubyBBIHRhZyAocmVhY2hlZCByb290IGVsZW1lbnQsIG9yIG5vIHBhcmVudCAtIHJlbW92ZWQgZnJvbSBkb2N1bWVudClcbiAgICAgICAgaWYgKGVsbVswXSA9PT0gJHJvb3RFbGVtZW50WzBdIHx8ICEoZWxtID0gZWxtLnBhcmVudCgpKVswXSkgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgYWJzSHJlZiA9IGVsbS5wcm9wKCdocmVmJyk7XG4gICAgICAvLyBnZXQgdGhlIGFjdHVhbCBocmVmIGF0dHJpYnV0ZSAtIHNlZVxuICAgICAgLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2RkMzQ3MTQ4KHY9dnMuODUpLmFzcHhcbiAgICAgIHZhciByZWxIcmVmID0gZWxtLmF0dHIoJ2hyZWYnKSB8fCBlbG0uYXR0cigneGxpbms6aHJlZicpO1xuXG4gICAgICBpZiAoaXNPYmplY3QoYWJzSHJlZikgJiYgYWJzSHJlZi50b1N0cmluZygpID09PSAnW29iamVjdCBTVkdBbmltYXRlZFN0cmluZ10nKSB7XG4gICAgICAgIC8vIFNWR0FuaW1hdGVkU3RyaW5nLmFuaW1WYWwgc2hvdWxkIGJlIGlkZW50aWNhbCB0byBTVkdBbmltYXRlZFN0cmluZy5iYXNlVmFsLCB1bmxlc3MgZHVyaW5nXG4gICAgICAgIC8vIGFuIGFuaW1hdGlvbi5cbiAgICAgICAgYWJzSHJlZiA9IHVybFJlc29sdmUoYWJzSHJlZi5hbmltVmFsKS5ocmVmO1xuICAgICAgfVxuXG4gICAgICAvLyBJZ25vcmUgd2hlbiB1cmwgaXMgc3RhcnRlZCB3aXRoIGphdmFzY3JpcHQ6IG9yIG1haWx0bzpcbiAgICAgIGlmIChJR05PUkVfVVJJX1JFR0VYUC50ZXN0KGFic0hyZWYpKSByZXR1cm47XG5cbiAgICAgIGlmIChhYnNIcmVmICYmICFlbG0uYXR0cigndGFyZ2V0JykgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIGlmICgkbG9jYXRpb24uJCRwYXJzZUxpbmtVcmwoYWJzSHJlZiwgcmVsSHJlZikpIHtcbiAgICAgICAgICAvLyBXZSBkbyBhIHByZXZlbnREZWZhdWx0IGZvciBhbGwgdXJscyB0aGF0IGFyZSBwYXJ0IG9mIHRoZSBhbmd1bGFyIGFwcGxpY2F0aW9uLFxuICAgICAgICAgIC8vIGluIGh0bWw1bW9kZSBhbmQgYWxzbyB3aXRob3V0LCBzbyB0aGF0IHdlIGFyZSBhYmxlIHRvIGFib3J0IG5hdmlnYXRpb24gd2l0aG91dFxuICAgICAgICAgIC8vIGdldHRpbmcgZG91YmxlIGVudHJpZXMgaW4gdGhlIGxvY2F0aW9uIGhpc3RvcnkuXG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAvLyB1cGRhdGUgbG9jYXRpb24gbWFudWFsbHlcbiAgICAgICAgICBpZiAoJGxvY2F0aW9uLmFic1VybCgpICE9ICRicm93c2VyLnVybCgpKSB7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRhcHBseSgpO1xuICAgICAgICAgICAgLy8gaGFjayB0byB3b3JrIGFyb3VuZCBGRjYgYnVnIDY4NDIwOCB3aGVuIHNjZW5hcmlvIHJ1bm5lciBjbGlja3Mgb24gbGlua3NcbiAgICAgICAgICAgICR3aW5kb3cuYW5ndWxhclsnZmYtNjg0MjA4LXByZXZlbnREZWZhdWx0J10gPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG5cbiAgICAvLyByZXdyaXRlIGhhc2hiYW5nIHVybCA8PiBodG1sNSB1cmxcbiAgICBpZiAodHJpbUVtcHR5SGFzaCgkbG9jYXRpb24uYWJzVXJsKCkpICE9IHRyaW1FbXB0eUhhc2goaW5pdGlhbFVybCkpIHtcbiAgICAgICRicm93c2VyLnVybCgkbG9jYXRpb24uYWJzVXJsKCksIHRydWUpO1xuICAgIH1cblxuICAgIHZhciBpbml0aWFsaXppbmcgPSB0cnVlO1xuXG4gICAgLy8gdXBkYXRlICRsb2NhdGlvbiB3aGVuICRicm93c2VyIHVybCBjaGFuZ2VzXG4gICAgJGJyb3dzZXIub25VcmxDaGFuZ2UoZnVuY3Rpb24obmV3VXJsLCBuZXdTdGF0ZSkge1xuICAgICAgJHJvb3RTY29wZS4kZXZhbEFzeW5jKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgb2xkVXJsID0gJGxvY2F0aW9uLmFic1VybCgpO1xuICAgICAgICB2YXIgb2xkU3RhdGUgPSAkbG9jYXRpb24uJCRzdGF0ZTtcbiAgICAgICAgdmFyIGRlZmF1bHRQcmV2ZW50ZWQ7XG5cbiAgICAgICAgJGxvY2F0aW9uLiQkcGFyc2UobmV3VXJsKTtcbiAgICAgICAgJGxvY2F0aW9uLiQkc3RhdGUgPSBuZXdTdGF0ZTtcblxuICAgICAgICBkZWZhdWx0UHJldmVudGVkID0gJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckbG9jYXRpb25DaGFuZ2VTdGFydCcsIG5ld1VybCwgb2xkVXJsLFxuICAgICAgICAgICAgbmV3U3RhdGUsIG9sZFN0YXRlKS5kZWZhdWx0UHJldmVudGVkO1xuXG4gICAgICAgIC8vIGlmIHRoZSBsb2NhdGlvbiB3YXMgY2hhbmdlZCBieSBhIGAkbG9jYXRpb25DaGFuZ2VTdGFydGAgaGFuZGxlciB0aGVuIHN0b3BcbiAgICAgICAgLy8gcHJvY2Vzc2luZyB0aGlzIGxvY2F0aW9uIGNoYW5nZVxuICAgICAgICBpZiAoJGxvY2F0aW9uLmFic1VybCgpICE9PSBuZXdVcmwpIHJldHVybjtcblxuICAgICAgICBpZiAoZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICRsb2NhdGlvbi4kJHBhcnNlKG9sZFVybCk7XG4gICAgICAgICAgJGxvY2F0aW9uLiQkc3RhdGUgPSBvbGRTdGF0ZTtcbiAgICAgICAgICBzZXRCcm93c2VyVXJsV2l0aEZhbGxiYWNrKG9sZFVybCwgZmFsc2UsIG9sZFN0YXRlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbml0aWFsaXppbmcgPSBmYWxzZTtcbiAgICAgICAgICBhZnRlckxvY2F0aW9uQ2hhbmdlKG9sZFVybCwgb2xkU3RhdGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmICghJHJvb3RTY29wZS4kJHBoYXNlKSAkcm9vdFNjb3BlLiRkaWdlc3QoKTtcbiAgICB9KTtcblxuICAgIC8vIHVwZGF0ZSBicm93c2VyXG4gICAgJHJvb3RTY29wZS4kd2F0Y2goZnVuY3Rpb24gJGxvY2F0aW9uV2F0Y2goKSB7XG4gICAgICB2YXIgb2xkVXJsID0gdHJpbUVtcHR5SGFzaCgkYnJvd3Nlci51cmwoKSk7XG4gICAgICB2YXIgbmV3VXJsID0gdHJpbUVtcHR5SGFzaCgkbG9jYXRpb24uYWJzVXJsKCkpO1xuICAgICAgdmFyIG9sZFN0YXRlID0gJGJyb3dzZXIuc3RhdGUoKTtcbiAgICAgIHZhciBjdXJyZW50UmVwbGFjZSA9ICRsb2NhdGlvbi4kJHJlcGxhY2U7XG4gICAgICB2YXIgdXJsT3JTdGF0ZUNoYW5nZWQgPSBvbGRVcmwgIT09IG5ld1VybCB8fFxuICAgICAgICAoJGxvY2F0aW9uLiQkaHRtbDUgJiYgJHNuaWZmZXIuaGlzdG9yeSAmJiBvbGRTdGF0ZSAhPT0gJGxvY2F0aW9uLiQkc3RhdGUpO1xuXG4gICAgICBpZiAoaW5pdGlhbGl6aW5nIHx8IHVybE9yU3RhdGVDaGFuZ2VkKSB7XG4gICAgICAgIGluaXRpYWxpemluZyA9IGZhbHNlO1xuXG4gICAgICAgICRyb290U2NvcGUuJGV2YWxBc3luYyhmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgbmV3VXJsID0gJGxvY2F0aW9uLmFic1VybCgpO1xuICAgICAgICAgIHZhciBkZWZhdWx0UHJldmVudGVkID0gJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckbG9jYXRpb25DaGFuZ2VTdGFydCcsIG5ld1VybCwgb2xkVXJsLFxuICAgICAgICAgICAgICAkbG9jYXRpb24uJCRzdGF0ZSwgb2xkU3RhdGUpLmRlZmF1bHRQcmV2ZW50ZWQ7XG5cbiAgICAgICAgICAvLyBpZiB0aGUgbG9jYXRpb24gd2FzIGNoYW5nZWQgYnkgYSBgJGxvY2F0aW9uQ2hhbmdlU3RhcnRgIGhhbmRsZXIgdGhlbiBzdG9wXG4gICAgICAgICAgLy8gcHJvY2Vzc2luZyB0aGlzIGxvY2F0aW9uIGNoYW5nZVxuICAgICAgICAgIGlmICgkbG9jYXRpb24uYWJzVXJsKCkgIT09IG5ld1VybCkgcmV0dXJuO1xuXG4gICAgICAgICAgaWYgKGRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICRsb2NhdGlvbi4kJHBhcnNlKG9sZFVybCk7XG4gICAgICAgICAgICAkbG9jYXRpb24uJCRzdGF0ZSA9IG9sZFN0YXRlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodXJsT3JTdGF0ZUNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgc2V0QnJvd3NlclVybFdpdGhGYWxsYmFjayhuZXdVcmwsIGN1cnJlbnRSZXBsYWNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9sZFN0YXRlID09PSAkbG9jYXRpb24uJCRzdGF0ZSA/IG51bGwgOiAkbG9jYXRpb24uJCRzdGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZnRlckxvY2F0aW9uQ2hhbmdlKG9sZFVybCwgb2xkU3RhdGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgICRsb2NhdGlvbi4kJHJlcGxhY2UgPSBmYWxzZTtcblxuICAgICAgLy8gd2UgZG9uJ3QgbmVlZCB0byByZXR1cm4gYW55dGhpbmcgYmVjYXVzZSAkZXZhbEFzeW5jIHdpbGwgbWFrZSB0aGUgZGlnZXN0IGxvb3AgZGlydHkgd2hlblxuICAgICAgLy8gdGhlcmUgaXMgYSBjaGFuZ2VcbiAgICB9KTtcblxuICAgIHJldHVybiAkbG9jYXRpb247XG5cbiAgICBmdW5jdGlvbiBhZnRlckxvY2F0aW9uQ2hhbmdlKG9sZFVybCwgb2xkU3RhdGUpIHtcbiAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnJGxvY2F0aW9uQ2hhbmdlU3VjY2VzcycsICRsb2NhdGlvbi5hYnNVcmwoKSwgb2xkVXJsLFxuICAgICAgICAkbG9jYXRpb24uJCRzdGF0ZSwgb2xkU3RhdGUpO1xuICAgIH1cbn1dO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkbG9nXG4gKiBAcmVxdWlyZXMgJHdpbmRvd1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU2ltcGxlIHNlcnZpY2UgZm9yIGxvZ2dpbmcuIERlZmF1bHQgaW1wbGVtZW50YXRpb24gc2FmZWx5IHdyaXRlcyB0aGUgbWVzc2FnZVxuICogaW50byB0aGUgYnJvd3NlcidzIGNvbnNvbGUgKGlmIHByZXNlbnQpLlxuICpcbiAqIFRoZSBtYWluIHB1cnBvc2Ugb2YgdGhpcyBzZXJ2aWNlIGlzIHRvIHNpbXBsaWZ5IGRlYnVnZ2luZyBhbmQgdHJvdWJsZXNob290aW5nLlxuICpcbiAqIFRoZSBkZWZhdWx0IGlzIHRvIGxvZyBgZGVidWdgIG1lc3NhZ2VzLiBZb3UgY2FuIHVzZVxuICoge0BsaW5rIG5nLiRsb2dQcm92aWRlciBuZy4kbG9nUHJvdmlkZXIjZGVidWdFbmFibGVkfSB0byBjaGFuZ2UgdGhpcy5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwibG9nRXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgYW5ndWxhci5tb2R1bGUoJ2xvZ0V4YW1wbGUnLCBbXSlcbiAgICAgICAgIC5jb250cm9sbGVyKCdMb2dDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGxvZycsIGZ1bmN0aW9uKCRzY29wZSwgJGxvZykge1xuICAgICAgICAgICAkc2NvcGUuJGxvZyA9ICRsb2c7XG4gICAgICAgICAgICRzY29wZS5tZXNzYWdlID0gJ0hlbGxvIFdvcmxkISc7XG4gICAgICAgICB9XSk7XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJMb2dDb250cm9sbGVyXCI+XG4gICAgICAgICA8cD5SZWxvYWQgdGhpcyBwYWdlIHdpdGggb3BlbiBjb25zb2xlLCBlbnRlciB0ZXh0IGFuZCBoaXQgdGhlIGxvZyBidXR0b24uLi48L3A+XG4gICAgICAgICBNZXNzYWdlOlxuICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJtZXNzYWdlXCIvPlxuICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cIiRsb2cubG9nKG1lc3NhZ2UpXCI+bG9nPC9idXR0b24+XG4gICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiJGxvZy53YXJuKG1lc3NhZ2UpXCI+d2FybjwvYnV0dG9uPlxuICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cIiRsb2cuaW5mbyhtZXNzYWdlKVwiPmluZm88L2J1dHRvbj5cbiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCIkbG9nLmVycm9yKG1lc3NhZ2UpXCI+ZXJyb3I8L2J1dHRvbj5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkbG9nUHJvdmlkZXJcbiAqIEBkZXNjcmlwdGlvblxuICogVXNlIHRoZSBgJGxvZ1Byb3ZpZGVyYCB0byBjb25maWd1cmUgaG93IHRoZSBhcHBsaWNhdGlvbiBsb2dzIG1lc3NhZ2VzXG4gKi9cbmZ1bmN0aW9uICRMb2dQcm92aWRlcigpIHtcbiAgdmFyIGRlYnVnID0gdHJ1ZSxcbiAgICAgIHNlbGYgPSB0aGlzO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2dQcm92aWRlciNkZWJ1Z0VuYWJsZWRcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IGZsYWcgZW5hYmxlIG9yIGRpc2FibGUgZGVidWcgbGV2ZWwgbWVzc2FnZXNcbiAgICogQHJldHVybnMgeyp9IGN1cnJlbnQgdmFsdWUgaWYgdXNlZCBhcyBnZXR0ZXIgb3IgaXRzZWxmIChjaGFpbmluZykgaWYgdXNlZCBhcyBzZXR0ZXJcbiAgICovXG4gIHRoaXMuZGVidWdFbmFibGVkID0gZnVuY3Rpb24oZmxhZykge1xuICAgIGlmIChpc0RlZmluZWQoZmxhZykpIHtcbiAgICAgIGRlYnVnID0gZmxhZztcbiAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGRlYnVnO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLiRnZXQgPSBbJyR3aW5kb3cnLCBmdW5jdGlvbigkd2luZG93KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGxvZyNsb2dcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFdyaXRlIGEgbG9nIG1lc3NhZ2VcbiAgICAgICAqL1xuICAgICAgbG9nOiBjb25zb2xlTG9nKCdsb2cnKSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkbG9nI2luZm9cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFdyaXRlIGFuIGluZm9ybWF0aW9uIG1lc3NhZ2VcbiAgICAgICAqL1xuICAgICAgaW5mbzogY29uc29sZUxvZygnaW5mbycpLFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRsb2cjd2FyblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogV3JpdGUgYSB3YXJuaW5nIG1lc3NhZ2VcbiAgICAgICAqL1xuICAgICAgd2FybjogY29uc29sZUxvZygnd2FybicpLFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRsb2cjZXJyb3JcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFdyaXRlIGFuIGVycm9yIG1lc3NhZ2VcbiAgICAgICAqL1xuICAgICAgZXJyb3I6IGNvbnNvbGVMb2coJ2Vycm9yJyksXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGxvZyNkZWJ1Z1xuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogV3JpdGUgYSBkZWJ1ZyBtZXNzYWdlXG4gICAgICAgKi9cbiAgICAgIGRlYnVnOiAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBmbiA9IGNvbnNvbGVMb2coJ2RlYnVnJyk7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChkZWJ1Zykge1xuICAgICAgICAgICAgZm4uYXBwbHkoc2VsZiwgYXJndW1lbnRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KCkpXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGZvcm1hdEVycm9yKGFyZykge1xuICAgICAgaWYgKGFyZyBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIGlmIChhcmcuc3RhY2spIHtcbiAgICAgICAgICBhcmcgPSAoYXJnLm1lc3NhZ2UgJiYgYXJnLnN0YWNrLmluZGV4T2YoYXJnLm1lc3NhZ2UpID09PSAtMSlcbiAgICAgICAgICAgICAgPyAnRXJyb3I6ICcgKyBhcmcubWVzc2FnZSArICdcXG4nICsgYXJnLnN0YWNrXG4gICAgICAgICAgICAgIDogYXJnLnN0YWNrO1xuICAgICAgICB9IGVsc2UgaWYgKGFyZy5zb3VyY2VVUkwpIHtcbiAgICAgICAgICBhcmcgPSBhcmcubWVzc2FnZSArICdcXG4nICsgYXJnLnNvdXJjZVVSTCArICc6JyArIGFyZy5saW5lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbnNvbGVMb2codHlwZSkge1xuICAgICAgdmFyIGNvbnNvbGUgPSAkd2luZG93LmNvbnNvbGUgfHwge30sXG4gICAgICAgICAgbG9nRm4gPSBjb25zb2xlW3R5cGVdIHx8IGNvbnNvbGUubG9nIHx8IG5vb3AsXG4gICAgICAgICAgaGFzQXBwbHkgPSBmYWxzZTtcblxuICAgICAgLy8gTm90ZTogcmVhZGluZyBsb2dGbi5hcHBseSB0aHJvd3MgYW4gZXJyb3IgaW4gSUUxMSBpbiBJRTggZG9jdW1lbnQgbW9kZS5cbiAgICAgIC8vIFRoZSByZWFzb24gYmVoaW5kIHRoaXMgaXMgdGhhdCBjb25zb2xlLmxvZyBoYXMgdHlwZSBcIm9iamVjdFwiIGluIElFOC4uLlxuICAgICAgdHJ5IHtcbiAgICAgICAgaGFzQXBwbHkgPSAhIWxvZ0ZuLmFwcGx5O1xuICAgICAgfSBjYXRjaCAoZSkge31cblxuICAgICAgaWYgKGhhc0FwcGx5KSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgIGZvckVhY2goYXJndW1lbnRzLCBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgICAgIGFyZ3MucHVzaChmb3JtYXRFcnJvcihhcmcpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gbG9nRm4uYXBwbHkoY29uc29sZSwgYXJncyk7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIC8vIHdlIGFyZSBJRSB3aGljaCBlaXRoZXIgZG9lc24ndCBoYXZlIHdpbmRvdy5jb25zb2xlID0+IHRoaXMgaXMgbm9vcCBhbmQgd2UgZG8gbm90aGluZyxcbiAgICAgIC8vIG9yIHdlIGFyZSBJRSB3aGVyZSBjb25zb2xlLmxvZyBkb2Vzbid0IGhhdmUgYXBwbHkgc28gd2UgbG9nIGF0IGxlYXN0IGZpcnN0IDIgYXJnc1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGFyZzEsIGFyZzIpIHtcbiAgICAgICAgbG9nRm4oYXJnMSwgYXJnMiA9PSBudWxsID8gJycgOiBhcmcyKTtcbiAgICAgIH07XG4gICAgfVxuICB9XTtcbn1cblxudmFyICRwYXJzZU1pbkVyciA9IG1pbkVycignJHBhcnNlJyk7XG5cbi8vIFNhbmRib3hpbmcgQW5ndWxhciBFeHByZXNzaW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBBbmd1bGFyIGV4cHJlc3Npb25zIGFyZSBnZW5lcmFsbHkgY29uc2lkZXJlZCBzYWZlIGJlY2F1c2UgdGhlc2UgZXhwcmVzc2lvbnMgb25seSBoYXZlIGRpcmVjdFxuLy8gYWNjZXNzIHRvIGAkc2NvcGVgIGFuZCBsb2NhbHMuIEhvd2V2ZXIsIG9uZSBjYW4gb2J0YWluIHRoZSBhYmlsaXR5IHRvIGV4ZWN1dGUgYXJiaXRyYXJ5IEpTIGNvZGUgYnlcbi8vIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byBuYXRpdmUgSlMgZnVuY3Rpb25zIHN1Y2ggYXMgdGhlIEZ1bmN0aW9uIGNvbnN0cnVjdG9yLlxuLy9cbi8vIEFzIGFuIGV4YW1wbGUsIGNvbnNpZGVyIHRoZSBmb2xsb3dpbmcgQW5ndWxhciBleHByZXNzaW9uOlxuLy9cbi8vICAge30udG9TdHJpbmcuY29uc3RydWN0b3IoJ2FsZXJ0KFwiZXZpbCBKUyBjb2RlXCIpJylcbi8vXG4vLyBUaGlzIHNhbmRib3hpbmcgdGVjaG5pcXVlIGlzIG5vdCBwZXJmZWN0IGFuZCBkb2Vzbid0IGFpbSB0byBiZS4gVGhlIGdvYWwgaXMgdG8gcHJldmVudCBleHBsb2l0c1xuLy8gYWdhaW5zdCB0aGUgZXhwcmVzc2lvbiBsYW5ndWFnZSwgYnV0IG5vdCB0byBwcmV2ZW50IGV4cGxvaXRzIHRoYXQgd2VyZSBlbmFibGVkIGJ5IGV4cG9zaW5nXG4vLyBzZW5zaXRpdmUgSmF2YVNjcmlwdCBvciBicm93c2VyIEFQSXMgb24gU2NvcGUuIEV4cG9zaW5nIHN1Y2ggb2JqZWN0cyBvbiBhIFNjb3BlIGlzIG5ldmVyIGEgZ29vZFxuLy8gcHJhY3RpY2UgYW5kIHRoZXJlZm9yZSB3ZSBhcmUgbm90IGV2ZW4gdHJ5aW5nIHRvIHByb3RlY3QgYWdhaW5zdCBpbnRlcmFjdGlvbiB3aXRoIGFuIG9iamVjdFxuLy8gZXhwbGljaXRseSBleHBvc2VkIGluIHRoaXMgd2F5LlxuLy9cbi8vIEluIGdlbmVyYWwsIGl0IGlzIG5vdCBwb3NzaWJsZSB0byBhY2Nlc3MgYSBXaW5kb3cgb2JqZWN0IGZyb20gYW4gYW5ndWxhciBleHByZXNzaW9uIHVubGVzcyBhXG4vLyB3aW5kb3cgb3Igc29tZSBET00gb2JqZWN0IHRoYXQgaGFzIGEgcmVmZXJlbmNlIHRvIHdpbmRvdyBpcyBwdWJsaXNoZWQgb250byBhIFNjb3BlLlxuLy8gU2ltaWxhcmx5IHdlIHByZXZlbnQgaW52b2NhdGlvbnMgb2YgZnVuY3Rpb24ga25vd24gdG8gYmUgZGFuZ2Vyb3VzLCBhcyB3ZWxsIGFzIGFzc2lnbm1lbnRzIHRvXG4vLyBuYXRpdmUgb2JqZWN0cy5cbi8vXG4vLyBTZWUgaHR0cHM6Ly9kb2NzLmFuZ3VsYXJqcy5vcmcvZ3VpZGUvc2VjdXJpdHlcblxuXG5mdW5jdGlvbiBlbnN1cmVTYWZlTWVtYmVyTmFtZShuYW1lLCBmdWxsRXhwcmVzc2lvbikge1xuICBpZiAobmFtZSA9PT0gXCJfX2RlZmluZUdldHRlcl9fXCIgfHwgbmFtZSA9PT0gXCJfX2RlZmluZVNldHRlcl9fXCJcbiAgICAgIHx8IG5hbWUgPT09IFwiX19sb29rdXBHZXR0ZXJfX1wiIHx8IG5hbWUgPT09IFwiX19sb29rdXBTZXR0ZXJfX1wiXG4gICAgICB8fCBuYW1lID09PSBcIl9fcHJvdG9fX1wiKSB7XG4gICAgdGhyb3cgJHBhcnNlTWluRXJyKCdpc2VjZmxkJyxcbiAgICAgICAgJ0F0dGVtcHRpbmcgdG8gYWNjZXNzIGEgZGlzYWxsb3dlZCBmaWVsZCBpbiBBbmd1bGFyIGV4cHJlc3Npb25zISAnXG4gICAgICAgICsgJ0V4cHJlc3Npb246IHswfScsIGZ1bGxFeHByZXNzaW9uKTtcbiAgfVxuICByZXR1cm4gbmFtZTtcbn1cblxuZnVuY3Rpb24gZW5zdXJlU2FmZU9iamVjdChvYmosIGZ1bGxFeHByZXNzaW9uKSB7XG4gIC8vIG5pZnR5IGNoZWNrIGlmIG9iaiBpcyBGdW5jdGlvbiB0aGF0IGlzIGZhc3QgYW5kIHdvcmtzIGFjcm9zcyBpZnJhbWVzIGFuZCBvdGhlciBjb250ZXh0c1xuICBpZiAob2JqKSB7XG4gICAgaWYgKG9iai5jb25zdHJ1Y3RvciA9PT0gb2JqKSB7XG4gICAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ2lzZWNmbicsXG4gICAgICAgICAgJ1JlZmVyZW5jaW5nIEZ1bmN0aW9uIGluIEFuZ3VsYXIgZXhwcmVzc2lvbnMgaXMgZGlzYWxsb3dlZCEgRXhwcmVzc2lvbjogezB9JyxcbiAgICAgICAgICBmdWxsRXhwcmVzc2lvbik7XG4gICAgfSBlbHNlIGlmICgvLyBpc1dpbmRvdyhvYmopXG4gICAgICAgIG9iai53aW5kb3cgPT09IG9iaikge1xuICAgICAgdGhyb3cgJHBhcnNlTWluRXJyKCdpc2Vjd2luZG93JyxcbiAgICAgICAgICAnUmVmZXJlbmNpbmcgdGhlIFdpbmRvdyBpbiBBbmd1bGFyIGV4cHJlc3Npb25zIGlzIGRpc2FsbG93ZWQhIEV4cHJlc3Npb246IHswfScsXG4gICAgICAgICAgZnVsbEV4cHJlc3Npb24pO1xuICAgIH0gZWxzZSBpZiAoLy8gaXNFbGVtZW50KG9iailcbiAgICAgICAgb2JqLmNoaWxkcmVuICYmIChvYmoubm9kZU5hbWUgfHwgKG9iai5wcm9wICYmIG9iai5hdHRyICYmIG9iai5maW5kKSkpIHtcbiAgICAgIHRocm93ICRwYXJzZU1pbkVycignaXNlY2RvbScsXG4gICAgICAgICAgJ1JlZmVyZW5jaW5nIERPTSBub2RlcyBpbiBBbmd1bGFyIGV4cHJlc3Npb25zIGlzIGRpc2FsbG93ZWQhIEV4cHJlc3Npb246IHswfScsXG4gICAgICAgICAgZnVsbEV4cHJlc3Npb24pO1xuICAgIH0gZWxzZSBpZiAoLy8gYmxvY2sgT2JqZWN0IHNvIHRoYXQgd2UgY2FuJ3QgZ2V0IGhvbGQgb2YgZGFuZ2Vyb3VzIE9iamVjdC4qIG1ldGhvZHNcbiAgICAgICAgb2JqID09PSBPYmplY3QpIHtcbiAgICAgIHRocm93ICRwYXJzZU1pbkVycignaXNlY29iaicsXG4gICAgICAgICAgJ1JlZmVyZW5jaW5nIE9iamVjdCBpbiBBbmd1bGFyIGV4cHJlc3Npb25zIGlzIGRpc2FsbG93ZWQhIEV4cHJlc3Npb246IHswfScsXG4gICAgICAgICAgZnVsbEV4cHJlc3Npb24pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG52YXIgQ0FMTCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsO1xudmFyIEFQUExZID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xudmFyIEJJTkQgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZDtcblxuZnVuY3Rpb24gZW5zdXJlU2FmZUZ1bmN0aW9uKG9iaiwgZnVsbEV4cHJlc3Npb24pIHtcbiAgaWYgKG9iaikge1xuICAgIGlmIChvYmouY29uc3RydWN0b3IgPT09IG9iaikge1xuICAgICAgdGhyb3cgJHBhcnNlTWluRXJyKCdpc2VjZm4nLFxuICAgICAgICAnUmVmZXJlbmNpbmcgRnVuY3Rpb24gaW4gQW5ndWxhciBleHByZXNzaW9ucyBpcyBkaXNhbGxvd2VkISBFeHByZXNzaW9uOiB7MH0nLFxuICAgICAgICBmdWxsRXhwcmVzc2lvbik7XG4gICAgfSBlbHNlIGlmIChvYmogPT09IENBTEwgfHwgb2JqID09PSBBUFBMWSB8fCBvYmogPT09IEJJTkQpIHtcbiAgICAgIHRocm93ICRwYXJzZU1pbkVycignaXNlY2ZmJyxcbiAgICAgICAgJ1JlZmVyZW5jaW5nIGNhbGwsIGFwcGx5IG9yIGJpbmQgaW4gQW5ndWxhciBleHByZXNzaW9ucyBpcyBkaXNhbGxvd2VkISBFeHByZXNzaW9uOiB7MH0nLFxuICAgICAgICBmdWxsRXhwcmVzc2lvbik7XG4gICAgfVxuICB9XG59XG5cbi8vS2V5d29yZCBjb25zdGFudHNcbnZhciBDT05TVEFOVFMgPSBjcmVhdGVNYXAoKTtcbmZvckVhY2goe1xuICAnbnVsbCc6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgJ3RydWUnOiBmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0sXG4gICdmYWxzZSc6IGZ1bmN0aW9uKCkgeyByZXR1cm4gZmFsc2U7IH0sXG4gICd1bmRlZmluZWQnOiBmdW5jdGlvbigpIHt9XG59LCBmdW5jdGlvbihjb25zdGFudEdldHRlciwgbmFtZSkge1xuICBjb25zdGFudEdldHRlci5jb25zdGFudCA9IGNvbnN0YW50R2V0dGVyLmxpdGVyYWwgPSBjb25zdGFudEdldHRlci5zaGFyZWRHZXR0ZXIgPSB0cnVlO1xuICBDT05TVEFOVFNbbmFtZV0gPSBjb25zdGFudEdldHRlcjtcbn0pO1xuXG4vL05vdCBxdWl0ZSBhIGNvbnN0YW50LCBidXQgY2FuIGJlIGxleC9wYXJzZWQgdGhlIHNhbWVcbkNPTlNUQU5UU1sndGhpcyddID0gZnVuY3Rpb24oc2VsZikgeyByZXR1cm4gc2VsZjsgfTtcbkNPTlNUQU5UU1sndGhpcyddLnNoYXJlZEdldHRlciA9IHRydWU7XG5cblxuLy9PcGVyYXRvcnMgLSB3aWxsIGJlIHdyYXBwZWQgYnkgYmluYXJ5Rm4vdW5hcnlGbi9hc3NpZ25tZW50L2ZpbHRlclxudmFyIE9QRVJBVE9SUyA9IGV4dGVuZChjcmVhdGVNYXAoKSwge1xuICAgICcrJzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsIGIpIHtcbiAgICAgIGE9YShzZWxmLCBsb2NhbHMpOyBiPWIoc2VsZiwgbG9jYWxzKTtcbiAgICAgIGlmIChpc0RlZmluZWQoYSkpIHtcbiAgICAgICAgaWYgKGlzRGVmaW5lZChiKSkge1xuICAgICAgICAgIHJldHVybiBhICsgYjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0RlZmluZWQoYikgPyBiIDogdW5kZWZpbmVkO30sXG4gICAgJy0nOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSwgYikge1xuICAgICAgICAgIGE9YShzZWxmLCBsb2NhbHMpOyBiPWIoc2VsZiwgbG9jYWxzKTtcbiAgICAgICAgICByZXR1cm4gKGlzRGVmaW5lZChhKSA/IGEgOiAwKSAtIChpc0RlZmluZWQoYikgPyBiIDogMCk7XG4gICAgICAgIH0sXG4gICAgJyonOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSwgYikge3JldHVybiBhKHNlbGYsIGxvY2FscykgKiBiKHNlbGYsIGxvY2Fscyk7fSxcbiAgICAnLyc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLCBiKSB7cmV0dXJuIGEoc2VsZiwgbG9jYWxzKSAvIGIoc2VsZiwgbG9jYWxzKTt9LFxuICAgICclJzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsIGIpIHtyZXR1cm4gYShzZWxmLCBsb2NhbHMpICUgYihzZWxmLCBsb2NhbHMpO30sXG4gICAgJz09PSc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLCBiKSB7cmV0dXJuIGEoc2VsZiwgbG9jYWxzKSA9PT0gYihzZWxmLCBsb2NhbHMpO30sXG4gICAgJyE9PSc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLCBiKSB7cmV0dXJuIGEoc2VsZiwgbG9jYWxzKSAhPT0gYihzZWxmLCBsb2NhbHMpO30sXG4gICAgJz09JzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsIGIpIHtyZXR1cm4gYShzZWxmLCBsb2NhbHMpID09IGIoc2VsZiwgbG9jYWxzKTt9LFxuICAgICchPSc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLCBiKSB7cmV0dXJuIGEoc2VsZiwgbG9jYWxzKSAhPSBiKHNlbGYsIGxvY2Fscyk7fSxcbiAgICAnPCc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLCBiKSB7cmV0dXJuIGEoc2VsZiwgbG9jYWxzKSA8IGIoc2VsZiwgbG9jYWxzKTt9LFxuICAgICc+JzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsIGIpIHtyZXR1cm4gYShzZWxmLCBsb2NhbHMpID4gYihzZWxmLCBsb2NhbHMpO30sXG4gICAgJzw9JzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsIGIpIHtyZXR1cm4gYShzZWxmLCBsb2NhbHMpIDw9IGIoc2VsZiwgbG9jYWxzKTt9LFxuICAgICc+PSc6ZnVuY3Rpb24oc2VsZiwgbG9jYWxzLCBhLCBiKSB7cmV0dXJuIGEoc2VsZiwgbG9jYWxzKSA+PSBiKHNlbGYsIGxvY2Fscyk7fSxcbiAgICAnJiYnOmZ1bmN0aW9uKHNlbGYsIGxvY2FscywgYSwgYikge3JldHVybiBhKHNlbGYsIGxvY2FscykgJiYgYihzZWxmLCBsb2NhbHMpO30sXG4gICAgJ3x8JzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEsIGIpIHtyZXR1cm4gYShzZWxmLCBsb2NhbHMpIHx8IGIoc2VsZiwgbG9jYWxzKTt9LFxuICAgICchJzpmdW5jdGlvbihzZWxmLCBsb2NhbHMsIGEpIHtyZXR1cm4gIWEoc2VsZiwgbG9jYWxzKTt9LFxuXG4gICAgLy9Ub2tlbml6ZWQgYXMgb3BlcmF0b3JzIGJ1dCBwYXJzZWQgYXMgYXNzaWdubWVudC9maWx0ZXJzXG4gICAgJz0nOnRydWUsXG4gICAgJ3wnOnRydWVcbn0pO1xudmFyIEVTQ0FQRSA9IHtcIm5cIjpcIlxcblwiLCBcImZcIjpcIlxcZlwiLCBcInJcIjpcIlxcclwiLCBcInRcIjpcIlxcdFwiLCBcInZcIjpcIlxcdlwiLCBcIidcIjpcIidcIiwgJ1wiJzonXCInfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cbi8qKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBMZXhlciA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbn07XG5cbkxleGVyLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IExleGVyLFxuXG4gIGxleDogZnVuY3Rpb24odGV4dCkge1xuICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgdGhpcy5pbmRleCA9IDA7XG4gICAgdGhpcy50b2tlbnMgPSBbXTtcblxuICAgIHdoaWxlICh0aGlzLmluZGV4IDwgdGhpcy50ZXh0Lmxlbmd0aCkge1xuICAgICAgdmFyIGNoID0gdGhpcy50ZXh0LmNoYXJBdCh0aGlzLmluZGV4KTtcbiAgICAgIGlmIChjaCA9PT0gJ1wiJyB8fCBjaCA9PT0gXCInXCIpIHtcbiAgICAgICAgdGhpcy5yZWFkU3RyaW5nKGNoKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc051bWJlcihjaCkgfHwgY2ggPT09ICcuJyAmJiB0aGlzLmlzTnVtYmVyKHRoaXMucGVlaygpKSkge1xuICAgICAgICB0aGlzLnJlYWROdW1iZXIoKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0lkZW50KGNoKSkge1xuICAgICAgICB0aGlzLnJlYWRJZGVudCgpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmlzKGNoLCAnKCl7fVtdLiw7Oj8nKSkge1xuICAgICAgICB0aGlzLnRva2Vucy5wdXNoKHtpbmRleDogdGhpcy5pbmRleCwgdGV4dDogY2h9KTtcbiAgICAgICAgdGhpcy5pbmRleCsrO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmlzV2hpdGVzcGFjZShjaCkpIHtcbiAgICAgICAgdGhpcy5pbmRleCsrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGNoMiA9IGNoICsgdGhpcy5wZWVrKCk7XG4gICAgICAgIHZhciBjaDMgPSBjaDIgKyB0aGlzLnBlZWsoMik7XG4gICAgICAgIHZhciBvcDEgPSBPUEVSQVRPUlNbY2hdO1xuICAgICAgICB2YXIgb3AyID0gT1BFUkFUT1JTW2NoMl07XG4gICAgICAgIHZhciBvcDMgPSBPUEVSQVRPUlNbY2gzXTtcbiAgICAgICAgaWYgKG9wMSB8fCBvcDIgfHwgb3AzKSB7XG4gICAgICAgICAgdmFyIHRva2VuID0gb3AzID8gY2gzIDogKG9wMiA/IGNoMiA6IGNoKTtcbiAgICAgICAgICB0aGlzLnRva2Vucy5wdXNoKHtpbmRleDogdGhpcy5pbmRleCwgdGV4dDogdG9rZW4sIG9wZXJhdG9yOiB0cnVlfSk7XG4gICAgICAgICAgdGhpcy5pbmRleCArPSB0b2tlbi5sZW5ndGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy50aHJvd0Vycm9yKCdVbmV4cGVjdGVkIG5leHQgY2hhcmFjdGVyICcsIHRoaXMuaW5kZXgsIHRoaXMuaW5kZXggKyAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy50b2tlbnM7XG4gIH0sXG5cbiAgaXM6IGZ1bmN0aW9uKGNoLCBjaGFycykge1xuICAgIHJldHVybiBjaGFycy5pbmRleE9mKGNoKSAhPT0gLTE7XG4gIH0sXG5cbiAgcGVlazogZnVuY3Rpb24oaSkge1xuICAgIHZhciBudW0gPSBpIHx8IDE7XG4gICAgcmV0dXJuICh0aGlzLmluZGV4ICsgbnVtIDwgdGhpcy50ZXh0Lmxlbmd0aCkgPyB0aGlzLnRleHQuY2hhckF0KHRoaXMuaW5kZXggKyBudW0pIDogZmFsc2U7XG4gIH0sXG5cbiAgaXNOdW1iZXI6IGZ1bmN0aW9uKGNoKSB7XG4gICAgcmV0dXJuICgnMCcgPD0gY2ggJiYgY2ggPD0gJzknKSAmJiB0eXBlb2YgY2ggPT09IFwic3RyaW5nXCI7XG4gIH0sXG5cbiAgaXNXaGl0ZXNwYWNlOiBmdW5jdGlvbihjaCkge1xuICAgIC8vIElFIHRyZWF0cyBub24tYnJlYWtpbmcgc3BhY2UgYXMgXFx1MDBBMFxuICAgIHJldHVybiAoY2ggPT09ICcgJyB8fCBjaCA9PT0gJ1xccicgfHwgY2ggPT09ICdcXHQnIHx8XG4gICAgICAgICAgICBjaCA9PT0gJ1xcbicgfHwgY2ggPT09ICdcXHYnIHx8IGNoID09PSAnXFx1MDBBMCcpO1xuICB9LFxuXG4gIGlzSWRlbnQ6IGZ1bmN0aW9uKGNoKSB7XG4gICAgcmV0dXJuICgnYScgPD0gY2ggJiYgY2ggPD0gJ3onIHx8XG4gICAgICAgICAgICAnQScgPD0gY2ggJiYgY2ggPD0gJ1onIHx8XG4gICAgICAgICAgICAnXycgPT09IGNoIHx8IGNoID09PSAnJCcpO1xuICB9LFxuXG4gIGlzRXhwT3BlcmF0b3I6IGZ1bmN0aW9uKGNoKSB7XG4gICAgcmV0dXJuIChjaCA9PT0gJy0nIHx8IGNoID09PSAnKycgfHwgdGhpcy5pc051bWJlcihjaCkpO1xuICB9LFxuXG4gIHRocm93RXJyb3I6IGZ1bmN0aW9uKGVycm9yLCBzdGFydCwgZW5kKSB7XG4gICAgZW5kID0gZW5kIHx8IHRoaXMuaW5kZXg7XG4gICAgdmFyIGNvbFN0ciA9IChpc0RlZmluZWQoc3RhcnQpXG4gICAgICAgICAgICA/ICdzICcgKyBzdGFydCArICAnLScgKyB0aGlzLmluZGV4ICsgJyBbJyArIHRoaXMudGV4dC5zdWJzdHJpbmcoc3RhcnQsIGVuZCkgKyAnXSdcbiAgICAgICAgICAgIDogJyAnICsgZW5kKTtcbiAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ2xleGVycicsICdMZXhlciBFcnJvcjogezB9IGF0IGNvbHVtbnsxfSBpbiBleHByZXNzaW9uIFt7Mn1dLicsXG4gICAgICAgIGVycm9yLCBjb2xTdHIsIHRoaXMudGV4dCk7XG4gIH0sXG5cbiAgcmVhZE51bWJlcjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIG51bWJlciA9ICcnO1xuICAgIHZhciBzdGFydCA9IHRoaXMuaW5kZXg7XG4gICAgd2hpbGUgKHRoaXMuaW5kZXggPCB0aGlzLnRleHQubGVuZ3RoKSB7XG4gICAgICB2YXIgY2ggPSBsb3dlcmNhc2UodGhpcy50ZXh0LmNoYXJBdCh0aGlzLmluZGV4KSk7XG4gICAgICBpZiAoY2ggPT0gJy4nIHx8IHRoaXMuaXNOdW1iZXIoY2gpKSB7XG4gICAgICAgIG51bWJlciArPSBjaDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBwZWVrQ2ggPSB0aGlzLnBlZWsoKTtcbiAgICAgICAgaWYgKGNoID09ICdlJyAmJiB0aGlzLmlzRXhwT3BlcmF0b3IocGVla0NoKSkge1xuICAgICAgICAgIG51bWJlciArPSBjaDtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzRXhwT3BlcmF0b3IoY2gpICYmXG4gICAgICAgICAgICBwZWVrQ2ggJiYgdGhpcy5pc051bWJlcihwZWVrQ2gpICYmXG4gICAgICAgICAgICBudW1iZXIuY2hhckF0KG51bWJlci5sZW5ndGggLSAxKSA9PSAnZScpIHtcbiAgICAgICAgICBudW1iZXIgKz0gY2g7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0V4cE9wZXJhdG9yKGNoKSAmJlxuICAgICAgICAgICAgKCFwZWVrQ2ggfHwgIXRoaXMuaXNOdW1iZXIocGVla0NoKSkgJiZcbiAgICAgICAgICAgIG51bWJlci5jaGFyQXQobnVtYmVyLmxlbmd0aCAtIDEpID09ICdlJykge1xuICAgICAgICAgIHRoaXMudGhyb3dFcnJvcignSW52YWxpZCBleHBvbmVudCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmluZGV4Kys7XG4gICAgfVxuICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgaW5kZXg6IHN0YXJ0LFxuICAgICAgdGV4dDogbnVtYmVyLFxuICAgICAgY29uc3RhbnQ6IHRydWUsXG4gICAgICB2YWx1ZTogTnVtYmVyKG51bWJlcilcbiAgICB9KTtcbiAgfSxcblxuICByZWFkSWRlbnQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuaW5kZXg7XG4gICAgd2hpbGUgKHRoaXMuaW5kZXggPCB0aGlzLnRleHQubGVuZ3RoKSB7XG4gICAgICB2YXIgY2ggPSB0aGlzLnRleHQuY2hhckF0KHRoaXMuaW5kZXgpO1xuICAgICAgaWYgKCEodGhpcy5pc0lkZW50KGNoKSB8fCB0aGlzLmlzTnVtYmVyKGNoKSkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICB0aGlzLmluZGV4Kys7XG4gICAgfVxuICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgaW5kZXg6IHN0YXJ0LFxuICAgICAgdGV4dDogdGhpcy50ZXh0LnNsaWNlKHN0YXJ0LCB0aGlzLmluZGV4KSxcbiAgICAgIGlkZW50aWZpZXI6IHRydWVcbiAgICB9KTtcbiAgfSxcblxuICByZWFkU3RyaW5nOiBmdW5jdGlvbihxdW90ZSkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuaW5kZXg7XG4gICAgdGhpcy5pbmRleCsrO1xuICAgIHZhciBzdHJpbmcgPSAnJztcbiAgICB2YXIgcmF3U3RyaW5nID0gcXVvdGU7XG4gICAgdmFyIGVzY2FwZSA9IGZhbHNlO1xuICAgIHdoaWxlICh0aGlzLmluZGV4IDwgdGhpcy50ZXh0Lmxlbmd0aCkge1xuICAgICAgdmFyIGNoID0gdGhpcy50ZXh0LmNoYXJBdCh0aGlzLmluZGV4KTtcbiAgICAgIHJhd1N0cmluZyArPSBjaDtcbiAgICAgIGlmIChlc2NhcGUpIHtcbiAgICAgICAgaWYgKGNoID09PSAndScpIHtcbiAgICAgICAgICB2YXIgaGV4ID0gdGhpcy50ZXh0LnN1YnN0cmluZyh0aGlzLmluZGV4ICsgMSwgdGhpcy5pbmRleCArIDUpO1xuICAgICAgICAgIGlmICghaGV4Lm1hdGNoKC9bXFxkYS1mXXs0fS9pKSlcbiAgICAgICAgICAgIHRoaXMudGhyb3dFcnJvcignSW52YWxpZCB1bmljb2RlIGVzY2FwZSBbXFxcXHUnICsgaGV4ICsgJ10nKTtcbiAgICAgICAgICB0aGlzLmluZGV4ICs9IDQ7XG4gICAgICAgICAgc3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoaGV4LCAxNikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciByZXAgPSBFU0NBUEVbY2hdO1xuICAgICAgICAgIHN0cmluZyA9IHN0cmluZyArIChyZXAgfHwgY2gpO1xuICAgICAgICB9XG4gICAgICAgIGVzY2FwZSA9IGZhbHNlO1xuICAgICAgfSBlbHNlIGlmIChjaCA9PT0gJ1xcXFwnKSB7XG4gICAgICAgIGVzY2FwZSA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKGNoID09PSBxdW90ZSkge1xuICAgICAgICB0aGlzLmluZGV4Kys7XG4gICAgICAgIHRoaXMudG9rZW5zLnB1c2goe1xuICAgICAgICAgIGluZGV4OiBzdGFydCxcbiAgICAgICAgICB0ZXh0OiByYXdTdHJpbmcsXG4gICAgICAgICAgY29uc3RhbnQ6IHRydWUsXG4gICAgICAgICAgdmFsdWU6IHN0cmluZ1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyaW5nICs9IGNoO1xuICAgICAgfVxuICAgICAgdGhpcy5pbmRleCsrO1xuICAgIH1cbiAgICB0aGlzLnRocm93RXJyb3IoJ1VudGVybWluYXRlZCBxdW90ZScsIHN0YXJ0KTtcbiAgfVxufTtcblxuXG5mdW5jdGlvbiBpc0NvbnN0YW50KGV4cCkge1xuICByZXR1cm4gZXhwLmNvbnN0YW50O1xufVxuXG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgUGFyc2VyID0gZnVuY3Rpb24obGV4ZXIsICRmaWx0ZXIsIG9wdGlvbnMpIHtcbiAgdGhpcy5sZXhlciA9IGxleGVyO1xuICB0aGlzLiRmaWx0ZXIgPSAkZmlsdGVyO1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xufTtcblxuUGFyc2VyLlpFUk8gPSBleHRlbmQoZnVuY3Rpb24oKSB7XG4gIHJldHVybiAwO1xufSwge1xuICBzaGFyZWRHZXR0ZXI6IHRydWUsXG4gIGNvbnN0YW50OiB0cnVlXG59KTtcblxuUGFyc2VyLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFBhcnNlcixcblxuICBwYXJzZTogZnVuY3Rpb24odGV4dCkge1xuICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgdGhpcy50b2tlbnMgPSB0aGlzLmxleGVyLmxleCh0ZXh0KTtcblxuICAgIHZhciB2YWx1ZSA9IHRoaXMuc3RhdGVtZW50cygpO1xuXG4gICAgaWYgKHRoaXMudG9rZW5zLmxlbmd0aCAhPT0gMCkge1xuICAgICAgdGhpcy50aHJvd0Vycm9yKCdpcyBhbiB1bmV4cGVjdGVkIHRva2VuJywgdGhpcy50b2tlbnNbMF0pO1xuICAgIH1cblxuICAgIHZhbHVlLmxpdGVyYWwgPSAhIXZhbHVlLmxpdGVyYWw7XG4gICAgdmFsdWUuY29uc3RhbnQgPSAhIXZhbHVlLmNvbnN0YW50O1xuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuXG4gIHByaW1hcnk6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwcmltYXJ5O1xuICAgIGlmICh0aGlzLmV4cGVjdCgnKCcpKSB7XG4gICAgICBwcmltYXJ5ID0gdGhpcy5maWx0ZXJDaGFpbigpO1xuICAgICAgdGhpcy5jb25zdW1lKCcpJyk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmV4cGVjdCgnWycpKSB7XG4gICAgICBwcmltYXJ5ID0gdGhpcy5hcnJheURlY2xhcmF0aW9uKCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmV4cGVjdCgneycpKSB7XG4gICAgICBwcmltYXJ5ID0gdGhpcy5vYmplY3QoKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMucGVlaygpLmlkZW50aWZpZXIgJiYgdGhpcy5wZWVrKCkudGV4dCBpbiBDT05TVEFOVFMpIHtcbiAgICAgIHByaW1hcnkgPSBDT05TVEFOVFNbdGhpcy5jb25zdW1lKCkudGV4dF07XG4gICAgfSBlbHNlIGlmICh0aGlzLnBlZWsoKS5pZGVudGlmaWVyKSB7XG4gICAgICBwcmltYXJ5ID0gdGhpcy5pZGVudGlmaWVyKCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnBlZWsoKS5jb25zdGFudCkge1xuICAgICAgcHJpbWFyeSA9IHRoaXMuY29uc3RhbnQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50aHJvd0Vycm9yKCdub3QgYSBwcmltYXJ5IGV4cHJlc3Npb24nLCB0aGlzLnBlZWsoKSk7XG4gICAgfVxuXG4gICAgdmFyIG5leHQsIGNvbnRleHQ7XG4gICAgd2hpbGUgKChuZXh0ID0gdGhpcy5leHBlY3QoJygnLCAnWycsICcuJykpKSB7XG4gICAgICBpZiAobmV4dC50ZXh0ID09PSAnKCcpIHtcbiAgICAgICAgcHJpbWFyeSA9IHRoaXMuZnVuY3Rpb25DYWxsKHByaW1hcnksIGNvbnRleHQpO1xuICAgICAgICBjb250ZXh0ID0gbnVsbDtcbiAgICAgIH0gZWxzZSBpZiAobmV4dC50ZXh0ID09PSAnWycpIHtcbiAgICAgICAgY29udGV4dCA9IHByaW1hcnk7XG4gICAgICAgIHByaW1hcnkgPSB0aGlzLm9iamVjdEluZGV4KHByaW1hcnkpO1xuICAgICAgfSBlbHNlIGlmIChuZXh0LnRleHQgPT09ICcuJykge1xuICAgICAgICBjb250ZXh0ID0gcHJpbWFyeTtcbiAgICAgICAgcHJpbWFyeSA9IHRoaXMuZmllbGRBY2Nlc3MocHJpbWFyeSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRocm93RXJyb3IoJ0lNUE9TU0lCTEUnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHByaW1hcnk7XG4gIH0sXG5cbiAgdGhyb3dFcnJvcjogZnVuY3Rpb24obXNnLCB0b2tlbikge1xuICAgIHRocm93ICRwYXJzZU1pbkVycignc3ludGF4JyxcbiAgICAgICAgJ1N5bnRheCBFcnJvcjogVG9rZW4gXFwnezB9XFwnIHsxfSBhdCBjb2x1bW4gezJ9IG9mIHRoZSBleHByZXNzaW9uIFt7M31dIHN0YXJ0aW5nIGF0IFt7NH1dLicsXG4gICAgICAgICAgdG9rZW4udGV4dCwgbXNnLCAodG9rZW4uaW5kZXggKyAxKSwgdGhpcy50ZXh0LCB0aGlzLnRleHQuc3Vic3RyaW5nKHRva2VuLmluZGV4KSk7XG4gIH0sXG5cbiAgcGVla1Rva2VuOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy50b2tlbnMubGVuZ3RoID09PSAwKVxuICAgICAgdGhyb3cgJHBhcnNlTWluRXJyKCd1ZW9lJywgJ1VuZXhwZWN0ZWQgZW5kIG9mIGV4cHJlc3Npb246IHswfScsIHRoaXMudGV4dCk7XG4gICAgcmV0dXJuIHRoaXMudG9rZW5zWzBdO1xuICB9LFxuXG4gIHBlZWs6IGZ1bmN0aW9uKGUxLCBlMiwgZTMsIGU0KSB7XG4gICAgcmV0dXJuIHRoaXMucGVla0FoZWFkKDAsIGUxLCBlMiwgZTMsIGU0KTtcbiAgfSxcbiAgcGVla0FoZWFkOiBmdW5jdGlvbihpLCBlMSwgZTIsIGUzLCBlNCkge1xuICAgIGlmICh0aGlzLnRva2Vucy5sZW5ndGggPiBpKSB7XG4gICAgICB2YXIgdG9rZW4gPSB0aGlzLnRva2Vuc1tpXTtcbiAgICAgIHZhciB0ID0gdG9rZW4udGV4dDtcbiAgICAgIGlmICh0ID09PSBlMSB8fCB0ID09PSBlMiB8fCB0ID09PSBlMyB8fCB0ID09PSBlNCB8fFxuICAgICAgICAgICghZTEgJiYgIWUyICYmICFlMyAmJiAhZTQpKSB7XG4gICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIGV4cGVjdDogZnVuY3Rpb24oZTEsIGUyLCBlMywgZTQpIHtcbiAgICB2YXIgdG9rZW4gPSB0aGlzLnBlZWsoZTEsIGUyLCBlMywgZTQpO1xuICAgIGlmICh0b2tlbikge1xuICAgICAgdGhpcy50b2tlbnMuc2hpZnQoKTtcbiAgICAgIHJldHVybiB0b2tlbjtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIGNvbnN1bWU6IGZ1bmN0aW9uKGUxKSB7XG4gICAgaWYgKHRoaXMudG9rZW5zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgJHBhcnNlTWluRXJyKCd1ZW9lJywgJ1VuZXhwZWN0ZWQgZW5kIG9mIGV4cHJlc3Npb246IHswfScsIHRoaXMudGV4dCk7XG4gICAgfVxuXG4gICAgdmFyIHRva2VuID0gdGhpcy5leHBlY3QoZTEpO1xuICAgIGlmICghdG9rZW4pIHtcbiAgICAgIHRoaXMudGhyb3dFcnJvcignaXMgdW5leHBlY3RlZCwgZXhwZWN0aW5nIFsnICsgZTEgKyAnXScsIHRoaXMucGVlaygpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRva2VuO1xuICB9LFxuXG4gIHVuYXJ5Rm46IGZ1bmN0aW9uKG9wLCByaWdodCkge1xuICAgIHZhciBmbiA9IE9QRVJBVE9SU1tvcF07XG4gICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbiAkcGFyc2VVbmFyeUZuKHNlbGYsIGxvY2Fscykge1xuICAgICAgcmV0dXJuIGZuKHNlbGYsIGxvY2FscywgcmlnaHQpO1xuICAgIH0sIHtcbiAgICAgIGNvbnN0YW50OnJpZ2h0LmNvbnN0YW50LFxuICAgICAgaW5wdXRzOiBbcmlnaHRdXG4gICAgfSk7XG4gIH0sXG5cbiAgYmluYXJ5Rm46IGZ1bmN0aW9uKGxlZnQsIG9wLCByaWdodCwgaXNCcmFuY2hpbmcpIHtcbiAgICB2YXIgZm4gPSBPUEVSQVRPUlNbb3BdO1xuICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24gJHBhcnNlQmluYXJ5Rm4oc2VsZiwgbG9jYWxzKSB7XG4gICAgICByZXR1cm4gZm4oc2VsZiwgbG9jYWxzLCBsZWZ0LCByaWdodCk7XG4gICAgfSwge1xuICAgICAgY29uc3RhbnQ6IGxlZnQuY29uc3RhbnQgJiYgcmlnaHQuY29uc3RhbnQsXG4gICAgICBpbnB1dHM6ICFpc0JyYW5jaGluZyAmJiBbbGVmdCwgcmlnaHRdXG4gICAgfSk7XG4gIH0sXG5cbiAgaWRlbnRpZmllcjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGlkID0gdGhpcy5jb25zdW1lKCkudGV4dDtcblxuICAgIC8vQ29udGludWUgcmVhZGluZyBlYWNoIGAuaWRlbnRpZmllcmAgdW5sZXNzIGl0IGlzIGEgbWV0aG9kIGludm9jYXRpb25cbiAgICB3aGlsZSAodGhpcy5wZWVrKCcuJykgJiYgdGhpcy5wZWVrQWhlYWQoMSkuaWRlbnRpZmllciAmJiAhdGhpcy5wZWVrQWhlYWQoMiwgJygnKSkge1xuICAgICAgaWQgKz0gdGhpcy5jb25zdW1lKCkudGV4dCArIHRoaXMuY29uc3VtZSgpLnRleHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdldHRlckZuKGlkLCB0aGlzLm9wdGlvbnMsIHRoaXMudGV4dCk7XG4gIH0sXG5cbiAgY29uc3RhbnQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXMuY29uc3VtZSgpLnZhbHVlO1xuXG4gICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbiAkcGFyc2VDb25zdGFudCgpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LCB7XG4gICAgICBjb25zdGFudDogdHJ1ZSxcbiAgICAgIGxpdGVyYWw6IHRydWVcbiAgICB9KTtcbiAgfSxcblxuICBzdGF0ZW1lbnRzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RhdGVtZW50cyA9IFtdO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBpZiAodGhpcy50b2tlbnMubGVuZ3RoID4gMCAmJiAhdGhpcy5wZWVrKCd9JywgJyknLCAnOycsICddJykpXG4gICAgICAgIHN0YXRlbWVudHMucHVzaCh0aGlzLmZpbHRlckNoYWluKCkpO1xuICAgICAgaWYgKCF0aGlzLmV4cGVjdCgnOycpKSB7XG4gICAgICAgIC8vIG9wdGltaXplIGZvciB0aGUgY29tbW9uIGNhc2Ugd2hlcmUgdGhlcmUgaXMgb25seSBvbmUgc3RhdGVtZW50LlxuICAgICAgICAvLyBUT0RPKHNpemUpOiBtYXliZSB3ZSBzaG91bGQgbm90IHN1cHBvcnQgbXVsdGlwbGUgc3RhdGVtZW50cz9cbiAgICAgICAgcmV0dXJuIChzdGF0ZW1lbnRzLmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICAgID8gc3RhdGVtZW50c1swXVxuICAgICAgICAgICAgOiBmdW5jdGlvbiAkcGFyc2VTdGF0ZW1lbnRzKHNlbGYsIGxvY2Fscykge1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBzdGF0ZW1lbnRzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgIHZhbHVlID0gc3RhdGVtZW50c1tpXShzZWxmLCBsb2NhbHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGZpbHRlckNoYWluOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVmdCA9IHRoaXMuZXhwcmVzc2lvbigpO1xuICAgIHZhciB0b2tlbjtcbiAgICB3aGlsZSAoKHRva2VuID0gdGhpcy5leHBlY3QoJ3wnKSkpIHtcbiAgICAgIGxlZnQgPSB0aGlzLmZpbHRlcihsZWZ0KTtcbiAgICB9XG4gICAgcmV0dXJuIGxlZnQ7XG4gIH0sXG5cbiAgZmlsdGVyOiBmdW5jdGlvbihpbnB1dEZuKSB7XG4gICAgdmFyIGZuID0gdGhpcy4kZmlsdGVyKHRoaXMuY29uc3VtZSgpLnRleHQpO1xuICAgIHZhciBhcmdzRm47XG4gICAgdmFyIGFyZ3M7XG5cbiAgICBpZiAodGhpcy5wZWVrKCc6JykpIHtcbiAgICAgIGFyZ3NGbiA9IFtdO1xuICAgICAgYXJncyA9IFtdOyAvLyB3ZSBjYW4gc2FmZWx5IHJldXNlIHRoZSBhcnJheVxuICAgICAgd2hpbGUgKHRoaXMuZXhwZWN0KCc6JykpIHtcbiAgICAgICAgYXJnc0ZuLnB1c2godGhpcy5leHByZXNzaW9uKCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBpbnB1dHMgPSBbaW5wdXRGbl0uY29uY2F0KGFyZ3NGbiB8fCBbXSk7XG5cbiAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uICRwYXJzZUZpbHRlcihzZWxmLCBsb2NhbHMpIHtcbiAgICAgIHZhciBpbnB1dCA9IGlucHV0Rm4oc2VsZiwgbG9jYWxzKTtcbiAgICAgIGlmIChhcmdzKSB7XG4gICAgICAgIGFyZ3NbMF0gPSBpbnB1dDtcblxuICAgICAgICB2YXIgaSA9IGFyZ3NGbi5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICBhcmdzW2kgKyAxXSA9IGFyZ3NGbltpXShzZWxmLCBsb2NhbHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmbihpbnB1dCk7XG4gICAgfSwge1xuICAgICAgY29uc3RhbnQ6ICFmbi4kc3RhdGVmdWwgJiYgaW5wdXRzLmV2ZXJ5KGlzQ29uc3RhbnQpLFxuICAgICAgaW5wdXRzOiAhZm4uJHN0YXRlZnVsICYmIGlucHV0c1xuICAgIH0pO1xuICB9LFxuXG4gIGV4cHJlc3Npb246IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmFzc2lnbm1lbnQoKTtcbiAgfSxcblxuICBhc3NpZ25tZW50OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVmdCA9IHRoaXMudGVybmFyeSgpO1xuICAgIHZhciByaWdodDtcbiAgICB2YXIgdG9rZW47XG4gICAgaWYgKCh0b2tlbiA9IHRoaXMuZXhwZWN0KCc9JykpKSB7XG4gICAgICBpZiAoIWxlZnQuYXNzaWduKSB7XG4gICAgICAgIHRoaXMudGhyb3dFcnJvcignaW1wbGllcyBhc3NpZ25tZW50IGJ1dCBbJyArXG4gICAgICAgICAgICB0aGlzLnRleHQuc3Vic3RyaW5nKDAsIHRva2VuLmluZGV4KSArICddIGNhbiBub3QgYmUgYXNzaWduZWQgdG8nLCB0b2tlbik7XG4gICAgICB9XG4gICAgICByaWdodCA9IHRoaXMudGVybmFyeSgpO1xuICAgICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbiAkcGFyc2VBc3NpZ25tZW50KHNjb3BlLCBsb2NhbHMpIHtcbiAgICAgICAgcmV0dXJuIGxlZnQuYXNzaWduKHNjb3BlLCByaWdodChzY29wZSwgbG9jYWxzKSwgbG9jYWxzKTtcbiAgICAgIH0sIHtcbiAgICAgICAgaW5wdXRzOiBbbGVmdCwgcmlnaHRdXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGxlZnQ7XG4gIH0sXG5cbiAgdGVybmFyeTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxlZnQgPSB0aGlzLmxvZ2ljYWxPUigpO1xuICAgIHZhciBtaWRkbGU7XG4gICAgdmFyIHRva2VuO1xuICAgIGlmICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnPycpKSkge1xuICAgICAgbWlkZGxlID0gdGhpcy5hc3NpZ25tZW50KCk7XG4gICAgICBpZiAodGhpcy5jb25zdW1lKCc6JykpIHtcbiAgICAgICAgdmFyIHJpZ2h0ID0gdGhpcy5hc3NpZ25tZW50KCk7XG5cbiAgICAgICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbiAkcGFyc2VUZXJuYXJ5KHNlbGYsIGxvY2Fscykge1xuICAgICAgICAgIHJldHVybiBsZWZ0KHNlbGYsIGxvY2FscykgPyBtaWRkbGUoc2VsZiwgbG9jYWxzKSA6IHJpZ2h0KHNlbGYsIGxvY2Fscyk7XG4gICAgICAgIH0sIHtcbiAgICAgICAgICBjb25zdGFudDogbGVmdC5jb25zdGFudCAmJiBtaWRkbGUuY29uc3RhbnQgJiYgcmlnaHQuY29uc3RhbnRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGxlZnQ7XG4gIH0sXG5cbiAgbG9naWNhbE9SOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVmdCA9IHRoaXMubG9naWNhbEFORCgpO1xuICAgIHZhciB0b2tlbjtcbiAgICB3aGlsZSAoKHRva2VuID0gdGhpcy5leHBlY3QoJ3x8JykpKSB7XG4gICAgICBsZWZ0ID0gdGhpcy5iaW5hcnlGbihsZWZ0LCB0b2tlbi50ZXh0LCB0aGlzLmxvZ2ljYWxBTkQoKSwgdHJ1ZSk7XG4gICAgfVxuICAgIHJldHVybiBsZWZ0O1xuICB9LFxuXG4gIGxvZ2ljYWxBTkQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZWZ0ID0gdGhpcy5lcXVhbGl0eSgpO1xuICAgIHZhciB0b2tlbjtcbiAgICB3aGlsZSAoKHRva2VuID0gdGhpcy5leHBlY3QoJyYmJykpKSB7XG4gICAgICBsZWZ0ID0gdGhpcy5iaW5hcnlGbihsZWZ0LCB0b2tlbi50ZXh0LCB0aGlzLmVxdWFsaXR5KCksIHRydWUpO1xuICAgIH1cbiAgICByZXR1cm4gbGVmdDtcbiAgfSxcblxuICBlcXVhbGl0eTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxlZnQgPSB0aGlzLnJlbGF0aW9uYWwoKTtcbiAgICB2YXIgdG9rZW47XG4gICAgd2hpbGUgKCh0b2tlbiA9IHRoaXMuZXhwZWN0KCc9PScsJyE9JywnPT09JywnIT09JykpKSB7XG4gICAgICBsZWZ0ID0gdGhpcy5iaW5hcnlGbihsZWZ0LCB0b2tlbi50ZXh0LCB0aGlzLnJlbGF0aW9uYWwoKSk7XG4gICAgfVxuICAgIHJldHVybiBsZWZ0O1xuICB9LFxuXG4gIHJlbGF0aW9uYWw6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZWZ0ID0gdGhpcy5hZGRpdGl2ZSgpO1xuICAgIHZhciB0b2tlbjtcbiAgICB3aGlsZSAoKHRva2VuID0gdGhpcy5leHBlY3QoJzwnLCAnPicsICc8PScsICc+PScpKSkge1xuICAgICAgbGVmdCA9IHRoaXMuYmluYXJ5Rm4obGVmdCwgdG9rZW4udGV4dCwgdGhpcy5hZGRpdGl2ZSgpKTtcbiAgICB9XG4gICAgcmV0dXJuIGxlZnQ7XG4gIH0sXG5cbiAgYWRkaXRpdmU6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZWZ0ID0gdGhpcy5tdWx0aXBsaWNhdGl2ZSgpO1xuICAgIHZhciB0b2tlbjtcbiAgICB3aGlsZSAoKHRva2VuID0gdGhpcy5leHBlY3QoJysnLCctJykpKSB7XG4gICAgICBsZWZ0ID0gdGhpcy5iaW5hcnlGbihsZWZ0LCB0b2tlbi50ZXh0LCB0aGlzLm11bHRpcGxpY2F0aXZlKCkpO1xuICAgIH1cbiAgICByZXR1cm4gbGVmdDtcbiAgfSxcblxuICBtdWx0aXBsaWNhdGl2ZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxlZnQgPSB0aGlzLnVuYXJ5KCk7XG4gICAgdmFyIHRva2VuO1xuICAgIHdoaWxlICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnKicsJy8nLCclJykpKSB7XG4gICAgICBsZWZ0ID0gdGhpcy5iaW5hcnlGbihsZWZ0LCB0b2tlbi50ZXh0LCB0aGlzLnVuYXJ5KCkpO1xuICAgIH1cbiAgICByZXR1cm4gbGVmdDtcbiAgfSxcblxuICB1bmFyeTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRva2VuO1xuICAgIGlmICh0aGlzLmV4cGVjdCgnKycpKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcmltYXJ5KCk7XG4gICAgfSBlbHNlIGlmICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnLScpKSkge1xuICAgICAgcmV0dXJuIHRoaXMuYmluYXJ5Rm4oUGFyc2VyLlpFUk8sIHRva2VuLnRleHQsIHRoaXMudW5hcnkoKSk7XG4gICAgfSBlbHNlIGlmICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnIScpKSkge1xuICAgICAgcmV0dXJuIHRoaXMudW5hcnlGbih0b2tlbi50ZXh0LCB0aGlzLnVuYXJ5KCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5wcmltYXJ5KCk7XG4gICAgfVxuICB9LFxuXG4gIGZpZWxkQWNjZXNzOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIgZ2V0dGVyID0gdGhpcy5pZGVudGlmaWVyKCk7XG5cbiAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uICRwYXJzZUZpZWxkQWNjZXNzKHNjb3BlLCBsb2NhbHMsIHNlbGYpIHtcbiAgICAgIHZhciBvID0gc2VsZiB8fCBvYmplY3Qoc2NvcGUsIGxvY2Fscyk7XG4gICAgICByZXR1cm4gKG8gPT0gbnVsbCkgPyB1bmRlZmluZWQgOiBnZXR0ZXIobyk7XG4gICAgfSwge1xuICAgICAgYXNzaWduOiBmdW5jdGlvbihzY29wZSwgdmFsdWUsIGxvY2Fscykge1xuICAgICAgICB2YXIgbyA9IG9iamVjdChzY29wZSwgbG9jYWxzKTtcbiAgICAgICAgaWYgKCFvKSBvYmplY3QuYXNzaWduKHNjb3BlLCBvID0ge30sIGxvY2Fscyk7XG4gICAgICAgIHJldHVybiBnZXR0ZXIuYXNzaWduKG8sIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICBvYmplY3RJbmRleDogZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIGV4cHJlc3Npb24gPSB0aGlzLnRleHQ7XG5cbiAgICB2YXIgaW5kZXhGbiA9IHRoaXMuZXhwcmVzc2lvbigpO1xuICAgIHRoaXMuY29uc3VtZSgnXScpO1xuXG4gICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbiAkcGFyc2VPYmplY3RJbmRleChzZWxmLCBsb2NhbHMpIHtcbiAgICAgIHZhciBvID0gb2JqKHNlbGYsIGxvY2FscyksXG4gICAgICAgICAgaSA9IGluZGV4Rm4oc2VsZiwgbG9jYWxzKSxcbiAgICAgICAgICB2O1xuXG4gICAgICBlbnN1cmVTYWZlTWVtYmVyTmFtZShpLCBleHByZXNzaW9uKTtcbiAgICAgIGlmICghbykgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIHYgPSBlbnN1cmVTYWZlT2JqZWN0KG9baV0sIGV4cHJlc3Npb24pO1xuICAgICAgcmV0dXJuIHY7XG4gICAgfSwge1xuICAgICAgYXNzaWduOiBmdW5jdGlvbihzZWxmLCB2YWx1ZSwgbG9jYWxzKSB7XG4gICAgICAgIHZhciBrZXkgPSBlbnN1cmVTYWZlTWVtYmVyTmFtZShpbmRleEZuKHNlbGYsIGxvY2FscyksIGV4cHJlc3Npb24pO1xuICAgICAgICAvLyBwcmV2ZW50IG92ZXJ3cml0aW5nIG9mIEZ1bmN0aW9uLmNvbnN0cnVjdG9yIHdoaWNoIHdvdWxkIGJyZWFrIGVuc3VyZVNhZmVPYmplY3QgY2hlY2tcbiAgICAgICAgdmFyIG8gPSBlbnN1cmVTYWZlT2JqZWN0KG9iaihzZWxmLCBsb2NhbHMpLCBleHByZXNzaW9uKTtcbiAgICAgICAgaWYgKCFvKSBvYmouYXNzaWduKHNlbGYsIG8gPSB7fSwgbG9jYWxzKTtcbiAgICAgICAgcmV0dXJuIG9ba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIGZ1bmN0aW9uQ2FsbDogZnVuY3Rpb24oZm5HZXR0ZXIsIGNvbnRleHRHZXR0ZXIpIHtcbiAgICB2YXIgYXJnc0ZuID0gW107XG4gICAgaWYgKHRoaXMucGVla1Rva2VuKCkudGV4dCAhPT0gJyknKSB7XG4gICAgICBkbyB7XG4gICAgICAgIGFyZ3NGbi5wdXNoKHRoaXMuZXhwcmVzc2lvbigpKTtcbiAgICAgIH0gd2hpbGUgKHRoaXMuZXhwZWN0KCcsJykpO1xuICAgIH1cbiAgICB0aGlzLmNvbnN1bWUoJyknKTtcblxuICAgIHZhciBleHByZXNzaW9uVGV4dCA9IHRoaXMudGV4dDtcbiAgICAvLyB3ZSBjYW4gc2FmZWx5IHJldXNlIHRoZSBhcnJheSBhY3Jvc3MgaW52b2NhdGlvbnNcbiAgICB2YXIgYXJncyA9IGFyZ3NGbi5sZW5ndGggPyBbXSA6IG51bGw7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gJHBhcnNlRnVuY3Rpb25DYWxsKHNjb3BlLCBsb2NhbHMpIHtcbiAgICAgIHZhciBjb250ZXh0ID0gY29udGV4dEdldHRlciA/IGNvbnRleHRHZXR0ZXIoc2NvcGUsIGxvY2FscykgOiBpc0RlZmluZWQoY29udGV4dEdldHRlcikgPyB1bmRlZmluZWQgOiBzY29wZTtcbiAgICAgIHZhciBmbiA9IGZuR2V0dGVyKHNjb3BlLCBsb2NhbHMsIGNvbnRleHQpIHx8IG5vb3A7XG5cbiAgICAgIGlmIChhcmdzKSB7XG4gICAgICAgIHZhciBpID0gYXJnc0ZuLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgIGFyZ3NbaV0gPSBlbnN1cmVTYWZlT2JqZWN0KGFyZ3NGbltpXShzY29wZSwgbG9jYWxzKSwgZXhwcmVzc2lvblRleHQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGVuc3VyZVNhZmVPYmplY3QoY29udGV4dCwgZXhwcmVzc2lvblRleHQpO1xuICAgICAgZW5zdXJlU2FmZUZ1bmN0aW9uKGZuLCBleHByZXNzaW9uVGV4dCk7XG5cbiAgICAgIC8vIElFIGRvZXNuJ3QgaGF2ZSBhcHBseSBmb3Igc29tZSBuYXRpdmUgZnVuY3Rpb25zXG4gICAgICB2YXIgdiA9IGZuLmFwcGx5XG4gICAgICAgICAgICA/IGZuLmFwcGx5KGNvbnRleHQsIGFyZ3MpXG4gICAgICAgICAgICA6IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0pO1xuXG4gICAgICBpZiAoYXJncykge1xuICAgICAgICAvLyBGcmVlLXVwIHRoZSBtZW1vcnkgKGFyZ3VtZW50cyBvZiB0aGUgbGFzdCBmdW5jdGlvbiBjYWxsKS5cbiAgICAgICAgYXJncy5sZW5ndGggPSAwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZW5zdXJlU2FmZU9iamVjdCh2LCBleHByZXNzaW9uVGV4dCk7XG4gICAgICB9O1xuICB9LFxuXG4gIC8vIFRoaXMgaXMgdXNlZCB3aXRoIGpzb24gYXJyYXkgZGVjbGFyYXRpb25cbiAgYXJyYXlEZWNsYXJhdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGVsZW1lbnRGbnMgPSBbXTtcbiAgICBpZiAodGhpcy5wZWVrVG9rZW4oKS50ZXh0ICE9PSAnXScpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKHRoaXMucGVlaygnXScpKSB7XG4gICAgICAgICAgLy8gU3VwcG9ydCB0cmFpbGluZyBjb21tYXMgcGVyIEVTNS4xLlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGVsZW1lbnRGbnMucHVzaCh0aGlzLmV4cHJlc3Npb24oKSk7XG4gICAgICB9IHdoaWxlICh0aGlzLmV4cGVjdCgnLCcpKTtcbiAgICB9XG4gICAgdGhpcy5jb25zdW1lKCddJyk7XG5cbiAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uICRwYXJzZUFycmF5TGl0ZXJhbChzZWxmLCBsb2NhbHMpIHtcbiAgICAgIHZhciBhcnJheSA9IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gZWxlbWVudEZucy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgIGFycmF5LnB1c2goZWxlbWVudEZuc1tpXShzZWxmLCBsb2NhbHMpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9LCB7XG4gICAgICBsaXRlcmFsOiB0cnVlLFxuICAgICAgY29uc3RhbnQ6IGVsZW1lbnRGbnMuZXZlcnkoaXNDb25zdGFudCksXG4gICAgICBpbnB1dHM6IGVsZW1lbnRGbnNcbiAgICB9KTtcbiAgfSxcblxuICBvYmplY3Q6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBrZXlzID0gW10sIHZhbHVlRm5zID0gW107XG4gICAgaWYgKHRoaXMucGVla1Rva2VuKCkudGV4dCAhPT0gJ30nKSB7XG4gICAgICBkbyB7XG4gICAgICAgIGlmICh0aGlzLnBlZWsoJ30nKSkge1xuICAgICAgICAgIC8vIFN1cHBvcnQgdHJhaWxpbmcgY29tbWFzIHBlciBFUzUuMS5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB2YXIgdG9rZW4gPSB0aGlzLmNvbnN1bWUoKTtcbiAgICAgICAgaWYgKHRva2VuLmNvbnN0YW50KSB7XG4gICAgICAgICAga2V5cy5wdXNoKHRva2VuLnZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0b2tlbi5pZGVudGlmaWVyKSB7XG4gICAgICAgICAga2V5cy5wdXNoKHRva2VuLnRleHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMudGhyb3dFcnJvcihcImludmFsaWQga2V5XCIsIHRva2VuKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbnN1bWUoJzonKTtcbiAgICAgICAgdmFsdWVGbnMucHVzaCh0aGlzLmV4cHJlc3Npb24oKSk7XG4gICAgICB9IHdoaWxlICh0aGlzLmV4cGVjdCgnLCcpKTtcbiAgICB9XG4gICAgdGhpcy5jb25zdW1lKCd9Jyk7XG5cbiAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uICRwYXJzZU9iamVjdExpdGVyYWwoc2VsZiwgbG9jYWxzKSB7XG4gICAgICB2YXIgb2JqZWN0ID0ge307XG4gICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSB2YWx1ZUZucy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgIG9iamVjdFtrZXlzW2ldXSA9IHZhbHVlRm5zW2ldKHNlbGYsIGxvY2Fscyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0sIHtcbiAgICAgIGxpdGVyYWw6IHRydWUsXG4gICAgICBjb25zdGFudDogdmFsdWVGbnMuZXZlcnkoaXNDb25zdGFudCksXG4gICAgICBpbnB1dHM6IHZhbHVlRm5zXG4gICAgfSk7XG4gIH1cbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFBhcnNlciBoZWxwZXIgZnVuY3Rpb25zXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5mdW5jdGlvbiBzZXR0ZXIob2JqLCBsb2NhbHMsIHBhdGgsIHNldFZhbHVlLCBmdWxsRXhwKSB7XG4gIGVuc3VyZVNhZmVPYmplY3Qob2JqLCBmdWxsRXhwKTtcbiAgZW5zdXJlU2FmZU9iamVjdChsb2NhbHMsIGZ1bGxFeHApO1xuXG4gIHZhciBlbGVtZW50ID0gcGF0aC5zcGxpdCgnLicpLCBrZXk7XG4gIGZvciAodmFyIGkgPSAwOyBlbGVtZW50Lmxlbmd0aCA+IDE7IGkrKykge1xuICAgIGtleSA9IGVuc3VyZVNhZmVNZW1iZXJOYW1lKGVsZW1lbnQuc2hpZnQoKSwgZnVsbEV4cCk7XG4gICAgdmFyIHByb3BlcnR5T2JqID0gKGkgPT09IDAgJiYgbG9jYWxzICYmIGxvY2Fsc1trZXldKSB8fCBvYmpba2V5XTtcbiAgICBpZiAoIXByb3BlcnR5T2JqKSB7XG4gICAgICBwcm9wZXJ0eU9iaiA9IHt9O1xuICAgICAgb2JqW2tleV0gPSBwcm9wZXJ0eU9iajtcbiAgICB9XG4gICAgb2JqID0gZW5zdXJlU2FmZU9iamVjdChwcm9wZXJ0eU9iaiwgZnVsbEV4cCk7XG4gIH1cbiAga2V5ID0gZW5zdXJlU2FmZU1lbWJlck5hbWUoZWxlbWVudC5zaGlmdCgpLCBmdWxsRXhwKTtcbiAgZW5zdXJlU2FmZU9iamVjdChvYmpba2V5XSwgZnVsbEV4cCk7XG4gIG9ialtrZXldID0gc2V0VmFsdWU7XG4gIHJldHVybiBzZXRWYWx1ZTtcbn1cblxudmFyIGdldHRlckZuQ2FjaGVEZWZhdWx0ID0gY3JlYXRlTWFwKCk7XG52YXIgZ2V0dGVyRm5DYWNoZUV4cGVuc2l2ZSA9IGNyZWF0ZU1hcCgpO1xuXG5mdW5jdGlvbiBpc1Bvc3NpYmx5RGFuZ2Vyb3VzTWVtYmVyTmFtZShuYW1lKSB7XG4gIHJldHVybiBuYW1lID09ICdjb25zdHJ1Y3Rvcic7XG59XG5cbi8qKlxuICogSW1wbGVtZW50YXRpb24gb2YgdGhlIFwiQmxhY2sgSG9sZVwiIHZhcmlhbnQgZnJvbTpcbiAqIC0gaHR0cDovL2pzcGVyZi5jb20vYW5ndWxhcmpzLXBhcnNlLWdldHRlci80XG4gKiAtIGh0dHA6Ly9qc3BlcmYuY29tL3BhdGgtZXZhbHVhdGlvbi1zaW1wbGlmaWVkLzdcbiAqL1xuZnVuY3Rpb24gY3NwU2FmZUdldHRlckZuKGtleTAsIGtleTEsIGtleTIsIGtleTMsIGtleTQsIGZ1bGxFeHAsIGV4cGVuc2l2ZUNoZWNrcykge1xuICBlbnN1cmVTYWZlTWVtYmVyTmFtZShrZXkwLCBmdWxsRXhwKTtcbiAgZW5zdXJlU2FmZU1lbWJlck5hbWUoa2V5MSwgZnVsbEV4cCk7XG4gIGVuc3VyZVNhZmVNZW1iZXJOYW1lKGtleTIsIGZ1bGxFeHApO1xuICBlbnN1cmVTYWZlTWVtYmVyTmFtZShrZXkzLCBmdWxsRXhwKTtcbiAgZW5zdXJlU2FmZU1lbWJlck5hbWUoa2V5NCwgZnVsbEV4cCk7XG4gIHZhciBlc28gPSBmdW5jdGlvbihvKSB7XG4gICAgcmV0dXJuIGVuc3VyZVNhZmVPYmplY3QobywgZnVsbEV4cCk7XG4gIH07XG4gIHZhciBlc28wID0gKGV4cGVuc2l2ZUNoZWNrcyB8fCBpc1Bvc3NpYmx5RGFuZ2Vyb3VzTWVtYmVyTmFtZShrZXkwKSkgPyBlc28gOiBpZGVudGl0eTtcbiAgdmFyIGVzbzEgPSAoZXhwZW5zaXZlQ2hlY2tzIHx8IGlzUG9zc2libHlEYW5nZXJvdXNNZW1iZXJOYW1lKGtleTEpKSA/IGVzbyA6IGlkZW50aXR5O1xuICB2YXIgZXNvMiA9IChleHBlbnNpdmVDaGVja3MgfHwgaXNQb3NzaWJseURhbmdlcm91c01lbWJlck5hbWUoa2V5MikpID8gZXNvIDogaWRlbnRpdHk7XG4gIHZhciBlc28zID0gKGV4cGVuc2l2ZUNoZWNrcyB8fCBpc1Bvc3NpYmx5RGFuZ2Vyb3VzTWVtYmVyTmFtZShrZXkzKSkgPyBlc28gOiBpZGVudGl0eTtcbiAgdmFyIGVzbzQgPSAoZXhwZW5zaXZlQ2hlY2tzIHx8IGlzUG9zc2libHlEYW5nZXJvdXNNZW1iZXJOYW1lKGtleTQpKSA/IGVzbyA6IGlkZW50aXR5O1xuXG4gIHJldHVybiBmdW5jdGlvbiBjc3BTYWZlR2V0dGVyKHNjb3BlLCBsb2NhbHMpIHtcbiAgICB2YXIgcGF0aFZhbCA9IChsb2NhbHMgJiYgbG9jYWxzLmhhc093blByb3BlcnR5KGtleTApKSA/IGxvY2FscyA6IHNjb3BlO1xuXG4gICAgaWYgKHBhdGhWYWwgPT0gbnVsbCkgcmV0dXJuIHBhdGhWYWw7XG4gICAgcGF0aFZhbCA9IGVzbzAocGF0aFZhbFtrZXkwXSk7XG5cbiAgICBpZiAoIWtleTEpIHJldHVybiBwYXRoVmFsO1xuICAgIGlmIChwYXRoVmFsID09IG51bGwpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgcGF0aFZhbCA9IGVzbzEocGF0aFZhbFtrZXkxXSk7XG5cbiAgICBpZiAoIWtleTIpIHJldHVybiBwYXRoVmFsO1xuICAgIGlmIChwYXRoVmFsID09IG51bGwpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgcGF0aFZhbCA9IGVzbzIocGF0aFZhbFtrZXkyXSk7XG5cbiAgICBpZiAoIWtleTMpIHJldHVybiBwYXRoVmFsO1xuICAgIGlmIChwYXRoVmFsID09IG51bGwpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgcGF0aFZhbCA9IGVzbzMocGF0aFZhbFtrZXkzXSk7XG5cbiAgICBpZiAoIWtleTQpIHJldHVybiBwYXRoVmFsO1xuICAgIGlmIChwYXRoVmFsID09IG51bGwpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgcGF0aFZhbCA9IGVzbzQocGF0aFZhbFtrZXk0XSk7XG5cbiAgICByZXR1cm4gcGF0aFZhbDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0dGVyRm5XaXRoRW5zdXJlU2FmZU9iamVjdChmbiwgZnVsbEV4cHJlc3Npb24pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHMsIGwpIHtcbiAgICByZXR1cm4gZm4ocywgbCwgZW5zdXJlU2FmZU9iamVjdCwgZnVsbEV4cHJlc3Npb24pO1xuICB9O1xufVxuXG5mdW5jdGlvbiBnZXR0ZXJGbihwYXRoLCBvcHRpb25zLCBmdWxsRXhwKSB7XG4gIHZhciBleHBlbnNpdmVDaGVja3MgPSBvcHRpb25zLmV4cGVuc2l2ZUNoZWNrcztcbiAgdmFyIGdldHRlckZuQ2FjaGUgPSAoZXhwZW5zaXZlQ2hlY2tzID8gZ2V0dGVyRm5DYWNoZUV4cGVuc2l2ZSA6IGdldHRlckZuQ2FjaGVEZWZhdWx0KTtcbiAgdmFyIGZuID0gZ2V0dGVyRm5DYWNoZVtwYXRoXTtcbiAgaWYgKGZuKSByZXR1cm4gZm47XG5cblxuICB2YXIgcGF0aEtleXMgPSBwYXRoLnNwbGl0KCcuJyksXG4gICAgICBwYXRoS2V5c0xlbmd0aCA9IHBhdGhLZXlzLmxlbmd0aDtcblxuICAvLyBodHRwOi8vanNwZXJmLmNvbS9hbmd1bGFyanMtcGFyc2UtZ2V0dGVyLzZcbiAgaWYgKG9wdGlvbnMuY3NwKSB7XG4gICAgaWYgKHBhdGhLZXlzTGVuZ3RoIDwgNikge1xuICAgICAgZm4gPSBjc3BTYWZlR2V0dGVyRm4ocGF0aEtleXNbMF0sIHBhdGhLZXlzWzFdLCBwYXRoS2V5c1syXSwgcGF0aEtleXNbM10sIHBhdGhLZXlzWzRdLCBmdWxsRXhwLCBleHBlbnNpdmVDaGVja3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmbiA9IGZ1bmN0aW9uIGNzcFNhZmVHZXR0ZXIoc2NvcGUsIGxvY2Fscykge1xuICAgICAgICB2YXIgaSA9IDAsIHZhbDtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIHZhbCA9IGNzcFNhZmVHZXR0ZXJGbihwYXRoS2V5c1tpKytdLCBwYXRoS2V5c1tpKytdLCBwYXRoS2V5c1tpKytdLCBwYXRoS2V5c1tpKytdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoS2V5c1tpKytdLCBmdWxsRXhwLCBleHBlbnNpdmVDaGVja3MpKHNjb3BlLCBsb2NhbHMpO1xuXG4gICAgICAgICAgbG9jYWxzID0gdW5kZWZpbmVkOyAvLyBjbGVhciBhZnRlciBmaXJzdCBpdGVyYXRpb25cbiAgICAgICAgICBzY29wZSA9IHZhbDtcbiAgICAgICAgfSB3aGlsZSAoaSA8IHBhdGhLZXlzTGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgIH07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBjb2RlID0gJyc7XG4gICAgaWYgKGV4cGVuc2l2ZUNoZWNrcykge1xuICAgICAgY29kZSArPSAncyA9IGVzbyhzLCBmZSk7XFxubCA9IGVzbyhsLCBmZSk7XFxuJztcbiAgICB9XG4gICAgdmFyIG5lZWRzRW5zdXJlU2FmZU9iamVjdCA9IGV4cGVuc2l2ZUNoZWNrcztcbiAgICBmb3JFYWNoKHBhdGhLZXlzLCBmdW5jdGlvbihrZXksIGluZGV4KSB7XG4gICAgICBlbnN1cmVTYWZlTWVtYmVyTmFtZShrZXksIGZ1bGxFeHApO1xuICAgICAgdmFyIGxvb2t1cEpzID0gKGluZGV4XG4gICAgICAgICAgICAgICAgICAgICAgLy8gd2Ugc2ltcGx5IGRlcmVmZXJlbmNlICdzJyBvbiBhbnkgLmRvdCBub3RhdGlvblxuICAgICAgICAgICAgICAgICAgICAgID8gJ3MnXG4gICAgICAgICAgICAgICAgICAgICAgLy8gYnV0IGlmIHdlIGFyZSBmaXJzdCB0aGVuIHdlIGNoZWNrIGxvY2FscyBmaXJzdCwgYW5kIGlmIHNvIHJlYWQgaXQgZmlyc3RcbiAgICAgICAgICAgICAgICAgICAgICA6ICcoKGwmJmwuaGFzT3duUHJvcGVydHkoXCInICsga2V5ICsgJ1wiKSk/bDpzKScpICsgJy4nICsga2V5O1xuICAgICAgaWYgKGV4cGVuc2l2ZUNoZWNrcyB8fCBpc1Bvc3NpYmx5RGFuZ2Vyb3VzTWVtYmVyTmFtZShrZXkpKSB7XG4gICAgICAgIGxvb2t1cEpzID0gJ2VzbygnICsgbG9va3VwSnMgKyAnLCBmZSknO1xuICAgICAgICBuZWVkc0Vuc3VyZVNhZmVPYmplY3QgPSB0cnVlO1xuICAgICAgfVxuICAgICAgY29kZSArPSAnaWYocyA9PSBudWxsKSByZXR1cm4gdW5kZWZpbmVkO1xcbicgK1xuICAgICAgICAgICAgICAncz0nICsgbG9va3VwSnMgKyAnO1xcbic7XG4gICAgfSk7XG4gICAgY29kZSArPSAncmV0dXJuIHM7JztcblxuICAgIC8qIGpzaGludCAtVzA1NCAqL1xuICAgIHZhciBldmFsZWRGbkdldHRlciA9IG5ldyBGdW5jdGlvbigncycsICdsJywgJ2VzbycsICdmZScsIGNvZGUpOyAvLyBzPXNjb3BlLCBsPWxvY2FscywgZXNvPWVuc3VyZVNhZmVPYmplY3RcbiAgICAvKiBqc2hpbnQgK1cwNTQgKi9cbiAgICBldmFsZWRGbkdldHRlci50b1N0cmluZyA9IHZhbHVlRm4oY29kZSk7XG4gICAgaWYgKG5lZWRzRW5zdXJlU2FmZU9iamVjdCkge1xuICAgICAgZXZhbGVkRm5HZXR0ZXIgPSBnZXR0ZXJGbldpdGhFbnN1cmVTYWZlT2JqZWN0KGV2YWxlZEZuR2V0dGVyLCBmdWxsRXhwKTtcbiAgICB9XG4gICAgZm4gPSBldmFsZWRGbkdldHRlcjtcbiAgfVxuXG4gIGZuLnNoYXJlZEdldHRlciA9IHRydWU7XG4gIGZuLmFzc2lnbiA9IGZ1bmN0aW9uKHNlbGYsIHZhbHVlLCBsb2NhbHMpIHtcbiAgICByZXR1cm4gc2V0dGVyKHNlbGYsIGxvY2FscywgcGF0aCwgdmFsdWUsIHBhdGgpO1xuICB9O1xuICBnZXR0ZXJGbkNhY2hlW3BhdGhdID0gZm47XG4gIHJldHVybiBmbjtcbn1cblxudmFyIG9iamVjdFZhbHVlT2YgPSBPYmplY3QucHJvdG90eXBlLnZhbHVlT2Y7XG5cbmZ1bmN0aW9uIGdldFZhbHVlT2YodmFsdWUpIHtcbiAgcmV0dXJuIGlzRnVuY3Rpb24odmFsdWUudmFsdWVPZikgPyB2YWx1ZS52YWx1ZU9mKCkgOiBvYmplY3RWYWx1ZU9mLmNhbGwodmFsdWUpO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkcGFyc2VcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogQ29udmVydHMgQW5ndWxhciB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpbnRvIGEgZnVuY3Rpb24uXG4gKlxuICogYGBganNcbiAqICAgdmFyIGdldHRlciA9ICRwYXJzZSgndXNlci5uYW1lJyk7XG4gKiAgIHZhciBzZXR0ZXIgPSBnZXR0ZXIuYXNzaWduO1xuICogICB2YXIgY29udGV4dCA9IHt1c2VyOntuYW1lOidhbmd1bGFyJ319O1xuICogICB2YXIgbG9jYWxzID0ge3VzZXI6e25hbWU6J2xvY2FsJ319O1xuICpcbiAqICAgZXhwZWN0KGdldHRlcihjb250ZXh0KSkudG9FcXVhbCgnYW5ndWxhcicpO1xuICogICBzZXR0ZXIoY29udGV4dCwgJ25ld1ZhbHVlJyk7XG4gKiAgIGV4cGVjdChjb250ZXh0LnVzZXIubmFtZSkudG9FcXVhbCgnbmV3VmFsdWUnKTtcbiAqICAgZXhwZWN0KGdldHRlcihjb250ZXh0LCBsb2NhbHMpKS50b0VxdWFsKCdsb2NhbCcpO1xuICogYGBgXG4gKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFN0cmluZyBleHByZXNzaW9uIHRvIGNvbXBpbGUuXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oY29udGV4dCwgbG9jYWxzKX0gYSBmdW5jdGlvbiB3aGljaCByZXByZXNlbnRzIHRoZSBjb21waWxlZCBleHByZXNzaW9uOlxuICpcbiAqICAgICogYGNvbnRleHRgIOKAkyBge29iamVjdH1gIOKAkyBhbiBvYmplY3QgYWdhaW5zdCB3aGljaCBhbnkgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlIHN0cmluZ3NcbiAqICAgICAgYXJlIGV2YWx1YXRlZCBhZ2FpbnN0ICh0eXBpY2FsbHkgYSBzY29wZSBvYmplY3QpLlxuICogICAgKiBgbG9jYWxzYCDigJMgYHtvYmplY3Q9fWAg4oCTIGxvY2FsIHZhcmlhYmxlcyBjb250ZXh0IG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlcyBpblxuICogICAgICBgY29udGV4dGAuXG4gKlxuICogICAgVGhlIHJldHVybmVkIGZ1bmN0aW9uIGFsc28gaGFzIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqICAgICAgKiBgbGl0ZXJhbGAg4oCTIGB7Ym9vbGVhbn1gIOKAkyB3aGV0aGVyIHRoZSBleHByZXNzaW9uJ3MgdG9wLWxldmVsIG5vZGUgaXMgYSBKYXZhU2NyaXB0XG4gKiAgICAgICAgbGl0ZXJhbC5cbiAqICAgICAgKiBgY29uc3RhbnRgIOKAkyBge2Jvb2xlYW59YCDigJMgd2hldGhlciB0aGUgZXhwcmVzc2lvbiBpcyBtYWRlIGVudGlyZWx5IG9mIEphdmFTY3JpcHRcbiAqICAgICAgICBjb25zdGFudCBsaXRlcmFscy5cbiAqICAgICAgKiBgYXNzaWduYCDigJMgYHs/ZnVuY3Rpb24oY29udGV4dCwgdmFsdWUpfWAg4oCTIGlmIHRoZSBleHByZXNzaW9uIGlzIGFzc2lnbmFibGUsIHRoaXMgd2lsbCBiZVxuICogICAgICAgIHNldCB0byBhIGZ1bmN0aW9uIHRvIGNoYW5nZSBpdHMgdmFsdWUgb24gdGhlIGdpdmVuIGNvbnRleHQuXG4gKlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRwYXJzZVByb3ZpZGVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBgJHBhcnNlUHJvdmlkZXJgIGNhbiBiZSB1c2VkIGZvciBjb25maWd1cmluZyB0aGUgZGVmYXVsdCBiZWhhdmlvciBvZiB0aGUge0BsaW5rIG5nLiRwYXJzZSAkcGFyc2V9XG4gKiAgc2VydmljZS5cbiAqL1xuZnVuY3Rpb24gJFBhcnNlUHJvdmlkZXIoKSB7XG4gIHZhciBjYWNoZURlZmF1bHQgPSBjcmVhdGVNYXAoKTtcbiAgdmFyIGNhY2hlRXhwZW5zaXZlID0gY3JlYXRlTWFwKCk7XG5cblxuXG4gIHRoaXMuJGdldCA9IFsnJGZpbHRlcicsICckc25pZmZlcicsIGZ1bmN0aW9uKCRmaWx0ZXIsICRzbmlmZmVyKSB7XG4gICAgdmFyICRwYXJzZU9wdGlvbnMgPSB7XG4gICAgICAgICAgY3NwOiAkc25pZmZlci5jc3AsXG4gICAgICAgICAgZXhwZW5zaXZlQ2hlY2tzOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICAkcGFyc2VPcHRpb25zRXhwZW5zaXZlID0ge1xuICAgICAgICAgIGNzcDogJHNuaWZmZXIuY3NwLFxuICAgICAgICAgIGV4cGVuc2l2ZUNoZWNrczogdHJ1ZVxuICAgICAgICB9O1xuXG4gICAgZnVuY3Rpb24gd3JhcFNoYXJlZEV4cHJlc3Npb24oZXhwKSB7XG4gICAgICB2YXIgd3JhcHBlZCA9IGV4cDtcblxuICAgICAgaWYgKGV4cC5zaGFyZWRHZXR0ZXIpIHtcbiAgICAgICAgd3JhcHBlZCA9IGZ1bmN0aW9uICRwYXJzZVdyYXBwZXIoc2VsZiwgbG9jYWxzKSB7XG4gICAgICAgICAgcmV0dXJuIGV4cChzZWxmLCBsb2NhbHMpO1xuICAgICAgICB9O1xuICAgICAgICB3cmFwcGVkLmxpdGVyYWwgPSBleHAubGl0ZXJhbDtcbiAgICAgICAgd3JhcHBlZC5jb25zdGFudCA9IGV4cC5jb25zdGFudDtcbiAgICAgICAgd3JhcHBlZC5hc3NpZ24gPSBleHAuYXNzaWduO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gd3JhcHBlZDtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gJHBhcnNlKGV4cCwgaW50ZXJjZXB0b3JGbiwgZXhwZW5zaXZlQ2hlY2tzKSB7XG4gICAgICB2YXIgcGFyc2VkRXhwcmVzc2lvbiwgb25lVGltZSwgY2FjaGVLZXk7XG5cbiAgICAgIHN3aXRjaCAodHlwZW9mIGV4cCkge1xuICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgIGNhY2hlS2V5ID0gZXhwID0gZXhwLnRyaW0oKTtcblxuICAgICAgICAgIHZhciBjYWNoZSA9IChleHBlbnNpdmVDaGVja3MgPyBjYWNoZUV4cGVuc2l2ZSA6IGNhY2hlRGVmYXVsdCk7XG4gICAgICAgICAgcGFyc2VkRXhwcmVzc2lvbiA9IGNhY2hlW2NhY2hlS2V5XTtcblxuICAgICAgICAgIGlmICghcGFyc2VkRXhwcmVzc2lvbikge1xuICAgICAgICAgICAgaWYgKGV4cC5jaGFyQXQoMCkgPT09ICc6JyAmJiBleHAuY2hhckF0KDEpID09PSAnOicpIHtcbiAgICAgICAgICAgICAgb25lVGltZSA9IHRydWU7XG4gICAgICAgICAgICAgIGV4cCA9IGV4cC5zdWJzdHJpbmcoMik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBwYXJzZU9wdGlvbnMgPSBleHBlbnNpdmVDaGVja3MgPyAkcGFyc2VPcHRpb25zRXhwZW5zaXZlIDogJHBhcnNlT3B0aW9ucztcbiAgICAgICAgICAgIHZhciBsZXhlciA9IG5ldyBMZXhlcihwYXJzZU9wdGlvbnMpO1xuICAgICAgICAgICAgdmFyIHBhcnNlciA9IG5ldyBQYXJzZXIobGV4ZXIsICRmaWx0ZXIsIHBhcnNlT3B0aW9ucyk7XG4gICAgICAgICAgICBwYXJzZWRFeHByZXNzaW9uID0gcGFyc2VyLnBhcnNlKGV4cCk7XG5cbiAgICAgICAgICAgIGlmIChwYXJzZWRFeHByZXNzaW9uLmNvbnN0YW50KSB7XG4gICAgICAgICAgICAgIHBhcnNlZEV4cHJlc3Npb24uJCR3YXRjaERlbGVnYXRlID0gY29uc3RhbnRXYXRjaERlbGVnYXRlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChvbmVUaW1lKSB7XG4gICAgICAgICAgICAgIC8vb25lVGltZSBpcyBub3QgcGFydCBvZiB0aGUgZXhwIHBhc3NlZCB0byB0aGUgUGFyc2VyIHNvIHdlIG1heSBoYXZlIHRvXG4gICAgICAgICAgICAgIC8vd3JhcCB0aGUgcGFyc2VkRXhwcmVzc2lvbiBiZWZvcmUgYWRkaW5nIGEgJCR3YXRjaERlbGVnYXRlXG4gICAgICAgICAgICAgIHBhcnNlZEV4cHJlc3Npb24gPSB3cmFwU2hhcmVkRXhwcmVzc2lvbihwYXJzZWRFeHByZXNzaW9uKTtcbiAgICAgICAgICAgICAgcGFyc2VkRXhwcmVzc2lvbi4kJHdhdGNoRGVsZWdhdGUgPSBwYXJzZWRFeHByZXNzaW9uLmxpdGVyYWwgP1xuICAgICAgICAgICAgICAgIG9uZVRpbWVMaXRlcmFsV2F0Y2hEZWxlZ2F0ZSA6IG9uZVRpbWVXYXRjaERlbGVnYXRlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJzZWRFeHByZXNzaW9uLmlucHV0cykge1xuICAgICAgICAgICAgICBwYXJzZWRFeHByZXNzaW9uLiQkd2F0Y2hEZWxlZ2F0ZSA9IGlucHV0c1dhdGNoRGVsZWdhdGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNhY2hlW2NhY2hlS2V5XSA9IHBhcnNlZEV4cHJlc3Npb247XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBhZGRJbnRlcmNlcHRvcihwYXJzZWRFeHByZXNzaW9uLCBpbnRlcmNlcHRvckZuKTtcblxuICAgICAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICAgICAgcmV0dXJuIGFkZEludGVyY2VwdG9yKGV4cCwgaW50ZXJjZXB0b3JGbik7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gYWRkSW50ZXJjZXB0b3Iobm9vcCwgaW50ZXJjZXB0b3JGbik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGNvbGxlY3RFeHByZXNzaW9uSW5wdXRzKGlucHV0cywgbGlzdCkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gaW5wdXRzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgdmFyIGlucHV0ID0gaW5wdXRzW2ldO1xuICAgICAgICBpZiAoIWlucHV0LmNvbnN0YW50KSB7XG4gICAgICAgICAgaWYgKGlucHV0LmlucHV0cykge1xuICAgICAgICAgICAgY29sbGVjdEV4cHJlc3Npb25JbnB1dHMoaW5wdXQuaW5wdXRzLCBsaXN0KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGxpc3QuaW5kZXhPZihpbnB1dCkgPT09IC0xKSB7IC8vIFRPRE8ocGVyZikgY2FuIHdlIGRvIGJldHRlcj9cbiAgICAgICAgICAgIGxpc3QucHVzaChpbnB1dCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBsaXN0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4cHJlc3Npb25JbnB1dERpcnR5Q2hlY2sobmV3VmFsdWUsIG9sZFZhbHVlT2ZWYWx1ZSkge1xuXG4gICAgICBpZiAobmV3VmFsdWUgPT0gbnVsbCB8fCBvbGRWYWx1ZU9mVmFsdWUgPT0gbnVsbCkgeyAvLyBudWxsL3VuZGVmaW5lZFxuICAgICAgICByZXR1cm4gbmV3VmFsdWUgPT09IG9sZFZhbHVlT2ZWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBuZXdWYWx1ZSA9PT0gJ29iamVjdCcpIHtcblxuICAgICAgICAvLyBhdHRlbXB0IHRvIGNvbnZlcnQgdGhlIHZhbHVlIHRvIGEgcHJpbWl0aXZlIHR5cGVcbiAgICAgICAgLy8gVE9ETyhkb2NzKTogYWRkIGEgbm90ZSB0byBkb2NzIHRoYXQgYnkgaW1wbGVtZW50aW5nIHZhbHVlT2YgZXZlbiBvYmplY3RzIGFuZCBhcnJheXMgY2FuXG4gICAgICAgIC8vICAgICAgICAgICAgIGJlIGNoZWFwbHkgZGlydHktY2hlY2tlZFxuICAgICAgICBuZXdWYWx1ZSA9IGdldFZhbHVlT2YobmV3VmFsdWUpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgbmV3VmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgLy8gb2JqZWN0cy9hcnJheXMgYXJlIG5vdCBzdXBwb3J0ZWQgLSBkZWVwLXdhdGNoaW5nIHRoZW0gd291bGQgYmUgdG9vIGV4cGVuc2l2ZVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGZhbGwtdGhyb3VnaCB0byB0aGUgcHJpbWl0aXZlIGVxdWFsaXR5IGNoZWNrXG4gICAgICB9XG5cbiAgICAgIC8vUHJpbWl0aXZlIG9yIE5hTlxuICAgICAgcmV0dXJuIG5ld1ZhbHVlID09PSBvbGRWYWx1ZU9mVmFsdWUgfHwgKG5ld1ZhbHVlICE9PSBuZXdWYWx1ZSAmJiBvbGRWYWx1ZU9mVmFsdWUgIT09IG9sZFZhbHVlT2ZWYWx1ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5wdXRzV2F0Y2hEZWxlZ2F0ZShzY29wZSwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5LCBwYXJzZWRFeHByZXNzaW9uKSB7XG4gICAgICB2YXIgaW5wdXRFeHByZXNzaW9ucyA9IHBhcnNlZEV4cHJlc3Npb24uJCRpbnB1dHMgfHxcbiAgICAgICAgICAgICAgICAgICAgKHBhcnNlZEV4cHJlc3Npb24uJCRpbnB1dHMgPSBjb2xsZWN0RXhwcmVzc2lvbklucHV0cyhwYXJzZWRFeHByZXNzaW9uLmlucHV0cywgW10pKTtcblxuICAgICAgdmFyIGxhc3RSZXN1bHQ7XG5cbiAgICAgIGlmIChpbnB1dEV4cHJlc3Npb25zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICB2YXIgb2xkSW5wdXRWYWx1ZSA9IGV4cHJlc3Npb25JbnB1dERpcnR5Q2hlY2s7IC8vIGluaXQgdG8gc29tZXRoaW5nIHVuaXF1ZSBzbyB0aGF0IGVxdWFscyBjaGVjayBmYWlsc1xuICAgICAgICBpbnB1dEV4cHJlc3Npb25zID0gaW5wdXRFeHByZXNzaW9uc1swXTtcbiAgICAgICAgcmV0dXJuIHNjb3BlLiR3YXRjaChmdW5jdGlvbiBleHByZXNzaW9uSW5wdXRXYXRjaChzY29wZSkge1xuICAgICAgICAgIHZhciBuZXdJbnB1dFZhbHVlID0gaW5wdXRFeHByZXNzaW9ucyhzY29wZSk7XG4gICAgICAgICAgaWYgKCFleHByZXNzaW9uSW5wdXREaXJ0eUNoZWNrKG5ld0lucHV0VmFsdWUsIG9sZElucHV0VmFsdWUpKSB7XG4gICAgICAgICAgICBsYXN0UmVzdWx0ID0gcGFyc2VkRXhwcmVzc2lvbihzY29wZSk7XG4gICAgICAgICAgICBvbGRJbnB1dFZhbHVlID0gbmV3SW5wdXRWYWx1ZSAmJiBnZXRWYWx1ZU9mKG5ld0lucHV0VmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgICAgICAgfSwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5KTtcbiAgICAgIH1cblxuICAgICAgdmFyIG9sZElucHV0VmFsdWVPZlZhbHVlcyA9IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gaW5wdXRFeHByZXNzaW9ucy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgIG9sZElucHV0VmFsdWVPZlZhbHVlc1tpXSA9IGV4cHJlc3Npb25JbnB1dERpcnR5Q2hlY2s7IC8vIGluaXQgdG8gc29tZXRoaW5nIHVuaXF1ZSBzbyB0aGF0IGVxdWFscyBjaGVjayBmYWlsc1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2NvcGUuJHdhdGNoKGZ1bmN0aW9uIGV4cHJlc3Npb25JbnB1dHNXYXRjaChzY29wZSkge1xuICAgICAgICB2YXIgY2hhbmdlZCA9IGZhbHNlO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGlucHV0RXhwcmVzc2lvbnMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgIHZhciBuZXdJbnB1dFZhbHVlID0gaW5wdXRFeHByZXNzaW9uc1tpXShzY29wZSk7XG4gICAgICAgICAgaWYgKGNoYW5nZWQgfHwgKGNoYW5nZWQgPSAhZXhwcmVzc2lvbklucHV0RGlydHlDaGVjayhuZXdJbnB1dFZhbHVlLCBvbGRJbnB1dFZhbHVlT2ZWYWx1ZXNbaV0pKSkge1xuICAgICAgICAgICAgb2xkSW5wdXRWYWx1ZU9mVmFsdWVzW2ldID0gbmV3SW5wdXRWYWx1ZSAmJiBnZXRWYWx1ZU9mKG5ld0lucHV0VmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICAgICAgbGFzdFJlc3VsdCA9IHBhcnNlZEV4cHJlc3Npb24oc2NvcGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxhc3RSZXN1bHQ7XG4gICAgICB9LCBsaXN0ZW5lciwgb2JqZWN0RXF1YWxpdHkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uZVRpbWVXYXRjaERlbGVnYXRlKHNjb3BlLCBsaXN0ZW5lciwgb2JqZWN0RXF1YWxpdHksIHBhcnNlZEV4cHJlc3Npb24pIHtcbiAgICAgIHZhciB1bndhdGNoLCBsYXN0VmFsdWU7XG4gICAgICByZXR1cm4gdW53YXRjaCA9IHNjb3BlLiR3YXRjaChmdW5jdGlvbiBvbmVUaW1lV2F0Y2goc2NvcGUpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlZEV4cHJlc3Npb24oc2NvcGUpO1xuICAgICAgfSwgZnVuY3Rpb24gb25lVGltZUxpc3RlbmVyKHZhbHVlLCBvbGQsIHNjb3BlKSB7XG4gICAgICAgIGxhc3RWYWx1ZSA9IHZhbHVlO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihsaXN0ZW5lcikpIHtcbiAgICAgICAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgc2NvcGUuJCRwb3N0RGlnZXN0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKGlzRGVmaW5lZChsYXN0VmFsdWUpKSB7XG4gICAgICAgICAgICAgIHVud2F0Y2goKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSwgb2JqZWN0RXF1YWxpdHkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uZVRpbWVMaXRlcmFsV2F0Y2hEZWxlZ2F0ZShzY29wZSwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5LCBwYXJzZWRFeHByZXNzaW9uKSB7XG4gICAgICB2YXIgdW53YXRjaCwgbGFzdFZhbHVlO1xuICAgICAgcmV0dXJuIHVud2F0Y2ggPSBzY29wZS4kd2F0Y2goZnVuY3Rpb24gb25lVGltZVdhdGNoKHNjb3BlKSB7XG4gICAgICAgIHJldHVybiBwYXJzZWRFeHByZXNzaW9uKHNjb3BlKTtcbiAgICAgIH0sIGZ1bmN0aW9uIG9uZVRpbWVMaXN0ZW5lcih2YWx1ZSwgb2xkLCBzY29wZSkge1xuICAgICAgICBsYXN0VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24obGlzdGVuZXIpKSB7XG4gICAgICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCB2YWx1ZSwgb2xkLCBzY29wZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQWxsRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICBzY29wZS4kJHBvc3REaWdlc3QoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoaXNBbGxEZWZpbmVkKGxhc3RWYWx1ZSkpIHVud2F0Y2goKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSwgb2JqZWN0RXF1YWxpdHkpO1xuXG4gICAgICBmdW5jdGlvbiBpc0FsbERlZmluZWQodmFsdWUpIHtcbiAgICAgICAgdmFyIGFsbERlZmluZWQgPSB0cnVlO1xuICAgICAgICBmb3JFYWNoKHZhbHVlLCBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICBpZiAoIWlzRGVmaW5lZCh2YWwpKSBhbGxEZWZpbmVkID0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gYWxsRGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25zdGFudFdhdGNoRGVsZWdhdGUoc2NvcGUsIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSwgcGFyc2VkRXhwcmVzc2lvbikge1xuICAgICAgdmFyIHVud2F0Y2g7XG4gICAgICByZXR1cm4gdW53YXRjaCA9IHNjb3BlLiR3YXRjaChmdW5jdGlvbiBjb25zdGFudFdhdGNoKHNjb3BlKSB7XG4gICAgICAgIHJldHVybiBwYXJzZWRFeHByZXNzaW9uKHNjb3BlKTtcbiAgICAgIH0sIGZ1bmN0aW9uIGNvbnN0YW50TGlzdGVuZXIodmFsdWUsIG9sZCwgc2NvcGUpIHtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24obGlzdGVuZXIpKSB7XG4gICAgICAgICAgbGlzdGVuZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICB1bndhdGNoKCk7XG4gICAgICB9LCBvYmplY3RFcXVhbGl0eSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkSW50ZXJjZXB0b3IocGFyc2VkRXhwcmVzc2lvbiwgaW50ZXJjZXB0b3JGbikge1xuICAgICAgaWYgKCFpbnRlcmNlcHRvckZuKSByZXR1cm4gcGFyc2VkRXhwcmVzc2lvbjtcbiAgICAgIHZhciB3YXRjaERlbGVnYXRlID0gcGFyc2VkRXhwcmVzc2lvbi4kJHdhdGNoRGVsZWdhdGU7XG5cbiAgICAgIHZhciByZWd1bGFyV2F0Y2ggPVxuICAgICAgICAgIHdhdGNoRGVsZWdhdGUgIT09IG9uZVRpbWVMaXRlcmFsV2F0Y2hEZWxlZ2F0ZSAmJlxuICAgICAgICAgIHdhdGNoRGVsZWdhdGUgIT09IG9uZVRpbWVXYXRjaERlbGVnYXRlO1xuXG4gICAgICB2YXIgZm4gPSByZWd1bGFyV2F0Y2ggPyBmdW5jdGlvbiByZWd1bGFySW50ZXJjZXB0ZWRFeHByZXNzaW9uKHNjb3BlLCBsb2NhbHMpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gcGFyc2VkRXhwcmVzc2lvbihzY29wZSwgbG9jYWxzKTtcbiAgICAgICAgcmV0dXJuIGludGVyY2VwdG9yRm4odmFsdWUsIHNjb3BlLCBsb2NhbHMpO1xuICAgICAgfSA6IGZ1bmN0aW9uIG9uZVRpbWVJbnRlcmNlcHRlZEV4cHJlc3Npb24oc2NvcGUsIGxvY2Fscykge1xuICAgICAgICB2YXIgdmFsdWUgPSBwYXJzZWRFeHByZXNzaW9uKHNjb3BlLCBsb2NhbHMpO1xuICAgICAgICB2YXIgcmVzdWx0ID0gaW50ZXJjZXB0b3JGbih2YWx1ZSwgc2NvcGUsIGxvY2Fscyk7XG4gICAgICAgIC8vIHdlIG9ubHkgcmV0dXJuIHRoZSBpbnRlcmNlcHRvcidzIHJlc3VsdCBpZiB0aGVcbiAgICAgICAgLy8gaW5pdGlhbCB2YWx1ZSBpcyBkZWZpbmVkIChmb3IgYmluZC1vbmNlKVxuICAgICAgICByZXR1cm4gaXNEZWZpbmVkKHZhbHVlKSA/IHJlc3VsdCA6IHZhbHVlO1xuICAgICAgfTtcblxuICAgICAgLy8gUHJvcGFnYXRlICQkd2F0Y2hEZWxlZ2F0ZXMgb3RoZXIgdGhlbiBpbnB1dHNXYXRjaERlbGVnYXRlXG4gICAgICBpZiAocGFyc2VkRXhwcmVzc2lvbi4kJHdhdGNoRGVsZWdhdGUgJiZcbiAgICAgICAgICBwYXJzZWRFeHByZXNzaW9uLiQkd2F0Y2hEZWxlZ2F0ZSAhPT0gaW5wdXRzV2F0Y2hEZWxlZ2F0ZSkge1xuICAgICAgICBmbi4kJHdhdGNoRGVsZWdhdGUgPSBwYXJzZWRFeHByZXNzaW9uLiQkd2F0Y2hEZWxlZ2F0ZTtcbiAgICAgIH0gZWxzZSBpZiAoIWludGVyY2VwdG9yRm4uJHN0YXRlZnVsKSB7XG4gICAgICAgIC8vIElmIHRoZXJlIGlzIGFuIGludGVyY2VwdG9yLCBidXQgbm8gd2F0Y2hEZWxlZ2F0ZSB0aGVuIHRyZWF0IHRoZSBpbnRlcmNlcHRvciBsaWtlXG4gICAgICAgIC8vIHdlIHRyZWF0IGZpbHRlcnMgLSBpdCBpcyBhc3N1bWVkIHRvIGJlIGEgcHVyZSBmdW5jdGlvbiB1bmxlc3MgZmxhZ2dlZCB3aXRoICRzdGF0ZWZ1bFxuICAgICAgICBmbi4kJHdhdGNoRGVsZWdhdGUgPSBpbnB1dHNXYXRjaERlbGVnYXRlO1xuICAgICAgICBmbi5pbnB1dHMgPSBbcGFyc2VkRXhwcmVzc2lvbl07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmbjtcbiAgICB9XG4gIH1dO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkcVxuICogQHJlcXVpcmVzICRyb290U2NvcGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgc2VydmljZSB0aGF0IGhlbHBzIHlvdSBydW4gZnVuY3Rpb25zIGFzeW5jaHJvbm91c2x5LCBhbmQgdXNlIHRoZWlyIHJldHVybiB2YWx1ZXMgKG9yIGV4Y2VwdGlvbnMpXG4gKiB3aGVuIHRoZXkgYXJlIGRvbmUgcHJvY2Vzc2luZy5cbiAqXG4gKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIHByb21pc2VzL2RlZmVycmVkIG9iamVjdHMgaW5zcGlyZWQgYnlcbiAqIFtLcmlzIEtvd2FsJ3MgUV0oaHR0cHM6Ly9naXRodWIuY29tL2tyaXNrb3dhbC9xKS5cbiAqXG4gKiAkcSBjYW4gYmUgdXNlZCBpbiB0d28gZmFzaGlvbnMgLS0tIG9uZSB3aGljaCBpcyBtb3JlIHNpbWlsYXIgdG8gS3JpcyBLb3dhbCdzIFEgb3IgalF1ZXJ5J3MgRGVmZXJyZWRcbiAqIGltcGxlbWVudGF0aW9ucywgYW5kIHRoZSBvdGhlciB3aGljaCByZXNlbWJsZXMgRVM2IHByb21pc2VzIHRvIHNvbWUgZGVncmVlLlxuICpcbiAqICMgJHEgY29uc3RydWN0b3JcbiAqXG4gKiBUaGUgc3RyZWFtbGluZWQgRVM2IHN0eWxlIHByb21pc2UgaXMgZXNzZW50aWFsbHkganVzdCB1c2luZyAkcSBhcyBhIGNvbnN0cnVjdG9yIHdoaWNoIHRha2VzIGEgYHJlc29sdmVyYFxuICogZnVuY3Rpb24gYXMgdGhlIGZpcnN0IGFyZ3VtZW50LiBUaGlzIGlzIHNpbWlsYXIgdG8gdGhlIG5hdGl2ZSBQcm9taXNlIGltcGxlbWVudGF0aW9uIGZyb20gRVM2IEhhcm1vbnksXG4gKiBzZWUgW01ETl0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJvbWlzZSkuXG4gKlxuICogV2hpbGUgdGhlIGNvbnN0cnVjdG9yLXN0eWxlIHVzZSBpcyBzdXBwb3J0ZWQsIG5vdCBhbGwgb2YgdGhlIHN1cHBvcnRpbmcgbWV0aG9kcyBmcm9tIEVTNiBIYXJtb255IHByb21pc2VzIGFyZVxuICogYXZhaWxhYmxlIHlldC5cbiAqXG4gKiBJdCBjYW4gYmUgdXNlZCBsaWtlIHNvOlxuICpcbiAqIGBgYGpzXG4gKiAgIC8vIGZvciB0aGUgcHVycG9zZSBvZiB0aGlzIGV4YW1wbGUgbGV0J3MgYXNzdW1lIHRoYXQgdmFyaWFibGVzIGAkcWAgYW5kIGBva1RvR3JlZXRgXG4gKiAgIC8vIGFyZSBhdmFpbGFibGUgaW4gdGhlIGN1cnJlbnQgbGV4aWNhbCBzY29wZSAodGhleSBjb3VsZCBoYXZlIGJlZW4gaW5qZWN0ZWQgb3IgcGFzc2VkIGluKS5cbiAqXG4gKiAgIGZ1bmN0aW9uIGFzeW5jR3JlZXQobmFtZSkge1xuICogICAgIC8vIHBlcmZvcm0gc29tZSBhc3luY2hyb25vdXMgb3BlcmF0aW9uLCByZXNvbHZlIG9yIHJlamVjdCB0aGUgcHJvbWlzZSB3aGVuIGFwcHJvcHJpYXRlLlxuICogICAgIHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAqICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gKiAgICAgICAgIGlmIChva1RvR3JlZXQobmFtZSkpIHtcbiAqICAgICAgICAgICByZXNvbHZlKCdIZWxsbywgJyArIG5hbWUgKyAnIScpO1xuICogICAgICAgICB9IGVsc2Uge1xuICogICAgICAgICAgIHJlamVjdCgnR3JlZXRpbmcgJyArIG5hbWUgKyAnIGlzIG5vdCBhbGxvd2VkLicpO1xuICogICAgICAgICB9XG4gKiAgICAgICB9LCAxMDAwKTtcbiAqICAgICB9KTtcbiAqICAgfVxuICpcbiAqICAgdmFyIHByb21pc2UgPSBhc3luY0dyZWV0KCdSb2JpbiBIb29kJyk7XG4gKiAgIHByb21pc2UudGhlbihmdW5jdGlvbihncmVldGluZykge1xuICogICAgIGFsZXJ0KCdTdWNjZXNzOiAnICsgZ3JlZXRpbmcpO1xuICogICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAqICAgICBhbGVydCgnRmFpbGVkOiAnICsgcmVhc29uKTtcbiAqICAgfSk7XG4gKiBgYGBcbiAqXG4gKiBOb3RlOiBwcm9ncmVzcy9ub3RpZnkgY2FsbGJhY2tzIGFyZSBub3QgY3VycmVudGx5IHN1cHBvcnRlZCB2aWEgdGhlIEVTNi1zdHlsZSBpbnRlcmZhY2UuXG4gKlxuICogSG93ZXZlciwgdGhlIG1vcmUgdHJhZGl0aW9uYWwgQ29tbW9uSlMtc3R5bGUgdXNhZ2UgaXMgc3RpbGwgYXZhaWxhYmxlLCBhbmQgZG9jdW1lbnRlZCBiZWxvdy5cbiAqXG4gKiBbVGhlIENvbW1vbkpTIFByb21pc2UgcHJvcG9zYWxdKGh0dHA6Ly93aWtpLmNvbW1vbmpzLm9yZy93aWtpL1Byb21pc2VzKSBkZXNjcmliZXMgYSBwcm9taXNlIGFzIGFuXG4gKiBpbnRlcmZhY2UgZm9yIGludGVyYWN0aW5nIHdpdGggYW4gb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB0aGUgcmVzdWx0IG9mIGFuIGFjdGlvbiB0aGF0IGlzXG4gKiBwZXJmb3JtZWQgYXN5bmNocm9ub3VzbHksIGFuZCBtYXkgb3IgbWF5IG5vdCBiZSBmaW5pc2hlZCBhdCBhbnkgZ2l2ZW4gcG9pbnQgaW4gdGltZS5cbiAqXG4gKiBGcm9tIHRoZSBwZXJzcGVjdGl2ZSBvZiBkZWFsaW5nIHdpdGggZXJyb3IgaGFuZGxpbmcsIGRlZmVycmVkIGFuZCBwcm9taXNlIEFQSXMgYXJlIHRvXG4gKiBhc3luY2hyb25vdXMgcHJvZ3JhbW1pbmcgd2hhdCBgdHJ5YCwgYGNhdGNoYCBhbmQgYHRocm93YCBrZXl3b3JkcyBhcmUgdG8gc3luY2hyb25vdXMgcHJvZ3JhbW1pbmcuXG4gKlxuICogYGBganNcbiAqICAgLy8gZm9yIHRoZSBwdXJwb3NlIG9mIHRoaXMgZXhhbXBsZSBsZXQncyBhc3N1bWUgdGhhdCB2YXJpYWJsZXMgYCRxYCBhbmQgYG9rVG9HcmVldGBcbiAqICAgLy8gYXJlIGF2YWlsYWJsZSBpbiB0aGUgY3VycmVudCBsZXhpY2FsIHNjb3BlICh0aGV5IGNvdWxkIGhhdmUgYmVlbiBpbmplY3RlZCBvciBwYXNzZWQgaW4pLlxuICpcbiAqICAgZnVuY3Rpb24gYXN5bmNHcmVldChuYW1lKSB7XG4gKiAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAqXG4gKiAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAqICAgICAgIGRlZmVycmVkLm5vdGlmeSgnQWJvdXQgdG8gZ3JlZXQgJyArIG5hbWUgKyAnLicpO1xuICpcbiAqICAgICAgIGlmIChva1RvR3JlZXQobmFtZSkpIHtcbiAqICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgnSGVsbG8sICcgKyBuYW1lICsgJyEnKTtcbiAqICAgICAgIH0gZWxzZSB7XG4gKiAgICAgICAgIGRlZmVycmVkLnJlamVjdCgnR3JlZXRpbmcgJyArIG5hbWUgKyAnIGlzIG5vdCBhbGxvd2VkLicpO1xuICogICAgICAgfVxuICogICAgIH0sIDEwMDApO1xuICpcbiAqICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAqICAgfVxuICpcbiAqICAgdmFyIHByb21pc2UgPSBhc3luY0dyZWV0KCdSb2JpbiBIb29kJyk7XG4gKiAgIHByb21pc2UudGhlbihmdW5jdGlvbihncmVldGluZykge1xuICogICAgIGFsZXJ0KCdTdWNjZXNzOiAnICsgZ3JlZXRpbmcpO1xuICogICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAqICAgICBhbGVydCgnRmFpbGVkOiAnICsgcmVhc29uKTtcbiAqICAgfSwgZnVuY3Rpb24odXBkYXRlKSB7XG4gKiAgICAgYWxlcnQoJ0dvdCBub3RpZmljYXRpb246ICcgKyB1cGRhdGUpO1xuICogICB9KTtcbiAqIGBgYFxuICpcbiAqIEF0IGZpcnN0IGl0IG1pZ2h0IG5vdCBiZSBvYnZpb3VzIHdoeSB0aGlzIGV4dHJhIGNvbXBsZXhpdHkgaXMgd29ydGggdGhlIHRyb3VibGUuIFRoZSBwYXlvZmZcbiAqIGNvbWVzIGluIHRoZSB3YXkgb2YgZ3VhcmFudGVlcyB0aGF0IHByb21pc2UgYW5kIGRlZmVycmVkIEFQSXMgbWFrZSwgc2VlXG4gKiBodHRwczovL2dpdGh1Yi5jb20va3Jpc2tvd2FsL3VuY29tbW9uanMvYmxvYi9tYXN0ZXIvcHJvbWlzZXMvc3BlY2lmaWNhdGlvbi5tZC5cbiAqXG4gKiBBZGRpdGlvbmFsbHkgdGhlIHByb21pc2UgYXBpIGFsbG93cyBmb3IgY29tcG9zaXRpb24gdGhhdCBpcyB2ZXJ5IGhhcmQgdG8gZG8gd2l0aCB0aGVcbiAqIHRyYWRpdGlvbmFsIGNhbGxiYWNrIChbQ1BTXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbnRpbnVhdGlvbi1wYXNzaW5nX3N0eWxlKSkgYXBwcm9hY2guXG4gKiBGb3IgbW9yZSBvbiB0aGlzIHBsZWFzZSBzZWUgdGhlIFtRIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZ2l0aHViLmNvbS9rcmlza293YWwvcSkgZXNwZWNpYWxseSB0aGVcbiAqIHNlY3Rpb24gb24gc2VyaWFsIG9yIHBhcmFsbGVsIGpvaW5pbmcgb2YgcHJvbWlzZXMuXG4gKlxuICogIyBUaGUgRGVmZXJyZWQgQVBJXG4gKlxuICogQSBuZXcgaW5zdGFuY2Ugb2YgZGVmZXJyZWQgaXMgY29uc3RydWN0ZWQgYnkgY2FsbGluZyBgJHEuZGVmZXIoKWAuXG4gKlxuICogVGhlIHB1cnBvc2Ugb2YgdGhlIGRlZmVycmVkIG9iamVjdCBpcyB0byBleHBvc2UgdGhlIGFzc29jaWF0ZWQgUHJvbWlzZSBpbnN0YW5jZSBhcyB3ZWxsIGFzIEFQSXNcbiAqIHRoYXQgY2FuIGJlIHVzZWQgZm9yIHNpZ25hbGluZyB0aGUgc3VjY2Vzc2Z1bCBvciB1bnN1Y2Nlc3NmdWwgY29tcGxldGlvbiwgYXMgd2VsbCBhcyB0aGUgc3RhdHVzXG4gKiBvZiB0aGUgdGFzay5cbiAqXG4gKiAqKk1ldGhvZHMqKlxuICpcbiAqIC0gYHJlc29sdmUodmFsdWUpYCDigJMgcmVzb2x2ZXMgdGhlIGRlcml2ZWQgcHJvbWlzZSB3aXRoIHRoZSBgdmFsdWVgLiBJZiB0aGUgdmFsdWUgaXMgYSByZWplY3Rpb25cbiAqICAgY29uc3RydWN0ZWQgdmlhIGAkcS5yZWplY3RgLCB0aGUgcHJvbWlzZSB3aWxsIGJlIHJlamVjdGVkIGluc3RlYWQuXG4gKiAtIGByZWplY3QocmVhc29uKWAg4oCTIHJlamVjdHMgdGhlIGRlcml2ZWQgcHJvbWlzZSB3aXRoIHRoZSBgcmVhc29uYC4gVGhpcyBpcyBlcXVpdmFsZW50IHRvXG4gKiAgIHJlc29sdmluZyBpdCB3aXRoIGEgcmVqZWN0aW9uIGNvbnN0cnVjdGVkIHZpYSBgJHEucmVqZWN0YC5cbiAqIC0gYG5vdGlmeSh2YWx1ZSlgIC0gcHJvdmlkZXMgdXBkYXRlcyBvbiB0aGUgc3RhdHVzIG9mIHRoZSBwcm9taXNlJ3MgZXhlY3V0aW9uLiBUaGlzIG1heSBiZSBjYWxsZWRcbiAqICAgbXVsdGlwbGUgdGltZXMgYmVmb3JlIHRoZSBwcm9taXNlIGlzIGVpdGhlciByZXNvbHZlZCBvciByZWplY3RlZC5cbiAqXG4gKiAqKlByb3BlcnRpZXMqKlxuICpcbiAqIC0gcHJvbWlzZSDigJMgYHtQcm9taXNlfWAg4oCTIHByb21pc2Ugb2JqZWN0IGFzc29jaWF0ZWQgd2l0aCB0aGlzIGRlZmVycmVkLlxuICpcbiAqXG4gKiAjIFRoZSBQcm9taXNlIEFQSVxuICpcbiAqIEEgbmV3IHByb21pc2UgaW5zdGFuY2UgaXMgY3JlYXRlZCB3aGVuIGEgZGVmZXJyZWQgaW5zdGFuY2UgaXMgY3JlYXRlZCBhbmQgY2FuIGJlIHJldHJpZXZlZCBieVxuICogY2FsbGluZyBgZGVmZXJyZWQucHJvbWlzZWAuXG4gKlxuICogVGhlIHB1cnBvc2Ugb2YgdGhlIHByb21pc2Ugb2JqZWN0IGlzIHRvIGFsbG93IGZvciBpbnRlcmVzdGVkIHBhcnRpZXMgdG8gZ2V0IGFjY2VzcyB0byB0aGUgcmVzdWx0XG4gKiBvZiB0aGUgZGVmZXJyZWQgdGFzayB3aGVuIGl0IGNvbXBsZXRlcy5cbiAqXG4gKiAqKk1ldGhvZHMqKlxuICpcbiAqIC0gYHRoZW4oc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrLCBub3RpZnlDYWxsYmFjaylgIOKAkyByZWdhcmRsZXNzIG9mIHdoZW4gdGhlIHByb21pc2Ugd2FzIG9yXG4gKiAgIHdpbGwgYmUgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQsIGB0aGVuYCBjYWxscyBvbmUgb2YgdGhlIHN1Y2Nlc3Mgb3IgZXJyb3IgY2FsbGJhY2tzIGFzeW5jaHJvbm91c2x5XG4gKiAgIGFzIHNvb24gYXMgdGhlIHJlc3VsdCBpcyBhdmFpbGFibGUuIFRoZSBjYWxsYmFja3MgYXJlIGNhbGxlZCB3aXRoIGEgc2luZ2xlIGFyZ3VtZW50OiB0aGUgcmVzdWx0XG4gKiAgIG9yIHJlamVjdGlvbiByZWFzb24uIEFkZGl0aW9uYWxseSwgdGhlIG5vdGlmeSBjYWxsYmFjayBtYXkgYmUgY2FsbGVkIHplcm8gb3IgbW9yZSB0aW1lcyB0b1xuICogICBwcm92aWRlIGEgcHJvZ3Jlc3MgaW5kaWNhdGlvbiwgYmVmb3JlIHRoZSBwcm9taXNlIGlzIHJlc29sdmVkIG9yIHJlamVjdGVkLlxuICpcbiAqICAgVGhpcyBtZXRob2QgKnJldHVybnMgYSBuZXcgcHJvbWlzZSogd2hpY2ggaXMgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQgdmlhIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlXG4gKiAgIGBzdWNjZXNzQ2FsbGJhY2tgLCBgZXJyb3JDYWxsYmFja2AuIEl0IGFsc28gbm90aWZpZXMgdmlhIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlXG4gKiAgIGBub3RpZnlDYWxsYmFja2AgbWV0aG9kLiBUaGUgcHJvbWlzZSBjYW5ub3QgYmUgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQgZnJvbSB0aGUgbm90aWZ5Q2FsbGJhY2tcbiAqICAgbWV0aG9kLlxuICpcbiAqIC0gYGNhdGNoKGVycm9yQ2FsbGJhY2spYCDigJMgc2hvcnRoYW5kIGZvciBgcHJvbWlzZS50aGVuKG51bGwsIGVycm9yQ2FsbGJhY2spYFxuICpcbiAqIC0gYGZpbmFsbHkoY2FsbGJhY2ssIG5vdGlmeUNhbGxiYWNrKWAg4oCTIGFsbG93cyB5b3UgdG8gb2JzZXJ2ZSBlaXRoZXIgdGhlIGZ1bGZpbGxtZW50IG9yIHJlamVjdGlvbiBvZiBhIHByb21pc2UsXG4gKiAgIGJ1dCB0byBkbyBzbyB3aXRob3V0IG1vZGlmeWluZyB0aGUgZmluYWwgdmFsdWUuIFRoaXMgaXMgdXNlZnVsIHRvIHJlbGVhc2UgcmVzb3VyY2VzIG9yIGRvIHNvbWVcbiAqICAgY2xlYW4tdXAgdGhhdCBuZWVkcyB0byBiZSBkb25lIHdoZXRoZXIgdGhlIHByb21pc2Ugd2FzIHJlamVjdGVkIG9yIHJlc29sdmVkLiBTZWUgdGhlIFtmdWxsXG4gKiAgIHNwZWNpZmljYXRpb25dKGh0dHBzOi8vZ2l0aHViLmNvbS9rcmlza293YWwvcS93aWtpL0FQSS1SZWZlcmVuY2UjcHJvbWlzZWZpbmFsbHljYWxsYmFjaykgZm9yXG4gKiAgIG1vcmUgaW5mb3JtYXRpb24uXG4gKlxuICogIyBDaGFpbmluZyBwcm9taXNlc1xuICpcbiAqIEJlY2F1c2UgY2FsbGluZyB0aGUgYHRoZW5gIG1ldGhvZCBvZiBhIHByb21pc2UgcmV0dXJucyBhIG5ldyBkZXJpdmVkIHByb21pc2UsIGl0IGlzIGVhc2lseVxuICogcG9zc2libGUgdG8gY3JlYXRlIGEgY2hhaW4gb2YgcHJvbWlzZXM6XG4gKlxuICogYGBganNcbiAqICAgcHJvbWlzZUIgPSBwcm9taXNlQS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICogICAgIHJldHVybiByZXN1bHQgKyAxO1xuICogICB9KTtcbiAqXG4gKiAgIC8vIHByb21pc2VCIHdpbGwgYmUgcmVzb2x2ZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgcHJvbWlzZUEgaXMgcmVzb2x2ZWQgYW5kIGl0cyB2YWx1ZVxuICogICAvLyB3aWxsIGJlIHRoZSByZXN1bHQgb2YgcHJvbWlzZUEgaW5jcmVtZW50ZWQgYnkgMVxuICogYGBgXG4gKlxuICogSXQgaXMgcG9zc2libGUgdG8gY3JlYXRlIGNoYWlucyBvZiBhbnkgbGVuZ3RoIGFuZCBzaW5jZSBhIHByb21pc2UgY2FuIGJlIHJlc29sdmVkIHdpdGggYW5vdGhlclxuICogcHJvbWlzZSAod2hpY2ggd2lsbCBkZWZlciBpdHMgcmVzb2x1dGlvbiBmdXJ0aGVyKSwgaXQgaXMgcG9zc2libGUgdG8gcGF1c2UvZGVmZXIgcmVzb2x1dGlvbiBvZlxuICogdGhlIHByb21pc2VzIGF0IGFueSBwb2ludCBpbiB0aGUgY2hhaW4uIFRoaXMgbWFrZXMgaXQgcG9zc2libGUgdG8gaW1wbGVtZW50IHBvd2VyZnVsIEFQSXMgbGlrZVxuICogJGh0dHAncyByZXNwb25zZSBpbnRlcmNlcHRvcnMuXG4gKlxuICpcbiAqICMgRGlmZmVyZW5jZXMgYmV0d2VlbiBLcmlzIEtvd2FsJ3MgUSBhbmQgJHFcbiAqXG4gKiAgVGhlcmUgYXJlIHR3byBtYWluIGRpZmZlcmVuY2VzOlxuICpcbiAqIC0gJHEgaXMgaW50ZWdyYXRlZCB3aXRoIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZX0gU2NvcGUgbW9kZWwgb2JzZXJ2YXRpb25cbiAqICAgbWVjaGFuaXNtIGluIGFuZ3VsYXIsIHdoaWNoIG1lYW5zIGZhc3RlciBwcm9wYWdhdGlvbiBvZiByZXNvbHV0aW9uIG9yIHJlamVjdGlvbiBpbnRvIHlvdXJcbiAqICAgbW9kZWxzIGFuZCBhdm9pZGluZyB1bm5lY2Vzc2FyeSBicm93c2VyIHJlcGFpbnRzLCB3aGljaCB3b3VsZCByZXN1bHQgaW4gZmxpY2tlcmluZyBVSS5cbiAqIC0gUSBoYXMgbWFueSBtb3JlIGZlYXR1cmVzIHRoYW4gJHEsIGJ1dCB0aGF0IGNvbWVzIGF0IGEgY29zdCBvZiBieXRlcy4gJHEgaXMgdGlueSwgYnV0IGNvbnRhaW5zXG4gKiAgIGFsbCB0aGUgaW1wb3J0YW50IGZ1bmN0aW9uYWxpdHkgbmVlZGVkIGZvciBjb21tb24gYXN5bmMgdGFza3MuXG4gKlxuICogICMgVGVzdGluZ1xuICpcbiAqICBgYGBqc1xuICogICAgaXQoJ3Nob3VsZCBzaW11bGF0ZSBwcm9taXNlJywgaW5qZWN0KGZ1bmN0aW9uKCRxLCAkcm9vdFNjb3BlKSB7XG4gKiAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gKiAgICAgIHZhciBwcm9taXNlID0gZGVmZXJyZWQucHJvbWlzZTtcbiAqICAgICAgdmFyIHJlc29sdmVkVmFsdWU7XG4gKlxuICogICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpIHsgcmVzb2x2ZWRWYWx1ZSA9IHZhbHVlOyB9KTtcbiAqICAgICAgZXhwZWN0KHJlc29sdmVkVmFsdWUpLnRvQmVVbmRlZmluZWQoKTtcbiAqXG4gKiAgICAgIC8vIFNpbXVsYXRlIHJlc29sdmluZyBvZiBwcm9taXNlXG4gKiAgICAgIGRlZmVycmVkLnJlc29sdmUoMTIzKTtcbiAqICAgICAgLy8gTm90ZSB0aGF0IHRoZSAndGhlbicgZnVuY3Rpb24gZG9lcyBub3QgZ2V0IGNhbGxlZCBzeW5jaHJvbm91c2x5LlxuICogICAgICAvLyBUaGlzIGlzIGJlY2F1c2Ugd2Ugd2FudCB0aGUgcHJvbWlzZSBBUEkgdG8gYWx3YXlzIGJlIGFzeW5jLCB3aGV0aGVyIG9yIG5vdFxuICogICAgICAvLyBpdCBnb3QgY2FsbGVkIHN5bmNocm9ub3VzbHkgb3IgYXN5bmNocm9ub3VzbHkuXG4gKiAgICAgIGV4cGVjdChyZXNvbHZlZFZhbHVlKS50b0JlVW5kZWZpbmVkKCk7XG4gKlxuICogICAgICAvLyBQcm9wYWdhdGUgcHJvbWlzZSByZXNvbHV0aW9uIHRvICd0aGVuJyBmdW5jdGlvbnMgdXNpbmcgJGFwcGx5KCkuXG4gKiAgICAgICRyb290U2NvcGUuJGFwcGx5KCk7XG4gKiAgICAgIGV4cGVjdChyZXNvbHZlZFZhbHVlKS50b0VxdWFsKDEyMyk7XG4gKiAgICB9KSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbihmdW5jdGlvbiwgZnVuY3Rpb24pfSByZXNvbHZlciBGdW5jdGlvbiB3aGljaCBpcyByZXNwb25zaWJsZSBmb3IgcmVzb2x2aW5nIG9yXG4gKiAgIHJlamVjdGluZyB0aGUgbmV3bHkgY3JlYXRlZCBwcm9taXNlLiBUaGUgZmlyc3QgcGFyYW1ldGVyIGlzIGEgZnVuY3Rpb24gd2hpY2ggcmVzb2x2ZXMgdGhlXG4gKiAgIHByb21pc2UsIHRoZSBzZWNvbmQgcGFyYW1ldGVyIGlzIGEgZnVuY3Rpb24gd2hpY2ggcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIG5ld2x5IGNyZWF0ZWQgcHJvbWlzZS5cbiAqL1xuZnVuY3Rpb24gJFFQcm92aWRlcigpIHtcblxuICB0aGlzLiRnZXQgPSBbJyRyb290U2NvcGUnLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCBmdW5jdGlvbigkcm9vdFNjb3BlLCAkZXhjZXB0aW9uSGFuZGxlcikge1xuICAgIHJldHVybiBxRmFjdG9yeShmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgJHJvb3RTY29wZS4kZXZhbEFzeW5jKGNhbGxiYWNrKTtcbiAgICB9LCAkZXhjZXB0aW9uSGFuZGxlcik7XG4gIH1dO1xufVxuXG5mdW5jdGlvbiAkJFFQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckYnJvd3NlcicsICckZXhjZXB0aW9uSGFuZGxlcicsIGZ1bmN0aW9uKCRicm93c2VyLCAkZXhjZXB0aW9uSGFuZGxlcikge1xuICAgIHJldHVybiBxRmFjdG9yeShmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgJGJyb3dzZXIuZGVmZXIoY2FsbGJhY2spO1xuICAgIH0sICRleGNlcHRpb25IYW5kbGVyKTtcbiAgfV07XG59XG5cbi8qKlxuICogQ29uc3RydWN0cyBhIHByb21pc2UgbWFuYWdlci5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKGZ1bmN0aW9uKX0gbmV4dFRpY2sgRnVuY3Rpb24gZm9yIGV4ZWN1dGluZyBmdW5jdGlvbnMgaW4gdGhlIG5leHQgdHVybi5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oLi4uKil9IGV4Y2VwdGlvbkhhbmRsZXIgRnVuY3Rpb24gaW50byB3aGljaCB1bmV4cGVjdGVkIGV4Y2VwdGlvbnMgYXJlIHBhc3NlZCBmb3JcbiAqICAgICBkZWJ1Z2dpbmcgcHVycG9zZXMuXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBQcm9taXNlIG1hbmFnZXIuXG4gKi9cbmZ1bmN0aW9uIHFGYWN0b3J5KG5leHRUaWNrLCBleGNlcHRpb25IYW5kbGVyKSB7XG4gIHZhciAkcU1pbkVyciA9IG1pbkVycignJHEnLCBUeXBlRXJyb3IpO1xuICBmdW5jdGlvbiBjYWxsT25jZShzZWxmLCByZXNvbHZlRm4sIHJlamVjdEZuKSB7XG4gICAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICAgIGZ1bmN0aW9uIHdyYXAoZm4pIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAoY2FsbGVkKSByZXR1cm47XG4gICAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICAgIGZuLmNhbGwoc2VsZiwgdmFsdWUpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gW3dyYXAocmVzb2x2ZUZuKSwgd3JhcChyZWplY3RGbildO1xuICB9XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmcuJHEjZGVmZXJcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENyZWF0ZXMgYSBgRGVmZXJyZWRgIG9iamVjdCB3aGljaCByZXByZXNlbnRzIGEgdGFzayB3aGljaCB3aWxsIGZpbmlzaCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7RGVmZXJyZWR9IFJldHVybnMgYSBuZXcgaW5zdGFuY2Ugb2YgZGVmZXJyZWQuXG4gICAqL1xuICB2YXIgZGVmZXIgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IERlZmVycmVkKCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gUHJvbWlzZSgpIHtcbiAgICB0aGlzLiQkc3RhdGUgPSB7IHN0YXR1czogMCB9O1xuICB9XG5cbiAgUHJvbWlzZS5wcm90b3R5cGUgPSB7XG4gICAgdGhlbjogZnVuY3Rpb24ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIHByb2dyZXNzQmFjaykge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBEZWZlcnJlZCgpO1xuXG4gICAgICB0aGlzLiQkc3RhdGUucGVuZGluZyA9IHRoaXMuJCRzdGF0ZS5wZW5kaW5nIHx8IFtdO1xuICAgICAgdGhpcy4kJHN0YXRlLnBlbmRpbmcucHVzaChbcmVzdWx0LCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgcHJvZ3Jlc3NCYWNrXSk7XG4gICAgICBpZiAodGhpcy4kJHN0YXRlLnN0YXR1cyA+IDApIHNjaGVkdWxlUHJvY2Vzc1F1ZXVlKHRoaXMuJCRzdGF0ZSk7XG5cbiAgICAgIHJldHVybiByZXN1bHQucHJvbWlzZTtcbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbihudWxsLCBjYWxsYmFjayk7XG4gICAgfSxcblxuICAgIFwiZmluYWxseVwiOiBmdW5jdGlvbihjYWxsYmFjaywgcHJvZ3Jlc3NCYWNrKSB7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVDYWxsYmFjayh2YWx1ZSwgdHJ1ZSwgY2FsbGJhY2spO1xuICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZUNhbGxiYWNrKGVycm9yLCBmYWxzZSwgY2FsbGJhY2spO1xuICAgICAgfSwgcHJvZ3Jlc3NCYWNrKTtcbiAgICB9XG4gIH07XG5cbiAgLy9GYXN0ZXIsIG1vcmUgYmFzaWMgdGhhbiBhbmd1bGFyLmJpbmQgaHR0cDovL2pzcGVyZi5jb20vYW5ndWxhci1iaW5kLXZzLWN1c3RvbS12cy1uYXRpdmVcbiAgZnVuY3Rpb24gc2ltcGxlQmluZChjb250ZXh0LCBmbikge1xuICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgZm4uY2FsbChjb250ZXh0LCB2YWx1ZSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb2Nlc3NRdWV1ZShzdGF0ZSkge1xuICAgIHZhciBmbiwgcHJvbWlzZSwgcGVuZGluZztcblxuICAgIHBlbmRpbmcgPSBzdGF0ZS5wZW5kaW5nO1xuICAgIHN0YXRlLnByb2Nlc3NTY2hlZHVsZWQgPSBmYWxzZTtcbiAgICBzdGF0ZS5wZW5kaW5nID0gdW5kZWZpbmVkO1xuICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHBlbmRpbmcubGVuZ3RoOyBpIDwgaWk7ICsraSkge1xuICAgICAgcHJvbWlzZSA9IHBlbmRpbmdbaV1bMF07XG4gICAgICBmbiA9IHBlbmRpbmdbaV1bc3RhdGUuc3RhdHVzXTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGZuKSkge1xuICAgICAgICAgIHByb21pc2UucmVzb2x2ZShmbihzdGF0ZS52YWx1ZSkpO1xuICAgICAgICB9IGVsc2UgaWYgKHN0YXRlLnN0YXR1cyA9PT0gMSkge1xuICAgICAgICAgIHByb21pc2UucmVzb2x2ZShzdGF0ZS52YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvbWlzZS5yZWplY3Qoc3RhdGUudmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHByb21pc2UucmVqZWN0KGUpO1xuICAgICAgICBleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNjaGVkdWxlUHJvY2Vzc1F1ZXVlKHN0YXRlKSB7XG4gICAgaWYgKHN0YXRlLnByb2Nlc3NTY2hlZHVsZWQgfHwgIXN0YXRlLnBlbmRpbmcpIHJldHVybjtcbiAgICBzdGF0ZS5wcm9jZXNzU2NoZWR1bGVkID0gdHJ1ZTtcbiAgICBuZXh0VGljayhmdW5jdGlvbigpIHsgcHJvY2Vzc1F1ZXVlKHN0YXRlKTsgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBEZWZlcnJlZCgpIHtcbiAgICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZSgpO1xuICAgIC8vTmVjZXNzYXJ5IHRvIHN1cHBvcnQgdW5ib3VuZCBleGVjdXRpb24gOi9cbiAgICB0aGlzLnJlc29sdmUgPSBzaW1wbGVCaW5kKHRoaXMsIHRoaXMucmVzb2x2ZSk7XG4gICAgdGhpcy5yZWplY3QgPSBzaW1wbGVCaW5kKHRoaXMsIHRoaXMucmVqZWN0KTtcbiAgICB0aGlzLm5vdGlmeSA9IHNpbXBsZUJpbmQodGhpcywgdGhpcy5ub3RpZnkpO1xuICB9XG5cbiAgRGVmZXJyZWQucHJvdG90eXBlID0ge1xuICAgIHJlc29sdmU6IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgaWYgKHRoaXMucHJvbWlzZS4kJHN0YXRlLnN0YXR1cykgcmV0dXJuO1xuICAgICAgaWYgKHZhbCA9PT0gdGhpcy5wcm9taXNlKSB7XG4gICAgICAgIHRoaXMuJCRyZWplY3QoJHFNaW5FcnIoXG4gICAgICAgICAgJ3FjeWNsZScsXG4gICAgICAgICAgXCJFeHBlY3RlZCBwcm9taXNlIHRvIGJlIHJlc29sdmVkIHdpdGggdmFsdWUgb3RoZXIgdGhhbiBpdHNlbGYgJ3swfSdcIixcbiAgICAgICAgICB2YWwpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuJCRyZXNvbHZlKHZhbCk7XG4gICAgICB9XG5cbiAgICB9LFxuXG4gICAgJCRyZXNvbHZlOiBmdW5jdGlvbih2YWwpIHtcbiAgICAgIHZhciB0aGVuLCBmbnM7XG5cbiAgICAgIGZucyA9IGNhbGxPbmNlKHRoaXMsIHRoaXMuJCRyZXNvbHZlLCB0aGlzLiQkcmVqZWN0KTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICgoaXNPYmplY3QodmFsKSB8fCBpc0Z1bmN0aW9uKHZhbCkpKSB0aGVuID0gdmFsICYmIHZhbC50aGVuO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGVuKSkge1xuICAgICAgICAgIHRoaXMucHJvbWlzZS4kJHN0YXRlLnN0YXR1cyA9IC0xO1xuICAgICAgICAgIHRoZW4uY2FsbCh2YWwsIGZuc1swXSwgZm5zWzFdLCB0aGlzLm5vdGlmeSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5wcm9taXNlLiQkc3RhdGUudmFsdWUgPSB2YWw7XG4gICAgICAgICAgdGhpcy5wcm9taXNlLiQkc3RhdGUuc3RhdHVzID0gMTtcbiAgICAgICAgICBzY2hlZHVsZVByb2Nlc3NRdWV1ZSh0aGlzLnByb21pc2UuJCRzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgZm5zWzFdKGUpO1xuICAgICAgICBleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICByZWplY3Q6IGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgaWYgKHRoaXMucHJvbWlzZS4kJHN0YXRlLnN0YXR1cykgcmV0dXJuO1xuICAgICAgdGhpcy4kJHJlamVjdChyZWFzb24pO1xuICAgIH0sXG5cbiAgICAkJHJlamVjdDogZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgICB0aGlzLnByb21pc2UuJCRzdGF0ZS52YWx1ZSA9IHJlYXNvbjtcbiAgICAgIHRoaXMucHJvbWlzZS4kJHN0YXRlLnN0YXR1cyA9IDI7XG4gICAgICBzY2hlZHVsZVByb2Nlc3NRdWV1ZSh0aGlzLnByb21pc2UuJCRzdGF0ZSk7XG4gICAgfSxcblxuICAgIG5vdGlmeTogZnVuY3Rpb24ocHJvZ3Jlc3MpIHtcbiAgICAgIHZhciBjYWxsYmFja3MgPSB0aGlzLnByb21pc2UuJCRzdGF0ZS5wZW5kaW5nO1xuXG4gICAgICBpZiAoKHRoaXMucHJvbWlzZS4kJHN0YXRlLnN0YXR1cyA8PSAwKSAmJiBjYWxsYmFja3MgJiYgY2FsbGJhY2tzLmxlbmd0aCkge1xuICAgICAgICBuZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgY2FsbGJhY2ssIHJlc3VsdDtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgcmVzdWx0ID0gY2FsbGJhY2tzW2ldWzBdO1xuICAgICAgICAgICAgY2FsbGJhY2sgPSBjYWxsYmFja3NbaV1bM107XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICByZXN1bHQubm90aWZ5KGlzRnVuY3Rpb24oY2FsbGJhY2spID8gY2FsbGJhY2socHJvZ3Jlc3MpIDogcHJvZ3Jlc3MpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICBleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRxI3JlamVjdFxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ3JlYXRlcyBhIHByb21pc2UgdGhhdCBpcyByZXNvbHZlZCBhcyByZWplY3RlZCB3aXRoIHRoZSBzcGVjaWZpZWQgYHJlYXNvbmAuIFRoaXMgYXBpIHNob3VsZCBiZVxuICAgKiB1c2VkIHRvIGZvcndhcmQgcmVqZWN0aW9uIGluIGEgY2hhaW4gb2YgcHJvbWlzZXMuIElmIHlvdSBhcmUgZGVhbGluZyB3aXRoIHRoZSBsYXN0IHByb21pc2UgaW5cbiAgICogYSBwcm9taXNlIGNoYWluLCB5b3UgZG9uJ3QgbmVlZCB0byB3b3JyeSBhYm91dCBpdC5cbiAgICpcbiAgICogV2hlbiBjb21wYXJpbmcgZGVmZXJyZWRzL3Byb21pc2VzIHRvIHRoZSBmYW1pbGlhciBiZWhhdmlvciBvZiB0cnkvY2F0Y2gvdGhyb3csIHRoaW5rIG9mXG4gICAqIGByZWplY3RgIGFzIHRoZSBgdGhyb3dgIGtleXdvcmQgaW4gSmF2YVNjcmlwdC4gVGhpcyBhbHNvIG1lYW5zIHRoYXQgaWYgeW91IFwiY2F0Y2hcIiBhbiBlcnJvciB2aWFcbiAgICogYSBwcm9taXNlIGVycm9yIGNhbGxiYWNrIGFuZCB5b3Ugd2FudCB0byBmb3J3YXJkIHRoZSBlcnJvciB0byB0aGUgcHJvbWlzZSBkZXJpdmVkIGZyb20gdGhlXG4gICAqIGN1cnJlbnQgcHJvbWlzZSwgeW91IGhhdmUgdG8gXCJyZXRocm93XCIgdGhlIGVycm9yIGJ5IHJldHVybmluZyBhIHJlamVjdGlvbiBjb25zdHJ1Y3RlZCB2aWFcbiAgICogYHJlamVjdGAuXG4gICAqXG4gICAqIGBgYGpzXG4gICAqICAgcHJvbWlzZUIgPSBwcm9taXNlQS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgKiAgICAgLy8gc3VjY2VzczogZG8gc29tZXRoaW5nIGFuZCByZXNvbHZlIHByb21pc2VCXG4gICAqICAgICAvLyAgICAgICAgICB3aXRoIHRoZSBvbGQgb3IgYSBuZXcgcmVzdWx0XG4gICAqICAgICByZXR1cm4gcmVzdWx0O1xuICAgKiAgIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgKiAgICAgLy8gZXJyb3I6IGhhbmRsZSB0aGUgZXJyb3IgaWYgcG9zc2libGUgYW5kXG4gICAqICAgICAvLyAgICAgICAgcmVzb2x2ZSBwcm9taXNlQiB3aXRoIG5ld1Byb21pc2VPclZhbHVlLFxuICAgKiAgICAgLy8gICAgICAgIG90aGVyd2lzZSBmb3J3YXJkIHRoZSByZWplY3Rpb24gdG8gcHJvbWlzZUJcbiAgICogICAgIGlmIChjYW5IYW5kbGUocmVhc29uKSkge1xuICAgKiAgICAgIC8vIGhhbmRsZSB0aGUgZXJyb3IgYW5kIHJlY292ZXJcbiAgICogICAgICByZXR1cm4gbmV3UHJvbWlzZU9yVmFsdWU7XG4gICAqICAgICB9XG4gICAqICAgICByZXR1cm4gJHEucmVqZWN0KHJlYXNvbik7XG4gICAqICAgfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0geyp9IHJlYXNvbiBDb25zdGFudCwgbWVzc2FnZSwgZXhjZXB0aW9uIG9yIGFuIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHJlamVjdGlvbiByZWFzb24uXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHdhcyBhbHJlYWR5IHJlc29sdmVkIGFzIHJlamVjdGVkIHdpdGggdGhlIGByZWFzb25gLlxuICAgKi9cbiAgdmFyIHJlamVjdCA9IGZ1bmN0aW9uKHJlYXNvbikge1xuICAgIHZhciByZXN1bHQgPSBuZXcgRGVmZXJyZWQoKTtcbiAgICByZXN1bHQucmVqZWN0KHJlYXNvbik7XG4gICAgcmV0dXJuIHJlc3VsdC5wcm9taXNlO1xuICB9O1xuXG4gIHZhciBtYWtlUHJvbWlzZSA9IGZ1bmN0aW9uIG1ha2VQcm9taXNlKHZhbHVlLCByZXNvbHZlZCkge1xuICAgIHZhciByZXN1bHQgPSBuZXcgRGVmZXJyZWQoKTtcbiAgICBpZiAocmVzb2x2ZWQpIHtcbiAgICAgIHJlc3VsdC5yZXNvbHZlKHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LnJlamVjdCh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQucHJvbWlzZTtcbiAgfTtcblxuICB2YXIgaGFuZGxlQ2FsbGJhY2sgPSBmdW5jdGlvbiBoYW5kbGVDYWxsYmFjayh2YWx1ZSwgaXNSZXNvbHZlZCwgY2FsbGJhY2spIHtcbiAgICB2YXIgY2FsbGJhY2tPdXRwdXQgPSBudWxsO1xuICAgIHRyeSB7XG4gICAgICBpZiAoaXNGdW5jdGlvbihjYWxsYmFjaykpIGNhbGxiYWNrT3V0cHV0ID0gY2FsbGJhY2soKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gbWFrZVByb21pc2UoZSwgZmFsc2UpO1xuICAgIH1cbiAgICBpZiAoaXNQcm9taXNlTGlrZShjYWxsYmFja091dHB1dCkpIHtcbiAgICAgIHJldHVybiBjYWxsYmFja091dHB1dC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbWFrZVByb21pc2UodmFsdWUsIGlzUmVzb2x2ZWQpO1xuICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIG1ha2VQcm9taXNlKGVycm9yLCBmYWxzZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG1ha2VQcm9taXNlKHZhbHVlLCBpc1Jlc29sdmVkKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJHEjd2hlblxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogV3JhcHMgYW4gb2JqZWN0IHRoYXQgbWlnaHQgYmUgYSB2YWx1ZSBvciBhICgzcmQgcGFydHkpIHRoZW4tYWJsZSBwcm9taXNlIGludG8gYSAkcSBwcm9taXNlLlxuICAgKiBUaGlzIGlzIHVzZWZ1bCB3aGVuIHlvdSBhcmUgZGVhbGluZyB3aXRoIGFuIG9iamVjdCB0aGF0IG1pZ2h0IG9yIG1pZ2h0IG5vdCBiZSBhIHByb21pc2UsIG9yIGlmXG4gICAqIHRoZSBwcm9taXNlIGNvbWVzIGZyb20gYSBzb3VyY2UgdGhhdCBjYW4ndCBiZSB0cnVzdGVkLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIG9yIGEgcHJvbWlzZVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gUmV0dXJucyBhIHByb21pc2Ugb2YgdGhlIHBhc3NlZCB2YWx1ZSBvciBwcm9taXNlXG4gICAqL1xuXG5cbiAgdmFyIHdoZW4gPSBmdW5jdGlvbih2YWx1ZSwgY2FsbGJhY2ssIGVycmJhY2ssIHByb2dyZXNzQmFjaykge1xuICAgIHZhciByZXN1bHQgPSBuZXcgRGVmZXJyZWQoKTtcbiAgICByZXN1bHQucmVzb2x2ZSh2YWx1ZSk7XG4gICAgcmV0dXJuIHJlc3VsdC5wcm9taXNlLnRoZW4oY2FsbGJhY2ssIGVycmJhY2ssIHByb2dyZXNzQmFjayk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJHEjYWxsXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDb21iaW5lcyBtdWx0aXBsZSBwcm9taXNlcyBpbnRvIGEgc2luZ2xlIHByb21pc2UgdGhhdCBpcyByZXNvbHZlZCB3aGVuIGFsbCBvZiB0aGUgaW5wdXRcbiAgICogcHJvbWlzZXMgYXJlIHJlc29sdmVkLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5LjxQcm9taXNlPnxPYmplY3QuPFByb21pc2U+fSBwcm9taXNlcyBBbiBhcnJheSBvciBoYXNoIG9mIHByb21pc2VzLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gUmV0dXJucyBhIHNpbmdsZSBwcm9taXNlIHRoYXQgd2lsbCBiZSByZXNvbHZlZCB3aXRoIGFuIGFycmF5L2hhc2ggb2YgdmFsdWVzLFxuICAgKiAgIGVhY2ggdmFsdWUgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvbWlzZSBhdCB0aGUgc2FtZSBpbmRleC9rZXkgaW4gdGhlIGBwcm9taXNlc2AgYXJyYXkvaGFzaC5cbiAgICogICBJZiBhbnkgb2YgdGhlIHByb21pc2VzIGlzIHJlc29sdmVkIHdpdGggYSByZWplY3Rpb24sIHRoaXMgcmVzdWx0aW5nIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZFxuICAgKiAgIHdpdGggdGhlIHNhbWUgcmVqZWN0aW9uIHZhbHVlLlxuICAgKi9cblxuICBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgICB2YXIgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQoKSxcbiAgICAgICAgY291bnRlciA9IDAsXG4gICAgICAgIHJlc3VsdHMgPSBpc0FycmF5KHByb21pc2VzKSA/IFtdIDoge307XG5cbiAgICBmb3JFYWNoKHByb21pc2VzLCBmdW5jdGlvbihwcm9taXNlLCBrZXkpIHtcbiAgICAgIGNvdW50ZXIrKztcbiAgICAgIHdoZW4ocHJvbWlzZSkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAocmVzdWx0cy5oYXNPd25Qcm9wZXJ0eShrZXkpKSByZXR1cm47XG4gICAgICAgIHJlc3VsdHNba2V5XSA9IHZhbHVlO1xuICAgICAgICBpZiAoISgtLWNvdW50ZXIpKSBkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdHMpO1xuICAgICAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgICAgIGlmIChyZXN1bHRzLmhhc093blByb3BlcnR5KGtleSkpIHJldHVybjtcbiAgICAgICAgZGVmZXJyZWQucmVqZWN0KHJlYXNvbik7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGlmIChjb3VudGVyID09PSAwKSB7XG4gICAgICBkZWZlcnJlZC5yZXNvbHZlKHJlc3VsdHMpO1xuICAgIH1cblxuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICB9XG5cbiAgdmFyICRRID0gZnVuY3Rpb24gUShyZXNvbHZlcikge1xuICAgIGlmICghaXNGdW5jdGlvbihyZXNvbHZlcikpIHtcbiAgICAgIHRocm93ICRxTWluRXJyKCdub3JzbHZyJywgXCJFeHBlY3RlZCByZXNvbHZlckZuLCBnb3QgJ3swfSdcIiwgcmVzb2x2ZXIpO1xuICAgIH1cblxuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBRKSkge1xuICAgICAgLy8gTW9yZSB1c2VmdWwgd2hlbiAkUSBpcyB0aGUgUHJvbWlzZSBpdHNlbGYuXG4gICAgICByZXR1cm4gbmV3IFEocmVzb2x2ZXIpO1xuICAgIH1cblxuICAgIHZhciBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xuXG4gICAgZnVuY3Rpb24gcmVzb2x2ZUZuKHZhbHVlKSB7XG4gICAgICBkZWZlcnJlZC5yZXNvbHZlKHZhbHVlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWplY3RGbihyZWFzb24pIHtcbiAgICAgIGRlZmVycmVkLnJlamVjdChyZWFzb24pO1xuICAgIH1cblxuICAgIHJlc29sdmVyKHJlc29sdmVGbiwgcmVqZWN0Rm4pO1xuXG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gIH07XG5cbiAgJFEuZGVmZXIgPSBkZWZlcjtcbiAgJFEucmVqZWN0ID0gcmVqZWN0O1xuICAkUS53aGVuID0gd2hlbjtcbiAgJFEuYWxsID0gYWxsO1xuXG4gIHJldHVybiAkUTtcbn1cblxuZnVuY3Rpb24gJCRSQUZQcm92aWRlcigpIHsgLy9yQUZcbiAgdGhpcy4kZ2V0ID0gWyckd2luZG93JywgJyR0aW1lb3V0JywgZnVuY3Rpb24oJHdpbmRvdywgJHRpbWVvdXQpIHtcbiAgICB2YXIgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gJHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG5cbiAgICB2YXIgY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSAkd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy53ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR3aW5kb3cud2Via2l0Q2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuXG4gICAgdmFyIHJhZlN1cHBvcnRlZCA9ICEhcmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuICAgIHZhciByYWYgPSByYWZTdXBwb3J0ZWRcbiAgICAgID8gZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICB2YXIgaWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZm4pO1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGlkKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICA6IGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgICAgdmFyIHRpbWVyID0gJHRpbWVvdXQoZm4sIDE2LjY2LCBmYWxzZSk7IC8vIDEwMDAgLyA2MCA9IDE2LjY2NlxuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICR0aW1lb3V0LmNhbmNlbCh0aW1lcik7XG4gICAgICAgICAgfTtcbiAgICAgICAgfTtcblxuICAgIHJhZi5zdXBwb3J0ZWQgPSByYWZTdXBwb3J0ZWQ7XG5cbiAgICByZXR1cm4gcmFmO1xuICB9XTtcbn1cblxuLyoqXG4gKiBERVNJR04gTk9URVNcbiAqXG4gKiBUaGUgZGVzaWduIGRlY2lzaW9ucyBiZWhpbmQgdGhlIHNjb3BlIGFyZSBoZWF2aWx5IGZhdm9yZWQgZm9yIHNwZWVkIGFuZCBtZW1vcnkgY29uc3VtcHRpb24uXG4gKlxuICogVGhlIHR5cGljYWwgdXNlIG9mIHNjb3BlIGlzIHRvIHdhdGNoIHRoZSBleHByZXNzaW9ucywgd2hpY2ggbW9zdCBvZiB0aGUgdGltZSByZXR1cm4gdGhlIHNhbWVcbiAqIHZhbHVlIGFzIGxhc3QgdGltZSBzbyB3ZSBvcHRpbWl6ZSB0aGUgb3BlcmF0aW9uLlxuICpcbiAqIENsb3N1cmVzIGNvbnN0cnVjdGlvbiBpcyBleHBlbnNpdmUgaW4gdGVybXMgb2Ygc3BlZWQgYXMgd2VsbCBhcyBtZW1vcnk6XG4gKiAgIC0gTm8gY2xvc3VyZXMsIGluc3RlYWQgdXNlIHByb3RvdHlwaWNhbCBpbmhlcml0YW5jZSBmb3IgQVBJXG4gKiAgIC0gSW50ZXJuYWwgc3RhdGUgbmVlZHMgdG8gYmUgc3RvcmVkIG9uIHNjb3BlIGRpcmVjdGx5LCB3aGljaCBtZWFucyB0aGF0IHByaXZhdGUgc3RhdGUgaXNcbiAqICAgICBleHBvc2VkIGFzICQkX19fXyBwcm9wZXJ0aWVzXG4gKlxuICogTG9vcCBvcGVyYXRpb25zIGFyZSBvcHRpbWl6ZWQgYnkgdXNpbmcgd2hpbGUoY291bnQtLSkgeyAuLi4gfVxuICogICAtIHRoaXMgbWVhbnMgdGhhdCBpbiBvcmRlciB0byBrZWVwIHRoZSBzYW1lIG9yZGVyIG9mIGV4ZWN1dGlvbiBhcyBhZGRpdGlvbiB3ZSBoYXZlIHRvIGFkZFxuICogICAgIGl0ZW1zIHRvIHRoZSBhcnJheSBhdCB0aGUgYmVnaW5uaW5nICh1bnNoaWZ0KSBpbnN0ZWFkIG9mIGF0IHRoZSBlbmQgKHB1c2gpXG4gKlxuICogQ2hpbGQgc2NvcGVzIGFyZSBjcmVhdGVkIGFuZCByZW1vdmVkIG9mdGVuXG4gKiAgIC0gVXNpbmcgYW4gYXJyYXkgd291bGQgYmUgc2xvdyBzaW5jZSBpbnNlcnRzIGluIG1pZGRsZSBhcmUgZXhwZW5zaXZlIHNvIHdlIHVzZSBsaW5rZWQgbGlzdFxuICpcbiAqIFRoZXJlIGFyZSBmZXcgd2F0Y2hlcyB0aGVuIGEgbG90IG9mIG9ic2VydmVycy4gVGhpcyBpcyB3aHkgeW91IGRvbid0IHdhbnQgdGhlIG9ic2VydmVyIHRvIGJlXG4gKiBpbXBsZW1lbnRlZCBpbiB0aGUgc2FtZSB3YXkgYXMgd2F0Y2guIFdhdGNoIHJlcXVpcmVzIHJldHVybiBvZiBpbml0aWFsaXphdGlvbiBmdW5jdGlvbiB3aGljaFxuICogYXJlIGV4cGVuc2l2ZSB0byBjb25zdHJ1Y3QuXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJHJvb3RTY29wZVByb3ZpZGVyXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBQcm92aWRlciBmb3IgdGhlICRyb290U2NvcGUgc2VydmljZS5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRyb290U2NvcGVQcm92aWRlciNkaWdlc3RUdGxcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFNldHMgdGhlIG51bWJlciBvZiBgJGRpZ2VzdGAgaXRlcmF0aW9ucyB0aGUgc2NvcGUgc2hvdWxkIGF0dGVtcHQgdG8gZXhlY3V0ZSBiZWZvcmUgZ2l2aW5nIHVwIGFuZFxuICogYXNzdW1pbmcgdGhhdCB0aGUgbW9kZWwgaXMgdW5zdGFibGUuXG4gKlxuICogVGhlIGN1cnJlbnQgZGVmYXVsdCBpcyAxMCBpdGVyYXRpb25zLlxuICpcbiAqIEluIGNvbXBsZXggYXBwbGljYXRpb25zIGl0J3MgcG9zc2libGUgdGhhdCB0aGUgZGVwZW5kZW5jaWVzIGJldHdlZW4gYCR3YXRjaGBzIHdpbGwgcmVzdWx0IGluXG4gKiBzZXZlcmFsIGRpZ2VzdCBpdGVyYXRpb25zLiBIb3dldmVyIGlmIGFuIGFwcGxpY2F0aW9uIG5lZWRzIG1vcmUgdGhhbiB0aGUgZGVmYXVsdCAxMCBkaWdlc3RcbiAqIGl0ZXJhdGlvbnMgZm9yIGl0cyBtb2RlbCB0byBzdGFiaWxpemUgdGhlbiB5b3Ugc2hvdWxkIGludmVzdGlnYXRlIHdoYXQgaXMgY2F1c2luZyB0aGUgbW9kZWwgdG9cbiAqIGNvbnRpbnVvdXNseSBjaGFuZ2UgZHVyaW5nIHRoZSBkaWdlc3QuXG4gKlxuICogSW5jcmVhc2luZyB0aGUgVFRMIGNvdWxkIGhhdmUgcGVyZm9ybWFuY2UgaW1wbGljYXRpb25zLCBzbyB5b3Ugc2hvdWxkIG5vdCBjaGFuZ2UgaXQgd2l0aG91dFxuICogcHJvcGVyIGp1c3RpZmljYXRpb24uXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGxpbWl0IFRoZSBudW1iZXIgb2YgZGlnZXN0IGl0ZXJhdGlvbnMuXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkcm9vdFNjb3BlXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBFdmVyeSBhcHBsaWNhdGlvbiBoYXMgYSBzaW5nbGUgcm9vdCB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBzY29wZX0uXG4gKiBBbGwgb3RoZXIgc2NvcGVzIGFyZSBkZXNjZW5kYW50IHNjb3BlcyBvZiB0aGUgcm9vdCBzY29wZS4gU2NvcGVzIHByb3ZpZGUgc2VwYXJhdGlvblxuICogYmV0d2VlbiB0aGUgbW9kZWwgYW5kIHRoZSB2aWV3LCB2aWEgYSBtZWNoYW5pc20gZm9yIHdhdGNoaW5nIHRoZSBtb2RlbCBmb3IgY2hhbmdlcy5cbiAqIFRoZXkgYWxzbyBwcm92aWRlIGFuIGV2ZW50IGVtaXNzaW9uL2Jyb2FkY2FzdCBhbmQgc3Vic2NyaXB0aW9uIGZhY2lsaXR5LiBTZWUgdGhlXG4gKiB7QGxpbmsgZ3VpZGUvc2NvcGUgZGV2ZWxvcGVyIGd1aWRlIG9uIHNjb3Blc30uXG4gKi9cbmZ1bmN0aW9uICRSb290U2NvcGVQcm92aWRlcigpIHtcbiAgdmFyIFRUTCA9IDEwO1xuICB2YXIgJHJvb3RTY29wZU1pbkVyciA9IG1pbkVycignJHJvb3RTY29wZScpO1xuICB2YXIgbGFzdERpcnR5V2F0Y2ggPSBudWxsO1xuICB2YXIgYXBwbHlBc3luY0lkID0gbnVsbDtcblxuICB0aGlzLmRpZ2VzdFR0bCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIFRUTCA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gVFRMO1xuICB9O1xuXG4gIHRoaXMuJGdldCA9IFsnJGluamVjdG9yJywgJyRleGNlcHRpb25IYW5kbGVyJywgJyRwYXJzZScsICckYnJvd3NlcicsXG4gICAgICBmdW5jdGlvbigkaW5qZWN0b3IsICRleGNlcHRpb25IYW5kbGVyLCAkcGFyc2UsICRicm93c2VyKSB7XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgdHlwZVxuICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGVcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIEEgcm9vdCBzY29wZSBjYW4gYmUgcmV0cmlldmVkIHVzaW5nIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZSAkcm9vdFNjb3BlfSBrZXkgZnJvbSB0aGVcbiAgICAgKiB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfS4gQ2hpbGQgc2NvcGVzIGFyZSBjcmVhdGVkIHVzaW5nIHRoZVxuICAgICAqIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRuZXcgJG5ldygpfSBtZXRob2QuIChNb3N0IHNjb3BlcyBhcmUgY3JlYXRlZCBhdXRvbWF0aWNhbGx5IHdoZW5cbiAgICAgKiBjb21waWxlZCBIVE1MIHRlbXBsYXRlIGlzIGV4ZWN1dGVkLilcbiAgICAgKlxuICAgICAqIEhlcmUgaXMgYSBzaW1wbGUgc2NvcGUgc25pcHBldCB0byBzaG93IGhvdyB5b3UgY2FuIGludGVyYWN0IHdpdGggdGhlIHNjb3BlLlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8ZmlsZSBzcmM9XCIuL3Rlc3Qvbmcvcm9vdFNjb3BlU3BlYy5qc1wiIHRhZz1cImRvY3MxXCIgLz5cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqICMgSW5oZXJpdGFuY2VcbiAgICAgKiBBIHNjb3BlIGNhbiBpbmhlcml0IGZyb20gYSBwYXJlbnQgc2NvcGUsIGFzIGluIHRoaXMgZXhhbXBsZTpcbiAgICAgKiBgYGBqc1xuICAgICAgICAgdmFyIHBhcmVudCA9ICRyb290U2NvcGU7XG4gICAgICAgICB2YXIgY2hpbGQgPSBwYXJlbnQuJG5ldygpO1xuXG4gICAgICAgICBwYXJlbnQuc2FsdXRhdGlvbiA9IFwiSGVsbG9cIjtcbiAgICAgICAgIGV4cGVjdChjaGlsZC5zYWx1dGF0aW9uKS50b0VxdWFsKCdIZWxsbycpO1xuXG4gICAgICAgICBjaGlsZC5zYWx1dGF0aW9uID0gXCJXZWxjb21lXCI7XG4gICAgICAgICBleHBlY3QoY2hpbGQuc2FsdXRhdGlvbikudG9FcXVhbCgnV2VsY29tZScpO1xuICAgICAgICAgZXhwZWN0KHBhcmVudC5zYWx1dGF0aW9uKS50b0VxdWFsKCdIZWxsbycpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogV2hlbiBpbnRlcmFjdGluZyB3aXRoIGBTY29wZWAgaW4gdGVzdHMsIGFkZGl0aW9uYWwgaGVscGVyIG1ldGhvZHMgYXJlIGF2YWlsYWJsZSBvbiB0aGVcbiAgICAgKiBpbnN0YW5jZXMgb2YgYFNjb3BlYCB0eXBlLiBTZWUge0BsaW5rIG5nTW9jay4kcm9vdFNjb3BlLlNjb3BlIG5nTW9jayBTY29wZX0gZm9yIGFkZGl0aW9uYWxcbiAgICAgKiBkZXRhaWxzLlxuICAgICAqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCBmdW5jdGlvbigpPj19IHByb3ZpZGVycyBNYXAgb2Ygc2VydmljZSBmYWN0b3J5IHdoaWNoIG5lZWQgdG8gYmVcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVkIGZvciB0aGUgY3VycmVudCBzY29wZS4gRGVmYXVsdHMgdG8ge0BsaW5rIG5nfS5cbiAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCAqPj19IGluc3RhbmNlQ2FjaGUgUHJvdmlkZXMgcHJlLWluc3RhbnRpYXRlZCBzZXJ2aWNlcyB3aGljaCBzaG91bGRcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZC9vdmVycmlkZSBzZXJ2aWNlcyBwcm92aWRlZCBieSBgcHJvdmlkZXJzYC4gVGhpcyBpcyBoYW5keVxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiB1bml0LXRlc3RpbmcgYW5kIGhhdmluZyB0aGUgbmVlZCB0byBvdmVycmlkZSBhIGRlZmF1bHRcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2UuXG4gICAgICogQHJldHVybnMge09iamVjdH0gTmV3bHkgY3JlYXRlZCBzY29wZS5cbiAgICAgKlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFNjb3BlKCkge1xuICAgICAgdGhpcy4kaWQgPSBuZXh0VWlkKCk7XG4gICAgICB0aGlzLiQkcGhhc2UgPSB0aGlzLiRwYXJlbnQgPSB0aGlzLiQkd2F0Y2hlcnMgPVxuICAgICAgICAgICAgICAgICAgICAgdGhpcy4kJG5leHRTaWJsaW5nID0gdGhpcy4kJHByZXZTaWJsaW5nID1cbiAgICAgICAgICAgICAgICAgICAgIHRoaXMuJCRjaGlsZEhlYWQgPSB0aGlzLiQkY2hpbGRUYWlsID0gbnVsbDtcbiAgICAgIHRoaXMuJHJvb3QgPSB0aGlzO1xuICAgICAgdGhpcy4kJGRlc3Ryb3llZCA9IGZhbHNlO1xuICAgICAgdGhpcy4kJGxpc3RlbmVycyA9IHt9O1xuICAgICAgdGhpcy4kJGxpc3RlbmVyQ291bnQgPSB7fTtcbiAgICAgIHRoaXMuJCRpc29sYXRlQmluZGluZ3MgPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBwcm9wZXJ0eVxuICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGlkXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBVbmlxdWUgc2NvcGUgSUQgKG1vbm90b25pY2FsbHkgaW5jcmVhc2luZykgdXNlZnVsIGZvciBkZWJ1Z2dpbmcuXG4gICAgICovXG5cbiAgICAgLyoqXG4gICAgICAqIEBuZ2RvYyBwcm9wZXJ0eVxuICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRwYXJlbnRcbiAgICAgICpcbiAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAqIFJlZmVyZW5jZSB0byB0aGUgcGFyZW50IHNjb3BlLlxuICAgICAgKi9cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgcHJvcGVydHlcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJHJvb3RcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFJlZmVyZW5jZSB0byB0aGUgcm9vdCBzY29wZS5cbiAgICAgICAqL1xuXG4gICAgU2NvcGUucHJvdG90eXBlID0ge1xuICAgICAgY29uc3RydWN0b3I6IFNjb3BlLFxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRuZXdcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBDcmVhdGVzIGEgbmV3IGNoaWxkIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIHNjb3BlfS5cbiAgICAgICAqXG4gICAgICAgKiBUaGUgcGFyZW50IHNjb3BlIHdpbGwgcHJvcGFnYXRlIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QoKX0gZXZlbnQuXG4gICAgICAgKiBUaGUgc2NvcGUgY2FuIGJlIHJlbW92ZWQgZnJvbSB0aGUgc2NvcGUgaGllcmFyY2h5IHVzaW5nIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkZXN0cm95ICRkZXN0cm95KCl9LlxuICAgICAgICpcbiAgICAgICAqIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkZXN0cm95ICRkZXN0cm95KCl9IG11c3QgYmUgY2FsbGVkIG9uIGEgc2NvcGUgd2hlbiBpdCBpc1xuICAgICAgICogZGVzaXJlZCBmb3IgdGhlIHNjb3BlIGFuZCBpdHMgY2hpbGQgc2NvcGVzIHRvIGJlIHBlcm1hbmVudGx5IGRldGFjaGVkIGZyb20gdGhlIHBhcmVudCBhbmRcbiAgICAgICAqIHRodXMgc3RvcCBwYXJ0aWNpcGF0aW5nIGluIG1vZGVsIGNoYW5nZSBkZXRlY3Rpb24gYW5kIGxpc3RlbmVyIG5vdGlmaWNhdGlvbiBieSBpbnZva2luZy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzb2xhdGUgSWYgdHJ1ZSwgdGhlbiB0aGUgc2NvcGUgZG9lcyBub3QgcHJvdG90eXBpY2FsbHkgaW5oZXJpdCBmcm9tIHRoZVxuICAgICAgICogICAgICAgICBwYXJlbnQgc2NvcGUuIFRoZSBzY29wZSBpcyBpc29sYXRlZCwgYXMgaXQgY2FuIG5vdCBzZWUgcGFyZW50IHNjb3BlIHByb3BlcnRpZXMuXG4gICAgICAgKiAgICAgICAgIFdoZW4gY3JlYXRpbmcgd2lkZ2V0cywgaXQgaXMgdXNlZnVsIGZvciB0aGUgd2lkZ2V0IHRvIG5vdCBhY2NpZGVudGFsbHkgcmVhZCBwYXJlbnRcbiAgICAgICAqICAgICAgICAgc3RhdGUuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtTY29wZX0gW3BhcmVudD10aGlzXSBUaGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgYFNjb3BlYH0gdGhhdCB3aWxsIGJlIHRoZSBgJHBhcmVudGBcbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgdGhlIG5ld2x5IGNyZWF0ZWQgc2NvcGUuIERlZmF1bHRzIHRvIGB0aGlzYCBzY29wZSBpZiBub3QgcHJvdmlkZWQuXG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoaXMgaXMgdXNlZCB3aGVuIGNyZWF0aW5nIGEgdHJhbnNjbHVkZSBzY29wZSB0byBjb3JyZWN0bHkgcGxhY2UgaXRcbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gdGhlIHNjb3BlIGhpZXJhcmNoeSB3aGlsZSBtYWludGFpbmluZyB0aGUgY29ycmVjdCBwcm90b3R5cGljYWxcbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5oZXJpdGFuY2UuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge09iamVjdH0gVGhlIG5ld2x5IGNyZWF0ZWQgY2hpbGQgc2NvcGUuXG4gICAgICAgKlxuICAgICAgICovXG4gICAgICAkbmV3OiBmdW5jdGlvbihpc29sYXRlLCBwYXJlbnQpIHtcbiAgICAgICAgdmFyIGNoaWxkO1xuXG4gICAgICAgIHBhcmVudCA9IHBhcmVudCB8fCB0aGlzO1xuXG4gICAgICAgIGlmIChpc29sYXRlKSB7XG4gICAgICAgICAgY2hpbGQgPSBuZXcgU2NvcGUoKTtcbiAgICAgICAgICBjaGlsZC4kcm9vdCA9IHRoaXMuJHJvb3Q7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT25seSBjcmVhdGUgYSBjaGlsZCBzY29wZSBjbGFzcyBpZiBzb21lYm9keSBhc2tzIGZvciBvbmUsXG4gICAgICAgICAgLy8gYnV0IGNhY2hlIGl0IHRvIGFsbG93IHRoZSBWTSB0byBvcHRpbWl6ZSBsb29rdXBzLlxuICAgICAgICAgIGlmICghdGhpcy4kJENoaWxkU2NvcGUpIHtcbiAgICAgICAgICAgIHRoaXMuJCRDaGlsZFNjb3BlID0gZnVuY3Rpb24gQ2hpbGRTY29wZSgpIHtcbiAgICAgICAgICAgICAgdGhpcy4kJHdhdGNoZXJzID0gdGhpcy4kJG5leHRTaWJsaW5nID1cbiAgICAgICAgICAgICAgICAgIHRoaXMuJCRjaGlsZEhlYWQgPSB0aGlzLiQkY2hpbGRUYWlsID0gbnVsbDtcbiAgICAgICAgICAgICAgdGhpcy4kJGxpc3RlbmVycyA9IHt9O1xuICAgICAgICAgICAgICB0aGlzLiQkbGlzdGVuZXJDb3VudCA9IHt9O1xuICAgICAgICAgICAgICB0aGlzLiRpZCA9IG5leHRVaWQoKTtcbiAgICAgICAgICAgICAgdGhpcy4kJENoaWxkU2NvcGUgPSBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuJCRDaGlsZFNjb3BlLnByb3RvdHlwZSA9IHRoaXM7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNoaWxkID0gbmV3IHRoaXMuJCRDaGlsZFNjb3BlKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGQuJHBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgY2hpbGQuJCRwcmV2U2libGluZyA9IHBhcmVudC4kJGNoaWxkVGFpbDtcbiAgICAgICAgaWYgKHBhcmVudC4kJGNoaWxkSGVhZCkge1xuICAgICAgICAgIHBhcmVudC4kJGNoaWxkVGFpbC4kJG5leHRTaWJsaW5nID0gY2hpbGQ7XG4gICAgICAgICAgcGFyZW50LiQkY2hpbGRUYWlsID0gY2hpbGQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFyZW50LiQkY2hpbGRIZWFkID0gcGFyZW50LiQkY2hpbGRUYWlsID0gY2hpbGQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBXaGVuIHRoZSBuZXcgc2NvcGUgaXMgbm90IGlzb2xhdGVkIG9yIHdlIGluaGVyaXQgZnJvbSBgdGhpc2AsIGFuZFxuICAgICAgICAvLyB0aGUgcGFyZW50IHNjb3BlIGlzIGRlc3Ryb3llZCwgdGhlIHByb3BlcnR5IGAkJGRlc3Ryb3llZGAgaXMgaW5oZXJpdGVkXG4gICAgICAgIC8vIHByb3RvdHlwaWNhbGx5LiBJbiBhbGwgb3RoZXIgY2FzZXMsIHRoaXMgcHJvcGVydHkgbmVlZHMgdG8gYmUgc2V0XG4gICAgICAgIC8vIHdoZW4gdGhlIHBhcmVudCBzY29wZSBpcyBkZXN0cm95ZWQuXG4gICAgICAgIC8vIFRoZSBsaXN0ZW5lciBuZWVkcyB0byBiZSBhZGRlZCBhZnRlciB0aGUgcGFyZW50IGlzIHNldFxuICAgICAgICBpZiAoaXNvbGF0ZSB8fCBwYXJlbnQgIT0gdGhpcykgY2hpbGQuJG9uKCckZGVzdHJveScsIGRlc3Ryb3lDaGlsZCk7XG5cbiAgICAgICAgcmV0dXJuIGNoaWxkO1xuXG4gICAgICAgIGZ1bmN0aW9uIGRlc3Ryb3lDaGlsZCgpIHtcbiAgICAgICAgICBjaGlsZC4kJGRlc3Ryb3llZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkd2F0Y2hcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBSZWdpc3RlcnMgYSBgbGlzdGVuZXJgIGNhbGxiYWNrIHRvIGJlIGV4ZWN1dGVkIHdoZW5ldmVyIHRoZSBgd2F0Y2hFeHByZXNzaW9uYCBjaGFuZ2VzLlxuICAgICAgICpcbiAgICAgICAqIC0gVGhlIGB3YXRjaEV4cHJlc3Npb25gIGlzIGNhbGxlZCBvbiBldmVyeSBjYWxsIHRvIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3RcbiAgICAgICAqICAgJGRpZ2VzdCgpfSBhbmQgc2hvdWxkIHJldHVybiB0aGUgdmFsdWUgdGhhdCB3aWxsIGJlIHdhdGNoZWQuIChTaW5jZVxuICAgICAgICogICB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QoKX0gcmVydW5zIHdoZW4gaXQgZGV0ZWN0cyBjaGFuZ2VzIHRoZVxuICAgICAgICogICBgd2F0Y2hFeHByZXNzaW9uYCBjYW4gZXhlY3V0ZSBtdWx0aXBsZSB0aW1lcyBwZXJcbiAgICAgICAqICAge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0KCl9IGFuZCBzaG91bGQgYmUgaWRlbXBvdGVudC4pXG4gICAgICAgKiAtIFRoZSBgbGlzdGVuZXJgIGlzIGNhbGxlZCBvbmx5IHdoZW4gdGhlIHZhbHVlIGZyb20gdGhlIGN1cnJlbnQgYHdhdGNoRXhwcmVzc2lvbmAgYW5kIHRoZVxuICAgICAgICogICBwcmV2aW91cyBjYWxsIHRvIGB3YXRjaEV4cHJlc3Npb25gIGFyZSBub3QgZXF1YWwgKHdpdGggdGhlIGV4Y2VwdGlvbiBvZiB0aGUgaW5pdGlhbCBydW4sXG4gICAgICAgKiAgIHNlZSBiZWxvdykuIEluZXF1YWxpdHkgaXMgZGV0ZXJtaW5lZCBhY2NvcmRpbmcgdG8gcmVmZXJlbmNlIGluZXF1YWxpdHksXG4gICAgICAgKiAgIFtzdHJpY3QgY29tcGFyaXNvbl0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvT3BlcmF0b3JzL0NvbXBhcmlzb25fT3BlcmF0b3JzKVxuICAgICAgICogICAgdmlhIHRoZSBgIT09YCBKYXZhc2NyaXB0IG9wZXJhdG9yLCB1bmxlc3MgYG9iamVjdEVxdWFsaXR5ID09IHRydWVgXG4gICAgICAgKiAgIChzZWUgbmV4dCBwb2ludClcbiAgICAgICAqIC0gV2hlbiBgb2JqZWN0RXF1YWxpdHkgPT0gdHJ1ZWAsIGluZXF1YWxpdHkgb2YgdGhlIGB3YXRjaEV4cHJlc3Npb25gIGlzIGRldGVybWluZWRcbiAgICAgICAqICAgYWNjb3JkaW5nIHRvIHRoZSB7QGxpbmsgYW5ndWxhci5lcXVhbHN9IGZ1bmN0aW9uLiBUbyBzYXZlIHRoZSB2YWx1ZSBvZiB0aGUgb2JqZWN0IGZvclxuICAgICAgICogICBsYXRlciBjb21wYXJpc29uLCB0aGUge0BsaW5rIGFuZ3VsYXIuY29weX0gZnVuY3Rpb24gaXMgdXNlZC4gVGhpcyB0aGVyZWZvcmUgbWVhbnMgdGhhdFxuICAgICAgICogICB3YXRjaGluZyBjb21wbGV4IG9iamVjdHMgd2lsbCBoYXZlIGFkdmVyc2UgbWVtb3J5IGFuZCBwZXJmb3JtYW5jZSBpbXBsaWNhdGlvbnMuXG4gICAgICAgKiAtIFRoZSB3YXRjaCBgbGlzdGVuZXJgIG1heSBjaGFuZ2UgdGhlIG1vZGVsLCB3aGljaCBtYXkgdHJpZ2dlciBvdGhlciBgbGlzdGVuZXJgcyB0byBmaXJlLlxuICAgICAgICogICBUaGlzIGlzIGFjaGlldmVkIGJ5IHJlcnVubmluZyB0aGUgd2F0Y2hlcnMgdW50aWwgbm8gY2hhbmdlcyBhcmUgZGV0ZWN0ZWQuIFRoZSByZXJ1blxuICAgICAgICogICBpdGVyYXRpb24gbGltaXQgaXMgMTAgdG8gcHJldmVudCBhbiBpbmZpbml0ZSBsb29wIGRlYWRsb2NrLlxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKiBJZiB5b3Ugd2FudCB0byBiZSBub3RpZmllZCB3aGVuZXZlciB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3R9IGlzIGNhbGxlZCxcbiAgICAgICAqIHlvdSBjYW4gcmVnaXN0ZXIgYSBgd2F0Y2hFeHByZXNzaW9uYCBmdW5jdGlvbiB3aXRoIG5vIGBsaXN0ZW5lcmAuIChTaW5jZSBgd2F0Y2hFeHByZXNzaW9uYFxuICAgICAgICogY2FuIGV4ZWN1dGUgbXVsdGlwbGUgdGltZXMgcGVyIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdH0gY3ljbGUgd2hlbiBhXG4gICAgICAgKiBjaGFuZ2UgaXMgZGV0ZWN0ZWQsIGJlIHByZXBhcmVkIGZvciBtdWx0aXBsZSBjYWxscyB0byB5b3VyIGxpc3RlbmVyLilcbiAgICAgICAqXG4gICAgICAgKiBBZnRlciBhIHdhdGNoZXIgaXMgcmVnaXN0ZXJlZCB3aXRoIHRoZSBzY29wZSwgdGhlIGBsaXN0ZW5lcmAgZm4gaXMgY2FsbGVkIGFzeW5jaHJvbm91c2x5XG4gICAgICAgKiAodmlhIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRldmFsQXN5bmMgJGV2YWxBc3luY30pIHRvIGluaXRpYWxpemUgdGhlXG4gICAgICAgKiB3YXRjaGVyLiBJbiByYXJlIGNhc2VzLCB0aGlzIGlzIHVuZGVzaXJhYmxlIGJlY2F1c2UgdGhlIGxpc3RlbmVyIGlzIGNhbGxlZCB3aGVuIHRoZSByZXN1bHRcbiAgICAgICAqIG9mIGB3YXRjaEV4cHJlc3Npb25gIGRpZG4ndCBjaGFuZ2UuIFRvIGRldGVjdCB0aGlzIHNjZW5hcmlvIHdpdGhpbiB0aGUgYGxpc3RlbmVyYCBmbiwgeW91XG4gICAgICAgKiBjYW4gY29tcGFyZSB0aGUgYG5ld1ZhbGAgYW5kIGBvbGRWYWxgLiBJZiB0aGVzZSB0d28gdmFsdWVzIGFyZSBpZGVudGljYWwgKGA9PT1gKSB0aGVuIHRoZVxuICAgICAgICogbGlzdGVuZXIgd2FzIGNhbGxlZCBkdWUgdG8gaW5pdGlhbGl6YXRpb24uXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKiAjIEV4YW1wbGVcbiAgICAgICAqIGBgYGpzXG4gICAgICAgICAgIC8vIGxldCdzIGFzc3VtZSB0aGF0IHNjb3BlIHdhcyBkZXBlbmRlbmN5IGluamVjdGVkIGFzIHRoZSAkcm9vdFNjb3BlXG4gICAgICAgICAgIHZhciBzY29wZSA9ICRyb290U2NvcGU7XG4gICAgICAgICAgIHNjb3BlLm5hbWUgPSAnbWlza28nO1xuICAgICAgICAgICBzY29wZS5jb3VudGVyID0gMDtcblxuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgwKTtcbiAgICAgICAgICAgc2NvcGUuJHdhdGNoKCduYW1lJywgZnVuY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgc2NvcGUuY291bnRlciA9IHNjb3BlLmNvdW50ZXIgKyAxO1xuICAgICAgICAgICB9KTtcbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMCk7XG5cbiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICAvLyB0aGUgbGlzdGVuZXIgaXMgYWx3YXlzIGNhbGxlZCBkdXJpbmcgdGhlIGZpcnN0ICRkaWdlc3QgbG9vcCBhZnRlciBpdCB3YXMgcmVnaXN0ZXJlZFxuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgxKTtcblxuICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgIC8vIGJ1dCBub3cgaXQgd2lsbCBub3QgYmUgY2FsbGVkIHVubGVzcyB0aGUgdmFsdWUgY2hhbmdlc1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgxKTtcblxuICAgICAgICAgICBzY29wZS5uYW1lID0gJ2FkYW0nO1xuICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDIpO1xuXG5cblxuICAgICAgICAgICAvLyBVc2luZyBhIGZ1bmN0aW9uIGFzIGEgd2F0Y2hFeHByZXNzaW9uXG4gICAgICAgICAgIHZhciBmb29kO1xuICAgICAgICAgICBzY29wZS5mb29kQ291bnRlciA9IDA7XG4gICAgICAgICAgIGV4cGVjdChzY29wZS5mb29kQ291bnRlcikudG9FcXVhbCgwKTtcbiAgICAgICAgICAgc2NvcGUuJHdhdGNoKFxuICAgICAgICAgICAgIC8vIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgdmFsdWUgYmVpbmcgd2F0Y2hlZC4gSXQgaXMgY2FsbGVkIGZvciBlYWNoIHR1cm4gb2YgdGhlICRkaWdlc3QgbG9vcFxuICAgICAgICAgICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gZm9vZDsgfSxcbiAgICAgICAgICAgICAvLyBUaGlzIGlzIHRoZSBjaGFuZ2UgbGlzdGVuZXIsIGNhbGxlZCB3aGVuIHRoZSB2YWx1ZSByZXR1cm5lZCBmcm9tIHRoZSBhYm92ZSBmdW5jdGlvbiBjaGFuZ2VzXG4gICAgICAgICAgICAgZnVuY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICBpZiAoIG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSApIHtcbiAgICAgICAgICAgICAgICAgLy8gT25seSBpbmNyZW1lbnQgdGhlIGNvdW50ZXIgaWYgdGhlIHZhbHVlIGNoYW5nZWRcbiAgICAgICAgICAgICAgICAgc2NvcGUuZm9vZENvdW50ZXIgPSBzY29wZS5mb29kQ291bnRlciArIDE7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICApO1xuICAgICAgICAgICAvLyBObyBkaWdlc3QgaGFzIGJlZW4gcnVuIHNvIHRoZSBjb3VudGVyIHdpbGwgYmUgemVyb1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuZm9vZENvdW50ZXIpLnRvRXF1YWwoMCk7XG5cbiAgICAgICAgICAgLy8gUnVuIHRoZSBkaWdlc3QgYnV0IHNpbmNlIGZvb2QgaGFzIG5vdCBjaGFuZ2VkIGNvdW50IHdpbGwgc3RpbGwgYmUgemVyb1xuICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgIGV4cGVjdChzY29wZS5mb29kQ291bnRlcikudG9FcXVhbCgwKTtcblxuICAgICAgICAgICAvLyBVcGRhdGUgZm9vZCBhbmQgcnVuIGRpZ2VzdC4gIE5vdyB0aGUgY291bnRlciB3aWxsIGluY3JlbWVudFxuICAgICAgICAgICBmb29kID0gJ2NoZWVzZWJ1cmdlcic7XG4gICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmZvb2RDb3VudGVyKS50b0VxdWFsKDEpO1xuXG4gICAgICAgKiBgYGBcbiAgICAgICAqXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7KGZ1bmN0aW9uKCl8c3RyaW5nKX0gd2F0Y2hFeHByZXNzaW9uIEV4cHJlc3Npb24gdGhhdCBpcyBldmFsdWF0ZWQgb24gZWFjaFxuICAgICAgICogICAge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0fSBjeWNsZS4gQSBjaGFuZ2UgaW4gdGhlIHJldHVybiB2YWx1ZSB0cmlnZ2Vyc1xuICAgICAgICogICAgYSBjYWxsIHRvIHRoZSBgbGlzdGVuZXJgLlxuICAgICAgICpcbiAgICAgICAqICAgIC0gYHN0cmluZ2A6IEV2YWx1YXRlZCBhcyB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufVxuICAgICAgICogICAgLSBgZnVuY3Rpb24oc2NvcGUpYDogY2FsbGVkIHdpdGggY3VycmVudCBgc2NvcGVgIGFzIGEgcGFyYW1ldGVyLlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbihuZXdWYWwsIG9sZFZhbCwgc2NvcGUpfSBsaXN0ZW5lciBDYWxsYmFjayBjYWxsZWQgd2hlbmV2ZXIgdGhlIHZhbHVlXG4gICAgICAgKiAgICBvZiBgd2F0Y2hFeHByZXNzaW9uYCBjaGFuZ2VzLlxuICAgICAgICpcbiAgICAgICAqICAgIC0gYG5ld1ZhbGAgY29udGFpbnMgdGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIGB3YXRjaEV4cHJlc3Npb25gXG4gICAgICAgKiAgICAtIGBvbGRWYWxgIGNvbnRhaW5zIHRoZSBwcmV2aW91cyB2YWx1ZSBvZiB0aGUgYHdhdGNoRXhwcmVzc2lvbmBcbiAgICAgICAqICAgIC0gYHNjb3BlYCByZWZlcnMgdG8gdGhlIGN1cnJlbnQgc2NvcGVcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IG9iamVjdEVxdWFsaXR5IENvbXBhcmUgZm9yIG9iamVjdCBlcXVhbGl0eSB1c2luZyB7QGxpbmsgYW5ndWxhci5lcXVhbHN9IGluc3RlYWQgb2ZcbiAgICAgICAqICAgICBjb21wYXJpbmcgZm9yIHJlZmVyZW5jZSBlcXVhbGl0eS5cbiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBSZXR1cm5zIGEgZGVyZWdpc3RyYXRpb24gZnVuY3Rpb24gZm9yIHRoaXMgbGlzdGVuZXIuXG4gICAgICAgKi9cbiAgICAgICR3YXRjaDogZnVuY3Rpb24od2F0Y2hFeHAsIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSkge1xuICAgICAgICB2YXIgZ2V0ID0gJHBhcnNlKHdhdGNoRXhwKTtcblxuICAgICAgICBpZiAoZ2V0LiQkd2F0Y2hEZWxlZ2F0ZSkge1xuICAgICAgICAgIHJldHVybiBnZXQuJCR3YXRjaERlbGVnYXRlKHRoaXMsIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSwgZ2V0KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2NvcGUgPSB0aGlzLFxuICAgICAgICAgICAgYXJyYXkgPSBzY29wZS4kJHdhdGNoZXJzLFxuICAgICAgICAgICAgd2F0Y2hlciA9IHtcbiAgICAgICAgICAgICAgZm46IGxpc3RlbmVyLFxuICAgICAgICAgICAgICBsYXN0OiBpbml0V2F0Y2hWYWwsXG4gICAgICAgICAgICAgIGdldDogZ2V0LFxuICAgICAgICAgICAgICBleHA6IHdhdGNoRXhwLFxuICAgICAgICAgICAgICBlcTogISFvYmplY3RFcXVhbGl0eVxuICAgICAgICAgICAgfTtcblxuICAgICAgICBsYXN0RGlydHlXYXRjaCA9IG51bGw7XG5cbiAgICAgICAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSkge1xuICAgICAgICAgIHdhdGNoZXIuZm4gPSBub29wO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFhcnJheSkge1xuICAgICAgICAgIGFycmF5ID0gc2NvcGUuJCR3YXRjaGVycyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIC8vIHdlIHVzZSB1bnNoaWZ0IHNpbmNlIHdlIHVzZSBhIHdoaWxlIGxvb3AgaW4gJGRpZ2VzdCBmb3Igc3BlZWQuXG4gICAgICAgIC8vIHRoZSB3aGlsZSBsb29wIHJlYWRzIGluIHJldmVyc2Ugb3JkZXIuXG4gICAgICAgIGFycmF5LnVuc2hpZnQod2F0Y2hlcik7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRlcmVnaXN0ZXJXYXRjaCgpIHtcbiAgICAgICAgICBhcnJheVJlbW92ZShhcnJheSwgd2F0Y2hlcik7XG4gICAgICAgICAgbGFzdERpcnR5V2F0Y2ggPSBudWxsO1xuICAgICAgICB9O1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyR3YXRjaEdyb3VwXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogQSB2YXJpYW50IG9mIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaCAkd2F0Y2goKX0gd2hlcmUgaXQgd2F0Y2hlcyBhbiBhcnJheSBvZiBgd2F0Y2hFeHByZXNzaW9uc2AuXG4gICAgICAgKiBJZiBhbnkgb25lIGV4cHJlc3Npb24gaW4gdGhlIGNvbGxlY3Rpb24gY2hhbmdlcyB0aGUgYGxpc3RlbmVyYCBpcyBleGVjdXRlZC5cbiAgICAgICAqXG4gICAgICAgKiAtIFRoZSBpdGVtcyBpbiB0aGUgYHdhdGNoRXhwcmVzc2lvbnNgIGFycmF5IGFyZSBvYnNlcnZlZCB2aWEgc3RhbmRhcmQgJHdhdGNoIG9wZXJhdGlvbiBhbmQgYXJlIGV4YW1pbmVkIG9uIGV2ZXJ5XG4gICAgICAgKiAgIGNhbGwgdG8gJGRpZ2VzdCgpIHRvIHNlZSBpZiBhbnkgaXRlbXMgY2hhbmdlcy5cbiAgICAgICAqIC0gVGhlIGBsaXN0ZW5lcmAgaXMgY2FsbGVkIHdoZW5ldmVyIGFueSBleHByZXNzaW9uIGluIHRoZSBgd2F0Y2hFeHByZXNzaW9uc2AgYXJyYXkgY2hhbmdlcy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0FycmF5LjxzdHJpbmd8RnVuY3Rpb24oc2NvcGUpPn0gd2F0Y2hFeHByZXNzaW9ucyBBcnJheSBvZiBleHByZXNzaW9ucyB0aGF0IHdpbGwgYmUgaW5kaXZpZHVhbGx5XG4gICAgICAgKiB3YXRjaGVkIHVzaW5nIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaCAkd2F0Y2goKX1cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKG5ld1ZhbHVlcywgb2xkVmFsdWVzLCBzY29wZSl9IGxpc3RlbmVyIENhbGxiYWNrIGNhbGxlZCB3aGVuZXZlciB0aGUgcmV0dXJuIHZhbHVlIG9mIGFueVxuICAgICAgICogICAgZXhwcmVzc2lvbiBpbiBgd2F0Y2hFeHByZXNzaW9uc2AgY2hhbmdlc1xuICAgICAgICogICAgVGhlIGBuZXdWYWx1ZXNgIGFycmF5IGNvbnRhaW5zIHRoZSBjdXJyZW50IHZhbHVlcyBvZiB0aGUgYHdhdGNoRXhwcmVzc2lvbnNgLCB3aXRoIHRoZSBpbmRleGVzIG1hdGNoaW5nXG4gICAgICAgKiAgICB0aG9zZSBvZiBgd2F0Y2hFeHByZXNzaW9uYFxuICAgICAgICogICAgYW5kIHRoZSBgb2xkVmFsdWVzYCBhcnJheSBjb250YWlucyB0aGUgcHJldmlvdXMgdmFsdWVzIG9mIHRoZSBgd2F0Y2hFeHByZXNzaW9uc2AsIHdpdGggdGhlIGluZGV4ZXMgbWF0Y2hpbmdcbiAgICAgICAqICAgIHRob3NlIG9mIGB3YXRjaEV4cHJlc3Npb25gXG4gICAgICAgKiAgICBUaGUgYHNjb3BlYCByZWZlcnMgdG8gdGhlIGN1cnJlbnQgc2NvcGUuXG4gICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX0gUmV0dXJucyBhIGRlLXJlZ2lzdHJhdGlvbiBmdW5jdGlvbiBmb3IgYWxsIGxpc3RlbmVycy5cbiAgICAgICAqL1xuICAgICAgJHdhdGNoR3JvdXA6IGZ1bmN0aW9uKHdhdGNoRXhwcmVzc2lvbnMsIGxpc3RlbmVyKSB7XG4gICAgICAgIHZhciBvbGRWYWx1ZXMgPSBuZXcgQXJyYXkod2F0Y2hFeHByZXNzaW9ucy5sZW5ndGgpO1xuICAgICAgICB2YXIgbmV3VmFsdWVzID0gbmV3IEFycmF5KHdhdGNoRXhwcmVzc2lvbnMubGVuZ3RoKTtcbiAgICAgICAgdmFyIGRlcmVnaXN0ZXJGbnMgPSBbXTtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgY2hhbmdlUmVhY3Rpb25TY2hlZHVsZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIGZpcnN0UnVuID0gdHJ1ZTtcblxuICAgICAgICBpZiAoIXdhdGNoRXhwcmVzc2lvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgLy8gTm8gZXhwcmVzc2lvbnMgbWVhbnMgd2UgY2FsbCB0aGUgbGlzdGVuZXIgQVNBUFxuICAgICAgICAgIHZhciBzaG91bGRDYWxsID0gdHJ1ZTtcbiAgICAgICAgICBzZWxmLiRldmFsQXN5bmMoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoc2hvdWxkQ2FsbCkgbGlzdGVuZXIobmV3VmFsdWVzLCBuZXdWYWx1ZXMsIHNlbGYpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBkZXJlZ2lzdGVyV2F0Y2hHcm91cCgpIHtcbiAgICAgICAgICAgIHNob3VsZENhbGwgPSBmYWxzZTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHdhdGNoRXhwcmVzc2lvbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgLy8gU3BlY2lhbCBjYXNlIHNpemUgb2Ygb25lXG4gICAgICAgICAgcmV0dXJuIHRoaXMuJHdhdGNoKHdhdGNoRXhwcmVzc2lvbnNbMF0sIGZ1bmN0aW9uIHdhdGNoR3JvdXBBY3Rpb24odmFsdWUsIG9sZFZhbHVlLCBzY29wZSkge1xuICAgICAgICAgICAgbmV3VmFsdWVzWzBdID0gdmFsdWU7XG4gICAgICAgICAgICBvbGRWYWx1ZXNbMF0gPSBvbGRWYWx1ZTtcbiAgICAgICAgICAgIGxpc3RlbmVyKG5ld1ZhbHVlcywgKHZhbHVlID09PSBvbGRWYWx1ZSkgPyBuZXdWYWx1ZXMgOiBvbGRWYWx1ZXMsIHNjb3BlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvckVhY2god2F0Y2hFeHByZXNzaW9ucywgZnVuY3Rpb24oZXhwciwgaSkge1xuICAgICAgICAgIHZhciB1bndhdGNoRm4gPSBzZWxmLiR3YXRjaChleHByLCBmdW5jdGlvbiB3YXRjaEdyb3VwU3ViQWN0aW9uKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgbmV3VmFsdWVzW2ldID0gdmFsdWU7XG4gICAgICAgICAgICBvbGRWYWx1ZXNbaV0gPSBvbGRWYWx1ZTtcbiAgICAgICAgICAgIGlmICghY2hhbmdlUmVhY3Rpb25TY2hlZHVsZWQpIHtcbiAgICAgICAgICAgICAgY2hhbmdlUmVhY3Rpb25TY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICBzZWxmLiRldmFsQXN5bmMod2F0Y2hHcm91cEFjdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZGVyZWdpc3RlckZucy5wdXNoKHVud2F0Y2hGbik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZ1bmN0aW9uIHdhdGNoR3JvdXBBY3Rpb24oKSB7XG4gICAgICAgICAgY2hhbmdlUmVhY3Rpb25TY2hlZHVsZWQgPSBmYWxzZTtcblxuICAgICAgICAgIGlmIChmaXJzdFJ1bikge1xuICAgICAgICAgICAgZmlyc3RSdW4gPSBmYWxzZTtcbiAgICAgICAgICAgIGxpc3RlbmVyKG5ld1ZhbHVlcywgbmV3VmFsdWVzLCBzZWxmKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGlzdGVuZXIobmV3VmFsdWVzLCBvbGRWYWx1ZXMsIHNlbGYpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBkZXJlZ2lzdGVyV2F0Y2hHcm91cCgpIHtcbiAgICAgICAgICB3aGlsZSAoZGVyZWdpc3RlckZucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGRlcmVnaXN0ZXJGbnMuc2hpZnQoKSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyR3YXRjaENvbGxlY3Rpb25cbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBTaGFsbG93IHdhdGNoZXMgdGhlIHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0IGFuZCBmaXJlcyB3aGVuZXZlciBhbnkgb2YgdGhlIHByb3BlcnRpZXMgY2hhbmdlXG4gICAgICAgKiAoZm9yIGFycmF5cywgdGhpcyBpbXBsaWVzIHdhdGNoaW5nIHRoZSBhcnJheSBpdGVtczsgZm9yIG9iamVjdCBtYXBzLCB0aGlzIGltcGxpZXMgd2F0Y2hpbmdcbiAgICAgICAqIHRoZSBwcm9wZXJ0aWVzKS4gSWYgYSBjaGFuZ2UgaXMgZGV0ZWN0ZWQsIHRoZSBgbGlzdGVuZXJgIGNhbGxiYWNrIGlzIGZpcmVkLlxuICAgICAgICpcbiAgICAgICAqIC0gVGhlIGBvYmpgIGNvbGxlY3Rpb24gaXMgb2JzZXJ2ZWQgdmlhIHN0YW5kYXJkICR3YXRjaCBvcGVyYXRpb24gYW5kIGlzIGV4YW1pbmVkIG9uIGV2ZXJ5XG4gICAgICAgKiAgIGNhbGwgdG8gJGRpZ2VzdCgpIHRvIHNlZSBpZiBhbnkgaXRlbXMgaGF2ZSBiZWVuIGFkZGVkLCByZW1vdmVkLCBvciBtb3ZlZC5cbiAgICAgICAqIC0gVGhlIGBsaXN0ZW5lcmAgaXMgY2FsbGVkIHdoZW5ldmVyIGFueXRoaW5nIHdpdGhpbiB0aGUgYG9iamAgaGFzIGNoYW5nZWQuIEV4YW1wbGVzIGluY2x1ZGVcbiAgICAgICAqICAgYWRkaW5nLCByZW1vdmluZywgYW5kIG1vdmluZyBpdGVtcyBiZWxvbmdpbmcgdG8gYW4gb2JqZWN0IG9yIGFycmF5LlxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKiAjIEV4YW1wbGVcbiAgICAgICAqIGBgYGpzXG4gICAgICAgICAgJHNjb3BlLm5hbWVzID0gWydpZ29yJywgJ21hdGlhcycsICdtaXNrbycsICdqYW1lcyddO1xuICAgICAgICAgICRzY29wZS5kYXRhQ291bnQgPSA0O1xuXG4gICAgICAgICAgJHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oJ25hbWVzJywgZnVuY3Rpb24obmV3TmFtZXMsIG9sZE5hbWVzKSB7XG4gICAgICAgICAgICAkc2NvcGUuZGF0YUNvdW50ID0gbmV3TmFtZXMubGVuZ3RoO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgZXhwZWN0KCRzY29wZS5kYXRhQ291bnQpLnRvRXF1YWwoNCk7XG4gICAgICAgICAgJHNjb3BlLiRkaWdlc3QoKTtcblxuICAgICAgICAgIC8vc3RpbGwgYXQgNCAuLi4gbm8gY2hhbmdlc1xuICAgICAgICAgIGV4cGVjdCgkc2NvcGUuZGF0YUNvdW50KS50b0VxdWFsKDQpO1xuXG4gICAgICAgICAgJHNjb3BlLm5hbWVzLnBvcCgpO1xuICAgICAgICAgICRzY29wZS4kZGlnZXN0KCk7XG5cbiAgICAgICAgICAvL25vdyB0aGVyZSdzIGJlZW4gYSBjaGFuZ2VcbiAgICAgICAgICBleHBlY3QoJHNjb3BlLmRhdGFDb3VudCkudG9FcXVhbCgzKTtcbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ3xmdW5jdGlvbihzY29wZSl9IG9iaiBFdmFsdWF0ZWQgYXMge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0uIFRoZVxuICAgICAgICogICAgZXhwcmVzc2lvbiB2YWx1ZSBzaG91bGQgZXZhbHVhdGUgdG8gYW4gb2JqZWN0IG9yIGFuIGFycmF5IHdoaWNoIGlzIG9ic2VydmVkIG9uIGVhY2hcbiAgICAgICAqICAgIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdH0gY3ljbGUuIEFueSBzaGFsbG93IGNoYW5nZSB3aXRoaW4gdGhlXG4gICAgICAgKiAgICBjb2xsZWN0aW9uIHdpbGwgdHJpZ2dlciBhIGNhbGwgdG8gdGhlIGBsaXN0ZW5lcmAuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbihuZXdDb2xsZWN0aW9uLCBvbGRDb2xsZWN0aW9uLCBzY29wZSl9IGxpc3RlbmVyIGEgY2FsbGJhY2sgZnVuY3Rpb24gY2FsbGVkXG4gICAgICAgKiAgICB3aGVuIGEgY2hhbmdlIGlzIGRldGVjdGVkLlxuICAgICAgICogICAgLSBUaGUgYG5ld0NvbGxlY3Rpb25gIG9iamVjdCBpcyB0aGUgbmV3bHkgbW9kaWZpZWQgZGF0YSBvYnRhaW5lZCBmcm9tIHRoZSBgb2JqYCBleHByZXNzaW9uXG4gICAgICAgKiAgICAtIFRoZSBgb2xkQ29sbGVjdGlvbmAgb2JqZWN0IGlzIGEgY29weSBvZiB0aGUgZm9ybWVyIGNvbGxlY3Rpb24gZGF0YS5cbiAgICAgICAqICAgICAgRHVlIHRvIHBlcmZvcm1hbmNlIGNvbnNpZGVyYXRpb25zLCB0aGVgb2xkQ29sbGVjdGlvbmAgdmFsdWUgaXMgY29tcHV0ZWQgb25seSBpZiB0aGVcbiAgICAgICAqICAgICAgYGxpc3RlbmVyYCBmdW5jdGlvbiBkZWNsYXJlcyB0d28gb3IgbW9yZSBhcmd1bWVudHMuXG4gICAgICAgKiAgICAtIFRoZSBgc2NvcGVgIGFyZ3VtZW50IHJlZmVycyB0byB0aGUgY3VycmVudCBzY29wZS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX0gUmV0dXJucyBhIGRlLXJlZ2lzdHJhdGlvbiBmdW5jdGlvbiBmb3IgdGhpcyBsaXN0ZW5lci4gV2hlbiB0aGVcbiAgICAgICAqICAgIGRlLXJlZ2lzdHJhdGlvbiBmdW5jdGlvbiBpcyBleGVjdXRlZCwgdGhlIGludGVybmFsIHdhdGNoIG9wZXJhdGlvbiBpcyB0ZXJtaW5hdGVkLlxuICAgICAgICovXG4gICAgICAkd2F0Y2hDb2xsZWN0aW9uOiBmdW5jdGlvbihvYmosIGxpc3RlbmVyKSB7XG4gICAgICAgICR3YXRjaENvbGxlY3Rpb25JbnRlcmNlcHRvci4kc3RhdGVmdWwgPSB0cnVlO1xuXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgLy8gdGhlIGN1cnJlbnQgdmFsdWUsIHVwZGF0ZWQgb24gZWFjaCBkaXJ0eS1jaGVjayBydW5cbiAgICAgICAgdmFyIG5ld1ZhbHVlO1xuICAgICAgICAvLyBhIHNoYWxsb3cgY29weSBvZiB0aGUgbmV3VmFsdWUgZnJvbSB0aGUgbGFzdCBkaXJ0eS1jaGVjayBydW4sXG4gICAgICAgIC8vIHVwZGF0ZWQgdG8gbWF0Y2ggbmV3VmFsdWUgZHVyaW5nIGRpcnR5LWNoZWNrIHJ1blxuICAgICAgICB2YXIgb2xkVmFsdWU7XG4gICAgICAgIC8vIGEgc2hhbGxvdyBjb3B5IG9mIHRoZSBuZXdWYWx1ZSBmcm9tIHdoZW4gdGhlIGxhc3QgY2hhbmdlIGhhcHBlbmVkXG4gICAgICAgIHZhciB2ZXJ5T2xkVmFsdWU7XG4gICAgICAgIC8vIG9ubHkgdHJhY2sgdmVyeU9sZFZhbHVlIGlmIHRoZSBsaXN0ZW5lciBpcyBhc2tpbmcgZm9yIGl0XG4gICAgICAgIHZhciB0cmFja1ZlcnlPbGRWYWx1ZSA9IChsaXN0ZW5lci5sZW5ndGggPiAxKTtcbiAgICAgICAgdmFyIGNoYW5nZURldGVjdGVkID0gMDtcbiAgICAgICAgdmFyIGNoYW5nZURldGVjdG9yID0gJHBhcnNlKG9iaiwgJHdhdGNoQ29sbGVjdGlvbkludGVyY2VwdG9yKTtcbiAgICAgICAgdmFyIGludGVybmFsQXJyYXkgPSBbXTtcbiAgICAgICAgdmFyIGludGVybmFsT2JqZWN0ID0ge307XG4gICAgICAgIHZhciBpbml0UnVuID0gdHJ1ZTtcbiAgICAgICAgdmFyIG9sZExlbmd0aCA9IDA7XG5cbiAgICAgICAgZnVuY3Rpb24gJHdhdGNoQ29sbGVjdGlvbkludGVyY2VwdG9yKF92YWx1ZSkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gX3ZhbHVlO1xuICAgICAgICAgIHZhciBuZXdMZW5ndGgsIGtleSwgYm90aE5hTiwgbmV3SXRlbSwgb2xkSXRlbTtcblxuICAgICAgICAgIC8vIElmIHRoZSBuZXcgdmFsdWUgaXMgdW5kZWZpbmVkLCB0aGVuIHJldHVybiB1bmRlZmluZWQgYXMgdGhlIHdhdGNoIG1heSBiZSBhIG9uZS10aW1lIHdhdGNoXG4gICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKG5ld1ZhbHVlKSkgcmV0dXJuO1xuXG4gICAgICAgICAgaWYgKCFpc09iamVjdChuZXdWYWx1ZSkpIHsgLy8gaWYgcHJpbWl0aXZlXG4gICAgICAgICAgICBpZiAob2xkVmFsdWUgIT09IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgIG9sZFZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgICAgICAgIGNoYW5nZURldGVjdGVkKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5TGlrZShuZXdWYWx1ZSkpIHtcbiAgICAgICAgICAgIGlmIChvbGRWYWx1ZSAhPT0gaW50ZXJuYWxBcnJheSkge1xuICAgICAgICAgICAgICAvLyB3ZSBhcmUgdHJhbnNpdGlvbmluZyBmcm9tIHNvbWV0aGluZyB3aGljaCB3YXMgbm90IGFuIGFycmF5IGludG8gYXJyYXkuXG4gICAgICAgICAgICAgIG9sZFZhbHVlID0gaW50ZXJuYWxBcnJheTtcbiAgICAgICAgICAgICAgb2xkTGVuZ3RoID0gb2xkVmFsdWUubGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbmV3TGVuZ3RoID0gbmV3VmFsdWUubGVuZ3RoO1xuXG4gICAgICAgICAgICBpZiAob2xkTGVuZ3RoICE9PSBuZXdMZW5ndGgpIHtcbiAgICAgICAgICAgICAgLy8gaWYgbGVuZ3RocyBkbyBub3QgbWF0Y2ggd2UgbmVlZCB0byB0cmlnZ2VyIGNoYW5nZSBub3RpZmljYXRpb25cbiAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKztcbiAgICAgICAgICAgICAgb2xkVmFsdWUubGVuZ3RoID0gb2xkTGVuZ3RoID0gbmV3TGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gY29weSB0aGUgaXRlbXMgdG8gb2xkVmFsdWUgYW5kIGxvb2sgZm9yIGNoYW5nZXMuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld0xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIG9sZEl0ZW0gPSBvbGRWYWx1ZVtpXTtcbiAgICAgICAgICAgICAgbmV3SXRlbSA9IG5ld1ZhbHVlW2ldO1xuXG4gICAgICAgICAgICAgIGJvdGhOYU4gPSAob2xkSXRlbSAhPT0gb2xkSXRlbSkgJiYgKG5ld0l0ZW0gIT09IG5ld0l0ZW0pO1xuICAgICAgICAgICAgICBpZiAoIWJvdGhOYU4gJiYgKG9sZEl0ZW0gIT09IG5ld0l0ZW0pKSB7XG4gICAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKztcbiAgICAgICAgICAgICAgICBvbGRWYWx1ZVtpXSA9IG5ld0l0ZW07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKG9sZFZhbHVlICE9PSBpbnRlcm5hbE9iamVjdCkge1xuICAgICAgICAgICAgICAvLyB3ZSBhcmUgdHJhbnNpdGlvbmluZyBmcm9tIHNvbWV0aGluZyB3aGljaCB3YXMgbm90IGFuIG9iamVjdCBpbnRvIG9iamVjdC5cbiAgICAgICAgICAgICAgb2xkVmFsdWUgPSBpbnRlcm5hbE9iamVjdCA9IHt9O1xuICAgICAgICAgICAgICBvbGRMZW5ndGggPSAwO1xuICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gY29weSB0aGUgaXRlbXMgdG8gb2xkVmFsdWUgYW5kIGxvb2sgZm9yIGNoYW5nZXMuXG4gICAgICAgICAgICBuZXdMZW5ndGggPSAwO1xuICAgICAgICAgICAgZm9yIChrZXkgaW4gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICBuZXdMZW5ndGgrKztcbiAgICAgICAgICAgICAgICBuZXdJdGVtID0gbmV3VmFsdWVba2V5XTtcbiAgICAgICAgICAgICAgICBvbGRJdGVtID0gb2xkVmFsdWVba2V5XTtcblxuICAgICAgICAgICAgICAgIGlmIChrZXkgaW4gb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgIGJvdGhOYU4gPSAob2xkSXRlbSAhPT0gb2xkSXRlbSkgJiYgKG5ld0l0ZW0gIT09IG5ld0l0ZW0pO1xuICAgICAgICAgICAgICAgICAgaWYgKCFib3RoTmFOICYmIChvbGRJdGVtICE9PSBuZXdJdGVtKSkge1xuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrO1xuICAgICAgICAgICAgICAgICAgICBvbGRWYWx1ZVtrZXldID0gbmV3SXRlbTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgb2xkTGVuZ3RoKys7XG4gICAgICAgICAgICAgICAgICBvbGRWYWx1ZVtrZXldID0gbmV3SXRlbTtcbiAgICAgICAgICAgICAgICAgIGNoYW5nZURldGVjdGVkKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob2xkTGVuZ3RoID4gbmV3TGVuZ3RoKSB7XG4gICAgICAgICAgICAgIC8vIHdlIHVzZWQgdG8gaGF2ZSBtb3JlIGtleXMsIG5lZWQgdG8gZmluZCB0aGVtIGFuZCBkZXN0cm95IHRoZW0uXG4gICAgICAgICAgICAgIGNoYW5nZURldGVjdGVkKys7XG4gICAgICAgICAgICAgIGZvciAoa2V5IGluIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFuZXdWYWx1ZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgICBvbGRMZW5ndGgtLTtcbiAgICAgICAgICAgICAgICAgIGRlbGV0ZSBvbGRWYWx1ZVtrZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gY2hhbmdlRGV0ZWN0ZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiAkd2F0Y2hDb2xsZWN0aW9uQWN0aW9uKCkge1xuICAgICAgICAgIGlmIChpbml0UnVuKSB7XG4gICAgICAgICAgICBpbml0UnVuID0gZmFsc2U7XG4gICAgICAgICAgICBsaXN0ZW5lcihuZXdWYWx1ZSwgbmV3VmFsdWUsIHNlbGYpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsaXN0ZW5lcihuZXdWYWx1ZSwgdmVyeU9sZFZhbHVlLCBzZWxmKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBtYWtlIGEgY29weSBmb3IgdGhlIG5leHQgdGltZSBhIGNvbGxlY3Rpb24gaXMgY2hhbmdlZFxuICAgICAgICAgIGlmICh0cmFja1ZlcnlPbGRWYWx1ZSkge1xuICAgICAgICAgICAgaWYgKCFpc09iamVjdChuZXdWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgLy9wcmltaXRpdmVcbiAgICAgICAgICAgICAgdmVyeU9sZFZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXlMaWtlKG5ld1ZhbHVlKSkge1xuICAgICAgICAgICAgICB2ZXJ5T2xkVmFsdWUgPSBuZXcgQXJyYXkobmV3VmFsdWUubGVuZ3RoKTtcbiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXdWYWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZlcnlPbGRWYWx1ZVtpXSA9IG5ld1ZhbHVlW2ldO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgeyAvLyBpZiBvYmplY3RcbiAgICAgICAgICAgICAgdmVyeU9sZFZhbHVlID0ge307XG4gICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG5ld1ZhbHVlLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICB2ZXJ5T2xkVmFsdWVba2V5XSA9IG5ld1ZhbHVlW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuJHdhdGNoKGNoYW5nZURldGVjdG9yLCAkd2F0Y2hDb2xsZWN0aW9uQWN0aW9uKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0XG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogUHJvY2Vzc2VzIGFsbCBvZiB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoIHdhdGNoZXJzfSBvZiB0aGUgY3VycmVudCBzY29wZSBhbmRcbiAgICAgICAqIGl0cyBjaGlsZHJlbi4gQmVjYXVzZSBhIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaCB3YXRjaGVyfSdzIGxpc3RlbmVyIGNhbiBjaGFuZ2VcbiAgICAgICAqIHRoZSBtb2RlbCwgdGhlIGAkZGlnZXN0KClgIGtlZXBzIGNhbGxpbmcgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaCB3YXRjaGVyc31cbiAgICAgICAqIHVudGlsIG5vIG1vcmUgbGlzdGVuZXJzIGFyZSBmaXJpbmcuIFRoaXMgbWVhbnMgdGhhdCBpdCBpcyBwb3NzaWJsZSB0byBnZXQgaW50byBhbiBpbmZpbml0ZVxuICAgICAgICogbG9vcC4gVGhpcyBmdW5jdGlvbiB3aWxsIHRocm93IGAnTWF4aW11bSBpdGVyYXRpb24gbGltaXQgZXhjZWVkZWQuJ2AgaWYgdGhlIG51bWJlciBvZlxuICAgICAgICogaXRlcmF0aW9ucyBleGNlZWRzIDEwLlxuICAgICAgICpcbiAgICAgICAqIFVzdWFsbHksIHlvdSBkb24ndCBjYWxsIGAkZGlnZXN0KClgIGRpcmVjdGx5IGluXG4gICAgICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ29udHJvbGxlciBjb250cm9sbGVyc30gb3IgaW5cbiAgICAgICAqIHtAbGluayBuZy4kY29tcGlsZVByb3ZpZGVyI2RpcmVjdGl2ZSBkaXJlY3RpdmVzfS5cbiAgICAgICAqIEluc3RlYWQsIHlvdSBzaG91bGQgY2FsbCB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkYXBwbHkgJGFwcGx5KCl9ICh0eXBpY2FsbHkgZnJvbSB3aXRoaW5cbiAgICAgICAqIGEge0BsaW5rIG5nLiRjb21waWxlUHJvdmlkZXIjZGlyZWN0aXZlIGRpcmVjdGl2ZX0pLCB3aGljaCB3aWxsIGZvcmNlIGEgYCRkaWdlc3QoKWAuXG4gICAgICAgKlxuICAgICAgICogSWYgeW91IHdhbnQgdG8gYmUgbm90aWZpZWQgd2hlbmV2ZXIgYCRkaWdlc3QoKWAgaXMgY2FsbGVkLFxuICAgICAgICogeW91IGNhbiByZWdpc3RlciBhIGB3YXRjaEV4cHJlc3Npb25gIGZ1bmN0aW9uIHdpdGhcbiAgICAgICAqIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaCAkd2F0Y2goKX0gd2l0aCBubyBgbGlzdGVuZXJgLlxuICAgICAgICpcbiAgICAgICAqIEluIHVuaXQgdGVzdHMsIHlvdSBtYXkgbmVlZCB0byBjYWxsIGAkZGlnZXN0KClgIHRvIHNpbXVsYXRlIHRoZSBzY29wZSBsaWZlIGN5Y2xlLlxuICAgICAgICpcbiAgICAgICAqICMgRXhhbXBsZVxuICAgICAgICogYGBganNcbiAgICAgICAgICAgdmFyIHNjb3BlID0gLi4uO1xuICAgICAgICAgICBzY29wZS5uYW1lID0gJ21pc2tvJztcbiAgICAgICAgICAgc2NvcGUuY291bnRlciA9IDA7XG5cbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMCk7XG4gICAgICAgICAgIHNjb3BlLiR3YXRjaCgnbmFtZScsIGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgIHNjb3BlLmNvdW50ZXIgPSBzY29wZS5jb3VudGVyICsgMTtcbiAgICAgICAgICAgfSk7XG4gICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDApO1xuXG4gICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICAgLy8gdGhlIGxpc3RlbmVyIGlzIGFsd2F5cyBjYWxsZWQgZHVyaW5nIHRoZSBmaXJzdCAkZGlnZXN0IGxvb3AgYWZ0ZXIgaXQgd2FzIHJlZ2lzdGVyZWRcbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMSk7XG5cbiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICAvLyBidXQgbm93IGl0IHdpbGwgbm90IGJlIGNhbGxlZCB1bmxlc3MgdGhlIHZhbHVlIGNoYW5nZXNcbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMSk7XG5cbiAgICAgICAgICAgc2NvcGUubmFtZSA9ICdhZGFtJztcbiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgyKTtcbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqL1xuICAgICAgJGRpZ2VzdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB3YXRjaCwgdmFsdWUsIGxhc3QsXG4gICAgICAgICAgICB3YXRjaGVycyxcbiAgICAgICAgICAgIGxlbmd0aCxcbiAgICAgICAgICAgIGRpcnR5LCB0dGwgPSBUVEwsXG4gICAgICAgICAgICBuZXh0LCBjdXJyZW50LCB0YXJnZXQgPSB0aGlzLFxuICAgICAgICAgICAgd2F0Y2hMb2cgPSBbXSxcbiAgICAgICAgICAgIGxvZ0lkeCwgbG9nTXNnLCBhc3luY1Rhc2s7XG5cbiAgICAgICAgYmVnaW5QaGFzZSgnJGRpZ2VzdCcpO1xuICAgICAgICAvLyBDaGVjayBmb3IgY2hhbmdlcyB0byBicm93c2VyIHVybCB0aGF0IGhhcHBlbmVkIGluIHN5bmMgYmVmb3JlIHRoZSBjYWxsIHRvICRkaWdlc3RcbiAgICAgICAgJGJyb3dzZXIuJCRjaGVja1VybENoYW5nZSgpO1xuXG4gICAgICAgIGlmICh0aGlzID09PSAkcm9vdFNjb3BlICYmIGFwcGx5QXN5bmNJZCAhPT0gbnVsbCkge1xuICAgICAgICAgIC8vIElmIHRoaXMgaXMgdGhlIHJvb3Qgc2NvcGUsIGFuZCAkYXBwbHlBc3luYyBoYXMgc2NoZWR1bGVkIGEgZGVmZXJyZWQgJGFwcGx5KCksIHRoZW5cbiAgICAgICAgICAvLyBjYW5jZWwgdGhlIHNjaGVkdWxlZCAkYXBwbHkgYW5kIGZsdXNoIHRoZSBxdWV1ZSBvZiBleHByZXNzaW9ucyB0byBiZSBldmFsdWF0ZWQuXG4gICAgICAgICAgJGJyb3dzZXIuZGVmZXIuY2FuY2VsKGFwcGx5QXN5bmNJZCk7XG4gICAgICAgICAgZmx1c2hBcHBseUFzeW5jKCk7XG4gICAgICAgIH1cblxuICAgICAgICBsYXN0RGlydHlXYXRjaCA9IG51bGw7XG5cbiAgICAgICAgZG8geyAvLyBcIndoaWxlIGRpcnR5XCIgbG9vcFxuICAgICAgICAgIGRpcnR5ID0gZmFsc2U7XG4gICAgICAgICAgY3VycmVudCA9IHRhcmdldDtcblxuICAgICAgICAgIHdoaWxlIChhc3luY1F1ZXVlLmxlbmd0aCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgYXN5bmNUYXNrID0gYXN5bmNRdWV1ZS5zaGlmdCgpO1xuICAgICAgICAgICAgICBhc3luY1Rhc2suc2NvcGUuJGV2YWwoYXN5bmNUYXNrLmV4cHJlc3Npb24sIGFzeW5jVGFzay5sb2NhbHMpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3REaXJ0eVdhdGNoID0gbnVsbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0cmF2ZXJzZVNjb3Blc0xvb3A6XG4gICAgICAgICAgZG8geyAvLyBcInRyYXZlcnNlIHRoZSBzY29wZXNcIiBsb29wXG4gICAgICAgICAgICBpZiAoKHdhdGNoZXJzID0gY3VycmVudC4kJHdhdGNoZXJzKSkge1xuICAgICAgICAgICAgICAvLyBwcm9jZXNzIG91ciB3YXRjaGVzXG4gICAgICAgICAgICAgIGxlbmd0aCA9IHdhdGNoZXJzLmxlbmd0aDtcbiAgICAgICAgICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIHdhdGNoID0gd2F0Y2hlcnNbbGVuZ3RoXTtcbiAgICAgICAgICAgICAgICAgIC8vIE1vc3QgY29tbW9uIHdhdGNoZXMgYXJlIG9uIHByaW1pdGl2ZXMsIGluIHdoaWNoIGNhc2Ugd2UgY2FuIHNob3J0XG4gICAgICAgICAgICAgICAgICAvLyBjaXJjdWl0IGl0IHdpdGggPT09IG9wZXJhdG9yLCBvbmx5IHdoZW4gPT09IGZhaWxzIGRvIHdlIHVzZSAuZXF1YWxzXG4gICAgICAgICAgICAgICAgICBpZiAod2F0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCh2YWx1ZSA9IHdhdGNoLmdldChjdXJyZW50KSkgIT09IChsYXN0ID0gd2F0Y2gubGFzdCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICEod2F0Y2guZXFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGVxdWFscyh2YWx1ZSwgbGFzdClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIHR5cGVvZiBsYXN0ID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIGlzTmFOKHZhbHVlKSAmJiBpc05hTihsYXN0KSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgZGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgIGxhc3REaXJ0eVdhdGNoID0gd2F0Y2g7XG4gICAgICAgICAgICAgICAgICAgICAgd2F0Y2gubGFzdCA9IHdhdGNoLmVxID8gY29weSh2YWx1ZSwgbnVsbCkgOiB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICB3YXRjaC5mbih2YWx1ZSwgKChsYXN0ID09PSBpbml0V2F0Y2hWYWwpID8gdmFsdWUgOiBsYXN0KSwgY3VycmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHR0bCA8IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ0lkeCA9IDQgLSB0dGw7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXdhdGNoTG9nW2xvZ0lkeF0pIHdhdGNoTG9nW2xvZ0lkeF0gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhdGNoTG9nW2xvZ0lkeF0ucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1zZzogaXNGdW5jdGlvbih3YXRjaC5leHApID8gJ2ZuOiAnICsgKHdhdGNoLmV4cC5uYW1lIHx8IHdhdGNoLmV4cC50b1N0cmluZygpKSA6IHdhdGNoLmV4cCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3VmFsOiB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkVmFsOiBsYXN0XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAod2F0Y2ggPT09IGxhc3REaXJ0eVdhdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIG1vc3QgcmVjZW50bHkgZGlydHkgd2F0Y2hlciBpcyBub3cgY2xlYW4sIHNob3J0IGNpcmN1aXQgc2luY2UgdGhlIHJlbWFpbmluZyB3YXRjaGVyc1xuICAgICAgICAgICAgICAgICAgICAgIC8vIGhhdmUgYWxyZWFkeSBiZWVuIHRlc3RlZC5cbiAgICAgICAgICAgICAgICAgICAgICBkaXJ0eSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIHRyYXZlcnNlU2NvcGVzTG9vcDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJbnNhbml0eSBXYXJuaW5nOiBzY29wZSBkZXB0aC1maXJzdCB0cmF2ZXJzYWxcbiAgICAgICAgICAgIC8vIHllcywgdGhpcyBjb2RlIGlzIGEgYml0IGNyYXp5LCBidXQgaXQgd29ya3MgYW5kIHdlIGhhdmUgdGVzdHMgdG8gcHJvdmUgaXQhXG4gICAgICAgICAgICAvLyB0aGlzIHBpZWNlIHNob3VsZCBiZSBrZXB0IGluIHN5bmMgd2l0aCB0aGUgdHJhdmVyc2FsIGluICRicm9hZGNhc3RcbiAgICAgICAgICAgIGlmICghKG5leHQgPSAoY3VycmVudC4kJGNoaWxkSGVhZCB8fFxuICAgICAgICAgICAgICAgIChjdXJyZW50ICE9PSB0YXJnZXQgJiYgY3VycmVudC4kJG5leHRTaWJsaW5nKSkpKSB7XG4gICAgICAgICAgICAgIHdoaWxlIChjdXJyZW50ICE9PSB0YXJnZXQgJiYgIShuZXh0ID0gY3VycmVudC4kJG5leHRTaWJsaW5nKSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LiRwYXJlbnQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IHdoaWxlICgoY3VycmVudCA9IG5leHQpKTtcblxuICAgICAgICAgIC8vIGBicmVhayB0cmF2ZXJzZVNjb3Blc0xvb3A7YCB0YWtlcyB1cyB0byBoZXJlXG5cbiAgICAgICAgICBpZiAoKGRpcnR5IHx8IGFzeW5jUXVldWUubGVuZ3RoKSAmJiAhKHR0bC0tKSkge1xuICAgICAgICAgICAgY2xlYXJQaGFzZSgpO1xuICAgICAgICAgICAgdGhyb3cgJHJvb3RTY29wZU1pbkVycignaW5mZGlnJyxcbiAgICAgICAgICAgICAgICAnezB9ICRkaWdlc3QoKSBpdGVyYXRpb25zIHJlYWNoZWQuIEFib3J0aW5nIVxcbicgK1xuICAgICAgICAgICAgICAgICdXYXRjaGVycyBmaXJlZCBpbiB0aGUgbGFzdCA1IGl0ZXJhdGlvbnM6IHsxfScsXG4gICAgICAgICAgICAgICAgVFRMLCB3YXRjaExvZyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0gd2hpbGUgKGRpcnR5IHx8IGFzeW5jUXVldWUubGVuZ3RoKTtcblxuICAgICAgICBjbGVhclBoYXNlKCk7XG5cbiAgICAgICAgd2hpbGUgKHBvc3REaWdlc3RRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcG9zdERpZ2VzdFF1ZXVlLnNoaWZ0KCkoKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgZXZlbnRcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGRlc3Ryb3lcbiAgICAgICAqIEBldmVudFR5cGUgYnJvYWRjYXN0IG9uIHNjb3BlIGJlaW5nIGRlc3Ryb3llZFxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogQnJvYWRjYXN0ZWQgd2hlbiBhIHNjb3BlIGFuZCBpdHMgY2hpbGRyZW4gYXJlIGJlaW5nIGRlc3Ryb3llZC5cbiAgICAgICAqXG4gICAgICAgKiBOb3RlIHRoYXQsIGluIEFuZ3VsYXJKUywgdGhlcmUgaXMgYWxzbyBhIGAkZGVzdHJveWAgalF1ZXJ5IGV2ZW50LCB3aGljaCBjYW4gYmUgdXNlZCB0b1xuICAgICAgICogY2xlYW4gdXAgRE9NIGJpbmRpbmdzIGJlZm9yZSBhbiBlbGVtZW50IGlzIHJlbW92ZWQgZnJvbSB0aGUgRE9NLlxuICAgICAgICovXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkZGVzdHJveVxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFJlbW92ZXMgdGhlIGN1cnJlbnQgc2NvcGUgKGFuZCBhbGwgb2YgaXRzIGNoaWxkcmVuKSBmcm9tIHRoZSBwYXJlbnQgc2NvcGUuIFJlbW92YWwgaW1wbGllc1xuICAgICAgICogdGhhdCBjYWxscyB0byB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QoKX0gd2lsbCBubyBsb25nZXJcbiAgICAgICAqIHByb3BhZ2F0ZSB0byB0aGUgY3VycmVudCBzY29wZSBhbmQgaXRzIGNoaWxkcmVuLiBSZW1vdmFsIGFsc28gaW1wbGllcyB0aGF0IHRoZSBjdXJyZW50XG4gICAgICAgKiBzY29wZSBpcyBlbGlnaWJsZSBmb3IgZ2FyYmFnZSBjb2xsZWN0aW9uLlxuICAgICAgICpcbiAgICAgICAqIFRoZSBgJGRlc3Ryb3koKWAgaXMgdXN1YWxseSB1c2VkIGJ5IGRpcmVjdGl2ZXMgc3VjaCBhc1xuICAgICAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBuZ1JlcGVhdH0gZm9yIG1hbmFnaW5nIHRoZVxuICAgICAgICogdW5yb2xsaW5nIG9mIHRoZSBsb29wLlxuICAgICAgICpcbiAgICAgICAqIEp1c3QgYmVmb3JlIGEgc2NvcGUgaXMgZGVzdHJveWVkLCBhIGAkZGVzdHJveWAgZXZlbnQgaXMgYnJvYWRjYXN0ZWQgb24gdGhpcyBzY29wZS5cbiAgICAgICAqIEFwcGxpY2F0aW9uIGNvZGUgY2FuIHJlZ2lzdGVyIGEgYCRkZXN0cm95YCBldmVudCBoYW5kbGVyIHRoYXQgd2lsbCBnaXZlIGl0IGEgY2hhbmNlIHRvXG4gICAgICAgKiBwZXJmb3JtIGFueSBuZWNlc3NhcnkgY2xlYW51cC5cbiAgICAgICAqXG4gICAgICAgKiBOb3RlIHRoYXQsIGluIEFuZ3VsYXJKUywgdGhlcmUgaXMgYWxzbyBhIGAkZGVzdHJveWAgalF1ZXJ5IGV2ZW50LCB3aGljaCBjYW4gYmUgdXNlZCB0b1xuICAgICAgICogY2xlYW4gdXAgRE9NIGJpbmRpbmdzIGJlZm9yZSBhbiBlbGVtZW50IGlzIHJlbW92ZWQgZnJvbSB0aGUgRE9NLlxuICAgICAgICovXG4gICAgICAkZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIHdlIGNhbid0IGRlc3Ryb3kgdGhlIHJvb3Qgc2NvcGUgb3IgYSBzY29wZSB0aGF0IGhhcyBiZWVuIGFscmVhZHkgZGVzdHJveWVkXG4gICAgICAgIGlmICh0aGlzLiQkZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgIHZhciBwYXJlbnQgPSB0aGlzLiRwYXJlbnQ7XG5cbiAgICAgICAgdGhpcy4kYnJvYWRjYXN0KCckZGVzdHJveScpO1xuICAgICAgICB0aGlzLiQkZGVzdHJveWVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMgPT09ICRyb290U2NvcGUpIHJldHVybjtcblxuICAgICAgICBmb3IgKHZhciBldmVudE5hbWUgaW4gdGhpcy4kJGxpc3RlbmVyQ291bnQpIHtcbiAgICAgICAgICBkZWNyZW1lbnRMaXN0ZW5lckNvdW50KHRoaXMsIHRoaXMuJCRsaXN0ZW5lckNvdW50W2V2ZW50TmFtZV0sIGV2ZW50TmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzZXZlciBhbGwgdGhlIHJlZmVyZW5jZXMgdG8gcGFyZW50IHNjb3BlcyAoYWZ0ZXIgdGhpcyBjbGVhbnVwLCB0aGUgY3VycmVudCBzY29wZSBzaG91bGRcbiAgICAgICAgLy8gbm90IGJlIHJldGFpbmVkIGJ5IGFueSBvZiBvdXIgcmVmZXJlbmNlcyBhbmQgc2hvdWxkIGJlIGVsaWdpYmxlIGZvciBnYXJiYWdlIGNvbGxlY3Rpb24pXG4gICAgICAgIGlmIChwYXJlbnQuJCRjaGlsZEhlYWQgPT0gdGhpcykgcGFyZW50LiQkY2hpbGRIZWFkID0gdGhpcy4kJG5leHRTaWJsaW5nO1xuICAgICAgICBpZiAocGFyZW50LiQkY2hpbGRUYWlsID09IHRoaXMpIHBhcmVudC4kJGNoaWxkVGFpbCA9IHRoaXMuJCRwcmV2U2libGluZztcbiAgICAgICAgaWYgKHRoaXMuJCRwcmV2U2libGluZykgdGhpcy4kJHByZXZTaWJsaW5nLiQkbmV4dFNpYmxpbmcgPSB0aGlzLiQkbmV4dFNpYmxpbmc7XG4gICAgICAgIGlmICh0aGlzLiQkbmV4dFNpYmxpbmcpIHRoaXMuJCRuZXh0U2libGluZy4kJHByZXZTaWJsaW5nID0gdGhpcy4kJHByZXZTaWJsaW5nO1xuXG4gICAgICAgIC8vIERpc2FibGUgbGlzdGVuZXJzLCB3YXRjaGVycyBhbmQgYXBwbHkvZGlnZXN0IG1ldGhvZHNcbiAgICAgICAgdGhpcy4kZGVzdHJveSA9IHRoaXMuJGRpZ2VzdCA9IHRoaXMuJGFwcGx5ID0gdGhpcy4kZXZhbEFzeW5jID0gdGhpcy4kYXBwbHlBc3luYyA9IG5vb3A7XG4gICAgICAgIHRoaXMuJG9uID0gdGhpcy4kd2F0Y2ggPSB0aGlzLiR3YXRjaEdyb3VwID0gZnVuY3Rpb24oKSB7IHJldHVybiBub29wOyB9O1xuICAgICAgICB0aGlzLiQkbGlzdGVuZXJzID0ge307XG5cbiAgICAgICAgLy8gQWxsIG9mIHRoZSBjb2RlIGJlbG93IGlzIGJvZ3VzIGNvZGUgdGhhdCB3b3JrcyBhcm91bmQgVjgncyBtZW1vcnkgbGVhayB2aWEgb3B0aW1pemVkIGNvZGVcbiAgICAgICAgLy8gYW5kIGlubGluZSBjYWNoZXMuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIHNlZTpcbiAgICAgICAgLy8gLSBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MjA3MyNjMjZcbiAgICAgICAgLy8gLSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy82Nzk0I2lzc3VlY29tbWVudC0zODY0ODkwOVxuICAgICAgICAvLyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzEzMTMjaXNzdWVjb21tZW50LTEwMzc4NDUxXG5cbiAgICAgICAgdGhpcy4kcGFyZW50ID0gdGhpcy4kJG5leHRTaWJsaW5nID0gdGhpcy4kJHByZXZTaWJsaW5nID0gdGhpcy4kJGNoaWxkSGVhZCA9XG4gICAgICAgICAgICB0aGlzLiQkY2hpbGRUYWlsID0gdGhpcy4kcm9vdCA9IHRoaXMuJCR3YXRjaGVycyA9IG51bGw7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGV2YWxcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBFeGVjdXRlcyB0aGUgYGV4cHJlc3Npb25gIG9uIHRoZSBjdXJyZW50IHNjb3BlIGFuZCByZXR1cm5zIHRoZSByZXN1bHQuIEFueSBleGNlcHRpb25zIGluXG4gICAgICAgKiB0aGUgZXhwcmVzc2lvbiBhcmUgcHJvcGFnYXRlZCAodW5jYXVnaHQpLiBUaGlzIGlzIHVzZWZ1bCB3aGVuIGV2YWx1YXRpbmcgQW5ndWxhclxuICAgICAgICogZXhwcmVzc2lvbnMuXG4gICAgICAgKlxuICAgICAgICogIyBFeGFtcGxlXG4gICAgICAgKiBgYGBqc1xuICAgICAgICAgICB2YXIgc2NvcGUgPSBuZy4kcm9vdFNjb3BlLlNjb3BlKCk7XG4gICAgICAgICAgIHNjb3BlLmEgPSAxO1xuICAgICAgICAgICBzY29wZS5iID0gMjtcblxuICAgICAgICAgICBleHBlY3Qoc2NvcGUuJGV2YWwoJ2ErYicpKS50b0VxdWFsKDMpO1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuJGV2YWwoZnVuY3Rpb24oc2NvcGUpeyByZXR1cm4gc2NvcGUuYSArIHNjb3BlLmI7IH0pKS50b0VxdWFsKDMpO1xuICAgICAgICogYGBgXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHsoc3RyaW5nfGZ1bmN0aW9uKCkpPX0gZXhwcmVzc2lvbiBBbiBhbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQuXG4gICAgICAgKlxuICAgICAgICogICAgLSBgc3RyaW5nYDogZXhlY3V0ZSB1c2luZyB0aGUgcnVsZXMgYXMgZGVmaW5lZCBpbiAge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0uXG4gICAgICAgKiAgICAtIGBmdW5jdGlvbihzY29wZSlgOiBleGVjdXRlIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBjdXJyZW50IGBzY29wZWAgcGFyYW1ldGVyLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7KG9iamVjdCk9fSBsb2NhbHMgTG9jYWwgdmFyaWFibGVzIG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlcyBpbiBzY29wZS5cbiAgICAgICAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0IG9mIGV2YWx1YXRpbmcgdGhlIGV4cHJlc3Npb24uXG4gICAgICAgKi9cbiAgICAgICRldmFsOiBmdW5jdGlvbihleHByLCBsb2NhbHMpIHtcbiAgICAgICAgcmV0dXJuICRwYXJzZShleHByKSh0aGlzLCBsb2NhbHMpO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRldmFsQXN5bmNcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBFeGVjdXRlcyB0aGUgZXhwcmVzc2lvbiBvbiB0aGUgY3VycmVudCBzY29wZSBhdCBhIGxhdGVyIHBvaW50IGluIHRpbWUuXG4gICAgICAgKlxuICAgICAgICogVGhlIGAkZXZhbEFzeW5jYCBtYWtlcyBubyBndWFyYW50ZWVzIGFzIHRvIHdoZW4gdGhlIGBleHByZXNzaW9uYCB3aWxsIGJlIGV4ZWN1dGVkLCBvbmx5XG4gICAgICAgKiB0aGF0OlxuICAgICAgICpcbiAgICAgICAqICAgLSBpdCB3aWxsIGV4ZWN1dGUgYWZ0ZXIgdGhlIGZ1bmN0aW9uIHRoYXQgc2NoZWR1bGVkIHRoZSBldmFsdWF0aW9uIChwcmVmZXJhYmx5IGJlZm9yZSBET01cbiAgICAgICAqICAgICByZW5kZXJpbmcpLlxuICAgICAgICogICAtIGF0IGxlYXN0IG9uZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QgY3ljbGV9IHdpbGwgYmUgcGVyZm9ybWVkIGFmdGVyXG4gICAgICAgKiAgICAgYGV4cHJlc3Npb25gIGV4ZWN1dGlvbi5cbiAgICAgICAqXG4gICAgICAgKiBBbnkgZXhjZXB0aW9ucyBmcm9tIHRoZSBleGVjdXRpb24gb2YgdGhlIGV4cHJlc3Npb24gYXJlIGZvcndhcmRlZCB0byB0aGVcbiAgICAgICAqIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciAkZXhjZXB0aW9uSGFuZGxlcn0gc2VydmljZS5cbiAgICAgICAqXG4gICAgICAgKiBfX05vdGU6X18gaWYgdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgb3V0c2lkZSBvZiBhIGAkZGlnZXN0YCBjeWNsZSwgYSBuZXcgYCRkaWdlc3RgIGN5Y2xlXG4gICAgICAgKiB3aWxsIGJlIHNjaGVkdWxlZC4gSG93ZXZlciwgaXQgaXMgZW5jb3VyYWdlZCB0byBhbHdheXMgY2FsbCBjb2RlIHRoYXQgY2hhbmdlcyB0aGUgbW9kZWxcbiAgICAgICAqIGZyb20gd2l0aGluIGFuIGAkYXBwbHlgIGNhbGwuIFRoYXQgaW5jbHVkZXMgY29kZSBldmFsdWF0ZWQgdmlhIGAkZXZhbEFzeW5jYC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyhzdHJpbmd8ZnVuY3Rpb24oKSk9fSBleHByZXNzaW9uIEFuIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZC5cbiAgICAgICAqXG4gICAgICAgKiAgICAtIGBzdHJpbmdgOiBleGVjdXRlIHVzaW5nIHRoZSBydWxlcyBhcyBkZWZpbmVkIGluIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259LlxuICAgICAgICogICAgLSBgZnVuY3Rpb24oc2NvcGUpYDogZXhlY3V0ZSB0aGUgZnVuY3Rpb24gd2l0aCB0aGUgY3VycmVudCBgc2NvcGVgIHBhcmFtZXRlci5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyhvYmplY3QpPX0gbG9jYWxzIExvY2FsIHZhcmlhYmxlcyBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXMgaW4gc2NvcGUuXG4gICAgICAgKi9cbiAgICAgICRldmFsQXN5bmM6IGZ1bmN0aW9uKGV4cHIsIGxvY2Fscykge1xuICAgICAgICAvLyBpZiB3ZSBhcmUgb3V0c2lkZSBvZiBhbiAkZGlnZXN0IGxvb3AgYW5kIHRoaXMgaXMgdGhlIGZpcnN0IHRpbWUgd2UgYXJlIHNjaGVkdWxpbmcgYXN5bmNcbiAgICAgICAgLy8gdGFzayBhbHNvIHNjaGVkdWxlIGFzeW5jIGF1dG8tZmx1c2hcbiAgICAgICAgaWYgKCEkcm9vdFNjb3BlLiQkcGhhc2UgJiYgIWFzeW5jUXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgJGJyb3dzZXIuZGVmZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoYXN5bmNRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBhc3luY1F1ZXVlLnB1c2goe3Njb3BlOiB0aGlzLCBleHByZXNzaW9uOiBleHByLCBsb2NhbHM6IGxvY2Fsc30pO1xuICAgICAgfSxcblxuICAgICAgJCRwb3N0RGlnZXN0OiBmdW5jdGlvbihmbikge1xuICAgICAgICBwb3N0RGlnZXN0UXVldWUucHVzaChmbik7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGFwcGx5XG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogYCRhcHBseSgpYCBpcyB1c2VkIHRvIGV4ZWN1dGUgYW4gZXhwcmVzc2lvbiBpbiBhbmd1bGFyIGZyb20gb3V0c2lkZSBvZiB0aGUgYW5ndWxhclxuICAgICAgICogZnJhbWV3b3JrLiAoRm9yIGV4YW1wbGUgZnJvbSBicm93c2VyIERPTSBldmVudHMsIHNldFRpbWVvdXQsIFhIUiBvciB0aGlyZCBwYXJ0eSBsaWJyYXJpZXMpLlxuICAgICAgICogQmVjYXVzZSB3ZSBhcmUgY2FsbGluZyBpbnRvIHRoZSBhbmd1bGFyIGZyYW1ld29yayB3ZSBuZWVkIHRvIHBlcmZvcm0gcHJvcGVyIHNjb3BlIGxpZmVcbiAgICAgICAqIGN5Y2xlIG9mIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciBleGNlcHRpb24gaGFuZGxpbmd9LFxuICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCBleGVjdXRpbmcgd2F0Y2hlc30uXG4gICAgICAgKlxuICAgICAgICogIyMgTGlmZSBjeWNsZVxuICAgICAgICpcbiAgICAgICAqICMgUHNldWRvLUNvZGUgb2YgYCRhcHBseSgpYFxuICAgICAgICogYGBganNcbiAgICAgICAgICAgZnVuY3Rpb24gJGFwcGx5KGV4cHIpIHtcbiAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgcmV0dXJuICRldmFsKGV4cHIpO1xuICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAkcm9vdC4kZGlnZXN0KCk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICB9XG4gICAgICAgKiBgYGBcbiAgICAgICAqXG4gICAgICAgKlxuICAgICAgICogU2NvcGUncyBgJGFwcGx5KClgIG1ldGhvZCB0cmFuc2l0aW9ucyB0aHJvdWdoIHRoZSBmb2xsb3dpbmcgc3RhZ2VzOlxuICAgICAgICpcbiAgICAgICAqIDEuIFRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyBleGVjdXRlZCB1c2luZyB0aGVcbiAgICAgICAqICAgIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRldmFsICRldmFsKCl9IG1ldGhvZC5cbiAgICAgICAqIDIuIEFueSBleGNlcHRpb25zIGZyb20gdGhlIGV4ZWN1dGlvbiBvZiB0aGUgZXhwcmVzc2lvbiBhcmUgZm9yd2FyZGVkIHRvIHRoZVxuICAgICAgICogICAge0BsaW5rIG5nLiRleGNlcHRpb25IYW5kbGVyICRleGNlcHRpb25IYW5kbGVyfSBzZXJ2aWNlLlxuICAgICAgICogMy4gVGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaCB3YXRjaH0gbGlzdGVuZXJzIGFyZSBmaXJlZCBpbW1lZGlhdGVseSBhZnRlciB0aGVcbiAgICAgICAqICAgIGV4cHJlc3Npb24gd2FzIGV4ZWN1dGVkIHVzaW5nIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QoKX0gbWV0aG9kLlxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyhzdHJpbmd8ZnVuY3Rpb24oKSk9fSBleHAgQW4gYW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkLlxuICAgICAgICpcbiAgICAgICAqICAgIC0gYHN0cmluZ2A6IGV4ZWN1dGUgdXNpbmcgdGhlIHJ1bGVzIGFzIGRlZmluZWQgaW4ge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0uXG4gICAgICAgKiAgICAtIGBmdW5jdGlvbihzY29wZSlgOiBleGVjdXRlIHRoZSBmdW5jdGlvbiB3aXRoIGN1cnJlbnQgYHNjb3BlYCBwYXJhbWV0ZXIuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMgeyp9IFRoZSByZXN1bHQgb2YgZXZhbHVhdGluZyB0aGUgZXhwcmVzc2lvbi5cbiAgICAgICAqL1xuICAgICAgJGFwcGx5OiBmdW5jdGlvbihleHByKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYmVnaW5QaGFzZSgnJGFwcGx5Jyk7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuJGV2YWwoZXhwcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBjbGVhclBoYXNlKCk7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICRyb290U2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkYXBwbHlBc3luY1xuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFNjaGVkdWxlIHRoZSBpbnZvY2F0aW9uIG9mICRhcHBseSB0byBvY2N1ciBhdCBhIGxhdGVyIHRpbWUuIFRoZSBhY3R1YWwgdGltZSBkaWZmZXJlbmNlXG4gICAgICAgKiB2YXJpZXMgYWNyb3NzIGJyb3dzZXJzLCBidXQgaXMgdHlwaWNhbGx5IGFyb3VuZCB+MTAgbWlsbGlzZWNvbmRzLlxuICAgICAgICpcbiAgICAgICAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gcXVldWUgdXAgbXVsdGlwbGUgZXhwcmVzc2lvbnMgd2hpY2ggbmVlZCB0byBiZSBldmFsdWF0ZWQgaW4gdGhlIHNhbWVcbiAgICAgICAqIGRpZ2VzdC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyhzdHJpbmd8ZnVuY3Rpb24oKSk9fSBleHAgQW4gYW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkLlxuICAgICAgICpcbiAgICAgICAqICAgIC0gYHN0cmluZ2A6IGV4ZWN1dGUgdXNpbmcgdGhlIHJ1bGVzIGFzIGRlZmluZWQgaW4ge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0uXG4gICAgICAgKiAgICAtIGBmdW5jdGlvbihzY29wZSlgOiBleGVjdXRlIHRoZSBmdW5jdGlvbiB3aXRoIGN1cnJlbnQgYHNjb3BlYCBwYXJhbWV0ZXIuXG4gICAgICAgKi9cbiAgICAgICRhcHBseUFzeW5jOiBmdW5jdGlvbihleHByKSB7XG4gICAgICAgIHZhciBzY29wZSA9IHRoaXM7XG4gICAgICAgIGV4cHIgJiYgYXBwbHlBc3luY1F1ZXVlLnB1c2goJGFwcGx5QXN5bmNFeHByZXNzaW9uKTtcbiAgICAgICAgc2NoZWR1bGVBcHBseUFzeW5jKCk7XG5cbiAgICAgICAgZnVuY3Rpb24gJGFwcGx5QXN5bmNFeHByZXNzaW9uKCkge1xuICAgICAgICAgIHNjb3BlLiRldmFsKGV4cHIpO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJG9uXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogTGlzdGVucyBvbiBldmVudHMgb2YgYSBnaXZlbiB0eXBlLiBTZWUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGVtaXQgJGVtaXR9IGZvclxuICAgICAgICogZGlzY3Vzc2lvbiBvZiBldmVudCBsaWZlIGN5Y2xlLlxuICAgICAgICpcbiAgICAgICAqIFRoZSBldmVudCBsaXN0ZW5lciBmdW5jdGlvbiBmb3JtYXQgaXM6IGBmdW5jdGlvbihldmVudCwgYXJncy4uLilgLiBUaGUgYGV2ZW50YCBvYmplY3RcbiAgICAgICAqIHBhc3NlZCBpbnRvIHRoZSBsaXN0ZW5lciBoYXMgdGhlIGZvbGxvd2luZyBhdHRyaWJ1dGVzOlxuICAgICAgICpcbiAgICAgICAqICAgLSBgdGFyZ2V0U2NvcGVgIC0gYHtTY29wZX1gOiB0aGUgc2NvcGUgb24gd2hpY2ggdGhlIGV2ZW50IHdhcyBgJGVtaXRgLWVkIG9yXG4gICAgICAgKiAgICAgYCRicm9hZGNhc3RgLWVkLlxuICAgICAgICogICAtIGBjdXJyZW50U2NvcGVgIC0gYHtTY29wZX1gOiB0aGUgc2NvcGUgdGhhdCBpcyBjdXJyZW50bHkgaGFuZGxpbmcgdGhlIGV2ZW50LiBPbmNlIHRoZVxuICAgICAgICogICAgIGV2ZW50IHByb3BhZ2F0ZXMgdGhyb3VnaCB0aGUgc2NvcGUgaGllcmFyY2h5LCB0aGlzIHByb3BlcnR5IGlzIHNldCB0byBudWxsLlxuICAgICAgICogICAtIGBuYW1lYCAtIGB7c3RyaW5nfWA6IG5hbWUgb2YgdGhlIGV2ZW50LlxuICAgICAgICogICAtIGBzdG9wUHJvcGFnYXRpb25gIC0gYHtmdW5jdGlvbj19YDogY2FsbGluZyBgc3RvcFByb3BhZ2F0aW9uYCBmdW5jdGlvbiB3aWxsIGNhbmNlbFxuICAgICAgICogICAgIGZ1cnRoZXIgZXZlbnQgcHJvcGFnYXRpb24gKGF2YWlsYWJsZSBvbmx5IGZvciBldmVudHMgdGhhdCB3ZXJlIGAkZW1pdGAtZWQpLlxuICAgICAgICogICAtIGBwcmV2ZW50RGVmYXVsdGAgLSBge2Z1bmN0aW9ufWA6IGNhbGxpbmcgYHByZXZlbnREZWZhdWx0YCBzZXRzIGBkZWZhdWx0UHJldmVudGVkYCBmbGFnXG4gICAgICAgKiAgICAgdG8gdHJ1ZS5cbiAgICAgICAqICAgLSBgZGVmYXVsdFByZXZlbnRlZGAgLSBge2Jvb2xlYW59YDogdHJ1ZSBpZiBgcHJldmVudERlZmF1bHRgIHdhcyBjYWxsZWQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRXZlbnQgbmFtZSB0byBsaXN0ZW4gb24uXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKGV2ZW50LCAuLi5hcmdzKX0gbGlzdGVuZXIgRnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSBldmVudCBpcyBlbWl0dGVkLlxuICAgICAgICogQHJldHVybnMge2Z1bmN0aW9uKCl9IFJldHVybnMgYSBkZXJlZ2lzdHJhdGlvbiBmdW5jdGlvbiBmb3IgdGhpcyBsaXN0ZW5lci5cbiAgICAgICAqL1xuICAgICAgJG9uOiBmdW5jdGlvbihuYW1lLCBsaXN0ZW5lcikge1xuICAgICAgICB2YXIgbmFtZWRMaXN0ZW5lcnMgPSB0aGlzLiQkbGlzdGVuZXJzW25hbWVdO1xuICAgICAgICBpZiAoIW5hbWVkTGlzdGVuZXJzKSB7XG4gICAgICAgICAgdGhpcy4kJGxpc3RlbmVyc1tuYW1lXSA9IG5hbWVkTGlzdGVuZXJzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgbmFtZWRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG5cbiAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgaWYgKCFjdXJyZW50LiQkbGlzdGVuZXJDb3VudFtuYW1lXSkge1xuICAgICAgICAgICAgY3VycmVudC4kJGxpc3RlbmVyQ291bnRbbmFtZV0gPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjdXJyZW50LiQkbGlzdGVuZXJDb3VudFtuYW1lXSsrO1xuICAgICAgICB9IHdoaWxlICgoY3VycmVudCA9IGN1cnJlbnQuJHBhcmVudCkpO1xuXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBpbmRleE9mTGlzdGVuZXIgPSBuYW1lZExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgICAgICBpZiAoaW5kZXhPZkxpc3RlbmVyICE9PSAtMSkge1xuICAgICAgICAgICAgbmFtZWRMaXN0ZW5lcnNbaW5kZXhPZkxpc3RlbmVyXSA9IG51bGw7XG4gICAgICAgICAgICBkZWNyZW1lbnRMaXN0ZW5lckNvdW50KHNlbGYsIDEsIG5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRlbWl0XG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogRGlzcGF0Y2hlcyBhbiBldmVudCBgbmFtZWAgdXB3YXJkcyB0aHJvdWdoIHRoZSBzY29wZSBoaWVyYXJjaHkgbm90aWZ5aW5nIHRoZVxuICAgICAgICogcmVnaXN0ZXJlZCB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb259IGxpc3RlbmVycy5cbiAgICAgICAqXG4gICAgICAgKiBUaGUgZXZlbnQgbGlmZSBjeWNsZSBzdGFydHMgYXQgdGhlIHNjb3BlIG9uIHdoaWNoIGAkZW1pdGAgd2FzIGNhbGxlZC4gQWxsXG4gICAgICAgKiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb24gbGlzdGVuZXJzfSBsaXN0ZW5pbmcgZm9yIGBuYW1lYCBldmVudCBvbiB0aGlzIHNjb3BlIGdldFxuICAgICAgICogbm90aWZpZWQuIEFmdGVyd2FyZHMsIHRoZSBldmVudCB0cmF2ZXJzZXMgdXB3YXJkcyB0b3dhcmQgdGhlIHJvb3Qgc2NvcGUgYW5kIGNhbGxzIGFsbFxuICAgICAgICogcmVnaXN0ZXJlZCBsaXN0ZW5lcnMgYWxvbmcgdGhlIHdheS4gVGhlIGV2ZW50IHdpbGwgc3RvcCBwcm9wYWdhdGluZyBpZiBvbmUgb2YgdGhlIGxpc3RlbmVyc1xuICAgICAgICogY2FuY2VscyBpdC5cbiAgICAgICAqXG4gICAgICAgKiBBbnkgZXhjZXB0aW9uIGVtaXR0ZWQgZnJvbSB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9uIGxpc3RlbmVyc30gd2lsbCBiZSBwYXNzZWRcbiAgICAgICAqIG9udG8gdGhlIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciAkZXhjZXB0aW9uSGFuZGxlcn0gc2VydmljZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBFdmVudCBuYW1lIHRvIGVtaXQuXG4gICAgICAgKiBAcGFyYW0gey4uLip9IGFyZ3MgT3B0aW9uYWwgb25lIG9yIG1vcmUgYXJndW1lbnRzIHdoaWNoIHdpbGwgYmUgcGFzc2VkIG9udG8gdGhlIGV2ZW50IGxpc3RlbmVycy5cbiAgICAgICAqIEByZXR1cm4ge09iamVjdH0gRXZlbnQgb2JqZWN0IChzZWUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9ufSkuXG4gICAgICAgKi9cbiAgICAgICRlbWl0OiBmdW5jdGlvbihuYW1lLCBhcmdzKSB7XG4gICAgICAgIHZhciBlbXB0eSA9IFtdLFxuICAgICAgICAgICAgbmFtZWRMaXN0ZW5lcnMsXG4gICAgICAgICAgICBzY29wZSA9IHRoaXMsXG4gICAgICAgICAgICBzdG9wUHJvcGFnYXRpb24gPSBmYWxzZSxcbiAgICAgICAgICAgIGV2ZW50ID0ge1xuICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICB0YXJnZXRTY29wZTogc2NvcGUsXG4gICAgICAgICAgICAgIHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7c3RvcFByb3BhZ2F0aW9uID0gdHJ1ZTt9LFxuICAgICAgICAgICAgICBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQuZGVmYXVsdFByZXZlbnRlZCA9IHRydWU7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGRlZmF1bHRQcmV2ZW50ZWQ6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGlzdGVuZXJBcmdzID0gY29uY2F0KFtldmVudF0sIGFyZ3VtZW50cywgMSksXG4gICAgICAgICAgICBpLCBsZW5ndGg7XG5cbiAgICAgICAgZG8ge1xuICAgICAgICAgIG5hbWVkTGlzdGVuZXJzID0gc2NvcGUuJCRsaXN0ZW5lcnNbbmFtZV0gfHwgZW1wdHk7XG4gICAgICAgICAgZXZlbnQuY3VycmVudFNjb3BlID0gc2NvcGU7XG4gICAgICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gbmFtZWRMaXN0ZW5lcnMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcblxuICAgICAgICAgICAgLy8gaWYgbGlzdGVuZXJzIHdlcmUgZGVyZWdpc3RlcmVkLCBkZWZyYWdtZW50IHRoZSBhcnJheVxuICAgICAgICAgICAgaWYgKCFuYW1lZExpc3RlbmVyc1tpXSkge1xuICAgICAgICAgICAgICBuYW1lZExpc3RlbmVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgIGktLTtcbiAgICAgICAgICAgICAgbGVuZ3RoLS07XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgLy9hbGxvdyBhbGwgbGlzdGVuZXJzIGF0dGFjaGVkIHRvIHRoZSBjdXJyZW50IHNjb3BlIHRvIHJ1blxuICAgICAgICAgICAgICBuYW1lZExpc3RlbmVyc1tpXS5hcHBseShudWxsLCBsaXN0ZW5lckFyZ3MpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy9pZiBhbnkgbGlzdGVuZXIgb24gdGhlIGN1cnJlbnQgc2NvcGUgc3RvcHMgcHJvcGFnYXRpb24sIHByZXZlbnQgYnViYmxpbmdcbiAgICAgICAgICBpZiAoc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICAgICAgICBldmVudC5jdXJyZW50U2NvcGUgPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvL3RyYXZlcnNlIHVwd2FyZHNcbiAgICAgICAgICBzY29wZSA9IHNjb3BlLiRwYXJlbnQ7XG4gICAgICAgIH0gd2hpbGUgKHNjb3BlKTtcblxuICAgICAgICBldmVudC5jdXJyZW50U2NvcGUgPSBudWxsO1xuXG4gICAgICAgIHJldHVybiBldmVudDtcbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRicm9hZGNhc3RcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBEaXNwYXRjaGVzIGFuIGV2ZW50IGBuYW1lYCBkb3dud2FyZHMgdG8gYWxsIGNoaWxkIHNjb3BlcyAoYW5kIHRoZWlyIGNoaWxkcmVuKSBub3RpZnlpbmcgdGhlXG4gICAgICAgKiByZWdpc3RlcmVkIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbn0gbGlzdGVuZXJzLlxuICAgICAgICpcbiAgICAgICAqIFRoZSBldmVudCBsaWZlIGN5Y2xlIHN0YXJ0cyBhdCB0aGUgc2NvcGUgb24gd2hpY2ggYCRicm9hZGNhc3RgIHdhcyBjYWxsZWQuIEFsbFxuICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9uIGxpc3RlbmVyc30gbGlzdGVuaW5nIGZvciBgbmFtZWAgZXZlbnQgb24gdGhpcyBzY29wZSBnZXRcbiAgICAgICAqIG5vdGlmaWVkLiBBZnRlcndhcmRzLCB0aGUgZXZlbnQgcHJvcGFnYXRlcyB0byBhbGwgZGlyZWN0IGFuZCBpbmRpcmVjdCBzY29wZXMgb2YgdGhlIGN1cnJlbnRcbiAgICAgICAqIHNjb3BlIGFuZCBjYWxscyBhbGwgcmVnaXN0ZXJlZCBsaXN0ZW5lcnMgYWxvbmcgdGhlIHdheS4gVGhlIGV2ZW50IGNhbm5vdCBiZSBjYW5jZWxlZC5cbiAgICAgICAqXG4gICAgICAgKiBBbnkgZXhjZXB0aW9uIGVtaXR0ZWQgZnJvbSB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9uIGxpc3RlbmVyc30gd2lsbCBiZSBwYXNzZWRcbiAgICAgICAqIG9udG8gdGhlIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciAkZXhjZXB0aW9uSGFuZGxlcn0gc2VydmljZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBFdmVudCBuYW1lIHRvIGJyb2FkY2FzdC5cbiAgICAgICAqIEBwYXJhbSB7Li4uKn0gYXJncyBPcHRpb25hbCBvbmUgb3IgbW9yZSBhcmd1bWVudHMgd2hpY2ggd2lsbCBiZSBwYXNzZWQgb250byB0aGUgZXZlbnQgbGlzdGVuZXJzLlxuICAgICAgICogQHJldHVybiB7T2JqZWN0fSBFdmVudCBvYmplY3QsIHNlZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb259XG4gICAgICAgKi9cbiAgICAgICRicm9hZGNhc3Q6IGZ1bmN0aW9uKG5hbWUsIGFyZ3MpIHtcbiAgICAgICAgdmFyIHRhcmdldCA9IHRoaXMsXG4gICAgICAgICAgICBjdXJyZW50ID0gdGFyZ2V0LFxuICAgICAgICAgICAgbmV4dCA9IHRhcmdldCxcbiAgICAgICAgICAgIGV2ZW50ID0ge1xuICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICB0YXJnZXRTY29wZTogdGFyZ2V0LFxuICAgICAgICAgICAgICBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQuZGVmYXVsdFByZXZlbnRlZCA9IHRydWU7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGRlZmF1bHRQcmV2ZW50ZWQ6IGZhbHNlXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIGlmICghdGFyZ2V0LiQkbGlzdGVuZXJDb3VudFtuYW1lXSkgcmV0dXJuIGV2ZW50O1xuXG4gICAgICAgIHZhciBsaXN0ZW5lckFyZ3MgPSBjb25jYXQoW2V2ZW50XSwgYXJndW1lbnRzLCAxKSxcbiAgICAgICAgICAgIGxpc3RlbmVycywgaSwgbGVuZ3RoO1xuXG4gICAgICAgIC8vZG93biB3aGlsZSB5b3UgY2FuLCB0aGVuIHVwIGFuZCBuZXh0IHNpYmxpbmcgb3IgdXAgYW5kIG5leHQgc2libGluZyB1bnRpbCBiYWNrIGF0IHJvb3RcbiAgICAgICAgd2hpbGUgKChjdXJyZW50ID0gbmV4dCkpIHtcbiAgICAgICAgICBldmVudC5jdXJyZW50U2NvcGUgPSBjdXJyZW50O1xuICAgICAgICAgIGxpc3RlbmVycyA9IGN1cnJlbnQuJCRsaXN0ZW5lcnNbbmFtZV0gfHwgW107XG4gICAgICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gbGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAvLyBpZiBsaXN0ZW5lcnMgd2VyZSBkZXJlZ2lzdGVyZWQsIGRlZnJhZ21lbnQgdGhlIGFycmF5XG4gICAgICAgICAgICBpZiAoIWxpc3RlbmVyc1tpXSkge1xuICAgICAgICAgICAgICBsaXN0ZW5lcnMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICBpLS07XG4gICAgICAgICAgICAgIGxlbmd0aC0tO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgbGlzdGVuZXJzW2ldLmFwcGx5KG51bGwsIGxpc3RlbmVyQXJncyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIEluc2FuaXR5IFdhcm5pbmc6IHNjb3BlIGRlcHRoLWZpcnN0IHRyYXZlcnNhbFxuICAgICAgICAgIC8vIHllcywgdGhpcyBjb2RlIGlzIGEgYml0IGNyYXp5LCBidXQgaXQgd29ya3MgYW5kIHdlIGhhdmUgdGVzdHMgdG8gcHJvdmUgaXQhXG4gICAgICAgICAgLy8gdGhpcyBwaWVjZSBzaG91bGQgYmUga2VwdCBpbiBzeW5jIHdpdGggdGhlIHRyYXZlcnNhbCBpbiAkZGlnZXN0XG4gICAgICAgICAgLy8gKHRob3VnaCBpdCBkaWZmZXJzIGR1ZSB0byBoYXZpbmcgdGhlIGV4dHJhIGNoZWNrIGZvciAkJGxpc3RlbmVyQ291bnQpXG4gICAgICAgICAgaWYgKCEobmV4dCA9ICgoY3VycmVudC4kJGxpc3RlbmVyQ291bnRbbmFtZV0gJiYgY3VycmVudC4kJGNoaWxkSGVhZCkgfHxcbiAgICAgICAgICAgICAgKGN1cnJlbnQgIT09IHRhcmdldCAmJiBjdXJyZW50LiQkbmV4dFNpYmxpbmcpKSkpIHtcbiAgICAgICAgICAgIHdoaWxlIChjdXJyZW50ICE9PSB0YXJnZXQgJiYgIShuZXh0ID0gY3VycmVudC4kJG5leHRTaWJsaW5nKSkge1xuICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC4kcGFyZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGV2ZW50LmN1cnJlbnRTY29wZSA9IG51bGw7XG4gICAgICAgIHJldHVybiBldmVudDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyICRyb290U2NvcGUgPSBuZXcgU2NvcGUoKTtcblxuICAgIC8vVGhlIGludGVybmFsIHF1ZXVlcy4gRXhwb3NlIHRoZW0gb24gdGhlICRyb290U2NvcGUgZm9yIGRlYnVnZ2luZy90ZXN0aW5nIHB1cnBvc2VzLlxuICAgIHZhciBhc3luY1F1ZXVlID0gJHJvb3RTY29wZS4kJGFzeW5jUXVldWUgPSBbXTtcbiAgICB2YXIgcG9zdERpZ2VzdFF1ZXVlID0gJHJvb3RTY29wZS4kJHBvc3REaWdlc3RRdWV1ZSA9IFtdO1xuICAgIHZhciBhcHBseUFzeW5jUXVldWUgPSAkcm9vdFNjb3BlLiQkYXBwbHlBc3luY1F1ZXVlID0gW107XG5cbiAgICByZXR1cm4gJHJvb3RTY29wZTtcblxuXG4gICAgZnVuY3Rpb24gYmVnaW5QaGFzZShwaGFzZSkge1xuICAgICAgaWYgKCRyb290U2NvcGUuJCRwaGFzZSkge1xuICAgICAgICB0aHJvdyAkcm9vdFNjb3BlTWluRXJyKCdpbnByb2cnLCAnezB9IGFscmVhZHkgaW4gcHJvZ3Jlc3MnLCAkcm9vdFNjb3BlLiQkcGhhc2UpO1xuICAgICAgfVxuXG4gICAgICAkcm9vdFNjb3BlLiQkcGhhc2UgPSBwaGFzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhclBoYXNlKCkge1xuICAgICAgJHJvb3RTY29wZS4kJHBoYXNlID0gbnVsbDtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGRlY3JlbWVudExpc3RlbmVyQ291bnQoY3VycmVudCwgY291bnQsIG5hbWUpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgY3VycmVudC4kJGxpc3RlbmVyQ291bnRbbmFtZV0gLT0gY291bnQ7XG5cbiAgICAgICAgaWYgKGN1cnJlbnQuJCRsaXN0ZW5lckNvdW50W25hbWVdID09PSAwKSB7XG4gICAgICAgICAgZGVsZXRlIGN1cnJlbnQuJCRsaXN0ZW5lckNvdW50W25hbWVdO1xuICAgICAgICB9XG4gICAgICB9IHdoaWxlICgoY3VycmVudCA9IGN1cnJlbnQuJHBhcmVudCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGZ1bmN0aW9uIHVzZWQgYXMgYW4gaW5pdGlhbCB2YWx1ZSBmb3Igd2F0Y2hlcnMuXG4gICAgICogYmVjYXVzZSBpdCdzIHVuaXF1ZSB3ZSBjYW4gZWFzaWx5IHRlbGwgaXQgYXBhcnQgZnJvbSBvdGhlciB2YWx1ZXNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0V2F0Y2hWYWwoKSB7fVxuXG4gICAgZnVuY3Rpb24gZmx1c2hBcHBseUFzeW5jKCkge1xuICAgICAgd2hpbGUgKGFwcGx5QXN5bmNRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBhcHBseUFzeW5jUXVldWUuc2hpZnQoKSgpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGFwcGx5QXN5bmNJZCA9IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2NoZWR1bGVBcHBseUFzeW5jKCkge1xuICAgICAgaWYgKGFwcGx5QXN5bmNJZCA9PT0gbnVsbCkge1xuICAgICAgICBhcHBseUFzeW5jSWQgPSAkYnJvd3Nlci5kZWZlcihmdW5jdGlvbigpIHtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRhcHBseShmbHVzaEFwcGx5QXN5bmMpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1dO1xufVxuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICogUHJpdmF0ZSBzZXJ2aWNlIHRvIHNhbml0aXplIHVyaXMgZm9yIGxpbmtzIGFuZCBpbWFnZXMuIFVzZWQgYnkgJGNvbXBpbGUgYW5kICRzYW5pdGl6ZS5cbiAqL1xuZnVuY3Rpb24gJCRTYW5pdGl6ZVVyaVByb3ZpZGVyKCkge1xuICB2YXIgYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSAvXlxccyooaHR0cHM/fGZ0cHxtYWlsdG98dGVsfGZpbGUpOi8sXG4gICAgaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0ID0gL15cXHMqKChodHRwcz98ZnRwfGZpbGV8YmxvYik6fGRhdGE6aW1hZ2VcXC8pLztcblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJldHJpZXZlcyBvciBvdmVycmlkZXMgdGhlIGRlZmF1bHQgcmVndWxhciBleHByZXNzaW9uIHRoYXQgaXMgdXNlZCBmb3Igd2hpdGVsaXN0aW5nIG9mIHNhZmVcbiAgICogdXJscyBkdXJpbmcgYVtocmVmXSBzYW5pdGl6YXRpb24uXG4gICAqXG4gICAqIFRoZSBzYW5pdGl6YXRpb24gaXMgYSBzZWN1cml0eSBtZWFzdXJlIGFpbWVkIGF0IHByZXZlbnQgWFNTIGF0dGFja3MgdmlhIGh0bWwgbGlua3MuXG4gICAqXG4gICAqIEFueSB1cmwgYWJvdXQgdG8gYmUgYXNzaWduZWQgdG8gYVtocmVmXSB2aWEgZGF0YS1iaW5kaW5nIGlzIGZpcnN0IG5vcm1hbGl6ZWQgYW5kIHR1cm5lZCBpbnRvXG4gICAqIGFuIGFic29sdXRlIHVybC4gQWZ0ZXJ3YXJkcywgdGhlIHVybCBpcyBtYXRjaGVkIGFnYWluc3QgdGhlIGBhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdGBcbiAgICogcmVndWxhciBleHByZXNzaW9uLiBJZiBhIG1hdGNoIGlzIGZvdW5kLCB0aGUgb3JpZ2luYWwgdXJsIGlzIHdyaXR0ZW4gaW50byB0aGUgZG9tLiBPdGhlcndpc2UsXG4gICAqIHRoZSBhYnNvbHV0ZSB1cmwgaXMgcHJlZml4ZWQgd2l0aCBgJ3Vuc2FmZTonYCBzdHJpbmcgYW5kIG9ubHkgdGhlbiBpcyBpdCB3cml0dGVuIGludG8gdGhlIERPTS5cbiAgICpcbiAgICogQHBhcmFtIHtSZWdFeHA9fSByZWdleHAgTmV3IHJlZ2V4cCB0byB3aGl0ZWxpc3QgdXJscyB3aXRoLlxuICAgKiBAcmV0dXJucyB7UmVnRXhwfG5nLiRjb21waWxlUHJvdmlkZXJ9IEN1cnJlbnQgUmVnRXhwIGlmIGNhbGxlZCB3aXRob3V0IHZhbHVlIG9yIHNlbGYgZm9yXG4gICAqICAgIGNoYWluaW5nIG90aGVyd2lzZS5cbiAgICovXG4gIHRoaXMuYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSBmdW5jdGlvbihyZWdleHApIHtcbiAgICBpZiAoaXNEZWZpbmVkKHJlZ2V4cCkpIHtcbiAgICAgIGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0ID0gcmVnZXhwO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdDtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmV0cmlldmVzIG9yIG92ZXJyaWRlcyB0aGUgZGVmYXVsdCByZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBpcyB1c2VkIGZvciB3aGl0ZWxpc3Rpbmcgb2Ygc2FmZVxuICAgKiB1cmxzIGR1cmluZyBpbWdbc3JjXSBzYW5pdGl6YXRpb24uXG4gICAqXG4gICAqIFRoZSBzYW5pdGl6YXRpb24gaXMgYSBzZWN1cml0eSBtZWFzdXJlIGFpbWVkIGF0IHByZXZlbnQgWFNTIGF0dGFja3MgdmlhIGh0bWwgbGlua3MuXG4gICAqXG4gICAqIEFueSB1cmwgYWJvdXQgdG8gYmUgYXNzaWduZWQgdG8gaW1nW3NyY10gdmlhIGRhdGEtYmluZGluZyBpcyBmaXJzdCBub3JtYWxpemVkIGFuZCB0dXJuZWQgaW50b1xuICAgKiBhbiBhYnNvbHV0ZSB1cmwuIEFmdGVyd2FyZHMsIHRoZSB1cmwgaXMgbWF0Y2hlZCBhZ2FpbnN0IHRoZSBgaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0YFxuICAgKiByZWd1bGFyIGV4cHJlc3Npb24uIElmIGEgbWF0Y2ggaXMgZm91bmQsIHRoZSBvcmlnaW5hbCB1cmwgaXMgd3JpdHRlbiBpbnRvIHRoZSBkb20uIE90aGVyd2lzZSxcbiAgICogdGhlIGFic29sdXRlIHVybCBpcyBwcmVmaXhlZCB3aXRoIGAndW5zYWZlOidgIHN0cmluZyBhbmQgb25seSB0aGVuIGlzIGl0IHdyaXR0ZW4gaW50byB0aGUgRE9NLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlZ0V4cD19IHJlZ2V4cCBOZXcgcmVnZXhwIHRvIHdoaXRlbGlzdCB1cmxzIHdpdGguXG4gICAqIEByZXR1cm5zIHtSZWdFeHB8bmcuJGNvbXBpbGVQcm92aWRlcn0gQ3VycmVudCBSZWdFeHAgaWYgY2FsbGVkIHdpdGhvdXQgdmFsdWUgb3Igc2VsZiBmb3JcbiAgICogICAgY2hhaW5pbmcgb3RoZXJ3aXNlLlxuICAgKi9cbiAgdGhpcy5pbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSBmdW5jdGlvbihyZWdleHApIHtcbiAgICBpZiAoaXNEZWZpbmVkKHJlZ2V4cCkpIHtcbiAgICAgIGltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCA9IHJlZ2V4cDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0O1xuICB9O1xuXG4gIHRoaXMuJGdldCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBzYW5pdGl6ZVVyaSh1cmksIGlzSW1hZ2UpIHtcbiAgICAgIHZhciByZWdleCA9IGlzSW1hZ2UgPyBpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3QgOiBhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdDtcbiAgICAgIHZhciBub3JtYWxpemVkVmFsO1xuICAgICAgbm9ybWFsaXplZFZhbCA9IHVybFJlc29sdmUodXJpKS5ocmVmO1xuICAgICAgaWYgKG5vcm1hbGl6ZWRWYWwgIT09ICcnICYmICFub3JtYWxpemVkVmFsLm1hdGNoKHJlZ2V4KSkge1xuICAgICAgICByZXR1cm4gJ3Vuc2FmZTonICsgbm9ybWFsaXplZFZhbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1cmk7XG4gICAgfTtcbiAgfTtcbn1cblxudmFyICRzY2VNaW5FcnIgPSBtaW5FcnIoJyRzY2UnKTtcblxudmFyIFNDRV9DT05URVhUUyA9IHtcbiAgSFRNTDogJ2h0bWwnLFxuICBDU1M6ICdjc3MnLFxuICBVUkw6ICd1cmwnLFxuICAvLyBSRVNPVVJDRV9VUkwgaXMgYSBzdWJ0eXBlIG9mIFVSTCB1c2VkIGluIGNvbnRleHRzIHdoZXJlIGEgcHJpdmlsZWdlZCByZXNvdXJjZSBpcyBzb3VyY2VkIGZyb20gYVxuICAvLyB1cmwuICAoZS5nLiBuZy1pbmNsdWRlLCBzY3JpcHQgc3JjLCB0ZW1wbGF0ZVVybClcbiAgUkVTT1VSQ0VfVVJMOiAncmVzb3VyY2VVcmwnLFxuICBKUzogJ2pzJ1xufTtcblxuLy8gSGVscGVyIGZ1bmN0aW9ucyBmb2xsb3cuXG5cbmZ1bmN0aW9uIGFkanVzdE1hdGNoZXIobWF0Y2hlcikge1xuICBpZiAobWF0Y2hlciA9PT0gJ3NlbGYnKSB7XG4gICAgcmV0dXJuIG1hdGNoZXI7XG4gIH0gZWxzZSBpZiAoaXNTdHJpbmcobWF0Y2hlcikpIHtcbiAgICAvLyBTdHJpbmdzIG1hdGNoIGV4YWN0bHkgZXhjZXB0IGZvciAyIHdpbGRjYXJkcyAtICcqJyBhbmQgJyoqJy5cbiAgICAvLyAnKicgbWF0Y2hlcyBhbnkgY2hhcmFjdGVyIGV4Y2VwdCB0aG9zZSBmcm9tIHRoZSBzZXQgJzovLj8mJy5cbiAgICAvLyAnKionIG1hdGNoZXMgYW55IGNoYXJhY3RlciAobGlrZSAuKiBpbiBhIFJlZ0V4cCkuXG4gICAgLy8gTW9yZSB0aGFuIDIgKidzIHJhaXNlcyBhbiBlcnJvciBhcyBpdCdzIGlsbCBkZWZpbmVkLlxuICAgIGlmIChtYXRjaGVyLmluZGV4T2YoJyoqKicpID4gLTEpIHtcbiAgICAgIHRocm93ICRzY2VNaW5FcnIoJ2l3Y2FyZCcsXG4gICAgICAgICAgJ0lsbGVnYWwgc2VxdWVuY2UgKioqIGluIHN0cmluZyBtYXRjaGVyLiAgU3RyaW5nOiB7MH0nLCBtYXRjaGVyKTtcbiAgICB9XG4gICAgbWF0Y2hlciA9IGVzY2FwZUZvclJlZ2V4cChtYXRjaGVyKS5cbiAgICAgICAgICAgICAgICAgIHJlcGxhY2UoJ1xcXFwqXFxcXConLCAnLionKS5cbiAgICAgICAgICAgICAgICAgIHJlcGxhY2UoJ1xcXFwqJywgJ1teOi8uPyY7XSonKTtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cCgnXicgKyBtYXRjaGVyICsgJyQnKTtcbiAgfSBlbHNlIGlmIChpc1JlZ0V4cChtYXRjaGVyKSkge1xuICAgIC8vIFRoZSBvbmx5IG90aGVyIHR5cGUgb2YgbWF0Y2hlciBhbGxvd2VkIGlzIGEgUmVnZXhwLlxuICAgIC8vIE1hdGNoIGVudGlyZSBVUkwgLyBkaXNhbGxvdyBwYXJ0aWFsIG1hdGNoZXMuXG4gICAgLy8gRmxhZ3MgYXJlIHJlc2V0IChpLmUuIG5vIGdsb2JhbCwgaWdub3JlQ2FzZSBvciBtdWx0aWxpbmUpXG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoJ14nICsgbWF0Y2hlci5zb3VyY2UgKyAnJCcpO1xuICB9IGVsc2Uge1xuICAgIHRocm93ICRzY2VNaW5FcnIoJ2ltYXRjaGVyJyxcbiAgICAgICAgJ01hdGNoZXJzIG1heSBvbmx5IGJlIFwic2VsZlwiLCBzdHJpbmcgcGF0dGVybnMgb3IgUmVnRXhwIG9iamVjdHMnKTtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGFkanVzdE1hdGNoZXJzKG1hdGNoZXJzKSB7XG4gIHZhciBhZGp1c3RlZE1hdGNoZXJzID0gW107XG4gIGlmIChpc0RlZmluZWQobWF0Y2hlcnMpKSB7XG4gICAgZm9yRWFjaChtYXRjaGVycywgZnVuY3Rpb24obWF0Y2hlcikge1xuICAgICAgYWRqdXN0ZWRNYXRjaGVycy5wdXNoKGFkanVzdE1hdGNoZXIobWF0Y2hlcikpO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBhZGp1c3RlZE1hdGNoZXJzO1xufVxuXG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRzY2VEZWxlZ2F0ZVxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBgJHNjZURlbGVnYXRlYCBpcyBhIHNlcnZpY2UgdGhhdCBpcyB1c2VkIGJ5IHRoZSBgJHNjZWAgc2VydmljZSB0byBwcm92aWRlIHtAbGluayBuZy4kc2NlIFN0cmljdFxuICogQ29udGV4dHVhbCBFc2NhcGluZyAoU0NFKX0gc2VydmljZXMgdG8gQW5ndWxhckpTLlxuICpcbiAqIFR5cGljYWxseSwgeW91IHdvdWxkIGNvbmZpZ3VyZSBvciBvdmVycmlkZSB0aGUge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSAkc2NlRGVsZWdhdGV9IGluc3RlYWQgb2ZcbiAqIHRoZSBgJHNjZWAgc2VydmljZSB0byBjdXN0b21pemUgdGhlIHdheSBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyB3b3JrcyBpbiBBbmd1bGFySlMuICBUaGlzIGlzXG4gKiBiZWNhdXNlLCB3aGlsZSB0aGUgYCRzY2VgIHByb3ZpZGVzIG51bWVyb3VzIHNob3J0aGFuZCBtZXRob2RzLCBldGMuLCB5b3UgcmVhbGx5IG9ubHkgbmVlZCB0b1xuICogb3ZlcnJpZGUgMyBjb3JlIGZ1bmN0aW9ucyAoYHRydXN0QXNgLCBgZ2V0VHJ1c3RlZGAgYW5kIGB2YWx1ZU9mYCkgdG8gcmVwbGFjZSB0aGUgd2F5IHRoaW5nc1xuICogd29yayBiZWNhdXNlIGAkc2NlYCBkZWxlZ2F0ZXMgdG8gYCRzY2VEZWxlZ2F0ZWAgZm9yIHRoZXNlIG9wZXJhdGlvbnMuXG4gKlxuICogUmVmZXIge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyICRzY2VEZWxlZ2F0ZVByb3ZpZGVyfSB0byBjb25maWd1cmUgdGhpcyBzZXJ2aWNlLlxuICpcbiAqIFRoZSBkZWZhdWx0IGluc3RhbmNlIG9mIGAkc2NlRGVsZWdhdGVgIHNob3VsZCB3b3JrIG91dCBvZiB0aGUgYm94IHdpdGggbGl0dGxlIHBhaW4uICBXaGlsZSB5b3VcbiAqIGNhbiBvdmVycmlkZSBpdCBjb21wbGV0ZWx5IHRvIGNoYW5nZSB0aGUgYmVoYXZpb3Igb2YgYCRzY2VgLCB0aGUgY29tbW9uIGNhc2Ugd291bGRcbiAqIGludm9sdmUgY29uZmlndXJpbmcgdGhlIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciAkc2NlRGVsZWdhdGVQcm92aWRlcn0gaW5zdGVhZCBieSBzZXR0aW5nXG4gKiB5b3VyIG93biB3aGl0ZWxpc3RzIGFuZCBibGFja2xpc3RzIGZvciB0cnVzdGluZyBVUkxzIHVzZWQgZm9yIGxvYWRpbmcgQW5ndWxhckpTIHJlc291cmNlcyBzdWNoIGFzXG4gKiB0ZW1wbGF0ZXMuICBSZWZlciB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxXaGl0ZWxpc3RcbiAqICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsV2hpdGVsaXN0fSBhbmQge0BsaW5rXG4gKiBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybEJsYWNrbGlzdCAkc2NlRGVsZWdhdGVQcm92aWRlci5yZXNvdXJjZVVybEJsYWNrbGlzdH1cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJHNjZURlbGVnYXRlUHJvdmlkZXJcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFRoZSBgJHNjZURlbGVnYXRlUHJvdmlkZXJgIHByb3ZpZGVyIGFsbG93cyBkZXZlbG9wZXJzIHRvIGNvbmZpZ3VyZSB0aGUge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVxuICogJHNjZURlbGVnYXRlfSBzZXJ2aWNlLiAgVGhpcyBhbGxvd3Mgb25lIHRvIGdldC9zZXQgdGhlIHdoaXRlbGlzdHMgYW5kIGJsYWNrbGlzdHMgdXNlZCB0byBlbnN1cmVcbiAqIHRoYXQgdGhlIFVSTHMgdXNlZCBmb3Igc291cmNpbmcgQW5ndWxhciB0ZW1wbGF0ZXMgYXJlIHNhZmUuICBSZWZlciB7QGxpbmtcbiAqIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsV2hpdGVsaXN0ICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsV2hpdGVsaXN0fSBhbmRcbiAqIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybEJsYWNrbGlzdCAkc2NlRGVsZWdhdGVQcm92aWRlci5yZXNvdXJjZVVybEJsYWNrbGlzdH1cbiAqXG4gKiBGb3IgdGhlIGdlbmVyYWwgZGV0YWlscyBhYm91dCB0aGlzIHNlcnZpY2UgaW4gQW5ndWxhciwgcmVhZCB0aGUgbWFpbiBwYWdlIGZvciB7QGxpbmsgbmcuJHNjZVxuICogU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgKFNDRSl9LlxuICpcbiAqICoqRXhhbXBsZSoqOiAgQ29uc2lkZXIgdGhlIGZvbGxvd2luZyBjYXNlLiA8YSBuYW1lPVwiZXhhbXBsZVwiPjwvYT5cbiAqXG4gKiAtIHlvdXIgYXBwIGlzIGhvc3RlZCBhdCB1cmwgYGh0dHA6Ly9teWFwcC5leGFtcGxlLmNvbS9gXG4gKiAtIGJ1dCBzb21lIG9mIHlvdXIgdGVtcGxhdGVzIGFyZSBob3N0ZWQgb24gb3RoZXIgZG9tYWlucyB5b3UgY29udHJvbCBzdWNoIGFzXG4gKiAgIGBodHRwOi8vc3J2MDEuYXNzZXRzLmV4YW1wbGUuY29tL2AswqAgYGh0dHA6Ly9zcnYwMi5hc3NldHMuZXhhbXBsZS5jb20vYCwgZXRjLlxuICogLSBhbmQgeW91IGhhdmUgYW4gb3BlbiByZWRpcmVjdCBhdCBgaHR0cDovL215YXBwLmV4YW1wbGUuY29tL2NsaWNrVGhydT8uLi5gLlxuICpcbiAqIEhlcmUgaXMgd2hhdCBhIHNlY3VyZSBjb25maWd1cmF0aW9uIGZvciB0aGlzIHNjZW5hcmlvIG1pZ2h0IGxvb2sgbGlrZTpcbiAqXG4gKiBgYGBcbiAqICBhbmd1bGFyLm1vZHVsZSgnbXlBcHAnLCBbXSkuY29uZmlnKGZ1bmN0aW9uKCRzY2VEZWxlZ2F0ZVByb3ZpZGVyKSB7XG4gKiAgICAkc2NlRGVsZWdhdGVQcm92aWRlci5yZXNvdXJjZVVybFdoaXRlbGlzdChbXG4gKiAgICAgIC8vIEFsbG93IHNhbWUgb3JpZ2luIHJlc291cmNlIGxvYWRzLlxuICogICAgICAnc2VsZicsXG4gKiAgICAgIC8vIEFsbG93IGxvYWRpbmcgZnJvbSBvdXIgYXNzZXRzIGRvbWFpbi4gIE5vdGljZSB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuICogYW5kICoqLlxuICogICAgICAnaHR0cDovL3NydiouYXNzZXRzLmV4YW1wbGUuY29tLyoqJ1xuICogICAgXSk7XG4gKlxuICogICAgLy8gVGhlIGJsYWNrbGlzdCBvdmVycmlkZXMgdGhlIHdoaXRlbGlzdCBzbyB0aGUgb3BlbiByZWRpcmVjdCBoZXJlIGlzIGJsb2NrZWQuXG4gKiAgICAkc2NlRGVsZWdhdGVQcm92aWRlci5yZXNvdXJjZVVybEJsYWNrbGlzdChbXG4gKiAgICAgICdodHRwOi8vbXlhcHAuZXhhbXBsZS5jb20vY2xpY2tUaHJ1KionXG4gKiAgICBdKTtcbiAqICB9KTtcbiAqIGBgYFxuICovXG5cbmZ1bmN0aW9uICRTY2VEZWxlZ2F0ZVByb3ZpZGVyKCkge1xuICB0aGlzLlNDRV9DT05URVhUUyA9IFNDRV9DT05URVhUUztcblxuICAvLyBSZXNvdXJjZSBVUkxzIGNhbiBhbHNvIGJlIHRydXN0ZWQgYnkgcG9saWN5LlxuICB2YXIgcmVzb3VyY2VVcmxXaGl0ZWxpc3QgPSBbJ3NlbGYnXSxcbiAgICAgIHJlc291cmNlVXJsQmxhY2tsaXN0ID0gW107XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxXaGl0ZWxpc3RcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheT19IHdoaXRlbGlzdCBXaGVuIHByb3ZpZGVkLCByZXBsYWNlcyB0aGUgcmVzb3VyY2VVcmxXaGl0ZWxpc3Qgd2l0aCB0aGUgdmFsdWVcbiAgICogICAgIHByb3ZpZGVkLiAgVGhpcyBtdXN0IGJlIGFuIGFycmF5IG9yIG51bGwuICBBIHNuYXBzaG90IG9mIHRoaXMgYXJyYXkgaXMgdXNlZCBzbyBmdXJ0aGVyXG4gICAqICAgICBjaGFuZ2VzIHRvIHRoZSBhcnJheSBhcmUgaWdub3JlZC5cbiAgICpcbiAgICogICAgIEZvbGxvdyB7QGxpbmsgbmcuJHNjZSNyZXNvdXJjZVVybFBhdHRlcm5JdGVtIHRoaXMgbGlua30gZm9yIGEgZGVzY3JpcHRpb24gb2YgdGhlIGl0ZW1zXG4gICAqICAgICBhbGxvd2VkIGluIHRoaXMgYXJyYXkuXG4gICAqXG4gICAqICAgICBOb3RlOiAqKmFuIGVtcHR5IHdoaXRlbGlzdCBhcnJheSB3aWxsIGJsb2NrIGFsbCBVUkxzKiohXG4gICAqXG4gICAqIEByZXR1cm4ge0FycmF5fSB0aGUgY3VycmVudGx5IHNldCB3aGl0ZWxpc3QgYXJyYXkuXG4gICAqXG4gICAqIFRoZSAqKmRlZmF1bHQgdmFsdWUqKiB3aGVuIG5vIHdoaXRlbGlzdCBoYXMgYmVlbiBleHBsaWNpdGx5IHNldCBpcyBgWydzZWxmJ11gIGFsbG93aW5nIG9ubHlcbiAgICogc2FtZSBvcmlnaW4gcmVzb3VyY2UgcmVxdWVzdHMuXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzL0dldHMgdGhlIHdoaXRlbGlzdCBvZiB0cnVzdGVkIHJlc291cmNlIFVSTHMuXG4gICAqL1xuICB0aGlzLnJlc291cmNlVXJsV2hpdGVsaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmVzb3VyY2VVcmxXaGl0ZWxpc3QgPSBhZGp1c3RNYXRjaGVycyh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXNvdXJjZVVybFdoaXRlbGlzdDtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybEJsYWNrbGlzdFxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5PX0gYmxhY2tsaXN0IFdoZW4gcHJvdmlkZWQsIHJlcGxhY2VzIHRoZSByZXNvdXJjZVVybEJsYWNrbGlzdCB3aXRoIHRoZSB2YWx1ZVxuICAgKiAgICAgcHJvdmlkZWQuICBUaGlzIG11c3QgYmUgYW4gYXJyYXkgb3IgbnVsbC4gIEEgc25hcHNob3Qgb2YgdGhpcyBhcnJheSBpcyB1c2VkIHNvIGZ1cnRoZXJcbiAgICogICAgIGNoYW5nZXMgdG8gdGhlIGFycmF5IGFyZSBpZ25vcmVkLlxuICAgKlxuICAgKiAgICAgRm9sbG93IHtAbGluayBuZy4kc2NlI3Jlc291cmNlVXJsUGF0dGVybkl0ZW0gdGhpcyBsaW5rfSBmb3IgYSBkZXNjcmlwdGlvbiBvZiB0aGUgaXRlbXNcbiAgICogICAgIGFsbG93ZWQgaW4gdGhpcyBhcnJheS5cbiAgICpcbiAgICogICAgIFRoZSB0eXBpY2FsIHVzYWdlIGZvciB0aGUgYmxhY2tsaXN0IGlzIHRvICoqYmxvY2tcbiAgICogICAgIFtvcGVuIHJlZGlyZWN0c10oaHR0cDovL2N3ZS5taXRyZS5vcmcvZGF0YS9kZWZpbml0aW9ucy82MDEuaHRtbCkqKiBzZXJ2ZWQgYnkgeW91ciBkb21haW4gYXNcbiAgICogICAgIHRoZXNlIHdvdWxkIG90aGVyd2lzZSBiZSB0cnVzdGVkIGJ1dCBhY3R1YWxseSByZXR1cm4gY29udGVudCBmcm9tIHRoZSByZWRpcmVjdGVkIGRvbWFpbi5cbiAgICpcbiAgICogICAgIEZpbmFsbHksICoqdGhlIGJsYWNrbGlzdCBvdmVycmlkZXMgdGhlIHdoaXRlbGlzdCoqIGFuZCBoYXMgdGhlIGZpbmFsIHNheS5cbiAgICpcbiAgICogQHJldHVybiB7QXJyYXl9IHRoZSBjdXJyZW50bHkgc2V0IGJsYWNrbGlzdCBhcnJheS5cbiAgICpcbiAgICogVGhlICoqZGVmYXVsdCB2YWx1ZSoqIHdoZW4gbm8gd2hpdGVsaXN0IGhhcyBiZWVuIGV4cGxpY2l0bHkgc2V0IGlzIHRoZSBlbXB0eSBhcnJheSAoaS5lLiB0aGVyZVxuICAgKiBpcyBubyBibGFja2xpc3QuKVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cy9HZXRzIHRoZSBibGFja2xpc3Qgb2YgdHJ1c3RlZCByZXNvdXJjZSBVUkxzLlxuICAgKi9cblxuICB0aGlzLnJlc291cmNlVXJsQmxhY2tsaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmVzb3VyY2VVcmxCbGFja2xpc3QgPSBhZGp1c3RNYXRjaGVycyh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXNvdXJjZVVybEJsYWNrbGlzdDtcbiAgfTtcblxuICB0aGlzLiRnZXQgPSBbJyRpbmplY3RvcicsIGZ1bmN0aW9uKCRpbmplY3Rvcikge1xuXG4gICAgdmFyIGh0bWxTYW5pdGl6ZXIgPSBmdW5jdGlvbiBodG1sU2FuaXRpemVyKGh0bWwpIHtcbiAgICAgIHRocm93ICRzY2VNaW5FcnIoJ3Vuc2FmZScsICdBdHRlbXB0aW5nIHRvIHVzZSBhbiB1bnNhZmUgdmFsdWUgaW4gYSBzYWZlIGNvbnRleHQuJyk7XG4gICAgfTtcblxuICAgIGlmICgkaW5qZWN0b3IuaGFzKCckc2FuaXRpemUnKSkge1xuICAgICAgaHRtbFNhbml0aXplciA9ICRpbmplY3Rvci5nZXQoJyRzYW5pdGl6ZScpO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gbWF0Y2hVcmwobWF0Y2hlciwgcGFyc2VkVXJsKSB7XG4gICAgICBpZiAobWF0Y2hlciA9PT0gJ3NlbGYnKSB7XG4gICAgICAgIHJldHVybiB1cmxJc1NhbWVPcmlnaW4ocGFyc2VkVXJsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRlZmluaXRlbHkgYSByZWdleC4gIFNlZSBhZGp1c3RNYXRjaGVycygpXG4gICAgICAgIHJldHVybiAhIW1hdGNoZXIuZXhlYyhwYXJzZWRVcmwuaHJlZik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNSZXNvdXJjZVVybEFsbG93ZWRCeVBvbGljeSh1cmwpIHtcbiAgICAgIHZhciBwYXJzZWRVcmwgPSB1cmxSZXNvbHZlKHVybC50b1N0cmluZygpKTtcbiAgICAgIHZhciBpLCBuLCBhbGxvd2VkID0gZmFsc2U7XG4gICAgICAvLyBFbnN1cmUgdGhhdCBhdCBsZWFzdCBvbmUgaXRlbSBmcm9tIHRoZSB3aGl0ZWxpc3QgYWxsb3dzIHRoaXMgdXJsLlxuICAgICAgZm9yIChpID0gMCwgbiA9IHJlc291cmNlVXJsV2hpdGVsaXN0Lmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICBpZiAobWF0Y2hVcmwocmVzb3VyY2VVcmxXaGl0ZWxpc3RbaV0sIHBhcnNlZFVybCkpIHtcbiAgICAgICAgICBhbGxvd2VkID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGFsbG93ZWQpIHtcbiAgICAgICAgLy8gRW5zdXJlIHRoYXQgbm8gaXRlbSBmcm9tIHRoZSBibGFja2xpc3QgYmxvY2tlZCB0aGlzIHVybC5cbiAgICAgICAgZm9yIChpID0gMCwgbiA9IHJlc291cmNlVXJsQmxhY2tsaXN0Lmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgIGlmIChtYXRjaFVybChyZXNvdXJjZVVybEJsYWNrbGlzdFtpXSwgcGFyc2VkVXJsKSkge1xuICAgICAgICAgICAgYWxsb3dlZCA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYWxsb3dlZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5lcmF0ZUhvbGRlclR5cGUoQmFzZSkge1xuICAgICAgdmFyIGhvbGRlclR5cGUgPSBmdW5jdGlvbiBUcnVzdGVkVmFsdWVIb2xkZXJUeXBlKHRydXN0ZWRWYWx1ZSkge1xuICAgICAgICB0aGlzLiQkdW53cmFwVHJ1c3RlZFZhbHVlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHRydXN0ZWRWYWx1ZTtcbiAgICAgICAgfTtcbiAgICAgIH07XG4gICAgICBpZiAoQmFzZSkge1xuICAgICAgICBob2xkZXJUeXBlLnByb3RvdHlwZSA9IG5ldyBCYXNlKCk7XG4gICAgICB9XG4gICAgICBob2xkZXJUeXBlLnByb3RvdHlwZS52YWx1ZU9mID0gZnVuY3Rpb24gc2NlVmFsdWVPZigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJCR1bndyYXBUcnVzdGVkVmFsdWUoKTtcbiAgICAgIH07XG4gICAgICBob2xkZXJUeXBlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHNjZVRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4kJHVud3JhcFRydXN0ZWRWYWx1ZSgpLnRvU3RyaW5nKCk7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIGhvbGRlclR5cGU7XG4gICAgfVxuXG4gICAgdmFyIHRydXN0ZWRWYWx1ZUhvbGRlckJhc2UgPSBnZW5lcmF0ZUhvbGRlclR5cGUoKSxcbiAgICAgICAgYnlUeXBlID0ge307XG5cbiAgICBieVR5cGVbU0NFX0NPTlRFWFRTLkhUTUxdID0gZ2VuZXJhdGVIb2xkZXJUeXBlKHRydXN0ZWRWYWx1ZUhvbGRlckJhc2UpO1xuICAgIGJ5VHlwZVtTQ0VfQ09OVEVYVFMuQ1NTXSA9IGdlbmVyYXRlSG9sZGVyVHlwZSh0cnVzdGVkVmFsdWVIb2xkZXJCYXNlKTtcbiAgICBieVR5cGVbU0NFX0NPTlRFWFRTLlVSTF0gPSBnZW5lcmF0ZUhvbGRlclR5cGUodHJ1c3RlZFZhbHVlSG9sZGVyQmFzZSk7XG4gICAgYnlUeXBlW1NDRV9DT05URVhUUy5KU10gPSBnZW5lcmF0ZUhvbGRlclR5cGUodHJ1c3RlZFZhbHVlSG9sZGVyQmFzZSk7XG4gICAgYnlUeXBlW1NDRV9DT05URVhUUy5SRVNPVVJDRV9VUkxdID0gZ2VuZXJhdGVIb2xkZXJUeXBlKGJ5VHlwZVtTQ0VfQ09OVEVYVFMuVVJMXSk7XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZURlbGVnYXRlI3RydXN0QXNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgaXMgdHJ1c3RlZCBieSBhbmd1bGFyIGZvciB1c2UgaW4gc3BlY2lmaWVkIHN0cmljdFxuICAgICAqIGNvbnRleHR1YWwgZXNjYXBpbmcgY29udGV4dHMgKHN1Y2ggYXMgbmctYmluZC1odG1sLCBuZy1pbmNsdWRlLCBhbnkgc3JjXG4gICAgICogYXR0cmlidXRlIGludGVycG9sYXRpb24sIGFueSBkb20gZXZlbnQgYmluZGluZyBhdHRyaWJ1dGUgaW50ZXJwb2xhdGlvblxuICAgICAqIHN1Y2ggYXMgZm9yIG9uY2xpY2ssICBldGMuKSB0aGF0IHVzZXMgdGhlIHByb3ZpZGVkIHZhbHVlLlxuICAgICAqIFNlZSB7QGxpbmsgbmcuJHNjZSAkc2NlfSBmb3IgZW5hYmxpbmcgc3RyaWN0IGNvbnRleHR1YWwgZXNjYXBpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUaGUga2luZCBvZiBjb250ZXh0IGluIHdoaWNoIHRoaXMgdmFsdWUgaXMgc2FmZSBmb3IgdXNlLiAgZS5nLiB1cmwsXG4gICAgICogICByZXNvdXJjZVVybCwgaHRtbCwganMgYW5kIGNzcy5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0aGF0IHRoYXQgc2hvdWxkIGJlIGNvbnNpZGVyZWQgdHJ1c3RlZC9zYWZlLlxuICAgICAqIEByZXR1cm5zIHsqfSBBIHZhbHVlIHRoYXQgY2FuIGJlIHVzZWQgdG8gc3RhbmQgaW4gZm9yIHRoZSBwcm92aWRlZCBgdmFsdWVgIGluIHBsYWNlc1xuICAgICAqIHdoZXJlIEFuZ3VsYXIgZXhwZWN0cyBhICRzY2UudHJ1c3RBcygpIHJldHVybiB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cnVzdEFzKHR5cGUsIHRydXN0ZWRWYWx1ZSkge1xuICAgICAgdmFyIENvbnN0cnVjdG9yID0gKGJ5VHlwZS5oYXNPd25Qcm9wZXJ0eSh0eXBlKSA/IGJ5VHlwZVt0eXBlXSA6IG51bGwpO1xuICAgICAgaWYgKCFDb25zdHJ1Y3Rvcikge1xuICAgICAgICB0aHJvdyAkc2NlTWluRXJyKCdpY29udGV4dCcsXG4gICAgICAgICAgICAnQXR0ZW1wdGVkIHRvIHRydXN0IGEgdmFsdWUgaW4gaW52YWxpZCBjb250ZXh0LiBDb250ZXh0OiB7MH07IFZhbHVlOiB7MX0nLFxuICAgICAgICAgICAgdHlwZSwgdHJ1c3RlZFZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmICh0cnVzdGVkVmFsdWUgPT09IG51bGwgfHwgdHJ1c3RlZFZhbHVlID09PSB1bmRlZmluZWQgfHwgdHJ1c3RlZFZhbHVlID09PSAnJykge1xuICAgICAgICByZXR1cm4gdHJ1c3RlZFZhbHVlO1xuICAgICAgfVxuICAgICAgLy8gQWxsIHRoZSBjdXJyZW50IGNvbnRleHRzIGluIFNDRV9DT05URVhUUyBoYXBwZW4gdG8gYmUgc3RyaW5ncy4gIEluIG9yZGVyIHRvIGF2b2lkIHRydXN0aW5nXG4gICAgICAvLyBtdXRhYmxlIG9iamVjdHMsIHdlIGVuc3VyZSBoZXJlIHRoYXQgdGhlIHZhbHVlIHBhc3NlZCBpbiBpcyBhY3R1YWxseSBhIHN0cmluZy5cbiAgICAgIGlmICh0eXBlb2YgdHJ1c3RlZFZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyAkc2NlTWluRXJyKCdpdHlwZScsXG4gICAgICAgICAgICAnQXR0ZW1wdGVkIHRvIHRydXN0IGEgbm9uLXN0cmluZyB2YWx1ZSBpbiBhIGNvbnRlbnQgcmVxdWlyaW5nIGEgc3RyaW5nOiBDb250ZXh0OiB7MH0nLFxuICAgICAgICAgICAgdHlwZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRydXN0ZWRWYWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2VEZWxlZ2F0ZSN2YWx1ZU9mXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBJZiB0aGUgcGFzc2VkIHBhcmFtZXRlciBoYWQgYmVlbiByZXR1cm5lZCBieSBhIHByaW9yIGNhbGwgdG8ge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzXG4gICAgICogYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH0sIHJldHVybnMgdGhlIHZhbHVlIHRoYXQgaGFkIGJlZW4gcGFzc2VkIHRvIHtAbGlua1xuICAgICAqIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9LlxuICAgICAqXG4gICAgICogSWYgdGhlIHBhc3NlZCBwYXJhbWV0ZXIgaXMgbm90IGEgdmFsdWUgdGhhdCBoYWQgYmVlbiByZXR1cm5lZCBieSB7QGxpbmtcbiAgICAgKiBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXNgfSwgcmV0dXJucyBpdCBhcy1pcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHJlc3VsdCBvZiBhIHByaW9yIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXNgfVxuICAgICAqICAgICAgY2FsbCBvciBhbnl0aGluZyBlbHNlLlxuICAgICAqIEByZXR1cm5zIHsqfSBUaGUgYHZhbHVlYCB0aGF0IHdhcyBvcmlnaW5hbGx5IHByb3ZpZGVkIHRvIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBc1xuICAgICAqICAgICBgJHNjZURlbGVnYXRlLnRydXN0QXNgfSBpZiBgdmFsdWVgIGlzIHRoZSByZXN1bHQgb2Ygc3VjaCBhIGNhbGwuICBPdGhlcndpc2UsIHJldHVybnNcbiAgICAgKiAgICAgYHZhbHVlYCB1bmNoYW5nZWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsdWVPZihtYXliZVRydXN0ZWQpIHtcbiAgICAgIGlmIChtYXliZVRydXN0ZWQgaW5zdGFuY2VvZiB0cnVzdGVkVmFsdWVIb2xkZXJCYXNlKSB7XG4gICAgICAgIHJldHVybiBtYXliZVRydXN0ZWQuJCR1bndyYXBUcnVzdGVkVmFsdWUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBtYXliZVRydXN0ZWQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBUYWtlcyB0aGUgcmVzdWx0IG9mIGEge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9IGNhbGwgYW5kXG4gICAgICogcmV0dXJucyB0aGUgb3JpZ2luYWxseSBzdXBwbGllZCB2YWx1ZSBpZiB0aGUgcXVlcmllZCBjb250ZXh0IHR5cGUgaXMgYSBzdXBlcnR5cGUgb2YgdGhlXG4gICAgICogY3JlYXRlZCB0eXBlLiAgSWYgdGhpcyBjb25kaXRpb24gaXNuJ3Qgc2F0aXNmaWVkLCB0aHJvd3MgYW4gZXhjZXB0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIGtpbmQgb2YgY29udGV4dCBpbiB3aGljaCB0aGlzIHZhbHVlIGlzIHRvIGJlIHVzZWQuXG4gICAgICogQHBhcmFtIHsqfSBtYXliZVRydXN0ZWQgVGhlIHJlc3VsdCBvZiBhIHByaW9yIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBc1xuICAgICAqICAgICBgJHNjZURlbGVnYXRlLnRydXN0QXNgfSBjYWxsLlxuICAgICAqIEByZXR1cm5zIHsqfSBUaGUgdmFsdWUgdGhlIHdhcyBvcmlnaW5hbGx5IHByb3ZpZGVkIHRvIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBc1xuICAgICAqICAgICBgJHNjZURlbGVnYXRlLnRydXN0QXNgfSBpZiB2YWxpZCBpbiB0aGlzIGNvbnRleHQuICBPdGhlcndpc2UsIHRocm93cyBhbiBleGNlcHRpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0VHJ1c3RlZCh0eXBlLCBtYXliZVRydXN0ZWQpIHtcbiAgICAgIGlmIChtYXliZVRydXN0ZWQgPT09IG51bGwgfHwgbWF5YmVUcnVzdGVkID09PSB1bmRlZmluZWQgfHwgbWF5YmVUcnVzdGVkID09PSAnJykge1xuICAgICAgICByZXR1cm4gbWF5YmVUcnVzdGVkO1xuICAgICAgfVxuICAgICAgdmFyIGNvbnN0cnVjdG9yID0gKGJ5VHlwZS5oYXNPd25Qcm9wZXJ0eSh0eXBlKSA/IGJ5VHlwZVt0eXBlXSA6IG51bGwpO1xuICAgICAgaWYgKGNvbnN0cnVjdG9yICYmIG1heWJlVHJ1c3RlZCBpbnN0YW5jZW9mIGNvbnN0cnVjdG9yKSB7XG4gICAgICAgIHJldHVybiBtYXliZVRydXN0ZWQuJCR1bndyYXBUcnVzdGVkVmFsdWUoKTtcbiAgICAgIH1cbiAgICAgIC8vIElmIHdlIGdldCBoZXJlLCB0aGVuIHdlIG1heSBvbmx5IHRha2Ugb25lIG9mIHR3byBhY3Rpb25zLlxuICAgICAgLy8gMS4gc2FuaXRpemUgdGhlIHZhbHVlIGZvciB0aGUgcmVxdWVzdGVkIHR5cGUsIG9yXG4gICAgICAvLyAyLiB0aHJvdyBhbiBleGNlcHRpb24uXG4gICAgICBpZiAodHlwZSA9PT0gU0NFX0NPTlRFWFRTLlJFU09VUkNFX1VSTCkge1xuICAgICAgICBpZiAoaXNSZXNvdXJjZVVybEFsbG93ZWRCeVBvbGljeShtYXliZVRydXN0ZWQpKSB7XG4gICAgICAgICAgcmV0dXJuIG1heWJlVHJ1c3RlZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyAkc2NlTWluRXJyKCdpbnNlY3VybCcsXG4gICAgICAgICAgICAgICdCbG9ja2VkIGxvYWRpbmcgcmVzb3VyY2UgZnJvbSB1cmwgbm90IGFsbG93ZWQgYnkgJHNjZURlbGVnYXRlIHBvbGljeS4gIFVSTDogezB9JyxcbiAgICAgICAgICAgICAgbWF5YmVUcnVzdGVkLnRvU3RyaW5nKCkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFNDRV9DT05URVhUUy5IVE1MKSB7XG4gICAgICAgIHJldHVybiBodG1sU2FuaXRpemVyKG1heWJlVHJ1c3RlZCk7XG4gICAgICB9XG4gICAgICB0aHJvdyAkc2NlTWluRXJyKCd1bnNhZmUnLCAnQXR0ZW1wdGluZyB0byB1c2UgYW4gdW5zYWZlIHZhbHVlIGluIGEgc2FmZSBjb250ZXh0LicpO1xuICAgIH1cblxuICAgIHJldHVybiB7IHRydXN0QXM6IHRydXN0QXMsXG4gICAgICAgICAgICAgZ2V0VHJ1c3RlZDogZ2V0VHJ1c3RlZCxcbiAgICAgICAgICAgICB2YWx1ZU9mOiB2YWx1ZU9mIH07XG4gIH1dO1xufVxuXG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkc2NlUHJvdmlkZXJcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFRoZSAkc2NlUHJvdmlkZXIgcHJvdmlkZXIgYWxsb3dzIGRldmVsb3BlcnMgdG8gY29uZmlndXJlIHRoZSB7QGxpbmsgbmcuJHNjZSAkc2NlfSBzZXJ2aWNlLlxuICogLSAgIGVuYWJsZS9kaXNhYmxlIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIChTQ0UpIGluIGEgbW9kdWxlXG4gKiAtICAgb3ZlcnJpZGUgdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gd2l0aCBhIGN1c3RvbSBkZWxlZ2F0ZVxuICpcbiAqIFJlYWQgbW9yZSBhYm91dCB7QGxpbmsgbmcuJHNjZSBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyAoU0NFKX0uXG4gKi9cblxuLyoganNoaW50IG1heGxlbjogZmFsc2UqL1xuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkc2NlXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIGAkc2NlYCBpcyBhIHNlcnZpY2UgdGhhdCBwcm92aWRlcyBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyBzZXJ2aWNlcyB0byBBbmd1bGFySlMuXG4gKlxuICogIyBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZ1xuICpcbiAqIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIChTQ0UpIGlzIGEgbW9kZSBpbiB3aGljaCBBbmd1bGFySlMgcmVxdWlyZXMgYmluZGluZ3MgaW4gY2VydGFpblxuICogY29udGV4dHMgdG8gcmVzdWx0IGluIGEgdmFsdWUgdGhhdCBpcyBtYXJrZWQgYXMgc2FmZSB0byB1c2UgZm9yIHRoYXQgY29udGV4dC4gIE9uZSBleGFtcGxlIG9mXG4gKiBzdWNoIGEgY29udGV4dCBpcyBiaW5kaW5nIGFyYml0cmFyeSBodG1sIGNvbnRyb2xsZWQgYnkgdGhlIHVzZXIgdmlhIGBuZy1iaW5kLWh0bWxgLiAgV2UgcmVmZXJcbiAqIHRvIHRoZXNlIGNvbnRleHRzIGFzIHByaXZpbGVnZWQgb3IgU0NFIGNvbnRleHRzLlxuICpcbiAqIEFzIG9mIHZlcnNpb24gMS4yLCBBbmd1bGFyIHNoaXBzIHdpdGggU0NFIGVuYWJsZWQgYnkgZGVmYXVsdC5cbiAqXG4gKiBOb3RlOiAgV2hlbiBlbmFibGVkICh0aGUgZGVmYXVsdCksIElFPDExIGluIHF1aXJrcyBtb2RlIGlzIG5vdCBzdXBwb3J0ZWQuICBJbiB0aGlzIG1vZGUsIElFPDExIGFsbG93XG4gKiBvbmUgdG8gZXhlY3V0ZSBhcmJpdHJhcnkgamF2YXNjcmlwdCBieSB0aGUgdXNlIG9mIHRoZSBleHByZXNzaW9uKCkgc3ludGF4LiAgUmVmZXJcbiAqIDxodHRwOi8vYmxvZ3MubXNkbi5jb20vYi9pZS9hcmNoaXZlLzIwMDgvMTAvMTYvZW5kaW5nLWV4cHJlc3Npb25zLmFzcHg+IHRvIGxlYXJuIG1vcmUgYWJvdXQgdGhlbS5cbiAqIFlvdSBjYW4gZW5zdXJlIHlvdXIgZG9jdW1lbnQgaXMgaW4gc3RhbmRhcmRzIG1vZGUgYW5kIG5vdCBxdWlya3MgbW9kZSBieSBhZGRpbmcgYDwhZG9jdHlwZSBodG1sPmBcbiAqIHRvIHRoZSB0b3Agb2YgeW91ciBIVE1MIGRvY3VtZW50LlxuICpcbiAqIFNDRSBhc3Npc3RzIGluIHdyaXRpbmcgY29kZSBpbiB3YXkgdGhhdCAoYSkgaXMgc2VjdXJlIGJ5IGRlZmF1bHQgYW5kIChiKSBtYWtlcyBhdWRpdGluZyBmb3JcbiAqIHNlY3VyaXR5IHZ1bG5lcmFiaWxpdGllcyBzdWNoIGFzIFhTUywgY2xpY2tqYWNraW5nLCBldGMuIGEgbG90IGVhc2llci5cbiAqXG4gKiBIZXJlJ3MgYW4gZXhhbXBsZSBvZiBhIGJpbmRpbmcgaW4gYSBwcml2aWxlZ2VkIGNvbnRleHQ6XG4gKlxuICogYGBgXG4gKiA8aW5wdXQgbmctbW9kZWw9XCJ1c2VySHRtbFwiPlxuICogPGRpdiBuZy1iaW5kLWh0bWw9XCJ1c2VySHRtbFwiPjwvZGl2PlxuICogYGBgXG4gKlxuICogTm90aWNlIHRoYXQgYG5nLWJpbmQtaHRtbGAgaXMgYm91bmQgdG8gYHVzZXJIdG1sYCBjb250cm9sbGVkIGJ5IHRoZSB1c2VyLiAgV2l0aCBTQ0VcbiAqIGRpc2FibGVkLCB0aGlzIGFwcGxpY2F0aW9uIGFsbG93cyB0aGUgdXNlciB0byByZW5kZXIgYXJiaXRyYXJ5IEhUTUwgaW50byB0aGUgRElWLlxuICogSW4gYSBtb3JlIHJlYWxpc3RpYyBleGFtcGxlLCBvbmUgbWF5IGJlIHJlbmRlcmluZyB1c2VyIGNvbW1lbnRzLCBibG9nIGFydGljbGVzLCBldGMuIHZpYVxuICogYmluZGluZ3MuICAoSFRNTCBpcyBqdXN0IG9uZSBleGFtcGxlIG9mIGEgY29udGV4dCB3aGVyZSByZW5kZXJpbmcgdXNlciBjb250cm9sbGVkIGlucHV0IGNyZWF0ZXNcbiAqIHNlY3VyaXR5IHZ1bG5lcmFiaWxpdGllcy4pXG4gKlxuICogRm9yIHRoZSBjYXNlIG9mIEhUTUwsIHlvdSBtaWdodCB1c2UgYSBsaWJyYXJ5LCBlaXRoZXIgb24gdGhlIGNsaWVudCBzaWRlLCBvciBvbiB0aGUgc2VydmVyIHNpZGUsXG4gKiB0byBzYW5pdGl6ZSB1bnNhZmUgSFRNTCBiZWZvcmUgYmluZGluZyB0byB0aGUgdmFsdWUgYW5kIHJlbmRlcmluZyBpdCBpbiB0aGUgZG9jdW1lbnQuXG4gKlxuICogSG93IHdvdWxkIHlvdSBlbnN1cmUgdGhhdCBldmVyeSBwbGFjZSB0aGF0IHVzZWQgdGhlc2UgdHlwZXMgb2YgYmluZGluZ3Mgd2FzIGJvdW5kIHRvIGEgdmFsdWUgdGhhdFxuICogd2FzIHNhbml0aXplZCBieSB5b3VyIGxpYnJhcnkgKG9yIHJldHVybmVkIGFzIHNhZmUgZm9yIHJlbmRlcmluZyBieSB5b3VyIHNlcnZlcj8pICBIb3cgY2FuIHlvdVxuICogZW5zdXJlIHRoYXQgeW91IGRpZG4ndCBhY2NpZGVudGFsbHkgZGVsZXRlIHRoZSBsaW5lIHRoYXQgc2FuaXRpemVkIHRoZSB2YWx1ZSwgb3IgcmVuYW1lZCBzb21lXG4gKiBwcm9wZXJ0aWVzL2ZpZWxkcyBhbmQgZm9yZ290IHRvIHVwZGF0ZSB0aGUgYmluZGluZyB0byB0aGUgc2FuaXRpemVkIHZhbHVlP1xuICpcbiAqIFRvIGJlIHNlY3VyZSBieSBkZWZhdWx0LCB5b3Ugd2FudCB0byBlbnN1cmUgdGhhdCBhbnkgc3VjaCBiaW5kaW5ncyBhcmUgZGlzYWxsb3dlZCB1bmxlc3MgeW91IGNhblxuICogZGV0ZXJtaW5lIHRoYXQgc29tZXRoaW5nIGV4cGxpY2l0bHkgc2F5cyBpdCdzIHNhZmUgdG8gdXNlIGEgdmFsdWUgZm9yIGJpbmRpbmcgaW4gdGhhdFxuICogY29udGV4dC4gIFlvdSBjYW4gdGhlbiBhdWRpdCB5b3VyIGNvZGUgKGEgc2ltcGxlIGdyZXAgd291bGQgZG8pIHRvIGVuc3VyZSB0aGF0IHRoaXMgaXMgb25seSBkb25lXG4gKiBmb3IgdGhvc2UgdmFsdWVzIHRoYXQgeW91IGNhbiBlYXNpbHkgdGVsbCBhcmUgc2FmZSAtIGJlY2F1c2UgdGhleSB3ZXJlIHJlY2VpdmVkIGZyb20geW91ciBzZXJ2ZXIsXG4gKiBzYW5pdGl6ZWQgYnkgeW91ciBsaWJyYXJ5LCBldGMuICBZb3UgY2FuIG9yZ2FuaXplIHlvdXIgY29kZWJhc2UgdG8gaGVscCB3aXRoIHRoaXMgLSBwZXJoYXBzXG4gKiBhbGxvd2luZyBvbmx5IHRoZSBmaWxlcyBpbiBhIHNwZWNpZmljIGRpcmVjdG9yeSB0byBkbyB0aGlzLiAgRW5zdXJpbmcgdGhhdCB0aGUgaW50ZXJuYWwgQVBJXG4gKiBleHBvc2VkIGJ5IHRoYXQgY29kZSBkb2Vzbid0IG1hcmt1cCBhcmJpdHJhcnkgdmFsdWVzIGFzIHNhZmUgdGhlbiBiZWNvbWVzIGEgbW9yZSBtYW5hZ2VhYmxlIHRhc2suXG4gKlxuICogSW4gdGhlIGNhc2Ugb2YgQW5ndWxhckpTJyBTQ0Ugc2VydmljZSwgb25lIHVzZXMge0BsaW5rIG5nLiRzY2UjdHJ1c3RBcyAkc2NlLnRydXN0QXN9XG4gKiAoYW5kIHNob3J0aGFuZCBtZXRob2RzIHN1Y2ggYXMge0BsaW5rIG5nLiRzY2UjdHJ1c3RBc0h0bWwgJHNjZS50cnVzdEFzSHRtbH0sIGV0Yy4pIHRvXG4gKiBvYnRhaW4gdmFsdWVzIHRoYXQgd2lsbCBiZSBhY2NlcHRlZCBieSBTQ0UgLyBwcml2aWxlZ2VkIGNvbnRleHRzLlxuICpcbiAqXG4gKiAjIyBIb3cgZG9lcyBpdCB3b3JrP1xuICpcbiAqIEluIHByaXZpbGVnZWQgY29udGV4dHMsIGRpcmVjdGl2ZXMgYW5kIGNvZGUgd2lsbCBiaW5kIHRvIHRoZSByZXN1bHQgb2Yge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZFxuICogJHNjZS5nZXRUcnVzdGVkKGNvbnRleHQsIHZhbHVlKX0gcmF0aGVyIHRoYW4gdG8gdGhlIHZhbHVlIGRpcmVjdGx5LiAgRGlyZWN0aXZlcyB1c2Uge0BsaW5rXG4gKiBuZy4kc2NlI3BhcnNlQXMgJHNjZS5wYXJzZUFzfSByYXRoZXIgdGhhbiBgJHBhcnNlYCB0byB3YXRjaCBhdHRyaWJ1dGUgYmluZGluZ3MsIHdoaWNoIHBlcmZvcm1zIHRoZVxuICoge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZCAkc2NlLmdldFRydXN0ZWR9IGJlaGluZCB0aGUgc2NlbmVzIG9uIG5vbi1jb25zdGFudCBsaXRlcmFscy5cbiAqXG4gKiBBcyBhbiBleGFtcGxlLCB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQmluZEh0bWwgbmdCaW5kSHRtbH0gdXNlcyB7QGxpbmtcbiAqIG5nLiRzY2UjcGFyc2VBc0h0bWwgJHNjZS5wYXJzZUFzSHRtbChiaW5kaW5nIGV4cHJlc3Npb24pfS4gIEhlcmUncyB0aGUgYWN0dWFsIGNvZGUgKHNsaWdodGx5XG4gKiBzaW1wbGlmaWVkKTpcbiAqXG4gKiBgYGBcbiAqIHZhciBuZ0JpbmRIdG1sRGlyZWN0aXZlID0gWyckc2NlJywgZnVuY3Rpb24oJHNjZSkge1xuICogICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAqICAgICBzY29wZS4kd2F0Y2goJHNjZS5wYXJzZUFzSHRtbChhdHRyLm5nQmluZEh0bWwpLCBmdW5jdGlvbih2YWx1ZSkge1xuICogICAgICAgZWxlbWVudC5odG1sKHZhbHVlIHx8ICcnKTtcbiAqICAgICB9KTtcbiAqICAgfTtcbiAqIH1dO1xuICogYGBgXG4gKlxuICogIyMgSW1wYWN0IG9uIGxvYWRpbmcgdGVtcGxhdGVzXG4gKlxuICogVGhpcyBhcHBsaWVzIGJvdGggdG8gdGhlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdJbmNsdWRlIGBuZy1pbmNsdWRlYH0gZGlyZWN0aXZlIGFzIHdlbGwgYXNcbiAqIGB0ZW1wbGF0ZVVybGAncyBzcGVjaWZpZWQgYnkge0BsaW5rIGd1aWRlL2RpcmVjdGl2ZSBkaXJlY3RpdmVzfS5cbiAqXG4gKiBCeSBkZWZhdWx0LCBBbmd1bGFyIG9ubHkgbG9hZHMgdGVtcGxhdGVzIGZyb20gdGhlIHNhbWUgZG9tYWluIGFuZCBwcm90b2NvbCBhcyB0aGUgYXBwbGljYXRpb25cbiAqIGRvY3VtZW50LiAgVGhpcyBpcyBkb25lIGJ5IGNhbGxpbmcge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZFJlc291cmNlVXJsXG4gKiAkc2NlLmdldFRydXN0ZWRSZXNvdXJjZVVybH0gb24gdGhlIHRlbXBsYXRlIFVSTC4gIFRvIGxvYWQgdGVtcGxhdGVzIGZyb20gb3RoZXIgZG9tYWlucyBhbmQvb3JcbiAqIHByb3RvY29scywgeW91IG1heSBlaXRoZXIgZWl0aGVyIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybFdoaXRlbGlzdCB3aGl0ZWxpc3RcbiAqIHRoZW19IG9yIHtAbGluayBuZy4kc2NlI3RydXN0QXNSZXNvdXJjZVVybCB3cmFwIGl0fSBpbnRvIGEgdHJ1c3RlZCB2YWx1ZS5cbiAqXG4gKiAqUGxlYXNlIG5vdGUqOlxuICogVGhlIGJyb3dzZXInc1xuICogW1NhbWUgT3JpZ2luIFBvbGljeV0oaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9icm93c2Vyc2VjL3dpa2kvUGFydDIjU2FtZS1vcmlnaW5fcG9saWN5X2Zvcl9YTUxIdHRwUmVxdWVzdClcbiAqIGFuZCBbQ3Jvc3MtT3JpZ2luIFJlc291cmNlIFNoYXJpbmcgKENPUlMpXShodHRwOi8vd3d3LnczLm9yZy9UUi9jb3JzLylcbiAqIHBvbGljeSBhcHBseSBpbiBhZGRpdGlvbiB0byB0aGlzIGFuZCBtYXkgZnVydGhlciByZXN0cmljdCB3aGV0aGVyIHRoZSB0ZW1wbGF0ZSBpcyBzdWNjZXNzZnVsbHlcbiAqIGxvYWRlZC4gIFRoaXMgbWVhbnMgdGhhdCB3aXRob3V0IHRoZSByaWdodCBDT1JTIHBvbGljeSwgbG9hZGluZyB0ZW1wbGF0ZXMgZnJvbSBhIGRpZmZlcmVudCBkb21haW5cbiAqIHdvbid0IHdvcmsgb24gYWxsIGJyb3dzZXJzLiAgQWxzbywgbG9hZGluZyB0ZW1wbGF0ZXMgZnJvbSBgZmlsZTovL2AgVVJMIGRvZXMgbm90IHdvcmsgb24gc29tZVxuICogYnJvd3NlcnMuXG4gKlxuICogIyMgVGhpcyBmZWVscyBsaWtlIHRvbyBtdWNoIG92ZXJoZWFkXG4gKlxuICogSXQncyBpbXBvcnRhbnQgdG8gcmVtZW1iZXIgdGhhdCBTQ0Ugb25seSBhcHBsaWVzIHRvIGludGVycG9sYXRpb24gZXhwcmVzc2lvbnMuXG4gKlxuICogSWYgeW91ciBleHByZXNzaW9ucyBhcmUgY29uc3RhbnQgbGl0ZXJhbHMsIHRoZXkncmUgYXV0b21hdGljYWxseSB0cnVzdGVkIGFuZCB5b3UgZG9uJ3QgbmVlZCB0b1xuICogY2FsbCBgJHNjZS50cnVzdEFzYCBvbiB0aGVtIChyZW1lbWJlciB0byBpbmNsdWRlIHRoZSBgbmdTYW5pdGl6ZWAgbW9kdWxlKSAoZS5nLlxuICogYDxkaXYgbmctYmluZC1odG1sPVwiJzxiPmltcGxpY2l0bHkgdHJ1c3RlZDwvYj4nXCI+PC9kaXY+YCkganVzdCB3b3Jrcy5cbiAqXG4gKiBBZGRpdGlvbmFsbHksIGBhW2hyZWZdYCBhbmQgYGltZ1tzcmNdYCBhdXRvbWF0aWNhbGx5IHNhbml0aXplIHRoZWlyIFVSTHMgYW5kIGRvIG5vdCBwYXNzIHRoZW1cbiAqIHRocm91Z2gge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZCAkc2NlLmdldFRydXN0ZWR9LiAgU0NFIGRvZXNuJ3QgcGxheSBhIHJvbGUgaGVyZS5cbiAqXG4gKiBUaGUgaW5jbHVkZWQge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSAkc2NlRGVsZWdhdGV9IGNvbWVzIHdpdGggc2FuZSBkZWZhdWx0cyB0byBhbGxvdyB5b3UgdG8gbG9hZFxuICogdGVtcGxhdGVzIGluIGBuZy1pbmNsdWRlYCBmcm9tIHlvdXIgYXBwbGljYXRpb24ncyBkb21haW4gd2l0aG91dCBoYXZpbmcgdG8gZXZlbiBrbm93IGFib3V0IFNDRS5cbiAqIEl0IGJsb2NrcyBsb2FkaW5nIHRlbXBsYXRlcyBmcm9tIG90aGVyIGRvbWFpbnMgb3IgbG9hZGluZyB0ZW1wbGF0ZXMgb3ZlciBodHRwIGZyb20gYW4gaHR0cHNcbiAqIHNlcnZlZCBkb2N1bWVudC4gIFlvdSBjYW4gY2hhbmdlIHRoZXNlIGJ5IHNldHRpbmcgeW91ciBvd24gY3VzdG9tIHtAbGlua1xuICogbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxXaGl0ZWxpc3Qgd2hpdGVsaXN0c30gYW5kIHtAbGlua1xuICogbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxCbGFja2xpc3QgYmxhY2tsaXN0c30gZm9yIG1hdGNoaW5nIHN1Y2ggVVJMcy5cbiAqXG4gKiBUaGlzIHNpZ25pZmljYW50bHkgcmVkdWNlcyB0aGUgb3ZlcmhlYWQuICBJdCBpcyBmYXIgZWFzaWVyIHRvIHBheSB0aGUgc21hbGwgb3ZlcmhlYWQgYW5kIGhhdmUgYW5cbiAqIGFwcGxpY2F0aW9uIHRoYXQncyBzZWN1cmUgYW5kIGNhbiBiZSBhdWRpdGVkIHRvIHZlcmlmeSB0aGF0IHdpdGggbXVjaCBtb3JlIGVhc2UgdGhhbiBib2x0aW5nXG4gKiBzZWN1cml0eSBvbnRvIGFuIGFwcGxpY2F0aW9uIGxhdGVyLlxuICpcbiAqIDxhIG5hbWU9XCJjb250ZXh0c1wiPjwvYT5cbiAqICMjIFdoYXQgdHJ1c3RlZCBjb250ZXh0IHR5cGVzIGFyZSBzdXBwb3J0ZWQ/XG4gKlxuICogfCBDb250ZXh0ICAgICAgICAgICAgIHwgTm90ZXMgICAgICAgICAgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tfFxuICogfCBgJHNjZS5IVE1MYCAgICAgICAgIHwgRm9yIEhUTUwgdGhhdCdzIHNhZmUgdG8gc291cmNlIGludG8gdGhlIGFwcGxpY2F0aW9uLiAgVGhlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdCaW5kSHRtbCBuZ0JpbmRIdG1sfSBkaXJlY3RpdmUgdXNlcyB0aGlzIGNvbnRleHQgZm9yIGJpbmRpbmdzLiBJZiBhbiB1bnNhZmUgdmFsdWUgaXMgZW5jb3VudGVyZWQgYW5kIHRoZSB7QGxpbmsgbmdTYW5pdGl6ZSAkc2FuaXRpemV9IG1vZHVsZSBpcyBwcmVzZW50IHRoaXMgd2lsbCBzYW5pdGl6ZSB0aGUgdmFsdWUgaW5zdGVhZCBvZiB0aHJvd2luZyBhbiBlcnJvci4gfFxuICogfCBgJHNjZS5DU1NgICAgICAgICAgIHwgRm9yIENTUyB0aGF0J3Mgc2FmZSB0byBzb3VyY2UgaW50byB0aGUgYXBwbGljYXRpb24uICBDdXJyZW50bHkgdW51c2VkLiAgRmVlbCBmcmVlIHRvIHVzZSBpdCBpbiB5b3VyIG93biBkaXJlY3RpdmVzLiB8XG4gKiB8IGAkc2NlLlVSTGAgICAgICAgICAgfCBGb3IgVVJMcyB0aGF0IGFyZSBzYWZlIHRvIGZvbGxvdyBhcyBsaW5rcy4gIEN1cnJlbnRseSB1bnVzZWQgKGA8YSBocmVmPWAgYW5kIGA8aW1nIHNyYz1gIHNhbml0aXplIHRoZWlyIHVybHMgYW5kIGRvbid0IGNvbnN0aXR1dGUgYW4gU0NFIGNvbnRleHQuIHxcbiAqIHwgYCRzY2UuUkVTT1VSQ0VfVVJMYCB8IEZvciBVUkxzIHRoYXQgYXJlIG5vdCBvbmx5IHNhZmUgdG8gZm9sbG93IGFzIGxpbmtzLCBidXQgd2hvc2UgY29udGVudHMgYXJlIGFsc28gc2FmZSB0byBpbmNsdWRlIGluIHlvdXIgYXBwbGljYXRpb24uICBFeGFtcGxlcyBpbmNsdWRlIGBuZy1pbmNsdWRlYCwgYHNyY2AgLyBgbmdTcmNgIGJpbmRpbmdzIGZvciB0YWdzIG90aGVyIHRoYW4gYElNR2AgKGUuZy4gYElGUkFNRWAsIGBPQkpFQ1RgLCBldGMuKSAgPGJyPjxicj5Ob3RlIHRoYXQgYCRzY2UuUkVTT1VSQ0VfVVJMYCBtYWtlcyBhIHN0cm9uZ2VyIHN0YXRlbWVudCBhYm91dCB0aGUgVVJMIHRoYW4gYCRzY2UuVVJMYCBkb2VzIGFuZCB0aGVyZWZvcmUgY29udGV4dHMgcmVxdWlyaW5nIHZhbHVlcyB0cnVzdGVkIGZvciBgJHNjZS5SRVNPVVJDRV9VUkxgIGNhbiBiZSB1c2VkIGFueXdoZXJlIHRoYXQgdmFsdWVzIHRydXN0ZWQgZm9yIGAkc2NlLlVSTGAgYXJlIHJlcXVpcmVkLiB8XG4gKiB8IGAkc2NlLkpTYCAgICAgICAgICAgfCBGb3IgSmF2YVNjcmlwdCB0aGF0IGlzIHNhZmUgdG8gZXhlY3V0ZSBpbiB5b3VyIGFwcGxpY2F0aW9uJ3MgY29udGV4dC4gIEN1cnJlbnRseSB1bnVzZWQuICBGZWVsIGZyZWUgdG8gdXNlIGl0IGluIHlvdXIgb3duIGRpcmVjdGl2ZXMuIHxcbiAqXG4gKiAjIyBGb3JtYXQgb2YgaXRlbXMgaW4ge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsV2hpdGVsaXN0IHJlc291cmNlVXJsV2hpdGVsaXN0fS97QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxCbGFja2xpc3QgQmxhY2tsaXN0fSA8YSBuYW1lPVwicmVzb3VyY2VVcmxQYXR0ZXJuSXRlbVwiPjwvYT5cbiAqXG4gKiAgRWFjaCBlbGVtZW50IGluIHRoZXNlIGFycmF5cyBtdXN0IGJlIG9uZSBvZiB0aGUgZm9sbG93aW5nOlxuICpcbiAqICAtICoqJ3NlbGYnKipcbiAqICAgIC0gVGhlIHNwZWNpYWwgKipzdHJpbmcqKiwgYCdzZWxmJ2AsIGNhbiBiZSB1c2VkIHRvIG1hdGNoIGFnYWluc3QgYWxsIFVSTHMgb2YgdGhlICoqc2FtZVxuICogICAgICBkb21haW4qKiBhcyB0aGUgYXBwbGljYXRpb24gZG9jdW1lbnQgdXNpbmcgdGhlICoqc2FtZSBwcm90b2NvbCoqLlxuICogIC0gKipTdHJpbmcqKiAoZXhjZXB0IHRoZSBzcGVjaWFsIHZhbHVlIGAnc2VsZidgKVxuICogICAgLSBUaGUgc3RyaW5nIGlzIG1hdGNoZWQgYWdhaW5zdCB0aGUgZnVsbCAqbm9ybWFsaXplZCAvIGFic29sdXRlIFVSTCogb2YgdGhlIHJlc291cmNlXG4gKiAgICAgIGJlaW5nIHRlc3RlZCAoc3Vic3RyaW5nIG1hdGNoZXMgYXJlIG5vdCBnb29kIGVub3VnaC4pXG4gKiAgICAtIFRoZXJlIGFyZSBleGFjdGx5ICoqdHdvIHdpbGRjYXJkIHNlcXVlbmNlcyoqIC0gYCpgIGFuZCBgKipgLiAgQWxsIG90aGVyIGNoYXJhY3RlcnNcbiAqICAgICAgbWF0Y2ggdGhlbXNlbHZlcy5cbiAqICAgIC0gYCpgOiBtYXRjaGVzIHplcm8gb3IgbW9yZSBvY2N1cnJlbmNlcyBvZiBhbnkgY2hhcmFjdGVyIG90aGVyIHRoYW4gb25lIG9mIHRoZSBmb2xsb3dpbmcgNlxuICogICAgICBjaGFyYWN0ZXJzOiAnYDpgJywgJ2AvYCcsICdgLmAnLCAnYD9gJywgJ2AmYCcgYW5kICc7Jy4gIEl0J3MgYSB1c2VmdWwgd2lsZGNhcmQgZm9yIHVzZVxuICogICAgICBpbiBhIHdoaXRlbGlzdC5cbiAqICAgIC0gYCoqYDogbWF0Y2hlcyB6ZXJvIG9yIG1vcmUgb2NjdXJyZW5jZXMgb2YgKmFueSogY2hhcmFjdGVyLiAgQXMgc3VjaCwgaXQncyBub3RcbiAqICAgICAgbm90IGFwcHJvcHJpYXRlIHRvIHVzZSBpbiBmb3IgYSBzY2hlbWUsIGRvbWFpbiwgZXRjLiBhcyBpdCB3b3VsZCBtYXRjaCB0b28gbXVjaC4gIChlLmcuXG4gKiAgICAgIGh0dHA6Ly8qKi5leGFtcGxlLmNvbS8gd291bGQgbWF0Y2ggaHR0cDovL2V2aWwuY29tLz9pZ25vcmU9LmV4YW1wbGUuY29tLyBhbmQgdGhhdCBtaWdodFxuICogICAgICBub3QgaGF2ZSBiZWVuIHRoZSBpbnRlbnRpb24uKSAgSXRzIHVzYWdlIGF0IHRoZSB2ZXJ5IGVuZCBvZiB0aGUgcGF0aCBpcyBvay4gIChlLmcuXG4gKiAgICAgIGh0dHA6Ly9mb28uZXhhbXBsZS5jb20vdGVtcGxhdGVzLyoqKS5cbiAqICAtICoqUmVnRXhwKiogKCpzZWUgY2F2ZWF0IGJlbG93KilcbiAqICAgIC0gKkNhdmVhdCo6ICBXaGlsZSByZWd1bGFyIGV4cHJlc3Npb25zIGFyZSBwb3dlcmZ1bCBhbmQgb2ZmZXIgZ3JlYXQgZmxleGliaWxpdHksICB0aGVpciBzeW50YXhcbiAqICAgICAgKGFuZCBhbGwgdGhlIGluZXZpdGFibGUgZXNjYXBpbmcpIG1ha2VzIHRoZW0gKmhhcmRlciB0byBtYWludGFpbiouICBJdCdzIGVhc3kgdG9cbiAqICAgICAgYWNjaWRlbnRhbGx5IGludHJvZHVjZSBhIGJ1ZyB3aGVuIG9uZSB1cGRhdGVzIGEgY29tcGxleCBleHByZXNzaW9uIChpbWhvLCBhbGwgcmVnZXhlcyBzaG91bGRcbiAqICAgICAgaGF2ZSBnb29kIHRlc3QgY292ZXJhZ2UuKS4gIEZvciBpbnN0YW5jZSwgdGhlIHVzZSBvZiBgLmAgaW4gdGhlIHJlZ2V4IGlzIGNvcnJlY3Qgb25seSBpbiBhXG4gKiAgICAgIHNtYWxsIG51bWJlciBvZiBjYXNlcy4gIEEgYC5gIGNoYXJhY3RlciBpbiB0aGUgcmVnZXggdXNlZCB3aGVuIG1hdGNoaW5nIHRoZSBzY2hlbWUgb3IgYVxuICogICAgICBzdWJkb21haW4gY291bGQgYmUgbWF0Y2hlZCBhZ2FpbnN0IGEgYDpgIG9yIGxpdGVyYWwgYC5gIHRoYXQgd2FzIGxpa2VseSBub3QgaW50ZW5kZWQuICAgSXRcbiAqICAgICAgaXMgaGlnaGx5IHJlY29tbWVuZGVkIHRvIHVzZSB0aGUgc3RyaW5nIHBhdHRlcm5zIGFuZCBvbmx5IGZhbGwgYmFjayB0byByZWd1bGFyIGV4cHJlc3Npb25zXG4gKiAgICAgIGlmIHRoZXkgYXMgYSBsYXN0IHJlc29ydC5cbiAqICAgIC0gVGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiBtdXN0IGJlIGFuIGluc3RhbmNlIG9mIFJlZ0V4cCAoaS5lLiBub3QgYSBzdHJpbmcuKSAgSXQgaXNcbiAqICAgICAgbWF0Y2hlZCBhZ2FpbnN0IHRoZSAqKmVudGlyZSoqICpub3JtYWxpemVkIC8gYWJzb2x1dGUgVVJMKiBvZiB0aGUgcmVzb3VyY2UgYmVpbmcgdGVzdGVkXG4gKiAgICAgIChldmVuIHdoZW4gdGhlIFJlZ0V4cCBkaWQgbm90IGhhdmUgdGhlIGBeYCBhbmQgYCRgIGNvZGVzLikgIEluIGFkZGl0aW9uLCBhbnkgZmxhZ3NcbiAqICAgICAgcHJlc2VudCBvbiB0aGUgUmVnRXhwIChzdWNoIGFzIG11bHRpbGluZSwgZ2xvYmFsLCBpZ25vcmVDYXNlKSBhcmUgaWdub3JlZC5cbiAqICAgIC0gSWYgeW91IGFyZSBnZW5lcmF0aW5nIHlvdXIgSmF2YVNjcmlwdCBmcm9tIHNvbWUgb3RoZXIgdGVtcGxhdGluZyBlbmdpbmUgKG5vdFxuICogICAgICByZWNvbW1lbmRlZCwgZS5nLiBpbiBpc3N1ZSBbIzQwMDZdKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzQwMDYpKSxcbiAqICAgICAgcmVtZW1iZXIgdG8gZXNjYXBlIHlvdXIgcmVndWxhciBleHByZXNzaW9uIChhbmQgYmUgYXdhcmUgdGhhdCB5b3UgbWlnaHQgbmVlZCBtb3JlIHRoYW5cbiAqICAgICAgb25lIGxldmVsIG9mIGVzY2FwaW5nIGRlcGVuZGluZyBvbiB5b3VyIHRlbXBsYXRpbmcgZW5naW5lIGFuZCB0aGUgd2F5IHlvdSBpbnRlcnBvbGF0ZWRcbiAqICAgICAgdGhlIHZhbHVlLikgIERvIG1ha2UgdXNlIG9mIHlvdXIgcGxhdGZvcm0ncyBlc2NhcGluZyBtZWNoYW5pc20gYXMgaXQgbWlnaHQgYmUgZ29vZFxuICogICAgICBlbm91Z2ggYmVmb3JlIGNvZGluZyB5b3VyIG93bi4gIGUuZy4gUnVieSBoYXNcbiAqICAgICAgW1JlZ2V4cC5lc2NhcGUoc3RyKV0oaHR0cDovL3d3dy5ydWJ5LWRvYy5vcmcvY29yZS0yLjAuMC9SZWdleHAuaHRtbCNtZXRob2QtYy1lc2NhcGUpXG4gKiAgICAgIGFuZCBQeXRob24gaGFzIFtyZS5lc2NhcGVdKGh0dHA6Ly9kb2NzLnB5dGhvbi5vcmcvbGlicmFyeS9yZS5odG1sI3JlLmVzY2FwZSkuXG4gKiAgICAgIEphdmFzY3JpcHQgbGFja3MgYSBzaW1pbGFyIGJ1aWx0IGluIGZ1bmN0aW9uIGZvciBlc2NhcGluZy4gIFRha2UgYSBsb29rIGF0IEdvb2dsZVxuICogICAgICBDbG9zdXJlIGxpYnJhcnkncyBbZ29vZy5zdHJpbmcucmVnRXhwRXNjYXBlKHMpXShcbiAqICAgICAgaHR0cDovL2RvY3MuY2xvc3VyZS1saWJyYXJ5Lmdvb2dsZWNvZGUuY29tL2dpdC9jbG9zdXJlX2dvb2dfc3RyaW5nX3N0cmluZy5qcy5zb3VyY2UuaHRtbCNsaW5lOTYyKS5cbiAqXG4gKiBSZWZlciB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIgJHNjZURlbGVnYXRlUHJvdmlkZXJ9IGZvciBhbiBleGFtcGxlLlxuICpcbiAqICMjIFNob3cgbWUgYW4gZXhhbXBsZSB1c2luZyBTQ0UuXG4gKlxuICogPGV4YW1wbGUgbW9kdWxlPVwibXlTY2VBcHBcIiBkZXBzPVwiYW5ndWxhci1zYW5pdGl6ZS5qc1wiPlxuICogPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgPGRpdiBuZy1jb250cm9sbGVyPVwiQXBwQ29udHJvbGxlciBhcyBteUN0cmxcIj5cbiAqICAgICA8aSBuZy1iaW5kLWh0bWw9XCJteUN0cmwuZXhwbGljaXRseVRydXN0ZWRIdG1sXCIgaWQ9XCJleHBsaWNpdGx5VHJ1c3RlZEh0bWxcIj48L2k+PGJyPjxicj5cbiAqICAgICA8Yj5Vc2VyIGNvbW1lbnRzPC9iPjxicj5cbiAqICAgICBCeSBkZWZhdWx0LCBIVE1MIHRoYXQgaXNuJ3QgZXhwbGljaXRseSB0cnVzdGVkIChlLmcuIEFsaWNlJ3MgY29tbWVudCkgaXMgc2FuaXRpemVkIHdoZW5cbiAqICAgICAkc2FuaXRpemUgaXMgYXZhaWxhYmxlLiAgSWYgJHNhbml0aXplIGlzbid0IGF2YWlsYWJsZSwgdGhpcyByZXN1bHRzIGluIGFuIGVycm9yIGluc3RlYWQgb2YgYW5cbiAqICAgICBleHBsb2l0LlxuICogICAgIDxkaXYgY2xhc3M9XCJ3ZWxsXCI+XG4gKiAgICAgICA8ZGl2IG5nLXJlcGVhdD1cInVzZXJDb21tZW50IGluIG15Q3RybC51c2VyQ29tbWVudHNcIj5cbiAqICAgICAgICAgPGI+e3t1c2VyQ29tbWVudC5uYW1lfX08L2I+OlxuICogICAgICAgICA8c3BhbiBuZy1iaW5kLWh0bWw9XCJ1c2VyQ29tbWVudC5odG1sQ29tbWVudFwiIGNsYXNzPVwiaHRtbENvbW1lbnRcIj48L3NwYW4+XG4gKiAgICAgICAgIDxicj5cbiAqICAgICAgIDwvZGl2PlxuICogICAgIDwvZGl2PlxuICogICA8L2Rpdj5cbiAqIDwvZmlsZT5cbiAqXG4gKiA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gKiAgIGFuZ3VsYXIubW9kdWxlKCdteVNjZUFwcCcsIFsnbmdTYW5pdGl6ZSddKVxuICogICAgIC5jb250cm9sbGVyKCdBcHBDb250cm9sbGVyJywgWyckaHR0cCcsICckdGVtcGxhdGVDYWNoZScsICckc2NlJyxcbiAqICAgICAgIGZ1bmN0aW9uKCRodHRwLCAkdGVtcGxhdGVDYWNoZSwgJHNjZSkge1xuICogICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gKiAgICAgICAgICRodHRwLmdldChcInRlc3RfZGF0YS5qc29uXCIsIHtjYWNoZTogJHRlbXBsYXRlQ2FjaGV9KS5zdWNjZXNzKGZ1bmN0aW9uKHVzZXJDb21tZW50cykge1xuICogICAgICAgICAgIHNlbGYudXNlckNvbW1lbnRzID0gdXNlckNvbW1lbnRzO1xuICogICAgICAgICB9KTtcbiAqICAgICAgICAgc2VsZi5leHBsaWNpdGx5VHJ1c3RlZEh0bWwgPSAkc2NlLnRydXN0QXNIdG1sKFxuICogICAgICAgICAgICAgJzxzcGFuIG9ubW91c2VvdmVyPVwidGhpcy50ZXh0Q29udGVudD0mcXVvdDtFeHBsaWNpdGx5IHRydXN0ZWQgSFRNTCBieXBhc3NlcyAnICtcbiAqICAgICAgICAgICAgICdzYW5pdGl6YXRpb24uJnF1b3Q7XCI+SG92ZXIgb3ZlciB0aGlzIHRleHQuPC9zcGFuPicpO1xuICogICAgICAgfV0pO1xuICogPC9maWxlPlxuICpcbiAqIDxmaWxlIG5hbWU9XCJ0ZXN0X2RhdGEuanNvblwiPlxuICogW1xuICogICB7IFwibmFtZVwiOiBcIkFsaWNlXCIsXG4gKiAgICAgXCJodG1sQ29tbWVudFwiOlxuICogICAgICAgICBcIjxzcGFuIG9ubW91c2VvdmVyPSd0aGlzLnRleHRDb250ZW50PVxcXCJQV04zRCFcXFwiJz5JcyA8aT5hbnlvbmU8L2k+IHJlYWRpbmcgdGhpcz88L3NwYW4+XCJcbiAqICAgfSxcbiAqICAgeyBcIm5hbWVcIjogXCJCb2JcIixcbiAqICAgICBcImh0bWxDb21tZW50XCI6IFwiPGk+WWVzITwvaT4gIEFtIEkgdGhlIG9ubHkgb3RoZXIgb25lP1wiXG4gKiAgIH1cbiAqIF1cbiAqIDwvZmlsZT5cbiAqXG4gKiA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gKiAgIGRlc2NyaWJlKCdTQ0UgZG9jIGRlbW8nLCBmdW5jdGlvbigpIHtcbiAqICAgICBpdCgnc2hvdWxkIHNhbml0aXplIHVudHJ1c3RlZCB2YWx1ZXMnLCBmdW5jdGlvbigpIHtcbiAqICAgICAgIGV4cGVjdChlbGVtZW50LmFsbChieS5jc3MoJy5odG1sQ29tbWVudCcpKS5maXJzdCgpLmdldElubmVySHRtbCgpKVxuICogICAgICAgICAgIC50b0JlKCc8c3Bhbj5JcyA8aT5hbnlvbmU8L2k+IHJlYWRpbmcgdGhpcz88L3NwYW4+Jyk7XG4gKiAgICAgfSk7XG4gKlxuICogICAgIGl0KCdzaG91bGQgTk9UIHNhbml0aXplIGV4cGxpY2l0bHkgdHJ1c3RlZCB2YWx1ZXMnLCBmdW5jdGlvbigpIHtcbiAqICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdleHBsaWNpdGx5VHJ1c3RlZEh0bWwnKSkuZ2V0SW5uZXJIdG1sKCkpLnRvQmUoXG4gKiAgICAgICAgICAgJzxzcGFuIG9ubW91c2VvdmVyPVwidGhpcy50ZXh0Q29udGVudD0mcXVvdDtFeHBsaWNpdGx5IHRydXN0ZWQgSFRNTCBieXBhc3NlcyAnICtcbiAqICAgICAgICAgICAnc2FuaXRpemF0aW9uLiZxdW90O1wiPkhvdmVyIG92ZXIgdGhpcyB0ZXh0Ljwvc3Bhbj4nKTtcbiAqICAgICB9KTtcbiAqICAgfSk7XG4gKiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICpcbiAqXG4gKiAjIyBDYW4gSSBkaXNhYmxlIFNDRSBjb21wbGV0ZWx5P1xuICpcbiAqIFllcywgeW91IGNhbi4gIEhvd2V2ZXIsIHRoaXMgaXMgc3Ryb25nbHkgZGlzY291cmFnZWQuICBTQ0UgZ2l2ZXMgeW91IGEgbG90IG9mIHNlY3VyaXR5IGJlbmVmaXRzXG4gKiBmb3IgbGl0dGxlIGNvZGluZyBvdmVyaGVhZC4gIEl0IHdpbGwgYmUgbXVjaCBoYXJkZXIgdG8gdGFrZSBhbiBTQ0UgZGlzYWJsZWQgYXBwbGljYXRpb24gYW5kXG4gKiBlaXRoZXIgc2VjdXJlIGl0IG9uIHlvdXIgb3duIG9yIGVuYWJsZSBTQ0UgYXQgYSBsYXRlciBzdGFnZS4gIEl0IG1pZ2h0IG1ha2Ugc2Vuc2UgdG8gZGlzYWJsZSBTQ0VcbiAqIGZvciBjYXNlcyB3aGVyZSB5b3UgaGF2ZSBhIGxvdCBvZiBleGlzdGluZyBjb2RlIHRoYXQgd2FzIHdyaXR0ZW4gYmVmb3JlIFNDRSB3YXMgaW50cm9kdWNlZCBhbmRcbiAqIHlvdSdyZSBtaWdyYXRpbmcgdGhlbSBhIG1vZHVsZSBhdCBhIHRpbWUuXG4gKlxuICogVGhhdCBzYWlkLCBoZXJlJ3MgaG93IHlvdSBjYW4gY29tcGxldGVseSBkaXNhYmxlIFNDRTpcbiAqXG4gKiBgYGBcbiAqIGFuZ3VsYXIubW9kdWxlKCdteUFwcFdpdGhTY2VEaXNhYmxlZG15QXBwJywgW10pLmNvbmZpZyhmdW5jdGlvbigkc2NlUHJvdmlkZXIpIHtcbiAqICAgLy8gQ29tcGxldGVseSBkaXNhYmxlIFNDRS4gIEZvciBkZW1vbnN0cmF0aW9uIHB1cnBvc2VzIG9ubHkhXG4gKiAgIC8vIERvIG5vdCB1c2UgaW4gbmV3IHByb2plY3RzLlxuICogICAkc2NlUHJvdmlkZXIuZW5hYmxlZChmYWxzZSk7XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqL1xuLyoganNoaW50IG1heGxlbjogMTAwICovXG5cbmZ1bmN0aW9uICRTY2VQcm92aWRlcigpIHtcbiAgdmFyIGVuYWJsZWQgPSB0cnVlO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRzY2VQcm92aWRlciNlbmFibGVkXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IHZhbHVlIElmIHByb3ZpZGVkLCB0aGVuIGVuYWJsZXMvZGlzYWJsZXMgU0NFLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIGlmIFNDRSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBFbmFibGVzL2Rpc2FibGVzIFNDRSBhbmQgcmV0dXJucyB0aGUgY3VycmVudCB2YWx1ZS5cbiAgICovXG4gIHRoaXMuZW5hYmxlZCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIGVuYWJsZWQgPSAhIXZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gZW5hYmxlZDtcbiAgfTtcblxuXG4gIC8qIERlc2lnbiBub3RlcyBvbiB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBmb3IgU0NFLlxuICAgKlxuICAgKiBUaGUgQVBJIGNvbnRyYWN0IGZvciB0aGUgU0NFIGRlbGVnYXRlXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogVGhlIFNDRSBkZWxlZ2F0ZSBvYmplY3QgbXVzdCBwcm92aWRlIHRoZSBmb2xsb3dpbmcgMyBtZXRob2RzOlxuICAgKlxuICAgKiAtIHRydXN0QXMoY29udGV4dEVudW0sIHZhbHVlKVxuICAgKiAgICAgVGhpcyBtZXRob2QgaXMgdXNlZCB0byB0ZWxsIHRoZSBTQ0Ugc2VydmljZSB0aGF0IHRoZSBwcm92aWRlZCB2YWx1ZSBpcyBPSyB0byB1c2UgaW4gdGhlXG4gICAqICAgICBjb250ZXh0cyBzcGVjaWZpZWQgYnkgY29udGV4dEVudW0uICBJdCBtdXN0IHJldHVybiBhbiBvYmplY3QgdGhhdCB3aWxsIGJlIGFjY2VwdGVkIGJ5XG4gICAqICAgICBnZXRUcnVzdGVkKCkgZm9yIGEgY29tcGF0aWJsZSBjb250ZXh0RW51bSBhbmQgcmV0dXJuIHRoaXMgdmFsdWUuXG4gICAqXG4gICAqIC0gdmFsdWVPZih2YWx1ZSlcbiAgICogICAgIEZvciB2YWx1ZXMgdGhhdCB3ZXJlIG5vdCBwcm9kdWNlZCBieSB0cnVzdEFzKCksIHJldHVybiB0aGVtIGFzIGlzLiAgRm9yIHZhbHVlcyB0aGF0IHdlcmVcbiAgICogICAgIHByb2R1Y2VkIGJ5IHRydXN0QXMoKSwgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIGlucHV0IHZhbHVlIHRvIHRydXN0QXMuICBCYXNpY2FsbHksIGlmXG4gICAqICAgICB0cnVzdEFzIGlzIHdyYXBwaW5nIHRoZSBnaXZlbiB2YWx1ZXMgaW50byBzb21lIHR5cGUsIHRoaXMgb3BlcmF0aW9uIHVud3JhcHMgaXQgd2hlbiBnaXZlblxuICAgKiAgICAgc3VjaCBhIHZhbHVlLlxuICAgKlxuICAgKiAtIGdldFRydXN0ZWQoY29udGV4dEVudW0sIHZhbHVlKVxuICAgKiAgICAgVGhpcyBmdW5jdGlvbiBzaG91bGQgcmV0dXJuIHRoZSBhIHZhbHVlIHRoYXQgaXMgc2FmZSB0byB1c2UgaW4gdGhlIGNvbnRleHQgc3BlY2lmaWVkIGJ5XG4gICAqICAgICBjb250ZXh0RW51bSBvciB0aHJvdyBhbmQgZXhjZXB0aW9uIG90aGVyd2lzZS5cbiAgICpcbiAgICogTk9URTogVGhpcyBjb250cmFjdCBkZWxpYmVyYXRlbHkgZG9lcyBOT1Qgc3RhdGUgdGhhdCB2YWx1ZXMgcmV0dXJuZWQgYnkgdHJ1c3RBcygpIG11c3QgYmVcbiAgICogb3BhcXVlIG9yIHdyYXBwZWQgaW4gc29tZSBob2xkZXIgb2JqZWN0LiAgVGhhdCBoYXBwZW5zIHRvIGJlIGFuIGltcGxlbWVudGF0aW9uIGRldGFpbC4gIEZvclxuICAgKiBpbnN0YW5jZSwgYW4gaW1wbGVtZW50YXRpb24gY291bGQgbWFpbnRhaW4gYSByZWdpc3RyeSBvZiBhbGwgdHJ1c3RlZCBvYmplY3RzIGJ5IGNvbnRleHQuICBJblxuICAgKiBzdWNoIGEgY2FzZSwgdHJ1c3RBcygpIHdvdWxkIHJldHVybiB0aGUgc2FtZSBvYmplY3QgdGhhdCB3YXMgcGFzc2VkIGluLiAgZ2V0VHJ1c3RlZCgpIHdvdWxkXG4gICAqIHJldHVybiB0aGUgc2FtZSBvYmplY3QgcGFzc2VkIGluIGlmIGl0IHdhcyBmb3VuZCBpbiB0aGUgcmVnaXN0cnkgdW5kZXIgYSBjb21wYXRpYmxlIGNvbnRleHQgb3JcbiAgICogdGhyb3cgYW4gZXhjZXB0aW9uIG90aGVyd2lzZS4gIEFuIGltcGxlbWVudGF0aW9uIG1pZ2h0IG9ubHkgd3JhcCB2YWx1ZXMgc29tZSBvZiB0aGUgdGltZSBiYXNlZFxuICAgKiBvbiBzb21lIGNyaXRlcmlhLiAgZ2V0VHJ1c3RlZCgpIG1pZ2h0IHJldHVybiBhIHZhbHVlIGFuZCBub3QgdGhyb3cgYW4gZXhjZXB0aW9uIGZvciBzcGVjaWFsXG4gICAqIGNvbnN0YW50cyBvciBvYmplY3RzIGV2ZW4gaWYgbm90IHdyYXBwZWQuICBBbGwgc3VjaCBpbXBsZW1lbnRhdGlvbnMgZnVsZmlsbCB0aGlzIGNvbnRyYWN0LlxuICAgKlxuICAgKlxuICAgKiBBIG5vdGUgb24gdGhlIGluaGVyaXRhbmNlIG1vZGVsIGZvciBTQ0UgY29udGV4dHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIEkndmUgdXNlZCBpbmhlcml0YW5jZSBhbmQgbWFkZSBSRVNPVVJDRV9VUkwgd3JhcHBlZCB0eXBlcyBhIHN1YnR5cGUgb2YgVVJMIHdyYXBwZWQgdHlwZXMuICBUaGlzXG4gICAqIGlzIHB1cmVseSBhbiBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzLlxuICAgKlxuICAgKiBUaGUgY29udHJhY3QgaXMgc2ltcGx5IHRoaXM6XG4gICAqXG4gICAqICAgICBnZXRUcnVzdGVkKCRzY2UuUkVTT1VSQ0VfVVJMLCB2YWx1ZSkgc3VjY2VlZGluZyBpbXBsaWVzIHRoYXQgZ2V0VHJ1c3RlZCgkc2NlLlVSTCwgdmFsdWUpXG4gICAqICAgICB3aWxsIGFsc28gc3VjY2VlZC5cbiAgICpcbiAgICogSW5oZXJpdGFuY2UgaGFwcGVucyB0byBjYXB0dXJlIHRoaXMgaW4gYSBuYXR1cmFsIHdheS4gIEluIHNvbWUgZnV0dXJlLCB3ZVxuICAgKiBtYXkgbm90IHVzZSBpbmhlcml0YW5jZSBhbnltb3JlLiAgVGhhdCBpcyBPSyBiZWNhdXNlIG5vIGNvZGUgb3V0c2lkZSBvZlxuICAgKiBzY2UuanMgYW5kIHNjZVNwZWNzLmpzIHdvdWxkIG5lZWQgdG8gYmUgYXdhcmUgb2YgdGhpcyBkZXRhaWwuXG4gICAqL1xuXG4gIHRoaXMuJGdldCA9IFsnJHBhcnNlJywgJyRzY2VEZWxlZ2F0ZScsIGZ1bmN0aW9uKFxuICAgICAgICAgICAgICAgICRwYXJzZSwgICAkc2NlRGVsZWdhdGUpIHtcbiAgICAvLyBQcmVyZXE6IEVuc3VyZSB0aGF0IHdlJ3JlIG5vdCBydW5uaW5nIGluIElFPDExIHF1aXJrcyBtb2RlLiAgSW4gdGhhdCBtb2RlLCBJRSA8IDExIGFsbG93XG4gICAgLy8gdGhlIFwiZXhwcmVzc2lvbihqYXZhc2NyaXB0IGV4cHJlc3Npb24pXCIgc3ludGF4IHdoaWNoIGlzIGluc2VjdXJlLlxuICAgIGlmIChlbmFibGVkICYmIG1zaWUgPCA4KSB7XG4gICAgICB0aHJvdyAkc2NlTWluRXJyKCdpZXF1aXJrcycsXG4gICAgICAgICdTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyBkb2VzIG5vdCBzdXBwb3J0IEludGVybmV0IEV4cGxvcmVyIHZlcnNpb24gPCAxMSBpbiBxdWlya3MgJyArXG4gICAgICAgICdtb2RlLiAgWW91IGNhbiBmaXggdGhpcyBieSBhZGRpbmcgdGhlIHRleHQgPCFkb2N0eXBlIGh0bWw+IHRvIHRoZSB0b3Agb2YgeW91ciBIVE1MICcgK1xuICAgICAgICAnZG9jdW1lbnQuICBTZWUgaHR0cDovL2RvY3MuYW5ndWxhcmpzLm9yZy9hcGkvbmcuJHNjZSBmb3IgbW9yZSBpbmZvcm1hdGlvbi4nKTtcbiAgICB9XG5cbiAgICB2YXIgc2NlID0gc2hhbGxvd0NvcHkoU0NFX0NPTlRFWFRTKTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI2lzRW5hYmxlZFxuICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIFNDRSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuICBJZiB5b3Ugd2FudCB0byBzZXQgdGhlIHZhbHVlLCB5b3VcbiAgICAgKiBoYXZlIHRvIGRvIGl0IGF0IG1vZHVsZSBjb25maWcgdGltZSBvbiB7QGxpbmsgbmcuJHNjZVByb3ZpZGVyICRzY2VQcm92aWRlcn0uXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBSZXR1cm5zIGEgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIFNDRSBpcyBlbmFibGVkLlxuICAgICAqL1xuICAgIHNjZS5pc0VuYWJsZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBlbmFibGVkO1xuICAgIH07XG4gICAgc2NlLnRydXN0QXMgPSAkc2NlRGVsZWdhdGUudHJ1c3RBcztcbiAgICBzY2UuZ2V0VHJ1c3RlZCA9ICRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkO1xuICAgIHNjZS52YWx1ZU9mID0gJHNjZURlbGVnYXRlLnZhbHVlT2Y7XG5cbiAgICBpZiAoIWVuYWJsZWQpIHtcbiAgICAgIHNjZS50cnVzdEFzID0gc2NlLmdldFRydXN0ZWQgPSBmdW5jdGlvbih0eXBlLCB2YWx1ZSkgeyByZXR1cm4gdmFsdWU7IH07XG4gICAgICBzY2UudmFsdWVPZiA9IGlkZW50aXR5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3BhcnNlQXNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIENvbnZlcnRzIEFuZ3VsYXIge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaW50byBhIGZ1bmN0aW9uLiAgVGhpcyBpcyBsaWtlIHtAbGlua1xuICAgICAqIG5nLiRwYXJzZSAkcGFyc2V9IGFuZCBpcyBpZGVudGljYWwgd2hlbiB0aGUgZXhwcmVzc2lvbiBpcyBhIGxpdGVyYWwgY29uc3RhbnQuICBPdGhlcndpc2UsIGl0XG4gICAgICogd3JhcHMgdGhlIGV4cHJlc3Npb24gaW4gYSBjYWxsIHRvIHtAbGluayBuZy4kc2NlI2dldFRydXN0ZWQgJHNjZS5nZXRUcnVzdGVkKCp0eXBlKixcbiAgICAgKiAqcmVzdWx0Kil9XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUaGUga2luZCBvZiBTQ0UgY29udGV4dCBpbiB3aGljaCB0aGlzIHJlc3VsdCB3aWxsIGJlIHVzZWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gU3RyaW5nIGV4cHJlc3Npb24gdG8gY29tcGlsZS5cbiAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oY29udGV4dCwgbG9jYWxzKX0gYSBmdW5jdGlvbiB3aGljaCByZXByZXNlbnRzIHRoZSBjb21waWxlZCBleHByZXNzaW9uOlxuICAgICAqXG4gICAgICogICAgKiBgY29udGV4dGAg4oCTIGB7b2JqZWN0fWAg4oCTIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGUgc3RyaW5nc1xuICAgICAqICAgICAgYXJlIGV2YWx1YXRlZCBhZ2FpbnN0ICh0eXBpY2FsbHkgYSBzY29wZSBvYmplY3QpLlxuICAgICAqICAgICogYGxvY2Fsc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBsb2NhbCB2YXJpYWJsZXMgY29udGV4dCBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXMgaW5cbiAgICAgKiAgICAgIGBjb250ZXh0YC5cbiAgICAgKi9cbiAgICBzY2UucGFyc2VBcyA9IGZ1bmN0aW9uIHNjZVBhcnNlQXModHlwZSwgZXhwcikge1xuICAgICAgdmFyIHBhcnNlZCA9ICRwYXJzZShleHByKTtcbiAgICAgIGlmIChwYXJzZWQubGl0ZXJhbCAmJiBwYXJzZWQuY29uc3RhbnQpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAkcGFyc2UoZXhwciwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gc2NlLmdldFRydXN0ZWQodHlwZSwgdmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjdHJ1c3RBc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogRGVsZWdhdGVzIHRvIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXNgfS4gIEFzIHN1Y2gsXG4gICAgICogcmV0dXJucyBhbiBvYmplY3QgdGhhdCBpcyB0cnVzdGVkIGJ5IGFuZ3VsYXIgZm9yIHVzZSBpbiBzcGVjaWZpZWQgc3RyaWN0IGNvbnRleHR1YWxcbiAgICAgKiBlc2NhcGluZyBjb250ZXh0cyAoc3VjaCBhcyBuZy1iaW5kLWh0bWwsIG5nLWluY2x1ZGUsIGFueSBzcmMgYXR0cmlidXRlXG4gICAgICogaW50ZXJwb2xhdGlvbiwgYW55IGRvbSBldmVudCBiaW5kaW5nIGF0dHJpYnV0ZSBpbnRlcnBvbGF0aW9uIHN1Y2ggYXMgZm9yIG9uY2xpY2ssICBldGMuKVxuICAgICAqIHRoYXQgdXNlcyB0aGUgcHJvdmlkZWQgdmFsdWUuICBTZWUgKiB7QGxpbmsgbmcuJHNjZSAkc2NlfSBmb3IgZW5hYmxpbmcgc3RyaWN0IGNvbnRleHR1YWxcbiAgICAgKiBlc2NhcGluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFRoZSBraW5kIG9mIGNvbnRleHQgaW4gd2hpY2ggdGhpcyB2YWx1ZSBpcyBzYWZlIGZvciB1c2UuICBlLmcuIHVybCxcbiAgICAgKiAgIHJlc291cmNlX3VybCwgaHRtbCwganMgYW5kIGNzcy5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0aGF0IHRoYXQgc2hvdWxkIGJlIGNvbnNpZGVyZWQgdHJ1c3RlZC9zYWZlLlxuICAgICAqIEByZXR1cm5zIHsqfSBBIHZhbHVlIHRoYXQgY2FuIGJlIHVzZWQgdG8gc3RhbmQgaW4gZm9yIHRoZSBwcm92aWRlZCBgdmFsdWVgIGluIHBsYWNlc1xuICAgICAqIHdoZXJlIEFuZ3VsYXIgZXhwZWN0cyBhICRzY2UudHJ1c3RBcygpIHJldHVybiB2YWx1ZS5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3RydXN0QXNIdG1sXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UudHJ1c3RBc0h0bWwodmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBcygkc2NlLkhUTUwsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB0cnVzdEFzLlxuICAgICAqIEByZXR1cm5zIHsqfSBBbiBvYmplY3QgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIHtAbGluayBuZy4kc2NlI2dldFRydXN0ZWRIdG1sXG4gICAgICogICAgICRzY2UuZ2V0VHJ1c3RlZEh0bWwodmFsdWUpfSB0byBvYnRhaW4gdGhlIG9yaWdpbmFsIHZhbHVlLiAgKHByaXZpbGVnZWQgZGlyZWN0aXZlc1xuICAgICAqICAgICBvbmx5IGFjY2VwdCBleHByZXNzaW9ucyB0aGF0IGFyZSBlaXRoZXIgbGl0ZXJhbCBjb25zdGFudHMgb3IgYXJlIHRoZVxuICAgICAqICAgICByZXR1cm4gdmFsdWUgb2Yge0BsaW5rIG5nLiRzY2UjdHJ1c3RBcyAkc2NlLnRydXN0QXN9LilcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3RydXN0QXNVcmxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS50cnVzdEFzVXJsKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXMoJHNjZS5VUkwsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB0cnVzdEFzLlxuICAgICAqIEByZXR1cm5zIHsqfSBBbiBvYmplY3QgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIHtAbGluayBuZy4kc2NlI2dldFRydXN0ZWRVcmxcbiAgICAgKiAgICAgJHNjZS5nZXRUcnVzdGVkVXJsKHZhbHVlKX0gdG8gb2J0YWluIHRoZSBvcmlnaW5hbCB2YWx1ZS4gIChwcml2aWxlZ2VkIGRpcmVjdGl2ZXNcbiAgICAgKiAgICAgb25seSBhY2NlcHQgZXhwcmVzc2lvbnMgdGhhdCBhcmUgZWl0aGVyIGxpdGVyYWwgY29uc3RhbnRzIG9yIGFyZSB0aGVcbiAgICAgKiAgICAgcmV0dXJuIHZhbHVlIG9mIHtAbGluayBuZy4kc2NlI3RydXN0QXMgJHNjZS50cnVzdEFzfS4pXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSN0cnVzdEFzUmVzb3VyY2VVcmxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS50cnVzdEFzUmVzb3VyY2VVcmwodmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBcygkc2NlLlJFU09VUkNFX1VSTCwgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHRydXN0QXMuXG4gICAgICogQHJldHVybnMgeyp9IEFuIG9iamVjdCB0aGF0IGNhbiBiZSBwYXNzZWQgdG8ge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZFJlc291cmNlVXJsXG4gICAgICogICAgICRzY2UuZ2V0VHJ1c3RlZFJlc291cmNlVXJsKHZhbHVlKX0gdG8gb2J0YWluIHRoZSBvcmlnaW5hbCB2YWx1ZS4gIChwcml2aWxlZ2VkIGRpcmVjdGl2ZXNcbiAgICAgKiAgICAgb25seSBhY2NlcHQgZXhwcmVzc2lvbnMgdGhhdCBhcmUgZWl0aGVyIGxpdGVyYWwgY29uc3RhbnRzIG9yIGFyZSB0aGUgcmV0dXJuXG4gICAgICogICAgIHZhbHVlIG9mIHtAbGluayBuZy4kc2NlI3RydXN0QXMgJHNjZS50cnVzdEFzfS4pXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSN0cnVzdEFzSnNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS50cnVzdEFzSnModmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBcygkc2NlLkpTLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gdHJ1c3RBcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gQW4gb2JqZWN0IHRoYXQgY2FuIGJlIHBhc3NlZCB0byB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkSnNcbiAgICAgKiAgICAgJHNjZS5nZXRUcnVzdGVkSnModmFsdWUpfSB0byBvYnRhaW4gdGhlIG9yaWdpbmFsIHZhbHVlLiAgKHByaXZpbGVnZWQgZGlyZWN0aXZlc1xuICAgICAqICAgICBvbmx5IGFjY2VwdCBleHByZXNzaW9ucyB0aGF0IGFyZSBlaXRoZXIgbGl0ZXJhbCBjb25zdGFudHMgb3IgYXJlIHRoZVxuICAgICAqICAgICByZXR1cm4gdmFsdWUgb2Yge0BsaW5rIG5nLiRzY2UjdHJ1c3RBcyAkc2NlLnRydXN0QXN9LilcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI2dldFRydXN0ZWRcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIERlbGVnYXRlcyB0byB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI2dldFRydXN0ZWQgYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkYH0uICBBcyBzdWNoLFxuICAgICAqIHRha2VzIHRoZSByZXN1bHQgb2YgYSB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzIGAkc2NlLnRydXN0QXNgfSgpIGNhbGwgYW5kIHJldHVybnMgdGhlXG4gICAgICogb3JpZ2luYWxseSBzdXBwbGllZCB2YWx1ZSBpZiB0aGUgcXVlcmllZCBjb250ZXh0IHR5cGUgaXMgYSBzdXBlcnR5cGUgb2YgdGhlIGNyZWF0ZWQgdHlwZS5cbiAgICAgKiBJZiB0aGlzIGNvbmRpdGlvbiBpc24ndCBzYXRpc2ZpZWQsIHRocm93cyBhbiBleGNlcHRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUaGUga2luZCBvZiBjb250ZXh0IGluIHdoaWNoIHRoaXMgdmFsdWUgaXMgdG8gYmUgdXNlZC5cbiAgICAgKiBAcGFyYW0geyp9IG1heWJlVHJ1c3RlZCBUaGUgcmVzdWx0IG9mIGEgcHJpb3Ige0BsaW5rIG5nLiRzY2UjdHJ1c3RBcyBgJHNjZS50cnVzdEFzYH1cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsLlxuICAgICAqIEByZXR1cm5zIHsqfSBUaGUgdmFsdWUgdGhlIHdhcyBvcmlnaW5hbGx5IHByb3ZpZGVkIHRvXG4gICAgICogICAgICAgICAgICAgIHtAbGluayBuZy4kc2NlI3RydXN0QXMgYCRzY2UudHJ1c3RBc2B9IGlmIHZhbGlkIGluIHRoaXMgY29udGV4dC5cbiAgICAgKiAgICAgICAgICAgICAgT3RoZXJ3aXNlLCB0aHJvd3MgYW4gZXhjZXB0aW9uLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjZ2V0VHJ1c3RlZEh0bWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5nZXRUcnVzdGVkSHRtbCh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI2dldFRydXN0ZWQgYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkKCRzY2UuSFRNTCwgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBhc3MgdG8gYCRzY2UuZ2V0VHJ1c3RlZGAuXG4gICAgICogQHJldHVybnMgeyp9IFRoZSByZXR1cm4gdmFsdWUgb2YgYCRzY2UuZ2V0VHJ1c3RlZCgkc2NlLkhUTUwsIHZhbHVlKWBcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI2dldFRydXN0ZWRDc3NcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5nZXRUcnVzdGVkQ3NzKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjZ2V0VHJ1c3RlZCBgJHNjZURlbGVnYXRlLmdldFRydXN0ZWQoJHNjZS5DU1MsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwYXNzIHRvIGAkc2NlLmdldFRydXN0ZWRgLlxuICAgICAqIEByZXR1cm5zIHsqfSBUaGUgcmV0dXJuIHZhbHVlIG9mIGAkc2NlLmdldFRydXN0ZWQoJHNjZS5DU1MsIHZhbHVlKWBcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI2dldFRydXN0ZWRVcmxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5nZXRUcnVzdGVkVXJsKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjZ2V0VHJ1c3RlZCBgJHNjZURlbGVnYXRlLmdldFRydXN0ZWQoJHNjZS5VUkwsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwYXNzIHRvIGAkc2NlLmdldFRydXN0ZWRgLlxuICAgICAqIEByZXR1cm5zIHsqfSBUaGUgcmV0dXJuIHZhbHVlIG9mIGAkc2NlLmdldFRydXN0ZWQoJHNjZS5VUkwsIHZhbHVlKWBcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI2dldFRydXN0ZWRSZXNvdXJjZVVybFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLmdldFRydXN0ZWRSZXNvdXJjZVVybCh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI2dldFRydXN0ZWQgYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkKCRzY2UuUkVTT1VSQ0VfVVJMLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGFzcyB0byBgJHNjZURlbGVnYXRlLmdldFRydXN0ZWRgLlxuICAgICAqIEByZXR1cm5zIHsqfSBUaGUgcmV0dXJuIHZhbHVlIG9mIGAkc2NlLmdldFRydXN0ZWQoJHNjZS5SRVNPVVJDRV9VUkwsIHZhbHVlKWBcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI2dldFRydXN0ZWRKc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLmdldFRydXN0ZWRKcyh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI2dldFRydXN0ZWQgYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkKCRzY2UuSlMsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwYXNzIHRvIGAkc2NlLmdldFRydXN0ZWRgLlxuICAgICAqIEByZXR1cm5zIHsqfSBUaGUgcmV0dXJuIHZhbHVlIG9mIGAkc2NlLmdldFRydXN0ZWQoJHNjZS5KUywgdmFsdWUpYFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjcGFyc2VBc0h0bWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5wYXJzZUFzSHRtbChleHByZXNzaW9uIHN0cmluZylgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZSNwYXJzZUFzIGAkc2NlLnBhcnNlQXMoJHNjZS5IVE1MLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gU3RyaW5nIGV4cHJlc3Npb24gdG8gY29tcGlsZS5cbiAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oY29udGV4dCwgbG9jYWxzKX0gYSBmdW5jdGlvbiB3aGljaCByZXByZXNlbnRzIHRoZSBjb21waWxlZCBleHByZXNzaW9uOlxuICAgICAqXG4gICAgICogICAgKiBgY29udGV4dGAg4oCTIGB7b2JqZWN0fWAg4oCTIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGUgc3RyaW5nc1xuICAgICAqICAgICAgYXJlIGV2YWx1YXRlZCBhZ2FpbnN0ICh0eXBpY2FsbHkgYSBzY29wZSBvYmplY3QpLlxuICAgICAqICAgICogYGxvY2Fsc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBsb2NhbCB2YXJpYWJsZXMgY29udGV4dCBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXMgaW5cbiAgICAgKiAgICAgIGBjb250ZXh0YC5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3BhcnNlQXNDc3NcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5wYXJzZUFzQ3NzKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlI3BhcnNlQXMgYCRzY2UucGFyc2VBcygkc2NlLkNTUywgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFN0cmluZyBleHByZXNzaW9uIHRvIGNvbXBpbGUuXG4gICAgICogQHJldHVybnMge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IGEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjpcbiAgICAgKlxuICAgICAqICAgICogYGNvbnRleHRgIOKAkyBge29iamVjdH1gIOKAkyBhbiBvYmplY3QgYWdhaW5zdCB3aGljaCBhbnkgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlIHN0cmluZ3NcbiAgICAgKiAgICAgIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS5cbiAgICAgKiAgICAqIGBsb2NhbHNgIOKAkyBge29iamVjdD19YCDigJMgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzIGluXG4gICAgICogICAgICBgY29udGV4dGAuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNwYXJzZUFzVXJsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UucGFyc2VBc1VybCh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZSNwYXJzZUFzIGAkc2NlLnBhcnNlQXMoJHNjZS5VUkwsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLlxuICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbihjb250ZXh0LCBsb2NhbHMpfSBhIGZ1bmN0aW9uIHdoaWNoIHJlcHJlc2VudHMgdGhlIGNvbXBpbGVkIGV4cHJlc3Npb246XG4gICAgICpcbiAgICAgKiAgICAqIGBjb250ZXh0YCDigJMgYHtvYmplY3R9YCDigJMgYW4gb2JqZWN0IGFnYWluc3Qgd2hpY2ggYW55IGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZSBzdHJpbmdzXG4gICAgICogICAgICBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuXG4gICAgICogICAgKiBgbG9jYWxzYCDigJMgYHtvYmplY3Q9fWAg4oCTIGxvY2FsIHZhcmlhYmxlcyBjb250ZXh0IG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlcyBpblxuICAgICAqICAgICAgYGNvbnRleHRgLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjcGFyc2VBc1Jlc291cmNlVXJsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UucGFyc2VBc1Jlc291cmNlVXJsKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlI3BhcnNlQXMgYCRzY2UucGFyc2VBcygkc2NlLlJFU09VUkNFX1VSTCwgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFN0cmluZyBleHByZXNzaW9uIHRvIGNvbXBpbGUuXG4gICAgICogQHJldHVybnMge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IGEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjpcbiAgICAgKlxuICAgICAqICAgICogYGNvbnRleHRgIOKAkyBge29iamVjdH1gIOKAkyBhbiBvYmplY3QgYWdhaW5zdCB3aGljaCBhbnkgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlIHN0cmluZ3NcbiAgICAgKiAgICAgIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS5cbiAgICAgKiAgICAqIGBsb2NhbHNgIOKAkyBge29iamVjdD19YCDigJMgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzIGluXG4gICAgICogICAgICBgY29udGV4dGAuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNwYXJzZUFzSnNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5wYXJzZUFzSnModmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2UjcGFyc2VBcyBgJHNjZS5wYXJzZUFzKCRzY2UuSlMsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLlxuICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbihjb250ZXh0LCBsb2NhbHMpfSBhIGZ1bmN0aW9uIHdoaWNoIHJlcHJlc2VudHMgdGhlIGNvbXBpbGVkIGV4cHJlc3Npb246XG4gICAgICpcbiAgICAgKiAgICAqIGBjb250ZXh0YCDigJMgYHtvYmplY3R9YCDigJMgYW4gb2JqZWN0IGFnYWluc3Qgd2hpY2ggYW55IGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZSBzdHJpbmdzXG4gICAgICogICAgICBhcmUgZXZhbHVhdGVkIGFnYWluc3QgKHR5cGljYWxseSBhIHNjb3BlIG9iamVjdCkuXG4gICAgICogICAgKiBgbG9jYWxzYCDigJMgYHtvYmplY3Q9fWAg4oCTIGxvY2FsIHZhcmlhYmxlcyBjb250ZXh0IG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlcyBpblxuICAgICAqICAgICAgYGNvbnRleHRgLlxuICAgICAqL1xuXG4gICAgLy8gU2hvcnRoYW5kIGRlbGVnYXRpb25zLlxuICAgIHZhciBwYXJzZSA9IHNjZS5wYXJzZUFzLFxuICAgICAgICBnZXRUcnVzdGVkID0gc2NlLmdldFRydXN0ZWQsXG4gICAgICAgIHRydXN0QXMgPSBzY2UudHJ1c3RBcztcblxuICAgIGZvckVhY2goU0NFX0NPTlRFWFRTLCBmdW5jdGlvbihlbnVtVmFsdWUsIG5hbWUpIHtcbiAgICAgIHZhciBsTmFtZSA9IGxvd2VyY2FzZShuYW1lKTtcbiAgICAgIHNjZVtjYW1lbENhc2UoXCJwYXJzZV9hc19cIiArIGxOYW1lKV0gPSBmdW5jdGlvbihleHByKSB7XG4gICAgICAgIHJldHVybiBwYXJzZShlbnVtVmFsdWUsIGV4cHIpO1xuICAgICAgfTtcbiAgICAgIHNjZVtjYW1lbENhc2UoXCJnZXRfdHJ1c3RlZF9cIiArIGxOYW1lKV0gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZ2V0VHJ1c3RlZChlbnVtVmFsdWUsIHZhbHVlKTtcbiAgICAgIH07XG4gICAgICBzY2VbY2FtZWxDYXNlKFwidHJ1c3RfYXNfXCIgKyBsTmFtZSldID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRydXN0QXMoZW51bVZhbHVlLCB2YWx1ZSk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNjZTtcbiAgfV07XG59XG5cbi8qKlxuICogISEhIFRoaXMgaXMgYW4gdW5kb2N1bWVudGVkIFwicHJpdmF0ZVwiIHNlcnZpY2UgISEhXG4gKlxuICogQG5hbWUgJHNuaWZmZXJcbiAqIEByZXF1aXJlcyAkd2luZG93XG4gKiBAcmVxdWlyZXMgJGRvY3VtZW50XG4gKlxuICogQHByb3BlcnR5IHtib29sZWFufSBoaXN0b3J5IERvZXMgdGhlIGJyb3dzZXIgc3VwcG9ydCBodG1sNSBoaXN0b3J5IGFwaSA/XG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHRyYW5zaXRpb25zIERvZXMgdGhlIGJyb3dzZXIgc3VwcG9ydCBDU1MgdHJhbnNpdGlvbiBldmVudHMgP1xuICogQHByb3BlcnR5IHtib29sZWFufSBhbmltYXRpb25zIERvZXMgdGhlIGJyb3dzZXIgc3VwcG9ydCBDU1MgYW5pbWF0aW9uIGV2ZW50cyA/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIGlzIHZlcnkgc2ltcGxlIGltcGxlbWVudGF0aW9uIG9mIHRlc3RpbmcgYnJvd3NlcidzIGZlYXR1cmVzLlxuICovXG5mdW5jdGlvbiAkU25pZmZlclByb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSBbJyR3aW5kb3cnLCAnJGRvY3VtZW50JywgZnVuY3Rpb24oJHdpbmRvdywgJGRvY3VtZW50KSB7XG4gICAgdmFyIGV2ZW50U3VwcG9ydCA9IHt9LFxuICAgICAgICBhbmRyb2lkID1cbiAgICAgICAgICBpbnQoKC9hbmRyb2lkIChcXGQrKS8uZXhlYyhsb3dlcmNhc2UoKCR3aW5kb3cubmF2aWdhdG9yIHx8IHt9KS51c2VyQWdlbnQpKSB8fCBbXSlbMV0pLFxuICAgICAgICBib3hlZSA9IC9Cb3hlZS9pLnRlc3QoKCR3aW5kb3cubmF2aWdhdG9yIHx8IHt9KS51c2VyQWdlbnQpLFxuICAgICAgICBkb2N1bWVudCA9ICRkb2N1bWVudFswXSB8fCB7fSxcbiAgICAgICAgdmVuZG9yUHJlZml4LFxuICAgICAgICB2ZW5kb3JSZWdleCA9IC9eKE1venx3ZWJraXR8bXMpKD89W0EtWl0pLyxcbiAgICAgICAgYm9keVN0eWxlID0gZG9jdW1lbnQuYm9keSAmJiBkb2N1bWVudC5ib2R5LnN0eWxlLFxuICAgICAgICB0cmFuc2l0aW9ucyA9IGZhbHNlLFxuICAgICAgICBhbmltYXRpb25zID0gZmFsc2UsXG4gICAgICAgIG1hdGNoO1xuXG4gICAgaWYgKGJvZHlTdHlsZSkge1xuICAgICAgZm9yICh2YXIgcHJvcCBpbiBib2R5U3R5bGUpIHtcbiAgICAgICAgaWYgKG1hdGNoID0gdmVuZG9yUmVnZXguZXhlYyhwcm9wKSkge1xuICAgICAgICAgIHZlbmRvclByZWZpeCA9IG1hdGNoWzBdO1xuICAgICAgICAgIHZlbmRvclByZWZpeCA9IHZlbmRvclByZWZpeC5zdWJzdHIoMCwgMSkudG9VcHBlckNhc2UoKSArIHZlbmRvclByZWZpeC5zdWJzdHIoMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCF2ZW5kb3JQcmVmaXgpIHtcbiAgICAgICAgdmVuZG9yUHJlZml4ID0gKCdXZWJraXRPcGFjaXR5JyBpbiBib2R5U3R5bGUpICYmICd3ZWJraXQnO1xuICAgICAgfVxuXG4gICAgICB0cmFuc2l0aW9ucyA9ICEhKCgndHJhbnNpdGlvbicgaW4gYm9keVN0eWxlKSB8fCAodmVuZG9yUHJlZml4ICsgJ1RyYW5zaXRpb24nIGluIGJvZHlTdHlsZSkpO1xuICAgICAgYW5pbWF0aW9ucyAgPSAhISgoJ2FuaW1hdGlvbicgaW4gYm9keVN0eWxlKSB8fCAodmVuZG9yUHJlZml4ICsgJ0FuaW1hdGlvbicgaW4gYm9keVN0eWxlKSk7XG5cbiAgICAgIGlmIChhbmRyb2lkICYmICghdHJhbnNpdGlvbnMgfHwgICFhbmltYXRpb25zKSkge1xuICAgICAgICB0cmFuc2l0aW9ucyA9IGlzU3RyaW5nKGRvY3VtZW50LmJvZHkuc3R5bGUud2Via2l0VHJhbnNpdGlvbik7XG4gICAgICAgIGFuaW1hdGlvbnMgPSBpc1N0cmluZyhkb2N1bWVudC5ib2R5LnN0eWxlLndlYmtpdEFuaW1hdGlvbik7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICByZXR1cm4ge1xuICAgICAgLy8gQW5kcm9pZCBoYXMgaGlzdG9yeS5wdXNoU3RhdGUsIGJ1dCBpdCBkb2VzIG5vdCB1cGRhdGUgbG9jYXRpb24gY29ycmVjdGx5XG4gICAgICAvLyBzbyBsZXQncyBub3QgdXNlIHRoZSBoaXN0b3J5IEFQSSBhdCBhbGwuXG4gICAgICAvLyBodHRwOi8vY29kZS5nb29nbGUuY29tL3AvYW5kcm9pZC9pc3N1ZXMvZGV0YWlsP2lkPTE3NDcxXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy85MDRcblxuICAgICAgLy8gb2xkZXIgd2Via2l0IGJyb3dzZXIgKDUzMy45KSBvbiBCb3hlZSBib3ggaGFzIGV4YWN0bHkgdGhlIHNhbWUgcHJvYmxlbSBhcyBBbmRyb2lkIGhhc1xuICAgICAgLy8gc28gbGV0J3Mgbm90IHVzZSB0aGUgaGlzdG9yeSBBUEkgYWxzb1xuICAgICAgLy8gV2UgYXJlIHB1cnBvc2VmdWxseSB1c2luZyBgIShhbmRyb2lkIDwgNClgIHRvIGNvdmVyIHRoZSBjYXNlIHdoZW4gYGFuZHJvaWRgIGlzIHVuZGVmaW5lZFxuICAgICAgLy8ganNoaW50IC1XMDE4XG4gICAgICBoaXN0b3J5OiAhISgkd2luZG93Lmhpc3RvcnkgJiYgJHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSAmJiAhKGFuZHJvaWQgPCA0KSAmJiAhYm94ZWUpLFxuICAgICAgLy8ganNoaW50ICtXMDE4XG4gICAgICBoYXNFdmVudDogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgLy8gSUU5IGltcGxlbWVudHMgJ2lucHV0JyBldmVudCBpdCdzIHNvIGZ1YmFyZWQgdGhhdCB3ZSByYXRoZXIgcHJldGVuZCB0aGF0IGl0IGRvZXNuJ3QgaGF2ZVxuICAgICAgICAvLyBpdC4gSW4gcGFydGljdWxhciB0aGUgZXZlbnQgaXMgbm90IGZpcmVkIHdoZW4gYmFja3NwYWNlIG9yIGRlbGV0ZSBrZXkgYXJlIHByZXNzZWQgb3JcbiAgICAgICAgLy8gd2hlbiBjdXQgb3BlcmF0aW9uIGlzIHBlcmZvcm1lZC5cbiAgICAgICAgLy8gSUUxMCsgaW1wbGVtZW50cyAnaW5wdXQnIGV2ZW50IGJ1dCBpdCBlcnJvbmVvdXNseSBmaXJlcyB1bmRlciB2YXJpb3VzIHNpdHVhdGlvbnMsXG4gICAgICAgIC8vIGUuZy4gd2hlbiBwbGFjZWhvbGRlciBjaGFuZ2VzLCBvciBhIGZvcm0gaXMgZm9jdXNlZC5cbiAgICAgICAgaWYgKGV2ZW50ID09PSAnaW5wdXQnICYmIG1zaWUgPD0gMTEpIHJldHVybiBmYWxzZTtcblxuICAgICAgICBpZiAoaXNVbmRlZmluZWQoZXZlbnRTdXBwb3J0W2V2ZW50XSkpIHtcbiAgICAgICAgICB2YXIgZGl2RWxtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgZXZlbnRTdXBwb3J0W2V2ZW50XSA9ICdvbicgKyBldmVudCBpbiBkaXZFbG07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZXZlbnRTdXBwb3J0W2V2ZW50XTtcbiAgICAgIH0sXG4gICAgICBjc3A6IGNzcCgpLFxuICAgICAgdmVuZG9yUHJlZml4OiB2ZW5kb3JQcmVmaXgsXG4gICAgICB0cmFuc2l0aW9uczogdHJhbnNpdGlvbnMsXG4gICAgICBhbmltYXRpb25zOiBhbmltYXRpb25zLFxuICAgICAgYW5kcm9pZDogYW5kcm9pZFxuICAgIH07XG4gIH1dO1xufVxuXG52YXIgJGNvbXBpbGVNaW5FcnIgPSBtaW5FcnIoJyRjb21waWxlJyk7XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICR0ZW1wbGF0ZVJlcXVlc3RcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgJHRlbXBsYXRlUmVxdWVzdGAgc2VydmljZSBkb3dubG9hZHMgdGhlIHByb3ZpZGVkIHRlbXBsYXRlIHVzaW5nIGAkaHR0cGAgYW5kLCB1cG9uIHN1Y2Nlc3MsXG4gKiBzdG9yZXMgdGhlIGNvbnRlbnRzIGluc2lkZSBvZiBgJHRlbXBsYXRlQ2FjaGVgLiBJZiB0aGUgSFRUUCByZXF1ZXN0IGZhaWxzIG9yIHRoZSByZXNwb25zZSBkYXRhXG4gKiBvZiB0aGUgSFRUUCByZXF1ZXN0IGlzIGVtcHR5LCBhIGAkY29tcGlsZWAgZXJyb3Igd2lsbCBiZSB0aHJvd24gKHRoZSBleGNlcHRpb24gY2FuIGJlIHRod2FydGVkXG4gKiBieSBzZXR0aW5nIHRoZSAybmQgcGFyYW1ldGVyIG9mIHRoZSBmdW5jdGlvbiB0byB0cnVlKS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdHBsIFRoZSBIVFRQIHJlcXVlc3QgdGVtcGxhdGUgVVJMXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBpZ25vcmVSZXF1ZXN0RXJyb3IgV2hldGhlciBvciBub3QgdG8gaWdub3JlIHRoZSBleGNlcHRpb24gd2hlbiB0aGUgcmVxdWVzdCBmYWlscyBvciB0aGUgdGVtcGxhdGUgaXMgZW1wdHlcbiAqXG4gKiBAcmV0dXJuIHtQcm9taXNlfSB0aGUgSFRUUCBQcm9taXNlIGZvciB0aGUgZ2l2ZW4uXG4gKlxuICogQHByb3BlcnR5IHtudW1iZXJ9IHRvdGFsUGVuZGluZ1JlcXVlc3RzIHRvdGFsIGFtb3VudCBvZiBwZW5kaW5nIHRlbXBsYXRlIHJlcXVlc3RzIGJlaW5nIGRvd25sb2FkZWQuXG4gKi9cbmZ1bmN0aW9uICRUZW1wbGF0ZVJlcXVlc3RQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckdGVtcGxhdGVDYWNoZScsICckaHR0cCcsICckcScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlLCAkaHR0cCwgJHEpIHtcbiAgICBmdW5jdGlvbiBoYW5kbGVSZXF1ZXN0Rm4odHBsLCBpZ25vcmVSZXF1ZXN0RXJyb3IpIHtcbiAgICAgIGhhbmRsZVJlcXVlc3RGbi50b3RhbFBlbmRpbmdSZXF1ZXN0cysrO1xuXG4gICAgICB2YXIgdHJhbnNmb3JtUmVzcG9uc2UgPSAkaHR0cC5kZWZhdWx0cyAmJiAkaHR0cC5kZWZhdWx0cy50cmFuc2Zvcm1SZXNwb25zZTtcblxuICAgICAgaWYgKGlzQXJyYXkodHJhbnNmb3JtUmVzcG9uc2UpKSB7XG4gICAgICAgIHRyYW5zZm9ybVJlc3BvbnNlID0gdHJhbnNmb3JtUmVzcG9uc2UuZmlsdGVyKGZ1bmN0aW9uKHRyYW5zZm9ybWVyKSB7XG4gICAgICAgICAgcmV0dXJuIHRyYW5zZm9ybWVyICE9PSBkZWZhdWx0SHR0cFJlc3BvbnNlVHJhbnNmb3JtO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAodHJhbnNmb3JtUmVzcG9uc2UgPT09IGRlZmF1bHRIdHRwUmVzcG9uc2VUcmFuc2Zvcm0pIHtcbiAgICAgICAgdHJhbnNmb3JtUmVzcG9uc2UgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgaHR0cE9wdGlvbnMgPSB7XG4gICAgICAgIGNhY2hlOiAkdGVtcGxhdGVDYWNoZSxcbiAgICAgICAgdHJhbnNmb3JtUmVzcG9uc2U6IHRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gJGh0dHAuZ2V0KHRwbCwgaHR0cE9wdGlvbnMpXG4gICAgICAgIC5maW5hbGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGhhbmRsZVJlcXVlc3RGbi50b3RhbFBlbmRpbmdSZXF1ZXN0cy0tO1xuICAgICAgICB9KVxuICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgICAgICB9LCBoYW5kbGVFcnJvcik7XG5cbiAgICAgIGZ1bmN0aW9uIGhhbmRsZUVycm9yKHJlc3ApIHtcbiAgICAgICAgaWYgKCFpZ25vcmVSZXF1ZXN0RXJyb3IpIHtcbiAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycigndHBsb2FkJywgJ0ZhaWxlZCB0byBsb2FkIHRlbXBsYXRlOiB7MH0nLCB0cGwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAkcS5yZWplY3QocmVzcCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlUmVxdWVzdEZuLnRvdGFsUGVuZGluZ1JlcXVlc3RzID0gMDtcblxuICAgIHJldHVybiBoYW5kbGVSZXF1ZXN0Rm47XG4gIH1dO1xufVxuXG5mdW5jdGlvbiAkJFRlc3RhYmlsaXR5UHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJHJvb3RTY29wZScsICckYnJvd3NlcicsICckbG9jYXRpb24nLFxuICAgICAgIGZ1bmN0aW9uKCRyb290U2NvcGUsICAgJGJyb3dzZXIsICAgJGxvY2F0aW9uKSB7XG5cbiAgICAvKipcbiAgICAgKiBAbmFtZSAkdGVzdGFiaWxpdHlcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFRoZSBwcml2YXRlICQkdGVzdGFiaWxpdHkgc2VydmljZSBwcm92aWRlcyBhIGNvbGxlY3Rpb24gb2YgbWV0aG9kcyBmb3IgdXNlIHdoZW4gZGVidWdnaW5nXG4gICAgICogb3IgYnkgYXV0b21hdGVkIHRlc3QgYW5kIGRlYnVnZ2luZyB0b29scy5cbiAgICAgKi9cbiAgICB2YXIgdGVzdGFiaWxpdHkgPSB7fTtcblxuICAgIC8qKlxuICAgICAqIEBuYW1lICQkdGVzdGFiaWxpdHkjZmluZEJpbmRpbmdzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIGVsZW1lbnRzIHRoYXQgYXJlIGJvdW5kICh2aWEgbmctYmluZCBvciB7e319KVxuICAgICAqIHRvIGV4cHJlc3Npb25zIG1hdGNoaW5nIHRoZSBpbnB1dC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCByb290IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFRoZSBiaW5kaW5nIGV4cHJlc3Npb24gdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtib29sZWFufSBvcHRfZXhhY3RNYXRjaCBJZiB0cnVlLCBvbmx5IHJldHVybnMgZXhhY3QgbWF0Y2hlc1xuICAgICAqICAgICBmb3IgdGhlIGV4cHJlc3Npb24uIEZpbHRlcnMgYW5kIHdoaXRlc3BhY2UgYXJlIGlnbm9yZWQuXG4gICAgICovXG4gICAgdGVzdGFiaWxpdHkuZmluZEJpbmRpbmdzID0gZnVuY3Rpb24oZWxlbWVudCwgZXhwcmVzc2lvbiwgb3B0X2V4YWN0TWF0Y2gpIHtcbiAgICAgIHZhciBiaW5kaW5ncyA9IGVsZW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbmctYmluZGluZycpO1xuICAgICAgdmFyIG1hdGNoZXMgPSBbXTtcbiAgICAgIGZvckVhY2goYmluZGluZ3MsIGZ1bmN0aW9uKGJpbmRpbmcpIHtcbiAgICAgICAgdmFyIGRhdGFCaW5kaW5nID0gYW5ndWxhci5lbGVtZW50KGJpbmRpbmcpLmRhdGEoJyRiaW5kaW5nJyk7XG4gICAgICAgIGlmIChkYXRhQmluZGluZykge1xuICAgICAgICAgIGZvckVhY2goZGF0YUJpbmRpbmcsIGZ1bmN0aW9uKGJpbmRpbmdOYW1lKSB7XG4gICAgICAgICAgICBpZiAob3B0X2V4YWN0TWF0Y2gpIHtcbiAgICAgICAgICAgICAgdmFyIG1hdGNoZXIgPSBuZXcgUmVnRXhwKCcoXnxcXFxccyknICsgZXNjYXBlRm9yUmVnZXhwKGV4cHJlc3Npb24pICsgJyhcXFxcc3xcXFxcfHwkKScpO1xuICAgICAgICAgICAgICBpZiAobWF0Y2hlci50ZXN0KGJpbmRpbmdOYW1lKSkge1xuICAgICAgICAgICAgICAgIG1hdGNoZXMucHVzaChiaW5kaW5nKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKGJpbmRpbmdOYW1lLmluZGV4T2YoZXhwcmVzc2lvbikgIT0gLTEpIHtcbiAgICAgICAgICAgICAgICBtYXRjaGVzLnB1c2goYmluZGluZyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbWF0Y2hlcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQG5hbWUgJCR0ZXN0YWJpbGl0eSNmaW5kTW9kZWxzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIGVsZW1lbnRzIHRoYXQgYXJlIHR3by13YXkgZm91bmQgdmlhIG5nLW1vZGVsIHRvXG4gICAgICogZXhwcmVzc2lvbnMgbWF0Y2hpbmcgdGhlIGlucHV0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50IHJvb3QgdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV4cHJlc3Npb24gVGhlIG1vZGVsIGV4cHJlc3Npb24gdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtib29sZWFufSBvcHRfZXhhY3RNYXRjaCBJZiB0cnVlLCBvbmx5IHJldHVybnMgZXhhY3QgbWF0Y2hlc1xuICAgICAqICAgICBmb3IgdGhlIGV4cHJlc3Npb24uXG4gICAgICovXG4gICAgdGVzdGFiaWxpdHkuZmluZE1vZGVscyA9IGZ1bmN0aW9uKGVsZW1lbnQsIGV4cHJlc3Npb24sIG9wdF9leGFjdE1hdGNoKSB7XG4gICAgICB2YXIgcHJlZml4ZXMgPSBbJ25nLScsICdkYXRhLW5nLScsICduZ1xcXFw6J107XG4gICAgICBmb3IgKHZhciBwID0gMDsgcCA8IHByZWZpeGVzLmxlbmd0aDsgKytwKSB7XG4gICAgICAgIHZhciBhdHRyaWJ1dGVFcXVhbHMgPSBvcHRfZXhhY3RNYXRjaCA/ICc9JyA6ICcqPSc7XG4gICAgICAgIHZhciBzZWxlY3RvciA9ICdbJyArIHByZWZpeGVzW3BdICsgJ21vZGVsJyArIGF0dHJpYnV0ZUVxdWFscyArICdcIicgKyBleHByZXNzaW9uICsgJ1wiXSc7XG4gICAgICAgIHZhciBlbGVtZW50cyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgICAgIGlmIChlbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gZWxlbWVudHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQG5hbWUgJCR0ZXN0YWJpbGl0eSNnZXRMb2NhdGlvblxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRjdXQgZm9yIGdldHRpbmcgdGhlIGxvY2F0aW9uIGluIGEgYnJvd3NlciBhZ25vc3RpYyB3YXkuIFJldHVybnNcbiAgICAgKiAgICAgdGhlIHBhdGgsIHNlYXJjaCwgYW5kIGhhc2guIChlLmcuIC9wYXRoP2E9YiNoYXNoKVxuICAgICAqL1xuICAgIHRlc3RhYmlsaXR5LmdldExvY2F0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gJGxvY2F0aW9uLnVybCgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAbmFtZSAkJHRlc3RhYmlsaXR5I3NldExvY2F0aW9uXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGN1dCBmb3IgbmF2aWdhdGluZyB0byBhIGxvY2F0aW9uIHdpdGhvdXQgZG9pbmcgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgbG9jYXRpb24gdXJsIChwYXRoLCBzZWFyY2ggYW5kIGhhc2gsXG4gICAgICogICAgIGUuZy4gL3BhdGg/YT1iI2hhc2gpIHRvIGdvIHRvLlxuICAgICAqL1xuICAgIHRlc3RhYmlsaXR5LnNldExvY2F0aW9uID0gZnVuY3Rpb24odXJsKSB7XG4gICAgICBpZiAodXJsICE9PSAkbG9jYXRpb24udXJsKCkpIHtcbiAgICAgICAgJGxvY2F0aW9uLnVybCh1cmwpO1xuICAgICAgICAkcm9vdFNjb3BlLiRkaWdlc3QoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQG5hbWUgJCR0ZXN0YWJpbGl0eSN3aGVuU3RhYmxlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBDYWxscyB0aGUgY2FsbGJhY2sgd2hlbiAkdGltZW91dCBhbmQgJGh0dHAgcmVxdWVzdHMgYXJlIGNvbXBsZXRlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gICAgICovXG4gICAgdGVzdGFiaWxpdHkud2hlblN0YWJsZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAkYnJvd3Nlci5ub3RpZnlXaGVuTm9PdXRzdGFuZGluZ1JlcXVlc3RzKGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRlc3RhYmlsaXR5O1xuICB9XTtcbn1cblxuZnVuY3Rpb24gJFRpbWVvdXRQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckcm9vdFNjb3BlJywgJyRicm93c2VyJywgJyRxJywgJyQkcScsICckZXhjZXB0aW9uSGFuZGxlcicsXG4gICAgICAgZnVuY3Rpb24oJHJvb3RTY29wZSwgICAkYnJvd3NlciwgICAkcSwgICAkJHEsICAgJGV4Y2VwdGlvbkhhbmRsZXIpIHtcbiAgICB2YXIgZGVmZXJyZWRzID0ge307XG5cblxuICAgICAvKipcbiAgICAgICogQG5nZG9jIHNlcnZpY2VcbiAgICAgICogQG5hbWUgJHRpbWVvdXRcbiAgICAgICpcbiAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAqIEFuZ3VsYXIncyB3cmFwcGVyIGZvciBgd2luZG93LnNldFRpbWVvdXRgLiBUaGUgYGZuYCBmdW5jdGlvbiBpcyB3cmFwcGVkIGludG8gYSB0cnkvY2F0Y2hcbiAgICAgICogYmxvY2sgYW5kIGRlbGVnYXRlcyBhbnkgZXhjZXB0aW9ucyB0b1xuICAgICAgKiB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXIgJGV4Y2VwdGlvbkhhbmRsZXJ9IHNlcnZpY2UuXG4gICAgICAqXG4gICAgICAqIFRoZSByZXR1cm4gdmFsdWUgb2YgcmVnaXN0ZXJpbmcgYSB0aW1lb3V0IGZ1bmN0aW9uIGlzIGEgcHJvbWlzZSwgd2hpY2ggd2lsbCBiZSByZXNvbHZlZCB3aGVuXG4gICAgICAqIHRoZSB0aW1lb3V0IGlzIHJlYWNoZWQgYW5kIHRoZSB0aW1lb3V0IGZ1bmN0aW9uIGlzIGV4ZWN1dGVkLlxuICAgICAgKlxuICAgICAgKiBUbyBjYW5jZWwgYSB0aW1lb3V0IHJlcXVlc3QsIGNhbGwgYCR0aW1lb3V0LmNhbmNlbChwcm9taXNlKWAuXG4gICAgICAqXG4gICAgICAqIEluIHRlc3RzIHlvdSBjYW4gdXNlIHtAbGluayBuZ01vY2suJHRpbWVvdXQgYCR0aW1lb3V0LmZsdXNoKClgfSB0b1xuICAgICAgKiBzeW5jaHJvbm91c2x5IGZsdXNoIHRoZSBxdWV1ZSBvZiBkZWZlcnJlZCBmdW5jdGlvbnMuXG4gICAgICAqXG4gICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gZm4gQSBmdW5jdGlvbiwgd2hvc2UgZXhlY3V0aW9uIHNob3VsZCBiZSBkZWxheWVkLlxuICAgICAgKiBAcGFyYW0ge251bWJlcj19IFtkZWxheT0wXSBEZWxheSBpbiBtaWxsaXNlY29uZHMuXG4gICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IFtpbnZva2VBcHBseT10cnVlXSBJZiBzZXQgdG8gYGZhbHNlYCBza2lwcyBtb2RlbCBkaXJ0eSBjaGVja2luZywgb3RoZXJ3aXNlXG4gICAgICAqICAgd2lsbCBpbnZva2UgYGZuYCB3aXRoaW4gdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRhcHBseSAkYXBwbHl9IGJsb2NrLlxuICAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgd2hlbiB0aGUgdGltZW91dCBpcyByZWFjaGVkLiBUaGUgdmFsdWUgdGhpc1xuICAgICAgKiAgIHByb21pc2Ugd2lsbCBiZSByZXNvbHZlZCB3aXRoIGlzIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGBmbmAgZnVuY3Rpb24uXG4gICAgICAqXG4gICAgICAqL1xuICAgIGZ1bmN0aW9uIHRpbWVvdXQoZm4sIGRlbGF5LCBpbnZva2VBcHBseSkge1xuICAgICAgdmFyIHNraXBBcHBseSA9IChpc0RlZmluZWQoaW52b2tlQXBwbHkpICYmICFpbnZva2VBcHBseSksXG4gICAgICAgICAgZGVmZXJyZWQgPSAoc2tpcEFwcGx5ID8gJCRxIDogJHEpLmRlZmVyKCksXG4gICAgICAgICAgcHJvbWlzZSA9IGRlZmVycmVkLnByb21pc2UsXG4gICAgICAgICAgdGltZW91dElkO1xuXG4gICAgICB0aW1lb3V0SWQgPSAkYnJvd3Nlci5kZWZlcihmdW5jdGlvbigpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGZuKCkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGUpO1xuICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgIGRlbGV0ZSBkZWZlcnJlZHNbcHJvbWlzZS4kJHRpbWVvdXRJZF07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXNraXBBcHBseSkgJHJvb3RTY29wZS4kYXBwbHkoKTtcbiAgICAgIH0sIGRlbGF5KTtcblxuICAgICAgcHJvbWlzZS4kJHRpbWVvdXRJZCA9IHRpbWVvdXRJZDtcbiAgICAgIGRlZmVycmVkc1t0aW1lb3V0SWRdID0gZGVmZXJyZWQ7XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cblxuXG4gICAgIC8qKlxuICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAqIEBuYW1lICR0aW1lb3V0I2NhbmNlbFxuICAgICAgKlxuICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICogQ2FuY2VscyBhIHRhc2sgYXNzb2NpYXRlZCB3aXRoIHRoZSBgcHJvbWlzZWAuIEFzIGEgcmVzdWx0IG9mIHRoaXMsIHRoZSBwcm9taXNlIHdpbGwgYmVcbiAgICAgICogcmVzb2x2ZWQgd2l0aCBhIHJlamVjdGlvbi5cbiAgICAgICpcbiAgICAgICogQHBhcmFtIHtQcm9taXNlPX0gcHJvbWlzZSBQcm9taXNlIHJldHVybmVkIGJ5IHRoZSBgJHRpbWVvdXRgIGZ1bmN0aW9uLlxuICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHRhc2sgaGFzbid0IGV4ZWN1dGVkIHlldCBhbmQgd2FzIHN1Y2Nlc3NmdWxseVxuICAgICAgKiAgIGNhbmNlbGVkLlxuICAgICAgKi9cbiAgICB0aW1lb3V0LmNhbmNlbCA9IGZ1bmN0aW9uKHByb21pc2UpIHtcbiAgICAgIGlmIChwcm9taXNlICYmIHByb21pc2UuJCR0aW1lb3V0SWQgaW4gZGVmZXJyZWRzKSB7XG4gICAgICAgIGRlZmVycmVkc1twcm9taXNlLiQkdGltZW91dElkXS5yZWplY3QoJ2NhbmNlbGVkJyk7XG4gICAgICAgIGRlbGV0ZSBkZWZlcnJlZHNbcHJvbWlzZS4kJHRpbWVvdXRJZF07XG4gICAgICAgIHJldHVybiAkYnJvd3Nlci5kZWZlci5jYW5jZWwocHJvbWlzZS4kJHRpbWVvdXRJZCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIHJldHVybiB0aW1lb3V0O1xuICB9XTtcbn1cblxuLy8gTk9URTogIFRoZSB1c2FnZSBvZiB3aW5kb3cgYW5kIGRvY3VtZW50IGluc3RlYWQgb2YgJHdpbmRvdyBhbmQgJGRvY3VtZW50IGhlcmUgaXNcbi8vIGRlbGliZXJhdGUuICBUaGlzIHNlcnZpY2UgZGVwZW5kcyBvbiB0aGUgc3BlY2lmaWMgYmVoYXZpb3Igb2YgYW5jaG9yIG5vZGVzIGNyZWF0ZWQgYnkgdGhlXG4vLyBicm93c2VyIChyZXNvbHZpbmcgYW5kIHBhcnNpbmcgVVJMcykgdGhhdCBpcyB1bmxpa2VseSB0byBiZSBwcm92aWRlZCBieSBtb2NrIG9iamVjdHMgYW5kXG4vLyBjYXVzZSB1cyB0byBicmVhayB0ZXN0cy4gIEluIGFkZGl0aW9uLCB3aGVuIHRoZSBicm93c2VyIHJlc29sdmVzIGEgVVJMIGZvciBYSFIsIGl0XG4vLyBkb2Vzbid0IGtub3cgYWJvdXQgbW9ja2VkIGxvY2F0aW9ucyBhbmQgcmVzb2x2ZXMgVVJMcyB0byB0aGUgcmVhbCBkb2N1bWVudCAtIHdoaWNoIGlzXG4vLyBleGFjdGx5IHRoZSBiZWhhdmlvciBuZWVkZWQgaGVyZS4gIFRoZXJlIGlzIGxpdHRsZSB2YWx1ZSBpcyBtb2NraW5nIHRoZXNlIG91dCBmb3IgdGhpc1xuLy8gc2VydmljZS5cbnZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xudmFyIG9yaWdpblVybCA9IHVybFJlc29sdmUod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG5cbi8qKlxuICpcbiAqIEltcGxlbWVudGF0aW9uIE5vdGVzIGZvciBub24tSUUgYnJvd3NlcnNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEFzc2lnbmluZyBhIFVSTCB0byB0aGUgaHJlZiBwcm9wZXJ0eSBvZiBhbiBhbmNob3IgRE9NIG5vZGUsIGV2ZW4gb25lIGF0dGFjaGVkIHRvIHRoZSBET00sXG4gKiByZXN1bHRzIGJvdGggaW4gdGhlIG5vcm1hbGl6aW5nIGFuZCBwYXJzaW5nIG9mIHRoZSBVUkwuICBOb3JtYWxpemluZyBtZWFucyB0aGF0IGEgcmVsYXRpdmVcbiAqIFVSTCB3aWxsIGJlIHJlc29sdmVkIGludG8gYW4gYWJzb2x1dGUgVVJMIGluIHRoZSBjb250ZXh0IG9mIHRoZSBhcHBsaWNhdGlvbiBkb2N1bWVudC5cbiAqIFBhcnNpbmcgbWVhbnMgdGhhdCB0aGUgYW5jaG9yIG5vZGUncyBob3N0LCBob3N0bmFtZSwgcHJvdG9jb2wsIHBvcnQsIHBhdGhuYW1lIGFuZCByZWxhdGVkXG4gKiBwcm9wZXJ0aWVzIGFyZSBhbGwgcG9wdWxhdGVkIHRvIHJlZmxlY3QgdGhlIG5vcm1hbGl6ZWQgVVJMLiAgVGhpcyBhcHByb2FjaCBoYXMgd2lkZVxuICogY29tcGF0aWJpbGl0eSAtIFNhZmFyaSAxKywgTW96aWxsYSAxKywgT3BlcmEgNyssZSBldGMuICBTZWVcbiAqIGh0dHA6Ly93d3cuYXB0YW5hLmNvbS9yZWZlcmVuY2UvaHRtbC9hcGkvSFRNTEFuY2hvckVsZW1lbnQuaHRtbFxuICpcbiAqIEltcGxlbWVudGF0aW9uIE5vdGVzIGZvciBJRVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBJRSA+PSA4IGFuZCA8PSAxMCBub3JtYWxpemVzIHRoZSBVUkwgd2hlbiBhc3NpZ25lZCB0byB0aGUgYW5jaG9yIG5vZGUgc2ltaWxhciB0byB0aGUgb3RoZXJcbiAqIGJyb3dzZXJzLiAgSG93ZXZlciwgdGhlIHBhcnNlZCBjb21wb25lbnRzIHdpbGwgbm90IGJlIHNldCBpZiB0aGUgVVJMIGFzc2lnbmVkIGRpZCBub3Qgc3BlY2lmeVxuICogdGhlbS4gIChlLmcuIGlmIHlvdSBhc3NpZ24gYS5ocmVmID0gXCJmb29cIiwgdGhlbiBhLnByb3RvY29sLCBhLmhvc3QsIGV0Yy4gd2lsbCBiZSBlbXB0eS4pICBXZVxuICogd29yayBhcm91bmQgdGhhdCBieSBwZXJmb3JtaW5nIHRoZSBwYXJzaW5nIGluIGEgMm5kIHN0ZXAgYnkgdGFraW5nIGEgcHJldmlvdXNseSBub3JtYWxpemVkXG4gKiBVUkwgKGUuZy4gYnkgYXNzaWduaW5nIHRvIGEuaHJlZikgYW5kIGFzc2lnbmluZyBpdCBhLmhyZWYgYWdhaW4uICBUaGlzIGNvcnJlY3RseSBwb3B1bGF0ZXMgdGhlXG4gKiBwcm9wZXJ0aWVzIHN1Y2ggYXMgcHJvdG9jb2wsIGhvc3RuYW1lLCBwb3J0LCBldGMuXG4gKlxuICogSUU3IGRvZXMgbm90IG5vcm1hbGl6ZSB0aGUgVVJMIHdoZW4gYXNzaWduZWQgdG8gYW4gYW5jaG9yIG5vZGUuICAoQXBwYXJlbnRseSwgaXQgZG9lcywgaWYgb25lXG4gKiB1c2VzIHRoZSBpbm5lciBIVE1MIGFwcHJvYWNoIHRvIGFzc2lnbiB0aGUgVVJMIGFzIHBhcnQgb2YgYW4gSFRNTCBzbmlwcGV0IC1cbiAqIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzQ3MjcyOSkgIEhvd2V2ZXIsIHNldHRpbmcgaW1nW3NyY10gZG9lcyBub3JtYWxpemUgdGhlIFVSTC5cbiAqIFVuZm9ydHVuYXRlbHksIHNldHRpbmcgaW1nW3NyY10gdG8gc29tZXRoaW5nIGxpa2UgXCJqYXZhc2NyaXB0OmZvb1wiIG9uIElFIHRocm93cyBhbiBleGNlcHRpb24uXG4gKiBTaW5jZSB0aGUgcHJpbWFyeSB1c2FnZSBmb3Igbm9ybWFsaXppbmcgVVJMcyBpcyB0byBzYW5pdGl6ZSBzdWNoIFVSTHMsIHdlIGNhbid0IHVzZSB0aGF0XG4gKiBtZXRob2QgYW5kIElFIDwgOCBpcyB1bnN1cHBvcnRlZC5cbiAqXG4gKiBSZWZlcmVuY2VzOlxuICogICBodHRwOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9IVE1MQW5jaG9yRWxlbWVudFxuICogICBodHRwOi8vd3d3LmFwdGFuYS5jb20vcmVmZXJlbmNlL2h0bWwvYXBpL0hUTUxBbmNob3JFbGVtZW50Lmh0bWxcbiAqICAgaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gKiAgIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvcHVsbC8yOTAyXG4gKiAgIGh0dHA6Ly9qYW1lcy5wYWRvbHNleS5jb20vamF2YXNjcmlwdC9wYXJzaW5nLXVybHMtd2l0aC10aGUtZG9tL1xuICpcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkLlxuICogQGRlc2NyaXB0aW9uIE5vcm1hbGl6ZXMgYW5kIHBhcnNlcyBhIFVSTC5cbiAqIEByZXR1cm5zIHtvYmplY3R9IFJldHVybnMgdGhlIG5vcm1hbGl6ZWQgVVJMIGFzIGEgZGljdGlvbmFyeS5cbiAqXG4gKiAgIHwgbWVtYmVyIG5hbWUgICB8IERlc2NyaXB0aW9uICAgIHxcbiAqICAgfC0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tfFxuICogICB8IGhyZWYgICAgICAgICAgfCBBIG5vcm1hbGl6ZWQgdmVyc2lvbiBvZiB0aGUgcHJvdmlkZWQgVVJMIGlmIGl0IHdhcyBub3QgYW4gYWJzb2x1dGUgVVJMIHxcbiAqICAgfCBwcm90b2NvbCAgICAgIHwgVGhlIHByb3RvY29sIGluY2x1ZGluZyB0aGUgdHJhaWxpbmcgY29sb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiAgIHwgaG9zdCAgICAgICAgICB8IFRoZSBob3N0IGFuZCBwb3J0IChpZiB0aGUgcG9ydCBpcyBub24tZGVmYXVsdCkgb2YgdGhlIG5vcm1hbGl6ZWRVcmwgICAgfFxuICogICB8IHNlYXJjaCAgICAgICAgfCBUaGUgc2VhcmNoIHBhcmFtcywgbWludXMgdGhlIHF1ZXN0aW9uIG1hcmsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqICAgfCBoYXNoICAgICAgICAgIHwgVGhlIGhhc2ggc3RyaW5nLCBtaW51cyB0aGUgaGFzaCBzeW1ib2xcbiAqICAgfCBob3N0bmFtZSAgICAgIHwgVGhlIGhvc3RuYW1lXG4gKiAgIHwgcG9ydCAgICAgICAgICB8IFRoZSBwb3J0LCB3aXRob3V0IFwiOlwiXG4gKiAgIHwgcGF0aG5hbWUgICAgICB8IFRoZSBwYXRobmFtZSwgYmVnaW5uaW5nIHdpdGggXCIvXCJcbiAqXG4gKi9cbmZ1bmN0aW9uIHVybFJlc29sdmUodXJsKSB7XG4gIHZhciBocmVmID0gdXJsO1xuXG4gIGlmIChtc2llKSB7XG4gICAgLy8gTm9ybWFsaXplIGJlZm9yZSBwYXJzZS4gIFJlZmVyIEltcGxlbWVudGF0aW9uIE5vdGVzIG9uIHdoeSB0aGlzIGlzXG4gICAgLy8gZG9uZSBpbiB0d28gc3RlcHMgb24gSUUuXG4gICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKFwiaHJlZlwiLCBocmVmKTtcbiAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgfVxuXG4gIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgcmV0dXJuIHtcbiAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKVxuICAgICAgPyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgOiAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICB9O1xufVxuXG4vKipcbiAqIFBhcnNlIGEgcmVxdWVzdCBVUkwgYW5kIGRldGVybWluZSB3aGV0aGVyIHRoaXMgaXMgYSBzYW1lLW9yaWdpbiByZXF1ZXN0IGFzIHRoZSBhcHBsaWNhdGlvbiBkb2N1bWVudC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IHJlcXVlc3RVcmwgVGhlIHVybCBvZiB0aGUgcmVxdWVzdCBhcyBhIHN0cmluZyB0aGF0IHdpbGwgYmUgcmVzb2x2ZWRcbiAqIG9yIGEgcGFyc2VkIFVSTCBvYmplY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciB0aGUgcmVxdWVzdCBpcyBmb3IgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBhcHBsaWNhdGlvbiBkb2N1bWVudC5cbiAqL1xuZnVuY3Rpb24gdXJsSXNTYW1lT3JpZ2luKHJlcXVlc3RVcmwpIHtcbiAgdmFyIHBhcnNlZCA9IChpc1N0cmluZyhyZXF1ZXN0VXJsKSkgPyB1cmxSZXNvbHZlKHJlcXVlc3RVcmwpIDogcmVxdWVzdFVybDtcbiAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVybC5wcm90b2NvbCAmJlxuICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VcmwuaG9zdCk7XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICR3aW5kb3dcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgcmVmZXJlbmNlIHRvIHRoZSBicm93c2VyJ3MgYHdpbmRvd2Agb2JqZWN0LiBXaGlsZSBgd2luZG93YFxuICogaXMgZ2xvYmFsbHkgYXZhaWxhYmxlIGluIEphdmFTY3JpcHQsIGl0IGNhdXNlcyB0ZXN0YWJpbGl0eSBwcm9ibGVtcywgYmVjYXVzZVxuICogaXQgaXMgYSBnbG9iYWwgdmFyaWFibGUuIEluIGFuZ3VsYXIgd2UgYWx3YXlzIHJlZmVyIHRvIGl0IHRocm91Z2ggdGhlXG4gKiBgJHdpbmRvd2Agc2VydmljZSwgc28gaXQgbWF5IGJlIG92ZXJyaWRkZW4sIHJlbW92ZWQgb3IgbW9ja2VkIGZvciB0ZXN0aW5nLlxuICpcbiAqIEV4cHJlc3Npb25zLCBsaWtlIHRoZSBvbmUgZGVmaW5lZCBmb3IgdGhlIGBuZ0NsaWNrYCBkaXJlY3RpdmUgaW4gdGhlIGV4YW1wbGVcbiAqIGJlbG93LCBhcmUgZXZhbHVhdGVkIHdpdGggcmVzcGVjdCB0byB0aGUgY3VycmVudCBzY29wZS4gIFRoZXJlZm9yZSwgdGhlcmUgaXNcbiAqIG5vIHJpc2sgb2YgaW5hZHZlcnRlbnRseSBjb2RpbmcgaW4gYSBkZXBlbmRlbmN5IG9uIGEgZ2xvYmFsIHZhbHVlIGluIHN1Y2ggYW5cbiAqIGV4cHJlc3Npb24uXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG1vZHVsZT1cIndpbmRvd0V4YW1wbGVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3dpbmRvd0V4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJHdpbmRvdycsIGZ1bmN0aW9uKCRzY29wZSwgJHdpbmRvdykge1xuICAgICAgICAgICAgICRzY29wZS5ncmVldGluZyA9ICdIZWxsbywgV29ybGQhJztcbiAgICAgICAgICAgICAkc2NvcGUuZG9HcmVldGluZyA9IGZ1bmN0aW9uKGdyZWV0aW5nKSB7XG4gICAgICAgICAgICAgICAkd2luZG93LmFsZXJ0KGdyZWV0aW5nKTtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwiZ3JlZXRpbmdcIiAvPlxuICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cImRvR3JlZXRpbmcoZ3JlZXRpbmcpXCI+QUxFUlQ8L2J1dHRvbj5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICBpdCgnc2hvdWxkIGRpc3BsYXkgdGhlIGdyZWV0aW5nIGluIHRoZSBpbnB1dCBib3gnLCBmdW5jdGlvbigpIHtcbiAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdncmVldGluZycpKS5zZW5kS2V5cygnSGVsbG8sIEUyRSBUZXN0cycpO1xuICAgICAgIC8vIElmIHdlIGNsaWNrIHRoZSBidXR0b24gaXQgd2lsbCBibG9jayB0aGUgdGVzdCBydW5uZXJcbiAgICAgICAvLyBlbGVtZW50KCc6YnV0dG9uJykuY2xpY2soKTtcbiAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbmZ1bmN0aW9uICRXaW5kb3dQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gdmFsdWVGbih3aW5kb3cpO1xufVxuXG4vKiBnbG9iYWwgY3VycmVuY3lGaWx0ZXI6IHRydWUsXG4gZGF0ZUZpbHRlcjogdHJ1ZSxcbiBmaWx0ZXJGaWx0ZXI6IHRydWUsXG4ganNvbkZpbHRlcjogdHJ1ZSxcbiBsaW1pdFRvRmlsdGVyOiB0cnVlLFxuIGxvd2VyY2FzZUZpbHRlcjogdHJ1ZSxcbiBudW1iZXJGaWx0ZXI6IHRydWUsXG4gb3JkZXJCeUZpbHRlcjogdHJ1ZSxcbiB1cHBlcmNhc2VGaWx0ZXI6IHRydWUsXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRmaWx0ZXJQcm92aWRlclxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogRmlsdGVycyBhcmUganVzdCBmdW5jdGlvbnMgd2hpY2ggdHJhbnNmb3JtIGlucHV0IHRvIGFuIG91dHB1dC4gSG93ZXZlciBmaWx0ZXJzIG5lZWQgdG8gYmVcbiAqIERlcGVuZGVuY3kgSW5qZWN0ZWQuIFRvIGFjaGlldmUgdGhpcyBhIGZpbHRlciBkZWZpbml0aW9uIGNvbnNpc3RzIG9mIGEgZmFjdG9yeSBmdW5jdGlvbiB3aGljaCBpc1xuICogYW5ub3RhdGVkIHdpdGggZGVwZW5kZW5jaWVzIGFuZCBpcyByZXNwb25zaWJsZSBmb3IgY3JlYXRpbmcgYSBmaWx0ZXIgZnVuY3Rpb24uXG4gKlxuICogYGBganNcbiAqICAgLy8gRmlsdGVyIHJlZ2lzdHJhdGlvblxuICogICBmdW5jdGlvbiBNeU1vZHVsZSgkcHJvdmlkZSwgJGZpbHRlclByb3ZpZGVyKSB7XG4gKiAgICAgLy8gY3JlYXRlIGEgc2VydmljZSB0byBkZW1vbnN0cmF0ZSBpbmplY3Rpb24gKG5vdCBhbHdheXMgbmVlZGVkKVxuICogICAgICRwcm92aWRlLnZhbHVlKCdncmVldCcsIGZ1bmN0aW9uKG5hbWUpe1xuICogICAgICAgcmV0dXJuICdIZWxsbyAnICsgbmFtZSArICchJztcbiAqICAgICB9KTtcbiAqXG4gKiAgICAgLy8gcmVnaXN0ZXIgYSBmaWx0ZXIgZmFjdG9yeSB3aGljaCB1c2VzIHRoZVxuICogICAgIC8vIGdyZWV0IHNlcnZpY2UgdG8gZGVtb25zdHJhdGUgREkuXG4gKiAgICAgJGZpbHRlclByb3ZpZGVyLnJlZ2lzdGVyKCdncmVldCcsIGZ1bmN0aW9uKGdyZWV0KXtcbiAqICAgICAgIC8vIHJldHVybiB0aGUgZmlsdGVyIGZ1bmN0aW9uIHdoaWNoIHVzZXMgdGhlIGdyZWV0IHNlcnZpY2VcbiAqICAgICAgIC8vIHRvIGdlbmVyYXRlIHNhbHV0YXRpb25cbiAqICAgICAgIHJldHVybiBmdW5jdGlvbih0ZXh0KSB7XG4gKiAgICAgICAgIC8vIGZpbHRlcnMgbmVlZCB0byBiZSBmb3JnaXZpbmcgc28gY2hlY2sgaW5wdXQgdmFsaWRpdHlcbiAqICAgICAgICAgcmV0dXJuIHRleHQgJiYgZ3JlZXQodGV4dCkgfHwgdGV4dDtcbiAqICAgICAgIH07XG4gKiAgICAgfSk7XG4gKiAgIH1cbiAqIGBgYFxuICpcbiAqIFRoZSBmaWx0ZXIgZnVuY3Rpb24gaXMgcmVnaXN0ZXJlZCB3aXRoIHRoZSBgJGluamVjdG9yYCB1bmRlciB0aGUgZmlsdGVyIG5hbWUgc3VmZml4IHdpdGhcbiAqIGBGaWx0ZXJgLlxuICpcbiAqIGBgYGpzXG4gKiAgIGl0KCdzaG91bGQgYmUgdGhlIHNhbWUgaW5zdGFuY2UnLCBpbmplY3QoXG4gKiAgICAgZnVuY3Rpb24oJGZpbHRlclByb3ZpZGVyKSB7XG4gKiAgICAgICAkZmlsdGVyUHJvdmlkZXIucmVnaXN0ZXIoJ3JldmVyc2UnLCBmdW5jdGlvbigpe1xuICogICAgICAgICByZXR1cm4gLi4uO1xuICogICAgICAgfSk7XG4gKiAgICAgfSxcbiAqICAgICBmdW5jdGlvbigkZmlsdGVyLCByZXZlcnNlRmlsdGVyKSB7XG4gKiAgICAgICBleHBlY3QoJGZpbHRlcigncmV2ZXJzZScpKS50b0JlKHJldmVyc2VGaWx0ZXIpO1xuICogICAgIH0pO1xuICogYGBgXG4gKlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IGhvdyBhbmd1bGFyIGZpbHRlcnMgd29yaywgYW5kIGhvdyB0byBjcmVhdGUgeW91ciBvd24gZmlsdGVycywgc2VlXG4gKiB7QGxpbmsgZ3VpZGUvZmlsdGVyIEZpbHRlcnN9IGluIHRoZSBBbmd1bGFyIERldmVsb3BlciBHdWlkZS5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkZmlsdGVyXG4gKiBAa2luZCBmdW5jdGlvblxuICogQGRlc2NyaXB0aW9uXG4gKiBGaWx0ZXJzIGFyZSB1c2VkIGZvciBmb3JtYXR0aW5nIGRhdGEgZGlzcGxheWVkIHRvIHRoZSB1c2VyLlxuICpcbiAqIFRoZSBnZW5lcmFsIHN5bnRheCBpbiB0ZW1wbGF0ZXMgaXMgYXMgZm9sbG93czpcbiAqXG4gKiAgICAgICAgIHt7IGV4cHJlc3Npb24gW3wgZmlsdGVyX25hbWVbOnBhcmFtZXRlcl92YWx1ZV0gLi4uIF0gfX1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBOYW1lIG9mIHRoZSBmaWx0ZXIgZnVuY3Rpb24gdG8gcmV0cmlldmVcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIiRmaWx0ZXJcIiBtb2R1bGU9XCJmaWx0ZXJFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiTWFpbkN0cmxcIj5cbiAgICAgICAgPGgzPnt7IG9yaWdpbmFsVGV4dCB9fTwvaDM+XG4gICAgICAgIDxoMz57eyBmaWx0ZXJlZFRleHQgfX08L2gzPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG5cbiAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgYW5ndWxhci5tb2R1bGUoJ2ZpbHRlckV4YW1wbGUnLCBbXSlcbiAgICAgIC5jb250cm9sbGVyKCdNYWluQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgJGZpbHRlcikge1xuICAgICAgICAkc2NvcGUub3JpZ2luYWxUZXh0ID0gJ2hlbGxvJztcbiAgICAgICAgJHNjb3BlLmZpbHRlcmVkVGV4dCA9ICRmaWx0ZXIoJ3VwcGVyY2FzZScpKCRzY29wZS5vcmlnaW5hbFRleHQpO1xuICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAgKi9cbiRGaWx0ZXJQcm92aWRlci4kaW5qZWN0ID0gWyckcHJvdmlkZSddO1xuZnVuY3Rpb24gJEZpbHRlclByb3ZpZGVyKCRwcm92aWRlKSB7XG4gIHZhciBzdWZmaXggPSAnRmlsdGVyJztcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkZmlsdGVyUHJvdmlkZXIjcmVnaXN0ZXJcbiAgICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fSBuYW1lIE5hbWUgb2YgdGhlIGZpbHRlciBmdW5jdGlvbiwgb3IgYW4gb2JqZWN0IG1hcCBvZiBmaWx0ZXJzIHdoZXJlXG4gICAqICAgIHRoZSBrZXlzIGFyZSB0aGUgZmlsdGVyIG5hbWVzIGFuZCB0aGUgdmFsdWVzIGFyZSB0aGUgZmlsdGVyIGZhY3Rvcmllcy5cbiAgICogQHJldHVybnMge09iamVjdH0gUmVnaXN0ZXJlZCBmaWx0ZXIgaW5zdGFuY2UsIG9yIGlmIGEgbWFwIG9mIGZpbHRlcnMgd2FzIHByb3ZpZGVkIHRoZW4gYSBtYXBcbiAgICogICAgb2YgdGhlIHJlZ2lzdGVyZWQgZmlsdGVyIGluc3RhbmNlcy5cbiAgICovXG4gIGZ1bmN0aW9uIHJlZ2lzdGVyKG5hbWUsIGZhY3RvcnkpIHtcbiAgICBpZiAoaXNPYmplY3QobmFtZSkpIHtcbiAgICAgIHZhciBmaWx0ZXJzID0ge307XG4gICAgICBmb3JFYWNoKG5hbWUsIGZ1bmN0aW9uKGZpbHRlciwga2V5KSB7XG4gICAgICAgIGZpbHRlcnNba2V5XSA9IHJlZ2lzdGVyKGtleSwgZmlsdGVyKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZpbHRlcnM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAkcHJvdmlkZS5mYWN0b3J5KG5hbWUgKyBzdWZmaXgsIGZhY3RvcnkpO1xuICAgIH1cbiAgfVxuICB0aGlzLnJlZ2lzdGVyID0gcmVnaXN0ZXI7XG5cbiAgdGhpcy4kZ2V0ID0gWyckaW5qZWN0b3InLCBmdW5jdGlvbigkaW5qZWN0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24obmFtZSkge1xuICAgICAgcmV0dXJuICRpbmplY3Rvci5nZXQobmFtZSArIHN1ZmZpeCk7XG4gICAgfTtcbiAgfV07XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gIC8qIGdsb2JhbFxuICAgIGN1cnJlbmN5RmlsdGVyOiBmYWxzZSxcbiAgICBkYXRlRmlsdGVyOiBmYWxzZSxcbiAgICBmaWx0ZXJGaWx0ZXI6IGZhbHNlLFxuICAgIGpzb25GaWx0ZXI6IGZhbHNlLFxuICAgIGxpbWl0VG9GaWx0ZXI6IGZhbHNlLFxuICAgIGxvd2VyY2FzZUZpbHRlcjogZmFsc2UsXG4gICAgbnVtYmVyRmlsdGVyOiBmYWxzZSxcbiAgICBvcmRlckJ5RmlsdGVyOiBmYWxzZSxcbiAgICB1cHBlcmNhc2VGaWx0ZXI6IGZhbHNlLFxuICAqL1xuXG4gIHJlZ2lzdGVyKCdjdXJyZW5jeScsIGN1cnJlbmN5RmlsdGVyKTtcbiAgcmVnaXN0ZXIoJ2RhdGUnLCBkYXRlRmlsdGVyKTtcbiAgcmVnaXN0ZXIoJ2ZpbHRlcicsIGZpbHRlckZpbHRlcik7XG4gIHJlZ2lzdGVyKCdqc29uJywganNvbkZpbHRlcik7XG4gIHJlZ2lzdGVyKCdsaW1pdFRvJywgbGltaXRUb0ZpbHRlcik7XG4gIHJlZ2lzdGVyKCdsb3dlcmNhc2UnLCBsb3dlcmNhc2VGaWx0ZXIpO1xuICByZWdpc3RlcignbnVtYmVyJywgbnVtYmVyRmlsdGVyKTtcbiAgcmVnaXN0ZXIoJ29yZGVyQnknLCBvcmRlckJ5RmlsdGVyKTtcbiAgcmVnaXN0ZXIoJ3VwcGVyY2FzZScsIHVwcGVyY2FzZUZpbHRlcik7XG59XG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUgZmlsdGVyXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU2VsZWN0cyBhIHN1YnNldCBvZiBpdGVtcyBmcm9tIGBhcnJheWAgYW5kIHJldHVybnMgaXQgYXMgYSBuZXcgYXJyYXkuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvdXJjZSBhcnJheS5cbiAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdHxmdW5jdGlvbigpfSBleHByZXNzaW9uIFRoZSBwcmVkaWNhdGUgdG8gYmUgdXNlZCBmb3Igc2VsZWN0aW5nIGl0ZW1zIGZyb21cbiAqICAgYGFycmF5YC5cbiAqXG4gKiAgIENhbiBiZSBvbmUgb2Y6XG4gKlxuICogICAtIGBzdHJpbmdgOiBUaGUgc3RyaW5nIGlzIHVzZWQgZm9yIG1hdGNoaW5nIGFnYWluc3QgdGhlIGNvbnRlbnRzIG9mIHRoZSBgYXJyYXlgLiBBbGwgc3RyaW5ncyBvclxuICogICAgIG9iamVjdHMgd2l0aCBzdHJpbmcgcHJvcGVydGllcyBpbiBgYXJyYXlgIHRoYXQgbWF0Y2ggdGhpcyBzdHJpbmcgd2lsbCBiZSByZXR1cm5lZC4gVGhpcyBhbHNvXG4gKiAgICAgYXBwbGllcyB0byBuZXN0ZWQgb2JqZWN0IHByb3BlcnRpZXMuXG4gKiAgICAgVGhlIHByZWRpY2F0ZSBjYW4gYmUgbmVnYXRlZCBieSBwcmVmaXhpbmcgdGhlIHN0cmluZyB3aXRoIGAhYC5cbiAqXG4gKiAgIC0gYE9iamVjdGA6IEEgcGF0dGVybiBvYmplY3QgY2FuIGJlIHVzZWQgdG8gZmlsdGVyIHNwZWNpZmljIHByb3BlcnRpZXMgb24gb2JqZWN0cyBjb250YWluZWRcbiAqICAgICBieSBgYXJyYXlgLiBGb3IgZXhhbXBsZSBge25hbWU6XCJNXCIsIHBob25lOlwiMVwifWAgcHJlZGljYXRlIHdpbGwgcmV0dXJuIGFuIGFycmF5IG9mIGl0ZW1zXG4gKiAgICAgd2hpY2ggaGF2ZSBwcm9wZXJ0eSBgbmFtZWAgY29udGFpbmluZyBcIk1cIiBhbmQgcHJvcGVydHkgYHBob25lYCBjb250YWluaW5nIFwiMVwiLiBBIHNwZWNpYWxcbiAqICAgICBwcm9wZXJ0eSBuYW1lIGAkYCBjYW4gYmUgdXNlZCAoYXMgaW4gYHskOlwidGV4dFwifWApIHRvIGFjY2VwdCBhIG1hdGNoIGFnYWluc3QgYW55XG4gKiAgICAgcHJvcGVydHkgb2YgdGhlIG9iamVjdCBvciBpdHMgbmVzdGVkIG9iamVjdCBwcm9wZXJ0aWVzLiBUaGF0J3MgZXF1aXZhbGVudCB0byB0aGUgc2ltcGxlXG4gKiAgICAgc3Vic3RyaW5nIG1hdGNoIHdpdGggYSBgc3RyaW5nYCBhcyBkZXNjcmliZWQgYWJvdmUuIFRoZSBwcmVkaWNhdGUgY2FuIGJlIG5lZ2F0ZWQgYnkgcHJlZml4aW5nXG4gKiAgICAgdGhlIHN0cmluZyB3aXRoIGAhYC5cbiAqICAgICBGb3IgZXhhbXBsZSBge25hbWU6IFwiIU1cIn1gIHByZWRpY2F0ZSB3aWxsIHJldHVybiBhbiBhcnJheSBvZiBpdGVtcyB3aGljaCBoYXZlIHByb3BlcnR5IGBuYW1lYFxuICogICAgIG5vdCBjb250YWluaW5nIFwiTVwiLlxuICpcbiAqICAgICBOb3RlIHRoYXQgYSBuYW1lZCBwcm9wZXJ0eSB3aWxsIG1hdGNoIHByb3BlcnRpZXMgb24gdGhlIHNhbWUgbGV2ZWwgb25seSwgd2hpbGUgdGhlIHNwZWNpYWxcbiAqICAgICBgJGAgcHJvcGVydHkgd2lsbCBtYXRjaCBwcm9wZXJ0aWVzIG9uIHRoZSBzYW1lIGxldmVsIG9yIGRlZXBlci4gRS5nLiBhbiBhcnJheSBpdGVtIGxpa2VcbiAqICAgICBge25hbWU6IHtmaXJzdDogJ0pvaG4nLCBsYXN0OiAnRG9lJ319YCB3aWxsICoqbm90KiogYmUgbWF0Y2hlZCBieSBge25hbWU6ICdKb2huJ31gLCBidXRcbiAqICAgICAqKndpbGwqKiBiZSBtYXRjaGVkIGJ5IGB7JDogJ0pvaG4nfWAuXG4gKlxuICogICAtIGBmdW5jdGlvbih2YWx1ZSwgaW5kZXgpYDogQSBwcmVkaWNhdGUgZnVuY3Rpb24gY2FuIGJlIHVzZWQgdG8gd3JpdGUgYXJiaXRyYXJ5IGZpbHRlcnMuIFRoZVxuICogICAgIGZ1bmN0aW9uIGlzIGNhbGxlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAuIFRoZSBmaW5hbCByZXN1bHQgaXMgYW4gYXJyYXkgb2YgdGhvc2VcbiAqICAgICBlbGVtZW50cyB0aGF0IHRoZSBwcmVkaWNhdGUgcmV0dXJuZWQgdHJ1ZSBmb3IuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbihhY3R1YWwsIGV4cGVjdGVkKXx0cnVlfHVuZGVmaW5lZH0gY29tcGFyYXRvciBDb21wYXJhdG9yIHdoaWNoIGlzIHVzZWQgaW5cbiAqICAgICBkZXRlcm1pbmluZyBpZiB0aGUgZXhwZWN0ZWQgdmFsdWUgKGZyb20gdGhlIGZpbHRlciBleHByZXNzaW9uKSBhbmQgYWN0dWFsIHZhbHVlIChmcm9tXG4gKiAgICAgdGhlIG9iamVjdCBpbiB0aGUgYXJyYXkpIHNob3VsZCBiZSBjb25zaWRlcmVkIGEgbWF0Y2guXG4gKlxuICogICBDYW4gYmUgb25lIG9mOlxuICpcbiAqICAgLSBgZnVuY3Rpb24oYWN0dWFsLCBleHBlY3RlZClgOlxuICogICAgIFRoZSBmdW5jdGlvbiB3aWxsIGJlIGdpdmVuIHRoZSBvYmplY3QgdmFsdWUgYW5kIHRoZSBwcmVkaWNhdGUgdmFsdWUgdG8gY29tcGFyZSBhbmRcbiAqICAgICBzaG91bGQgcmV0dXJuIHRydWUgaWYgYm90aCB2YWx1ZXMgc2hvdWxkIGJlIGNvbnNpZGVyZWQgZXF1YWwuXG4gKlxuICogICAtIGB0cnVlYDogQSBzaG9ydGhhbmQgZm9yIGBmdW5jdGlvbihhY3R1YWwsIGV4cGVjdGVkKSB7IHJldHVybiBhbmd1bGFyLmVxdWFscyhhY3R1YWwsIGV4cGVjdGVkKX1gLlxuICogICAgIFRoaXMgaXMgZXNzZW50aWFsbHkgc3RyaWN0IGNvbXBhcmlzb24gb2YgZXhwZWN0ZWQgYW5kIGFjdHVhbC5cbiAqXG4gKiAgIC0gYGZhbHNlfHVuZGVmaW5lZGA6IEEgc2hvcnQgaGFuZCBmb3IgYSBmdW5jdGlvbiB3aGljaCB3aWxsIGxvb2sgZm9yIGEgc3Vic3RyaW5nIG1hdGNoIGluIGNhc2VcbiAqICAgICBpbnNlbnNpdGl2ZSB3YXkuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxkaXYgbmctaW5pdD1cImZyaWVuZHMgPSBbe25hbWU6J0pvaG4nLCBwaG9uZTonNTU1LTEyNzYnfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge25hbWU6J01hcnknLCBwaG9uZTonODAwLUJJRy1NQVJZJ30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOidNaWtlJywgcGhvbmU6JzU1NS00MzIxJ30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOidBZGFtJywgcGhvbmU6JzU1NS01Njc4J30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOidKdWxpZScsIHBob25lOic1NTUtODc2NSd9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTonSnVsaWV0dGUnLCBwaG9uZTonNTU1LTU2NzgnfV1cIj48L2Rpdj5cblxuICAgICAgIFNlYXJjaDogPGlucHV0IG5nLW1vZGVsPVwic2VhcmNoVGV4dFwiPlxuICAgICAgIDx0YWJsZSBpZD1cInNlYXJjaFRleHRSZXN1bHRzXCI+XG4gICAgICAgICA8dHI+PHRoPk5hbWU8L3RoPjx0aD5QaG9uZTwvdGg+PC90cj5cbiAgICAgICAgIDx0ciBuZy1yZXBlYXQ9XCJmcmllbmQgaW4gZnJpZW5kcyB8IGZpbHRlcjpzZWFyY2hUZXh0XCI+XG4gICAgICAgICAgIDx0ZD57e2ZyaWVuZC5uYW1lfX08L3RkPlxuICAgICAgICAgICA8dGQ+e3tmcmllbmQucGhvbmV9fTwvdGQ+XG4gICAgICAgICA8L3RyPlxuICAgICAgIDwvdGFibGU+XG4gICAgICAgPGhyPlxuICAgICAgIEFueTogPGlucHV0IG5nLW1vZGVsPVwic2VhcmNoLiRcIj4gPGJyPlxuICAgICAgIE5hbWUgb25seSA8aW5wdXQgbmctbW9kZWw9XCJzZWFyY2gubmFtZVwiPjxicj5cbiAgICAgICBQaG9uZSBvbmx5IDxpbnB1dCBuZy1tb2RlbD1cInNlYXJjaC5waG9uZVwiPjxicj5cbiAgICAgICBFcXVhbGl0eSA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJzdHJpY3RcIj48YnI+XG4gICAgICAgPHRhYmxlIGlkPVwic2VhcmNoT2JqUmVzdWx0c1wiPlxuICAgICAgICAgPHRyPjx0aD5OYW1lPC90aD48dGg+UGhvbmU8L3RoPjwvdHI+XG4gICAgICAgICA8dHIgbmctcmVwZWF0PVwiZnJpZW5kT2JqIGluIGZyaWVuZHMgfCBmaWx0ZXI6c2VhcmNoOnN0cmljdFwiPlxuICAgICAgICAgICA8dGQ+e3tmcmllbmRPYmoubmFtZX19PC90ZD5cbiAgICAgICAgICAgPHRkPnt7ZnJpZW5kT2JqLnBob25lfX08L3RkPlxuICAgICAgICAgPC90cj5cbiAgICAgICA8L3RhYmxlPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICB2YXIgZXhwZWN0RnJpZW5kTmFtZXMgPSBmdW5jdGlvbihleHBlY3RlZE5hbWVzLCBrZXkpIHtcbiAgICAgICAgIGVsZW1lbnQuYWxsKGJ5LnJlcGVhdGVyKGtleSArICcgaW4gZnJpZW5kcycpLmNvbHVtbihrZXkgKyAnLm5hbWUnKSkudGhlbihmdW5jdGlvbihhcnIpIHtcbiAgICAgICAgICAgYXJyLmZvckVhY2goZnVuY3Rpb24od2QsIGkpIHtcbiAgICAgICAgICAgICBleHBlY3Qod2QuZ2V0VGV4dCgpKS50b01hdGNoKGV4cGVjdGVkTmFtZXNbaV0pO1xuICAgICAgICAgICB9KTtcbiAgICAgICAgIH0pO1xuICAgICAgIH07XG5cbiAgICAgICBpdCgnc2hvdWxkIHNlYXJjaCBhY3Jvc3MgYWxsIGZpZWxkcyB3aGVuIGZpbHRlcmluZyB3aXRoIGEgc3RyaW5nJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICB2YXIgc2VhcmNoVGV4dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3NlYXJjaFRleHQnKSk7XG4gICAgICAgICBzZWFyY2hUZXh0LmNsZWFyKCk7XG4gICAgICAgICBzZWFyY2hUZXh0LnNlbmRLZXlzKCdtJyk7XG4gICAgICAgICBleHBlY3RGcmllbmROYW1lcyhbJ01hcnknLCAnTWlrZScsICdBZGFtJ10sICdmcmllbmQnKTtcblxuICAgICAgICAgc2VhcmNoVGV4dC5jbGVhcigpO1xuICAgICAgICAgc2VhcmNoVGV4dC5zZW5kS2V5cygnNzYnKTtcbiAgICAgICAgIGV4cGVjdEZyaWVuZE5hbWVzKFsnSm9obicsICdKdWxpZSddLCAnZnJpZW5kJyk7XG4gICAgICAgfSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIHNlYXJjaCBpbiBzcGVjaWZpYyBmaWVsZHMgd2hlbiBmaWx0ZXJpbmcgd2l0aCBhIHByZWRpY2F0ZSBvYmplY3QnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIHZhciBzZWFyY2hBbnkgPSBlbGVtZW50KGJ5Lm1vZGVsKCdzZWFyY2guJCcpKTtcbiAgICAgICAgIHNlYXJjaEFueS5jbGVhcigpO1xuICAgICAgICAgc2VhcmNoQW55LnNlbmRLZXlzKCdpJyk7XG4gICAgICAgICBleHBlY3RGcmllbmROYW1lcyhbJ01hcnknLCAnTWlrZScsICdKdWxpZScsICdKdWxpZXR0ZSddLCAnZnJpZW5kT2JqJyk7XG4gICAgICAgfSk7XG4gICAgICAgaXQoJ3Nob3VsZCB1c2UgYSBlcXVhbCBjb21wYXJpc29uIHdoZW4gY29tcGFyYXRvciBpcyB0cnVlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICB2YXIgc2VhcmNoTmFtZSA9IGVsZW1lbnQoYnkubW9kZWwoJ3NlYXJjaC5uYW1lJykpO1xuICAgICAgICAgdmFyIHN0cmljdCA9IGVsZW1lbnQoYnkubW9kZWwoJ3N0cmljdCcpKTtcbiAgICAgICAgIHNlYXJjaE5hbWUuY2xlYXIoKTtcbiAgICAgICAgIHNlYXJjaE5hbWUuc2VuZEtleXMoJ0p1bGllJyk7XG4gICAgICAgICBzdHJpY3QuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdEZyaWVuZE5hbWVzKFsnSnVsaWUnXSwgJ2ZyaWVuZE9iaicpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbmZ1bmN0aW9uIGZpbHRlckZpbHRlcigpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFycmF5LCBleHByZXNzaW9uLCBjb21wYXJhdG9yKSB7XG4gICAgaWYgKCFpc0FycmF5KGFycmF5KSkgcmV0dXJuIGFycmF5O1xuXG4gICAgdmFyIHByZWRpY2F0ZUZuO1xuICAgIHZhciBtYXRjaEFnYWluc3RBbnlQcm9wO1xuXG4gICAgc3dpdGNoICh0eXBlb2YgZXhwcmVzc2lvbikge1xuICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICBwcmVkaWNhdGVGbiA9IGV4cHJlc3Npb247XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICBjYXNlICdudW1iZXInOlxuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgbWF0Y2hBZ2FpbnN0QW55UHJvcCA9IHRydWU7XG4gICAgICAgIC8vanNoaW50IC1XMDg2XG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICAvL2pzaGludCArVzA4NlxuICAgICAgICBwcmVkaWNhdGVGbiA9IGNyZWF0ZVByZWRpY2F0ZUZuKGV4cHJlc3Npb24sIGNvbXBhcmF0b3IsIG1hdGNoQWdhaW5zdEFueVByb3ApO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXkuZmlsdGVyKHByZWRpY2F0ZUZuKTtcbiAgfTtcbn1cblxuLy8gSGVscGVyIGZ1bmN0aW9ucyBmb3IgYGZpbHRlckZpbHRlcmBcbmZ1bmN0aW9uIGNyZWF0ZVByZWRpY2F0ZUZuKGV4cHJlc3Npb24sIGNvbXBhcmF0b3IsIG1hdGNoQWdhaW5zdEFueVByb3ApIHtcbiAgdmFyIHNob3VsZE1hdGNoUHJpbWl0aXZlcyA9IGlzT2JqZWN0KGV4cHJlc3Npb24pICYmICgnJCcgaW4gZXhwcmVzc2lvbik7XG4gIHZhciBwcmVkaWNhdGVGbjtcblxuICBpZiAoY29tcGFyYXRvciA9PT0gdHJ1ZSkge1xuICAgIGNvbXBhcmF0b3IgPSBlcXVhbHM7XG4gIH0gZWxzZSBpZiAoIWlzRnVuY3Rpb24oY29tcGFyYXRvcikpIHtcbiAgICBjb21wYXJhdG9yID0gZnVuY3Rpb24oYWN0dWFsLCBleHBlY3RlZCkge1xuICAgICAgaWYgKGlzT2JqZWN0KGFjdHVhbCkgfHwgaXNPYmplY3QoZXhwZWN0ZWQpKSB7XG4gICAgICAgIC8vIFByZXZlbnQgYW4gb2JqZWN0IHRvIGJlIGNvbnNpZGVyZWQgZXF1YWwgdG8gYSBzdHJpbmcgbGlrZSBgJ1tvYmplY3QnYFxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGFjdHVhbCA9IGxvd2VyY2FzZSgnJyArIGFjdHVhbCk7XG4gICAgICBleHBlY3RlZCA9IGxvd2VyY2FzZSgnJyArIGV4cGVjdGVkKTtcbiAgICAgIHJldHVybiBhY3R1YWwuaW5kZXhPZihleHBlY3RlZCkgIT09IC0xO1xuICAgIH07XG4gIH1cblxuICBwcmVkaWNhdGVGbiA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICBpZiAoc2hvdWxkTWF0Y2hQcmltaXRpdmVzICYmICFpc09iamVjdChpdGVtKSkge1xuICAgICAgcmV0dXJuIGRlZXBDb21wYXJlKGl0ZW0sIGV4cHJlc3Npb24uJCwgY29tcGFyYXRvciwgZmFsc2UpO1xuICAgIH1cbiAgICByZXR1cm4gZGVlcENvbXBhcmUoaXRlbSwgZXhwcmVzc2lvbiwgY29tcGFyYXRvciwgbWF0Y2hBZ2FpbnN0QW55UHJvcCk7XG4gIH07XG5cbiAgcmV0dXJuIHByZWRpY2F0ZUZuO1xufVxuXG5mdW5jdGlvbiBkZWVwQ29tcGFyZShhY3R1YWwsIGV4cGVjdGVkLCBjb21wYXJhdG9yLCBtYXRjaEFnYWluc3RBbnlQcm9wLCBkb250TWF0Y2hXaG9sZU9iamVjdCkge1xuICB2YXIgYWN0dWFsVHlwZSA9IHR5cGVvZiBhY3R1YWw7XG4gIHZhciBleHBlY3RlZFR5cGUgPSB0eXBlb2YgZXhwZWN0ZWQ7XG5cbiAgaWYgKChleHBlY3RlZFR5cGUgPT09ICdzdHJpbmcnKSAmJiAoZXhwZWN0ZWQuY2hhckF0KDApID09PSAnIScpKSB7XG4gICAgcmV0dXJuICFkZWVwQ29tcGFyZShhY3R1YWwsIGV4cGVjdGVkLnN1YnN0cmluZygxKSwgY29tcGFyYXRvciwgbWF0Y2hBZ2FpbnN0QW55UHJvcCk7XG4gIH0gZWxzZSBpZiAoaXNBcnJheShhY3R1YWwpKSB7XG4gICAgLy8gSW4gY2FzZSBgYWN0dWFsYCBpcyBhbiBhcnJheSwgY29uc2lkZXIgaXQgYSBtYXRjaFxuICAgIC8vIGlmIEFOWSBvZiBpdCdzIGl0ZW1zIG1hdGNoZXMgYGV4cGVjdGVkYFxuICAgIHJldHVybiBhY3R1YWwuc29tZShmdW5jdGlvbihpdGVtKSB7XG4gICAgICByZXR1cm4gZGVlcENvbXBhcmUoaXRlbSwgZXhwZWN0ZWQsIGNvbXBhcmF0b3IsIG1hdGNoQWdhaW5zdEFueVByb3ApO1xuICAgIH0pO1xuICB9XG5cbiAgc3dpdGNoIChhY3R1YWxUeXBlKSB7XG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIHZhciBrZXk7XG4gICAgICBpZiAobWF0Y2hBZ2FpbnN0QW55UHJvcCkge1xuICAgICAgICBmb3IgKGtleSBpbiBhY3R1YWwpIHtcbiAgICAgICAgICBpZiAoKGtleS5jaGFyQXQoMCkgIT09ICckJykgJiYgZGVlcENvbXBhcmUoYWN0dWFsW2tleV0sIGV4cGVjdGVkLCBjb21wYXJhdG9yLCB0cnVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkb250TWF0Y2hXaG9sZU9iamVjdCA/IGZhbHNlIDogZGVlcENvbXBhcmUoYWN0dWFsLCBleHBlY3RlZCwgY29tcGFyYXRvciwgZmFsc2UpO1xuICAgICAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGZvciAoa2V5IGluIGV4cGVjdGVkKSB7XG4gICAgICAgICAgdmFyIGV4cGVjdGVkVmFsID0gZXhwZWN0ZWRba2V5XTtcbiAgICAgICAgICBpZiAoaXNGdW5jdGlvbihleHBlY3RlZFZhbCkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBtYXRjaEFueVByb3BlcnR5ID0ga2V5ID09PSAnJCc7XG4gICAgICAgICAgdmFyIGFjdHVhbFZhbCA9IG1hdGNoQW55UHJvcGVydHkgPyBhY3R1YWwgOiBhY3R1YWxba2V5XTtcbiAgICAgICAgICBpZiAoIWRlZXBDb21wYXJlKGFjdHVhbFZhbCwgZXhwZWN0ZWRWYWwsIGNvbXBhcmF0b3IsIG1hdGNoQW55UHJvcGVydHksIG1hdGNoQW55UHJvcGVydHkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNvbXBhcmF0b3IoYWN0dWFsLCBleHBlY3RlZCk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBjb21wYXJhdG9yKGFjdHVhbCwgZXhwZWN0ZWQpO1xuICB9XG59XG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUgY3VycmVuY3lcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBGb3JtYXRzIGEgbnVtYmVyIGFzIGEgY3VycmVuY3kgKGllICQxLDIzNC41NikuIFdoZW4gbm8gY3VycmVuY3kgc3ltYm9sIGlzIHByb3ZpZGVkLCBkZWZhdWx0XG4gKiBzeW1ib2wgZm9yIGN1cnJlbnQgbG9jYWxlIGlzIHVzZWQuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGFtb3VudCBJbnB1dCB0byBmaWx0ZXIuXG4gKiBAcGFyYW0ge3N0cmluZz19IHN5bWJvbCBDdXJyZW5jeSBzeW1ib2wgb3IgaWRlbnRpZmllciB0byBiZSBkaXNwbGF5ZWQuXG4gKiBAcGFyYW0ge251bWJlcj19IGZyYWN0aW9uU2l6ZSBOdW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgdG8gcm91bmQgdGhlIGFtb3VudCB0bywgZGVmYXVsdHMgdG8gZGVmYXVsdCBtYXggZnJhY3Rpb24gc2l6ZSBmb3IgY3VycmVudCBsb2NhbGVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEZvcm1hdHRlZCBudW1iZXIuXG4gKlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJjdXJyZW5jeUV4YW1wbGVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2N1cnJlbmN5RXhhbXBsZScsIFtdKVxuICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICRzY29wZS5hbW91bnQgPSAxMjM0LjU2O1xuICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgbmctbW9kZWw9XCJhbW91bnRcIj4gPGJyPlxuICAgICAgICAgZGVmYXVsdCBjdXJyZW5jeSBzeW1ib2wgKCQpOiA8c3BhbiBpZD1cImN1cnJlbmN5LWRlZmF1bHRcIj57e2Ftb3VudCB8IGN1cnJlbmN5fX08L3NwYW4+PGJyPlxuICAgICAgICAgY3VzdG9tIGN1cnJlbmN5IGlkZW50aWZpZXIgKFVTRCQpOiA8c3BhbiBpZD1cImN1cnJlbmN5LWN1c3RvbVwiPnt7YW1vdW50IHwgY3VycmVuY3k6XCJVU0QkXCJ9fTwvc3Bhbj5cbiAgICAgICAgIG5vIGZyYWN0aW9ucyAoMCk6IDxzcGFuIGlkPVwiY3VycmVuY3ktbm8tZnJhY3Rpb25zXCI+e3thbW91bnQgfCBjdXJyZW5jeTpcIlVTRCRcIjowfX08L3NwYW4+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgaW5pdCB3aXRoIDEyMzQuNTYnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjdXJyZW5jeS1kZWZhdWx0JykpLmdldFRleHQoKSkudG9CZSgnJDEsMjM0LjU2Jyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnY3VycmVuY3ktY3VzdG9tJykpLmdldFRleHQoKSkudG9CZSgnVVNEJDEsMjM0LjU2Jyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnY3VycmVuY3ktbm8tZnJhY3Rpb25zJykpLmdldFRleHQoKSkudG9CZSgnVVNEJDEsMjM1Jyk7XG4gICAgICAgfSk7XG4gICAgICAgaXQoJ3Nob3VsZCB1cGRhdGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGlmIChicm93c2VyLnBhcmFtcy5icm93c2VyID09ICdzYWZhcmknKSB7XG4gICAgICAgICAgIC8vIFNhZmFyaSBkb2VzIG5vdCB1bmRlcnN0YW5kIHRoZSBtaW51cyBrZXkuIFNlZVxuICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9wcm90cmFjdG9yL2lzc3Vlcy80ODFcbiAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgfVxuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnYW1vdW50JykpLmNsZWFyKCk7XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdhbW91bnQnKSkuc2VuZEtleXMoJy0xMjM0Jyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnY3VycmVuY3ktZGVmYXVsdCcpKS5nZXRUZXh0KCkpLnRvQmUoJygkMSwyMzQuMDApJyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnY3VycmVuY3ktY3VzdG9tJykpLmdldFRleHQoKSkudG9CZSgnKFVTRCQxLDIzNC4wMCknKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjdXJyZW5jeS1uby1mcmFjdGlvbnMnKSkuZ2V0VGV4dCgpKS50b0JlKCcoVVNEJDEsMjM0KScpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbmN1cnJlbmN5RmlsdGVyLiRpbmplY3QgPSBbJyRsb2NhbGUnXTtcbmZ1bmN0aW9uIGN1cnJlbmN5RmlsdGVyKCRsb2NhbGUpIHtcbiAgdmFyIGZvcm1hdHMgPSAkbG9jYWxlLk5VTUJFUl9GT1JNQVRTO1xuICByZXR1cm4gZnVuY3Rpb24oYW1vdW50LCBjdXJyZW5jeVN5bWJvbCwgZnJhY3Rpb25TaXplKSB7XG4gICAgaWYgKGlzVW5kZWZpbmVkKGN1cnJlbmN5U3ltYm9sKSkge1xuICAgICAgY3VycmVuY3lTeW1ib2wgPSBmb3JtYXRzLkNVUlJFTkNZX1NZTTtcbiAgICB9XG5cbiAgICBpZiAoaXNVbmRlZmluZWQoZnJhY3Rpb25TaXplKSkge1xuICAgICAgZnJhY3Rpb25TaXplID0gZm9ybWF0cy5QQVRURVJOU1sxXS5tYXhGcmFjO1xuICAgIH1cblxuICAgIC8vIGlmIG51bGwgb3IgdW5kZWZpbmVkIHBhc3MgaXQgdGhyb3VnaFxuICAgIHJldHVybiAoYW1vdW50ID09IG51bGwpXG4gICAgICAgID8gYW1vdW50XG4gICAgICAgIDogZm9ybWF0TnVtYmVyKGFtb3VudCwgZm9ybWF0cy5QQVRURVJOU1sxXSwgZm9ybWF0cy5HUk9VUF9TRVAsIGZvcm1hdHMuREVDSU1BTF9TRVAsIGZyYWN0aW9uU2l6ZSkuXG4gICAgICAgICAgICByZXBsYWNlKC9cXHUwMEE0L2csIGN1cnJlbmN5U3ltYm9sKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZmlsdGVyXG4gKiBAbmFtZSBudW1iZXJcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBGb3JtYXRzIGEgbnVtYmVyIGFzIHRleHQuXG4gKlxuICogSWYgdGhlIGlucHV0IGlzIG5vdCBhIG51bWJlciBhbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSBudW1iZXIgTnVtYmVyIHRvIGZvcm1hdC5cbiAqIEBwYXJhbSB7KG51bWJlcnxzdHJpbmcpPX0gZnJhY3Rpb25TaXplIE51bWJlciBvZiBkZWNpbWFsIHBsYWNlcyB0byByb3VuZCB0aGUgbnVtYmVyIHRvLlxuICogSWYgdGhpcyBpcyBub3QgcHJvdmlkZWQgdGhlbiB0aGUgZnJhY3Rpb24gc2l6ZSBpcyBjb21wdXRlZCBmcm9tIHRoZSBjdXJyZW50IGxvY2FsZSdzIG51bWJlclxuICogZm9ybWF0dGluZyBwYXR0ZXJuLiBJbiB0aGUgY2FzZSBvZiB0aGUgZGVmYXVsdCBsb2NhbGUsIGl0IHdpbGwgYmUgMy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IE51bWJlciByb3VuZGVkIHRvIGRlY2ltYWxQbGFjZXMgYW5kIHBsYWNlcyBhIOKAnCzigJ0gYWZ0ZXIgZWFjaCB0aGlyZCBkaWdpdC5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwibnVtYmVyRmlsdGVyRXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnbnVtYmVyRmlsdGVyRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICRzY29wZS52YWwgPSAxMjM0LjU2Nzg5O1xuICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIEVudGVyIG51bWJlcjogPGlucHV0IG5nLW1vZGVsPSd2YWwnPjxicj5cbiAgICAgICAgIERlZmF1bHQgZm9ybWF0dGluZzogPHNwYW4gaWQ9J251bWJlci1kZWZhdWx0Jz57e3ZhbCB8IG51bWJlcn19PC9zcGFuPjxicj5cbiAgICAgICAgIE5vIGZyYWN0aW9uczogPHNwYW4+e3t2YWwgfCBudW1iZXI6MH19PC9zcGFuPjxicj5cbiAgICAgICAgIE5lZ2F0aXZlIG51bWJlcjogPHNwYW4+e3stdmFsIHwgbnVtYmVyOjR9fTwvc3Bhbj5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBmb3JtYXQgbnVtYmVycycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ251bWJlci1kZWZhdWx0JykpLmdldFRleHQoKSkudG9CZSgnMSwyMzQuNTY4Jyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCd2YWwgfCBudW1iZXI6MCcpKS5nZXRUZXh0KCkpLnRvQmUoJzEsMjM1Jyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCctdmFsIHwgbnVtYmVyOjQnKSkuZ2V0VGV4dCgpKS50b0JlKCctMSwyMzQuNTY3OScpO1xuICAgICAgIH0pO1xuXG4gICAgICAgaXQoJ3Nob3VsZCB1cGRhdGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3ZhbCcpKS5jbGVhcigpO1xuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgndmFsJykpLnNlbmRLZXlzKCczMzc0LjMzMycpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ251bWJlci1kZWZhdWx0JykpLmdldFRleHQoKSkudG9CZSgnMywzNzQuMzMzJyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCd2YWwgfCBudW1iZXI6MCcpKS5nZXRUZXh0KCkpLnRvQmUoJzMsMzc0Jyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCctdmFsIHwgbnVtYmVyOjQnKSkuZ2V0VGV4dCgpKS50b0JlKCctMywzNzQuMzMzMCcpO1xuICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG5cbm51bWJlckZpbHRlci4kaW5qZWN0ID0gWyckbG9jYWxlJ107XG5mdW5jdGlvbiBudW1iZXJGaWx0ZXIoJGxvY2FsZSkge1xuICB2YXIgZm9ybWF0cyA9ICRsb2NhbGUuTlVNQkVSX0ZPUk1BVFM7XG4gIHJldHVybiBmdW5jdGlvbihudW1iZXIsIGZyYWN0aW9uU2l6ZSkge1xuXG4gICAgLy8gaWYgbnVsbCBvciB1bmRlZmluZWQgcGFzcyBpdCB0aHJvdWdoXG4gICAgcmV0dXJuIChudW1iZXIgPT0gbnVsbClcbiAgICAgICAgPyBudW1iZXJcbiAgICAgICAgOiBmb3JtYXROdW1iZXIobnVtYmVyLCBmb3JtYXRzLlBBVFRFUk5TWzBdLCBmb3JtYXRzLkdST1VQX1NFUCwgZm9ybWF0cy5ERUNJTUFMX1NFUCxcbiAgICAgICAgICAgICAgICAgICAgICAgZnJhY3Rpb25TaXplKTtcbiAgfTtcbn1cblxudmFyIERFQ0lNQUxfU0VQID0gJy4nO1xuZnVuY3Rpb24gZm9ybWF0TnVtYmVyKG51bWJlciwgcGF0dGVybiwgZ3JvdXBTZXAsIGRlY2ltYWxTZXAsIGZyYWN0aW9uU2l6ZSkge1xuICBpZiAoIWlzRmluaXRlKG51bWJlcikgfHwgaXNPYmplY3QobnVtYmVyKSkgcmV0dXJuICcnO1xuXG4gIHZhciBpc05lZ2F0aXZlID0gbnVtYmVyIDwgMDtcbiAgbnVtYmVyID0gTWF0aC5hYnMobnVtYmVyKTtcbiAgdmFyIG51bVN0ciA9IG51bWJlciArICcnLFxuICAgICAgZm9ybWF0ZWRUZXh0ID0gJycsXG4gICAgICBwYXJ0cyA9IFtdO1xuXG4gIHZhciBoYXNFeHBvbmVudCA9IGZhbHNlO1xuICBpZiAobnVtU3RyLmluZGV4T2YoJ2UnKSAhPT0gLTEpIHtcbiAgICB2YXIgbWF0Y2ggPSBudW1TdHIubWF0Y2goLyhbXFxkXFwuXSspZSgtPykoXFxkKykvKTtcbiAgICBpZiAobWF0Y2ggJiYgbWF0Y2hbMl0gPT0gJy0nICYmIG1hdGNoWzNdID4gZnJhY3Rpb25TaXplICsgMSkge1xuICAgICAgbnVtYmVyID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9ybWF0ZWRUZXh0ID0gbnVtU3RyO1xuICAgICAgaGFzRXhwb25lbnQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmICghaGFzRXhwb25lbnQpIHtcbiAgICB2YXIgZnJhY3Rpb25MZW4gPSAobnVtU3RyLnNwbGl0KERFQ0lNQUxfU0VQKVsxXSB8fCAnJykubGVuZ3RoO1xuXG4gICAgLy8gZGV0ZXJtaW5lIGZyYWN0aW9uU2l6ZSBpZiBpdCBpcyBub3Qgc3BlY2lmaWVkXG4gICAgaWYgKGlzVW5kZWZpbmVkKGZyYWN0aW9uU2l6ZSkpIHtcbiAgICAgIGZyYWN0aW9uU2l6ZSA9IE1hdGgubWluKE1hdGgubWF4KHBhdHRlcm4ubWluRnJhYywgZnJhY3Rpb25MZW4pLCBwYXR0ZXJuLm1heEZyYWMpO1xuICAgIH1cblxuICAgIC8vIHNhZmVseSByb3VuZCBudW1iZXJzIGluIEpTIHdpdGhvdXQgaGl0dGluZyBpbXByZWNpc2lvbnMgb2YgZmxvYXRpbmctcG9pbnQgYXJpdGhtZXRpY3NcbiAgICAvLyBpbnNwaXJlZCBieTpcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9NYXRoL3JvdW5kXG4gICAgbnVtYmVyID0gKyhNYXRoLnJvdW5kKCsobnVtYmVyLnRvU3RyaW5nKCkgKyAnZScgKyBmcmFjdGlvblNpemUpKS50b1N0cmluZygpICsgJ2UnICsgLWZyYWN0aW9uU2l6ZSk7XG5cbiAgICB2YXIgZnJhY3Rpb24gPSAoJycgKyBudW1iZXIpLnNwbGl0KERFQ0lNQUxfU0VQKTtcbiAgICB2YXIgd2hvbGUgPSBmcmFjdGlvblswXTtcbiAgICBmcmFjdGlvbiA9IGZyYWN0aW9uWzFdIHx8ICcnO1xuXG4gICAgdmFyIGksIHBvcyA9IDAsXG4gICAgICAgIGxncm91cCA9IHBhdHRlcm4ubGdTaXplLFxuICAgICAgICBncm91cCA9IHBhdHRlcm4uZ1NpemU7XG5cbiAgICBpZiAod2hvbGUubGVuZ3RoID49IChsZ3JvdXAgKyBncm91cCkpIHtcbiAgICAgIHBvcyA9IHdob2xlLmxlbmd0aCAtIGxncm91cDtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBwb3M7IGkrKykge1xuICAgICAgICBpZiAoKHBvcyAtIGkpICUgZ3JvdXAgPT09IDAgJiYgaSAhPT0gMCkge1xuICAgICAgICAgIGZvcm1hdGVkVGV4dCArPSBncm91cFNlcDtcbiAgICAgICAgfVxuICAgICAgICBmb3JtYXRlZFRleHQgKz0gd2hvbGUuY2hhckF0KGkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoaSA9IHBvczsgaSA8IHdob2xlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoKHdob2xlLmxlbmd0aCAtIGkpICUgbGdyb3VwID09PSAwICYmIGkgIT09IDApIHtcbiAgICAgICAgZm9ybWF0ZWRUZXh0ICs9IGdyb3VwU2VwO1xuICAgICAgfVxuICAgICAgZm9ybWF0ZWRUZXh0ICs9IHdob2xlLmNoYXJBdChpKTtcbiAgICB9XG5cbiAgICAvLyBmb3JtYXQgZnJhY3Rpb24gcGFydC5cbiAgICB3aGlsZSAoZnJhY3Rpb24ubGVuZ3RoIDwgZnJhY3Rpb25TaXplKSB7XG4gICAgICBmcmFjdGlvbiArPSAnMCc7XG4gICAgfVxuXG4gICAgaWYgKGZyYWN0aW9uU2l6ZSAmJiBmcmFjdGlvblNpemUgIT09IFwiMFwiKSBmb3JtYXRlZFRleHQgKz0gZGVjaW1hbFNlcCArIGZyYWN0aW9uLnN1YnN0cigwLCBmcmFjdGlvblNpemUpO1xuICB9IGVsc2Uge1xuICAgIGlmIChmcmFjdGlvblNpemUgPiAwICYmIG51bWJlciA8IDEpIHtcbiAgICAgIGZvcm1hdGVkVGV4dCA9IG51bWJlci50b0ZpeGVkKGZyYWN0aW9uU2l6ZSk7XG4gICAgICBudW1iZXIgPSBwYXJzZUZsb2F0KGZvcm1hdGVkVGV4dCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKG51bWJlciA9PT0gMCkge1xuICAgIGlzTmVnYXRpdmUgPSBmYWxzZTtcbiAgfVxuXG4gIHBhcnRzLnB1c2goaXNOZWdhdGl2ZSA/IHBhdHRlcm4ubmVnUHJlIDogcGF0dGVybi5wb3NQcmUsXG4gICAgICAgICAgICAgZm9ybWF0ZWRUZXh0LFxuICAgICAgICAgICAgIGlzTmVnYXRpdmUgPyBwYXR0ZXJuLm5lZ1N1ZiA6IHBhdHRlcm4ucG9zU3VmKTtcbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpO1xufVxuXG5mdW5jdGlvbiBwYWROdW1iZXIobnVtLCBkaWdpdHMsIHRyaW0pIHtcbiAgdmFyIG5lZyA9ICcnO1xuICBpZiAobnVtIDwgMCkge1xuICAgIG5lZyA9ICAnLSc7XG4gICAgbnVtID0gLW51bTtcbiAgfVxuICBudW0gPSAnJyArIG51bTtcbiAgd2hpbGUgKG51bS5sZW5ndGggPCBkaWdpdHMpIG51bSA9ICcwJyArIG51bTtcbiAgaWYgKHRyaW0pXG4gICAgbnVtID0gbnVtLnN1YnN0cihudW0ubGVuZ3RoIC0gZGlnaXRzKTtcbiAgcmV0dXJuIG5lZyArIG51bTtcbn1cblxuXG5mdW5jdGlvbiBkYXRlR2V0dGVyKG5hbWUsIHNpemUsIG9mZnNldCwgdHJpbSkge1xuICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICB2YXIgdmFsdWUgPSBkYXRlWydnZXQnICsgbmFtZV0oKTtcbiAgICBpZiAob2Zmc2V0ID4gMCB8fCB2YWx1ZSA+IC1vZmZzZXQpXG4gICAgICB2YWx1ZSArPSBvZmZzZXQ7XG4gICAgaWYgKHZhbHVlID09PSAwICYmIG9mZnNldCA9PSAtMTIpIHZhbHVlID0gMTI7XG4gICAgcmV0dXJuIHBhZE51bWJlcih2YWx1ZSwgc2l6ZSwgdHJpbSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRhdGVTdHJHZXR0ZXIobmFtZSwgc2hvcnRGb3JtKSB7XG4gIHJldHVybiBmdW5jdGlvbihkYXRlLCBmb3JtYXRzKSB7XG4gICAgdmFyIHZhbHVlID0gZGF0ZVsnZ2V0JyArIG5hbWVdKCk7XG4gICAgdmFyIGdldCA9IHVwcGVyY2FzZShzaG9ydEZvcm0gPyAoJ1NIT1JUJyArIG5hbWUpIDogbmFtZSk7XG5cbiAgICByZXR1cm4gZm9ybWF0c1tnZXRdW3ZhbHVlXTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGltZVpvbmVHZXR0ZXIoZGF0ZSkge1xuICB2YXIgem9uZSA9IC0xICogZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICB2YXIgcGFkZGVkWm9uZSA9ICh6b25lID49IDApID8gXCIrXCIgOiBcIlwiO1xuXG4gIHBhZGRlZFpvbmUgKz0gcGFkTnVtYmVyKE1hdGhbem9uZSA+IDAgPyAnZmxvb3InIDogJ2NlaWwnXSh6b25lIC8gNjApLCAyKSArXG4gICAgICAgICAgICAgICAgcGFkTnVtYmVyKE1hdGguYWJzKHpvbmUgJSA2MCksIDIpO1xuXG4gIHJldHVybiBwYWRkZWRab25lO1xufVxuXG5mdW5jdGlvbiBnZXRGaXJzdFRodXJzZGF5T2ZZZWFyKHllYXIpIHtcbiAgICAvLyAwID0gaW5kZXggb2YgSmFudWFyeVxuICAgIHZhciBkYXlPZldlZWtPbkZpcnN0ID0gKG5ldyBEYXRlKHllYXIsIDAsIDEpKS5nZXREYXkoKTtcbiAgICAvLyA0ID0gaW5kZXggb2YgVGh1cnNkYXkgKCsxIHRvIGFjY291bnQgZm9yIDFzdCA9IDUpXG4gICAgLy8gMTEgPSBpbmRleCBvZiAqbmV4dCogVGh1cnNkYXkgKCsxIGFjY291bnQgZm9yIDFzdCA9IDEyKVxuICAgIHJldHVybiBuZXcgRGF0ZSh5ZWFyLCAwLCAoKGRheU9mV2Vla09uRmlyc3QgPD0gNCkgPyA1IDogMTIpIC0gZGF5T2ZXZWVrT25GaXJzdCk7XG59XG5cbmZ1bmN0aW9uIGdldFRodXJzZGF5VGhpc1dlZWsoZGF0ZXRpbWUpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoZGF0ZXRpbWUuZ2V0RnVsbFllYXIoKSwgZGF0ZXRpbWUuZ2V0TW9udGgoKSxcbiAgICAgIC8vIDQgPSBpbmRleCBvZiBUaHVyc2RheVxuICAgICAgZGF0ZXRpbWUuZ2V0RGF0ZSgpICsgKDQgLSBkYXRldGltZS5nZXREYXkoKSkpO1xufVxuXG5mdW5jdGlvbiB3ZWVrR2V0dGVyKHNpemUpIHtcbiAgIHJldHVybiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICB2YXIgZmlyc3RUaHVycyA9IGdldEZpcnN0VGh1cnNkYXlPZlllYXIoZGF0ZS5nZXRGdWxsWWVhcigpKSxcbiAgICAgICAgIHRoaXNUaHVycyA9IGdldFRodXJzZGF5VGhpc1dlZWsoZGF0ZSk7XG5cbiAgICAgIHZhciBkaWZmID0gK3RoaXNUaHVycyAtICtmaXJzdFRodXJzLFxuICAgICAgICAgcmVzdWx0ID0gMSArIE1hdGgucm91bmQoZGlmZiAvIDYuMDQ4ZTgpOyAvLyA2LjA0OGU4IG1zIHBlciB3ZWVrXG5cbiAgICAgIHJldHVybiBwYWROdW1iZXIocmVzdWx0LCBzaXplKTtcbiAgIH07XG59XG5cbmZ1bmN0aW9uIGFtcG1HZXR0ZXIoZGF0ZSwgZm9ybWF0cykge1xuICByZXR1cm4gZGF0ZS5nZXRIb3VycygpIDwgMTIgPyBmb3JtYXRzLkFNUE1TWzBdIDogZm9ybWF0cy5BTVBNU1sxXTtcbn1cblxudmFyIERBVEVfRk9STUFUUyA9IHtcbiAgeXl5eTogZGF0ZUdldHRlcignRnVsbFllYXInLCA0KSxcbiAgICB5eTogZGF0ZUdldHRlcignRnVsbFllYXInLCAyLCAwLCB0cnVlKSxcbiAgICAgeTogZGF0ZUdldHRlcignRnVsbFllYXInLCAxKSxcbiAgTU1NTTogZGF0ZVN0ckdldHRlcignTW9udGgnKSxcbiAgIE1NTTogZGF0ZVN0ckdldHRlcignTW9udGgnLCB0cnVlKSxcbiAgICBNTTogZGF0ZUdldHRlcignTW9udGgnLCAyLCAxKSxcbiAgICAgTTogZGF0ZUdldHRlcignTW9udGgnLCAxLCAxKSxcbiAgICBkZDogZGF0ZUdldHRlcignRGF0ZScsIDIpLFxuICAgICBkOiBkYXRlR2V0dGVyKCdEYXRlJywgMSksXG4gICAgSEg6IGRhdGVHZXR0ZXIoJ0hvdXJzJywgMiksXG4gICAgIEg6IGRhdGVHZXR0ZXIoJ0hvdXJzJywgMSksXG4gICAgaGg6IGRhdGVHZXR0ZXIoJ0hvdXJzJywgMiwgLTEyKSxcbiAgICAgaDogZGF0ZUdldHRlcignSG91cnMnLCAxLCAtMTIpLFxuICAgIG1tOiBkYXRlR2V0dGVyKCdNaW51dGVzJywgMiksXG4gICAgIG06IGRhdGVHZXR0ZXIoJ01pbnV0ZXMnLCAxKSxcbiAgICBzczogZGF0ZUdldHRlcignU2Vjb25kcycsIDIpLFxuICAgICBzOiBkYXRlR2V0dGVyKCdTZWNvbmRzJywgMSksXG4gICAgIC8vIHdoaWxlIElTTyA4NjAxIHJlcXVpcmVzIGZyYWN0aW9ucyB0byBiZSBwcmVmaXhlZCB3aXRoIGAuYCBvciBgLGBcbiAgICAgLy8gd2UgY2FuIGJlIGp1c3Qgc2FmZWx5IHJlbHkgb24gdXNpbmcgYHNzc2Agc2luY2Ugd2UgY3VycmVudGx5IGRvbid0IHN1cHBvcnQgc2luZ2xlIG9yIHR3byBkaWdpdCBmcmFjdGlvbnNcbiAgIHNzczogZGF0ZUdldHRlcignTWlsbGlzZWNvbmRzJywgMyksXG4gIEVFRUU6IGRhdGVTdHJHZXR0ZXIoJ0RheScpLFxuICAgRUVFOiBkYXRlU3RyR2V0dGVyKCdEYXknLCB0cnVlKSxcbiAgICAgYTogYW1wbUdldHRlcixcbiAgICAgWjogdGltZVpvbmVHZXR0ZXIsXG4gICAgd3c6IHdlZWtHZXR0ZXIoMiksXG4gICAgIHc6IHdlZWtHZXR0ZXIoMSlcbn07XG5cbnZhciBEQVRFX0ZPUk1BVFNfU1BMSVQgPSAvKCg/OlteeU1kSGhtc2FaRXcnXSspfCg/OicoPzpbXiddfCcnKSonKXwoPzpFK3x5K3xNK3xkK3xIK3xoK3xtK3xzK3xhfFp8dyspKSguKikvLFxuICAgIE5VTUJFUl9TVFJJTkcgPSAvXlxcLT9cXGQrJC87XG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUgZGF0ZVxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqICAgRm9ybWF0cyBgZGF0ZWAgdG8gYSBzdHJpbmcgYmFzZWQgb24gdGhlIHJlcXVlc3RlZCBgZm9ybWF0YC5cbiAqXG4gKiAgIGBmb3JtYXRgIHN0cmluZyBjYW4gYmUgY29tcG9zZWQgb2YgdGhlIGZvbGxvd2luZyBlbGVtZW50czpcbiAqXG4gKiAgICogYCd5eXl5J2A6IDQgZGlnaXQgcmVwcmVzZW50YXRpb24gb2YgeWVhciAoZS5nLiBBRCAxID0+IDAwMDEsIEFEIDIwMTAgPT4gMjAxMClcbiAqICAgKiBgJ3l5J2A6IDIgZGlnaXQgcmVwcmVzZW50YXRpb24gb2YgeWVhciwgcGFkZGVkICgwMC05OSkuIChlLmcuIEFEIDIwMDEgPT4gMDEsIEFEIDIwMTAgPT4gMTApXG4gKiAgICogYCd5J2A6IDEgZGlnaXQgcmVwcmVzZW50YXRpb24gb2YgeWVhciwgZS5nLiAoQUQgMSA9PiAxLCBBRCAxOTkgPT4gMTk5KVxuICogICAqIGAnTU1NTSdgOiBNb250aCBpbiB5ZWFyIChKYW51YXJ5LURlY2VtYmVyKVxuICogICAqIGAnTU1NJ2A6IE1vbnRoIGluIHllYXIgKEphbi1EZWMpXG4gKiAgICogYCdNTSdgOiBNb250aCBpbiB5ZWFyLCBwYWRkZWQgKDAxLTEyKVxuICogICAqIGAnTSdgOiBNb250aCBpbiB5ZWFyICgxLTEyKVxuICogICAqIGAnZGQnYDogRGF5IGluIG1vbnRoLCBwYWRkZWQgKDAxLTMxKVxuICogICAqIGAnZCdgOiBEYXkgaW4gbW9udGggKDEtMzEpXG4gKiAgICogYCdFRUVFJ2A6IERheSBpbiBXZWVrLChTdW5kYXktU2F0dXJkYXkpXG4gKiAgICogYCdFRUUnYDogRGF5IGluIFdlZWssIChTdW4tU2F0KVxuICogICAqIGAnSEgnYDogSG91ciBpbiBkYXksIHBhZGRlZCAoMDAtMjMpXG4gKiAgICogYCdIJ2A6IEhvdXIgaW4gZGF5ICgwLTIzKVxuICogICAqIGAnaGgnYDogSG91ciBpbiBBTS9QTSwgcGFkZGVkICgwMS0xMilcbiAqICAgKiBgJ2gnYDogSG91ciBpbiBBTS9QTSwgKDEtMTIpXG4gKiAgICogYCdtbSdgOiBNaW51dGUgaW4gaG91ciwgcGFkZGVkICgwMC01OSlcbiAqICAgKiBgJ20nYDogTWludXRlIGluIGhvdXIgKDAtNTkpXG4gKiAgICogYCdzcydgOiBTZWNvbmQgaW4gbWludXRlLCBwYWRkZWQgKDAwLTU5KVxuICogICAqIGAncydgOiBTZWNvbmQgaW4gbWludXRlICgwLTU5KVxuICogICAqIGAnc3NzJ2A6IE1pbGxpc2Vjb25kIGluIHNlY29uZCwgcGFkZGVkICgwMDAtOTk5KVxuICogICAqIGAnYSdgOiBBTS9QTSBtYXJrZXJcbiAqICAgKiBgJ1onYDogNCBkaWdpdCAoK3NpZ24pIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB0aW1lem9uZSBvZmZzZXQgKC0xMjAwLSsxMjAwKVxuICogICAqIGAnd3cnYDogV2VlayBvZiB5ZWFyLCBwYWRkZWQgKDAwLTUzKS4gV2VlayAwMSBpcyB0aGUgd2VlayB3aXRoIHRoZSBmaXJzdCBUaHVyc2RheSBvZiB0aGUgeWVhclxuICogICAqIGAndydgOiBXZWVrIG9mIHllYXIgKDAtNTMpLiBXZWVrIDEgaXMgdGhlIHdlZWsgd2l0aCB0aGUgZmlyc3QgVGh1cnNkYXkgb2YgdGhlIHllYXJcbiAqXG4gKiAgIGBmb3JtYXRgIHN0cmluZyBjYW4gYWxzbyBiZSBvbmUgb2YgdGhlIGZvbGxvd2luZyBwcmVkZWZpbmVkXG4gKiAgIHtAbGluayBndWlkZS9pMThuIGxvY2FsaXphYmxlIGZvcm1hdHN9OlxuICpcbiAqICAgKiBgJ21lZGl1bSdgOiBlcXVpdmFsZW50IHRvIGAnTU1NIGQsIHkgaDptbTpzcyBhJ2AgZm9yIGVuX1VTIGxvY2FsZVxuICogICAgIChlLmcuIFNlcCAzLCAyMDEwIDEyOjA1OjA4IFBNKVxuICogICAqIGAnc2hvcnQnYDogZXF1aXZhbGVudCB0byBgJ00vZC95eSBoOm1tIGEnYCBmb3IgZW5fVVMgIGxvY2FsZSAoZS5nLiA5LzMvMTAgMTI6MDUgUE0pXG4gKiAgICogYCdmdWxsRGF0ZSdgOiBlcXVpdmFsZW50IHRvIGAnRUVFRSwgTU1NTSBkLCB5J2AgZm9yIGVuX1VTICBsb2NhbGVcbiAqICAgICAoZS5nLiBGcmlkYXksIFNlcHRlbWJlciAzLCAyMDEwKVxuICogICAqIGAnbG9uZ0RhdGUnYDogZXF1aXZhbGVudCB0byBgJ01NTU0gZCwgeSdgIGZvciBlbl9VUyAgbG9jYWxlIChlLmcuIFNlcHRlbWJlciAzLCAyMDEwKVxuICogICAqIGAnbWVkaXVtRGF0ZSdgOiBlcXVpdmFsZW50IHRvIGAnTU1NIGQsIHknYCBmb3IgZW5fVVMgIGxvY2FsZSAoZS5nLiBTZXAgMywgMjAxMClcbiAqICAgKiBgJ3Nob3J0RGF0ZSdgOiBlcXVpdmFsZW50IHRvIGAnTS9kL3l5J2AgZm9yIGVuX1VTIGxvY2FsZSAoZS5nLiA5LzMvMTApXG4gKiAgICogYCdtZWRpdW1UaW1lJ2A6IGVxdWl2YWxlbnQgdG8gYCdoOm1tOnNzIGEnYCBmb3IgZW5fVVMgbG9jYWxlIChlLmcuIDEyOjA1OjA4IFBNKVxuICogICAqIGAnc2hvcnRUaW1lJ2A6IGVxdWl2YWxlbnQgdG8gYCdoOm1tIGEnYCBmb3IgZW5fVVMgbG9jYWxlIChlLmcuIDEyOjA1IFBNKVxuICpcbiAqICAgYGZvcm1hdGAgc3RyaW5nIGNhbiBjb250YWluIGxpdGVyYWwgdmFsdWVzLiBUaGVzZSBuZWVkIHRvIGJlIGVzY2FwZWQgYnkgc3Vycm91bmRpbmcgd2l0aCBzaW5nbGUgcXVvdGVzIChlLmcuXG4gKiAgIGBcImggJ2luIHRoZSBtb3JuaW5nJ1wiYCkuIEluIG9yZGVyIHRvIG91dHB1dCBhIHNpbmdsZSBxdW90ZSwgZXNjYXBlIGl0IC0gaS5lLiwgdHdvIHNpbmdsZSBxdW90ZXMgaW4gYSBzZXF1ZW5jZVxuICogICAoZS5nLiBgXCJoICdvJydjbG9jaydcImApLlxuICpcbiAqIEBwYXJhbSB7KERhdGV8bnVtYmVyfHN0cmluZyl9IGRhdGUgRGF0ZSB0byBmb3JtYXQgZWl0aGVyIGFzIERhdGUgb2JqZWN0LCBtaWxsaXNlY29uZHMgKHN0cmluZyBvclxuICogICAgbnVtYmVyKSBvciB2YXJpb3VzIElTTyA4NjAxIGRhdGV0aW1lIHN0cmluZyBmb3JtYXRzIChlLmcuIHl5eXktTU0tZGRUSEg6bW06c3Muc3NzWiBhbmQgaXRzXG4gKiAgICBzaG9ydGVyIHZlcnNpb25zIGxpa2UgeXl5eS1NTS1kZFRISDptbVosIHl5eXktTU0tZGQgb3IgeXl5eU1NZGRUSEhtbXNzWikuIElmIG5vIHRpbWV6b25lIGlzXG4gKiAgICBzcGVjaWZpZWQgaW4gdGhlIHN0cmluZyBpbnB1dCwgdGhlIHRpbWUgaXMgY29uc2lkZXJlZCB0byBiZSBpbiB0aGUgbG9jYWwgdGltZXpvbmUuXG4gKiBAcGFyYW0ge3N0cmluZz19IGZvcm1hdCBGb3JtYXR0aW5nIHJ1bGVzIChzZWUgRGVzY3JpcHRpb24pLiBJZiBub3Qgc3BlY2lmaWVkLFxuICogICAgYG1lZGl1bURhdGVgIGlzIHVzZWQuXG4gKiBAcGFyYW0ge3N0cmluZz19IHRpbWV6b25lIFRpbWV6b25lIHRvIGJlIHVzZWQgZm9yIGZvcm1hdHRpbmcuIFJpZ2h0IG5vdywgb25seSBgJ1VUQydgIGlzIHN1cHBvcnRlZC5cbiAqICAgIElmIG5vdCBzcGVjaWZpZWQsIHRoZSB0aW1lem9uZSBvZiB0aGUgYnJvd3NlciB3aWxsIGJlIHVzZWQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBGb3JtYXR0ZWQgc3RyaW5nIG9yIHRoZSBpbnB1dCBpZiBpbnB1dCBpcyBub3QgcmVjb2duaXplZCBhcyBkYXRlL21pbGxpcy5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNwYW4gbmctbm9uLWJpbmRhYmxlPnt7MTI4ODMyMzYyMzAwNiB8IGRhdGU6J21lZGl1bSd9fTwvc3Bhbj46XG4gICAgICAgICAgIDxzcGFuPnt7MTI4ODMyMzYyMzAwNiB8IGRhdGU6J21lZGl1bSd9fTwvc3Bhbj48YnI+XG4gICAgICAgPHNwYW4gbmctbm9uLWJpbmRhYmxlPnt7MTI4ODMyMzYyMzAwNiB8IGRhdGU6J3l5eXktTU0tZGQgSEg6bW06c3MgWid9fTwvc3Bhbj46XG4gICAgICAgICAgPHNwYW4+e3sxMjg4MzIzNjIzMDA2IHwgZGF0ZToneXl5eS1NTS1kZCBISDptbTpzcyBaJ319PC9zcGFuPjxicj5cbiAgICAgICA8c3BhbiBuZy1ub24tYmluZGFibGU+e3sxMjg4MzIzNjIzMDA2IHwgZGF0ZTonTU0vZGQveXl5eSBAIGg6bW1hJ319PC9zcGFuPjpcbiAgICAgICAgICA8c3Bhbj57eycxMjg4MzIzNjIzMDA2JyB8IGRhdGU6J01NL2RkL3l5eXkgQCBoOm1tYSd9fTwvc3Bhbj48YnI+XG4gICAgICAgPHNwYW4gbmctbm9uLWJpbmRhYmxlPnt7MTI4ODMyMzYyMzAwNiB8IGRhdGU6XCJNTS9kZC95eXl5ICdhdCcgaDptbWFcIn19PC9zcGFuPjpcbiAgICAgICAgICA8c3Bhbj57eycxMjg4MzIzNjIzMDA2JyB8IGRhdGU6XCJNTS9kZC95eXl5ICdhdCcgaDptbWFcIn19PC9zcGFuPjxicj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBmb3JtYXQgZGF0ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZyhcIjEyODgzMjM2MjMwMDYgfCBkYXRlOidtZWRpdW0nXCIpKS5nZXRUZXh0KCkpLlxuICAgICAgICAgICAgdG9NYXRjaCgvT2N0IDJcXGQsIDIwMTAgXFxkezEsMn06XFxkezJ9OlxcZHsyfSAoQU18UE0pLyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKFwiMTI4ODMyMzYyMzAwNiB8IGRhdGU6J3l5eXktTU0tZGQgSEg6bW06c3MgWidcIikpLmdldFRleHQoKSkuXG4gICAgICAgICAgICB0b01hdGNoKC8yMDEwXFwtMTBcXC0yXFxkIFxcZHsyfTpcXGR7Mn06XFxkezJ9IChcXC18XFwrKT9cXGR7NH0vKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoXCInMTI4ODMyMzYyMzAwNicgfCBkYXRlOidNTS9kZC95eXl5IEAgaDptbWEnXCIpKS5nZXRUZXh0KCkpLlxuICAgICAgICAgICAgdG9NYXRjaCgvMTBcXC8yXFxkXFwvMjAxMCBAIFxcZHsxLDJ9OlxcZHsyfShBTXxQTSkvKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoXCInMTI4ODMyMzYyMzAwNicgfCBkYXRlOlxcXCJNTS9kZC95eXl5ICdhdCcgaDptbWFcXFwiXCIpKS5nZXRUZXh0KCkpLlxuICAgICAgICAgICAgdG9NYXRjaCgvMTBcXC8yXFxkXFwvMjAxMCBhdCBcXGR7MSwyfTpcXGR7Mn0oQU18UE0pLyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuZGF0ZUZpbHRlci4kaW5qZWN0ID0gWyckbG9jYWxlJ107XG5mdW5jdGlvbiBkYXRlRmlsdGVyKCRsb2NhbGUpIHtcblxuXG4gIHZhciBSX0lTTzg2MDFfU1RSID0gL14oXFxkezR9KS0/KFxcZFxcZCktPyhcXGRcXGQpKD86VChcXGRcXGQpKD86Oj8oXFxkXFxkKSg/Ojo/KFxcZFxcZCkoPzpcXC4oXFxkKykpPyk/KT8oWnwoWystXSkoXFxkXFxkKTo/KFxcZFxcZCkpPyk/JC87XG4gICAgICAgICAgICAgICAgICAgICAvLyAxICAgICAgICAyICAgICAgIDMgICAgICAgICA0ICAgICAgICAgIDUgICAgICAgICAgNiAgICAgICAgICA3ICAgICAgICAgIDggIDkgICAgIDEwICAgICAgMTFcbiAgZnVuY3Rpb24ganNvblN0cmluZ1RvRGF0ZShzdHJpbmcpIHtcbiAgICB2YXIgbWF0Y2g7XG4gICAgaWYgKG1hdGNoID0gc3RyaW5nLm1hdGNoKFJfSVNPODYwMV9TVFIpKSB7XG4gICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKDApLFxuICAgICAgICAgIHR6SG91ciA9IDAsXG4gICAgICAgICAgdHpNaW4gID0gMCxcbiAgICAgICAgICBkYXRlU2V0dGVyID0gbWF0Y2hbOF0gPyBkYXRlLnNldFVUQ0Z1bGxZZWFyIDogZGF0ZS5zZXRGdWxsWWVhcixcbiAgICAgICAgICB0aW1lU2V0dGVyID0gbWF0Y2hbOF0gPyBkYXRlLnNldFVUQ0hvdXJzIDogZGF0ZS5zZXRIb3VycztcblxuICAgICAgaWYgKG1hdGNoWzldKSB7XG4gICAgICAgIHR6SG91ciA9IGludChtYXRjaFs5XSArIG1hdGNoWzEwXSk7XG4gICAgICAgIHR6TWluID0gaW50KG1hdGNoWzldICsgbWF0Y2hbMTFdKTtcbiAgICAgIH1cbiAgICAgIGRhdGVTZXR0ZXIuY2FsbChkYXRlLCBpbnQobWF0Y2hbMV0pLCBpbnQobWF0Y2hbMl0pIC0gMSwgaW50KG1hdGNoWzNdKSk7XG4gICAgICB2YXIgaCA9IGludChtYXRjaFs0XSB8fCAwKSAtIHR6SG91cjtcbiAgICAgIHZhciBtID0gaW50KG1hdGNoWzVdIHx8IDApIC0gdHpNaW47XG4gICAgICB2YXIgcyA9IGludChtYXRjaFs2XSB8fCAwKTtcbiAgICAgIHZhciBtcyA9IE1hdGgucm91bmQocGFyc2VGbG9hdCgnMC4nICsgKG1hdGNoWzddIHx8IDApKSAqIDEwMDApO1xuICAgICAgdGltZVNldHRlci5jYWxsKGRhdGUsIGgsIG0sIHMsIG1zKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cbiAgICByZXR1cm4gc3RyaW5nO1xuICB9XG5cblxuICByZXR1cm4gZnVuY3Rpb24oZGF0ZSwgZm9ybWF0LCB0aW1lem9uZSkge1xuICAgIHZhciB0ZXh0ID0gJycsXG4gICAgICAgIHBhcnRzID0gW10sXG4gICAgICAgIGZuLCBtYXRjaDtcblxuICAgIGZvcm1hdCA9IGZvcm1hdCB8fCAnbWVkaXVtRGF0ZSc7XG4gICAgZm9ybWF0ID0gJGxvY2FsZS5EQVRFVElNRV9GT1JNQVRTW2Zvcm1hdF0gfHwgZm9ybWF0O1xuICAgIGlmIChpc1N0cmluZyhkYXRlKSkge1xuICAgICAgZGF0ZSA9IE5VTUJFUl9TVFJJTkcudGVzdChkYXRlKSA/IGludChkYXRlKSA6IGpzb25TdHJpbmdUb0RhdGUoZGF0ZSk7XG4gICAgfVxuXG4gICAgaWYgKGlzTnVtYmVyKGRhdGUpKSB7XG4gICAgICBkYXRlID0gbmV3IERhdGUoZGF0ZSk7XG4gICAgfVxuXG4gICAgaWYgKCFpc0RhdGUoZGF0ZSkpIHtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cblxuICAgIHdoaWxlIChmb3JtYXQpIHtcbiAgICAgIG1hdGNoID0gREFURV9GT1JNQVRTX1NQTElULmV4ZWMoZm9ybWF0KTtcbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBwYXJ0cyA9IGNvbmNhdChwYXJ0cywgbWF0Y2gsIDEpO1xuICAgICAgICBmb3JtYXQgPSBwYXJ0cy5wb3AoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnRzLnB1c2goZm9ybWF0KTtcbiAgICAgICAgZm9ybWF0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGltZXpvbmUgJiYgdGltZXpvbmUgPT09ICdVVEMnKSB7XG4gICAgICBkYXRlID0gbmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkpO1xuICAgICAgZGF0ZS5zZXRNaW51dGVzKGRhdGUuZ2V0TWludXRlcygpICsgZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpKTtcbiAgICB9XG4gICAgZm9yRWFjaChwYXJ0cywgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGZuID0gREFURV9GT1JNQVRTW3ZhbHVlXTtcbiAgICAgIHRleHQgKz0gZm4gPyBmbihkYXRlLCAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFMpXG4gICAgICAgICAgICAgICAgIDogdmFsdWUucmVwbGFjZSgvKF4nfCckKS9nLCAnJykucmVwbGFjZSgvJycvZywgXCInXCIpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRleHQ7XG4gIH07XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgZmlsdGVyXG4gKiBAbmFtZSBqc29uXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogICBBbGxvd3MgeW91IHRvIGNvbnZlcnQgYSBKYXZhU2NyaXB0IG9iamVjdCBpbnRvIEpTT04gc3RyaW5nLlxuICpcbiAqICAgVGhpcyBmaWx0ZXIgaXMgbW9zdGx5IHVzZWZ1bCBmb3IgZGVidWdnaW5nLiBXaGVuIHVzaW5nIHRoZSBkb3VibGUgY3VybHkge3t2YWx1ZX19IG5vdGF0aW9uXG4gKiAgIHRoZSBiaW5kaW5nIGlzIGF1dG9tYXRpY2FsbHkgY29udmVydGVkIHRvIEpTT04uXG4gKlxuICogQHBhcmFtIHsqfSBvYmplY3QgQW55IEphdmFTY3JpcHQgb2JqZWN0IChpbmNsdWRpbmcgYXJyYXlzIGFuZCBwcmltaXRpdmUgdHlwZXMpIHRvIGZpbHRlci5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gc3BhY2luZyBUaGUgbnVtYmVyIG9mIHNwYWNlcyB0byB1c2UgcGVyIGluZGVudGF0aW9uLCBkZWZhdWx0cyB0byAyLlxuICogQHJldHVybnMge3N0cmluZ30gSlNPTiBzdHJpbmcuXG4gKlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8cHJlIGlkPVwiZGVmYXVsdC1zcGFjaW5nXCI+e3sgeyduYW1lJzondmFsdWUnfSB8IGpzb24gfX08L3ByZT5cbiAgICAgICA8cHJlIGlkPVwiY3VzdG9tLXNwYWNpbmdcIj57eyB7J25hbWUnOid2YWx1ZSd9IHwganNvbjo0IH19PC9wcmU+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQganNvbmlmeSBmaWx0ZXJlZCBvYmplY3RzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnZGVmYXVsdC1zcGFjaW5nJykpLmdldFRleHQoKSkudG9NYXRjaCgvXFx7XFxuICBcIm5hbWVcIjogP1widmFsdWVcIlxcbn0vKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjdXN0b20tc3BhY2luZycpKS5nZXRUZXh0KCkpLnRvTWF0Y2goL1xce1xcbiAgICBcIm5hbWVcIjogP1widmFsdWVcIlxcbn0vKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICpcbiAqL1xuZnVuY3Rpb24ganNvbkZpbHRlcigpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgc3BhY2luZykge1xuICAgIGlmIChpc1VuZGVmaW5lZChzcGFjaW5nKSkge1xuICAgICAgICBzcGFjaW5nID0gMjtcbiAgICB9XG4gICAgcmV0dXJuIHRvSnNvbihvYmplY3QsIHNwYWNpbmcpO1xuICB9O1xufVxuXG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUgbG93ZXJjYXNlXG4gKiBAa2luZCBmdW5jdGlvblxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0cyBzdHJpbmcgdG8gbG93ZXJjYXNlLlxuICogQHNlZSBhbmd1bGFyLmxvd2VyY2FzZVxuICovXG52YXIgbG93ZXJjYXNlRmlsdGVyID0gdmFsdWVGbihsb3dlcmNhc2UpO1xuXG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUgdXBwZXJjYXNlXG4gKiBAa2luZCBmdW5jdGlvblxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0cyBzdHJpbmcgdG8gdXBwZXJjYXNlLlxuICogQHNlZSBhbmd1bGFyLnVwcGVyY2FzZVxuICovXG52YXIgdXBwZXJjYXNlRmlsdGVyID0gdmFsdWVGbih1cHBlcmNhc2UpO1xuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIGxpbWl0VG9cbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDcmVhdGVzIGEgbmV3IGFycmF5IG9yIHN0cmluZyBjb250YWluaW5nIG9ubHkgYSBzcGVjaWZpZWQgbnVtYmVyIG9mIGVsZW1lbnRzLiBUaGUgZWxlbWVudHNcbiAqIGFyZSB0YWtlbiBmcm9tIGVpdGhlciB0aGUgYmVnaW5uaW5nIG9yIHRoZSBlbmQgb2YgdGhlIHNvdXJjZSBhcnJheSwgc3RyaW5nIG9yIG51bWJlciwgYXMgc3BlY2lmaWVkIGJ5XG4gKiB0aGUgdmFsdWUgYW5kIHNpZ24gKHBvc2l0aXZlIG9yIG5lZ2F0aXZlKSBvZiBgbGltaXRgLiBJZiBhIG51bWJlciBpcyB1c2VkIGFzIGlucHV0LCBpdCBpc1xuICogY29udmVydGVkIHRvIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfG51bWJlcn0gaW5wdXQgU291cmNlIGFycmF5LCBzdHJpbmcgb3IgbnVtYmVyIHRvIGJlIGxpbWl0ZWQuXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IGxpbWl0IFRoZSBsZW5ndGggb2YgdGhlIHJldHVybmVkIGFycmF5IG9yIHN0cmluZy4gSWYgdGhlIGBsaW1pdGAgbnVtYmVyXG4gKiAgICAgaXMgcG9zaXRpdmUsIGBsaW1pdGAgbnVtYmVyIG9mIGl0ZW1zIGZyb20gdGhlIGJlZ2lubmluZyBvZiB0aGUgc291cmNlIGFycmF5L3N0cmluZyBhcmUgY29waWVkLlxuICogICAgIElmIHRoZSBudW1iZXIgaXMgbmVnYXRpdmUsIGBsaW1pdGAgbnVtYmVyICBvZiBpdGVtcyBmcm9tIHRoZSBlbmQgb2YgdGhlIHNvdXJjZSBhcnJheS9zdHJpbmdcbiAqICAgICBhcmUgY29waWVkLiBUaGUgYGxpbWl0YCB3aWxsIGJlIHRyaW1tZWQgaWYgaXQgZXhjZWVkcyBgYXJyYXkubGVuZ3RoYFxuICogQHJldHVybnMge0FycmF5fHN0cmluZ30gQSBuZXcgc3ViLWFycmF5IG9yIHN1YnN0cmluZyBvZiBsZW5ndGggYGxpbWl0YCBvciBsZXNzIGlmIGlucHV0IGFycmF5XG4gKiAgICAgaGFkIGxlc3MgdGhhbiBgbGltaXRgIGVsZW1lbnRzLlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJsaW1pdFRvRXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnbGltaXRUb0V4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAkc2NvcGUubnVtYmVycyA9IFsxLDIsMyw0LDUsNiw3LDgsOV07XG4gICAgICAgICAgICAgJHNjb3BlLmxldHRlcnMgPSBcImFiY2RlZmdoaVwiO1xuICAgICAgICAgICAgICRzY29wZS5sb25nTnVtYmVyID0gMjM0NTQzMjM0MjtcbiAgICAgICAgICAgICAkc2NvcGUubnVtTGltaXQgPSAzO1xuICAgICAgICAgICAgICRzY29wZS5sZXR0ZXJMaW1pdCA9IDM7XG4gICAgICAgICAgICAgJHNjb3BlLmxvbmdOdW1iZXJMaW1pdCA9IDM7XG4gICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgTGltaXQge3tudW1iZXJzfX0gdG86IDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgc3RlcD1cIjFcIiBuZy1tb2RlbD1cIm51bUxpbWl0XCI+XG4gICAgICAgICA8cD5PdXRwdXQgbnVtYmVyczoge3sgbnVtYmVycyB8IGxpbWl0VG86bnVtTGltaXQgfX08L3A+XG4gICAgICAgICBMaW1pdCB7e2xldHRlcnN9fSB0bzogPGlucHV0IHR5cGU9XCJudW1iZXJcIiBzdGVwPVwiMVwiIG5nLW1vZGVsPVwibGV0dGVyTGltaXRcIj5cbiAgICAgICAgIDxwPk91dHB1dCBsZXR0ZXJzOiB7eyBsZXR0ZXJzIHwgbGltaXRUbzpsZXR0ZXJMaW1pdCB9fTwvcD5cbiAgICAgICAgIExpbWl0IHt7bG9uZ051bWJlcn19IHRvOiA8aW5wdXQgdHlwZT1cIm51bWJlclwiIHN0ZXA9XCIxXCIgbmctbW9kZWw9XCJsb25nTnVtYmVyTGltaXRcIj5cbiAgICAgICAgIDxwPk91dHB1dCBsb25nIG51bWJlcjoge3sgbG9uZ051bWJlciB8IGxpbWl0VG86bG9uZ051bWJlckxpbWl0IH19PC9wPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICB2YXIgbnVtTGltaXRJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ251bUxpbWl0JykpO1xuICAgICAgIHZhciBsZXR0ZXJMaW1pdElucHV0ID0gZWxlbWVudChieS5tb2RlbCgnbGV0dGVyTGltaXQnKSk7XG4gICAgICAgdmFyIGxvbmdOdW1iZXJMaW1pdElucHV0ID0gZWxlbWVudChieS5tb2RlbCgnbG9uZ051bWJlckxpbWl0JykpO1xuICAgICAgIHZhciBsaW1pdGVkTnVtYmVycyA9IGVsZW1lbnQoYnkuYmluZGluZygnbnVtYmVycyB8IGxpbWl0VG86bnVtTGltaXQnKSk7XG4gICAgICAgdmFyIGxpbWl0ZWRMZXR0ZXJzID0gZWxlbWVudChieS5iaW5kaW5nKCdsZXR0ZXJzIHwgbGltaXRUbzpsZXR0ZXJMaW1pdCcpKTtcbiAgICAgICB2YXIgbGltaXRlZExvbmdOdW1iZXIgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2xvbmdOdW1iZXIgfCBsaW1pdFRvOmxvbmdOdW1iZXJMaW1pdCcpKTtcblxuICAgICAgIGl0KCdzaG91bGQgbGltaXQgdGhlIG51bWJlciBhcnJheSB0byBmaXJzdCB0aHJlZSBpdGVtcycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KG51bUxpbWl0SW5wdXQuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0JlKCczJyk7XG4gICAgICAgICBleHBlY3QobGV0dGVyTGltaXRJbnB1dC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvQmUoJzMnKTtcbiAgICAgICAgIGV4cGVjdChsb25nTnVtYmVyTGltaXRJbnB1dC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvQmUoJzMnKTtcbiAgICAgICAgIGV4cGVjdChsaW1pdGVkTnVtYmVycy5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBudW1iZXJzOiBbMSwyLDNdJyk7XG4gICAgICAgICBleHBlY3QobGltaXRlZExldHRlcnMuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbGV0dGVyczogYWJjJyk7XG4gICAgICAgICBleHBlY3QobGltaXRlZExvbmdOdW1iZXIuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbG9uZyBudW1iZXI6IDIzNCcpO1xuICAgICAgIH0pO1xuXG4gICAgICAgLy8gVGhlcmUgaXMgYSBidWcgaW4gc2FmYXJpIGFuZCBwcm90cmFjdG9yIHRoYXQgZG9lc24ndCBsaWtlIHRoZSBtaW51cyBrZXlcbiAgICAgICAvLyBpdCgnc2hvdWxkIHVwZGF0ZSB0aGUgb3V0cHV0IHdoZW4gLTMgaXMgZW50ZXJlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgIC8vICAgbnVtTGltaXRJbnB1dC5jbGVhcigpO1xuICAgICAgIC8vICAgbnVtTGltaXRJbnB1dC5zZW5kS2V5cygnLTMnKTtcbiAgICAgICAvLyAgIGxldHRlckxpbWl0SW5wdXQuY2xlYXIoKTtcbiAgICAgICAvLyAgIGxldHRlckxpbWl0SW5wdXQuc2VuZEtleXMoJy0zJyk7XG4gICAgICAgLy8gICBsb25nTnVtYmVyTGltaXRJbnB1dC5jbGVhcigpO1xuICAgICAgIC8vICAgbG9uZ051bWJlckxpbWl0SW5wdXQuc2VuZEtleXMoJy0zJyk7XG4gICAgICAgLy8gICBleHBlY3QobGltaXRlZE51bWJlcnMuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbnVtYmVyczogWzcsOCw5XScpO1xuICAgICAgIC8vICAgZXhwZWN0KGxpbWl0ZWRMZXR0ZXJzLmdldFRleHQoKSkudG9FcXVhbCgnT3V0cHV0IGxldHRlcnM6IGdoaScpO1xuICAgICAgIC8vICAgZXhwZWN0KGxpbWl0ZWRMb25nTnVtYmVyLmdldFRleHQoKSkudG9FcXVhbCgnT3V0cHV0IGxvbmcgbnVtYmVyOiAzNDInKTtcbiAgICAgICAvLyB9KTtcblxuICAgICAgIGl0KCdzaG91bGQgbm90IGV4Y2VlZCB0aGUgbWF4aW11bSBzaXplIG9mIGlucHV0IGFycmF5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBudW1MaW1pdElucHV0LmNsZWFyKCk7XG4gICAgICAgICBudW1MaW1pdElucHV0LnNlbmRLZXlzKCcxMDAnKTtcbiAgICAgICAgIGxldHRlckxpbWl0SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgIGxldHRlckxpbWl0SW5wdXQuc2VuZEtleXMoJzEwMCcpO1xuICAgICAgICAgbG9uZ051bWJlckxpbWl0SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgIGxvbmdOdW1iZXJMaW1pdElucHV0LnNlbmRLZXlzKCcxMDAnKTtcbiAgICAgICAgIGV4cGVjdChsaW1pdGVkTnVtYmVycy5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBudW1iZXJzOiBbMSwyLDMsNCw1LDYsNyw4LDldJyk7XG4gICAgICAgICBleHBlY3QobGltaXRlZExldHRlcnMuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbGV0dGVyczogYWJjZGVmZ2hpJyk7XG4gICAgICAgICBleHBlY3QobGltaXRlZExvbmdOdW1iZXIuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbG9uZyBudW1iZXI6IDIzNDU0MzIzNDInKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuKi9cbmZ1bmN0aW9uIGxpbWl0VG9GaWx0ZXIoKSB7XG4gIHJldHVybiBmdW5jdGlvbihpbnB1dCwgbGltaXQpIHtcbiAgICBpZiAoaXNOdW1iZXIoaW5wdXQpKSBpbnB1dCA9IGlucHV0LnRvU3RyaW5nKCk7XG4gICAgaWYgKCFpc0FycmF5KGlucHV0KSAmJiAhaXNTdHJpbmcoaW5wdXQpKSByZXR1cm4gaW5wdXQ7XG5cbiAgICBpZiAoTWF0aC5hYnMoTnVtYmVyKGxpbWl0KSkgPT09IEluZmluaXR5KSB7XG4gICAgICBsaW1pdCA9IE51bWJlcihsaW1pdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpbWl0ID0gaW50KGxpbWl0KTtcbiAgICB9XG5cbiAgICAvL05hTiBjaGVjayBvbiBsaW1pdFxuICAgIGlmIChsaW1pdCkge1xuICAgICAgcmV0dXJuIGxpbWl0ID4gMCA/IGlucHV0LnNsaWNlKDAsIGxpbWl0KSA6IGlucHV0LnNsaWNlKGxpbWl0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGlzU3RyaW5nKGlucHV0KSA/IFwiXCIgOiBbXTtcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUgb3JkZXJCeVxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIE9yZGVycyBhIHNwZWNpZmllZCBgYXJyYXlgIGJ5IHRoZSBgZXhwcmVzc2lvbmAgcHJlZGljYXRlLiBJdCBpcyBvcmRlcmVkIGFscGhhYmV0aWNhbGx5XG4gKiBmb3Igc3RyaW5ncyBhbmQgbnVtZXJpY2FsbHkgZm9yIG51bWJlcnMuIE5vdGU6IGlmIHlvdSBub3RpY2UgbnVtYmVycyBhcmUgbm90IGJlaW5nIHNvcnRlZFxuICogY29ycmVjdGx5LCBtYWtlIHN1cmUgdGhleSBhcmUgYWN0dWFsbHkgYmVpbmcgc2F2ZWQgYXMgbnVtYmVycyBhbmQgbm90IHN0cmluZ3MuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNvcnQuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCopfHN0cmluZ3xBcnJheS48KGZ1bmN0aW9uKCopfHN0cmluZyk+PX0gZXhwcmVzc2lvbiBBIHByZWRpY2F0ZSB0byBiZVxuICogICAgdXNlZCBieSB0aGUgY29tcGFyYXRvciB0byBkZXRlcm1pbmUgdGhlIG9yZGVyIG9mIGVsZW1lbnRzLlxuICpcbiAqICAgIENhbiBiZSBvbmUgb2Y6XG4gKlxuICogICAgLSBgZnVuY3Rpb25gOiBHZXR0ZXIgZnVuY3Rpb24uIFRoZSByZXN1bHQgb2YgdGhpcyBmdW5jdGlvbiB3aWxsIGJlIHNvcnRlZCB1c2luZyB0aGVcbiAqICAgICAgYDxgLCBgPWAsIGA+YCBvcGVyYXRvci5cbiAqICAgIC0gYHN0cmluZ2A6IEFuIEFuZ3VsYXIgZXhwcmVzc2lvbi4gVGhlIHJlc3VsdCBvZiB0aGlzIGV4cHJlc3Npb24gaXMgdXNlZCB0byBjb21wYXJlIGVsZW1lbnRzXG4gKiAgICAgIChmb3IgZXhhbXBsZSBgbmFtZWAgdG8gc29ydCBieSBhIHByb3BlcnR5IGNhbGxlZCBgbmFtZWAgb3IgYG5hbWUuc3Vic3RyKDAsIDMpYCB0byBzb3J0IGJ5XG4gKiAgICAgIDMgZmlyc3QgY2hhcmFjdGVycyBvZiBhIHByb3BlcnR5IGNhbGxlZCBgbmFtZWApLiBUaGUgcmVzdWx0IG9mIGEgY29uc3RhbnQgZXhwcmVzc2lvblxuICogICAgICBpcyBpbnRlcnByZXRlZCBhcyBhIHByb3BlcnR5IG5hbWUgdG8gYmUgdXNlZCBpbiBjb21wYXJpc29ucyAoZm9yIGV4YW1wbGUgYFwic3BlY2lhbCBuYW1lXCJgXG4gKiAgICAgIHRvIHNvcnQgb2JqZWN0IGJ5IHRoZSB2YWx1ZSBvZiB0aGVpciBgc3BlY2lhbCBuYW1lYCBwcm9wZXJ0eSkuIEFuIGV4cHJlc3Npb24gY2FuIGJlXG4gKiAgICAgIG9wdGlvbmFsbHkgcHJlZml4ZWQgd2l0aCBgK2Agb3IgYC1gIHRvIGNvbnRyb2wgYXNjZW5kaW5nIG9yIGRlc2NlbmRpbmcgc29ydCBvcmRlclxuICogICAgICAoZm9yIGV4YW1wbGUsIGArbmFtZWAgb3IgYC1uYW1lYCkuIElmIG5vIHByb3BlcnR5IGlzIHByb3ZpZGVkLCAoZS5nLiBgJysnYCkgdGhlbiB0aGUgYXJyYXlcbiAqICAgICAgZWxlbWVudCBpdHNlbGYgaXMgdXNlZCB0byBjb21wYXJlIHdoZXJlIHNvcnRpbmcuXG4gKiAgICAtIGBBcnJheWA6IEFuIGFycmF5IG9mIGZ1bmN0aW9uIG9yIHN0cmluZyBwcmVkaWNhdGVzLiBUaGUgZmlyc3QgcHJlZGljYXRlIGluIHRoZSBhcnJheVxuICogICAgICBpcyB1c2VkIGZvciBzb3J0aW5nLCBidXQgd2hlbiB0d28gaXRlbXMgYXJlIGVxdWl2YWxlbnQsIHRoZSBuZXh0IHByZWRpY2F0ZSBpcyB1c2VkLlxuICpcbiAqICAgIElmIHRoZSBwcmVkaWNhdGUgaXMgbWlzc2luZyBvciBlbXB0eSB0aGVuIGl0IGRlZmF1bHRzIHRvIGAnKydgLlxuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IHJldmVyc2UgUmV2ZXJzZSB0aGUgb3JkZXIgb2YgdGhlIGFycmF5LlxuICogQHJldHVybnMge0FycmF5fSBTb3J0ZWQgY29weSBvZiB0aGUgc291cmNlIGFycmF5LlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJvcmRlckJ5RXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnb3JkZXJCeUV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAkc2NvcGUuZnJpZW5kcyA9XG4gICAgICAgICAgICAgICAgIFt7bmFtZTonSm9obicsIHBob25lOic1NTUtMTIxMicsIGFnZToxMH0sXG4gICAgICAgICAgICAgICAgICB7bmFtZTonTWFyeScsIHBob25lOic1NTUtOTg3NicsIGFnZToxOX0sXG4gICAgICAgICAgICAgICAgICB7bmFtZTonTWlrZScsIHBob25lOic1NTUtNDMyMScsIGFnZToyMX0sXG4gICAgICAgICAgICAgICAgICB7bmFtZTonQWRhbScsIHBob25lOic1NTUtNTY3OCcsIGFnZTozNX0sXG4gICAgICAgICAgICAgICAgICB7bmFtZTonSnVsaWUnLCBwaG9uZTonNTU1LTg3NjUnLCBhZ2U6Mjl9XTtcbiAgICAgICAgICAgICAkc2NvcGUucHJlZGljYXRlID0gJy1hZ2UnO1xuICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxwcmU+U29ydGluZyBwcmVkaWNhdGUgPSB7e3ByZWRpY2F0ZX19OyByZXZlcnNlID0ge3tyZXZlcnNlfX08L3ByZT5cbiAgICAgICAgIDxoci8+XG4gICAgICAgICBbIDxhIGhyZWY9XCJcIiBuZy1jbGljaz1cInByZWRpY2F0ZT0nJ1wiPnVuc29ydGVkPC9hPiBdXG4gICAgICAgICA8dGFibGUgY2xhc3M9XCJmcmllbmRcIj5cbiAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgIDx0aD48YSBocmVmPVwiXCIgbmctY2xpY2s9XCJwcmVkaWNhdGUgPSAnbmFtZSc7IHJldmVyc2U9ZmFsc2VcIj5OYW1lPC9hPlxuICAgICAgICAgICAgICAgICAoPGEgaHJlZj1cIlwiIG5nLWNsaWNrPVwicHJlZGljYXRlID0gJy1uYW1lJzsgcmV2ZXJzZT1mYWxzZVwiPl48L2E+KTwvdGg+XG4gICAgICAgICAgICAgPHRoPjxhIGhyZWY9XCJcIiBuZy1jbGljaz1cInByZWRpY2F0ZSA9ICdwaG9uZSc7IHJldmVyc2U9IXJldmVyc2VcIj5QaG9uZSBOdW1iZXI8L2E+PC90aD5cbiAgICAgICAgICAgICA8dGg+PGEgaHJlZj1cIlwiIG5nLWNsaWNrPVwicHJlZGljYXRlID0gJ2FnZSc7IHJldmVyc2U9IXJldmVyc2VcIj5BZ2U8L2E+PC90aD5cbiAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgPHRyIG5nLXJlcGVhdD1cImZyaWVuZCBpbiBmcmllbmRzIHwgb3JkZXJCeTpwcmVkaWNhdGU6cmV2ZXJzZVwiPlxuICAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5uYW1lfX08L3RkPlxuICAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5waG9uZX19PC90ZD5cbiAgICAgICAgICAgICA8dGQ+e3tmcmllbmQuYWdlfX08L3RkPlxuICAgICAgICAgICA8L3RyPlxuICAgICAgICAgPC90YWJsZT5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICpcbiAqIEl0J3MgYWxzbyBwb3NzaWJsZSB0byBjYWxsIHRoZSBvcmRlckJ5IGZpbHRlciBtYW51YWxseSwgYnkgaW5qZWN0aW5nIGAkZmlsdGVyYCwgcmV0cmlldmluZyB0aGVcbiAqIGZpbHRlciByb3V0aW5lIHdpdGggYCRmaWx0ZXIoJ29yZGVyQnknKWAsIGFuZCBjYWxsaW5nIHRoZSByZXR1cm5lZCBmaWx0ZXIgcm91dGluZSB3aXRoIHRoZVxuICogZGVzaXJlZCBwYXJhbWV0ZXJzLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogQGV4YW1wbGVcbiAgPGV4YW1wbGUgbW9kdWxlPVwib3JkZXJCeUV4YW1wbGVcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgPHRhYmxlIGNsYXNzPVwiZnJpZW5kXCI+XG4gICAgICAgICAgPHRyPlxuICAgICAgICAgICAgPHRoPjxhIGhyZWY9XCJcIiBuZy1jbGljaz1cInJldmVyc2U9ZmFsc2U7b3JkZXIoJ25hbWUnLCBmYWxzZSlcIj5OYW1lPC9hPlxuICAgICAgICAgICAgICAoPGEgaHJlZj1cIlwiIG5nLWNsaWNrPVwib3JkZXIoJy1uYW1lJyxmYWxzZSlcIj5ePC9hPik8L3RoPlxuICAgICAgICAgICAgPHRoPjxhIGhyZWY9XCJcIiBuZy1jbGljaz1cInJldmVyc2U9IXJldmVyc2U7b3JkZXIoJ3Bob25lJywgcmV2ZXJzZSlcIj5QaG9uZSBOdW1iZXI8L2E+PC90aD5cbiAgICAgICAgICAgIDx0aD48YSBocmVmPVwiXCIgbmctY2xpY2s9XCJyZXZlcnNlPSFyZXZlcnNlO29yZGVyKCdhZ2UnLHJldmVyc2UpXCI+QWdlPC9hPjwvdGg+XG4gICAgICAgICAgPC90cj5cbiAgICAgICAgICA8dHIgbmctcmVwZWF0PVwiZnJpZW5kIGluIGZyaWVuZHNcIj5cbiAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5uYW1lfX08L3RkPlxuICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLnBob25lfX08L3RkPlxuICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLmFnZX19PC90ZD5cbiAgICAgICAgICA8L3RyPlxuICAgICAgICA8L3RhYmxlPlxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuXG4gICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgYW5ndWxhci5tb2R1bGUoJ29yZGVyQnlFeGFtcGxlJywgW10pXG4gICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRmaWx0ZXInLCBmdW5jdGlvbigkc2NvcGUsICRmaWx0ZXIpIHtcbiAgICAgICAgICB2YXIgb3JkZXJCeSA9ICRmaWx0ZXIoJ29yZGVyQnknKTtcbiAgICAgICAgICAkc2NvcGUuZnJpZW5kcyA9IFtcbiAgICAgICAgICAgIHsgbmFtZTogJ0pvaG4nLCAgICBwaG9uZTogJzU1NS0xMjEyJywgICAgYWdlOiAxMCB9LFxuICAgICAgICAgICAgeyBuYW1lOiAnTWFyeScsICAgIHBob25lOiAnNTU1LTk4NzYnLCAgICBhZ2U6IDE5IH0sXG4gICAgICAgICAgICB7IG5hbWU6ICdNaWtlJywgICAgcGhvbmU6ICc1NTUtNDMyMScsICAgIGFnZTogMjEgfSxcbiAgICAgICAgICAgIHsgbmFtZTogJ0FkYW0nLCAgICBwaG9uZTogJzU1NS01Njc4JywgICAgYWdlOiAzNSB9LFxuICAgICAgICAgICAgeyBuYW1lOiAnSnVsaWUnLCAgIHBob25lOiAnNTU1LTg3NjUnLCAgICBhZ2U6IDI5IH1cbiAgICAgICAgICBdO1xuICAgICAgICAgICRzY29wZS5vcmRlciA9IGZ1bmN0aW9uKHByZWRpY2F0ZSwgcmV2ZXJzZSkge1xuICAgICAgICAgICAgJHNjb3BlLmZyaWVuZHMgPSBvcmRlckJ5KCRzY29wZS5mcmllbmRzLCBwcmVkaWNhdGUsIHJldmVyc2UpO1xuICAgICAgICAgIH07XG4gICAgICAgICAgJHNjb3BlLm9yZGVyKCctYWdlJyxmYWxzZSk7XG4gICAgICAgIH1dKTtcbiAgICA8L2ZpbGU+XG48L2V4YW1wbGU+XG4gKi9cbm9yZGVyQnlGaWx0ZXIuJGluamVjdCA9IFsnJHBhcnNlJ107XG5mdW5jdGlvbiBvcmRlckJ5RmlsdGVyKCRwYXJzZSkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJyYXksIHNvcnRQcmVkaWNhdGUsIHJldmVyc2VPcmRlcikge1xuICAgIGlmICghKGlzQXJyYXlMaWtlKGFycmF5KSkpIHJldHVybiBhcnJheTtcbiAgICBzb3J0UHJlZGljYXRlID0gaXNBcnJheShzb3J0UHJlZGljYXRlKSA/IHNvcnRQcmVkaWNhdGUgOiBbc29ydFByZWRpY2F0ZV07XG4gICAgaWYgKHNvcnRQcmVkaWNhdGUubGVuZ3RoID09PSAwKSB7IHNvcnRQcmVkaWNhdGUgPSBbJysnXTsgfVxuICAgIHNvcnRQcmVkaWNhdGUgPSBzb3J0UHJlZGljYXRlLm1hcChmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHZhciBkZXNjZW5kaW5nID0gZmFsc2UsIGdldCA9IHByZWRpY2F0ZSB8fCBpZGVudGl0eTtcbiAgICAgIGlmIChpc1N0cmluZyhwcmVkaWNhdGUpKSB7XG4gICAgICAgIGlmICgocHJlZGljYXRlLmNoYXJBdCgwKSA9PSAnKycgfHwgcHJlZGljYXRlLmNoYXJBdCgwKSA9PSAnLScpKSB7XG4gICAgICAgICAgZGVzY2VuZGluZyA9IHByZWRpY2F0ZS5jaGFyQXQoMCkgPT0gJy0nO1xuICAgICAgICAgIHByZWRpY2F0ZSA9IHByZWRpY2F0ZS5zdWJzdHJpbmcoMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZWRpY2F0ZSA9PT0gJycpIHtcbiAgICAgICAgICAvLyBFZmZlY3RpdmVseSBubyBwcmVkaWNhdGUgd2FzIHBhc3NlZCBzbyB3ZSBjb21wYXJlIGlkZW50aXR5XG4gICAgICAgICAgcmV0dXJuIHJldmVyc2VDb21wYXJhdG9yKGNvbXBhcmUsIGRlc2NlbmRpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGdldCA9ICRwYXJzZShwcmVkaWNhdGUpO1xuICAgICAgICBpZiAoZ2V0LmNvbnN0YW50KSB7XG4gICAgICAgICAgdmFyIGtleSA9IGdldCgpO1xuICAgICAgICAgIHJldHVybiByZXZlcnNlQ29tcGFyYXRvcihmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gY29tcGFyZShhW2tleV0sIGJba2V5XSk7XG4gICAgICAgICAgfSwgZGVzY2VuZGluZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXZlcnNlQ29tcGFyYXRvcihmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgIHJldHVybiBjb21wYXJlKGdldChhKSxnZXQoYikpO1xuICAgICAgfSwgZGVzY2VuZGluZyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNsaWNlLmNhbGwoYXJyYXkpLnNvcnQocmV2ZXJzZUNvbXBhcmF0b3IoY29tcGFyYXRvciwgcmV2ZXJzZU9yZGVyKSk7XG5cbiAgICBmdW5jdGlvbiBjb21wYXJhdG9yKG8xLCBvMikge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzb3J0UHJlZGljYXRlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjb21wID0gc29ydFByZWRpY2F0ZVtpXShvMSwgbzIpO1xuICAgICAgICBpZiAoY29tcCAhPT0gMCkgcmV0dXJuIGNvbXA7XG4gICAgICB9XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmV2ZXJzZUNvbXBhcmF0b3IoY29tcCwgZGVzY2VuZGluZykge1xuICAgICAgcmV0dXJuIGRlc2NlbmRpbmdcbiAgICAgICAgICA/IGZ1bmN0aW9uKGEsIGIpIHtyZXR1cm4gY29tcChiLGEpO31cbiAgICAgICAgICA6IGNvbXA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNQcmltaXRpdmUodmFsdWUpIHtcbiAgICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgICAgIGNhc2UgJ251bWJlcic6IC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgY2FzZSAnYm9vbGVhbic6IC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkgcmV0dXJuICdudWxsJztcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUudmFsdWVPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnZhbHVlT2YoKTtcbiAgICAgICAgaWYgKGlzUHJpbWl0aXZlKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZS50b1N0cmluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgIGlmIChpc1ByaW1pdGl2ZSh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wYXJlKHYxLCB2Mikge1xuICAgICAgdmFyIHQxID0gdHlwZW9mIHYxO1xuICAgICAgdmFyIHQyID0gdHlwZW9mIHYyO1xuICAgICAgaWYgKHQxID09PSB0MiAmJiB0MSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICB2MSA9IG9iamVjdFRvU3RyaW5nKHYxKTtcbiAgICAgICAgdjIgPSBvYmplY3RUb1N0cmluZyh2Mik7XG4gICAgICB9XG4gICAgICBpZiAodDEgPT09IHQyKSB7XG4gICAgICAgIGlmICh0MSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICB2MSA9IHYxLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgIHYyID0gdjIudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodjEgPT09IHYyKSByZXR1cm4gMDtcbiAgICAgICAgcmV0dXJuIHYxIDwgdjIgPyAtMSA6IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdDEgPCB0MiA/IC0xIDogMTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG5nRGlyZWN0aXZlKGRpcmVjdGl2ZSkge1xuICBpZiAoaXNGdW5jdGlvbihkaXJlY3RpdmUpKSB7XG4gICAgZGlyZWN0aXZlID0ge1xuICAgICAgbGluazogZGlyZWN0aXZlXG4gICAgfTtcbiAgfVxuICBkaXJlY3RpdmUucmVzdHJpY3QgPSBkaXJlY3RpdmUucmVzdHJpY3QgfHwgJ0FDJztcbiAgcmV0dXJuIHZhbHVlRm4oZGlyZWN0aXZlKTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBhXG4gKiBAcmVzdHJpY3QgRVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogTW9kaWZpZXMgdGhlIGRlZmF1bHQgYmVoYXZpb3Igb2YgdGhlIGh0bWwgQSB0YWcgc28gdGhhdCB0aGUgZGVmYXVsdCBhY3Rpb24gaXMgcHJldmVudGVkIHdoZW5cbiAqIHRoZSBocmVmIGF0dHJpYnV0ZSBpcyBlbXB0eS5cbiAqXG4gKiBUaGlzIGNoYW5nZSBwZXJtaXRzIHRoZSBlYXN5IGNyZWF0aW9uIG9mIGFjdGlvbiBsaW5rcyB3aXRoIHRoZSBgbmdDbGlja2AgZGlyZWN0aXZlXG4gKiB3aXRob3V0IGNoYW5naW5nIHRoZSBsb2NhdGlvbiBvciBjYXVzaW5nIHBhZ2UgcmVsb2FkcywgZS5nLjpcbiAqIGA8YSBocmVmPVwiXCIgbmctY2xpY2s9XCJsaXN0LmFkZEl0ZW0oKVwiPkFkZCBJdGVtPC9hPmBcbiAqL1xudmFyIGh0bWxBbmNob3JEaXJlY3RpdmUgPSB2YWx1ZUZuKHtcbiAgcmVzdHJpY3Q6ICdFJyxcbiAgY29tcGlsZTogZnVuY3Rpb24oZWxlbWVudCwgYXR0cikge1xuICAgIGlmICghYXR0ci5ocmVmICYmICFhdHRyLnhsaW5rSHJlZiAmJiAhYXR0ci5uYW1lKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQpIHtcbiAgICAgICAgLy8gSWYgdGhlIGxpbmtlZCBlbGVtZW50IGlzIG5vdCBhbiBhbmNob3IgdGFnIGFueW1vcmUsIGRvIG5vdGhpbmdcbiAgICAgICAgaWYgKGVsZW1lbnRbMF0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gJ2EnKSByZXR1cm47XG5cbiAgICAgICAgLy8gU1ZHQUVsZW1lbnQgZG9lcyBub3QgdXNlIHRoZSBocmVmIGF0dHJpYnV0ZSwgYnV0IHJhdGhlciB0aGUgJ3hsaW5rSHJlZicgYXR0cmlidXRlLlxuICAgICAgICB2YXIgaHJlZiA9IHRvU3RyaW5nLmNhbGwoZWxlbWVudC5wcm9wKCdocmVmJykpID09PSAnW29iamVjdCBTVkdBbmltYXRlZFN0cmluZ10nID9cbiAgICAgICAgICAgICAgICAgICAneGxpbms6aHJlZicgOiAnaHJlZic7XG4gICAgICAgIGVsZW1lbnQub24oJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAvLyBpZiB3ZSBoYXZlIG5vIGhyZWYgdXJsLCB0aGVuIGRvbid0IG5hdmlnYXRlIGFueXdoZXJlLlxuICAgICAgICAgIGlmICghZWxlbWVudC5hdHRyKGhyZWYpKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxufSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdIcmVmXG4gKiBAcmVzdHJpY3QgQVxuICogQHByaW9yaXR5IDk5XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBVc2luZyBBbmd1bGFyIG1hcmt1cCBsaWtlIGB7e2hhc2h9fWAgaW4gYW4gaHJlZiBhdHRyaWJ1dGUgd2lsbFxuICogbWFrZSB0aGUgbGluayBnbyB0byB0aGUgd3JvbmcgVVJMIGlmIHRoZSB1c2VyIGNsaWNrcyBpdCBiZWZvcmVcbiAqIEFuZ3VsYXIgaGFzIGEgY2hhbmNlIHRvIHJlcGxhY2UgdGhlIGB7e2hhc2h9fWAgbWFya3VwIHdpdGggaXRzXG4gKiB2YWx1ZS4gVW50aWwgQW5ndWxhciByZXBsYWNlcyB0aGUgbWFya3VwIHRoZSBsaW5rIHdpbGwgYmUgYnJva2VuXG4gKiBhbmQgd2lsbCBtb3N0IGxpa2VseSByZXR1cm4gYSA0MDQgZXJyb3IuIFRoZSBgbmdIcmVmYCBkaXJlY3RpdmVcbiAqIHNvbHZlcyB0aGlzIHByb2JsZW0uXG4gKlxuICogVGhlIHdyb25nIHdheSB0byB3cml0ZSBpdDpcbiAqIGBgYGh0bWxcbiAqIDxhIGhyZWY9XCJodHRwOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIve3toYXNofX1cIj5saW5rMTwvYT5cbiAqIGBgYFxuICpcbiAqIFRoZSBjb3JyZWN0IHdheSB0byB3cml0ZSBpdDpcbiAqIGBgYGh0bWxcbiAqIDxhIG5nLWhyZWY9XCJodHRwOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIve3toYXNofX1cIj5saW5rMTwvYT5cbiAqIGBgYFxuICpcbiAqIEBlbGVtZW50IEFcbiAqIEBwYXJhbSB7dGVtcGxhdGV9IG5nSHJlZiBhbnkgc3RyaW5nIHdoaWNoIGNhbiBjb250YWluIGB7e319YCBtYXJrdXAuXG4gKlxuICogQGV4YW1wbGVcbiAqIFRoaXMgZXhhbXBsZSBzaG93cyB2YXJpb3VzIGNvbWJpbmF0aW9ucyBvZiBgaHJlZmAsIGBuZy1ocmVmYCBhbmQgYG5nLWNsaWNrYCBhdHRyaWJ1dGVzXG4gKiBpbiBsaW5rcyBhbmQgdGhlaXIgZGlmZmVyZW50IGJlaGF2aW9yczpcbiAgICA8ZXhhbXBsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxpbnB1dCBuZy1tb2RlbD1cInZhbHVlXCIgLz48YnIgLz5cbiAgICAgICAgPGEgaWQ9XCJsaW5rLTFcIiBocmVmIG5nLWNsaWNrPVwidmFsdWUgPSAxXCI+bGluayAxPC9hPiAobGluaywgZG9uJ3QgcmVsb2FkKTxiciAvPlxuICAgICAgICA8YSBpZD1cImxpbmstMlwiIGhyZWY9XCJcIiBuZy1jbGljaz1cInZhbHVlID0gMlwiPmxpbmsgMjwvYT4gKGxpbmssIGRvbid0IHJlbG9hZCk8YnIgLz5cbiAgICAgICAgPGEgaWQ9XCJsaW5rLTNcIiBuZy1ocmVmPVwiL3t7JzEyMyd9fVwiPmxpbmsgMzwvYT4gKGxpbmssIHJlbG9hZCEpPGJyIC8+XG4gICAgICAgIDxhIGlkPVwibGluay00XCIgaHJlZj1cIlwiIG5hbWU9XCJ4eFwiIG5nLWNsaWNrPVwidmFsdWUgPSA0XCI+YW5jaG9yPC9hPiAobGluaywgZG9uJ3QgcmVsb2FkKTxiciAvPlxuICAgICAgICA8YSBpZD1cImxpbmstNVwiIG5hbWU9XCJ4eHhcIiBuZy1jbGljaz1cInZhbHVlID0gNVwiPmFuY2hvcjwvYT4gKG5vIGxpbmspPGJyIC8+XG4gICAgICAgIDxhIGlkPVwibGluay02XCIgbmctaHJlZj1cInt7dmFsdWV9fVwiPmxpbms8L2E+IChsaW5rLCBjaGFuZ2UgbG9jYXRpb24pXG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIGl0KCdzaG91bGQgZXhlY3V0ZSBuZy1jbGljayBidXQgbm90IHJlbG9hZCB3aGVuIGhyZWYgd2l0aG91dCB2YWx1ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGVsZW1lbnQoYnkuaWQoJ2xpbmstMScpKS5jbGljaygpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5Lm1vZGVsKCd2YWx1ZScpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvRXF1YWwoJzEnKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnbGluay0xJykpLmdldEF0dHJpYnV0ZSgnaHJlZicpKS50b0JlKCcnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBleGVjdXRlIG5nLWNsaWNrIGJ1dCBub3QgcmVsb2FkIHdoZW4gaHJlZiBlbXB0eSBzdHJpbmcnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBlbGVtZW50KGJ5LmlkKCdsaW5rLTInKSkuY2xpY2soKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5tb2RlbCgndmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0VxdWFsKCcyJyk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2xpbmstMicpKS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkudG9CZSgnJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgZXhlY3V0ZSBuZy1jbGljayBhbmQgY2hhbmdlIHVybCB3aGVuIG5nLWhyZWYgc3BlY2lmaWVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2xpbmstMycpKS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkudG9NYXRjaCgvXFwvMTIzJC8pO1xuXG4gICAgICAgICAgZWxlbWVudChieS5pZCgnbGluay0zJykpLmNsaWNrKCk7XG5cbiAgICAgICAgICAvLyBBdCB0aGlzIHBvaW50LCB3ZSBuYXZpZ2F0ZSBhd2F5IGZyb20gYW4gQW5ndWxhciBwYWdlLCBzbyB3ZSBuZWVkXG4gICAgICAgICAgLy8gdG8gdXNlIGJyb3dzZXIuZHJpdmVyIHRvIGdldCB0aGUgYmFzZSB3ZWJkcml2ZXIuXG5cbiAgICAgICAgICBicm93c2VyLndhaXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gYnJvd3Nlci5kcml2ZXIuZ2V0Q3VycmVudFVybCgpLnRoZW4oZnVuY3Rpb24odXJsKSB7XG4gICAgICAgICAgICAgIHJldHVybiB1cmwubWF0Y2goL1xcLzEyMyQvKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sIDUwMDAsICdwYWdlIHNob3VsZCBuYXZpZ2F0ZSB0byAvMTIzJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHhpdCgnc2hvdWxkIGV4ZWN1dGUgbmctY2xpY2sgYnV0IG5vdCByZWxvYWQgd2hlbiBocmVmIGVtcHR5IHN0cmluZyBhbmQgbmFtZSBzcGVjaWZpZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBlbGVtZW50KGJ5LmlkKCdsaW5rLTQnKSkuY2xpY2soKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5tb2RlbCgndmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0VxdWFsKCc0Jyk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2xpbmstNCcpKS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkudG9CZSgnJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgZXhlY3V0ZSBuZy1jbGljayBidXQgbm90IHJlbG9hZCB3aGVuIG5vIGhyZWYgYnV0IG5hbWUgc3BlY2lmaWVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbWVudChieS5pZCgnbGluay01JykpLmNsaWNrKCk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkubW9kZWwoJ3ZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9FcXVhbCgnNScpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdsaW5rLTUnKSkuZ2V0QXR0cmlidXRlKCdocmVmJykpLnRvQmUobnVsbCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgb25seSBjaGFuZ2UgdXJsIHdoZW4gb25seSBuZy1ocmVmJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbWVudChieS5tb2RlbCgndmFsdWUnKSkuY2xlYXIoKTtcbiAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCd2YWx1ZScpKS5zZW5kS2V5cygnNicpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdsaW5rLTYnKSkuZ2V0QXR0cmlidXRlKCdocmVmJykpLnRvTWF0Y2goL1xcLzYkLyk7XG5cbiAgICAgICAgICBlbGVtZW50KGJ5LmlkKCdsaW5rLTYnKSkuY2xpY2soKTtcblxuICAgICAgICAgIC8vIEF0IHRoaXMgcG9pbnQsIHdlIG5hdmlnYXRlIGF3YXkgZnJvbSBhbiBBbmd1bGFyIHBhZ2UsIHNvIHdlIG5lZWRcbiAgICAgICAgICAvLyB0byB1c2UgYnJvd3Nlci5kcml2ZXIgdG8gZ2V0IHRoZSBiYXNlIHdlYmRyaXZlci5cbiAgICAgICAgICBicm93c2VyLndhaXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gYnJvd3Nlci5kcml2ZXIuZ2V0Q3VycmVudFVybCgpLnRoZW4oZnVuY3Rpb24odXJsKSB7XG4gICAgICAgICAgICAgIHJldHVybiB1cmwubWF0Y2goL1xcLzYkLyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCA1MDAwLCAncGFnZSBzaG91bGQgbmF2aWdhdGUgdG8gLzYnKTtcbiAgICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdTcmNcbiAqIEByZXN0cmljdCBBXG4gKiBAcHJpb3JpdHkgOTlcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzaW5nIEFuZ3VsYXIgbWFya3VwIGxpa2UgYHt7aGFzaH19YCBpbiBhIGBzcmNgIGF0dHJpYnV0ZSBkb2Vzbid0XG4gKiB3b3JrIHJpZ2h0OiBUaGUgYnJvd3NlciB3aWxsIGZldGNoIGZyb20gdGhlIFVSTCB3aXRoIHRoZSBsaXRlcmFsXG4gKiB0ZXh0IGB7e2hhc2h9fWAgdW50aWwgQW5ndWxhciByZXBsYWNlcyB0aGUgZXhwcmVzc2lvbiBpbnNpZGVcbiAqIGB7e2hhc2h9fWAuIFRoZSBgbmdTcmNgIGRpcmVjdGl2ZSBzb2x2ZXMgdGhpcyBwcm9ibGVtLlxuICpcbiAqIFRoZSBidWdneSB3YXkgdG8gd3JpdGUgaXQ6XG4gKiBgYGBodG1sXG4gKiA8aW1nIHNyYz1cImh0dHA6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci97e2hhc2h9fVwiLz5cbiAqIGBgYFxuICpcbiAqIFRoZSBjb3JyZWN0IHdheSB0byB3cml0ZSBpdDpcbiAqIGBgYGh0bWxcbiAqIDxpbWcgbmctc3JjPVwiaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyL3t7aGFzaH19XCIvPlxuICogYGBgXG4gKlxuICogQGVsZW1lbnQgSU1HXG4gKiBAcGFyYW0ge3RlbXBsYXRlfSBuZ1NyYyBhbnkgc3RyaW5nIHdoaWNoIGNhbiBjb250YWluIGB7e319YCBtYXJrdXAuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1NyY3NldFxuICogQHJlc3RyaWN0IEFcbiAqIEBwcmlvcml0eSA5OVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVXNpbmcgQW5ndWxhciBtYXJrdXAgbGlrZSBge3toYXNofX1gIGluIGEgYHNyY3NldGAgYXR0cmlidXRlIGRvZXNuJ3RcbiAqIHdvcmsgcmlnaHQ6IFRoZSBicm93c2VyIHdpbGwgZmV0Y2ggZnJvbSB0aGUgVVJMIHdpdGggdGhlIGxpdGVyYWxcbiAqIHRleHQgYHt7aGFzaH19YCB1bnRpbCBBbmd1bGFyIHJlcGxhY2VzIHRoZSBleHByZXNzaW9uIGluc2lkZVxuICogYHt7aGFzaH19YC4gVGhlIGBuZ1NyY3NldGAgZGlyZWN0aXZlIHNvbHZlcyB0aGlzIHByb2JsZW0uXG4gKlxuICogVGhlIGJ1Z2d5IHdheSB0byB3cml0ZSBpdDpcbiAqIGBgYGh0bWxcbiAqIDxpbWcgc3Jjc2V0PVwiaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyL3t7aGFzaH19IDJ4XCIvPlxuICogYGBgXG4gKlxuICogVGhlIGNvcnJlY3Qgd2F5IHRvIHdyaXRlIGl0OlxuICogYGBgaHRtbFxuICogPGltZyBuZy1zcmNzZXQ9XCJodHRwOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIve3toYXNofX0gMnhcIi8+XG4gKiBgYGBcbiAqXG4gKiBAZWxlbWVudCBJTUdcbiAqIEBwYXJhbSB7dGVtcGxhdGV9IG5nU3Jjc2V0IGFueSBzdHJpbmcgd2hpY2ggY2FuIGNvbnRhaW4gYHt7fX1gIG1hcmt1cC5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nRGlzYWJsZWRcbiAqIEByZXN0cmljdCBBXG4gKiBAcHJpb3JpdHkgMTAwXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogV2Ugc2hvdWxkbid0IGRvIHRoaXMsIGJlY2F1c2UgaXQgd2lsbCBtYWtlIHRoZSBidXR0b24gZW5hYmxlZCBvbiBDaHJvbWUvRmlyZWZveCBidXQgbm90IG9uIElFOCBhbmQgb2xkZXIgSUVzOlxuICogYGBgaHRtbFxuICogPGRpdiBuZy1pbml0PVwic2NvcGUgPSB7IGlzRGlzYWJsZWQ6IGZhbHNlIH1cIj5cbiAqICA8YnV0dG9uIGRpc2FibGVkPVwie3tzY29wZS5pc0Rpc2FibGVkfX1cIj5EaXNhYmxlZDwvYnV0dG9uPlxuICogPC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBUaGUgSFRNTCBzcGVjaWZpY2F0aW9uIGRvZXMgbm90IHJlcXVpcmUgYnJvd3NlcnMgdG8gcHJlc2VydmUgdGhlIHZhbHVlcyBvZiBib29sZWFuIGF0dHJpYnV0ZXNcbiAqIHN1Y2ggYXMgZGlzYWJsZWQuIChUaGVpciBwcmVzZW5jZSBtZWFucyB0cnVlIGFuZCB0aGVpciBhYnNlbmNlIG1lYW5zIGZhbHNlLilcbiAqIElmIHdlIHB1dCBhbiBBbmd1bGFyIGludGVycG9sYXRpb24gZXhwcmVzc2lvbiBpbnRvIHN1Y2ggYW4gYXR0cmlidXRlIHRoZW4gdGhlXG4gKiBiaW5kaW5nIGluZm9ybWF0aW9uIHdvdWxkIGJlIGxvc3Qgd2hlbiB0aGUgYnJvd3NlciByZW1vdmVzIHRoZSBhdHRyaWJ1dGUuXG4gKiBUaGUgYG5nRGlzYWJsZWRgIGRpcmVjdGl2ZSBzb2x2ZXMgdGhpcyBwcm9ibGVtIGZvciB0aGUgYGRpc2FibGVkYCBhdHRyaWJ1dGUuXG4gKiBUaGlzIGNvbXBsZW1lbnRhcnkgZGlyZWN0aXZlIGlzIG5vdCByZW1vdmVkIGJ5IHRoZSBicm93c2VyIGFuZCBzbyBwcm92aWRlc1xuICogYSBwZXJtYW5lbnQgcmVsaWFibGUgcGxhY2UgdG8gc3RvcmUgdGhlIGJpbmRpbmcgaW5mb3JtYXRpb24uXG4gKlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIENsaWNrIG1lIHRvIHRvZ2dsZTogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY2hlY2tlZFwiPjxici8+XG4gICAgICAgIDxidXR0b24gbmctbW9kZWw9XCJidXR0b25cIiBuZy1kaXNhYmxlZD1cImNoZWNrZWRcIj5CdXR0b248L2J1dHRvbj5cbiAgICAgIDwvZmlsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgaXQoJ3Nob3VsZCB0b2dnbGUgYnV0dG9uJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCdidXR0b24nKSkuZ2V0QXR0cmlidXRlKCdkaXNhYmxlZCcpKS50b0JlRmFsc3koKTtcbiAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdjaGVja2VkJykpLmNsaWNrKCk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCdidXR0b24nKSkuZ2V0QXR0cmlidXRlKCdkaXNhYmxlZCcpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqXG4gKiBAZWxlbWVudCBJTlBVVFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0Rpc2FibGVkIElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHksXG4gKiAgICAgdGhlbiBzcGVjaWFsIGF0dHJpYnV0ZSBcImRpc2FibGVkXCIgd2lsbCBiZSBzZXQgb24gdGhlIGVsZW1lbnRcbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDaGVja2VkXG4gKiBAcmVzdHJpY3QgQVxuICogQHByaW9yaXR5IDEwMFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIEhUTUwgc3BlY2lmaWNhdGlvbiBkb2VzIG5vdCByZXF1aXJlIGJyb3dzZXJzIHRvIHByZXNlcnZlIHRoZSB2YWx1ZXMgb2YgYm9vbGVhbiBhdHRyaWJ1dGVzXG4gKiBzdWNoIGFzIGNoZWNrZWQuIChUaGVpciBwcmVzZW5jZSBtZWFucyB0cnVlIGFuZCB0aGVpciBhYnNlbmNlIG1lYW5zIGZhbHNlLilcbiAqIElmIHdlIHB1dCBhbiBBbmd1bGFyIGludGVycG9sYXRpb24gZXhwcmVzc2lvbiBpbnRvIHN1Y2ggYW4gYXR0cmlidXRlIHRoZW4gdGhlXG4gKiBiaW5kaW5nIGluZm9ybWF0aW9uIHdvdWxkIGJlIGxvc3Qgd2hlbiB0aGUgYnJvd3NlciByZW1vdmVzIHRoZSBhdHRyaWJ1dGUuXG4gKiBUaGUgYG5nQ2hlY2tlZGAgZGlyZWN0aXZlIHNvbHZlcyB0aGlzIHByb2JsZW0gZm9yIHRoZSBgY2hlY2tlZGAgYXR0cmlidXRlLlxuICogVGhpcyBjb21wbGVtZW50YXJ5IGRpcmVjdGl2ZSBpcyBub3QgcmVtb3ZlZCBieSB0aGUgYnJvd3NlciBhbmQgc28gcHJvdmlkZXNcbiAqIGEgcGVybWFuZW50IHJlbGlhYmxlIHBsYWNlIHRvIHN0b3JlIHRoZSBiaW5kaW5nIGluZm9ybWF0aW9uLlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIENoZWNrIG1lIHRvIGNoZWNrIGJvdGg6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cIm1hc3RlclwiPjxici8+XG4gICAgICAgIDxpbnB1dCBpZD1cImNoZWNrU2xhdmVcIiB0eXBlPVwiY2hlY2tib3hcIiBuZy1jaGVja2VkPVwibWFzdGVyXCI+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIGl0KCdzaG91bGQgY2hlY2sgYm90aCBjaGVja0JveGVzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2NoZWNrU2xhdmUnKSkuZ2V0QXR0cmlidXRlKCdjaGVja2VkJykpLnRvQmVGYWxzeSgpO1xuICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ21hc3RlcicpKS5jbGljaygpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjaGVja1NsYXZlJykpLmdldEF0dHJpYnV0ZSgnY2hlY2tlZCcpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqXG4gKiBAZWxlbWVudCBJTlBVVFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0NoZWNrZWQgSWYgdGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGlzIHRydXRoeSxcbiAqICAgICB0aGVuIHNwZWNpYWwgYXR0cmlidXRlIFwiY2hlY2tlZFwiIHdpbGwgYmUgc2V0IG9uIHRoZSBlbGVtZW50XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nUmVhZG9ubHlcbiAqIEByZXN0cmljdCBBXG4gKiBAcHJpb3JpdHkgMTAwXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgSFRNTCBzcGVjaWZpY2F0aW9uIGRvZXMgbm90IHJlcXVpcmUgYnJvd3NlcnMgdG8gcHJlc2VydmUgdGhlIHZhbHVlcyBvZiBib29sZWFuIGF0dHJpYnV0ZXNcbiAqIHN1Y2ggYXMgcmVhZG9ubHkuIChUaGVpciBwcmVzZW5jZSBtZWFucyB0cnVlIGFuZCB0aGVpciBhYnNlbmNlIG1lYW5zIGZhbHNlLilcbiAqIElmIHdlIHB1dCBhbiBBbmd1bGFyIGludGVycG9sYXRpb24gZXhwcmVzc2lvbiBpbnRvIHN1Y2ggYW4gYXR0cmlidXRlIHRoZW4gdGhlXG4gKiBiaW5kaW5nIGluZm9ybWF0aW9uIHdvdWxkIGJlIGxvc3Qgd2hlbiB0aGUgYnJvd3NlciByZW1vdmVzIHRoZSBhdHRyaWJ1dGUuXG4gKiBUaGUgYG5nUmVhZG9ubHlgIGRpcmVjdGl2ZSBzb2x2ZXMgdGhpcyBwcm9ibGVtIGZvciB0aGUgYHJlYWRvbmx5YCBhdHRyaWJ1dGUuXG4gKiBUaGlzIGNvbXBsZW1lbnRhcnkgZGlyZWN0aXZlIGlzIG5vdCByZW1vdmVkIGJ5IHRoZSBicm93c2VyIGFuZCBzbyBwcm92aWRlc1xuICogYSBwZXJtYW5lbnQgcmVsaWFibGUgcGxhY2UgdG8gc3RvcmUgdGhlIGJpbmRpbmcgaW5mb3JtYXRpb24uXG4gKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgQ2hlY2sgbWUgdG8gbWFrZSB0ZXh0IHJlYWRvbmx5OiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjaGVja2VkXCI+PGJyLz5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctcmVhZG9ubHk9XCJjaGVja2VkXCIgdmFsdWU9XCJJJ20gQW5ndWxhclwiLz5cbiAgICAgIDwvZmlsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgaXQoJ3Nob3VsZCB0b2dnbGUgcmVhZG9ubHkgYXR0cicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnW3R5cGU9XCJ0ZXh0XCJdJykpLmdldEF0dHJpYnV0ZSgncmVhZG9ubHknKSkudG9CZUZhbHN5KCk7XG4gICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnY2hlY2tlZCcpKS5jbGljaygpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnW3R5cGU9XCJ0ZXh0XCJdJykpLmdldEF0dHJpYnV0ZSgncmVhZG9ubHknKSkudG9CZVRydXRoeSgpO1xuICAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKlxuICogQGVsZW1lbnQgSU5QVVRcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdSZWFkb25seSBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgdHJ1dGh5LFxuICogICAgIHRoZW4gc3BlY2lhbCBhdHRyaWJ1dGUgXCJyZWFkb25seVwiIHdpbGwgYmUgc2V0IG9uIHRoZSBlbGVtZW50XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nU2VsZWN0ZWRcbiAqIEByZXN0cmljdCBBXG4gKiBAcHJpb3JpdHkgMTAwXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgSFRNTCBzcGVjaWZpY2F0aW9uIGRvZXMgbm90IHJlcXVpcmUgYnJvd3NlcnMgdG8gcHJlc2VydmUgdGhlIHZhbHVlcyBvZiBib29sZWFuIGF0dHJpYnV0ZXNcbiAqIHN1Y2ggYXMgc2VsZWN0ZWQuIChUaGVpciBwcmVzZW5jZSBtZWFucyB0cnVlIGFuZCB0aGVpciBhYnNlbmNlIG1lYW5zIGZhbHNlLilcbiAqIElmIHdlIHB1dCBhbiBBbmd1bGFyIGludGVycG9sYXRpb24gZXhwcmVzc2lvbiBpbnRvIHN1Y2ggYW4gYXR0cmlidXRlIHRoZW4gdGhlXG4gKiBiaW5kaW5nIGluZm9ybWF0aW9uIHdvdWxkIGJlIGxvc3Qgd2hlbiB0aGUgYnJvd3NlciByZW1vdmVzIHRoZSBhdHRyaWJ1dGUuXG4gKiBUaGUgYG5nU2VsZWN0ZWRgIGRpcmVjdGl2ZSBzb2x2ZXMgdGhpcyBwcm9ibGVtIGZvciB0aGUgYHNlbGVjdGVkYCBhdHRyaWJ1dGUuXG4gKiBUaGlzIGNvbXBsZW1lbnRhcnkgZGlyZWN0aXZlIGlzIG5vdCByZW1vdmVkIGJ5IHRoZSBicm93c2VyIGFuZCBzbyBwcm92aWRlc1xuICogYSBwZXJtYW5lbnQgcmVsaWFibGUgcGxhY2UgdG8gc3RvcmUgdGhlIGJpbmRpbmcgaW5mb3JtYXRpb24uXG4gKlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIENoZWNrIG1lIHRvIHNlbGVjdDogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwic2VsZWN0ZWRcIj48YnIvPlxuICAgICAgICA8c2VsZWN0PlxuICAgICAgICAgIDxvcHRpb24+SGVsbG8hPC9vcHRpb24+XG4gICAgICAgICAgPG9wdGlvbiBpZD1cImdyZWV0XCIgbmctc2VsZWN0ZWQ9XCJzZWxlY3RlZFwiPkdyZWV0aW5ncyE8L29wdGlvbj5cbiAgICAgICAgPC9zZWxlY3Q+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIGl0KCdzaG91bGQgc2VsZWN0IEdyZWV0aW5ncyEnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnZ3JlZXQnKSkuZ2V0QXR0cmlidXRlKCdzZWxlY3RlZCcpKS50b0JlRmFsc3koKTtcbiAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdzZWxlY3RlZCcpKS5jbGljaygpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdncmVldCcpKS5nZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICpcbiAqIEBlbGVtZW50IE9QVElPTlxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ1NlbGVjdGVkIElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHksXG4gKiAgICAgdGhlbiBzcGVjaWFsIGF0dHJpYnV0ZSBcInNlbGVjdGVkXCIgd2lsbCBiZSBzZXQgb24gdGhlIGVsZW1lbnRcbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nT3BlblxuICogQHJlc3RyaWN0IEFcbiAqIEBwcmlvcml0eSAxMDBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBIVE1MIHNwZWNpZmljYXRpb24gZG9lcyBub3QgcmVxdWlyZSBicm93c2VycyB0byBwcmVzZXJ2ZSB0aGUgdmFsdWVzIG9mIGJvb2xlYW4gYXR0cmlidXRlc1xuICogc3VjaCBhcyBvcGVuLiAoVGhlaXIgcHJlc2VuY2UgbWVhbnMgdHJ1ZSBhbmQgdGhlaXIgYWJzZW5jZSBtZWFucyBmYWxzZS4pXG4gKiBJZiB3ZSBwdXQgYW4gQW5ndWxhciBpbnRlcnBvbGF0aW9uIGV4cHJlc3Npb24gaW50byBzdWNoIGFuIGF0dHJpYnV0ZSB0aGVuIHRoZVxuICogYmluZGluZyBpbmZvcm1hdGlvbiB3b3VsZCBiZSBsb3N0IHdoZW4gdGhlIGJyb3dzZXIgcmVtb3ZlcyB0aGUgYXR0cmlidXRlLlxuICogVGhlIGBuZ09wZW5gIGRpcmVjdGl2ZSBzb2x2ZXMgdGhpcyBwcm9ibGVtIGZvciB0aGUgYG9wZW5gIGF0dHJpYnV0ZS5cbiAqIFRoaXMgY29tcGxlbWVudGFyeSBkaXJlY3RpdmUgaXMgbm90IHJlbW92ZWQgYnkgdGhlIGJyb3dzZXIgYW5kIHNvIHByb3ZpZGVzXG4gKiBhIHBlcm1hbmVudCByZWxpYWJsZSBwbGFjZSB0byBzdG9yZSB0aGUgYmluZGluZyBpbmZvcm1hdGlvbi5cbiAqIEBleGFtcGxlXG4gICAgIDxleGFtcGxlPlxuICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICBDaGVjayBtZSBjaGVjayBtdWx0aXBsZTogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwib3BlblwiPjxici8+XG4gICAgICAgICA8ZGV0YWlscyBpZD1cImRldGFpbHNcIiBuZy1vcGVuPVwib3BlblwiPlxuICAgICAgICAgICAgPHN1bW1hcnk+U2hvdy9IaWRlIG1lPC9zdW1tYXJ5PlxuICAgICAgICAgPC9kZXRhaWxzPlxuICAgICAgIDwvZmlsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICBpdCgnc2hvdWxkIHRvZ2dsZSBvcGVuJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdkZXRhaWxzJykpLmdldEF0dHJpYnV0ZSgnb3BlbicpKS50b0JlRmFsc3koKTtcbiAgICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnb3BlbicpKS5jbGljaygpO1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnZGV0YWlscycpKS5nZXRBdHRyaWJ1dGUoJ29wZW4nKSkudG9CZVRydXRoeSgpO1xuICAgICAgICAgfSk7XG4gICAgICAgPC9maWxlPlxuICAgICA8L2V4YW1wbGU+XG4gKlxuICogQGVsZW1lbnQgREVUQUlMU1xuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ09wZW4gSWYgdGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGlzIHRydXRoeSxcbiAqICAgICB0aGVuIHNwZWNpYWwgYXR0cmlidXRlIFwib3BlblwiIHdpbGwgYmUgc2V0IG9uIHRoZSBlbGVtZW50XG4gKi9cblxudmFyIG5nQXR0cmlidXRlQWxpYXNEaXJlY3RpdmVzID0ge307XG5cblxuLy8gYm9vbGVhbiBhdHRycyBhcmUgZXZhbHVhdGVkXG5mb3JFYWNoKEJPT0xFQU5fQVRUUiwgZnVuY3Rpb24ocHJvcE5hbWUsIGF0dHJOYW1lKSB7XG4gIC8vIGJpbmRpbmcgdG8gbXVsdGlwbGUgaXMgbm90IHN1cHBvcnRlZFxuICBpZiAocHJvcE5hbWUgPT0gXCJtdWx0aXBsZVwiKSByZXR1cm47XG5cbiAgdmFyIG5vcm1hbGl6ZWQgPSBkaXJlY3RpdmVOb3JtYWxpemUoJ25nLScgKyBhdHRyTmFtZSk7XG4gIG5nQXR0cmlidXRlQWxpYXNEaXJlY3RpdmVzW25vcm1hbGl6ZWRdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICBwcmlvcml0eTogMTAwLFxuICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgc2NvcGUuJHdhdGNoKGF0dHJbbm9ybWFsaXplZF0sIGZ1bmN0aW9uIG5nQm9vbGVhbkF0dHJXYXRjaEFjdGlvbih2YWx1ZSkge1xuICAgICAgICAgIGF0dHIuJHNldChhdHRyTmFtZSwgISF2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH07XG59KTtcblxuLy8gYWxpYXNlZCBpbnB1dCBhdHRycyBhcmUgZXZhbHVhdGVkXG5mb3JFYWNoKEFMSUFTRURfQVRUUiwgZnVuY3Rpb24oaHRtbEF0dHIsIG5nQXR0cikge1xuICBuZ0F0dHJpYnV0ZUFsaWFzRGlyZWN0aXZlc1tuZ0F0dHJdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByaW9yaXR5OiAxMDAsXG4gICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgICAvL3NwZWNpYWwgY2FzZSBuZ1BhdHRlcm4gd2hlbiBhIGxpdGVyYWwgcmVndWxhciBleHByZXNzaW9uIHZhbHVlXG4gICAgICAgIC8vaXMgdXNlZCBhcyB0aGUgZXhwcmVzc2lvbiAodGhpcyB3YXkgd2UgZG9uJ3QgaGF2ZSB0byB3YXRjaCBhbnl0aGluZykuXG4gICAgICAgIGlmIChuZ0F0dHIgPT09IFwibmdQYXR0ZXJuXCIgJiYgYXR0ci5uZ1BhdHRlcm4uY2hhckF0KDApID09IFwiL1wiKSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gYXR0ci5uZ1BhdHRlcm4ubWF0Y2goUkVHRVhfU1RSSU5HX1JFR0VYUCk7XG4gICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBhdHRyLiRzZXQoXCJuZ1BhdHRlcm5cIiwgbmV3IFJlZ0V4cChtYXRjaFsxXSwgbWF0Y2hbMl0pKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzY29wZS4kd2F0Y2goYXR0cltuZ0F0dHJdLCBmdW5jdGlvbiBuZ0F0dHJBbGlhc1dhdGNoQWN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgYXR0ci4kc2V0KG5nQXR0ciwgdmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xufSk7XG5cbi8vIG5nLXNyYywgbmctc3Jjc2V0LCBuZy1ocmVmIGFyZSBpbnRlcnBvbGF0ZWRcbmZvckVhY2goWydzcmMnLCAnc3Jjc2V0JywgJ2hyZWYnXSwgZnVuY3Rpb24oYXR0ck5hbWUpIHtcbiAgdmFyIG5vcm1hbGl6ZWQgPSBkaXJlY3RpdmVOb3JtYWxpemUoJ25nLScgKyBhdHRyTmFtZSk7XG4gIG5nQXR0cmlidXRlQWxpYXNEaXJlY3RpdmVzW25vcm1hbGl6ZWRdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByaW9yaXR5OiA5OSwgLy8gaXQgbmVlZHMgdG8gcnVuIGFmdGVyIHRoZSBhdHRyaWJ1dGVzIGFyZSBpbnRlcnBvbGF0ZWRcbiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgIHZhciBwcm9wTmFtZSA9IGF0dHJOYW1lLFxuICAgICAgICAgICAgbmFtZSA9IGF0dHJOYW1lO1xuXG4gICAgICAgIGlmIChhdHRyTmFtZSA9PT0gJ2hyZWYnICYmXG4gICAgICAgICAgICB0b1N0cmluZy5jYWxsKGVsZW1lbnQucHJvcCgnaHJlZicpKSA9PT0gJ1tvYmplY3QgU1ZHQW5pbWF0ZWRTdHJpbmddJykge1xuICAgICAgICAgIG5hbWUgPSAneGxpbmtIcmVmJztcbiAgICAgICAgICBhdHRyLiRhdHRyW25hbWVdID0gJ3hsaW5rOmhyZWYnO1xuICAgICAgICAgIHByb3BOYW1lID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGF0dHIuJG9ic2VydmUobm9ybWFsaXplZCwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoYXR0ck5hbWUgPT09ICdocmVmJykge1xuICAgICAgICAgICAgICBhdHRyLiRzZXQobmFtZSwgbnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYXR0ci4kc2V0KG5hbWUsIHZhbHVlKTtcblxuICAgICAgICAgIC8vIG9uIElFLCBpZiBcIm5nOnNyY1wiIGRpcmVjdGl2ZSBkZWNsYXJhdGlvbiBpcyB1c2VkIGFuZCBcInNyY1wiIGF0dHJpYnV0ZSBkb2Vzbid0IGV4aXN0XG4gICAgICAgICAgLy8gdGhlbiBjYWxsaW5nIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdzcmMnLCAnZm9vJykgZG9lc24ndCBkbyBhbnl0aGluZywgc28gd2UgbmVlZFxuICAgICAgICAgIC8vIHRvIHNldCB0aGUgcHJvcGVydHkgYXMgd2VsbCB0byBhY2hpZXZlIHRoZSBkZXNpcmVkIGVmZmVjdC5cbiAgICAgICAgICAvLyB3ZSB1c2UgYXR0clthdHRyTmFtZV0gdmFsdWUgc2luY2UgJHNldCBjYW4gc2FuaXRpemUgdGhlIHVybC5cbiAgICAgICAgICBpZiAobXNpZSAmJiBwcm9wTmFtZSkgZWxlbWVudC5wcm9wKHByb3BOYW1lLCBhdHRyW25hbWVdKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbn0pO1xuXG4vKiBnbG9iYWwgLW51bGxGb3JtQ3RybCwgLVNVQk1JVFRFRF9DTEFTUywgYWRkU2V0VmFsaWRpdHlNZXRob2Q6IHRydWVcbiAqL1xudmFyIG51bGxGb3JtQ3RybCA9IHtcbiAgJGFkZENvbnRyb2w6IG5vb3AsXG4gICQkcmVuYW1lQ29udHJvbDogbnVsbEZvcm1SZW5hbWVDb250cm9sLFxuICAkcmVtb3ZlQ29udHJvbDogbm9vcCxcbiAgJHNldFZhbGlkaXR5OiBub29wLFxuICAkc2V0RGlydHk6IG5vb3AsXG4gICRzZXRQcmlzdGluZTogbm9vcCxcbiAgJHNldFN1Ym1pdHRlZDogbm9vcFxufSxcblNVQk1JVFRFRF9DTEFTUyA9ICduZy1zdWJtaXR0ZWQnO1xuXG5mdW5jdGlvbiBudWxsRm9ybVJlbmFtZUNvbnRyb2woY29udHJvbCwgbmFtZSkge1xuICBjb250cm9sLiRuYW1lID0gbmFtZTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgdHlwZVxuICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlclxuICpcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHByaXN0aW5lIFRydWUgaWYgdXNlciBoYXMgbm90IGludGVyYWN0ZWQgd2l0aCB0aGUgZm9ybSB5ZXQuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICRkaXJ0eSBUcnVlIGlmIHVzZXIgaGFzIGFscmVhZHkgaW50ZXJhY3RlZCB3aXRoIHRoZSBmb3JtLlxuICogQHByb3BlcnR5IHtib29sZWFufSAkdmFsaWQgVHJ1ZSBpZiBhbGwgb2YgdGhlIGNvbnRhaW5pbmcgZm9ybXMgYW5kIGNvbnRyb2xzIGFyZSB2YWxpZC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJGludmFsaWQgVHJ1ZSBpZiBhdCBsZWFzdCBvbmUgY29udGFpbmluZyBjb250cm9sIG9yIGZvcm0gaXMgaW52YWxpZC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHN1Ym1pdHRlZCBUcnVlIGlmIHVzZXIgaGFzIHN1Ym1pdHRlZCB0aGUgZm9ybSBldmVuIGlmIGl0cyBpbnZhbGlkLlxuICpcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSAkZXJyb3IgSXMgYW4gb2JqZWN0IGhhc2gsIGNvbnRhaW5pbmcgcmVmZXJlbmNlcyB0byBjb250cm9scyBvclxuICogIGZvcm1zIHdpdGggZmFpbGluZyB2YWxpZGF0b3JzLCB3aGVyZTpcbiAqXG4gKiAgLSBrZXlzIGFyZSB2YWxpZGF0aW9uIHRva2VucyAoZXJyb3IgbmFtZXMpLFxuICogIC0gdmFsdWVzIGFyZSBhcnJheXMgb2YgY29udHJvbHMgb3IgZm9ybXMgdGhhdCBoYXZlIGEgZmFpbGluZyB2YWxpZGF0b3IgZm9yIGdpdmVuIGVycm9yIG5hbWUuXG4gKlxuICogIEJ1aWx0LWluIHZhbGlkYXRpb24gdG9rZW5zOlxuICpcbiAqICAtIGBlbWFpbGBcbiAqICAtIGBtYXhgXG4gKiAgLSBgbWF4bGVuZ3RoYFxuICogIC0gYG1pbmBcbiAqICAtIGBtaW5sZW5ndGhgXG4gKiAgLSBgbnVtYmVyYFxuICogIC0gYHBhdHRlcm5gXG4gKiAgLSBgcmVxdWlyZWRgXG4gKiAgLSBgdXJsYFxuICogIC0gYGRhdGVgXG4gKiAgLSBgZGF0ZXRpbWVsb2NhbGBcbiAqICAtIGB0aW1lYFxuICogIC0gYHdlZWtgXG4gKiAgLSBgbW9udGhgXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBgRm9ybUNvbnRyb2xsZXJgIGtlZXBzIHRyYWNrIG9mIGFsbCBpdHMgY29udHJvbHMgYW5kIG5lc3RlZCBmb3JtcyBhcyB3ZWxsIGFzIHRoZSBzdGF0ZSBvZiB0aGVtLFxuICogc3VjaCBhcyBiZWluZyB2YWxpZC9pbnZhbGlkIG9yIGRpcnR5L3ByaXN0aW5lLlxuICpcbiAqIEVhY2gge0BsaW5rIG5nLmRpcmVjdGl2ZTpmb3JtIGZvcm19IGRpcmVjdGl2ZSBjcmVhdGVzIGFuIGluc3RhbmNlXG4gKiBvZiBgRm9ybUNvbnRyb2xsZXJgLlxuICpcbiAqL1xuLy9hc2tzIGZvciAkc2NvcGUgdG8gZm9vbCB0aGUgQkMgY29udHJvbGxlciBtb2R1bGVcbkZvcm1Db250cm9sbGVyLiRpbmplY3QgPSBbJyRlbGVtZW50JywgJyRhdHRycycsICckc2NvcGUnLCAnJGFuaW1hdGUnLCAnJGludGVycG9sYXRlJ107XG5mdW5jdGlvbiBGb3JtQ29udHJvbGxlcihlbGVtZW50LCBhdHRycywgJHNjb3BlLCAkYW5pbWF0ZSwgJGludGVycG9sYXRlKSB7XG4gIHZhciBmb3JtID0gdGhpcyxcbiAgICAgIGNvbnRyb2xzID0gW107XG5cbiAgdmFyIHBhcmVudEZvcm0gPSBmb3JtLiQkcGFyZW50Rm9ybSA9IGVsZW1lbnQucGFyZW50KCkuY29udHJvbGxlcignZm9ybScpIHx8IG51bGxGb3JtQ3RybDtcblxuICAvLyBpbml0IHN0YXRlXG4gIGZvcm0uJGVycm9yID0ge307XG4gIGZvcm0uJCRzdWNjZXNzID0ge307XG4gIGZvcm0uJHBlbmRpbmcgPSB1bmRlZmluZWQ7XG4gIGZvcm0uJG5hbWUgPSAkaW50ZXJwb2xhdGUoYXR0cnMubmFtZSB8fCBhdHRycy5uZ0Zvcm0gfHwgJycpKCRzY29wZSk7XG4gIGZvcm0uJGRpcnR5ID0gZmFsc2U7XG4gIGZvcm0uJHByaXN0aW5lID0gdHJ1ZTtcbiAgZm9ybS4kdmFsaWQgPSB0cnVlO1xuICBmb3JtLiRpbnZhbGlkID0gZmFsc2U7XG4gIGZvcm0uJHN1Ym1pdHRlZCA9IGZhbHNlO1xuXG4gIHBhcmVudEZvcm0uJGFkZENvbnRyb2woZm9ybSk7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkcm9sbGJhY2tWaWV3VmFsdWVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJvbGxiYWNrIGFsbCBmb3JtIGNvbnRyb2xzIHBlbmRpbmcgdXBkYXRlcyB0byB0aGUgYCRtb2RlbFZhbHVlYC5cbiAgICpcbiAgICogVXBkYXRlcyBtYXkgYmUgcGVuZGluZyBieSBhIGRlYm91bmNlZCBldmVudCBvciBiZWNhdXNlIHRoZSBpbnB1dCBpcyB3YWl0aW5nIGZvciBhIHNvbWUgZnV0dXJlXG4gICAqIGV2ZW50IGRlZmluZWQgaW4gYG5nLW1vZGVsLW9wdGlvbnNgLiBUaGlzIG1ldGhvZCBpcyB0eXBpY2FsbHkgbmVlZGVkIGJ5IHRoZSByZXNldCBidXR0b24gb2ZcbiAgICogYSBmb3JtIHRoYXQgdXNlcyBgbmctbW9kZWwtb3B0aW9uc2AgdG8gcGVuZCB1cGRhdGVzLlxuICAgKi9cbiAgZm9ybS4kcm9sbGJhY2tWaWV3VmFsdWUgPSBmdW5jdGlvbigpIHtcbiAgICBmb3JFYWNoKGNvbnRyb2xzLCBmdW5jdGlvbihjb250cm9sKSB7XG4gICAgICBjb250cm9sLiRyb2xsYmFja1ZpZXdWYWx1ZSgpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIGZvcm0uRm9ybUNvbnRyb2xsZXIjJGNvbW1pdFZpZXdWYWx1ZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ29tbWl0IGFsbCBmb3JtIGNvbnRyb2xzIHBlbmRpbmcgdXBkYXRlcyB0byB0aGUgYCRtb2RlbFZhbHVlYC5cbiAgICpcbiAgICogVXBkYXRlcyBtYXkgYmUgcGVuZGluZyBieSBhIGRlYm91bmNlZCBldmVudCBvciBiZWNhdXNlIHRoZSBpbnB1dCBpcyB3YWl0aW5nIGZvciBhIHNvbWUgZnV0dXJlXG4gICAqIGV2ZW50IGRlZmluZWQgaW4gYG5nLW1vZGVsLW9wdGlvbnNgLiBUaGlzIG1ldGhvZCBpcyByYXJlbHkgbmVlZGVkIGFzIGBOZ01vZGVsQ29udHJvbGxlcmBcbiAgICogdXN1YWxseSBoYW5kbGVzIGNhbGxpbmcgdGhpcyBpbiByZXNwb25zZSB0byBpbnB1dCBldmVudHMuXG4gICAqL1xuICBmb3JtLiRjb21taXRWaWV3VmFsdWUgPSBmdW5jdGlvbigpIHtcbiAgICBmb3JFYWNoKGNvbnRyb2xzLCBmdW5jdGlvbihjb250cm9sKSB7XG4gICAgICBjb250cm9sLiRjb21taXRWaWV3VmFsdWUoKTtcbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyIyRhZGRDb250cm9sXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZWdpc3RlciBhIGNvbnRyb2wgd2l0aCB0aGUgZm9ybS5cbiAgICpcbiAgICogSW5wdXQgZWxlbWVudHMgdXNpbmcgbmdNb2RlbENvbnRyb2xsZXIgZG8gdGhpcyBhdXRvbWF0aWNhbGx5IHdoZW4gdGhleSBhcmUgbGlua2VkLlxuICAgKi9cbiAgZm9ybS4kYWRkQ29udHJvbCA9IGZ1bmN0aW9uKGNvbnRyb2wpIHtcbiAgICAvLyBCcmVha2luZyBjaGFuZ2UgLSBiZWZvcmUsIGlucHV0cyB3aG9zZSBuYW1lIHdhcyBcImhhc093blByb3BlcnR5XCIgd2VyZSBxdWlldGx5IGlnbm9yZWRcbiAgICAvLyBhbmQgbm90IGFkZGVkIHRvIHRoZSBzY29wZS4gIE5vdyB3ZSB0aHJvdyBhbiBlcnJvci5cbiAgICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eShjb250cm9sLiRuYW1lLCAnaW5wdXQnKTtcbiAgICBjb250cm9scy5wdXNoKGNvbnRyb2wpO1xuXG4gICAgaWYgKGNvbnRyb2wuJG5hbWUpIHtcbiAgICAgIGZvcm1bY29udHJvbC4kbmFtZV0gPSBjb250cm9sO1xuICAgIH1cbiAgfTtcblxuICAvLyBQcml2YXRlIEFQSTogcmVuYW1lIGEgZm9ybSBjb250cm9sXG4gIGZvcm0uJCRyZW5hbWVDb250cm9sID0gZnVuY3Rpb24oY29udHJvbCwgbmV3TmFtZSkge1xuICAgIHZhciBvbGROYW1lID0gY29udHJvbC4kbmFtZTtcblxuICAgIGlmIChmb3JtW29sZE5hbWVdID09PSBjb250cm9sKSB7XG4gICAgICBkZWxldGUgZm9ybVtvbGROYW1lXTtcbiAgICB9XG4gICAgZm9ybVtuZXdOYW1lXSA9IGNvbnRyb2w7XG4gICAgY29udHJvbC4kbmFtZSA9IG5ld05hbWU7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkcmVtb3ZlQ29udHJvbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogRGVyZWdpc3RlciBhIGNvbnRyb2wgZnJvbSB0aGUgZm9ybS5cbiAgICpcbiAgICogSW5wdXQgZWxlbWVudHMgdXNpbmcgbmdNb2RlbENvbnRyb2xsZXIgZG8gdGhpcyBhdXRvbWF0aWNhbGx5IHdoZW4gdGhleSBhcmUgZGVzdHJveWVkLlxuICAgKi9cbiAgZm9ybS4kcmVtb3ZlQ29udHJvbCA9IGZ1bmN0aW9uKGNvbnRyb2wpIHtcbiAgICBpZiAoY29udHJvbC4kbmFtZSAmJiBmb3JtW2NvbnRyb2wuJG5hbWVdID09PSBjb250cm9sKSB7XG4gICAgICBkZWxldGUgZm9ybVtjb250cm9sLiRuYW1lXTtcbiAgICB9XG4gICAgZm9yRWFjaChmb3JtLiRwZW5kaW5nLCBmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgZm9ybS4kc2V0VmFsaWRpdHkobmFtZSwgbnVsbCwgY29udHJvbCk7XG4gICAgfSk7XG4gICAgZm9yRWFjaChmb3JtLiRlcnJvciwgZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgIGZvcm0uJHNldFZhbGlkaXR5KG5hbWUsIG51bGwsIGNvbnRyb2wpO1xuICAgIH0pO1xuICAgIGZvckVhY2goZm9ybS4kJHN1Y2Nlc3MsIGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICBmb3JtLiRzZXRWYWxpZGl0eShuYW1lLCBudWxsLCBjb250cm9sKTtcbiAgICB9KTtcblxuICAgIGFycmF5UmVtb3ZlKGNvbnRyb2xzLCBjb250cm9sKTtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIGZvcm0uRm9ybUNvbnRyb2xsZXIjJHNldFZhbGlkaXR5XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIHRoZSB2YWxpZGl0eSBvZiBhIGZvcm0gY29udHJvbC5cbiAgICpcbiAgICogVGhpcyBtZXRob2Qgd2lsbCBhbHNvIHByb3BhZ2F0ZSB0byBwYXJlbnQgZm9ybXMuXG4gICAqL1xuICBhZGRTZXRWYWxpZGl0eU1ldGhvZCh7XG4gICAgY3RybDogdGhpcyxcbiAgICAkZWxlbWVudDogZWxlbWVudCxcbiAgICBzZXQ6IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHksIGNvbnRyb2xsZXIpIHtcbiAgICAgIHZhciBsaXN0ID0gb2JqZWN0W3Byb3BlcnR5XTtcbiAgICAgIGlmICghbGlzdCkge1xuICAgICAgICBvYmplY3RbcHJvcGVydHldID0gW2NvbnRyb2xsZXJdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGluZGV4ID0gbGlzdC5pbmRleE9mKGNvbnRyb2xsZXIpO1xuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgbGlzdC5wdXNoKGNvbnRyb2xsZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICB1bnNldDogZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSwgY29udHJvbGxlcikge1xuICAgICAgdmFyIGxpc3QgPSBvYmplY3RbcHJvcGVydHldO1xuICAgICAgaWYgKCFsaXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFycmF5UmVtb3ZlKGxpc3QsIGNvbnRyb2xsZXIpO1xuICAgICAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGRlbGV0ZSBvYmplY3RbcHJvcGVydHldO1xuICAgICAgfVxuICAgIH0sXG4gICAgcGFyZW50Rm9ybTogcGFyZW50Rm9ybSxcbiAgICAkYW5pbWF0ZTogJGFuaW1hdGVcbiAgfSk7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkc2V0RGlydHlcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgdGhlIGZvcm0gdG8gYSBkaXJ0eSBzdGF0ZS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgY2FuIGJlIGNhbGxlZCB0byBhZGQgdGhlICduZy1kaXJ0eScgY2xhc3MgYW5kIHNldCB0aGUgZm9ybSB0byBhIGRpcnR5XG4gICAqIHN0YXRlIChuZy1kaXJ0eSBjbGFzcykuIFRoaXMgbWV0aG9kIHdpbGwgYWxzbyBwcm9wYWdhdGUgdG8gcGFyZW50IGZvcm1zLlxuICAgKi9cbiAgZm9ybS4kc2V0RGlydHkgPSBmdW5jdGlvbigpIHtcbiAgICAkYW5pbWF0ZS5yZW1vdmVDbGFzcyhlbGVtZW50LCBQUklTVElORV9DTEFTUyk7XG4gICAgJGFuaW1hdGUuYWRkQ2xhc3MoZWxlbWVudCwgRElSVFlfQ0xBU1MpO1xuICAgIGZvcm0uJGRpcnR5ID0gdHJ1ZTtcbiAgICBmb3JtLiRwcmlzdGluZSA9IGZhbHNlO1xuICAgIHBhcmVudEZvcm0uJHNldERpcnR5KCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkc2V0UHJpc3RpbmVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgdGhlIGZvcm0gdG8gaXRzIHByaXN0aW5lIHN0YXRlLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHRvIHJlbW92ZSB0aGUgJ25nLWRpcnR5JyBjbGFzcyBhbmQgc2V0IHRoZSBmb3JtIHRvIGl0cyBwcmlzdGluZVxuICAgKiBzdGF0ZSAobmctcHJpc3RpbmUgY2xhc3MpLiBUaGlzIG1ldGhvZCB3aWxsIGFsc28gcHJvcGFnYXRlIHRvIGFsbCB0aGUgY29udHJvbHMgY29udGFpbmVkXG4gICAqIGluIHRoaXMgZm9ybS5cbiAgICpcbiAgICogU2V0dGluZyBhIGZvcm0gYmFjayB0byBhIHByaXN0aW5lIHN0YXRlIGlzIG9mdGVuIHVzZWZ1bCB3aGVuIHdlIHdhbnQgdG8gJ3JldXNlJyBhIGZvcm0gYWZ0ZXJcbiAgICogc2F2aW5nIG9yIHJlc2V0dGluZyBpdC5cbiAgICovXG4gIGZvcm0uJHNldFByaXN0aW5lID0gZnVuY3Rpb24oKSB7XG4gICAgJGFuaW1hdGUuc2V0Q2xhc3MoZWxlbWVudCwgUFJJU1RJTkVfQ0xBU1MsIERJUlRZX0NMQVNTICsgJyAnICsgU1VCTUlUVEVEX0NMQVNTKTtcbiAgICBmb3JtLiRkaXJ0eSA9IGZhbHNlO1xuICAgIGZvcm0uJHByaXN0aW5lID0gdHJ1ZTtcbiAgICBmb3JtLiRzdWJtaXR0ZWQgPSBmYWxzZTtcbiAgICBmb3JFYWNoKGNvbnRyb2xzLCBmdW5jdGlvbihjb250cm9sKSB7XG4gICAgICBjb250cm9sLiRzZXRQcmlzdGluZSgpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIGZvcm0uRm9ybUNvbnRyb2xsZXIjJHNldFVudG91Y2hlZFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cyB0aGUgZm9ybSB0byBpdHMgdW50b3VjaGVkIHN0YXRlLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHRvIHJlbW92ZSB0aGUgJ25nLXRvdWNoZWQnIGNsYXNzIGFuZCBzZXQgdGhlIGZvcm0gY29udHJvbHMgdG8gdGhlaXJcbiAgICogdW50b3VjaGVkIHN0YXRlIChuZy11bnRvdWNoZWQgY2xhc3MpLlxuICAgKlxuICAgKiBTZXR0aW5nIGEgZm9ybSBjb250cm9scyBiYWNrIHRvIHRoZWlyIHVudG91Y2hlZCBzdGF0ZSBpcyBvZnRlbiB1c2VmdWwgd2hlbiBzZXR0aW5nIHRoZSBmb3JtXG4gICAqIGJhY2sgdG8gaXRzIHByaXN0aW5lIHN0YXRlLlxuICAgKi9cbiAgZm9ybS4kc2V0VW50b3VjaGVkID0gZnVuY3Rpb24oKSB7XG4gICAgZm9yRWFjaChjb250cm9scywgZnVuY3Rpb24oY29udHJvbCkge1xuICAgICAgY29udHJvbC4kc2V0VW50b3VjaGVkKCk7XG4gICAgfSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkc2V0U3VibWl0dGVkXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIHRoZSBmb3JtIHRvIGl0cyBzdWJtaXR0ZWQgc3RhdGUuXG4gICAqL1xuICBmb3JtLiRzZXRTdWJtaXR0ZWQgPSBmdW5jdGlvbigpIHtcbiAgICAkYW5pbWF0ZS5hZGRDbGFzcyhlbGVtZW50LCBTVUJNSVRURURfQ0xBU1MpO1xuICAgIGZvcm0uJHN1Ym1pdHRlZCA9IHRydWU7XG4gICAgcGFyZW50Rm9ybS4kc2V0U3VibWl0dGVkKCk7XG4gIH07XG59XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdGb3JtXG4gKiBAcmVzdHJpY3QgRUFDXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBOZXN0YWJsZSBhbGlhcyBvZiB7QGxpbmsgbmcuZGlyZWN0aXZlOmZvcm0gYGZvcm1gfSBkaXJlY3RpdmUuIEhUTUxcbiAqIGRvZXMgbm90IGFsbG93IG5lc3Rpbmcgb2YgZm9ybSBlbGVtZW50cy4gSXQgaXMgdXNlZnVsIHRvIG5lc3QgZm9ybXMsIGZvciBleGFtcGxlIGlmIHRoZSB2YWxpZGl0eSBvZiBhXG4gKiBzdWItZ3JvdXAgb2YgY29udHJvbHMgbmVlZHMgdG8gYmUgZGV0ZXJtaW5lZC5cbiAqXG4gKiBOb3RlOiB0aGUgcHVycG9zZSBvZiBgbmdGb3JtYCBpcyB0byBncm91cCBjb250cm9scyxcbiAqIGJ1dCBub3QgdG8gYmUgYSByZXBsYWNlbWVudCBmb3IgdGhlIGA8Zm9ybT5gIHRhZyB3aXRoIGFsbCBvZiBpdHMgY2FwYWJpbGl0aWVzXG4gKiAoZS5nLiBwb3N0aW5nIHRvIHRoZSBzZXJ2ZXIsIC4uLikuXG4gKlxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ0Zvcm18bmFtZSBOYW1lIG9mIHRoZSBmb3JtLiBJZiBzcGVjaWZpZWQsIHRoZSBmb3JtIGNvbnRyb2xsZXIgd2lsbCBiZSBwdWJsaXNoZWQgaW50b1xuICogICAgICAgICAgICAgICAgICAgICAgIHJlbGF0ZWQgc2NvcGUsIHVuZGVyIHRoaXMgbmFtZS5cbiAqXG4gKi9cblxuIC8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgZm9ybVxuICogQHJlc3RyaWN0IEVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERpcmVjdGl2ZSB0aGF0IGluc3RhbnRpYXRlc1xuICoge0BsaW5rIGZvcm0uRm9ybUNvbnRyb2xsZXIgRm9ybUNvbnRyb2xsZXJ9LlxuICpcbiAqIElmIHRoZSBgbmFtZWAgYXR0cmlidXRlIGlzIHNwZWNpZmllZCwgdGhlIGZvcm0gY29udHJvbGxlciBpcyBwdWJsaXNoZWQgb250byB0aGUgY3VycmVudCBzY29wZSB1bmRlclxuICogdGhpcyBuYW1lLlxuICpcbiAqICMgQWxpYXM6IHtAbGluayBuZy5kaXJlY3RpdmU6bmdGb3JtIGBuZ0Zvcm1gfVxuICpcbiAqIEluIEFuZ3VsYXIgZm9ybXMgY2FuIGJlIG5lc3RlZC4gVGhpcyBtZWFucyB0aGF0IHRoZSBvdXRlciBmb3JtIGlzIHZhbGlkIHdoZW4gYWxsIG9mIHRoZSBjaGlsZFxuICogZm9ybXMgYXJlIHZhbGlkIGFzIHdlbGwuIEhvd2V2ZXIsIGJyb3dzZXJzIGRvIG5vdCBhbGxvdyBuZXN0aW5nIG9mIGA8Zm9ybT5gIGVsZW1lbnRzLCBzb1xuICogQW5ndWxhciBwcm92aWRlcyB0aGUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0Zvcm0gYG5nRm9ybWB9IGRpcmVjdGl2ZSB3aGljaCBiZWhhdmVzIGlkZW50aWNhbGx5IHRvXG4gKiBgPGZvcm0+YCBidXQgY2FuIGJlIG5lc3RlZC4gIFRoaXMgYWxsb3dzIHlvdSB0byBoYXZlIG5lc3RlZCBmb3Jtcywgd2hpY2ggaXMgdmVyeSB1c2VmdWwgd2hlblxuICogdXNpbmcgQW5ndWxhciB2YWxpZGF0aW9uIGRpcmVjdGl2ZXMgaW4gZm9ybXMgdGhhdCBhcmUgZHluYW1pY2FsbHkgZ2VuZXJhdGVkIHVzaW5nIHRoZVxuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBgbmdSZXBlYXRgfSBkaXJlY3RpdmUuIFNpbmNlIHlvdSBjYW5ub3QgZHluYW1pY2FsbHkgZ2VuZXJhdGUgdGhlIGBuYW1lYFxuICogYXR0cmlidXRlIG9mIGlucHV0IGVsZW1lbnRzIHVzaW5nIGludGVycG9sYXRpb24sIHlvdSBoYXZlIHRvIHdyYXAgZWFjaCBzZXQgb2YgcmVwZWF0ZWQgaW5wdXRzIGluIGFuXG4gKiBgbmdGb3JtYCBkaXJlY3RpdmUgYW5kIG5lc3QgdGhlc2UgaW4gYW4gb3V0ZXIgYGZvcm1gIGVsZW1lbnQuXG4gKlxuICpcbiAqICMgQ1NTIGNsYXNzZXNcbiAqICAtIGBuZy12YWxpZGAgaXMgc2V0IGlmIHRoZSBmb3JtIGlzIHZhbGlkLlxuICogIC0gYG5nLWludmFsaWRgIGlzIHNldCBpZiB0aGUgZm9ybSBpcyBpbnZhbGlkLlxuICogIC0gYG5nLXByaXN0aW5lYCBpcyBzZXQgaWYgdGhlIGZvcm0gaXMgcHJpc3RpbmUuXG4gKiAgLSBgbmctZGlydHlgIGlzIHNldCBpZiB0aGUgZm9ybSBpcyBkaXJ0eS5cbiAqICAtIGBuZy1zdWJtaXR0ZWRgIGlzIHNldCBpZiB0aGUgZm9ybSB3YXMgc3VibWl0dGVkLlxuICpcbiAqIEtlZXAgaW4gbWluZCB0aGF0IG5nQW5pbWF0ZSBjYW4gZGV0ZWN0IGVhY2ggb2YgdGhlc2UgY2xhc3NlcyB3aGVuIGFkZGVkIGFuZCByZW1vdmVkLlxuICpcbiAqXG4gKiAjIFN1Ym1pdHRpbmcgYSBmb3JtIGFuZCBwcmV2ZW50aW5nIHRoZSBkZWZhdWx0IGFjdGlvblxuICpcbiAqIFNpbmNlIHRoZSByb2xlIG9mIGZvcm1zIGluIGNsaWVudC1zaWRlIEFuZ3VsYXIgYXBwbGljYXRpb25zIGlzIGRpZmZlcmVudCB0aGFuIGluIGNsYXNzaWNhbFxuICogcm91bmR0cmlwIGFwcHMsIGl0IGlzIGRlc2lyYWJsZSBmb3IgdGhlIGJyb3dzZXIgbm90IHRvIHRyYW5zbGF0ZSB0aGUgZm9ybSBzdWJtaXNzaW9uIGludG8gYSBmdWxsXG4gKiBwYWdlIHJlbG9hZCB0aGF0IHNlbmRzIHRoZSBkYXRhIHRvIHRoZSBzZXJ2ZXIuIEluc3RlYWQgc29tZSBqYXZhc2NyaXB0IGxvZ2ljIHNob3VsZCBiZSB0cmlnZ2VyZWRcbiAqIHRvIGhhbmRsZSB0aGUgZm9ybSBzdWJtaXNzaW9uIGluIGFuIGFwcGxpY2F0aW9uLXNwZWNpZmljIHdheS5cbiAqXG4gKiBGb3IgdGhpcyByZWFzb24sIEFuZ3VsYXIgcHJldmVudHMgdGhlIGRlZmF1bHQgYWN0aW9uIChmb3JtIHN1Ym1pc3Npb24gdG8gdGhlIHNlcnZlcikgdW5sZXNzIHRoZVxuICogYDxmb3JtPmAgZWxlbWVudCBoYXMgYW4gYGFjdGlvbmAgYXR0cmlidXRlIHNwZWNpZmllZC5cbiAqXG4gKiBZb3UgY2FuIHVzZSBvbmUgb2YgdGhlIGZvbGxvd2luZyB0d28gd2F5cyB0byBzcGVjaWZ5IHdoYXQgamF2YXNjcmlwdCBtZXRob2Qgc2hvdWxkIGJlIGNhbGxlZCB3aGVuXG4gKiBhIGZvcm0gaXMgc3VibWl0dGVkOlxuICpcbiAqIC0ge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1N1Ym1pdCBuZ1N1Ym1pdH0gZGlyZWN0aXZlIG9uIHRoZSBmb3JtIGVsZW1lbnRcbiAqIC0ge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsaWNrIG5nQ2xpY2t9IGRpcmVjdGl2ZSBvbiB0aGUgZmlyc3RcbiAgKiAgYnV0dG9uIG9yIGlucHV0IGZpZWxkIG9mIHR5cGUgc3VibWl0IChpbnB1dFt0eXBlPXN1Ym1pdF0pXG4gKlxuICogVG8gcHJldmVudCBkb3VibGUgZXhlY3V0aW9uIG9mIHRoZSBoYW5kbGVyLCB1c2Ugb25seSBvbmUgb2YgdGhlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdTdWJtaXQgbmdTdWJtaXR9XG4gKiBvciB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xpY2sgbmdDbGlja30gZGlyZWN0aXZlcy5cbiAqIFRoaXMgaXMgYmVjYXVzZSBvZiB0aGUgZm9sbG93aW5nIGZvcm0gc3VibWlzc2lvbiBydWxlcyBpbiB0aGUgSFRNTCBzcGVjaWZpY2F0aW9uOlxuICpcbiAqIC0gSWYgYSBmb3JtIGhhcyBvbmx5IG9uZSBpbnB1dCBmaWVsZCB0aGVuIGhpdHRpbmcgZW50ZXIgaW4gdGhpcyBmaWVsZCB0cmlnZ2VycyBmb3JtIHN1Ym1pdFxuICogKGBuZ1N1Ym1pdGApXG4gKiAtIGlmIGEgZm9ybSBoYXMgMisgaW5wdXQgZmllbGRzIGFuZCBubyBidXR0b25zIG9yIGlucHV0W3R5cGU9c3VibWl0XSB0aGVuIGhpdHRpbmcgZW50ZXJcbiAqIGRvZXNuJ3QgdHJpZ2dlciBzdWJtaXRcbiAqIC0gaWYgYSBmb3JtIGhhcyBvbmUgb3IgbW9yZSBpbnB1dCBmaWVsZHMgYW5kIG9uZSBvciBtb3JlIGJ1dHRvbnMgb3IgaW5wdXRbdHlwZT1zdWJtaXRdIHRoZW5cbiAqIGhpdHRpbmcgZW50ZXIgaW4gYW55IG9mIHRoZSBpbnB1dCBmaWVsZHMgd2lsbCB0cmlnZ2VyIHRoZSBjbGljayBoYW5kbGVyIG9uIHRoZSAqZmlyc3QqIGJ1dHRvbiBvclxuICogaW5wdXRbdHlwZT1zdWJtaXRdIChgbmdDbGlja2ApICphbmQqIGEgc3VibWl0IGhhbmRsZXIgb24gdGhlIGVuY2xvc2luZyBmb3JtIChgbmdTdWJtaXRgKVxuICpcbiAqIEFueSBwZW5kaW5nIGBuZ01vZGVsT3B0aW9uc2AgY2hhbmdlcyB3aWxsIHRha2UgcGxhY2UgaW1tZWRpYXRlbHkgd2hlbiBhbiBlbmNsb3NpbmcgZm9ybSBpc1xuICogc3VibWl0dGVkLiBOb3RlIHRoYXQgYG5nQ2xpY2tgIGV2ZW50cyB3aWxsIG9jY3VyIGJlZm9yZSB0aGUgbW9kZWwgaXMgdXBkYXRlZC4gVXNlIGBuZ1N1Ym1pdGBcbiAqIHRvIGhhdmUgYWNjZXNzIHRvIHRoZSB1cGRhdGVkIG1vZGVsLlxuICpcbiAqICMjIEFuaW1hdGlvbiBIb29rc1xuICpcbiAqIEFuaW1hdGlvbnMgaW4gbmdGb3JtIGFyZSB0cmlnZ2VyZWQgd2hlbiBhbnkgb2YgdGhlIGFzc29jaWF0ZWQgQ1NTIGNsYXNzZXMgYXJlIGFkZGVkIGFuZCByZW1vdmVkLlxuICogVGhlc2UgY2xhc3NlcyBhcmU6IGAubmctcHJpc3RpbmVgLCBgLm5nLWRpcnR5YCwgYC5uZy1pbnZhbGlkYCBhbmQgYC5uZy12YWxpZGAgYXMgd2VsbCBhcyBhbnlcbiAqIG90aGVyIHZhbGlkYXRpb25zIHRoYXQgYXJlIHBlcmZvcm1lZCB3aXRoaW4gdGhlIGZvcm0uIEFuaW1hdGlvbnMgaW4gbmdGb3JtIGFyZSBzaW1pbGFyIHRvIGhvd1xuICogdGhleSB3b3JrIGluIG5nQ2xhc3MgYW5kIGFuaW1hdGlvbnMgY2FuIGJlIGhvb2tlZCBpbnRvIHVzaW5nIENTUyB0cmFuc2l0aW9ucywga2V5ZnJhbWVzIGFzIHdlbGxcbiAqIGFzIEpTIGFuaW1hdGlvbnMuXG4gKlxuICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGEgc2ltcGxlIHdheSB0byB1dGlsaXplIENTUyB0cmFuc2l0aW9ucyB0byBzdHlsZSBhIGZvcm0gZWxlbWVudFxuICogdGhhdCBoYXMgYmVlbiByZW5kZXJlZCBhcyBpbnZhbGlkIGFmdGVyIGl0IGhhcyBiZWVuIHZhbGlkYXRlZDpcbiAqXG4gKiA8cHJlPlxuICogLy9iZSBzdXJlIHRvIGluY2x1ZGUgbmdBbmltYXRlIGFzIGEgbW9kdWxlIHRvIGhvb2sgaW50byBtb3JlXG4gKiAvL2FkdmFuY2VkIGFuaW1hdGlvbnNcbiAqIC5teS1mb3JtIHtcbiAqICAgdHJhbnNpdGlvbjowLjVzIGxpbmVhciBhbGw7XG4gKiAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICogfVxuICogLm15LWZvcm0ubmctaW52YWxpZCB7XG4gKiAgIGJhY2tncm91bmQ6IHJlZDtcbiAqICAgY29sb3I6d2hpdGU7XG4gKiB9XG4gKiA8L3ByZT5cbiAqXG4gKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiIGZpeEJhc2U9XCJ0cnVlXCIgbW9kdWxlPVwiZm9ybUV4YW1wbGVcIj5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdmb3JtRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAuY29udHJvbGxlcignRm9ybUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICRzY29wZS51c2VyVHlwZSA9ICdndWVzdCc7XG4gICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8c3R5bGU+XG4gICAgICAgIC5teS1mb3JtIHtcbiAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246YWxsIGxpbmVhciAwLjVzO1xuICAgICAgICAgIHRyYW5zaXRpb246YWxsIGxpbmVhciAwLjVzO1xuICAgICAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICAgICAgICB9XG4gICAgICAgIC5teS1mb3JtLm5nLWludmFsaWQge1xuICAgICAgICAgIGJhY2tncm91bmQ6IHJlZDtcbiAgICAgICAgfVxuICAgICAgIDwvc3R5bGU+XG4gICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJGb3JtQ29udHJvbGxlclwiIGNsYXNzPVwibXktZm9ybVwiPlxuICAgICAgICAgdXNlclR5cGU6IDxpbnB1dCBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cInVzZXJUeXBlXCIgcmVxdWlyZWQ+XG4gICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWRcIj5SZXF1aXJlZCE8L3NwYW4+PGJyPlxuICAgICAgICAgPHR0PnVzZXJUeXBlID0ge3t1c2VyVHlwZX19PC90dD48YnI+XG4gICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC90dD48YnI+XG4gICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnI+XG4gICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnI+XG4gICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxicj5cbiAgICAgICAgPC9mb3JtPlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgdXNlclR5cGUgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ3VzZXJUeXBlJykpO1xuICAgICAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcblxuICAgICAgICAgIGV4cGVjdCh1c2VyVHlwZS5nZXRUZXh0KCkpLnRvQ29udGFpbignZ3Vlc3QnKTtcbiAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHVzZXJUeXBlID0gZWxlbWVudChieS5iaW5kaW5nKCd1c2VyVHlwZScpKTtcbiAgICAgICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG4gICAgICAgICAgdmFyIHVzZXJJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3VzZXJUeXBlJykpO1xuXG4gICAgICAgICAgdXNlcklucHV0LmNsZWFyKCk7XG4gICAgICAgICAgdXNlcklucHV0LnNlbmRLZXlzKCcnKTtcblxuICAgICAgICAgIGV4cGVjdCh1c2VyVHlwZS5nZXRUZXh0KCkpLnRvRXF1YWwoJ3VzZXJUeXBlID0nKTtcbiAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgTmFtZSBvZiB0aGUgZm9ybS4gSWYgc3BlY2lmaWVkLCB0aGUgZm9ybSBjb250cm9sbGVyIHdpbGwgYmUgcHVibGlzaGVkIGludG9cbiAqICAgICAgICAgICAgICAgICAgICAgICByZWxhdGVkIHNjb3BlLCB1bmRlciB0aGlzIG5hbWUuXG4gKi9cbnZhciBmb3JtRGlyZWN0aXZlRmFjdG9yeSA9IGZ1bmN0aW9uKGlzTmdGb3JtKSB7XG4gIHJldHVybiBbJyR0aW1lb3V0JywgZnVuY3Rpb24oJHRpbWVvdXQpIHtcbiAgICB2YXIgZm9ybURpcmVjdGl2ZSA9IHtcbiAgICAgIG5hbWU6ICdmb3JtJyxcbiAgICAgIHJlc3RyaWN0OiBpc05nRm9ybSA/ICdFQUMnIDogJ0UnLFxuICAgICAgY29udHJvbGxlcjogRm9ybUNvbnRyb2xsZXIsXG4gICAgICBjb21waWxlOiBmdW5jdGlvbiBuZ0Zvcm1Db21waWxlKGZvcm1FbGVtZW50KSB7XG4gICAgICAgIC8vIFNldHVwIGluaXRpYWwgc3RhdGUgb2YgdGhlIGNvbnRyb2xcbiAgICAgICAgZm9ybUVsZW1lbnQuYWRkQ2xhc3MoUFJJU1RJTkVfQ0xBU1MpLmFkZENsYXNzKFZBTElEX0NMQVNTKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHByZTogZnVuY3Rpb24gbmdGb3JtUHJlTGluayhzY29wZSwgZm9ybUVsZW1lbnQsIGF0dHIsIGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgIC8vIGlmIGBhY3Rpb25gIGF0dHIgaXMgbm90IHByZXNlbnQgb24gdGhlIGZvcm0sIHByZXZlbnQgdGhlIGRlZmF1bHQgYWN0aW9uIChzdWJtaXNzaW9uKVxuICAgICAgICAgICAgaWYgKCEoJ2FjdGlvbicgaW4gYXR0cikpIHtcbiAgICAgICAgICAgICAgLy8gd2UgY2FuJ3QgdXNlIGpxIGV2ZW50cyBiZWNhdXNlIGlmIGEgZm9ybSBpcyBkZXN0cm95ZWQgZHVyaW5nIHN1Ym1pc3Npb24gdGhlIGRlZmF1bHRcbiAgICAgICAgICAgICAgLy8gYWN0aW9uIGlzIG5vdCBwcmV2ZW50ZWQuIHNlZSAjMTIzOFxuICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAvLyBJRSA5IGlzIG5vdCBhZmZlY3RlZCBiZWNhdXNlIGl0IGRvZXNuJ3QgZmlyZSBhIHN1Ym1pdCBldmVudCBhbmQgdHJ5IHRvIGRvIGEgZnVsbFxuICAgICAgICAgICAgICAvLyBwYWdlIHJlbG9hZCBpZiB0aGUgZm9ybSB3YXMgZGVzdHJveWVkIGJ5IHN1Ym1pc3Npb24gb2YgdGhlIGZvcm0gdmlhIGEgY2xpY2sgaGFuZGxlclxuICAgICAgICAgICAgICAvLyBvbiBhIGJ1dHRvbiBpbiB0aGUgZm9ybS4gTG9va3MgbGlrZSBhbiBJRTkgc3BlY2lmaWMgYnVnLlxuICAgICAgICAgICAgICB2YXIgaGFuZGxlRm9ybVN1Ym1pc3Npb24gPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuJGNvbW1pdFZpZXdWYWx1ZSgpO1xuICAgICAgICAgICAgICAgICAgY29udHJvbGxlci4kc2V0U3VibWl0dGVkKCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXJGbihmb3JtRWxlbWVudFswXSwgJ3N1Ym1pdCcsIGhhbmRsZUZvcm1TdWJtaXNzaW9uKTtcblxuICAgICAgICAgICAgICAvLyB1bnJlZ2lzdGVyIHRoZSBwcmV2ZW50RGVmYXVsdCBsaXN0ZW5lciBzbyB0aGF0IHdlIGRvbid0IG5vdCBsZWFrIG1lbW9yeSBidXQgaW4gYVxuICAgICAgICAgICAgICAvLyB3YXkgdGhhdCB3aWxsIGFjaGlldmUgdGhlIHByZXZlbnRpb24gb2YgdGhlIGRlZmF1bHQgYWN0aW9uLlxuICAgICAgICAgICAgICBmb3JtRWxlbWVudC5vbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJGbihmb3JtRWxlbWVudFswXSwgJ3N1Ym1pdCcsIGhhbmRsZUZvcm1TdWJtaXNzaW9uKTtcbiAgICAgICAgICAgICAgICB9LCAwLCBmYWxzZSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcGFyZW50Rm9ybUN0cmwgPSBjb250cm9sbGVyLiQkcGFyZW50Rm9ybSxcbiAgICAgICAgICAgICAgICBhbGlhcyA9IGNvbnRyb2xsZXIuJG5hbWU7XG5cbiAgICAgICAgICAgIGlmIChhbGlhcykge1xuICAgICAgICAgICAgICBzZXR0ZXIoc2NvcGUsIG51bGwsIGFsaWFzLCBjb250cm9sbGVyLCBhbGlhcyk7XG4gICAgICAgICAgICAgIGF0dHIuJG9ic2VydmUoYXR0ci5uYW1lID8gJ25hbWUnIDogJ25nRm9ybScsIGZ1bmN0aW9uKG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFsaWFzID09PSBuZXdWYWx1ZSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHNldHRlcihzY29wZSwgbnVsbCwgYWxpYXMsIHVuZGVmaW5lZCwgYWxpYXMpO1xuICAgICAgICAgICAgICAgIGFsaWFzID0gbmV3VmFsdWU7XG4gICAgICAgICAgICAgICAgc2V0dGVyKHNjb3BlLCBudWxsLCBhbGlhcywgY29udHJvbGxlciwgYWxpYXMpO1xuICAgICAgICAgICAgICAgIHBhcmVudEZvcm1DdHJsLiQkcmVuYW1lQ29udHJvbChjb250cm9sbGVyLCBhbGlhcyk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9ybUVsZW1lbnQub24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHBhcmVudEZvcm1DdHJsLiRyZW1vdmVDb250cm9sKGNvbnRyb2xsZXIpO1xuICAgICAgICAgICAgICBpZiAoYWxpYXMpIHtcbiAgICAgICAgICAgICAgICBzZXR0ZXIoc2NvcGUsIG51bGwsIGFsaWFzLCB1bmRlZmluZWQsIGFsaWFzKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBleHRlbmQoY29udHJvbGxlciwgbnVsbEZvcm1DdHJsKTsgLy9zdG9wIHByb3BhZ2F0aW5nIGNoaWxkIGRlc3RydWN0aW9uIGhhbmRsZXJzIHVwd2FyZHNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIGZvcm1EaXJlY3RpdmU7XG4gIH1dO1xufTtcblxudmFyIGZvcm1EaXJlY3RpdmUgPSBmb3JtRGlyZWN0aXZlRmFjdG9yeSgpO1xudmFyIG5nRm9ybURpcmVjdGl2ZSA9IGZvcm1EaXJlY3RpdmVGYWN0b3J5KHRydWUpO1xuXG4vKiBnbG9iYWwgVkFMSURfQ0xBU1M6IGZhbHNlLFxuICBJTlZBTElEX0NMQVNTOiBmYWxzZSxcbiAgUFJJU1RJTkVfQ0xBU1M6IGZhbHNlLFxuICBESVJUWV9DTEFTUzogZmFsc2UsXG4gIFVOVE9VQ0hFRF9DTEFTUzogZmFsc2UsXG4gIFRPVUNIRURfQ0xBU1M6IGZhbHNlLFxuICAkbmdNb2RlbE1pbkVycjogZmFsc2UsXG4qL1xuXG4vLyBSZWdleCBjb2RlIGlzIG9idGFpbmVkIGZyb20gU086IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzMxNDMwNzAvamF2YXNjcmlwdC1yZWdleC1pc28tZGF0ZXRpbWUjYW5zd2VyLTMxNDMyMzFcbnZhciBJU09fREFURV9SRUdFWFAgPSAvXFxkezR9LVswMV1cXGQtWzAtM11cXGRUWzAtMl1cXGQ6WzAtNV1cXGQ6WzAtNV1cXGRcXC5cXGQrKFsrLV1bMC0yXVxcZDpbMC01XVxcZHxaKS87XG52YXIgVVJMX1JFR0VYUCA9IC9eKGZ0cHxodHRwfGh0dHBzKTpcXC9cXC8oXFx3Kzp7MCwxfVxcdypAKT8oXFxTKykoOlswLTldKyk/KFxcL3xcXC8oW1xcdyMhOi4/Kz0mJUAhXFwtXFwvXSkpPyQvO1xudmFyIEVNQUlMX1JFR0VYUCA9IC9eW2EtejAtOSEjJCUmJyorXFwvPT9eX2B7fH1+Li1dK0BbYS16MC05XShbYS16MC05LV0qW2EtejAtOV0pPyhcXC5bYS16MC05XShbYS16MC05LV0qW2EtejAtOV0pPykqJC9pO1xudmFyIE5VTUJFUl9SRUdFWFAgPSAvXlxccyooXFwtfFxcKyk/KFxcZCt8KFxcZCooXFwuXFxkKikpKVxccyokLztcbnZhciBEQVRFX1JFR0VYUCA9IC9eKFxcZHs0fSktKFxcZHsyfSktKFxcZHsyfSkkLztcbnZhciBEQVRFVElNRUxPQ0FMX1JFR0VYUCA9IC9eKFxcZHs0fSktKFxcZFxcZCktKFxcZFxcZClUKFxcZFxcZCk6KFxcZFxcZCkoPzo6KFxcZFxcZCkoXFwuXFxkezEsM30pPyk/JC87XG52YXIgV0VFS19SRUdFWFAgPSAvXihcXGR7NH0pLVcoXFxkXFxkKSQvO1xudmFyIE1PTlRIX1JFR0VYUCA9IC9eKFxcZHs0fSktKFxcZFxcZCkkLztcbnZhciBUSU1FX1JFR0VYUCA9IC9eKFxcZFxcZCk6KFxcZFxcZCkoPzo6KFxcZFxcZCkoXFwuXFxkezEsM30pPyk/JC87XG5cbnZhciBpbnB1dFR5cGUgPSB7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBpbnB1dFxuICAgKiBAbmFtZSBpbnB1dFt0ZXh0XVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU3RhbmRhcmQgSFRNTCB0ZXh0IGlucHV0IHdpdGggYW5ndWxhciBkYXRhIGJpbmRpbmcsIGluaGVyaXRlZCBieSBtb3N0IG9mIHRoZSBgaW5wdXRgIGVsZW1lbnRzLlxuICAgKlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNaW5sZW5ndGggU2V0cyBgbWlubGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgc2hvcnRlciB0aGFuXG4gICAqICAgIG1pbmxlbmd0aC5cbiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01heGxlbmd0aCBTZXRzIGBtYXhsZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBsb25nZXIgdGhhblxuICAgKiAgICBtYXhsZW5ndGguIFNldHRpbmcgdGhlIGF0dHJpYnV0ZSB0byBhIG5lZ2F0aXZlIG9yIG5vbi1udW1lcmljIHZhbHVlLCBhbGxvd3MgdmlldyB2YWx1ZXMgb2ZcbiAgICogICAgYW55IGxlbmd0aC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBwYXR0ZXJuIFNpbWlsYXIgdG8gYG5nUGF0dGVybmAgZXhjZXB0IHRoYXQgdGhlIGF0dHJpYnV0ZSB2YWx1ZSBpcyB0aGUgYWN0dWFsIHN0cmluZ1xuICAgKiAgICB0aGF0IGNvbnRhaW5zIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gYm9keSB0aGF0IHdpbGwgYmUgY29udmVydGVkIHRvIGEgcmVndWxhciBleHByZXNzaW9uXG4gICAqICAgIGFzIGluIHRoZSBuZ1BhdHRlcm4gZGlyZWN0aXZlLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUGF0dGVybiBTZXRzIGBwYXR0ZXJuYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgbmdNb2RlbCB2YWx1ZSBkb2VzIG5vdCBtYXRjaFxuICAgKiAgICBhIFJlZ0V4cCBmb3VuZCBieSBldmFsdWF0aW5nIHRoZSBBbmd1bGFyIGV4cHJlc3Npb24gZ2l2ZW4gaW4gdGhlIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICogICAgSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgUmVnRXhwIG9iamVjdCB0aGVuIHRoaXMgaXMgdXNlZCBkaXJlY3RseS5cbiAgICogICAgSWYgdGhlIGV4cHJlc3Npb24gaXMgYSBzdHJpbmcgdGhlbiBpdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIFJlZ0V4cCBhZnRlciB3cmFwcGluZyBpdCBpbiBgXmAgYW5kIGAkYFxuICAgKiAgICBjaGFyYWN0ZXJzLiBGb3IgaW5zdGFuY2UsIGBcImFiY1wiYCB3aWxsIGJlIGNvbnZlcnRlZCB0byBgbmV3IFJlZ0V4cCgnXmFiYyQnKWAuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBbbmdUcmltPXRydWVdIElmIHNldCB0byBmYWxzZSBBbmd1bGFyIHdpbGwgbm90IGF1dG9tYXRpY2FsbHkgdHJpbSB0aGUgaW5wdXQuXG4gICAqICAgIFRoaXMgcGFyYW1ldGVyIGlzIGlnbm9yZWQgZm9yIGlucHV0W3R5cGU9cGFzc3dvcmRdIGNvbnRyb2xzLCB3aGljaCB3aWxsIG5ldmVyIHRyaW0gdGhlXG4gICAqICAgIGlucHV0LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICAgPGV4YW1wbGUgbmFtZT1cInRleHQtaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwidGV4dElucHV0RXhhbXBsZVwiPlxuICAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3RleHRJbnB1dEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLmV4YW1wbGUgPSB7XG4gICAgICAgICAgICAgICAgIHRleHQ6ICdndWVzdCcsXG4gICAgICAgICAgICAgICAgIHdvcmQ6IC9eXFxzKlxcdypcXHMqJC9cbiAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgfV0pO1xuICAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgIFNpbmdsZSB3b3JkOiA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cImV4YW1wbGUudGV4dFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmctcGF0dGVybj1cImV4YW1wbGUud29yZFwiIHJlcXVpcmVkIG5nLXRyaW09XCJmYWxzZVwiPlxuICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWRcIj5cbiAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5wYXR0ZXJuXCI+XG4gICAgICAgICAgICAgU2luZ2xlIHdvcmQgb25seSE8L3NwYW4+XG5cbiAgICAgICAgICAgPHR0PnRleHQgPSB7e2V4YW1wbGUudGV4dH19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+XG4gICAgICAgICAgPC9mb3JtPlxuICAgICAgICA8L2ZpbGU+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgICB2YXIgdGV4dCA9IGVsZW1lbnQoYnkuYmluZGluZygnZXhhbXBsZS50ZXh0JykpO1xuICAgICAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcbiAgICAgICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdleGFtcGxlLnRleHQnKSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdCh0ZXh0LmdldFRleHQoKSkudG9Db250YWluKCdndWVzdCcpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnJyk7XG5cbiAgICAgICAgICAgIGV4cGVjdCh0ZXh0LmdldFRleHQoKSkudG9FcXVhbCgndGV4dCA9Jyk7XG4gICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgbXVsdGkgd29yZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICAgIGlucHV0LnNlbmRLZXlzKCdoZWxsbyB3b3JsZCcpO1xuXG4gICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIDwvZmlsZT5cbiAgICAgIDwvZXhhbXBsZT5cbiAgICovXG4gICd0ZXh0JzogdGV4dElucHV0VHlwZSxcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBpbnB1dFxuICAgICAqIEBuYW1lIGlucHV0W2RhdGVdXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBJbnB1dCB3aXRoIGRhdGUgdmFsaWRhdGlvbiBhbmQgdHJhbnNmb3JtYXRpb24uIEluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHlldCBzdXBwb3J0XG4gICAgICogdGhlIEhUTUw1IGRhdGUgaW5wdXQsIGEgdGV4dCBlbGVtZW50IHdpbGwgYmUgdXNlZC4gSW4gdGhhdCBjYXNlLCB0ZXh0IG11c3QgYmUgZW50ZXJlZCBpbiBhIHZhbGlkIElTTy04NjAxXG4gICAgICogZGF0ZSBmb3JtYXQgKHl5eXktTU0tZGQpLCBmb3IgZXhhbXBsZTogYDIwMDktMDEtMDZgLiBTaW5jZSBtYW55XG4gICAgICogbW9kZXJuIGJyb3dzZXJzIGRvIG5vdCB5ZXQgc3VwcG9ydCB0aGlzIGlucHV0IHR5cGUsIGl0IGlzIGltcG9ydGFudCB0byBwcm92aWRlIGN1ZXMgdG8gdXNlcnMgb24gdGhlXG4gICAgICogZXhwZWN0ZWQgaW5wdXQgZm9ybWF0IHZpYSBhIHBsYWNlaG9sZGVyIG9yIGxhYmVsLlxuICAgICAqXG4gICAgICogVGhlIG1vZGVsIG11c3QgYWx3YXlzIGJlIGEgRGF0ZSBvYmplY3QsIG90aGVyd2lzZSBBbmd1bGFyIHdpbGwgdGhyb3cgYW4gZXJyb3IuXG4gICAgICogSW52YWxpZCBgRGF0ZWAgb2JqZWN0cyAoZGF0ZXMgd2hvc2UgYGdldFRpbWUoKWAgaXMgYE5hTmApIHdpbGwgYmUgcmVuZGVyZWQgYXMgYW4gZW1wdHkgc3RyaW5nLlxuICAgICAqXG4gICAgICogVGhlIHRpbWV6b25lIHRvIGJlIHVzZWQgdG8gcmVhZC93cml0ZSB0aGUgYERhdGVgIGluc3RhbmNlIGluIHRoZSBtb2RlbCBjYW4gYmUgZGVmaW5lZCB1c2luZ1xuICAgICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdNb2RlbE9wdGlvbnMgbmdNb2RlbE9wdGlvbnN9LiBCeSBkZWZhdWx0LCB0aGlzIGlzIHRoZSB0aW1lem9uZSBvZiB0aGUgYnJvd3Nlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBtaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgbGVzcyB0aGFuIGBtaW5gLiBUaGlzIG11c3QgYmUgYVxuICAgICAqIHZhbGlkIElTTyBkYXRlIHN0cmluZyAoeXl5eS1NTS1kZCkuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBtYXggU2V0cyB0aGUgYG1heGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgZ3JlYXRlciB0aGFuIGBtYXhgLiBUaGlzIG11c3QgYmVcbiAgICAgKiBhIHZhbGlkIElTTyBkYXRlIHN0cmluZyAoeXl5eS1NTS1kZCkuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xuICAgICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgIDxleGFtcGxlIG5hbWU9XCJkYXRlLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cImRhdGVJbnB1dEV4YW1wbGVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdkYXRlSW5wdXRFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAuY29udHJvbGxlcignRGF0ZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAkc2NvcGUuZXhhbXBsZSA9IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogbmV3IERhdGUoMjAxMywgOSwgMjIpXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJEYXRlQ29udHJvbGxlciBhcyBkYXRlQ3RybFwiPlxuICAgICAgICAgIFBpY2sgYSBkYXRlIGluIDIwMTM6XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJkYXRlXCIgaWQ9XCJleGFtcGxlSW5wdXRcIiBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cImV4YW1wbGUudmFsdWVcIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cInl5eXktTU0tZGRcIiBtaW49XCIyMDEzLTAxLTAxXCIgbWF4PVwiMjAxMy0xMi0zMVwiIHJlcXVpcmVkIC8+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IuZGF0ZVwiPlxuICAgICAgICAgICAgICBOb3QgYSB2YWxpZCBkYXRlITwvc3Bhbj5cbiAgICAgICAgICAgPHR0PnZhbHVlID0ge3tleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJ5eXl5LU1NLWRkXCJ9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPlxuICAgICAgIDwvZm9ybT5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQoYnkuYmluZGluZygnZXhhbXBsZS52YWx1ZSB8IGRhdGU6IFwieXl5eS1NTS1kZFwiJykpO1xuICAgICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG4gICAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ2V4YW1wbGUudmFsdWUnKSk7XG5cbiAgICAgICAgLy8gY3VycmVudGx5IHByb3RyYWN0b3Ivd2ViZHJpdmVyIGRvZXMgbm90IHN1cHBvcnRcbiAgICAgICAgLy8gc2VuZGluZyBrZXlzIHRvIGFsbCBrbm93biBIVE1MNSBpbnB1dCBjb250cm9sc1xuICAgICAgICAvLyBmb3IgdmFyaW91cyBicm93c2VycyAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzU2MikuXG4gICAgICAgIGZ1bmN0aW9uIHNldElucHV0KHZhbCkge1xuICAgICAgICAgIC8vIHNldCB0aGUgdmFsdWUgb2YgdGhlIGVsZW1lbnQgYW5kIGZvcmNlIHZhbGlkYXRpb24uXG4gICAgICAgICAgdmFyIHNjciA9IFwidmFyIGlwdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdleGFtcGxlSW5wdXQnKTsgXCIgK1xuICAgICAgICAgIFwiaXB0LnZhbHVlID0gJ1wiICsgdmFsICsgXCInO1wiICtcbiAgICAgICAgICBcImFuZ3VsYXIuZWxlbWVudChpcHQpLnNjb3BlKCkuJGFwcGx5KGZ1bmN0aW9uKHMpIHsgcy5teUZvcm1baXB0Lm5hbWVdLiRzZXRWaWV3VmFsdWUoJ1wiICsgdmFsICsgXCInKTsgfSk7XCI7XG4gICAgICAgICAgYnJvd3Nlci5leGVjdXRlU2NyaXB0KHNjcik7XG4gICAgICAgIH1cblxuICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzIwMTMtMTAtMjInKTtcbiAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSB0cnVlJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNldElucHV0KCcnKTtcbiAgICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0VxdWFsKCd2YWx1ZSA9Jyk7XG4gICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG92ZXIgbWF4JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2V0SW5wdXQoJzIwMTUtMDEtMDEnKTtcbiAgICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJycpO1xuICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IGZhbHNlJyk7XG4gICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICAgIDwvZXhhbXBsZT5cbiAgICAgKi9cbiAgJ2RhdGUnOiBjcmVhdGVEYXRlSW5wdXRUeXBlKCdkYXRlJywgREFURV9SRUdFWFAsXG4gICAgICAgICBjcmVhdGVEYXRlUGFyc2VyKERBVEVfUkVHRVhQLCBbJ3l5eXknLCAnTU0nLCAnZGQnXSksXG4gICAgICAgICAneXl5eS1NTS1kZCcpLFxuXG4gICAvKipcbiAgICAqIEBuZ2RvYyBpbnB1dFxuICAgICogQG5hbWUgaW5wdXRbZGF0ZXRpbWUtbG9jYWxdXG4gICAgKlxuICAgICogQGRlc2NyaXB0aW9uXG4gICAgKiBJbnB1dCB3aXRoIGRhdGV0aW1lIHZhbGlkYXRpb24gYW5kIHRyYW5zZm9ybWF0aW9uLiBJbiBicm93c2VycyB0aGF0IGRvIG5vdCB5ZXQgc3VwcG9ydFxuICAgICogdGhlIEhUTUw1IGRhdGUgaW5wdXQsIGEgdGV4dCBlbGVtZW50IHdpbGwgYmUgdXNlZC4gSW4gdGhhdCBjYXNlLCB0aGUgdGV4dCBtdXN0IGJlIGVudGVyZWQgaW4gYSB2YWxpZCBJU08tODYwMVxuICAgICogbG9jYWwgZGF0ZXRpbWUgZm9ybWF0ICh5eXl5LU1NLWRkVEhIOm1tOnNzKSwgZm9yIGV4YW1wbGU6IGAyMDEwLTEyLTI4VDE0OjU3OjAwYC5cbiAgICAqXG4gICAgKiBUaGUgbW9kZWwgbXVzdCBhbHdheXMgYmUgYSBEYXRlIG9iamVjdCwgb3RoZXJ3aXNlIEFuZ3VsYXIgd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAgICAqIEludmFsaWQgYERhdGVgIG9iamVjdHMgKGRhdGVzIHdob3NlIGBnZXRUaW1lKClgIGlzIGBOYU5gKSB3aWxsIGJlIHJlbmRlcmVkIGFzIGFuIGVtcHR5IHN0cmluZy5cbiAgICAqXG4gICAgKiBUaGUgdGltZXpvbmUgdG8gYmUgdXNlZCB0byByZWFkL3dyaXRlIHRoZSBgRGF0ZWAgaW5zdGFuY2UgaW4gdGhlIG1vZGVsIGNhbiBiZSBkZWZpbmVkIHVzaW5nXG4gICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTW9kZWxPcHRpb25zIG5nTW9kZWxPcHRpb25zfS4gQnkgZGVmYXVsdCwgdGhpcyBpcyB0aGUgdGltZXpvbmUgb2YgdGhlIGJyb3dzZXIuXG4gICAgKlxuICAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSBtaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgbGVzcyB0aGFuIGBtaW5gLiBUaGlzIG11c3QgYmUgYVxuICAgICogdmFsaWQgSVNPIGRhdGV0aW1lIGZvcm1hdCAoeXl5eS1NTS1kZFRISDptbTpzcykuXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IG1heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBncmVhdGVyIHRoYW4gYG1heGAuIFRoaXMgbXVzdCBiZVxuICAgICogYSB2YWxpZCBJU08gZGF0ZXRpbWUgZm9ybWF0ICh5eXl5LU1NLWRkVEhIOm1tOnNzKS5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xuICAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgICpcbiAgICAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGUgbmFtZT1cImRhdGV0aW1lbG9jYWwtaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwiZGF0ZUV4YW1wbGVcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPHNjcmlwdD5cbiAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2RhdGVFeGFtcGxlJywgW10pXG4gICAgICAgICAgLmNvbnRyb2xsZXIoJ0RhdGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICRzY29wZS5leGFtcGxlID0ge1xuICAgICAgICAgICAgICB2YWx1ZTogbmV3IERhdGUoMjAxMCwgMTEsIDI4LCAxNCwgNTcpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1dKTtcbiAgICAgIDwvc2NyaXB0PlxuICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJEYXRlQ29udHJvbGxlciBhcyBkYXRlQ3RybFwiPlxuICAgICAgICBQaWNrIGEgZGF0ZSBiZXR3ZWVuIGluIDIwMTM6XG4gICAgICAgIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiBpZD1cImV4YW1wbGVJbnB1dFwiIG5hbWU9XCJpbnB1dFwiIG5nLW1vZGVsPVwiZXhhbXBsZS52YWx1ZVwiXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cInl5eXktTU0tZGRUSEg6bW06c3NcIiBtaW49XCIyMDAxLTAxLTAxVDAwOjAwOjAwXCIgbWF4PVwiMjAxMy0xMi0zMVQwMDowMDowMFwiIHJlcXVpcmVkIC8+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxuICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IuZGF0ZXRpbWVsb2NhbFwiPlxuICAgICAgICAgICAgTm90IGEgdmFsaWQgZGF0ZSE8L3NwYW4+XG4gICAgICAgIDx0dD52YWx1ZSA9IHt7ZXhhbXBsZS52YWx1ZSB8IGRhdGU6IFwieXl5eS1NTS1kZFRISDptbTpzc1wifX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgIDwvZm9ybT5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgdmFyIHZhbHVlID0gZWxlbWVudChieS5iaW5kaW5nKCdleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJ5eXl5LU1NLWRkVEhIOm1tOnNzXCInKSk7XG4gICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG4gICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdleGFtcGxlLnZhbHVlJykpO1xuXG4gICAgICAvLyBjdXJyZW50bHkgcHJvdHJhY3Rvci93ZWJkcml2ZXIgZG9lcyBub3Qgc3VwcG9ydFxuICAgICAgLy8gc2VuZGluZyBrZXlzIHRvIGFsbCBrbm93biBIVE1MNSBpbnB1dCBjb250cm9sc1xuICAgICAgLy8gZm9yIHZhcmlvdXMgYnJvd3NlcnMgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzU2MikuXG4gICAgICBmdW5jdGlvbiBzZXRJbnB1dCh2YWwpIHtcbiAgICAgICAgLy8gc2V0IHRoZSB2YWx1ZSBvZiB0aGUgZWxlbWVudCBhbmQgZm9yY2UgdmFsaWRhdGlvbi5cbiAgICAgICAgdmFyIHNjciA9IFwidmFyIGlwdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdleGFtcGxlSW5wdXQnKTsgXCIgK1xuICAgICAgICBcImlwdC52YWx1ZSA9ICdcIiArIHZhbCArIFwiJztcIiArXG4gICAgICAgIFwiYW5ndWxhci5lbGVtZW50KGlwdCkuc2NvcGUoKS4kYXBwbHkoZnVuY3Rpb24ocykgeyBzLm15Rm9ybVtpcHQubmFtZV0uJHNldFZpZXdWYWx1ZSgnXCIgKyB2YWwgKyBcIicpOyB9KTtcIjtcbiAgICAgICAgYnJvd3Nlci5leGVjdXRlU2NyaXB0KHNjcik7XG4gICAgICB9XG5cbiAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzIwMTAtMTItMjhUMTQ6NTc6MDAnKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gdHJ1ZScpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRJbnB1dCgnJyk7XG4gICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvRXF1YWwoJ3ZhbHVlID0nKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgb3ZlciBtYXgnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2V0SW5wdXQoJzIwMTUtMDEtMDFUMjM6NTk6MDAnKTtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcnKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTtcbiAgICAgIH0pO1xuICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gICAgKi9cbiAgJ2RhdGV0aW1lLWxvY2FsJzogY3JlYXRlRGF0ZUlucHV0VHlwZSgnZGF0ZXRpbWVsb2NhbCcsIERBVEVUSU1FTE9DQUxfUkVHRVhQLFxuICAgICAgY3JlYXRlRGF0ZVBhcnNlcihEQVRFVElNRUxPQ0FMX1JFR0VYUCwgWyd5eXl5JywgJ01NJywgJ2RkJywgJ0hIJywgJ21tJywgJ3NzJywgJ3NzcyddKSxcbiAgICAgICd5eXl5LU1NLWRkVEhIOm1tOnNzLnNzcycpLFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgaW5wdXRcbiAgICogQG5hbWUgaW5wdXRbdGltZV1cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIElucHV0IHdpdGggdGltZSB2YWxpZGF0aW9uIGFuZCB0cmFuc2Zvcm1hdGlvbi4gSW4gYnJvd3NlcnMgdGhhdCBkbyBub3QgeWV0IHN1cHBvcnRcbiAgICogdGhlIEhUTUw1IGRhdGUgaW5wdXQsIGEgdGV4dCBlbGVtZW50IHdpbGwgYmUgdXNlZC4gSW4gdGhhdCBjYXNlLCB0aGUgdGV4dCBtdXN0IGJlIGVudGVyZWQgaW4gYSB2YWxpZCBJU08tODYwMVxuICAgKiBsb2NhbCB0aW1lIGZvcm1hdCAoSEg6bW06c3MpLCBmb3IgZXhhbXBsZTogYDE0OjU3OjAwYC4gTW9kZWwgbXVzdCBiZSBhIERhdGUgb2JqZWN0LiBUaGlzIGJpbmRpbmcgd2lsbCBhbHdheXMgb3V0cHV0IGFcbiAgICogRGF0ZSBvYmplY3QgdG8gdGhlIG1vZGVsIG9mIEphbnVhcnkgMSwgMTk3MCwgb3IgbG9jYWwgZGF0ZSBgbmV3IERhdGUoMTk3MCwgMCwgMSwgSEgsIG1tLCBzcylgLlxuICAgKlxuICAgKiBUaGUgbW9kZWwgbXVzdCBhbHdheXMgYmUgYSBEYXRlIG9iamVjdCwgb3RoZXJ3aXNlIEFuZ3VsYXIgd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAgICogSW52YWxpZCBgRGF0ZWAgb2JqZWN0cyAoZGF0ZXMgd2hvc2UgYGdldFRpbWUoKWAgaXMgYE5hTmApIHdpbGwgYmUgcmVuZGVyZWQgYXMgYW4gZW1wdHkgc3RyaW5nLlxuICAgKlxuICAgKiBUaGUgdGltZXpvbmUgdG8gYmUgdXNlZCB0byByZWFkL3dyaXRlIHRoZSBgRGF0ZWAgaW5zdGFuY2UgaW4gdGhlIG1vZGVsIGNhbiBiZSBkZWZpbmVkIHVzaW5nXG4gICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdNb2RlbE9wdGlvbnMgbmdNb2RlbE9wdGlvbnN9LiBCeSBkZWZhdWx0LCB0aGlzIGlzIHRoZSB0aW1lem9uZSBvZiB0aGUgYnJvd3Nlci5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGxlc3MgdGhhbiBgbWluYC4gVGhpcyBtdXN0IGJlIGFcbiAgICogdmFsaWQgSVNPIHRpbWUgZm9ybWF0IChISDptbTpzcykuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGdyZWF0ZXIgdGhhbiBgbWF4YC4gVGhpcyBtdXN0IGJlIGFcbiAgICogdmFsaWQgSVNPIHRpbWUgZm9ybWF0IChISDptbTpzcykuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCJ0aW1lLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cInRpbWVFeGFtcGxlXCI+XG4gICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICA8c2NyaXB0PlxuICAgICAgYW5ndWxhci5tb2R1bGUoJ3RpbWVFeGFtcGxlJywgW10pXG4gICAgICAgIC5jb250cm9sbGVyKCdEYXRlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgJHNjb3BlLmV4YW1wbGUgPSB7XG4gICAgICAgICAgICB2YWx1ZTogbmV3IERhdGUoMTk3MCwgMCwgMSwgMTQsIDU3LCAwKVxuICAgICAgICAgIH07XG4gICAgICAgIH1dKTtcbiAgICAgPC9zY3JpcHQ+XG4gICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRGF0ZUNvbnRyb2xsZXIgYXMgZGF0ZUN0cmxcIj5cbiAgICAgICAgUGljayBhIGJldHdlZW4gOGFtIGFuZCA1cG06XG4gICAgICAgIDxpbnB1dCB0eXBlPVwidGltZVwiIGlkPVwiZXhhbXBsZUlucHV0XCIgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJleGFtcGxlLnZhbHVlXCJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiSEg6bW06c3NcIiBtaW49XCIwODowMDowMFwiIG1heD1cIjE3OjAwOjAwXCIgcmVxdWlyZWQgLz5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci50aW1lXCI+XG4gICAgICAgICAgICBOb3QgYSB2YWxpZCBkYXRlITwvc3Bhbj5cbiAgICAgICAgPHR0PnZhbHVlID0ge3tleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJISDptbTpzc1wifX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgPC9mb3JtPlxuICAgPC9maWxlPlxuICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgdmFyIHZhbHVlID0gZWxlbWVudChieS5iaW5kaW5nKCdleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJISDptbTpzc1wiJykpO1xuICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuICAgICAgdmFyIGlucHV0ID0gZWxlbWVudChieS5tb2RlbCgnZXhhbXBsZS52YWx1ZScpKTtcblxuICAgICAgLy8gY3VycmVudGx5IHByb3RyYWN0b3Ivd2ViZHJpdmVyIGRvZXMgbm90IHN1cHBvcnRcbiAgICAgIC8vIHNlbmRpbmcga2V5cyB0byBhbGwga25vd24gSFRNTDUgaW5wdXQgY29udHJvbHNcbiAgICAgIC8vIGZvciB2YXJpb3VzIGJyb3dzZXJzIChodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9wcm90cmFjdG9yL2lzc3Vlcy81NjIpLlxuICAgICAgZnVuY3Rpb24gc2V0SW5wdXQodmFsKSB7XG4gICAgICAgIC8vIHNldCB0aGUgdmFsdWUgb2YgdGhlIGVsZW1lbnQgYW5kIGZvcmNlIHZhbGlkYXRpb24uXG4gICAgICAgIHZhciBzY3IgPSBcInZhciBpcHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZXhhbXBsZUlucHV0Jyk7IFwiICtcbiAgICAgICAgXCJpcHQudmFsdWUgPSAnXCIgKyB2YWwgKyBcIic7XCIgK1xuICAgICAgICBcImFuZ3VsYXIuZWxlbWVudChpcHQpLnNjb3BlKCkuJGFwcGx5KGZ1bmN0aW9uKHMpIHsgcy5teUZvcm1baXB0Lm5hbWVdLiRzZXRWaWV3VmFsdWUoJ1wiICsgdmFsICsgXCInKTsgfSk7XCI7XG4gICAgICAgIGJyb3dzZXIuZXhlY3V0ZVNjcmlwdChzY3IpO1xuICAgICAgfVxuXG4gICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcxNDo1NzowMCcpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSB0cnVlJyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldElucHV0KCcnKTtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9FcXVhbCgndmFsdWUgPScpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBvdmVyIG1heCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRJbnB1dCgnMjM6NTk6MDAnKTtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcnKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTtcbiAgICAgIH0pO1xuICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICAgKi9cbiAgJ3RpbWUnOiBjcmVhdGVEYXRlSW5wdXRUeXBlKCd0aW1lJywgVElNRV9SRUdFWFAsXG4gICAgICBjcmVhdGVEYXRlUGFyc2VyKFRJTUVfUkVHRVhQLCBbJ0hIJywgJ21tJywgJ3NzJywgJ3NzcyddKSxcbiAgICAgJ0hIOm1tOnNzLnNzcycpLFxuXG4gICAvKipcbiAgICAqIEBuZ2RvYyBpbnB1dFxuICAgICogQG5hbWUgaW5wdXRbd2Vla11cbiAgICAqXG4gICAgKiBAZGVzY3JpcHRpb25cbiAgICAqIElucHV0IHdpdGggd2Vlay1vZi10aGUteWVhciB2YWxpZGF0aW9uIGFuZCB0cmFuc2Zvcm1hdGlvbiB0byBEYXRlLiBJbiBicm93c2VycyB0aGF0IGRvIG5vdCB5ZXQgc3VwcG9ydFxuICAgICogdGhlIEhUTUw1IHdlZWsgaW5wdXQsIGEgdGV4dCBlbGVtZW50IHdpbGwgYmUgdXNlZC4gSW4gdGhhdCBjYXNlLCB0aGUgdGV4dCBtdXN0IGJlIGVudGVyZWQgaW4gYSB2YWxpZCBJU08tODYwMVxuICAgICogd2VlayBmb3JtYXQgKHl5eXktVyMjKSwgZm9yIGV4YW1wbGU6IGAyMDEzLVcwMmAuXG4gICAgKlxuICAgICogVGhlIG1vZGVsIG11c3QgYWx3YXlzIGJlIGEgRGF0ZSBvYmplY3QsIG90aGVyd2lzZSBBbmd1bGFyIHdpbGwgdGhyb3cgYW4gZXJyb3IuXG4gICAgKiBJbnZhbGlkIGBEYXRlYCBvYmplY3RzIChkYXRlcyB3aG9zZSBgZ2V0VGltZSgpYCBpcyBgTmFOYCkgd2lsbCBiZSByZW5kZXJlZCBhcyBhbiBlbXB0eSBzdHJpbmcuXG4gICAgKlxuICAgICogVGhlIHRpbWV6b25lIHRvIGJlIHVzZWQgdG8gcmVhZC93cml0ZSB0aGUgYERhdGVgIGluc3RhbmNlIGluIHRoZSBtb2RlbCBjYW4gYmUgZGVmaW5lZCB1c2luZ1xuICAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsT3B0aW9ucyBuZ01vZGVsT3B0aW9uc30uIEJ5IGRlZmF1bHQsIHRoaXMgaXMgdGhlIHRpbWV6b25lIG9mIHRoZSBicm93c2VyLlxuICAgICpcbiAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGxlc3MgdGhhbiBgbWluYC4gVGhpcyBtdXN0IGJlIGFcbiAgICAqIHZhbGlkIElTTyB3ZWVrIGZvcm1hdCAoeXl5eS1XIyMpLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSBtYXggU2V0cyB0aGUgYG1heGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgZ3JlYXRlciB0aGFuIGBtYXhgLiBUaGlzIG11c3QgYmVcbiAgICAqIGEgdmFsaWQgSVNPIHdlZWsgZm9ybWF0ICh5eXl5LVcjIykuXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAgICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICAqXG4gICAgKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlIG5hbWU9XCJ3ZWVrLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cIndlZWtFeGFtcGxlXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxzY3JpcHQ+XG4gICAgICBhbmd1bGFyLm1vZHVsZSgnd2Vla0V4YW1wbGUnLCBbXSlcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0RhdGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAkc2NvcGUuZXhhbXBsZSA9IHtcbiAgICAgICAgICAgIHZhbHVlOiBuZXcgRGF0ZSgyMDEzLCAwLCAzKVxuICAgICAgICAgIH07XG4gICAgICAgIH1dKTtcbiAgICAgIDwvc2NyaXB0PlxuICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJEYXRlQ29udHJvbGxlciBhcyBkYXRlQ3RybFwiPlxuICAgICAgICBQaWNrIGEgZGF0ZSBiZXR3ZWVuIGluIDIwMTM6XG4gICAgICAgIDxpbnB1dCBpZD1cImV4YW1wbGVJbnB1dFwiIHR5cGU9XCJ3ZWVrXCIgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJleGFtcGxlLnZhbHVlXCJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiWVlZWS1XIyNcIiBtaW49XCIyMDEyLVczMlwiIG1heD1cIjIwMTMtVzUyXCIgcmVxdWlyZWQgLz5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci53ZWVrXCI+XG4gICAgICAgICAgICBOb3QgYSB2YWxpZCBkYXRlITwvc3Bhbj5cbiAgICAgICAgPHR0PnZhbHVlID0ge3tleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJ5eXl5LVd3d1wifX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgIDwvZm9ybT5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgdmFyIHZhbHVlID0gZWxlbWVudChieS5iaW5kaW5nKCdleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJ5eXl5LVd3d1wiJykpO1xuICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuICAgICAgdmFyIGlucHV0ID0gZWxlbWVudChieS5tb2RlbCgnZXhhbXBsZS52YWx1ZScpKTtcblxuICAgICAgLy8gY3VycmVudGx5IHByb3RyYWN0b3Ivd2ViZHJpdmVyIGRvZXMgbm90IHN1cHBvcnRcbiAgICAgIC8vIHNlbmRpbmcga2V5cyB0byBhbGwga25vd24gSFRNTDUgaW5wdXQgY29udHJvbHNcbiAgICAgIC8vIGZvciB2YXJpb3VzIGJyb3dzZXJzIChodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9wcm90cmFjdG9yL2lzc3Vlcy81NjIpLlxuICAgICAgZnVuY3Rpb24gc2V0SW5wdXQodmFsKSB7XG4gICAgICAgIC8vIHNldCB0aGUgdmFsdWUgb2YgdGhlIGVsZW1lbnQgYW5kIGZvcmNlIHZhbGlkYXRpb24uXG4gICAgICAgIHZhciBzY3IgPSBcInZhciBpcHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZXhhbXBsZUlucHV0Jyk7IFwiICtcbiAgICAgICAgXCJpcHQudmFsdWUgPSAnXCIgKyB2YWwgKyBcIic7XCIgK1xuICAgICAgICBcImFuZ3VsYXIuZWxlbWVudChpcHQpLnNjb3BlKCkuJGFwcGx5KGZ1bmN0aW9uKHMpIHsgcy5teUZvcm1baXB0Lm5hbWVdLiRzZXRWaWV3VmFsdWUoJ1wiICsgdmFsICsgXCInKTsgfSk7XCI7XG4gICAgICAgIGJyb3dzZXIuZXhlY3V0ZVNjcmlwdChzY3IpO1xuICAgICAgfVxuXG4gICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcyMDEzLVcwMScpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSB0cnVlJyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldElucHV0KCcnKTtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9FcXVhbCgndmFsdWUgPScpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBvdmVyIG1heCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRJbnB1dCgnMjAxNS1XMDEnKTtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcnKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTtcbiAgICAgIH0pO1xuICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gICAgKi9cbiAgJ3dlZWsnOiBjcmVhdGVEYXRlSW5wdXRUeXBlKCd3ZWVrJywgV0VFS19SRUdFWFAsIHdlZWtQYXJzZXIsICd5eXl5LVd3dycpLFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgaW5wdXRcbiAgICogQG5hbWUgaW5wdXRbbW9udGhdXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBJbnB1dCB3aXRoIG1vbnRoIHZhbGlkYXRpb24gYW5kIHRyYW5zZm9ybWF0aW9uLiBJbiBicm93c2VycyB0aGF0IGRvIG5vdCB5ZXQgc3VwcG9ydFxuICAgKiB0aGUgSFRNTDUgbW9udGggaW5wdXQsIGEgdGV4dCBlbGVtZW50IHdpbGwgYmUgdXNlZC4gSW4gdGhhdCBjYXNlLCB0aGUgdGV4dCBtdXN0IGJlIGVudGVyZWQgaW4gYSB2YWxpZCBJU08tODYwMVxuICAgKiBtb250aCBmb3JtYXQgKHl5eXktTU0pLCBmb3IgZXhhbXBsZTogYDIwMDktMDFgLlxuICAgKlxuICAgKiBUaGUgbW9kZWwgbXVzdCBhbHdheXMgYmUgYSBEYXRlIG9iamVjdCwgb3RoZXJ3aXNlIEFuZ3VsYXIgd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAgICogSW52YWxpZCBgRGF0ZWAgb2JqZWN0cyAoZGF0ZXMgd2hvc2UgYGdldFRpbWUoKWAgaXMgYE5hTmApIHdpbGwgYmUgcmVuZGVyZWQgYXMgYW4gZW1wdHkgc3RyaW5nLlxuICAgKiBJZiB0aGUgbW9kZWwgaXMgbm90IHNldCB0byB0aGUgZmlyc3Qgb2YgdGhlIG1vbnRoLCB0aGUgbmV4dCB2aWV3IHRvIG1vZGVsIHVwZGF0ZSB3aWxsIHNldCBpdFxuICAgKiB0byB0aGUgZmlyc3Qgb2YgdGhlIG1vbnRoLlxuICAgKlxuICAgKiBUaGUgdGltZXpvbmUgdG8gYmUgdXNlZCB0byByZWFkL3dyaXRlIHRoZSBgRGF0ZWAgaW5zdGFuY2UgaW4gdGhlIG1vZGVsIGNhbiBiZSBkZWZpbmVkIHVzaW5nXG4gICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdNb2RlbE9wdGlvbnMgbmdNb2RlbE9wdGlvbnN9LiBCeSBkZWZhdWx0LCB0aGlzIGlzIHRoZSB0aW1lem9uZSBvZiB0aGUgYnJvd3Nlci5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGxlc3MgdGhhbiBgbWluYC4gVGhpcyBtdXN0IGJlXG4gICAqIGEgdmFsaWQgSVNPIG1vbnRoIGZvcm1hdCAoeXl5eS1NTSkuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGdyZWF0ZXIgdGhhbiBgbWF4YC4gVGhpcyBtdXN0XG4gICAqIGJlIGEgdmFsaWQgSVNPIG1vbnRoIGZvcm1hdCAoeXl5eS1NTSkuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCJtb250aC1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJtb250aEV4YW1wbGVcIj5cbiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgIDxzY3JpcHQ+XG4gICAgICBhbmd1bGFyLm1vZHVsZSgnbW9udGhFeGFtcGxlJywgW10pXG4gICAgICAgIC5jb250cm9sbGVyKCdEYXRlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgJHNjb3BlLmV4YW1wbGUgPSB7XG4gICAgICAgICAgICB2YWx1ZTogbmV3IERhdGUoMjAxMywgOSwgMSlcbiAgICAgICAgICB9O1xuICAgICAgICB9XSk7XG4gICAgIDwvc2NyaXB0PlxuICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkRhdGVDb250cm9sbGVyIGFzIGRhdGVDdHJsXCI+XG4gICAgICAgUGljayBhIG1vbnRoIGluIDIwMTM6XG4gICAgICAgPGlucHV0IGlkPVwiZXhhbXBsZUlucHV0XCIgdHlwZT1cIm1vbnRoXCIgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJleGFtcGxlLnZhbHVlXCJcbiAgICAgICAgICBwbGFjZWhvbGRlcj1cInl5eXktTU1cIiBtaW49XCIyMDEzLTAxXCIgbWF4PVwiMjAxMy0xMlwiIHJlcXVpcmVkIC8+XG4gICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxuICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5tb250aFwiPlxuICAgICAgICAgIE5vdCBhIHZhbGlkIG1vbnRoITwvc3Bhbj5cbiAgICAgICA8dHQ+dmFsdWUgPSB7e2V4YW1wbGUudmFsdWUgfCBkYXRlOiBcInl5eXktTU1cIn19PC90dD48YnIvPlxuICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgPC9mb3JtPlxuICAgPC9maWxlPlxuICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgdmFyIHZhbHVlID0gZWxlbWVudChieS5iaW5kaW5nKCdleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJ5eXl5LU1NXCInKSk7XG4gICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG4gICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdleGFtcGxlLnZhbHVlJykpO1xuXG4gICAgICAvLyBjdXJyZW50bHkgcHJvdHJhY3Rvci93ZWJkcml2ZXIgZG9lcyBub3Qgc3VwcG9ydFxuICAgICAgLy8gc2VuZGluZyBrZXlzIHRvIGFsbCBrbm93biBIVE1MNSBpbnB1dCBjb250cm9sc1xuICAgICAgLy8gZm9yIHZhcmlvdXMgYnJvd3NlcnMgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzU2MikuXG4gICAgICBmdW5jdGlvbiBzZXRJbnB1dCh2YWwpIHtcbiAgICAgICAgLy8gc2V0IHRoZSB2YWx1ZSBvZiB0aGUgZWxlbWVudCBhbmQgZm9yY2UgdmFsaWRhdGlvbi5cbiAgICAgICAgdmFyIHNjciA9IFwidmFyIGlwdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdleGFtcGxlSW5wdXQnKTsgXCIgK1xuICAgICAgICBcImlwdC52YWx1ZSA9ICdcIiArIHZhbCArIFwiJztcIiArXG4gICAgICAgIFwiYW5ndWxhci5lbGVtZW50KGlwdCkuc2NvcGUoKS4kYXBwbHkoZnVuY3Rpb24ocykgeyBzLm15Rm9ybVtpcHQubmFtZV0uJHNldFZpZXdWYWx1ZSgnXCIgKyB2YWwgKyBcIicpOyB9KTtcIjtcbiAgICAgICAgYnJvd3Nlci5leGVjdXRlU2NyaXB0KHNjcik7XG4gICAgICB9XG5cbiAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzIwMTMtMTAnKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gdHJ1ZScpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRJbnB1dCgnJyk7XG4gICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvRXF1YWwoJ3ZhbHVlID0nKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgb3ZlciBtYXgnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2V0SW5wdXQoJzIwMTUtMDEnKTtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcnKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTtcbiAgICAgIH0pO1xuICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICAgKi9cbiAgJ21vbnRoJzogY3JlYXRlRGF0ZUlucHV0VHlwZSgnbW9udGgnLCBNT05USF9SRUdFWFAsXG4gICAgIGNyZWF0ZURhdGVQYXJzZXIoTU9OVEhfUkVHRVhQLCBbJ3l5eXknLCAnTU0nXSksXG4gICAgICd5eXl5LU1NJyksXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBpbnB1dFxuICAgKiBAbmFtZSBpbnB1dFtudW1iZXJdXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUZXh0IGlucHV0IHdpdGggbnVtYmVyIHZhbGlkYXRpb24gYW5kIHRyYW5zZm9ybWF0aW9uLiBTZXRzIHRoZSBgbnVtYmVyYCB2YWxpZGF0aW9uXG4gICAqIGVycm9yIGlmIG5vdCBhIHZhbGlkIG51bWJlci5cbiAgICpcbiAgICogVGhlIG1vZGVsIG11c3QgYWx3YXlzIGJlIGEgbnVtYmVyLCBvdGhlcndpc2UgQW5ndWxhciB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBtaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgbGVzcyB0aGFuIGBtaW5gLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG1heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBncmVhdGVyIHRoYW4gYG1heGAuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhblxuICAgKiAgICBtaW5sZW5ndGguXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNYXhsZW5ndGggU2V0cyBgbWF4bGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbG9uZ2VyIHRoYW5cbiAgICogICAgbWF4bGVuZ3RoLiBTZXR0aW5nIHRoZSBhdHRyaWJ1dGUgdG8gYSBuZWdhdGl2ZSBvciBub24tbnVtZXJpYyB2YWx1ZSwgYWxsb3dzIHZpZXcgdmFsdWVzIG9mXG4gICAqICAgIGFueSBsZW5ndGguXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcGF0dGVybiBTaW1pbGFyIHRvIGBuZ1BhdHRlcm5gIGV4Y2VwdCB0aGF0IHRoZSBhdHRyaWJ1dGUgdmFsdWUgaXMgdGhlIGFjdHVhbCBzdHJpbmdcbiAgICogICAgdGhhdCBjb250YWlucyB0aGUgcmVndWxhciBleHByZXNzaW9uIGJvZHkgdGhhdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIHJlZ3VsYXIgZXhwcmVzc2lvblxuICAgKiAgICBhcyBpbiB0aGUgbmdQYXR0ZXJuIGRpcmVjdGl2ZS5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1BhdHRlcm4gU2V0cyBgcGF0dGVybmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIG5nTW9kZWwgdmFsdWUgZG9lcyBub3QgbWF0Y2hcbiAgICogICAgYSBSZWdFeHAgZm91bmQgYnkgZXZhbHVhdGluZyB0aGUgQW5ndWxhciBleHByZXNzaW9uIGdpdmVuIGluIHRoZSBhdHRyaWJ1dGUgdmFsdWUuXG4gICAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIFJlZ0V4cCBvYmplY3QgdGhlbiB0aGlzIGlzIHVzZWQgZGlyZWN0bHkuXG4gICAqICAgIElmIHRoZSBleHByZXNzaW9uIGlzIGEgc3RyaW5nIHRoZW4gaXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSBSZWdFeHAgYWZ0ZXIgd3JhcHBpbmcgaXQgaW4gYF5gIGFuZCBgJGBcbiAgICogICAgY2hhcmFjdGVycy4gRm9yIGluc3RhbmNlLCBgXCJhYmNcImAgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYG5ldyBSZWdFeHAoJ15hYmMkJylgLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgIDxleGFtcGxlIG5hbWU9XCJudW1iZXItaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwibnVtYmVyRXhhbXBsZVwiPlxuICAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ251bWJlckV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLmV4YW1wbGUgPSB7XG4gICAgICAgICAgICAgICAgIHZhbHVlOiAxMlxuICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICB9XSk7XG4gICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgTnVtYmVyOiA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5hbWU9XCJpbnB1dFwiIG5nLW1vZGVsPVwiZXhhbXBsZS52YWx1ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1pbj1cIjBcIiBtYXg9XCI5OVwiIHJlcXVpcmVkPlxuICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWRcIj5cbiAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5udW1iZXJcIj5cbiAgICAgICAgICAgICBOb3QgdmFsaWQgbnVtYmVyITwvc3Bhbj5cbiAgICAgICAgICAgPHR0PnZhbHVlID0ge3tleGFtcGxlLnZhbHVlfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgIDwvZmlsZT5cbiAgICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQoYnkuYmluZGluZygnZXhhbXBsZS52YWx1ZScpKTtcbiAgICAgICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG4gICAgICAgICAgdmFyIGlucHV0ID0gZWxlbWVudChieS5tb2RlbCgnZXhhbXBsZS52YWx1ZScpKTtcblxuICAgICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9Db250YWluKCcxMicpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnJyk7XG4gICAgICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0VxdWFsKCd2YWx1ZSA9Jyk7XG4gICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgb3ZlciBtYXgnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnMTIzJyk7XG4gICAgICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0VxdWFsKCd2YWx1ZSA9Jyk7XG4gICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIDwvZmlsZT5cbiAgICAgIDwvZXhhbXBsZT5cbiAgICovXG4gICdudW1iZXInOiBudW1iZXJJbnB1dFR5cGUsXG5cblxuICAvKipcbiAgICogQG5nZG9jIGlucHV0XG4gICAqIEBuYW1lIGlucHV0W3VybF1cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRleHQgaW5wdXQgd2l0aCBVUkwgdmFsaWRhdGlvbi4gU2V0cyB0aGUgYHVybGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIGNvbnRlbnQgaXMgbm90IGFcbiAgICogdmFsaWQgVVJMLlxuICAgKlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgKiAqKk5vdGU6KiogYGlucHV0W3VybF1gIHVzZXMgYSByZWdleCB0byB2YWxpZGF0ZSB1cmxzIHRoYXQgaXMgZGVyaXZlZCBmcm9tIHRoZSByZWdleFxuICAgKiB1c2VkIGluIENocm9taXVtLiBJZiB5b3UgbmVlZCBzdHJpY3RlciB2YWxpZGF0aW9uLCB5b3UgY2FuIHVzZSBgbmctcGF0dGVybmAgb3IgbW9kaWZ5XG4gICAqIHRoZSBidWlsdC1pbiB2YWxpZGF0b3JzIChzZWUgdGhlIHtAbGluayBndWlkZS9mb3JtcyBGb3JtcyBndWlkZX0pXG4gICAqIDwvZGl2PlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNaW5sZW5ndGggU2V0cyBgbWlubGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgc2hvcnRlciB0aGFuXG4gICAqICAgIG1pbmxlbmd0aC5cbiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01heGxlbmd0aCBTZXRzIGBtYXhsZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBsb25nZXIgdGhhblxuICAgKiAgICBtYXhsZW5ndGguIFNldHRpbmcgdGhlIGF0dHJpYnV0ZSB0byBhIG5lZ2F0aXZlIG9yIG5vbi1udW1lcmljIHZhbHVlLCBhbGxvd3MgdmlldyB2YWx1ZXMgb2ZcbiAgICogICAgYW55IGxlbmd0aC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBwYXR0ZXJuIFNpbWlsYXIgdG8gYG5nUGF0dGVybmAgZXhjZXB0IHRoYXQgdGhlIGF0dHJpYnV0ZSB2YWx1ZSBpcyB0aGUgYWN0dWFsIHN0cmluZ1xuICAgKiAgICB0aGF0IGNvbnRhaW5zIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gYm9keSB0aGF0IHdpbGwgYmUgY29udmVydGVkIHRvIGEgcmVndWxhciBleHByZXNzaW9uXG4gICAqICAgIGFzIGluIHRoZSBuZ1BhdHRlcm4gZGlyZWN0aXZlLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUGF0dGVybiBTZXRzIGBwYXR0ZXJuYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgbmdNb2RlbCB2YWx1ZSBkb2VzIG5vdCBtYXRjaFxuICAgKiAgICBhIFJlZ0V4cCBmb3VuZCBieSBldmFsdWF0aW5nIHRoZSBBbmd1bGFyIGV4cHJlc3Npb24gZ2l2ZW4gaW4gdGhlIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICogICAgSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgUmVnRXhwIG9iamVjdCB0aGVuIHRoaXMgaXMgdXNlZCBkaXJlY3RseS5cbiAgICogICAgSWYgdGhlIGV4cHJlc3Npb24gaXMgYSBzdHJpbmcgdGhlbiBpdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIFJlZ0V4cCBhZnRlciB3cmFwcGluZyBpdCBpbiBgXmAgYW5kIGAkYFxuICAgKiAgICBjaGFyYWN0ZXJzLiBGb3IgaW5zdGFuY2UsIGBcImFiY1wiYCB3aWxsIGJlIGNvbnZlcnRlZCB0byBgbmV3IFJlZ0V4cCgnXmFiYyQnKWAuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICAgPGV4YW1wbGUgbmFtZT1cInVybC1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJ1cmxFeGFtcGxlXCI+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICA8c2NyaXB0PlxuICAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgndXJsRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICAkc2NvcGUudXJsID0ge1xuICAgICAgICAgICAgICAgICB0ZXh0OiAnaHR0cDovL2dvb2dsZS5jb20nXG4gICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgIDwvc2NyaXB0PlxuICAgICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgICBVUkw6IDxpbnB1dCB0eXBlPVwidXJsXCIgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJ1cmwudGV4dFwiIHJlcXVpcmVkPlxuICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWRcIj5cbiAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci51cmxcIj5cbiAgICAgICAgICAgICBOb3QgdmFsaWQgdXJsITwvc3Bhbj5cbiAgICAgICAgICAgPHR0PnRleHQgPSB7e3VybC50ZXh0fX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IudXJsID0ge3shIW15Rm9ybS4kZXJyb3IudXJsfX08L3R0Pjxici8+XG4gICAgICAgICAgPC9mb3JtPlxuICAgICAgICA8L2ZpbGU+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgICB2YXIgdGV4dCA9IGVsZW1lbnQoYnkuYmluZGluZygndXJsLnRleHQnKSk7XG4gICAgICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuICAgICAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3VybC50ZXh0JykpO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBleHBlY3QodGV4dC5nZXRUZXh0KCkpLnRvQ29udGFpbignaHR0cDovL2dvb2dsZS5jb20nKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpbnB1dC5jbGVhcigpO1xuICAgICAgICAgICAgaW5wdXQuc2VuZEtleXMoJycpO1xuXG4gICAgICAgICAgICBleHBlY3QodGV4dC5nZXRUZXh0KCkpLnRvRXF1YWwoJ3RleHQgPScpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG5vdCB1cmwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnYm94Jyk7XG5cbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgPC9maWxlPlxuICAgICAgPC9leGFtcGxlPlxuICAgKi9cbiAgJ3VybCc6IHVybElucHV0VHlwZSxcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgaW5wdXRcbiAgICogQG5hbWUgaW5wdXRbZW1haWxdXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUZXh0IGlucHV0IHdpdGggZW1haWwgdmFsaWRhdGlvbi4gU2V0cyB0aGUgYGVtYWlsYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiBub3QgYSB2YWxpZCBlbWFpbFxuICAgKiBhZGRyZXNzLlxuICAgKlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgKiAqKk5vdGU6KiogYGlucHV0W2VtYWlsXWAgdXNlcyBhIHJlZ2V4IHRvIHZhbGlkYXRlIGVtYWlsIGFkZHJlc3NlcyB0aGF0IGlzIGRlcml2ZWQgZnJvbSB0aGUgcmVnZXhcbiAgICogdXNlZCBpbiBDaHJvbWl1bS4gSWYgeW91IG5lZWQgc3RyaWN0ZXIgdmFsaWRhdGlvbiAoZS5nLiByZXF1aXJpbmcgYSB0b3AtbGV2ZWwgZG9tYWluKSwgeW91IGNhblxuICAgKiB1c2UgYG5nLXBhdHRlcm5gIG9yIG1vZGlmeSB0aGUgYnVpbHQtaW4gdmFsaWRhdG9ycyAoc2VlIHRoZSB7QGxpbmsgZ3VpZGUvZm9ybXMgRm9ybXMgZ3VpZGV9KVxuICAgKiA8L2Rpdj5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhblxuICAgKiAgICBtaW5sZW5ndGguXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNYXhsZW5ndGggU2V0cyBgbWF4bGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbG9uZ2VyIHRoYW5cbiAgICogICAgbWF4bGVuZ3RoLiBTZXR0aW5nIHRoZSBhdHRyaWJ1dGUgdG8gYSBuZWdhdGl2ZSBvciBub24tbnVtZXJpYyB2YWx1ZSwgYWxsb3dzIHZpZXcgdmFsdWVzIG9mXG4gICAqICAgIGFueSBsZW5ndGguXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcGF0dGVybiBTaW1pbGFyIHRvIGBuZ1BhdHRlcm5gIGV4Y2VwdCB0aGF0IHRoZSBhdHRyaWJ1dGUgdmFsdWUgaXMgdGhlIGFjdHVhbCBzdHJpbmdcbiAgICogICAgdGhhdCBjb250YWlucyB0aGUgcmVndWxhciBleHByZXNzaW9uIGJvZHkgdGhhdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIHJlZ3VsYXIgZXhwcmVzc2lvblxuICAgKiAgICBhcyBpbiB0aGUgbmdQYXR0ZXJuIGRpcmVjdGl2ZS5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1BhdHRlcm4gU2V0cyBgcGF0dGVybmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIG5nTW9kZWwgdmFsdWUgZG9lcyBub3QgbWF0Y2hcbiAgICogICAgYSBSZWdFeHAgZm91bmQgYnkgZXZhbHVhdGluZyB0aGUgQW5ndWxhciBleHByZXNzaW9uIGdpdmVuIGluIHRoZSBhdHRyaWJ1dGUgdmFsdWUuXG4gICAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIFJlZ0V4cCBvYmplY3QgdGhlbiB0aGlzIGlzIHVzZWQgZGlyZWN0bHkuXG4gICAqICAgIElmIHRoZSBleHByZXNzaW9uIGlzIGEgc3RyaW5nIHRoZW4gaXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSBSZWdFeHAgYWZ0ZXIgd3JhcHBpbmcgaXQgaW4gYF5gIGFuZCBgJGBcbiAgICogICAgY2hhcmFjdGVycy4gRm9yIGluc3RhbmNlLCBgXCJhYmNcImAgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYG5ldyBSZWdFeHAoJ15hYmMkJylgLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgIDxleGFtcGxlIG5hbWU9XCJlbWFpbC1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJlbWFpbEV4YW1wbGVcIj5cbiAgICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdlbWFpbEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLmVtYWlsID0ge1xuICAgICAgICAgICAgICAgICB0ZXh0OiAnbWVAZXhhbXBsZS5jb20nXG4gICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgIDwvc2NyaXB0PlxuICAgICAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgICAgRW1haWw6IDxpbnB1dCB0eXBlPVwiZW1haWxcIiBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cImVtYWlsLnRleHRcIiByZXF1aXJlZD5cbiAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWRcIj5cbiAgICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj5cbiAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IuZW1haWxcIj5cbiAgICAgICAgICAgICAgIE5vdCB2YWxpZCBlbWFpbCE8L3NwYW4+XG4gICAgICAgICAgICAgPHR0PnRleHQgPSB7e2VtYWlsLnRleHR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+XG4gICAgICAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+XG4gICAgICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IuZW1haWwgPSB7eyEhbXlGb3JtLiRlcnJvci5lbWFpbH19PC90dD48YnIvPlxuICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICA8L2ZpbGU+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgICB2YXIgdGV4dCA9IGVsZW1lbnQoYnkuYmluZGluZygnZW1haWwudGV4dCcpKTtcbiAgICAgICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG4gICAgICAgICAgdmFyIGlucHV0ID0gZWxlbWVudChieS5tb2RlbCgnZW1haWwudGV4dCcpKTtcblxuICAgICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZXhwZWN0KHRleHQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ21lQGV4YW1wbGUuY29tJyk7XG4gICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICAgIGlucHV0LnNlbmRLZXlzKCcnKTtcbiAgICAgICAgICAgIGV4cGVjdCh0ZXh0LmdldFRleHQoKSkudG9FcXVhbCgndGV4dCA9Jyk7XG4gICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgbm90IGVtYWlsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpbnB1dC5jbGVhcigpO1xuICAgICAgICAgICAgaW5wdXQuc2VuZEtleXMoJ3h4eCcpO1xuXG4gICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIDwvZmlsZT5cbiAgICAgIDwvZXhhbXBsZT5cbiAgICovXG4gICdlbWFpbCc6IGVtYWlsSW5wdXRUeXBlLFxuXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBpbnB1dFxuICAgKiBAbmFtZSBpbnB1dFtyYWRpb11cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEhUTUwgcmFkaW8gYnV0dG9uLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd2hpY2ggdGhlIGV4cHJlc3Npb24gc2hvdWxkIGJlIHNldCB3aGVuIHNlbGVjdGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmdWYWx1ZSBBbmd1bGFyIGV4cHJlc3Npb24gd2hpY2ggc2V0cyB0aGUgdmFsdWUgdG8gd2hpY2ggdGhlIGV4cHJlc3Npb24gc2hvdWxkXG4gICAqICAgIGJlIHNldCB3aGVuIHNlbGVjdGVkLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICAgPGV4YW1wbGUgbmFtZT1cInJhZGlvLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cInJhZGlvRXhhbXBsZVwiPlxuICAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3JhZGlvRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICAkc2NvcGUuY29sb3IgPSB7XG4gICAgICAgICAgICAgICAgIG5hbWU6ICdibHVlJ1xuICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICRzY29wZS5zcGVjaWFsVmFsdWUgPSB7XG4gICAgICAgICAgICAgICAgIFwiaWRcIjogXCIxMjM0NVwiLFxuICAgICAgICAgICAgICAgICBcInZhbHVlXCI6IFwiZ3JlZW5cIlxuICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICB9XSk7XG4gICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5nLW1vZGVsPVwiY29sb3IubmFtZVwiIHZhbHVlPVwicmVkXCI+ICBSZWQgPGJyLz5cbiAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5nLW1vZGVsPVwiY29sb3IubmFtZVwiIG5nLXZhbHVlPVwic3BlY2lhbFZhbHVlXCI+IEdyZWVuIDxici8+XG4gICAgICAgICAgIDxpbnB1dCB0eXBlPVwicmFkaW9cIiBuZy1tb2RlbD1cImNvbG9yLm5hbWVcIiB2YWx1ZT1cImJsdWVcIj4gQmx1ZSA8YnIvPlxuICAgICAgICAgICA8dHQ+Y29sb3IgPSB7e2NvbG9yLm5hbWUgfCBqc29ufX08L3R0Pjxici8+XG4gICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgIE5vdGUgdGhhdCBgbmctdmFsdWU9XCJzcGVjaWFsVmFsdWVcImAgc2V0cyByYWRpbyBpdGVtJ3MgdmFsdWUgdG8gYmUgdGhlIHZhbHVlIG9mIGAkc2NvcGUuc3BlY2lhbFZhbHVlYC5cbiAgICAgICAgPC9maWxlPlxuICAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICAgaXQoJ3Nob3VsZCBjaGFuZ2Ugc3RhdGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjb2xvciA9IGVsZW1lbnQoYnkuYmluZGluZygnY29sb3IubmFtZScpKTtcblxuICAgICAgICAgICAgZXhwZWN0KGNvbG9yLmdldFRleHQoKSkudG9Db250YWluKCdibHVlJyk7XG5cbiAgICAgICAgICAgIGVsZW1lbnQuYWxsKGJ5Lm1vZGVsKCdjb2xvci5uYW1lJykpLmdldCgwKS5jbGljaygpO1xuXG4gICAgICAgICAgICBleHBlY3QoY29sb3IuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3JlZCcpO1xuICAgICAgICAgIH0pO1xuICAgICAgICA8L2ZpbGU+XG4gICAgICA8L2V4YW1wbGU+XG4gICAqL1xuICAncmFkaW8nOiByYWRpb0lucHV0VHlwZSxcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgaW5wdXRcbiAgICogQG5hbWUgaW5wdXRbY2hlY2tib3hdXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBIVE1MIGNoZWNrYm94LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICogQHBhcmFtIHtleHByZXNzaW9uPX0gbmdUcnVlVmFsdWUgVGhlIHZhbHVlIHRvIHdoaWNoIHRoZSBleHByZXNzaW9uIHNob3VsZCBiZSBzZXQgd2hlbiBzZWxlY3RlZC5cbiAgICogQHBhcmFtIHtleHByZXNzaW9uPX0gbmdGYWxzZVZhbHVlIFRoZSB2YWx1ZSB0byB3aGljaCB0aGUgZXhwcmVzc2lvbiBzaG91bGQgYmUgc2V0IHdoZW4gbm90IHNlbGVjdGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgIDxleGFtcGxlIG5hbWU9XCJjaGVja2JveC1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJjaGVja2JveEV4YW1wbGVcIj5cbiAgICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdjaGVja2JveEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLmNoZWNrYm94TW9kZWwgPSB7XG4gICAgICAgICAgICAgICAgdmFsdWUxIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTIgOiAnWUVTJ1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgIDwvc2NyaXB0PlxuICAgICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgICBWYWx1ZTE6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImNoZWNrYm94TW9kZWwudmFsdWUxXCI+IDxici8+XG4gICAgICAgICAgIFZhbHVlMjogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY2hlY2tib3hNb2RlbC52YWx1ZTJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBuZy10cnVlLXZhbHVlPVwiJ1lFUydcIiBuZy1mYWxzZS12YWx1ZT1cIidOTydcIj4gPGJyLz5cbiAgICAgICAgICAgPHR0PnZhbHVlMSA9IHt7Y2hlY2tib3hNb2RlbC52YWx1ZTF9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0PnZhbHVlMiA9IHt7Y2hlY2tib3hNb2RlbC52YWx1ZTJ9fTwvdHQ+PGJyLz5cbiAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgIDwvZmlsZT5cbiAgICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgIGl0KCdzaG91bGQgY2hhbmdlIHN0YXRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUxID0gZWxlbWVudChieS5iaW5kaW5nKCdjaGVja2JveE1vZGVsLnZhbHVlMScpKTtcbiAgICAgICAgICAgIHZhciB2YWx1ZTIgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2NoZWNrYm94TW9kZWwudmFsdWUyJykpO1xuXG4gICAgICAgICAgICBleHBlY3QodmFsdWUxLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgICAgICBleHBlY3QodmFsdWUyLmdldFRleHQoKSkudG9Db250YWluKCdZRVMnKTtcblxuICAgICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnY2hlY2tib3hNb2RlbC52YWx1ZTEnKSkuY2xpY2soKTtcbiAgICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2NoZWNrYm94TW9kZWwudmFsdWUyJykpLmNsaWNrKCk7XG5cbiAgICAgICAgICAgIGV4cGVjdCh2YWx1ZTEuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgICBleHBlY3QodmFsdWUyLmdldFRleHQoKSkudG9Db250YWluKCdOTycpO1xuICAgICAgICAgIH0pO1xuICAgICAgICA8L2ZpbGU+XG4gICAgICA8L2V4YW1wbGU+XG4gICAqL1xuICAnY2hlY2tib3gnOiBjaGVja2JveElucHV0VHlwZSxcblxuICAnaGlkZGVuJzogbm9vcCxcbiAgJ2J1dHRvbic6IG5vb3AsXG4gICdzdWJtaXQnOiBub29wLFxuICAncmVzZXQnOiBub29wLFxuICAnZmlsZSc6IG5vb3Bcbn07XG5cbmZ1bmN0aW9uIHN0cmluZ0Jhc2VkSW5wdXRUeXBlKGN0cmwpIHtcbiAgY3RybC4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmFsdWUpID8gdmFsdWUgOiB2YWx1ZS50b1N0cmluZygpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gdGV4dElucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKSB7XG4gIGJhc2VJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcik7XG4gIHN0cmluZ0Jhc2VkSW5wdXRUeXBlKGN0cmwpO1xufVxuXG5mdW5jdGlvbiBiYXNlSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpIHtcbiAgdmFyIHR5cGUgPSBsb3dlcmNhc2UoZWxlbWVudFswXS50eXBlKTtcblxuICAvLyBJbiBjb21wb3NpdGlvbiBtb2RlLCB1c2VycyBhcmUgc3RpbGwgaW5wdXRpbmcgaW50ZXJtZWRpYXRlIHRleHQgYnVmZmVyLFxuICAvLyBob2xkIHRoZSBsaXN0ZW5lciB1bnRpbCBjb21wb3NpdGlvbiBpcyBkb25lLlxuICAvLyBNb3JlIGFib3V0IGNvbXBvc2l0aW9uIGV2ZW50czogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0NvbXBvc2l0aW9uRXZlbnRcbiAgaWYgKCEkc25pZmZlci5hbmRyb2lkKSB7XG4gICAgdmFyIGNvbXBvc2luZyA9IGZhbHNlO1xuXG4gICAgZWxlbWVudC5vbignY29tcG9zaXRpb25zdGFydCcsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIGNvbXBvc2luZyA9IHRydWU7XG4gICAgfSk7XG5cbiAgICBlbGVtZW50Lm9uKCdjb21wb3NpdGlvbmVuZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgY29tcG9zaW5nID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24oZXYpIHtcbiAgICBpZiAodGltZW91dCkge1xuICAgICAgJGJyb3dzZXIuZGVmZXIuY2FuY2VsKHRpbWVvdXQpO1xuICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgfVxuICAgIGlmIChjb21wb3NpbmcpIHJldHVybjtcbiAgICB2YXIgdmFsdWUgPSBlbGVtZW50LnZhbCgpLFxuICAgICAgICBldmVudCA9IGV2ICYmIGV2LnR5cGU7XG5cbiAgICAvLyBCeSBkZWZhdWx0IHdlIHdpbGwgdHJpbSB0aGUgdmFsdWVcbiAgICAvLyBJZiB0aGUgYXR0cmlidXRlIG5nLXRyaW0gZXhpc3RzIHdlIHdpbGwgYXZvaWQgdHJpbW1pbmdcbiAgICAvLyBJZiBpbnB1dCB0eXBlIGlzICdwYXNzd29yZCcsIHRoZSB2YWx1ZSBpcyBuZXZlciB0cmltbWVkXG4gICAgaWYgKHR5cGUgIT09ICdwYXNzd29yZCcgJiYgKCFhdHRyLm5nVHJpbSB8fCBhdHRyLm5nVHJpbSAhPT0gJ2ZhbHNlJykpIHtcbiAgICAgIHZhbHVlID0gdHJpbSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gSWYgYSBjb250cm9sIGlzIHN1ZmZlcmluZyBmcm9tIGJhZCBpbnB1dCAoZHVlIHRvIG5hdGl2ZSB2YWxpZGF0b3JzKSwgYnJvd3NlcnMgZGlzY2FyZCBpdHNcbiAgICAvLyB2YWx1ZSwgc28gaXQgbWF5IGJlIG5lY2Vzc2FyeSB0byByZXZhbGlkYXRlIChieSBjYWxsaW5nICRzZXRWaWV3VmFsdWUgYWdhaW4pIGV2ZW4gaWYgdGhlXG4gICAgLy8gY29udHJvbCdzIHZhbHVlIGlzIHRoZSBzYW1lIGVtcHR5IHZhbHVlIHR3aWNlIGluIGEgcm93LlxuICAgIGlmIChjdHJsLiR2aWV3VmFsdWUgIT09IHZhbHVlIHx8ICh2YWx1ZSA9PT0gJycgJiYgY3RybC4kJGhhc05hdGl2ZVZhbGlkYXRvcnMpKSB7XG4gICAgICBjdHJsLiRzZXRWaWV3VmFsdWUodmFsdWUsIGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgLy8gaWYgdGhlIGJyb3dzZXIgZG9lcyBzdXBwb3J0IFwiaW5wdXRcIiBldmVudCwgd2UgYXJlIGZpbmUgLSBleGNlcHQgb24gSUU5IHdoaWNoIGRvZXNuJ3QgZmlyZSB0aGVcbiAgLy8gaW5wdXQgZXZlbnQgb24gYmFja3NwYWNlLCBkZWxldGUgb3IgY3V0XG4gIGlmICgkc25pZmZlci5oYXNFdmVudCgnaW5wdXQnKSkge1xuICAgIGVsZW1lbnQub24oJ2lucHV0JywgbGlzdGVuZXIpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0aW1lb3V0O1xuXG4gICAgdmFyIGRlZmVyTGlzdGVuZXIgPSBmdW5jdGlvbihldiwgaW5wdXQsIG9yaWdWYWx1ZSkge1xuICAgICAgaWYgKCF0aW1lb3V0KSB7XG4gICAgICAgIHRpbWVvdXQgPSAkYnJvd3Nlci5kZWZlcihmdW5jdGlvbigpIHtcbiAgICAgICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICBpZiAoIWlucHV0IHx8IGlucHV0LnZhbHVlICE9PSBvcmlnVmFsdWUpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyKGV2KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBlbGVtZW50Lm9uKCdrZXlkb3duJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHZhciBrZXkgPSBldmVudC5rZXlDb2RlO1xuXG4gICAgICAvLyBpZ25vcmVcbiAgICAgIC8vICAgIGNvbW1hbmQgICAgICAgICAgICBtb2RpZmllcnMgICAgICAgICAgICAgICAgICAgYXJyb3dzXG4gICAgICBpZiAoa2V5ID09PSA5MSB8fCAoMTUgPCBrZXkgJiYga2V5IDwgMTkpIHx8ICgzNyA8PSBrZXkgJiYga2V5IDw9IDQwKSkgcmV0dXJuO1xuXG4gICAgICBkZWZlckxpc3RlbmVyKGV2ZW50LCB0aGlzLCB0aGlzLnZhbHVlKTtcbiAgICB9KTtcblxuICAgIC8vIGlmIHVzZXIgbW9kaWZpZXMgaW5wdXQgdmFsdWUgdXNpbmcgY29udGV4dCBtZW51IGluIElFLCB3ZSBuZWVkIFwicGFzdGVcIiBhbmQgXCJjdXRcIiBldmVudHMgdG8gY2F0Y2ggaXRcbiAgICBpZiAoJHNuaWZmZXIuaGFzRXZlbnQoJ3Bhc3RlJykpIHtcbiAgICAgIGVsZW1lbnQub24oJ3Bhc3RlIGN1dCcsIGRlZmVyTGlzdGVuZXIpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHVzZXIgcGFzdGUgaW50byBpbnB1dCB1c2luZyBtb3VzZSBvbiBvbGRlciBicm93c2VyXG4gIC8vIG9yIGZvcm0gYXV0b2NvbXBsZXRlIG9uIG5ld2VyIGJyb3dzZXIsIHdlIG5lZWQgXCJjaGFuZ2VcIiBldmVudCB0byBjYXRjaCBpdFxuICBlbGVtZW50Lm9uKCdjaGFuZ2UnLCBsaXN0ZW5lcik7XG5cbiAgY3RybC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgZWxlbWVudC52YWwoY3RybC4kaXNFbXB0eShjdHJsLiR2aWV3VmFsdWUpID8gJycgOiBjdHJsLiR2aWV3VmFsdWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiB3ZWVrUGFyc2VyKGlzb1dlZWssIGV4aXN0aW5nRGF0ZSkge1xuICBpZiAoaXNEYXRlKGlzb1dlZWspKSB7XG4gICAgcmV0dXJuIGlzb1dlZWs7XG4gIH1cblxuICBpZiAoaXNTdHJpbmcoaXNvV2VlaykpIHtcbiAgICBXRUVLX1JFR0VYUC5sYXN0SW5kZXggPSAwO1xuICAgIHZhciBwYXJ0cyA9IFdFRUtfUkVHRVhQLmV4ZWMoaXNvV2Vlayk7XG4gICAgaWYgKHBhcnRzKSB7XG4gICAgICB2YXIgeWVhciA9ICtwYXJ0c1sxXSxcbiAgICAgICAgICB3ZWVrID0gK3BhcnRzWzJdLFxuICAgICAgICAgIGhvdXJzID0gMCxcbiAgICAgICAgICBtaW51dGVzID0gMCxcbiAgICAgICAgICBzZWNvbmRzID0gMCxcbiAgICAgICAgICBtaWxsaXNlY29uZHMgPSAwLFxuICAgICAgICAgIGZpcnN0VGh1cnMgPSBnZXRGaXJzdFRodXJzZGF5T2ZZZWFyKHllYXIpLFxuICAgICAgICAgIGFkZERheXMgPSAod2VlayAtIDEpICogNztcblxuICAgICAgaWYgKGV4aXN0aW5nRGF0ZSkge1xuICAgICAgICBob3VycyA9IGV4aXN0aW5nRGF0ZS5nZXRIb3VycygpO1xuICAgICAgICBtaW51dGVzID0gZXhpc3RpbmdEYXRlLmdldE1pbnV0ZXMoKTtcbiAgICAgICAgc2Vjb25kcyA9IGV4aXN0aW5nRGF0ZS5nZXRTZWNvbmRzKCk7XG4gICAgICAgIG1pbGxpc2Vjb25kcyA9IGV4aXN0aW5nRGF0ZS5nZXRNaWxsaXNlY29uZHMoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBEYXRlKHllYXIsIDAsIGZpcnN0VGh1cnMuZ2V0RGF0ZSgpICsgYWRkRGF5cywgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIG1pbGxpc2Vjb25kcyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIE5hTjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGF0ZVBhcnNlcihyZWdleHAsIG1hcHBpbmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGlzbywgZGF0ZSkge1xuICAgIHZhciBwYXJ0cywgbWFwO1xuXG4gICAgaWYgKGlzRGF0ZShpc28pKSB7XG4gICAgICByZXR1cm4gaXNvO1xuICAgIH1cblxuICAgIGlmIChpc1N0cmluZyhpc28pKSB7XG4gICAgICAvLyBXaGVuIGEgZGF0ZSBpcyBKU09OJ2lmaWVkIHRvIHdyYXBzIGl0c2VsZiBpbnNpZGUgb2YgYW4gZXh0cmFcbiAgICAgIC8vIHNldCBvZiBkb3VibGUgcXVvdGVzLiBUaGlzIG1ha2VzIHRoZSBkYXRlIHBhcnNpbmcgY29kZSB1bmFibGVcbiAgICAgIC8vIHRvIG1hdGNoIHRoZSBkYXRlIHN0cmluZyBhbmQgcGFyc2UgaXQgYXMgYSBkYXRlLlxuICAgICAgaWYgKGlzby5jaGFyQXQoMCkgPT0gJ1wiJyAmJiBpc28uY2hhckF0KGlzby5sZW5ndGggLSAxKSA9PSAnXCInKSB7XG4gICAgICAgIGlzbyA9IGlzby5zdWJzdHJpbmcoMSwgaXNvLmxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgICAgaWYgKElTT19EQVRFX1JFR0VYUC50ZXN0KGlzbykpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGlzbyk7XG4gICAgICB9XG4gICAgICByZWdleHAubGFzdEluZGV4ID0gMDtcbiAgICAgIHBhcnRzID0gcmVnZXhwLmV4ZWMoaXNvKTtcblxuICAgICAgaWYgKHBhcnRzKSB7XG4gICAgICAgIHBhcnRzLnNoaWZ0KCk7XG4gICAgICAgIGlmIChkYXRlKSB7XG4gICAgICAgICAgbWFwID0ge1xuICAgICAgICAgICAgeXl5eTogZGF0ZS5nZXRGdWxsWWVhcigpLFxuICAgICAgICAgICAgTU06IGRhdGUuZ2V0TW9udGgoKSArIDEsXG4gICAgICAgICAgICBkZDogZGF0ZS5nZXREYXRlKCksXG4gICAgICAgICAgICBISDogZGF0ZS5nZXRIb3VycygpLFxuICAgICAgICAgICAgbW06IGRhdGUuZ2V0TWludXRlcygpLFxuICAgICAgICAgICAgc3M6IGRhdGUuZ2V0U2Vjb25kcygpLFxuICAgICAgICAgICAgc3NzOiBkYXRlLmdldE1pbGxpc2Vjb25kcygpIC8gMTAwMFxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWFwID0geyB5eXl5OiAxOTcwLCBNTTogMSwgZGQ6IDEsIEhIOiAwLCBtbTogMCwgc3M6IDAsIHNzczogMCB9O1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yRWFjaChwYXJ0cywgZnVuY3Rpb24ocGFydCwgaW5kZXgpIHtcbiAgICAgICAgICBpZiAoaW5kZXggPCBtYXBwaW5nLmxlbmd0aCkge1xuICAgICAgICAgICAgbWFwW21hcHBpbmdbaW5kZXhdXSA9ICtwYXJ0O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShtYXAueXl5eSwgbWFwLk1NIC0gMSwgbWFwLmRkLCBtYXAuSEgsIG1hcC5tbSwgbWFwLnNzIHx8IDAsIG1hcC5zc3MgKiAxMDAwIHx8IDApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBOYU47XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURhdGVJbnB1dFR5cGUodHlwZSwgcmVnZXhwLCBwYXJzZURhdGUsIGZvcm1hdCkge1xuICByZXR1cm4gZnVuY3Rpb24gZHluYW1pY0RhdGVJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3NlciwgJGZpbHRlcikge1xuICAgIGJhZElucHV0Q2hlY2tlcihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCk7XG4gICAgYmFzZUlucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKTtcbiAgICB2YXIgdGltZXpvbmUgPSBjdHJsICYmIGN0cmwuJG9wdGlvbnMgJiYgY3RybC4kb3B0aW9ucy50aW1lem9uZTtcbiAgICB2YXIgcHJldmlvdXNEYXRlO1xuXG4gICAgY3RybC4kJHBhcnNlck5hbWUgPSB0eXBlO1xuICAgIGN0cmwuJHBhcnNlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKGN0cmwuJGlzRW1wdHkodmFsdWUpKSByZXR1cm4gbnVsbDtcbiAgICAgIGlmIChyZWdleHAudGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgLy8gTm90ZTogV2UgY2Fubm90IHJlYWQgY3RybC4kbW9kZWxWYWx1ZSwgYXMgdGhlcmUgbWlnaHQgYmUgYSBkaWZmZXJlbnRcbiAgICAgICAgLy8gcGFyc2VyL2Zvcm1hdHRlciBpbiB0aGUgcHJvY2Vzc2luZyBjaGFpbiBzbyB0aGF0IHRoZSBtb2RlbFxuICAgICAgICAvLyBjb250YWlucyBzb21lIGRpZmZlcmVudCBkYXRhIGZvcm1hdCFcbiAgICAgICAgdmFyIHBhcnNlZERhdGUgPSBwYXJzZURhdGUodmFsdWUsIHByZXZpb3VzRGF0ZSk7XG4gICAgICAgIGlmICh0aW1lem9uZSA9PT0gJ1VUQycpIHtcbiAgICAgICAgICBwYXJzZWREYXRlLnNldE1pbnV0ZXMocGFyc2VkRGF0ZS5nZXRNaW51dGVzKCkgLSBwYXJzZWREYXRlLmdldFRpbWV6b25lT2Zmc2V0KCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZWREYXRlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9KTtcblxuICAgIGN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlICYmICFpc0RhdGUodmFsdWUpKSB7XG4gICAgICAgIHRocm93ICRuZ01vZGVsTWluRXJyKCdkYXRlZm10JywgJ0V4cGVjdGVkIGB7MH1gIHRvIGJlIGEgZGF0ZScsIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1ZhbGlkRGF0ZSh2YWx1ZSkpIHtcbiAgICAgICAgcHJldmlvdXNEYXRlID0gdmFsdWU7XG4gICAgICAgIGlmIChwcmV2aW91c0RhdGUgJiYgdGltZXpvbmUgPT09ICdVVEMnKSB7XG4gICAgICAgICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gNjAwMDAgKiBwcmV2aW91c0RhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICAgICAgICBwcmV2aW91c0RhdGUgPSBuZXcgRGF0ZShwcmV2aW91c0RhdGUuZ2V0VGltZSgpICsgdGltZXpvbmVPZmZzZXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAkZmlsdGVyKCdkYXRlJykodmFsdWUsIGZvcm1hdCwgdGltZXpvbmUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJldmlvdXNEYXRlID0gbnVsbDtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKGlzRGVmaW5lZChhdHRyLm1pbikgfHwgYXR0ci5uZ01pbikge1xuICAgICAgdmFyIG1pblZhbDtcbiAgICAgIGN0cmwuJHZhbGlkYXRvcnMubWluID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICFpc1ZhbGlkRGF0ZSh2YWx1ZSkgfHwgaXNVbmRlZmluZWQobWluVmFsKSB8fCBwYXJzZURhdGUodmFsdWUpID49IG1pblZhbDtcbiAgICAgIH07XG4gICAgICBhdHRyLiRvYnNlcnZlKCdtaW4nLCBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgbWluVmFsID0gcGFyc2VPYnNlcnZlZERhdGVWYWx1ZSh2YWwpO1xuICAgICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGVmaW5lZChhdHRyLm1heCkgfHwgYXR0ci5uZ01heCkge1xuICAgICAgdmFyIG1heFZhbDtcbiAgICAgIGN0cmwuJHZhbGlkYXRvcnMubWF4ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICFpc1ZhbGlkRGF0ZSh2YWx1ZSkgfHwgaXNVbmRlZmluZWQobWF4VmFsKSB8fCBwYXJzZURhdGUodmFsdWUpIDw9IG1heFZhbDtcbiAgICAgIH07XG4gICAgICBhdHRyLiRvYnNlcnZlKCdtYXgnLCBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgbWF4VmFsID0gcGFyc2VPYnNlcnZlZERhdGVWYWx1ZSh2YWwpO1xuICAgICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNWYWxpZERhdGUodmFsdWUpIHtcbiAgICAgIC8vIEludmFsaWQgRGF0ZTogZ2V0VGltZSgpIHJldHVybnMgTmFOXG4gICAgICByZXR1cm4gdmFsdWUgJiYgISh2YWx1ZS5nZXRUaW1lICYmIHZhbHVlLmdldFRpbWUoKSAhPT0gdmFsdWUuZ2V0VGltZSgpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZU9ic2VydmVkRGF0ZVZhbHVlKHZhbCkge1xuICAgICAgcmV0dXJuIGlzRGVmaW5lZCh2YWwpID8gKGlzRGF0ZSh2YWwpID8gdmFsIDogcGFyc2VEYXRlKHZhbCkpIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gYmFkSW5wdXRDaGVja2VyKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKSB7XG4gIHZhciBub2RlID0gZWxlbWVudFswXTtcbiAgdmFyIG5hdGl2ZVZhbGlkYXRpb24gPSBjdHJsLiQkaGFzTmF0aXZlVmFsaWRhdG9ycyA9IGlzT2JqZWN0KG5vZGUudmFsaWRpdHkpO1xuICBpZiAobmF0aXZlVmFsaWRhdGlvbikge1xuICAgIGN0cmwuJHBhcnNlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdmFyIHZhbGlkaXR5ID0gZWxlbWVudC5wcm9wKFZBTElESVRZX1NUQVRFX1BST1BFUlRZKSB8fCB7fTtcbiAgICAgIC8vIERldGVjdCBidWcgaW4gRkYzNSBmb3IgaW5wdXRbZW1haWxdIChodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMDY0NDMwKTpcbiAgICAgIC8vIC0gYWxzbyBzZXRzIHZhbGlkaXR5LmJhZElucHV0IChzaG91bGQgb25seSBiZSB2YWxpZGl0eS50eXBlTWlzbWF0Y2gpLlxuICAgICAgLy8gLSBzZWUgaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNlLW1haWwtc3RhdGUtKHR5cGU9ZW1haWwpXG4gICAgICAvLyAtIGNhbiBpZ25vcmUgdGhpcyBjYXNlIGFzIHdlIGNhbiBzdGlsbCByZWFkIG91dCB0aGUgZXJyb25lb3VzIGVtYWlsLi4uXG4gICAgICByZXR1cm4gdmFsaWRpdHkuYmFkSW5wdXQgJiYgIXZhbGlkaXR5LnR5cGVNaXNtYXRjaCA/IHVuZGVmaW5lZCA6IHZhbHVlO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIG51bWJlcklucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKSB7XG4gIGJhZElucHV0Q2hlY2tlcihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCk7XG4gIGJhc2VJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcik7XG5cbiAgY3RybC4kJHBhcnNlck5hbWUgPSAnbnVtYmVyJztcbiAgY3RybC4kcGFyc2Vycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKGN0cmwuJGlzRW1wdHkodmFsdWUpKSAgICAgIHJldHVybiBudWxsO1xuICAgIGlmIChOVU1CRVJfUkVHRVhQLnRlc3QodmFsdWUpKSByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSk7XG5cbiAgY3RybC4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKCFjdHJsLiRpc0VtcHR5KHZhbHVlKSkge1xuICAgICAgaWYgKCFpc051bWJlcih2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgJG5nTW9kZWxNaW5FcnIoJ251bWZtdCcsICdFeHBlY3RlZCBgezB9YCB0byBiZSBhIG51bWJlcicsIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gdmFsdWUudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9KTtcblxuICBpZiAoYXR0ci5taW4gfHwgYXR0ci5uZ01pbikge1xuICAgIHZhciBtaW5WYWw7XG4gICAgY3RybC4kdmFsaWRhdG9ycy5taW4gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmFsdWUpIHx8IGlzVW5kZWZpbmVkKG1pblZhbCkgfHwgdmFsdWUgPj0gbWluVmFsO1xuICAgIH07XG5cbiAgICBhdHRyLiRvYnNlcnZlKCdtaW4nLCBmdW5jdGlvbih2YWwpIHtcbiAgICAgIGlmIChpc0RlZmluZWQodmFsKSAmJiAhaXNOdW1iZXIodmFsKSkge1xuICAgICAgICB2YWwgPSBwYXJzZUZsb2F0KHZhbCwgMTApO1xuICAgICAgfVxuICAgICAgbWluVmFsID0gaXNOdW1iZXIodmFsKSAmJiAhaXNOYU4odmFsKSA/IHZhbCA6IHVuZGVmaW5lZDtcbiAgICAgIC8vIFRPRE8obWF0c2tvKTogaW1wbGVtZW50IHZhbGlkYXRlTGF0ZXIgdG8gcmVkdWNlIG51bWJlciBvZiB2YWxpZGF0aW9uc1xuICAgICAgY3RybC4kdmFsaWRhdGUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChhdHRyLm1heCB8fCBhdHRyLm5nTWF4KSB7XG4gICAgdmFyIG1heFZhbDtcbiAgICBjdHJsLiR2YWxpZGF0b3JzLm1heCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gY3RybC4kaXNFbXB0eSh2YWx1ZSkgfHwgaXNVbmRlZmluZWQobWF4VmFsKSB8fCB2YWx1ZSA8PSBtYXhWYWw7XG4gICAgfTtcblxuICAgIGF0dHIuJG9ic2VydmUoJ21heCcsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgaWYgKGlzRGVmaW5lZCh2YWwpICYmICFpc051bWJlcih2YWwpKSB7XG4gICAgICAgIHZhbCA9IHBhcnNlRmxvYXQodmFsLCAxMCk7XG4gICAgICB9XG4gICAgICBtYXhWYWwgPSBpc051bWJlcih2YWwpICYmICFpc05hTih2YWwpID8gdmFsIDogdW5kZWZpbmVkO1xuICAgICAgLy8gVE9ETyhtYXRza28pOiBpbXBsZW1lbnQgdmFsaWRhdGVMYXRlciB0byByZWR1Y2UgbnVtYmVyIG9mIHZhbGlkYXRpb25zXG4gICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVybElucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKSB7XG4gIC8vIE5vdGU6IG5vIGJhZElucHV0Q2hlY2tlciBoZXJlIGJ5IHB1cnBvc2UgYXMgYHVybGAgaXMgb25seSBhIHZhbGlkYXRpb25cbiAgLy8gaW4gYnJvd3NlcnMsIGkuZS4gd2UgY2FuIGFsd2F5cyByZWFkIG91dCBpbnB1dC52YWx1ZSBldmVuIGlmIGl0IGlzIG5vdCB2YWxpZCFcbiAgYmFzZUlucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKTtcbiAgc3RyaW5nQmFzZWRJbnB1dFR5cGUoY3RybCk7XG5cbiAgY3RybC4kJHBhcnNlck5hbWUgPSAndXJsJztcbiAgY3RybC4kdmFsaWRhdG9ycy51cmwgPSBmdW5jdGlvbihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpIHtcbiAgICB2YXIgdmFsdWUgPSBtb2RlbFZhbHVlIHx8IHZpZXdWYWx1ZTtcbiAgICByZXR1cm4gY3RybC4kaXNFbXB0eSh2YWx1ZSkgfHwgVVJMX1JFR0VYUC50ZXN0KHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZW1haWxJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcikge1xuICAvLyBOb3RlOiBubyBiYWRJbnB1dENoZWNrZXIgaGVyZSBieSBwdXJwb3NlIGFzIGB1cmxgIGlzIG9ubHkgYSB2YWxpZGF0aW9uXG4gIC8vIGluIGJyb3dzZXJzLCBpLmUuIHdlIGNhbiBhbHdheXMgcmVhZCBvdXQgaW5wdXQudmFsdWUgZXZlbiBpZiBpdCBpcyBub3QgdmFsaWQhXG4gIGJhc2VJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcik7XG4gIHN0cmluZ0Jhc2VkSW5wdXRUeXBlKGN0cmwpO1xuXG4gIGN0cmwuJCRwYXJzZXJOYW1lID0gJ2VtYWlsJztcbiAgY3RybC4kdmFsaWRhdG9ycy5lbWFpbCA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICAgIHZhciB2YWx1ZSA9IG1vZGVsVmFsdWUgfHwgdmlld1ZhbHVlO1xuICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KHZhbHVlKSB8fCBFTUFJTF9SRUdFWFAudGVzdCh2YWx1ZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJhZGlvSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKSB7XG4gIC8vIG1ha2UgdGhlIG5hbWUgdW5pcXVlLCBpZiBub3QgZGVmaW5lZFxuICBpZiAoaXNVbmRlZmluZWQoYXR0ci5uYW1lKSkge1xuICAgIGVsZW1lbnQuYXR0cignbmFtZScsIG5leHRVaWQoKSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbihldikge1xuICAgIGlmIChlbGVtZW50WzBdLmNoZWNrZWQpIHtcbiAgICAgIGN0cmwuJHNldFZpZXdWYWx1ZShhdHRyLnZhbHVlLCBldiAmJiBldi50eXBlKTtcbiAgICB9XG4gIH07XG5cbiAgZWxlbWVudC5vbignY2xpY2snLCBsaXN0ZW5lcik7XG5cbiAgY3RybC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlID0gYXR0ci52YWx1ZTtcbiAgICBlbGVtZW50WzBdLmNoZWNrZWQgPSAodmFsdWUgPT0gY3RybC4kdmlld1ZhbHVlKTtcbiAgfTtcblxuICBhdHRyLiRvYnNlcnZlKCd2YWx1ZScsIGN0cmwuJHJlbmRlcik7XG59XG5cbmZ1bmN0aW9uIHBhcnNlQ29uc3RhbnRFeHByKCRwYXJzZSwgY29udGV4dCwgbmFtZSwgZXhwcmVzc2lvbiwgZmFsbGJhY2spIHtcbiAgdmFyIHBhcnNlRm47XG4gIGlmIChpc0RlZmluZWQoZXhwcmVzc2lvbikpIHtcbiAgICBwYXJzZUZuID0gJHBhcnNlKGV4cHJlc3Npb24pO1xuICAgIGlmICghcGFyc2VGbi5jb25zdGFudCkge1xuICAgICAgdGhyb3cgbWluRXJyKCduZ01vZGVsJykoJ2NvbnN0ZXhwcicsICdFeHBlY3RlZCBjb25zdGFudCBleHByZXNzaW9uIGZvciBgezB9YCwgYnV0IHNhdyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2B7MX1gLicsIG5hbWUsIGV4cHJlc3Npb24pO1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VGbihjb250ZXh0KTtcbiAgfVxuICByZXR1cm4gZmFsbGJhY2s7XG59XG5cbmZ1bmN0aW9uIGNoZWNrYm94SW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIsICRmaWx0ZXIsICRwYXJzZSkge1xuICB2YXIgdHJ1ZVZhbHVlID0gcGFyc2VDb25zdGFudEV4cHIoJHBhcnNlLCBzY29wZSwgJ25nVHJ1ZVZhbHVlJywgYXR0ci5uZ1RydWVWYWx1ZSwgdHJ1ZSk7XG4gIHZhciBmYWxzZVZhbHVlID0gcGFyc2VDb25zdGFudEV4cHIoJHBhcnNlLCBzY29wZSwgJ25nRmFsc2VWYWx1ZScsIGF0dHIubmdGYWxzZVZhbHVlLCBmYWxzZSk7XG5cbiAgdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24oZXYpIHtcbiAgICBjdHJsLiRzZXRWaWV3VmFsdWUoZWxlbWVudFswXS5jaGVja2VkLCBldiAmJiBldi50eXBlKTtcbiAgfTtcblxuICBlbGVtZW50Lm9uKCdjbGljaycsIGxpc3RlbmVyKTtcblxuICBjdHJsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICBlbGVtZW50WzBdLmNoZWNrZWQgPSBjdHJsLiR2aWV3VmFsdWU7XG4gIH07XG5cbiAgLy8gT3ZlcnJpZGUgdGhlIHN0YW5kYXJkIGAkaXNFbXB0eWAgYmVjYXVzZSB0aGUgJHZpZXdWYWx1ZSBvZiBhbiBlbXB0eSBjaGVja2JveCBpcyBhbHdheXMgc2V0IHRvIGBmYWxzZWBcbiAgLy8gVGhpcyBpcyBiZWNhdXNlIG9mIHRoZSBwYXJzZXIgYmVsb3csIHdoaWNoIGNvbXBhcmVzIHRoZSBgJG1vZGVsVmFsdWVgIHdpdGggYHRydWVWYWx1ZWAgdG8gY29udmVydFxuICAvLyBpdCB0byBhIGJvb2xlYW4uXG4gIGN0cmwuJGlzRW1wdHkgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gZmFsc2U7XG4gIH07XG5cbiAgY3RybC4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGVxdWFscyh2YWx1ZSwgdHJ1ZVZhbHVlKTtcbiAgfSk7XG5cbiAgY3RybC4kcGFyc2Vycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID8gdHJ1ZVZhbHVlIDogZmFsc2VWYWx1ZTtcbiAgfSk7XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSB0ZXh0YXJlYVxuICogQHJlc3RyaWN0IEVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEhUTUwgdGV4dGFyZWEgZWxlbWVudCBjb250cm9sIHdpdGggYW5ndWxhciBkYXRhLWJpbmRpbmcuIFRoZSBkYXRhLWJpbmRpbmcgYW5kIHZhbGlkYXRpb25cbiAqIHByb3BlcnRpZXMgb2YgdGhpcyBlbGVtZW50IGFyZSBleGFjdGx5IHRoZSBzYW1lIGFzIHRob3NlIG9mIHRoZVxuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTppbnB1dCBpbnB1dCBlbGVtZW50fS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNaW5sZW5ndGggU2V0cyBgbWlubGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgc2hvcnRlciB0aGFuXG4gKiAgICBtaW5sZW5ndGguXG4gKiBAcGFyYW0ge251bWJlcj19IG5nTWF4bGVuZ3RoIFNldHMgYG1heGxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIGxvbmdlciB0aGFuXG4gKiAgICBtYXhsZW5ndGguIFNldHRpbmcgdGhlIGF0dHJpYnV0ZSB0byBhIG5lZ2F0aXZlIG9yIG5vbi1udW1lcmljIHZhbHVlLCBhbGxvd3MgdmlldyB2YWx1ZXMgb2YgYW55XG4gKiAgICBsZW5ndGguXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nUGF0dGVybiBTZXRzIGBwYXR0ZXJuYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZG9lcyBub3QgbWF0Y2ggdGhlXG4gKiAgICBSZWdFeHAgcGF0dGVybiBleHByZXNzaW9uLiBFeHBlY3RlZCB2YWx1ZSBpcyBgL3JlZ2V4cC9gIGZvciBpbmxpbmUgcGF0dGVybnMgb3IgYHJlZ2V4cGAgZm9yXG4gKiAgICBwYXR0ZXJucyBkZWZpbmVkIGFzIHNjb3BlIGV4cHJlc3Npb25zLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICogQHBhcmFtIHtib29sZWFuPX0gW25nVHJpbT10cnVlXSBJZiBzZXQgdG8gZmFsc2UgQW5ndWxhciB3aWxsIG5vdCBhdXRvbWF0aWNhbGx5IHRyaW0gdGhlIGlucHV0LlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBpbnB1dFxuICogQHJlc3RyaWN0IEVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEhUTUwgaW5wdXQgZWxlbWVudCBjb250cm9sLiBXaGVuIHVzZWQgdG9nZXRoZXIgd2l0aCB7QGxpbmsgbmdNb2RlbCBgbmdNb2RlbGB9LCBpdCBwcm92aWRlcyBkYXRhLWJpbmRpbmcsXG4gKiBpbnB1dCBzdGF0ZSBjb250cm9sLCBhbmQgdmFsaWRhdGlvbi5cbiAqIElucHV0IGNvbnRyb2wgZm9sbG93cyBIVE1MNSBpbnB1dCB0eXBlcyBhbmQgcG9seWZpbGxzIHRoZSBIVE1MNSB2YWxpZGF0aW9uIGJlaGF2aW9yIGZvciBvbGRlciBicm93c2Vycy5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipOb3RlOioqIE5vdCBldmVyeSBmZWF0dXJlIG9mZmVyZWQgaXMgYXZhaWxhYmxlIGZvciBhbGwgaW5wdXQgdHlwZXMuXG4gKiBTcGVjaWZpY2FsbHksIGRhdGEgYmluZGluZyBhbmQgZXZlbnQgaGFuZGxpbmcgdmlhIGBuZy1tb2RlbGAgaXMgdW5zdXBwb3J0ZWQgZm9yIGBpbnB1dFtmaWxlXWAuXG4gKiA8L2Rpdj5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBuZ1JlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgaWYgc2V0IHRvIHRydWVcbiAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNaW5sZW5ndGggU2V0cyBgbWlubGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgc2hvcnRlciB0aGFuXG4gKiAgICBtaW5sZW5ndGguXG4gKiBAcGFyYW0ge251bWJlcj19IG5nTWF4bGVuZ3RoIFNldHMgYG1heGxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIGxvbmdlciB0aGFuXG4gKiAgICBtYXhsZW5ndGguIFNldHRpbmcgdGhlIGF0dHJpYnV0ZSB0byBhIG5lZ2F0aXZlIG9yIG5vbi1udW1lcmljIHZhbHVlLCBhbGxvd3MgdmlldyB2YWx1ZXMgb2YgYW55XG4gKiAgICBsZW5ndGguXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nUGF0dGVybiBTZXRzIGBwYXR0ZXJuYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZG9lcyBub3QgbWF0Y2ggdGhlXG4gKiAgICBSZWdFeHAgcGF0dGVybiBleHByZXNzaW9uLiBFeHBlY3RlZCB2YWx1ZSBpcyBgL3JlZ2V4cC9gIGZvciBpbmxpbmUgcGF0dGVybnMgb3IgYHJlZ2V4cGAgZm9yXG4gKiAgICBwYXR0ZXJucyBkZWZpbmVkIGFzIHNjb3BlIGV4cHJlc3Npb25zLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICogQHBhcmFtIHtib29sZWFuPX0gW25nVHJpbT10cnVlXSBJZiBzZXQgdG8gZmFsc2UgQW5ndWxhciB3aWxsIG5vdCBhdXRvbWF0aWNhbGx5IHRyaW0gdGhlIGlucHV0LlxuICogICAgVGhpcyBwYXJhbWV0ZXIgaXMgaWdub3JlZCBmb3IgaW5wdXRbdHlwZT1wYXNzd29yZF0gY29udHJvbHMsIHdoaWNoIHdpbGwgbmV2ZXIgdHJpbSB0aGVcbiAqICAgIGlucHV0LlxuICpcbiAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGUgbmFtZT1cImlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cImlucHV0RXhhbXBsZVwiPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdpbnB1dEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICRzY29wZS51c2VyID0ge25hbWU6ICdndWVzdCcsIGxhc3Q6ICd2aXNpdG9yJ307XG4gICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIj5cbiAgICAgICAgICAgVXNlciBuYW1lOiA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwidXNlck5hbWVcIiBuZy1tb2RlbD1cInVzZXIubmFtZVwiIHJlcXVpcmVkPlxuICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS51c2VyTmFtZS4kZXJyb3IucmVxdWlyZWRcIj5cbiAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+PGJyPlxuICAgICAgICAgICBMYXN0IG5hbWU6IDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJsYXN0TmFtZVwiIG5nLW1vZGVsPVwidXNlci5sYXN0XCJcbiAgICAgICAgICAgICBuZy1taW5sZW5ndGg9XCIzXCIgbmctbWF4bGVuZ3RoPVwiMTBcIj5cbiAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0ubGFzdE5hbWUuJGVycm9yLm1pbmxlbmd0aFwiPlxuICAgICAgICAgICAgIFRvbyBzaG9ydCE8L3NwYW4+XG4gICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmxhc3ROYW1lLiRlcnJvci5tYXhsZW5ndGhcIj5cbiAgICAgICAgICAgICBUb28gbG9uZyE8L3NwYW4+PGJyPlxuICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgPGhyPlxuICAgICAgICAgPHR0PnVzZXIgPSB7e3VzZXJ9fTwvdHQ+PGJyLz5cbiAgICAgICAgIDx0dD5teUZvcm0udXNlck5hbWUuJHZhbGlkID0ge3tteUZvcm0udXNlck5hbWUuJHZhbGlkfX08L3R0Pjxicj5cbiAgICAgICAgIDx0dD5teUZvcm0udXNlck5hbWUuJGVycm9yID0ge3tteUZvcm0udXNlck5hbWUuJGVycm9yfX08L3R0Pjxicj5cbiAgICAgICAgIDx0dD5teUZvcm0ubGFzdE5hbWUuJHZhbGlkID0ge3tteUZvcm0ubGFzdE5hbWUuJHZhbGlkfX08L3R0Pjxicj5cbiAgICAgICAgIDx0dD5teUZvcm0ubGFzdE5hbWUuJGVycm9yID0ge3tteUZvcm0ubGFzdE5hbWUuJGVycm9yfX08L3R0Pjxicj5cbiAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxicj5cbiAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyPlxuICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IubWlubGVuZ3RoID0ge3shIW15Rm9ybS4kZXJyb3IubWlubGVuZ3RofX08L3R0Pjxicj5cbiAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLm1heGxlbmd0aCA9IHt7ISFteUZvcm0uJGVycm9yLm1heGxlbmd0aH19PC90dD48YnI+XG4gICAgICAgPC9kaXY+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIHZhciB1c2VyID0gZWxlbWVudChieS5leGFjdEJpbmRpbmcoJ3VzZXInKSk7XG4gICAgICAgIHZhciB1c2VyTmFtZVZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0udXNlck5hbWUuJHZhbGlkJykpO1xuICAgICAgICB2YXIgbGFzdE5hbWVWYWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmxhc3ROYW1lLiR2YWxpZCcpKTtcbiAgICAgICAgdmFyIGxhc3ROYW1lRXJyb3IgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5sYXN0TmFtZS4kZXJyb3InKSk7XG4gICAgICAgIHZhciBmb3JtVmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS4kdmFsaWQnKSk7XG4gICAgICAgIHZhciB1c2VyTmFtZUlucHV0ID0gZWxlbWVudChieS5tb2RlbCgndXNlci5uYW1lJykpO1xuICAgICAgICB2YXIgdXNlckxhc3RJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3VzZXIubGFzdCcpKTtcblxuICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBleHBlY3QodXNlci5nZXRUZXh0KCkpLnRvQ29udGFpbigne1wibmFtZVwiOlwiZ3Vlc3RcIixcImxhc3RcIjpcInZpc2l0b3JcIn0nKTtcbiAgICAgICAgICBleHBlY3QodXNlck5hbWVWYWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICAgICAgICAgIGV4cGVjdChmb3JtVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5IHdoZW4gcmVxdWlyZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB1c2VyTmFtZUlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgdXNlck5hbWVJbnB1dC5zZW5kS2V5cygnJyk7XG5cbiAgICAgICAgICBleHBlY3QodXNlci5nZXRUZXh0KCkpLnRvQ29udGFpbigne1wibGFzdFwiOlwidmlzaXRvclwifScpO1xuICAgICAgICAgIGV4cGVjdCh1c2VyTmFtZVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIGV4cGVjdChmb3JtVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgYmUgdmFsaWQgaWYgZW1wdHkgd2hlbiBtaW4gbGVuZ3RoIGlzIHNldCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHVzZXJMYXN0SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICB1c2VyTGFzdElucHV0LnNlbmRLZXlzKCcnKTtcblxuICAgICAgICAgIGV4cGVjdCh1c2VyLmdldFRleHQoKSkudG9Db250YWluKCd7XCJuYW1lXCI6XCJndWVzdFwiLFwibGFzdFwiOlwiXCJ9Jyk7XG4gICAgICAgICAgZXhwZWN0KGxhc3ROYW1lVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAgICAgICAgICBleHBlY3QoZm9ybVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBsZXNzIHRoYW4gcmVxdWlyZWQgbWluIGxlbmd0aCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHVzZXJMYXN0SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICB1c2VyTGFzdElucHV0LnNlbmRLZXlzKCd4eCcpO1xuXG4gICAgICAgICAgZXhwZWN0KHVzZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3tcIm5hbWVcIjpcImd1ZXN0XCJ9Jyk7XG4gICAgICAgICAgZXhwZWN0KGxhc3ROYW1lVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgZXhwZWN0KGxhc3ROYW1lRXJyb3IuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ21pbmxlbmd0aCcpO1xuICAgICAgICAgIGV4cGVjdChmb3JtVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBsb25nZXIgdGhhbiBtYXggbGVuZ3RoJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdXNlckxhc3RJbnB1dC5jbGVhcigpO1xuICAgICAgICAgIHVzZXJMYXN0SW5wdXQuc2VuZEtleXMoJ3NvbWUgcmlkaWN1bG91c2x5IGxvbmcgbmFtZScpO1xuXG4gICAgICAgICAgZXhwZWN0KHVzZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3tcIm5hbWVcIjpcImd1ZXN0XCJ9Jyk7XG4gICAgICAgICAgZXhwZWN0KGxhc3ROYW1lVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgZXhwZWN0KGxhc3ROYW1lRXJyb3IuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ21heGxlbmd0aCcpO1xuICAgICAgICAgIGV4cGVjdChmb3JtVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIGlucHV0RGlyZWN0aXZlID0gWyckYnJvd3NlcicsICckc25pZmZlcicsICckZmlsdGVyJywgJyRwYXJzZScsXG4gICAgZnVuY3Rpb24oJGJyb3dzZXIsICRzbmlmZmVyLCAkZmlsdGVyLCAkcGFyc2UpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHJlcXVpcmU6IFsnP25nTW9kZWwnXSxcbiAgICBsaW5rOiB7XG4gICAgICBwcmU6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJscykge1xuICAgICAgICBpZiAoY3RybHNbMF0pIHtcbiAgICAgICAgICAoaW5wdXRUeXBlW2xvd2VyY2FzZShhdHRyLnR5cGUpXSB8fCBpbnB1dFR5cGUudGV4dCkoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmxzWzBdLCAkc25pZmZlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGJyb3dzZXIsICRmaWx0ZXIsICRwYXJzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG59XTtcblxuXG5cbnZhciBDT05TVEFOVF9WQUxVRV9SRUdFWFAgPSAvXih0cnVlfGZhbHNlfFxcZCspJC87XG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nVmFsdWVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEJpbmRzIHRoZSBnaXZlbiBleHByZXNzaW9uIHRvIHRoZSB2YWx1ZSBvZiBgPG9wdGlvbj5gIG9yIHtAbGluayBpbnB1dFtyYWRpb10gYGlucHV0W3JhZGlvXWB9LFxuICogc28gdGhhdCB3aGVuIHRoZSBlbGVtZW50IGlzIHNlbGVjdGVkLCB0aGUge0BsaW5rIG5nTW9kZWwgYG5nTW9kZWxgfSBvZiB0aGF0IGVsZW1lbnQgaXMgc2V0IHRvXG4gKiB0aGUgYm91bmQgdmFsdWUuXG4gKlxuICogYG5nVmFsdWVgIGlzIHVzZWZ1bCB3aGVuIGR5bmFtaWNhbGx5IGdlbmVyYXRpbmcgbGlzdHMgb2YgcmFkaW8gYnV0dG9ucyB1c2luZ1xuICoge0BsaW5rIG5nUmVwZWF0IGBuZ1JlcGVhdGB9LCBhcyBzaG93biBiZWxvdy5cbiAqXG4gKiBMaWtld2lzZSwgYG5nVmFsdWVgIGNhbiBiZSB1c2VkIHRvIGdlbmVyYXRlIGA8b3B0aW9uPmAgZWxlbWVudHMgZm9yXG4gKiB0aGUge0BsaW5rIHNlbGVjdCBgc2VsZWN0YH0gZWxlbWVudC4gSW4gdGhhdCBjYXNlIGhvd2V2ZXIsIG9ubHkgc3RyaW5ncyBhcmUgc3VwcG9ydGVkXG4gKiBmb3IgdGhlIGB2YWx1ZSBgYXR0cmlidXRlLCBzbyB0aGUgcmVzdWx0aW5nIGBuZ01vZGVsYCB3aWxsIGFsd2F5cyBiZSBhIHN0cmluZy5cbiAqIFN1cHBvcnQgZm9yIGBzZWxlY3RgIG1vZGVscyB3aXRoIG5vbi1zdHJpbmcgdmFsdWVzIGlzIGF2YWlsYWJsZSB2aWEgYG5nT3B0aW9uc2AuXG4gKlxuICogQGVsZW1lbnQgaW5wdXRcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdWYWx1ZSBhbmd1bGFyIGV4cHJlc3Npb24sIHdob3NlIHZhbHVlIHdpbGwgYmUgYm91bmQgdG8gdGhlIGB2YWx1ZWAgYXR0cmlidXRlXG4gKiAgIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnRcbiAqXG4gKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlIG5hbWU9XCJuZ1ZhbHVlLWRpcmVjdGl2ZVwiIG1vZHVsZT1cInZhbHVlRXhhbXBsZVwiPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCd2YWx1ZUV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICRzY29wZS5uYW1lcyA9IFsncGl6emEnLCAndW5pY29ybnMnLCAncm9ib3RzJ107XG4gICAgICAgICAgICAgICRzY29wZS5teSA9IHsgZmF2b3JpdGU6ICd1bmljb3JucycgfTtcbiAgICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgPGZvcm0gbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgPGgyPldoaWNoIGlzIHlvdXIgZmF2b3JpdGU/PC9oMj5cbiAgICAgICAgICAgIDxsYWJlbCBuZy1yZXBlYXQ9XCJuYW1lIGluIG5hbWVzXCIgZm9yPVwie3tuYW1lfX1cIj5cbiAgICAgICAgICAgICAge3tuYW1lfX1cbiAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiXG4gICAgICAgICAgICAgICAgICAgICBuZy1tb2RlbD1cIm15LmZhdm9yaXRlXCJcbiAgICAgICAgICAgICAgICAgICAgIG5nLXZhbHVlPVwibmFtZVwiXG4gICAgICAgICAgICAgICAgICAgICBpZD1cInt7bmFtZX19XCJcbiAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJmYXZvcml0ZVwiPlxuICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICA8ZGl2PllvdSBjaG9zZSB7e215LmZhdm9yaXRlfX08L2Rpdj5cbiAgICAgICAgPC9mb3JtPlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICB2YXIgZmF2b3JpdGUgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215LmZhdm9yaXRlJykpO1xuXG4gICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV4cGVjdChmYXZvcml0ZS5nZXRUZXh0KCkpLnRvQ29udGFpbigndW5pY29ybnMnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgYmluZCB0aGUgdmFsdWVzIHRvIHRoZSBpbnB1dHMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBlbGVtZW50LmFsbChieS5tb2RlbCgnbXkuZmF2b3JpdGUnKSkuZ2V0KDApLmNsaWNrKCk7XG4gICAgICAgICAgZXhwZWN0KGZhdm9yaXRlLmdldFRleHQoKSkudG9Db250YWluKCdwaXp6YScpO1xuICAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ1ZhbHVlRGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBwcmlvcml0eTogMTAwLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uKHRwbCwgdHBsQXR0cikge1xuICAgICAgaWYgKENPTlNUQU5UX1ZBTFVFX1JFR0VYUC50ZXN0KHRwbEF0dHIubmdWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5nVmFsdWVDb25zdGFudExpbmsoc2NvcGUsIGVsbSwgYXR0cikge1xuICAgICAgICAgIGF0dHIuJHNldCgndmFsdWUnLCBzY29wZS4kZXZhbChhdHRyLm5nVmFsdWUpKTtcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBuZ1ZhbHVlTGluayhzY29wZSwgZWxtLCBhdHRyKSB7XG4gICAgICAgICAgc2NvcGUuJHdhdGNoKGF0dHIubmdWYWx1ZSwgZnVuY3Rpb24gdmFsdWVXYXRjaEFjdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgYXR0ci4kc2V0KCd2YWx1ZScsIHZhbHVlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQmluZFxuICogQHJlc3RyaWN0IEFDXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nQmluZGAgYXR0cmlidXRlIHRlbGxzIEFuZ3VsYXIgdG8gcmVwbGFjZSB0aGUgdGV4dCBjb250ZW50IG9mIHRoZSBzcGVjaWZpZWQgSFRNTCBlbGVtZW50XG4gKiB3aXRoIHRoZSB2YWx1ZSBvZiBhIGdpdmVuIGV4cHJlc3Npb24sIGFuZCB0byB1cGRhdGUgdGhlIHRleHQgY29udGVudCB3aGVuIHRoZSB2YWx1ZSBvZiB0aGF0XG4gKiBleHByZXNzaW9uIGNoYW5nZXMuXG4gKlxuICogVHlwaWNhbGx5LCB5b3UgZG9uJ3QgdXNlIGBuZ0JpbmRgIGRpcmVjdGx5LCBidXQgaW5zdGVhZCB5b3UgdXNlIHRoZSBkb3VibGUgY3VybHkgbWFya3VwIGxpa2VcbiAqIGB7eyBleHByZXNzaW9uIH19YCB3aGljaCBpcyBzaW1pbGFyIGJ1dCBsZXNzIHZlcmJvc2UuXG4gKlxuICogSXQgaXMgcHJlZmVyYWJsZSB0byB1c2UgYG5nQmluZGAgaW5zdGVhZCBvZiBge3sgZXhwcmVzc2lvbiB9fWAgaWYgYSB0ZW1wbGF0ZSBpcyBtb21lbnRhcmlseVxuICogZGlzcGxheWVkIGJ5IHRoZSBicm93c2VyIGluIGl0cyByYXcgc3RhdGUgYmVmb3JlIEFuZ3VsYXIgY29tcGlsZXMgaXQuIFNpbmNlIGBuZ0JpbmRgIGlzIGFuXG4gKiBlbGVtZW50IGF0dHJpYnV0ZSwgaXQgbWFrZXMgdGhlIGJpbmRpbmdzIGludmlzaWJsZSB0byB0aGUgdXNlciB3aGlsZSB0aGUgcGFnZSBpcyBsb2FkaW5nLlxuICpcbiAqIEFuIGFsdGVybmF0aXZlIHNvbHV0aW9uIHRvIHRoaXMgcHJvYmxlbSB3b3VsZCBiZSB1c2luZyB0aGVcbiAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbG9hayBuZ0Nsb2FrfSBkaXJlY3RpdmUuXG4gKlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0JpbmQge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUuXG4gKlxuICogQGV4YW1wbGVcbiAqIEVudGVyIGEgbmFtZSBpbiB0aGUgTGl2ZSBQcmV2aWV3IHRleHQgYm94OyB0aGUgZ3JlZXRpbmcgYmVsb3cgdGhlIHRleHQgYm94IGNoYW5nZXMgaW5zdGFudGx5LlxuICAgPGV4YW1wbGUgbW9kdWxlPVwiYmluZEV4YW1wbGVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2JpbmRFeGFtcGxlJywgW10pXG4gICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgJHNjb3BlLm5hbWUgPSAnV2hpcmxlZCc7XG4gICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgRW50ZXIgbmFtZTogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJuYW1lXCI+PGJyPlxuICAgICAgICAgSGVsbG8gPHNwYW4gbmctYmluZD1cIm5hbWVcIj48L3NwYW4+IVxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLWJpbmQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIHZhciBuYW1lSW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCduYW1lJykpO1xuXG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCduYW1lJykpLmdldFRleHQoKSkudG9CZSgnV2hpcmxlZCcpO1xuICAgICAgICAgbmFtZUlucHV0LmNsZWFyKCk7XG4gICAgICAgICBuYW1lSW5wdXQuc2VuZEtleXMoJ3dvcmxkJyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCduYW1lJykpLmdldFRleHQoKSkudG9CZSgnd29ybGQnKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG52YXIgbmdCaW5kRGlyZWN0aXZlID0gWyckY29tcGlsZScsIGZ1bmN0aW9uKCRjb21waWxlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBQycsXG4gICAgY29tcGlsZTogZnVuY3Rpb24gbmdCaW5kQ29tcGlsZSh0ZW1wbGF0ZUVsZW1lbnQpIHtcbiAgICAgICRjb21waWxlLiQkYWRkQmluZGluZ0NsYXNzKHRlbXBsYXRlRWxlbWVudCk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gbmdCaW5kTGluayhzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgICAkY29tcGlsZS4kJGFkZEJpbmRpbmdJbmZvKGVsZW1lbnQsIGF0dHIubmdCaW5kKTtcbiAgICAgICAgZWxlbWVudCA9IGVsZW1lbnRbMF07XG4gICAgICAgIHNjb3BlLiR3YXRjaChhdHRyLm5nQmluZCwgZnVuY3Rpb24gbmdCaW5kV2F0Y2hBY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gdmFsdWUgPT09IHVuZGVmaW5lZCA/ICcnIDogdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XTtcblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQmluZFRlbXBsYXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nQmluZFRlbXBsYXRlYCBkaXJlY3RpdmUgc3BlY2lmaWVzIHRoYXQgdGhlIGVsZW1lbnRcbiAqIHRleHQgY29udGVudCBzaG91bGQgYmUgcmVwbGFjZWQgd2l0aCB0aGUgaW50ZXJwb2xhdGlvbiBvZiB0aGUgdGVtcGxhdGVcbiAqIGluIHRoZSBgbmdCaW5kVGVtcGxhdGVgIGF0dHJpYnV0ZS5cbiAqIFVubGlrZSBgbmdCaW5kYCwgdGhlIGBuZ0JpbmRUZW1wbGF0ZWAgY2FuIGNvbnRhaW4gbXVsdGlwbGUgYHt7YCBgfX1gXG4gKiBleHByZXNzaW9ucy4gVGhpcyBkaXJlY3RpdmUgaXMgbmVlZGVkIHNpbmNlIHNvbWUgSFRNTCBlbGVtZW50c1xuICogKHN1Y2ggYXMgVElUTEUgYW5kIE9QVElPTikgY2Fubm90IGNvbnRhaW4gU1BBTiBlbGVtZW50cy5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7c3RyaW5nfSBuZ0JpbmRUZW1wbGF0ZSB0ZW1wbGF0ZSBvZiBmb3JtXG4gKiAgIDx0dD57ezwvdHQ+IDx0dD5leHByZXNzaW9uPC90dD4gPHR0Pn19PC90dD4gdG8gZXZhbC5cbiAqXG4gKiBAZXhhbXBsZVxuICogVHJ5IGl0IGhlcmU6IGVudGVyIHRleHQgaW4gdGV4dCBib3ggYW5kIHdhdGNoIHRoZSBncmVldGluZyBjaGFuZ2UuXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJiaW5kRXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnYmluZEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAkc2NvcGUuc2FsdXRhdGlvbiA9ICdIZWxsbyc7XG4gICAgICAgICAgICAgJHNjb3BlLm5hbWUgPSAnV29ybGQnO1xuICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgU2FsdXRhdGlvbjogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJzYWx1dGF0aW9uXCI+PGJyPlxuICAgICAgICBOYW1lOiA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cIm5hbWVcIj48YnI+XG4gICAgICAgIDxwcmUgbmctYmluZC10ZW1wbGF0ZT1cInt7c2FsdXRhdGlvbn19IHt7bmFtZX19IVwiPjwvcHJlPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLWJpbmQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIHZhciBzYWx1dGF0aW9uRWxlbSA9IGVsZW1lbnQoYnkuYmluZGluZygnc2FsdXRhdGlvbicpKTtcbiAgICAgICAgIHZhciBzYWx1dGF0aW9uSW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdzYWx1dGF0aW9uJykpO1xuICAgICAgICAgdmFyIG5hbWVJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ25hbWUnKSk7XG5cbiAgICAgICAgIGV4cGVjdChzYWx1dGF0aW9uRWxlbS5nZXRUZXh0KCkpLnRvQmUoJ0hlbGxvIFdvcmxkIScpO1xuXG4gICAgICAgICBzYWx1dGF0aW9uSW5wdXQuY2xlYXIoKTtcbiAgICAgICAgIHNhbHV0YXRpb25JbnB1dC5zZW5kS2V5cygnR3JlZXRpbmdzJyk7XG4gICAgICAgICBuYW1lSW5wdXQuY2xlYXIoKTtcbiAgICAgICAgIG5hbWVJbnB1dC5zZW5kS2V5cygndXNlcicpO1xuXG4gICAgICAgICBleHBlY3Qoc2FsdXRhdGlvbkVsZW0uZ2V0VGV4dCgpKS50b0JlKCdHcmVldGluZ3MgdXNlciEnKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG52YXIgbmdCaW5kVGVtcGxhdGVEaXJlY3RpdmUgPSBbJyRpbnRlcnBvbGF0ZScsICckY29tcGlsZScsIGZ1bmN0aW9uKCRpbnRlcnBvbGF0ZSwgJGNvbXBpbGUpIHtcbiAgcmV0dXJuIHtcbiAgICBjb21waWxlOiBmdW5jdGlvbiBuZ0JpbmRUZW1wbGF0ZUNvbXBpbGUodGVtcGxhdGVFbGVtZW50KSB7XG4gICAgICAkY29tcGlsZS4kJGFkZEJpbmRpbmdDbGFzcyh0ZW1wbGF0ZUVsZW1lbnQpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5nQmluZFRlbXBsYXRlTGluayhzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgICB2YXIgaW50ZXJwb2xhdGVGbiA9ICRpbnRlcnBvbGF0ZShlbGVtZW50LmF0dHIoYXR0ci4kYXR0ci5uZ0JpbmRUZW1wbGF0ZSkpO1xuICAgICAgICAkY29tcGlsZS4kJGFkZEJpbmRpbmdJbmZvKGVsZW1lbnQsIGludGVycG9sYXRlRm4uZXhwcmVzc2lvbnMpO1xuICAgICAgICBlbGVtZW50ID0gZWxlbWVudFswXTtcbiAgICAgICAgYXR0ci4kb2JzZXJ2ZSgnbmdCaW5kVGVtcGxhdGUnLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIGVsZW1lbnQudGV4dENvbnRlbnQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gJycgOiB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1dO1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdCaW5kSHRtbFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRXZhbHVhdGVzIHRoZSBleHByZXNzaW9uIGFuZCBpbnNlcnRzIHRoZSByZXN1bHRpbmcgSFRNTCBpbnRvIHRoZSBlbGVtZW50IGluIGEgc2VjdXJlIHdheS4gQnkgZGVmYXVsdCxcbiAqIHRoZSByZXN1bHRpbmcgSFRNTCBjb250ZW50IHdpbGwgYmUgc2FuaXRpemVkIHVzaW5nIHRoZSB7QGxpbmsgbmdTYW5pdGl6ZS4kc2FuaXRpemUgJHNhbml0aXplfSBzZXJ2aWNlLlxuICogVG8gdXRpbGl6ZSB0aGlzIGZ1bmN0aW9uYWxpdHksIGVuc3VyZSB0aGF0IGAkc2FuaXRpemVgIGlzIGF2YWlsYWJsZSwgZm9yIGV4YW1wbGUsIGJ5IGluY2x1ZGluZyB7QGxpbmtcbiAqIG5nU2FuaXRpemV9IGluIHlvdXIgbW9kdWxlJ3MgZGVwZW5kZW5jaWVzIChub3QgaW4gY29yZSBBbmd1bGFyKS4gSW4gb3JkZXIgdG8gdXNlIHtAbGluayBuZ1Nhbml0aXplfVxuICogaW4geW91ciBtb2R1bGUncyBkZXBlbmRlbmNpZXMsIHlvdSBuZWVkIHRvIGluY2x1ZGUgXCJhbmd1bGFyLXNhbml0aXplLmpzXCIgaW4geW91ciBhcHBsaWNhdGlvbi5cbiAqXG4gKiBZb3UgbWF5IGFsc28gYnlwYXNzIHNhbml0aXphdGlvbiBmb3IgdmFsdWVzIHlvdSBrbm93IGFyZSBzYWZlLiBUbyBkbyBzbywgYmluZCB0b1xuICogYW4gZXhwbGljaXRseSB0cnVzdGVkIHZhbHVlIHZpYSB7QGxpbmsgbmcuJHNjZSN0cnVzdEFzSHRtbCAkc2NlLnRydXN0QXNIdG1sfS4gIFNlZSB0aGUgZXhhbXBsZVxuICogdW5kZXIge0BsaW5rIG5nLiRzY2Ujc2hvdy1tZS1hbi1leGFtcGxlLXVzaW5nLXNjZS0gU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgKFNDRSl9LlxuICpcbiAqIE5vdGU6IElmIGEgYCRzYW5pdGl6ZWAgc2VydmljZSBpcyB1bmF2YWlsYWJsZSBhbmQgdGhlIGJvdW5kIHZhbHVlIGlzbid0IGV4cGxpY2l0bHkgdHJ1c3RlZCwgeW91XG4gKiB3aWxsIGhhdmUgYW4gZXhjZXB0aW9uIChpbnN0ZWFkIG9mIGFuIGV4cGxvaXQuKVxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0JpbmRIdG1sIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlLlxuICpcbiAqIEBleGFtcGxlXG5cbiAgIDxleGFtcGxlIG1vZHVsZT1cImJpbmRIdG1sRXhhbXBsZVwiIGRlcHM9XCJhbmd1bGFyLXNhbml0aXplLmpzXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgPHAgbmctYmluZC1odG1sPVwibXlIVE1MXCI+PC9wPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG5cbiAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgIGFuZ3VsYXIubW9kdWxlKCdiaW5kSHRtbEV4YW1wbGUnLCBbJ25nU2FuaXRpemUnXSlcbiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICRzY29wZS5teUhUTUwgPVxuICAgICAgICAgICAgICAnSSBhbSBhbiA8Y29kZT5IVE1MPC9jb2RlPnN0cmluZyB3aXRoICcgK1xuICAgICAgICAgICAgICAnPGEgaHJlZj1cIiNcIj5saW5rcyE8L2E+IGFuZCBvdGhlciA8ZW0+c3R1ZmY8L2VtPic7XG4gICAgICAgICB9XSk7XG4gICAgIDwvZmlsZT5cblxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1iaW5kLWh0bWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ215SFRNTCcpKS5nZXRUZXh0KCkpLnRvQmUoXG4gICAgICAgICAgICAgJ0kgYW0gYW4gSFRNTHN0cmluZyB3aXRoIGxpbmtzISBhbmQgb3RoZXIgc3R1ZmYnKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG52YXIgbmdCaW5kSHRtbERpcmVjdGl2ZSA9IFsnJHNjZScsICckcGFyc2UnLCAnJGNvbXBpbGUnLCBmdW5jdGlvbigkc2NlLCAkcGFyc2UsICRjb21waWxlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBjb21waWxlOiBmdW5jdGlvbiBuZ0JpbmRIdG1sQ29tcGlsZSh0RWxlbWVudCwgdEF0dHJzKSB7XG4gICAgICB2YXIgbmdCaW5kSHRtbEdldHRlciA9ICRwYXJzZSh0QXR0cnMubmdCaW5kSHRtbCk7XG4gICAgICB2YXIgbmdCaW5kSHRtbFdhdGNoID0gJHBhcnNlKHRBdHRycy5uZ0JpbmRIdG1sLCBmdW5jdGlvbiBnZXRTdHJpbmdWYWx1ZSh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gKHZhbHVlIHx8ICcnKS50b1N0cmluZygpO1xuICAgICAgfSk7XG4gICAgICAkY29tcGlsZS4kJGFkZEJpbmRpbmdDbGFzcyh0RWxlbWVudCk7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiBuZ0JpbmRIdG1sTGluayhzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgICAkY29tcGlsZS4kJGFkZEJpbmRpbmdJbmZvKGVsZW1lbnQsIGF0dHIubmdCaW5kSHRtbCk7XG5cbiAgICAgICAgc2NvcGUuJHdhdGNoKG5nQmluZEh0bWxXYXRjaCwgZnVuY3Rpb24gbmdCaW5kSHRtbFdhdGNoQWN0aW9uKCkge1xuICAgICAgICAgIC8vIHdlIHJlLWV2YWx1YXRlIHRoZSBleHByIGJlY2F1c2Ugd2Ugd2FudCBhIFRydXN0ZWRWYWx1ZUhvbGRlclR5cGVcbiAgICAgICAgICAvLyBmb3IgJHNjZSwgbm90IGEgc3RyaW5nXG4gICAgICAgICAgZWxlbWVudC5odG1sKCRzY2UuZ2V0VHJ1c3RlZEh0bWwobmdCaW5kSHRtbEdldHRlcihzY29wZSkpIHx8ICcnKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1dO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQ2hhbmdlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBFdmFsdWF0ZSB0aGUgZ2l2ZW4gZXhwcmVzc2lvbiB3aGVuIHRoZSB1c2VyIGNoYW5nZXMgdGhlIGlucHV0LlxuICogVGhlIGV4cHJlc3Npb24gaXMgZXZhbHVhdGVkIGltbWVkaWF0ZWx5LCB1bmxpa2UgdGhlIEphdmFTY3JpcHQgb25jaGFuZ2UgZXZlbnRcbiAqIHdoaWNoIG9ubHkgdHJpZ2dlcnMgYXQgdGhlIGVuZCBvZiBhIGNoYW5nZSAodXN1YWxseSwgd2hlbiB0aGUgdXNlciBsZWF2ZXMgdGhlXG4gKiBmb3JtIGVsZW1lbnQgb3IgcHJlc3NlcyB0aGUgcmV0dXJuIGtleSkuXG4gKlxuICogVGhlIGBuZ0NoYW5nZWAgZXhwcmVzc2lvbiBpcyBvbmx5IGV2YWx1YXRlZCB3aGVuIGEgY2hhbmdlIGluIHRoZSBpbnB1dCB2YWx1ZSBjYXVzZXNcbiAqIGEgbmV3IHZhbHVlIHRvIGJlIGNvbW1pdHRlZCB0byB0aGUgbW9kZWwuXG4gKlxuICogSXQgd2lsbCBub3QgYmUgZXZhbHVhdGVkOlxuICogKiBpZiB0aGUgdmFsdWUgcmV0dXJuZWQgZnJvbSB0aGUgYCRwYXJzZXJzYCB0cmFuc2Zvcm1hdGlvbiBwaXBlbGluZSBoYXMgbm90IGNoYW5nZWRcbiAqICogaWYgdGhlIGlucHV0IGhhcyBjb250aW51ZWQgdG8gYmUgaW52YWxpZCBzaW5jZSB0aGUgbW9kZWwgd2lsbCBzdGF5IGBudWxsYFxuICogKiBpZiB0aGUgbW9kZWwgaXMgY2hhbmdlZCBwcm9ncmFtbWF0aWNhbGx5IGFuZCBub3QgYnkgYSBjaGFuZ2UgdG8gdGhlIGlucHV0IHZhbHVlXG4gKlxuICpcbiAqIE5vdGUsIHRoaXMgZGlyZWN0aXZlIHJlcXVpcmVzIGBuZ01vZGVsYCB0byBiZSBwcmVzZW50LlxuICpcbiAqIEBlbGVtZW50IGlucHV0XG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ2hhbmdlIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb24gY2hhbmdlXG4gKiBpbiBpbnB1dCB2YWx1ZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogPGV4YW1wbGUgbmFtZT1cIm5nQ2hhbmdlLWRpcmVjdGl2ZVwiIG1vZHVsZT1cImNoYW5nZUV4YW1wbGVcIj5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgICA8c2NyaXB0PlxuICogICAgICAgYW5ndWxhci5tb2R1bGUoJ2NoYW5nZUV4YW1wbGUnLCBbXSlcbiAqICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAqICAgICAgICAgICAkc2NvcGUuY291bnRlciA9IDA7XG4gKiAgICAgICAgICAgJHNjb3BlLmNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICogICAgICAgICAgICAgJHNjb3BlLmNvdW50ZXIrKztcbiAqICAgICAgICAgICB9O1xuICogICAgICAgICB9XSk7XG4gKiAgICAgPC9zY3JpcHQ+XG4gKiAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAqICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImNvbmZpcm1lZFwiIG5nLWNoYW5nZT1cImNoYW5nZSgpXCIgaWQ9XCJuZy1jaGFuZ2UtZXhhbXBsZTFcIiAvPlxuICogICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY29uZmlybWVkXCIgaWQ9XCJuZy1jaGFuZ2UtZXhhbXBsZTJcIiAvPlxuICogICAgICAgPGxhYmVsIGZvcj1cIm5nLWNoYW5nZS1leGFtcGxlMlwiPkNvbmZpcm1lZDwvbGFiZWw+PGJyIC8+XG4gKiAgICAgICA8dHQ+ZGVidWcgPSB7e2NvbmZpcm1lZH19PC90dD48YnIvPlxuICogICAgICAgPHR0PmNvdW50ZXIgPSB7e2NvdW50ZXJ9fTwvdHQ+PGJyLz5cbiAqICAgICA8L2Rpdj5cbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gKiAgICAgdmFyIGNvdW50ZXIgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2NvdW50ZXInKSk7XG4gKiAgICAgdmFyIGRlYnVnID0gZWxlbWVudChieS5iaW5kaW5nKCdjb25maXJtZWQnKSk7XG4gKlxuICogICAgIGl0KCdzaG91bGQgZXZhbHVhdGUgdGhlIGV4cHJlc3Npb24gaWYgY2hhbmdpbmcgZnJvbSB2aWV3JywgZnVuY3Rpb24oKSB7XG4gKiAgICAgICBleHBlY3QoY291bnRlci5nZXRUZXh0KCkpLnRvQ29udGFpbignMCcpO1xuICpcbiAqICAgICAgIGVsZW1lbnQoYnkuaWQoJ25nLWNoYW5nZS1leGFtcGxlMScpKS5jbGljaygpO1xuICpcbiAqICAgICAgIGV4cGVjdChjb3VudGVyLmdldFRleHQoKSkudG9Db250YWluKCcxJyk7XG4gKiAgICAgICBleHBlY3QoZGVidWcuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAqICAgICB9KTtcbiAqXG4gKiAgICAgaXQoJ3Nob3VsZCBub3QgZXZhbHVhdGUgdGhlIGV4cHJlc3Npb24gaWYgY2hhbmdpbmcgZnJvbSBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICogICAgICAgZWxlbWVudChieS5pZCgnbmctY2hhbmdlLWV4YW1wbGUyJykpLmNsaWNrKCk7XG5cbiAqICAgICAgIGV4cGVjdChjb3VudGVyLmdldFRleHQoKSkudG9Db250YWluKCcwJyk7XG4gKiAgICAgICBleHBlY3QoZGVidWcuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAqICAgICB9KTtcbiAqICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICovXG52YXIgbmdDaGFuZ2VEaXJlY3RpdmUgPSB2YWx1ZUZuKHtcbiAgcmVzdHJpY3Q6ICdBJyxcbiAgcmVxdWlyZTogJ25nTW9kZWwnLFxuICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCkge1xuICAgIGN0cmwuJHZpZXdDaGFuZ2VMaXN0ZW5lcnMucHVzaChmdW5jdGlvbigpIHtcbiAgICAgIHNjb3BlLiRldmFsKGF0dHIubmdDaGFuZ2UpO1xuICAgIH0pO1xuICB9XG59KTtcblxuZnVuY3Rpb24gY2xhc3NEaXJlY3RpdmUobmFtZSwgc2VsZWN0b3IpIHtcbiAgbmFtZSA9ICduZ0NsYXNzJyArIG5hbWU7XG4gIHJldHVybiBbJyRhbmltYXRlJywgZnVuY3Rpb24oJGFuaW1hdGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzdHJpY3Q6ICdBQycsXG4gICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgICB2YXIgb2xkVmFsO1xuXG4gICAgICAgIHNjb3BlLiR3YXRjaChhdHRyW25hbWVdLCBuZ0NsYXNzV2F0Y2hBY3Rpb24sIHRydWUpO1xuXG4gICAgICAgIGF0dHIuJG9ic2VydmUoJ2NsYXNzJywgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICBuZ0NsYXNzV2F0Y2hBY3Rpb24oc2NvcGUuJGV2YWwoYXR0cltuYW1lXSkpO1xuICAgICAgICB9KTtcblxuXG4gICAgICAgIGlmIChuYW1lICE9PSAnbmdDbGFzcycpIHtcbiAgICAgICAgICBzY29wZS4kd2F0Y2goJyRpbmRleCcsIGZ1bmN0aW9uKCRpbmRleCwgb2xkJGluZGV4KSB7XG4gICAgICAgICAgICAvLyBqc2hpbnQgYml0d2lzZTogZmFsc2VcbiAgICAgICAgICAgIHZhciBtb2QgPSAkaW5kZXggJiAxO1xuICAgICAgICAgICAgaWYgKG1vZCAhPT0gKG9sZCRpbmRleCAmIDEpKSB7XG4gICAgICAgICAgICAgIHZhciBjbGFzc2VzID0gYXJyYXlDbGFzc2VzKHNjb3BlLiRldmFsKGF0dHJbbmFtZV0pKTtcbiAgICAgICAgICAgICAgbW9kID09PSBzZWxlY3RvciA/XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3NlcyhjbGFzc2VzKSA6XG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3NlcyhjbGFzc2VzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFkZENsYXNzZXMoY2xhc3Nlcykge1xuICAgICAgICAgIHZhciBuZXdDbGFzc2VzID0gZGlnZXN0Q2xhc3NDb3VudHMoY2xhc3NlcywgMSk7XG4gICAgICAgICAgYXR0ci4kYWRkQ2xhc3MobmV3Q2xhc3Nlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZW1vdmVDbGFzc2VzKGNsYXNzZXMpIHtcbiAgICAgICAgICB2YXIgbmV3Q2xhc3NlcyA9IGRpZ2VzdENsYXNzQ291bnRzKGNsYXNzZXMsIC0xKTtcbiAgICAgICAgICBhdHRyLiRyZW1vdmVDbGFzcyhuZXdDbGFzc2VzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGRpZ2VzdENsYXNzQ291bnRzKGNsYXNzZXMsIGNvdW50KSB7XG4gICAgICAgICAgdmFyIGNsYXNzQ291bnRzID0gZWxlbWVudC5kYXRhKCckY2xhc3NDb3VudHMnKSB8fCB7fTtcbiAgICAgICAgICB2YXIgY2xhc3Nlc1RvVXBkYXRlID0gW107XG4gICAgICAgICAgZm9yRWFjaChjbGFzc2VzLCBmdW5jdGlvbihjbGFzc05hbWUpIHtcbiAgICAgICAgICAgIGlmIChjb3VudCA+IDAgfHwgY2xhc3NDb3VudHNbY2xhc3NOYW1lXSkge1xuICAgICAgICAgICAgICBjbGFzc0NvdW50c1tjbGFzc05hbWVdID0gKGNsYXNzQ291bnRzW2NsYXNzTmFtZV0gfHwgMCkgKyBjb3VudDtcbiAgICAgICAgICAgICAgaWYgKGNsYXNzQ291bnRzW2NsYXNzTmFtZV0gPT09ICsoY291bnQgPiAwKSkge1xuICAgICAgICAgICAgICAgIGNsYXNzZXNUb1VwZGF0ZS5wdXNoKGNsYXNzTmFtZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBlbGVtZW50LmRhdGEoJyRjbGFzc0NvdW50cycsIGNsYXNzQ291bnRzKTtcbiAgICAgICAgICByZXR1cm4gY2xhc3Nlc1RvVXBkYXRlLmpvaW4oJyAnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUNsYXNzZXMob2xkQ2xhc3NlcywgbmV3Q2xhc3Nlcykge1xuICAgICAgICAgIHZhciB0b0FkZCA9IGFycmF5RGlmZmVyZW5jZShuZXdDbGFzc2VzLCBvbGRDbGFzc2VzKTtcbiAgICAgICAgICB2YXIgdG9SZW1vdmUgPSBhcnJheURpZmZlcmVuY2Uob2xkQ2xhc3NlcywgbmV3Q2xhc3Nlcyk7XG4gICAgICAgICAgdG9BZGQgPSBkaWdlc3RDbGFzc0NvdW50cyh0b0FkZCwgMSk7XG4gICAgICAgICAgdG9SZW1vdmUgPSBkaWdlc3RDbGFzc0NvdW50cyh0b1JlbW92ZSwgLTEpO1xuICAgICAgICAgIGlmICh0b0FkZCAmJiB0b0FkZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICRhbmltYXRlLmFkZENsYXNzKGVsZW1lbnQsIHRvQWRkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRvUmVtb3ZlICYmIHRvUmVtb3ZlLmxlbmd0aCkge1xuICAgICAgICAgICAgJGFuaW1hdGUucmVtb3ZlQ2xhc3MoZWxlbWVudCwgdG9SZW1vdmUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG5nQ2xhc3NXYXRjaEFjdGlvbihuZXdWYWwpIHtcbiAgICAgICAgICBpZiAoc2VsZWN0b3IgPT09IHRydWUgfHwgc2NvcGUuJGluZGV4ICUgMiA9PT0gc2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHZhciBuZXdDbGFzc2VzID0gYXJyYXlDbGFzc2VzKG5ld1ZhbCB8fCBbXSk7XG4gICAgICAgICAgICBpZiAoIW9sZFZhbCkge1xuICAgICAgICAgICAgICBhZGRDbGFzc2VzKG5ld0NsYXNzZXMpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghZXF1YWxzKG5ld1ZhbCxvbGRWYWwpKSB7XG4gICAgICAgICAgICAgIHZhciBvbGRDbGFzc2VzID0gYXJyYXlDbGFzc2VzKG9sZFZhbCk7XG4gICAgICAgICAgICAgIHVwZGF0ZUNsYXNzZXMob2xkQ2xhc3NlcywgbmV3Q2xhc3Nlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIG9sZFZhbCA9IHNoYWxsb3dDb3B5KG5ld1ZhbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gYXJyYXlEaWZmZXJlbmNlKHRva2VuczEsIHRva2VuczIpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcblxuICAgICAgb3V0ZXI6XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2VuczEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHRva2VuID0gdG9rZW5zMVtpXTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0b2tlbnMyLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgaWYgKHRva2VuID09IHRva2VuczJbal0pIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlcy5wdXNoKHRva2VuKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXJyYXlDbGFzc2VzKGNsYXNzVmFsKSB7XG4gICAgICBpZiAoaXNBcnJheShjbGFzc1ZhbCkpIHtcbiAgICAgICAgcmV0dXJuIGNsYXNzVmFsO1xuICAgICAgfSBlbHNlIGlmIChpc1N0cmluZyhjbGFzc1ZhbCkpIHtcbiAgICAgICAgcmV0dXJuIGNsYXNzVmFsLnNwbGl0KCcgJyk7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGNsYXNzVmFsKSkge1xuICAgICAgICB2YXIgY2xhc3NlcyA9IFtdO1xuICAgICAgICBmb3JFYWNoKGNsYXNzVmFsLCBmdW5jdGlvbih2LCBrKSB7XG4gICAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICAgIGNsYXNzZXMgPSBjbGFzc2VzLmNvbmNhdChrLnNwbGl0KCcgJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjbGFzc2VzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNsYXNzVmFsO1xuICAgIH1cbiAgfV07XG59XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDbGFzc1xuICogQHJlc3RyaWN0IEFDXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nQ2xhc3NgIGRpcmVjdGl2ZSBhbGxvd3MgeW91IHRvIGR5bmFtaWNhbGx5IHNldCBDU1MgY2xhc3NlcyBvbiBhbiBIVE1MIGVsZW1lbnQgYnkgZGF0YWJpbmRpbmdcbiAqIGFuIGV4cHJlc3Npb24gdGhhdCByZXByZXNlbnRzIGFsbCBjbGFzc2VzIHRvIGJlIGFkZGVkLlxuICpcbiAqIFRoZSBkaXJlY3RpdmUgb3BlcmF0ZXMgaW4gdGhyZWUgZGlmZmVyZW50IHdheXMsIGRlcGVuZGluZyBvbiB3aGljaCBvZiB0aHJlZSB0eXBlcyB0aGUgZXhwcmVzc2lvblxuICogZXZhbHVhdGVzIHRvOlxuICpcbiAqIDEuIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHN0cmluZywgdGhlIHN0cmluZyBzaG91bGQgYmUgb25lIG9yIG1vcmUgc3BhY2UtZGVsaW1pdGVkIGNsYXNzXG4gKiBuYW1lcy5cbiAqXG4gKiAyLiBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYW4gYXJyYXksIGVhY2ggZWxlbWVudCBvZiB0aGUgYXJyYXkgc2hvdWxkIGJlIGEgc3RyaW5nIHRoYXQgaXNcbiAqIG9uZSBvciBtb3JlIHNwYWNlLWRlbGltaXRlZCBjbGFzcyBuYW1lcy5cbiAqXG4gKiAzLiBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYW4gb2JqZWN0LCB0aGVuIGZvciBlYWNoIGtleS12YWx1ZSBwYWlyIG9mIHRoZVxuICogb2JqZWN0IHdpdGggYSB0cnV0aHkgdmFsdWUgdGhlIGNvcnJlc3BvbmRpbmcga2V5IGlzIHVzZWQgYXMgYSBjbGFzcyBuYW1lLlxuICpcbiAqIFRoZSBkaXJlY3RpdmUgd29uJ3QgYWRkIGR1cGxpY2F0ZSBjbGFzc2VzIGlmIGEgcGFydGljdWxhciBjbGFzcyB3YXMgYWxyZWFkeSBzZXQuXG4gKlxuICogV2hlbiB0aGUgZXhwcmVzc2lvbiBjaGFuZ2VzLCB0aGUgcHJldmlvdXNseSBhZGRlZCBjbGFzc2VzIGFyZSByZW1vdmVkIGFuZCBvbmx5IHRoZW4gdGhlXG4gKiBuZXcgY2xhc3NlcyBhcmUgYWRkZWQuXG4gKlxuICogQGFuaW1hdGlvbnNcbiAqICoqYWRkKiogLSBoYXBwZW5zIGp1c3QgYmVmb3JlIHRoZSBjbGFzcyBpcyBhcHBsaWVkIHRvIHRoZSBlbGVtZW50c1xuICpcbiAqICoqcmVtb3ZlKiogLSBoYXBwZW5zIGp1c3QgYmVmb3JlIHRoZSBjbGFzcyBpcyByZW1vdmVkIGZyb20gdGhlIGVsZW1lbnRcbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDbGFzcyB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsLiBUaGUgcmVzdWx0XG4gKiAgIG9mIHRoZSBldmFsdWF0aW9uIGNhbiBiZSBhIHN0cmluZyByZXByZXNlbnRpbmcgc3BhY2UgZGVsaW1pdGVkIGNsYXNzXG4gKiAgIG5hbWVzLCBhbiBhcnJheSwgb3IgYSBtYXAgb2YgY2xhc3MgbmFtZXMgdG8gYm9vbGVhbiB2YWx1ZXMuIEluIHRoZSBjYXNlIG9mIGEgbWFwLCB0aGVcbiAqICAgbmFtZXMgb2YgdGhlIHByb3BlcnRpZXMgd2hvc2UgdmFsdWVzIGFyZSB0cnV0aHkgd2lsbCBiZSBhZGRlZCBhcyBjc3MgY2xhc3NlcyB0byB0aGVcbiAqICAgZWxlbWVudC5cbiAqXG4gKiBAZXhhbXBsZSBFeGFtcGxlIHRoYXQgZGVtb25zdHJhdGVzIGJhc2ljIGJpbmRpbmdzIHZpYSBuZ0NsYXNzIGRpcmVjdGl2ZS5cbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxwIG5nLWNsYXNzPVwie3N0cmlrZTogZGVsZXRlZCwgYm9sZDogaW1wb3J0YW50LCByZWQ6IGVycm9yfVwiPk1hcCBTeW50YXggRXhhbXBsZTwvcD5cbiAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJkZWxldGVkXCI+IGRlbGV0ZWQgKGFwcGx5IFwic3RyaWtlXCIgY2xhc3MpPGJyPlxuICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImltcG9ydGFudFwiPiBpbXBvcnRhbnQgKGFwcGx5IFwiYm9sZFwiIGNsYXNzKTxicj5cbiAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJlcnJvclwiPiBlcnJvciAoYXBwbHkgXCJyZWRcIiBjbGFzcylcbiAgICAgICA8aHI+XG4gICAgICAgPHAgbmctY2xhc3M9XCJzdHlsZVwiPlVzaW5nIFN0cmluZyBTeW50YXg8L3A+XG4gICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJzdHlsZVwiIHBsYWNlaG9sZGVyPVwiVHlwZTogYm9sZCBzdHJpa2UgcmVkXCI+XG4gICAgICAgPGhyPlxuICAgICAgIDxwIG5nLWNsYXNzPVwiW3N0eWxlMSwgc3R5bGUyLCBzdHlsZTNdXCI+VXNpbmcgQXJyYXkgU3ludGF4PC9wPlxuICAgICAgIDxpbnB1dCBuZy1tb2RlbD1cInN0eWxlMVwiIHBsYWNlaG9sZGVyPVwiVHlwZTogYm9sZCwgc3RyaWtlIG9yIHJlZFwiPjxicj5cbiAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJzdHlsZTJcIiBwbGFjZWhvbGRlcj1cIlR5cGU6IGJvbGQsIHN0cmlrZSBvciByZWRcIj48YnI+XG4gICAgICAgPGlucHV0IG5nLW1vZGVsPVwic3R5bGUzXCIgcGxhY2Vob2xkZXI9XCJUeXBlOiBib2xkLCBzdHJpa2Ugb3IgcmVkXCI+PGJyPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAuc3RyaWtlIHtcbiAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbGluZS10aHJvdWdoO1xuICAgICAgIH1cbiAgICAgICAuYm9sZCB7XG4gICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgIH1cbiAgICAgICAucmVkIHtcbiAgICAgICAgICAgY29sb3I6IHJlZDtcbiAgICAgICB9XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIHZhciBwcyA9IGVsZW1lbnQuYWxsKGJ5LmNzcygncCcpKTtcblxuICAgICAgIGl0KCdzaG91bGQgbGV0IHlvdSB0b2dnbGUgdGhlIGNsYXNzJywgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgIGV4cGVjdChwcy5maXJzdCgpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkubm90LnRvTWF0Y2goL2JvbGQvKTtcbiAgICAgICAgIGV4cGVjdChwcy5maXJzdCgpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkubm90LnRvTWF0Y2goL3JlZC8pO1xuXG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdpbXBvcnRhbnQnKSkuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChwcy5maXJzdCgpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9NYXRjaCgvYm9sZC8pO1xuXG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdlcnJvcicpKS5jbGljaygpO1xuICAgICAgICAgZXhwZWN0KHBzLmZpcnN0KCkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS50b01hdGNoKC9yZWQvKTtcbiAgICAgICB9KTtcblxuICAgICAgIGl0KCdzaG91bGQgbGV0IHlvdSB0b2dnbGUgc3RyaW5nIGV4YW1wbGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChwcy5nZXQoMSkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS50b0JlKCcnKTtcbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3N0eWxlJykpLmNsZWFyKCk7XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdzdHlsZScpKS5zZW5kS2V5cygncmVkJyk7XG4gICAgICAgICBleHBlY3QocHMuZ2V0KDEpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9CZSgncmVkJyk7XG4gICAgICAgfSk7XG5cbiAgICAgICBpdCgnYXJyYXkgZXhhbXBsZSBzaG91bGQgaGF2ZSAzIGNsYXNzZXMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChwcy5sYXN0KCkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS50b0JlKCcnKTtcbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3N0eWxlMScpKS5zZW5kS2V5cygnYm9sZCcpO1xuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnc3R5bGUyJykpLnNlbmRLZXlzKCdzdHJpa2UnKTtcbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3N0eWxlMycpKS5zZW5kS2V5cygncmVkJyk7XG4gICAgICAgICBleHBlY3QocHMubGFzdCgpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9CZSgnYm9sZCBzdHJpa2UgcmVkJyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cblxuICAgIyMgQW5pbWF0aW9uc1xuXG4gICBUaGUgZXhhbXBsZSBiZWxvdyBkZW1vbnN0cmF0ZXMgaG93IHRvIHBlcmZvcm0gYW5pbWF0aW9ucyB1c2luZyBuZ0NsYXNzLlxuXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJuZ0FuaW1hdGVcIiBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCIgYW5pbWF0aW9ucz1cInRydWVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxpbnB1dCBpZD1cInNldGJ0blwiIHR5cGU9XCJidXR0b25cIiB2YWx1ZT1cInNldFwiIG5nLWNsaWNrPVwibXlWYXI9J215LWNsYXNzJ1wiPlxuICAgICAgPGlucHV0IGlkPVwiY2xlYXJidG5cIiB0eXBlPVwiYnV0dG9uXCIgdmFsdWU9XCJjbGVhclwiIG5nLWNsaWNrPVwibXlWYXI9JydcIj5cbiAgICAgIDxicj5cbiAgICAgIDxzcGFuIGNsYXNzPVwiYmFzZS1jbGFzc1wiIG5nLWNsYXNzPVwibXlWYXJcIj5TYW1wbGUgVGV4dDwvc3Bhbj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgLmJhc2UtY2xhc3Mge1xuICAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDApIDAuNXM7XG4gICAgICAgICB0cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDApIDAuNXM7XG4gICAgICAgfVxuXG4gICAgICAgLmJhc2UtY2xhc3MubXktY2xhc3Mge1xuICAgICAgICAgY29sb3I6IHJlZDtcbiAgICAgICAgIGZvbnQtc2l6ZTozZW07XG4gICAgICAgfVxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLWNsYXNzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJy5iYXNlLWNsYXNzJykpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkubm90LlxuICAgICAgICAgICB0b01hdGNoKC9teS1jbGFzcy8pO1xuXG4gICAgICAgICBlbGVtZW50KGJ5LmlkKCdzZXRidG4nKSkuY2xpY2soKTtcblxuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCcuYmFzZS1jbGFzcycpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLlxuICAgICAgICAgICB0b01hdGNoKC9teS1jbGFzcy8pO1xuXG4gICAgICAgICBlbGVtZW50KGJ5LmlkKCdjbGVhcmJ0bicpKS5jbGljaygpO1xuXG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJy5iYXNlLWNsYXNzJykpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkubm90LlxuICAgICAgICAgICB0b01hdGNoKC9teS1jbGFzcy8pO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG5cblxuICAgIyMgbmdDbGFzcyBhbmQgcHJlLWV4aXN0aW5nIENTUzMgVHJhbnNpdGlvbnMvQW5pbWF0aW9uc1xuICAgVGhlIG5nQ2xhc3MgZGlyZWN0aXZlIHN0aWxsIHN1cHBvcnRzIENTUzMgVHJhbnNpdGlvbnMvQW5pbWF0aW9ucyBldmVuIGlmIHRoZXkgZG8gbm90IGZvbGxvdyB0aGUgbmdBbmltYXRlIENTUyBuYW1pbmcgc3RydWN0dXJlLlxuICAgVXBvbiBhbmltYXRpb24gbmdBbmltYXRlIHdpbGwgYXBwbHkgc3VwcGxlbWVudGFyeSBDU1MgY2xhc3NlcyB0byB0cmFjayB0aGUgc3RhcnQgYW5kIGVuZCBvZiBhbiBhbmltYXRpb24sIGJ1dCB0aGlzIHdpbGwgbm90IGhpbmRlclxuICAgYW55IHByZS1leGlzdGluZyBDU1MgdHJhbnNpdGlvbnMgYWxyZWFkeSBvbiB0aGUgZWxlbWVudC4gVG8gZ2V0IGFuIGlkZWEgb2Ygd2hhdCBoYXBwZW5zIGR1cmluZyBhIGNsYXNzLWJhc2VkIGFuaW1hdGlvbiwgYmUgc3VyZVxuICAgdG8gdmlldyB0aGUgc3RlcCBieSBzdGVwIGRldGFpbHMgb2Yge0BsaW5rIG5nLiRhbmltYXRlI2FkZENsYXNzICRhbmltYXRlLmFkZENsYXNzfSBhbmRcbiAgIHtAbGluayBuZy4kYW5pbWF0ZSNyZW1vdmVDbGFzcyAkYW5pbWF0ZS5yZW1vdmVDbGFzc30uXG4gKi9cbnZhciBuZ0NsYXNzRGlyZWN0aXZlID0gY2xhc3NEaXJlY3RpdmUoJycsIHRydWUpO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQ2xhc3NPZGRcbiAqIEByZXN0cmljdCBBQ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0NsYXNzT2RkYCBhbmQgYG5nQ2xhc3NFdmVuYCBkaXJlY3RpdmVzIHdvcmsgZXhhY3RseSBhc1xuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsYXNzIG5nQ2xhc3N9LCBleGNlcHQgdGhleSB3b3JrIGluXG4gKiBjb25qdW5jdGlvbiB3aXRoIGBuZ1JlcGVhdGAgYW5kIHRha2UgZWZmZWN0IG9ubHkgb24gb2RkIChldmVuKSByb3dzLlxuICpcbiAqIFRoaXMgZGlyZWN0aXZlIGNhbiBiZSBhcHBsaWVkIG9ubHkgd2l0aGluIHRoZSBzY29wZSBvZiBhblxuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBuZ1JlcGVhdH0uXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ2xhc3NPZGQge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbC4gVGhlIHJlc3VsdFxuICogICBvZiB0aGUgZXZhbHVhdGlvbiBjYW4gYmUgYSBzdHJpbmcgcmVwcmVzZW50aW5nIHNwYWNlIGRlbGltaXRlZCBjbGFzcyBuYW1lcyBvciBhbiBhcnJheS5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxvbCBuZy1pbml0PVwibmFtZXM9WydKb2huJywgJ01hcnknLCAnQ2F0ZScsICdTdXonXVwiPlxuICAgICAgICAgIDxsaSBuZy1yZXBlYXQ9XCJuYW1lIGluIG5hbWVzXCI+XG4gICAgICAgICAgIDxzcGFuIG5nLWNsYXNzLW9kZD1cIidvZGQnXCIgbmctY2xhc3MtZXZlbj1cIidldmVuJ1wiPlxuICAgICAgICAgICAgIHt7bmFtZX19XG4gICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L2xpPlxuICAgICAgICA8L29sPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAub2RkIHtcbiAgICAgICAgIGNvbG9yOiByZWQ7XG4gICAgICAgfVxuICAgICAgIC5ldmVuIHtcbiAgICAgICAgIGNvbG9yOiBibHVlO1xuICAgICAgIH1cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1jbGFzcy1vZGQgYW5kIG5nLWNsYXNzLWV2ZW4nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LnJlcGVhdGVyKCduYW1lIGluIG5hbWVzJykucm93KDApLmNvbHVtbignbmFtZScpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLlxuICAgICAgICAgICB0b01hdGNoKC9vZGQvKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LnJlcGVhdGVyKCduYW1lIGluIG5hbWVzJykucm93KDEpLmNvbHVtbignbmFtZScpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLlxuICAgICAgICAgICB0b01hdGNoKC9ldmVuLyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nQ2xhc3NPZGREaXJlY3RpdmUgPSBjbGFzc0RpcmVjdGl2ZSgnT2RkJywgMCk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDbGFzc0V2ZW5cbiAqIEByZXN0cmljdCBBQ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0NsYXNzT2RkYCBhbmQgYG5nQ2xhc3NFdmVuYCBkaXJlY3RpdmVzIHdvcmsgZXhhY3RseSBhc1xuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsYXNzIG5nQ2xhc3N9LCBleGNlcHQgdGhleSB3b3JrIGluXG4gKiBjb25qdW5jdGlvbiB3aXRoIGBuZ1JlcGVhdGAgYW5kIHRha2UgZWZmZWN0IG9ubHkgb24gb2RkIChldmVuKSByb3dzLlxuICpcbiAqIFRoaXMgZGlyZWN0aXZlIGNhbiBiZSBhcHBsaWVkIG9ubHkgd2l0aGluIHRoZSBzY29wZSBvZiBhblxuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBuZ1JlcGVhdH0uXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ2xhc3NFdmVuIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuIFRoZVxuICogICByZXN1bHQgb2YgdGhlIGV2YWx1YXRpb24gY2FuIGJlIGEgc3RyaW5nIHJlcHJlc2VudGluZyBzcGFjZSBkZWxpbWl0ZWQgY2xhc3MgbmFtZXMgb3IgYW4gYXJyYXkuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8b2wgbmctaW5pdD1cIm5hbWVzPVsnSm9obicsICdNYXJ5JywgJ0NhdGUnLCAnU3V6J11cIj5cbiAgICAgICAgICA8bGkgbmctcmVwZWF0PVwibmFtZSBpbiBuYW1lc1wiPlxuICAgICAgICAgICA8c3BhbiBuZy1jbGFzcy1vZGQ9XCInb2RkJ1wiIG5nLWNsYXNzLWV2ZW49XCInZXZlbidcIj5cbiAgICAgICAgICAgICB7e25hbWV9fSAmbmJzcDsgJm5ic3A7ICZuYnNwO1xuICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgPC9vbD5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgLm9kZCB7XG4gICAgICAgICBjb2xvcjogcmVkO1xuICAgICAgIH1cbiAgICAgICAuZXZlbiB7XG4gICAgICAgICBjb2xvcjogYmx1ZTtcbiAgICAgICB9XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctY2xhc3Mtb2RkIGFuZCBuZy1jbGFzcy1ldmVuJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5yZXBlYXRlcignbmFtZSBpbiBuYW1lcycpLnJvdygwKS5jb2x1bW4oJ25hbWUnKSkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5cbiAgICAgICAgICAgdG9NYXRjaCgvb2RkLyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5yZXBlYXRlcignbmFtZSBpbiBuYW1lcycpLnJvdygxKS5jb2x1bW4oJ25hbWUnKSkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5cbiAgICAgICAgICAgdG9NYXRjaCgvZXZlbi8pO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ0NsYXNzRXZlbkRpcmVjdGl2ZSA9IGNsYXNzRGlyZWN0aXZlKCdFdmVuJywgMSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDbG9ha1xuICogQHJlc3RyaWN0IEFDXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nQ2xvYWtgIGRpcmVjdGl2ZSBpcyB1c2VkIHRvIHByZXZlbnQgdGhlIEFuZ3VsYXIgaHRtbCB0ZW1wbGF0ZSBmcm9tIGJlaW5nIGJyaWVmbHlcbiAqIGRpc3BsYXllZCBieSB0aGUgYnJvd3NlciBpbiBpdHMgcmF3ICh1bmNvbXBpbGVkKSBmb3JtIHdoaWxlIHlvdXIgYXBwbGljYXRpb24gaXMgbG9hZGluZy4gVXNlIHRoaXNcbiAqIGRpcmVjdGl2ZSB0byBhdm9pZCB0aGUgdW5kZXNpcmFibGUgZmxpY2tlciBlZmZlY3QgY2F1c2VkIGJ5IHRoZSBodG1sIHRlbXBsYXRlIGRpc3BsYXkuXG4gKlxuICogVGhlIGRpcmVjdGl2ZSBjYW4gYmUgYXBwbGllZCB0byB0aGUgYDxib2R5PmAgZWxlbWVudCwgYnV0IHRoZSBwcmVmZXJyZWQgdXNhZ2UgaXMgdG8gYXBwbHlcbiAqIG11bHRpcGxlIGBuZ0Nsb2FrYCBkaXJlY3RpdmVzIHRvIHNtYWxsIHBvcnRpb25zIG9mIHRoZSBwYWdlIHRvIHBlcm1pdCBwcm9ncmVzc2l2ZSByZW5kZXJpbmdcbiAqIG9mIHRoZSBicm93c2VyIHZpZXcuXG4gKlxuICogYG5nQ2xvYWtgIHdvcmtzIGluIGNvb3BlcmF0aW9uIHdpdGggdGhlIGZvbGxvd2luZyBjc3MgcnVsZSBlbWJlZGRlZCB3aXRoaW4gYGFuZ3VsYXIuanNgIGFuZFxuICogYGFuZ3VsYXIubWluLmpzYC5cbiAqIEZvciBDU1AgbW9kZSBwbGVhc2UgYWRkIGBhbmd1bGFyLWNzcC5jc3NgIHRvIHlvdXIgaHRtbCBmaWxlIChzZWUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NzcCBuZ0NzcH0pLlxuICpcbiAqIGBgYGNzc1xuICogW25nXFw6Y2xvYWtdLCBbbmctY2xvYWtdLCBbZGF0YS1uZy1jbG9ha10sIFt4LW5nLWNsb2FrXSwgLm5nLWNsb2FrLCAueC1uZy1jbG9hayB7XG4gKiAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIFdoZW4gdGhpcyBjc3MgcnVsZSBpcyBsb2FkZWQgYnkgdGhlIGJyb3dzZXIsIGFsbCBodG1sIGVsZW1lbnRzIChpbmNsdWRpbmcgdGhlaXIgY2hpbGRyZW4pIHRoYXRcbiAqIGFyZSB0YWdnZWQgd2l0aCB0aGUgYG5nQ2xvYWtgIGRpcmVjdGl2ZSBhcmUgaGlkZGVuLiBXaGVuIEFuZ3VsYXIgZW5jb3VudGVycyB0aGlzIGRpcmVjdGl2ZVxuICogZHVyaW5nIHRoZSBjb21waWxhdGlvbiBvZiB0aGUgdGVtcGxhdGUgaXQgZGVsZXRlcyB0aGUgYG5nQ2xvYWtgIGVsZW1lbnQgYXR0cmlidXRlLCBtYWtpbmdcbiAqIHRoZSBjb21waWxlZCBlbGVtZW50IHZpc2libGUuXG4gKlxuICogRm9yIHRoZSBiZXN0IHJlc3VsdCwgdGhlIGBhbmd1bGFyLmpzYCBzY3JpcHQgbXVzdCBiZSBsb2FkZWQgaW4gdGhlIGhlYWQgc2VjdGlvbiBvZiB0aGUgaHRtbFxuICogZG9jdW1lbnQ7IGFsdGVybmF0aXZlbHksIHRoZSBjc3MgcnVsZSBhYm92ZSBtdXN0IGJlIGluY2x1ZGVkIGluIHRoZSBleHRlcm5hbCBzdHlsZXNoZWV0IG9mIHRoZVxuICogYXBwbGljYXRpb24uXG4gKlxuICogTGVnYWN5IGJyb3dzZXJzLCBsaWtlIElFNywgZG8gbm90IHByb3ZpZGUgYXR0cmlidXRlIHNlbGVjdG9yIHN1cHBvcnQgKGFkZGVkIGluIENTUyAyLjEpIHNvIHRoZXlcbiAqIGNhbm5vdCBtYXRjaCB0aGUgYFtuZ1xcOmNsb2FrXWAgc2VsZWN0b3IuIFRvIHdvcmsgYXJvdW5kIHRoaXMgbGltaXRhdGlvbiwgeW91IG11c3QgYWRkIHRoZSBjc3NcbiAqIGNsYXNzIGBuZy1jbG9ha2AgaW4gYWRkaXRpb24gdG8gdGhlIGBuZ0Nsb2FrYCBkaXJlY3RpdmUgYXMgc2hvd24gaW4gdGhlIGV4YW1wbGUgYmVsb3cuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8ZGl2IGlkPVwidGVtcGxhdGUxXCIgbmctY2xvYWs+e3sgJ2hlbGxvJyB9fTwvZGl2PlxuICAgICAgICA8ZGl2IGlkPVwidGVtcGxhdGUyXCIgbmctY2xvYWsgY2xhc3M9XCJuZy1jbG9ha1wiPnt7ICdoZWxsbyBJRTcnIH19PC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgcmVtb3ZlIHRoZSB0ZW1wbGF0ZSBkaXJlY3RpdmUgYW5kIGNzcyBjbGFzcycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KCQoJyN0ZW1wbGF0ZTEnKS5nZXRBdHRyaWJ1dGUoJ25nLWNsb2FrJykpLlxuICAgICAgICAgICB0b0JlTnVsbCgpO1xuICAgICAgICAgZXhwZWN0KCQoJyN0ZW1wbGF0ZTInKS5nZXRBdHRyaWJ1dGUoJ25nLWNsb2FrJykpLlxuICAgICAgICAgICB0b0JlTnVsbCgpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKlxuICovXG52YXIgbmdDbG9ha0RpcmVjdGl2ZSA9IG5nRGlyZWN0aXZlKHtcbiAgY29tcGlsZTogZnVuY3Rpb24oZWxlbWVudCwgYXR0cikge1xuICAgIGF0dHIuJHNldCgnbmdDbG9haycsIHVuZGVmaW5lZCk7XG4gICAgZWxlbWVudC5yZW1vdmVDbGFzcygnbmctY2xvYWsnKTtcbiAgfVxufSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDb250cm9sbGVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nQ29udHJvbGxlcmAgZGlyZWN0aXZlIGF0dGFjaGVzIGEgY29udHJvbGxlciBjbGFzcyB0byB0aGUgdmlldy4gVGhpcyBpcyBhIGtleSBhc3BlY3Qgb2YgaG93IGFuZ3VsYXJcbiAqIHN1cHBvcnRzIHRoZSBwcmluY2lwbGVzIGJlaGluZCB0aGUgTW9kZWwtVmlldy1Db250cm9sbGVyIGRlc2lnbiBwYXR0ZXJuLlxuICpcbiAqIE1WQyBjb21wb25lbnRzIGluIGFuZ3VsYXI6XG4gKlxuICogKiBNb2RlbCDigJQgTW9kZWxzIGFyZSB0aGUgcHJvcGVydGllcyBvZiBhIHNjb3BlOyBzY29wZXMgYXJlIGF0dGFjaGVkIHRvIHRoZSBET00gd2hlcmUgc2NvcGUgcHJvcGVydGllc1xuICogICBhcmUgYWNjZXNzZWQgdGhyb3VnaCBiaW5kaW5ncy5cbiAqICogVmlldyDigJQgVGhlIHRlbXBsYXRlIChIVE1MIHdpdGggZGF0YSBiaW5kaW5ncykgdGhhdCBpcyByZW5kZXJlZCBpbnRvIHRoZSBWaWV3LlxuICogKiBDb250cm9sbGVyIOKAlCBUaGUgYG5nQ29udHJvbGxlcmAgZGlyZWN0aXZlIHNwZWNpZmllcyBhIENvbnRyb2xsZXIgY2xhc3M7IHRoZSBjbGFzcyBjb250YWlucyBidXNpbmVzc1xuICogICBsb2dpYyBiZWhpbmQgdGhlIGFwcGxpY2F0aW9uIHRvIGRlY29yYXRlIHRoZSBzY29wZSB3aXRoIGZ1bmN0aW9ucyBhbmQgdmFsdWVzXG4gKlxuICogTm90ZSB0aGF0IHlvdSBjYW4gYWxzbyBhdHRhY2ggY29udHJvbGxlcnMgdG8gdGhlIERPTSBieSBkZWNsYXJpbmcgaXQgaW4gYSByb3V0ZSBkZWZpbml0aW9uXG4gKiB2aWEgdGhlIHtAbGluayBuZ1JvdXRlLiRyb3V0ZSAkcm91dGV9IHNlcnZpY2UuIEEgY29tbW9uIG1pc3Rha2UgaXMgdG8gZGVjbGFyZSB0aGUgY29udHJvbGxlclxuICogYWdhaW4gdXNpbmcgYG5nLWNvbnRyb2xsZXJgIGluIHRoZSB0ZW1wbGF0ZSBpdHNlbGYuICBUaGlzIHdpbGwgY2F1c2UgdGhlIGNvbnRyb2xsZXIgdG8gYmUgYXR0YWNoZWRcbiAqIGFuZCBleGVjdXRlZCB0d2ljZS5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBzY29wZVxuICogQHByaW9yaXR5IDUwMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0NvbnRyb2xsZXIgTmFtZSBvZiBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHJlZ2lzdGVyZWQgd2l0aCB0aGUgY3VycmVudFxuICoge0BsaW5rIG5nLiRjb250cm9sbGVyUHJvdmlkZXIgJGNvbnRyb2xsZXJQcm92aWRlcn0gb3IgYW4ge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn1cbiAqIHRoYXQgb24gdGhlIGN1cnJlbnQgc2NvcGUgZXZhbHVhdGVzIHRvIGEgY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gKlxuICogVGhlIGNvbnRyb2xsZXIgaW5zdGFuY2UgY2FuIGJlIHB1Ymxpc2hlZCBpbnRvIGEgc2NvcGUgcHJvcGVydHkgYnkgc3BlY2lmeWluZ1xuICogYG5nLWNvbnRyb2xsZXI9XCJhcyBwcm9wZXJ0eU5hbWVcImAuXG4gKlxuICogSWYgdGhlIGN1cnJlbnQgYCRjb250cm9sbGVyUHJvdmlkZXJgIGlzIGNvbmZpZ3VyZWQgdG8gdXNlIGdsb2JhbHMgKHZpYVxuICoge0BsaW5rIG5nLiRjb250cm9sbGVyUHJvdmlkZXIjYWxsb3dHbG9iYWxzIGAkY29udHJvbGxlclByb3ZpZGVyLmFsbG93R2xvYmFscygpYCB9KSwgdGhpcyBtYXlcbiAqIGFsc28gYmUgdGhlIG5hbWUgb2YgYSBnbG9iYWxseSBhY2Nlc3NpYmxlIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIChub3QgcmVjb21tZW5kZWQpLlxuICpcbiAqIEBleGFtcGxlXG4gKiBIZXJlIGlzIGEgc2ltcGxlIGZvcm0gZm9yIGVkaXRpbmcgdXNlciBjb250YWN0IGluZm9ybWF0aW9uLiBBZGRpbmcsIHJlbW92aW5nLCBjbGVhcmluZywgYW5kXG4gKiBncmVldGluZyBhcmUgbWV0aG9kcyBkZWNsYXJlZCBvbiB0aGUgY29udHJvbGxlciAoc2VlIHNvdXJjZSB0YWIpLiBUaGVzZSBtZXRob2RzIGNhblxuICogZWFzaWx5IGJlIGNhbGxlZCBmcm9tIHRoZSBhbmd1bGFyIG1hcmt1cC4gQW55IGNoYW5nZXMgdG8gdGhlIGRhdGEgYXJlIGF1dG9tYXRpY2FsbHkgcmVmbGVjdGVkXG4gKiBpbiB0aGUgVmlldyB3aXRob3V0IHRoZSBuZWVkIGZvciBhIG1hbnVhbCB1cGRhdGUuXG4gKlxuICogVHdvIGRpZmZlcmVudCBkZWNsYXJhdGlvbiBzdHlsZXMgYXJlIGluY2x1ZGVkIGJlbG93OlxuICpcbiAqICogb25lIGJpbmRzIG1ldGhvZHMgYW5kIHByb3BlcnRpZXMgZGlyZWN0bHkgb250byB0aGUgY29udHJvbGxlciB1c2luZyBgdGhpc2A6XG4gKiBgbmctY29udHJvbGxlcj1cIlNldHRpbmdzQ29udHJvbGxlcjEgYXMgc2V0dGluZ3NcImBcbiAqICogb25lIGluamVjdHMgYCRzY29wZWAgaW50byB0aGUgY29udHJvbGxlcjpcbiAqIGBuZy1jb250cm9sbGVyPVwiU2V0dGluZ3NDb250cm9sbGVyMlwiYFxuICpcbiAqIFRoZSBzZWNvbmQgb3B0aW9uIGlzIG1vcmUgY29tbW9uIGluIHRoZSBBbmd1bGFyIGNvbW11bml0eSwgYW5kIGlzIGdlbmVyYWxseSB1c2VkIGluIGJvaWxlcnBsYXRlc1xuICogYW5kIGluIHRoaXMgZ3VpZGUuIEhvd2V2ZXIsIHRoZXJlIGFyZSBhZHZhbnRhZ2VzIHRvIGJpbmRpbmcgcHJvcGVydGllcyBkaXJlY3RseSB0byB0aGUgY29udHJvbGxlclxuICogYW5kIGF2b2lkaW5nIHNjb3BlLlxuICpcbiAqICogVXNpbmcgYGNvbnRyb2xsZXIgYXNgIG1ha2VzIGl0IG9idmlvdXMgd2hpY2ggY29udHJvbGxlciB5b3UgYXJlIGFjY2Vzc2luZyBpbiB0aGUgdGVtcGxhdGUgd2hlblxuICogbXVsdGlwbGUgY29udHJvbGxlcnMgYXBwbHkgdG8gYW4gZWxlbWVudC5cbiAqICogSWYgeW91IGFyZSB3cml0aW5nIHlvdXIgY29udHJvbGxlcnMgYXMgY2xhc3NlcyB5b3UgaGF2ZSBlYXNpZXIgYWNjZXNzIHRvIHRoZSBwcm9wZXJ0aWVzIGFuZFxuICogbWV0aG9kcywgd2hpY2ggd2lsbCBhcHBlYXIgb24gdGhlIHNjb3BlLCBmcm9tIGluc2lkZSB0aGUgY29udHJvbGxlciBjb2RlLlxuICogKiBTaW5jZSB0aGVyZSBpcyBhbHdheXMgYSBgLmAgaW4gdGhlIGJpbmRpbmdzLCB5b3UgZG9uJ3QgaGF2ZSB0byB3b3JyeSBhYm91dCBwcm90b3R5cGFsXG4gKiBpbmhlcml0YW5jZSBtYXNraW5nIHByaW1pdGl2ZXMuXG4gKlxuICogVGhpcyBleGFtcGxlIGRlbW9uc3RyYXRlcyB0aGUgYGNvbnRyb2xsZXIgYXNgIHN5bnRheC5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwibmdDb250cm9sbGVyQXNcIiBtb2R1bGU9XCJjb250cm9sbGVyQXNFeGFtcGxlXCI+XG4gKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiAgICA8ZGl2IGlkPVwiY3RybC1hcy1leG1wbFwiIG5nLWNvbnRyb2xsZXI9XCJTZXR0aW5nc0NvbnRyb2xsZXIxIGFzIHNldHRpbmdzXCI+XG4gKiAgICAgIE5hbWU6IDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwic2V0dGluZ3MubmFtZVwiLz5cbiAqICAgICAgWyA8YSBocmVmPVwiXCIgbmctY2xpY2s9XCJzZXR0aW5ncy5ncmVldCgpXCI+Z3JlZXQ8L2E+IF08YnIvPlxuICogICAgICBDb250YWN0OlxuICogICAgICA8dWw+XG4gKiAgICAgICAgPGxpIG5nLXJlcGVhdD1cImNvbnRhY3QgaW4gc2V0dGluZ3MuY29udGFjdHNcIj5cbiAqICAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJjb250YWN0LnR5cGVcIj5cbiAqICAgICAgICAgICAgIDxvcHRpb24+cGhvbmU8L29wdGlvbj5cbiAqICAgICAgICAgICAgIDxvcHRpb24+ZW1haWw8L29wdGlvbj5cbiAqICAgICAgICAgIDwvc2VsZWN0PlxuICogICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJjb250YWN0LnZhbHVlXCIvPlxuICogICAgICAgICAgWyA8YSBocmVmPVwiXCIgbmctY2xpY2s9XCJzZXR0aW5ncy5jbGVhckNvbnRhY3QoY29udGFjdClcIj5jbGVhcjwvYT5cbiAqICAgICAgICAgIHwgPGEgaHJlZj1cIlwiIG5nLWNsaWNrPVwic2V0dGluZ3MucmVtb3ZlQ29udGFjdChjb250YWN0KVwiPlg8L2E+IF1cbiAqICAgICAgICA8L2xpPlxuICogICAgICAgIDxsaT5bIDxhIGhyZWY9XCJcIiBuZy1jbGljaz1cInNldHRpbmdzLmFkZENvbnRhY3QoKVwiPmFkZDwvYT4gXTwvbGk+XG4gKiAgICAgPC91bD5cbiAqICAgIDwvZGl2PlxuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAqICAgIGFuZ3VsYXIubW9kdWxlKCdjb250cm9sbGVyQXNFeGFtcGxlJywgW10pXG4gKiAgICAgIC5jb250cm9sbGVyKCdTZXR0aW5nc0NvbnRyb2xsZXIxJywgU2V0dGluZ3NDb250cm9sbGVyMSk7XG4gKlxuICogICAgZnVuY3Rpb24gU2V0dGluZ3NDb250cm9sbGVyMSgpIHtcbiAqICAgICAgdGhpcy5uYW1lID0gXCJKb2huIFNtaXRoXCI7XG4gKiAgICAgIHRoaXMuY29udGFjdHMgPSBbXG4gKiAgICAgICAge3R5cGU6ICdwaG9uZScsIHZhbHVlOiAnNDA4IDU1NSAxMjEyJ30sXG4gKiAgICAgICAge3R5cGU6ICdlbWFpbCcsIHZhbHVlOiAnam9obi5zbWl0aEBleGFtcGxlLm9yZyd9IF07XG4gKiAgICB9XG4gKlxuICogICAgU2V0dGluZ3NDb250cm9sbGVyMS5wcm90b3R5cGUuZ3JlZXQgPSBmdW5jdGlvbigpIHtcbiAqICAgICAgYWxlcnQodGhpcy5uYW1lKTtcbiAqICAgIH07XG4gKlxuICogICAgU2V0dGluZ3NDb250cm9sbGVyMS5wcm90b3R5cGUuYWRkQ29udGFjdCA9IGZ1bmN0aW9uKCkge1xuICogICAgICB0aGlzLmNvbnRhY3RzLnB1c2goe3R5cGU6ICdlbWFpbCcsIHZhbHVlOiAneW91cm5hbWVAZXhhbXBsZS5vcmcnfSk7XG4gKiAgICB9O1xuICpcbiAqICAgIFNldHRpbmdzQ29udHJvbGxlcjEucHJvdG90eXBlLnJlbW92ZUNvbnRhY3QgPSBmdW5jdGlvbihjb250YWN0VG9SZW1vdmUpIHtcbiAqICAgICB2YXIgaW5kZXggPSB0aGlzLmNvbnRhY3RzLmluZGV4T2YoY29udGFjdFRvUmVtb3ZlKTtcbiAqICAgICAgdGhpcy5jb250YWN0cy5zcGxpY2UoaW5kZXgsIDEpO1xuICogICAgfTtcbiAqXG4gKiAgICBTZXR0aW5nc0NvbnRyb2xsZXIxLnByb3RvdHlwZS5jbGVhckNvbnRhY3QgPSBmdW5jdGlvbihjb250YWN0KSB7XG4gKiAgICAgIGNvbnRhY3QudHlwZSA9ICdwaG9uZSc7XG4gKiAgICAgIGNvbnRhY3QudmFsdWUgPSAnJztcbiAqICAgIH07XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICogICAgIGl0KCdzaG91bGQgY2hlY2sgY29udHJvbGxlciBhcycsIGZ1bmN0aW9uKCkge1xuICogICAgICAgdmFyIGNvbnRhaW5lciA9IGVsZW1lbnQoYnkuaWQoJ2N0cmwtYXMtZXhtcGwnKSk7XG4gKiAgICAgICAgIGV4cGVjdChjb250YWluZXIuZWxlbWVudChieS5tb2RlbCgnc2V0dGluZ3MubmFtZScpKVxuICogICAgICAgICAgIC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvQmUoJ0pvaG4gU21pdGgnKTtcbiAqXG4gKiAgICAgICB2YXIgZmlyc3RSZXBlYXQgPVxuICogICAgICAgICAgIGNvbnRhaW5lci5lbGVtZW50KGJ5LnJlcGVhdGVyKCdjb250YWN0IGluIHNldHRpbmdzLmNvbnRhY3RzJykucm93KDApKTtcbiAqICAgICAgIHZhciBzZWNvbmRSZXBlYXQgPVxuICogICAgICAgICAgIGNvbnRhaW5lci5lbGVtZW50KGJ5LnJlcGVhdGVyKCdjb250YWN0IGluIHNldHRpbmdzLmNvbnRhY3RzJykucm93KDEpKTtcbiAqXG4gKiAgICAgICBleHBlY3QoZmlyc3RSZXBlYXQuZWxlbWVudChieS5tb2RlbCgnY29udGFjdC52YWx1ZScpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpXG4gKiAgICAgICAgICAgLnRvQmUoJzQwOCA1NTUgMTIxMicpO1xuICpcbiAqICAgICAgIGV4cGVjdChzZWNvbmRSZXBlYXQuZWxlbWVudChieS5tb2RlbCgnY29udGFjdC52YWx1ZScpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpXG4gKiAgICAgICAgICAgLnRvQmUoJ2pvaG4uc21pdGhAZXhhbXBsZS5vcmcnKTtcbiAqXG4gKiAgICAgICBmaXJzdFJlcGVhdC5lbGVtZW50KGJ5LmxpbmtUZXh0KCdjbGVhcicpKS5jbGljaygpO1xuICpcbiAqICAgICAgIGV4cGVjdChmaXJzdFJlcGVhdC5lbGVtZW50KGJ5Lm1vZGVsKCdjb250YWN0LnZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSlcbiAqICAgICAgICAgICAudG9CZSgnJyk7XG4gKlxuICogICAgICAgY29udGFpbmVyLmVsZW1lbnQoYnkubGlua1RleHQoJ2FkZCcpKS5jbGljaygpO1xuICpcbiAqICAgICAgIGV4cGVjdChjb250YWluZXIuZWxlbWVudChieS5yZXBlYXRlcignY29udGFjdCBpbiBzZXR0aW5ncy5jb250YWN0cycpLnJvdygyKSlcbiAqICAgICAgICAgICAuZWxlbWVudChieS5tb2RlbCgnY29udGFjdC52YWx1ZScpKVxuICogICAgICAgICAgIC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpXG4gKiAgICAgICAgICAgLnRvQmUoJ3lvdXJuYW1lQGV4YW1wbGUub3JnJyk7XG4gKiAgICAgfSk7XG4gKiAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiBUaGlzIGV4YW1wbGUgZGVtb25zdHJhdGVzIHRoZSBcImF0dGFjaCB0byBgJHNjb3BlYFwiIHN0eWxlIG9mIGNvbnRyb2xsZXIuXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cIm5nQ29udHJvbGxlclwiIG1vZHVsZT1cImNvbnRyb2xsZXJFeGFtcGxlXCI+XG4gKiAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgPGRpdiBpZD1cImN0cmwtZXhtcGxcIiBuZy1jb250cm9sbGVyPVwiU2V0dGluZ3NDb250cm9sbGVyMlwiPlxuICogICAgIE5hbWU6IDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwibmFtZVwiLz5cbiAqICAgICBbIDxhIGhyZWY9XCJcIiBuZy1jbGljaz1cImdyZWV0KClcIj5ncmVldDwvYT4gXTxici8+XG4gKiAgICAgQ29udGFjdDpcbiAqICAgICA8dWw+XG4gKiAgICAgICA8bGkgbmctcmVwZWF0PVwiY29udGFjdCBpbiBjb250YWN0c1wiPlxuICogICAgICAgICA8c2VsZWN0IG5nLW1vZGVsPVwiY29udGFjdC50eXBlXCI+XG4gKiAgICAgICAgICAgIDxvcHRpb24+cGhvbmU8L29wdGlvbj5cbiAqICAgICAgICAgICAgPG9wdGlvbj5lbWFpbDwvb3B0aW9uPlxuICogICAgICAgICA8L3NlbGVjdD5cbiAqICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJjb250YWN0LnZhbHVlXCIvPlxuICogICAgICAgICBbIDxhIGhyZWY9XCJcIiBuZy1jbGljaz1cImNsZWFyQ29udGFjdChjb250YWN0KVwiPmNsZWFyPC9hPlxuICogICAgICAgICB8IDxhIGhyZWY9XCJcIiBuZy1jbGljaz1cInJlbW92ZUNvbnRhY3QoY29udGFjdClcIj5YPC9hPiBdXG4gKiAgICAgICA8L2xpPlxuICogICAgICAgPGxpPlsgPGEgaHJlZj1cIlwiIG5nLWNsaWNrPVwiYWRkQ29udGFjdCgpXCI+YWRkPC9hPiBdPC9saT5cbiAqICAgIDwvdWw+XG4gKiAgIDwvZGl2PlxuICogIDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gKiAgIGFuZ3VsYXIubW9kdWxlKCdjb250cm9sbGVyRXhhbXBsZScsIFtdKVxuICogICAgIC5jb250cm9sbGVyKCdTZXR0aW5nc0NvbnRyb2xsZXIyJywgWyckc2NvcGUnLCBTZXR0aW5nc0NvbnRyb2xsZXIyXSk7XG4gKlxuICogICBmdW5jdGlvbiBTZXR0aW5nc0NvbnRyb2xsZXIyKCRzY29wZSkge1xuICogICAgICRzY29wZS5uYW1lID0gXCJKb2huIFNtaXRoXCI7XG4gKiAgICAgJHNjb3BlLmNvbnRhY3RzID0gW1xuICogICAgICAge3R5cGU6J3Bob25lJywgdmFsdWU6JzQwOCA1NTUgMTIxMid9LFxuICogICAgICAge3R5cGU6J2VtYWlsJywgdmFsdWU6J2pvaG4uc21pdGhAZXhhbXBsZS5vcmcnfSBdO1xuICpcbiAqICAgICAkc2NvcGUuZ3JlZXQgPSBmdW5jdGlvbigpIHtcbiAqICAgICAgIGFsZXJ0KCRzY29wZS5uYW1lKTtcbiAqICAgICB9O1xuICpcbiAqICAgICAkc2NvcGUuYWRkQ29udGFjdCA9IGZ1bmN0aW9uKCkge1xuICogICAgICAgJHNjb3BlLmNvbnRhY3RzLnB1c2goe3R5cGU6J2VtYWlsJywgdmFsdWU6J3lvdXJuYW1lQGV4YW1wbGUub3JnJ30pO1xuICogICAgIH07XG4gKlxuICogICAgICRzY29wZS5yZW1vdmVDb250YWN0ID0gZnVuY3Rpb24oY29udGFjdFRvUmVtb3ZlKSB7XG4gKiAgICAgICB2YXIgaW5kZXggPSAkc2NvcGUuY29udGFjdHMuaW5kZXhPZihjb250YWN0VG9SZW1vdmUpO1xuICogICAgICAgJHNjb3BlLmNvbnRhY3RzLnNwbGljZShpbmRleCwgMSk7XG4gKiAgICAgfTtcbiAqXG4gKiAgICAgJHNjb3BlLmNsZWFyQ29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3QpIHtcbiAqICAgICAgIGNvbnRhY3QudHlwZSA9ICdwaG9uZSc7XG4gKiAgICAgICBjb250YWN0LnZhbHVlID0gJyc7XG4gKiAgICAgfTtcbiAqICAgfVxuICogIDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gKiAgICBpdCgnc2hvdWxkIGNoZWNrIGNvbnRyb2xsZXInLCBmdW5jdGlvbigpIHtcbiAqICAgICAgdmFyIGNvbnRhaW5lciA9IGVsZW1lbnQoYnkuaWQoJ2N0cmwtZXhtcGwnKSk7XG4gKlxuICogICAgICBleHBlY3QoY29udGFpbmVyLmVsZW1lbnQoYnkubW9kZWwoJ25hbWUnKSlcbiAqICAgICAgICAgIC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvQmUoJ0pvaG4gU21pdGgnKTtcbiAqXG4gKiAgICAgIHZhciBmaXJzdFJlcGVhdCA9XG4gKiAgICAgICAgICBjb250YWluZXIuZWxlbWVudChieS5yZXBlYXRlcignY29udGFjdCBpbiBjb250YWN0cycpLnJvdygwKSk7XG4gKiAgICAgIHZhciBzZWNvbmRSZXBlYXQgPVxuICogICAgICAgICAgY29udGFpbmVyLmVsZW1lbnQoYnkucmVwZWF0ZXIoJ2NvbnRhY3QgaW4gY29udGFjdHMnKS5yb3coMSkpO1xuICpcbiAqICAgICAgZXhwZWN0KGZpcnN0UmVwZWF0LmVsZW1lbnQoYnkubW9kZWwoJ2NvbnRhY3QudmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKVxuICogICAgICAgICAgLnRvQmUoJzQwOCA1NTUgMTIxMicpO1xuICogICAgICBleHBlY3Qoc2Vjb25kUmVwZWF0LmVsZW1lbnQoYnkubW9kZWwoJ2NvbnRhY3QudmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKVxuICogICAgICAgICAgLnRvQmUoJ2pvaG4uc21pdGhAZXhhbXBsZS5vcmcnKTtcbiAqXG4gKiAgICAgIGZpcnN0UmVwZWF0LmVsZW1lbnQoYnkubGlua1RleHQoJ2NsZWFyJykpLmNsaWNrKCk7XG4gKlxuICogICAgICBleHBlY3QoZmlyc3RSZXBlYXQuZWxlbWVudChieS5tb2RlbCgnY29udGFjdC52YWx1ZScpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpXG4gKiAgICAgICAgICAudG9CZSgnJyk7XG4gKlxuICogICAgICBjb250YWluZXIuZWxlbWVudChieS5saW5rVGV4dCgnYWRkJykpLmNsaWNrKCk7XG4gKlxuICogICAgICBleHBlY3QoY29udGFpbmVyLmVsZW1lbnQoYnkucmVwZWF0ZXIoJ2NvbnRhY3QgaW4gY29udGFjdHMnKS5yb3coMikpXG4gKiAgICAgICAgICAuZWxlbWVudChieS5tb2RlbCgnY29udGFjdC52YWx1ZScpKVxuICogICAgICAgICAgLmdldEF0dHJpYnV0ZSgndmFsdWUnKSlcbiAqICAgICAgICAgIC50b0JlKCd5b3VybmFtZUBleGFtcGxlLm9yZycpO1xuICogICAgfSk7XG4gKiAgPC9maWxlPlxuICo8L2V4YW1wbGU+XG5cbiAqL1xudmFyIG5nQ29udHJvbGxlckRpcmVjdGl2ZSA9IFtmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHNjb3BlOiB0cnVlLFxuICAgIGNvbnRyb2xsZXI6ICdAJyxcbiAgICBwcmlvcml0eTogNTAwXG4gIH07XG59XTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0NzcFxuICpcbiAqIEBlbGVtZW50IGh0bWxcbiAqIEBkZXNjcmlwdGlvblxuICogRW5hYmxlcyBbQ1NQIChDb250ZW50IFNlY3VyaXR5IFBvbGljeSldKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL1NlY3VyaXR5L0NTUCkgc3VwcG9ydC5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSB3aGVuIGRldmVsb3BpbmcgdGhpbmdzIGxpa2UgR29vZ2xlIENocm9tZSBFeHRlbnNpb25zIG9yIFVuaXZlcnNhbCBXaW5kb3dzIEFwcHMuXG4gKlxuICogQ1NQIGZvcmJpZHMgYXBwcyB0byB1c2UgYGV2YWxgIG9yIGBGdW5jdGlvbihzdHJpbmcpYCBnZW5lcmF0ZWQgZnVuY3Rpb25zIChhbW9uZyBvdGhlciB0aGluZ3MpLlxuICogRm9yIEFuZ3VsYXIgdG8gYmUgQ1NQIGNvbXBhdGlibGUgdGhlcmUgYXJlIG9ubHkgdHdvIHRoaW5ncyB0aGF0IHdlIG5lZWQgdG8gZG8gZGlmZmVyZW50bHk6XG4gKlxuICogLSBkb24ndCB1c2UgYEZ1bmN0aW9uYCBjb25zdHJ1Y3RvciB0byBnZW5lcmF0ZSBvcHRpbWl6ZWQgdmFsdWUgZ2V0dGVyc1xuICogLSBkb24ndCBpbmplY3QgY3VzdG9tIHN0eWxlc2hlZXQgaW50byB0aGUgZG9jdW1lbnRcbiAqXG4gKiBBbmd1bGFySlMgdXNlcyBgRnVuY3Rpb24oc3RyaW5nKWAgZ2VuZXJhdGVkIGZ1bmN0aW9ucyBhcyBhIHNwZWVkIG9wdGltaXphdGlvbi4gQXBwbHlpbmcgdGhlIGBuZ0NzcGBcbiAqIGRpcmVjdGl2ZSB3aWxsIGNhdXNlIEFuZ3VsYXIgdG8gdXNlIENTUCBjb21wYXRpYmlsaXR5IG1vZGUuIFdoZW4gdGhpcyBtb2RlIGlzIG9uIEFuZ3VsYXJKUyB3aWxsXG4gKiBldmFsdWF0ZSBhbGwgZXhwcmVzc2lvbnMgdXAgdG8gMzAlIHNsb3dlciB0aGFuIGluIG5vbi1DU1AgbW9kZSwgYnV0IG5vIHNlY3VyaXR5IHZpb2xhdGlvbnMgd2lsbFxuICogYmUgcmFpc2VkLlxuICpcbiAqIENTUCBmb3JiaWRzIEphdmFTY3JpcHQgdG8gaW5saW5lIHN0eWxlc2hlZXQgcnVsZXMuIEluIG5vbiBDU1AgbW9kZSBBbmd1bGFyIGF1dG9tYXRpY2FsbHlcbiAqIGluY2x1ZGVzIHNvbWUgQ1NTIHJ1bGVzIChlLmcuIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbG9hayBuZ0Nsb2FrfSkuXG4gKiBUbyBtYWtlIHRob3NlIGRpcmVjdGl2ZXMgd29yayBpbiBDU1AgbW9kZSwgaW5jbHVkZSB0aGUgYGFuZ3VsYXItY3NwLmNzc2AgbWFudWFsbHkuXG4gKlxuICogQW5ndWxhciB0cmllcyB0byBhdXRvZGV0ZWN0IGlmIENTUCBpcyBhY3RpdmUgYW5kIGF1dG9tYXRpY2FsbHkgdHVybiBvbiB0aGUgQ1NQLXNhZmUgbW9kZS4gVGhpc1xuICogYXV0b2RldGVjdGlvbiBob3dldmVyIHRyaWdnZXJzIGEgQ1NQIGVycm9yIHRvIGJlIGxvZ2dlZCBpbiB0aGUgY29uc29sZTpcbiAqXG4gKiBgYGBcbiAqIFJlZnVzZWQgdG8gZXZhbHVhdGUgYSBzdHJpbmcgYXMgSmF2YVNjcmlwdCBiZWNhdXNlICd1bnNhZmUtZXZhbCcgaXMgbm90IGFuIGFsbG93ZWQgc291cmNlIG9mXG4gKiBzY3JpcHQgaW4gdGhlIGZvbGxvd2luZyBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBkaXJlY3RpdmU6IFwiZGVmYXVsdC1zcmMgJ3NlbGYnXCIuIE5vdGUgdGhhdFxuICogJ3NjcmlwdC1zcmMnIHdhcyBub3QgZXhwbGljaXRseSBzZXQsIHNvICdkZWZhdWx0LXNyYycgaXMgdXNlZCBhcyBhIGZhbGxiYWNrLlxuICogYGBgXG4gKlxuICogVGhpcyBlcnJvciBpcyBoYXJtbGVzcyBidXQgYW5ub3lpbmcuIFRvIHByZXZlbnQgdGhlIGVycm9yIGZyb20gc2hvd2luZyB1cCwgcHV0IHRoZSBgbmdDc3BgXG4gKiBkaXJlY3RpdmUgb24gdGhlIHJvb3QgZWxlbWVudCBvZiB0aGUgYXBwbGljYXRpb24gb3Igb24gdGhlIGBhbmd1bGFyLmpzYCBzY3JpcHQgdGFnLCB3aGljaGV2ZXJcbiAqIGFwcGVhcnMgZmlyc3QgaW4gdGhlIGh0bWwgZG9jdW1lbnQuXG4gKlxuICogKk5vdGU6IFRoaXMgZGlyZWN0aXZlIGlzIG9ubHkgYXZhaWxhYmxlIGluIHRoZSBgbmctY3NwYCBhbmQgYGRhdGEtbmctY3NwYCBhdHRyaWJ1dGUgZm9ybS4qXG4gKlxuICogQGV4YW1wbGVcbiAqIFRoaXMgZXhhbXBsZSBzaG93cyBob3cgdG8gYXBwbHkgdGhlIGBuZ0NzcGAgZGlyZWN0aXZlIHRvIHRoZSBgaHRtbGAgdGFnLlxuICAgYGBgaHRtbFxuICAgICA8IWRvY3R5cGUgaHRtbD5cbiAgICAgPGh0bWwgbmctYXBwIG5nLWNzcD5cbiAgICAgLi4uXG4gICAgIC4uLlxuICAgICA8L2h0bWw+XG4gICBgYGBcbiAgKiBAZXhhbXBsZVxuICAgICAgLy8gTm90ZTogdGhlIHN1ZmZpeCBgLmNzcGAgaW4gdGhlIGV4YW1wbGUgbmFtZSB0cmlnZ2Vyc1xuICAgICAgLy8gY3NwIG1vZGUgaW4gb3VyIGh0dHAgc2VydmVyIVxuICAgICAgPGV4YW1wbGUgbmFtZT1cImV4YW1wbGUuY3NwXCIgbW9kdWxlPVwiY3NwRXhhbXBsZVwiIG5nLWNzcD1cInRydWVcIj5cbiAgICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJNYWluQ29udHJvbGxlciBhcyBjdHJsXCI+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiY3RybC5pbmMoKVwiIGlkPVwiaW5jXCI+SW5jcmVtZW50PC9idXR0b24+XG4gICAgICAgICAgICAgIDxzcGFuIGlkPVwiY291bnRlclwiPlxuICAgICAgICAgICAgICAgIHt7Y3RybC5jb3VudGVyfX1cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJjdHJsLmV2aWwoKVwiIGlkPVwiZXZpbFwiPkV2aWw8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPHNwYW4gaWQ9XCJldmlsRXJyb3JcIj5cbiAgICAgICAgICAgICAgICB7e2N0cmwuZXZpbEVycm9yfX1cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZmlsZT5cbiAgICAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgnY3NwRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgIC5jb250cm9sbGVyKCdNYWluQ29udHJvbGxlcicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY291bnRlciA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuY291bnRlcisrO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy5ldmlsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAvLyBqc2hpbnQgZXZpbDp0cnVlXG4gICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBldmFsKCcxKzInKTtcbiAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ldmlsRXJyb3IgPSBlLm1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgIDwvZmlsZT5cbiAgICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgIHZhciB1dGlsLCB3ZWJkcml2ZXI7XG5cbiAgICAgICAgICB2YXIgaW5jQnRuID0gZWxlbWVudChieS5pZCgnaW5jJykpO1xuICAgICAgICAgIHZhciBjb3VudGVyID0gZWxlbWVudChieS5pZCgnY291bnRlcicpKTtcbiAgICAgICAgICB2YXIgZXZpbEJ0biA9IGVsZW1lbnQoYnkuaWQoJ2V2aWwnKSk7XG4gICAgICAgICAgdmFyIGV2aWxFcnJvciA9IGVsZW1lbnQoYnkuaWQoJ2V2aWxFcnJvcicpKTtcblxuICAgICAgICAgIGZ1bmN0aW9uIGdldEFuZENsZWFyU2V2ZXJlRXJyb3JzKCkge1xuICAgICAgICAgICAgcmV0dXJuIGJyb3dzZXIubWFuYWdlKCkubG9ncygpLmdldCgnYnJvd3NlcicpLnRoZW4oZnVuY3Rpb24oYnJvd3NlckxvZykge1xuICAgICAgICAgICAgICByZXR1cm4gYnJvd3NlckxvZy5maWx0ZXIoZnVuY3Rpb24obG9nRW50cnkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9nRW50cnkubGV2ZWwudmFsdWUgPiB3ZWJkcml2ZXIubG9nZ2luZy5MZXZlbC5XQVJOSU5HLnZhbHVlO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZ1bmN0aW9uIGNsZWFyRXJyb3JzKCkge1xuICAgICAgICAgICAgZ2V0QW5kQ2xlYXJTZXZlcmVFcnJvcnMoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmdW5jdGlvbiBleHBlY3ROb0Vycm9ycygpIHtcbiAgICAgICAgICAgIGdldEFuZENsZWFyU2V2ZXJlRXJyb3JzKCkudGhlbihmdW5jdGlvbihmaWx0ZXJlZExvZykge1xuICAgICAgICAgICAgICBleHBlY3QoZmlsdGVyZWRMb2cubGVuZ3RoKS50b0VxdWFsKDApO1xuICAgICAgICAgICAgICBpZiAoZmlsdGVyZWRMb2cubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2Jyb3dzZXIgY29uc29sZSBlcnJvcnM6ICcgKyB1dGlsLmluc3BlY3QoZmlsdGVyZWRMb2cpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZnVuY3Rpb24gZXhwZWN0RXJyb3IocmVnZXgpIHtcbiAgICAgICAgICAgIGdldEFuZENsZWFyU2V2ZXJlRXJyb3JzKCkudGhlbihmdW5jdGlvbihmaWx0ZXJlZExvZykge1xuICAgICAgICAgICAgICB2YXIgZm91bmQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgZmlsdGVyZWRMb2cuZm9yRWFjaChmdW5jdGlvbihsb2cpIHtcbiAgICAgICAgICAgICAgICBpZiAobG9nLm1lc3NhZ2UubWF0Y2gocmVnZXgpKSB7XG4gICAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgaWYgKCFmb3VuZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZXhwZWN0ZWQgYW4gZXJyb3IgdGhhdCBtYXRjaGVzICcgKyByZWdleCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJlZm9yZUVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuICAgICAgICAgICAgd2ViZHJpdmVyID0gcmVxdWlyZSgncHJvdHJhY3Rvci9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICAvLyBGb3Igbm93LCB3ZSBvbmx5IHRlc3Qgb24gQ2hyb21lLFxuICAgICAgICAgIC8vIGFzIFNhZmFyaSBkb2VzIG5vdCBsb2FkIHRoZSBwYWdlIHdpdGggUHJvdHJhY3RvcidzIGluamVjdGVkIHNjcmlwdHMsXG4gICAgICAgICAgLy8gYW5kIEZpcmVmb3ggd2ViZHJpdmVyIGFsd2F5cyBkaXNhYmxlcyBjb250ZW50IHNlY3VyaXR5IHBvbGljeSAoIzYzNTgpXG4gICAgICAgICAgaWYgKGJyb3dzZXIucGFyYW1zLmJyb3dzZXIgIT09ICdjaHJvbWUnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBub3QgcmVwb3J0IGVycm9ycyB3aGVuIHRoZSBwYWdlIGlzIGxvYWRlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gY2xlYXIgZXJyb3JzIHNvIHdlIGFyZSBub3QgZGVwZW5kZW50IG9uIHByZXZpb3VzIHRlc3RzXG4gICAgICAgICAgICBjbGVhckVycm9ycygpO1xuICAgICAgICAgICAgLy8gTmVlZCB0byByZWxvYWQgdGhlIHBhZ2UgYXMgdGhlIHBhZ2UgaXMgYWxyZWFkeSBsb2FkZWQgd2hlblxuICAgICAgICAgICAgLy8gd2UgY29tZSBoZXJlXG4gICAgICAgICAgICBicm93c2VyLmRyaXZlci5nZXRDdXJyZW50VXJsKCkudGhlbihmdW5jdGlvbih1cmwpIHtcbiAgICAgICAgICAgICAgYnJvd3Nlci5nZXQodXJsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZXhwZWN0Tm9FcnJvcnMoKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGl0KCdzaG91bGQgZXZhbHVhdGUgZXhwcmVzc2lvbnMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdChjb3VudGVyLmdldFRleHQoKSkudG9FcXVhbCgnMCcpO1xuICAgICAgICAgICAgaW5jQnRuLmNsaWNrKCk7XG4gICAgICAgICAgICBleHBlY3QoY291bnRlci5nZXRUZXh0KCkpLnRvRXF1YWwoJzEnKTtcbiAgICAgICAgICAgIGV4cGVjdE5vRXJyb3JzKCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIHRocm93IGFuZCByZXBvcnQgYW4gZXJyb3Igd2hlbiB1c2luZyBcImV2YWxcIicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZXZpbEJ0bi5jbGljaygpO1xuICAgICAgICAgICAgZXhwZWN0KGV2aWxFcnJvci5nZXRUZXh0KCkpLnRvTWF0Y2goL0NvbnRlbnQgU2VjdXJpdHkgUG9saWN5Lyk7XG4gICAgICAgICAgICBleHBlY3RFcnJvcigvQ29udGVudCBTZWN1cml0eSBQb2xpY3kvKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgPC9maWxlPlxuICAgICAgPC9leGFtcGxlPlxuICAqL1xuXG4vLyBuZ0NzcCBpcyBub3QgaW1wbGVtZW50ZWQgYXMgYSBwcm9wZXIgZGlyZWN0aXZlIGFueSBtb3JlLCBiZWNhdXNlIHdlIG5lZWQgaXQgYmUgcHJvY2Vzc2VkIHdoaWxlIHdlXG4vLyBib290c3RyYXAgdGhlIHN5c3RlbSAoYmVmb3JlICRwYXJzZSBpcyBpbnN0YW50aWF0ZWQpLCBmb3IgdGhpcyByZWFzb24gd2UganVzdCBoYXZlXG4vLyB0aGUgY3NwLmlzQWN0aXZlKCkgZm4gdGhhdCBsb29rcyBmb3IgbmctY3NwIGF0dHJpYnV0ZSBhbnl3aGVyZSBpbiB0aGUgY3VycmVudCBkb2NcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0NsaWNrXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgbmdDbGljayBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBzcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciB3aGVuXG4gKiBhbiBlbGVtZW50IGlzIGNsaWNrZWQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0NsaWNrIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIGNsaWNrLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICBJbmNyZW1lbnRcbiAgICAgIDwvYnV0dG9uPlxuICAgICAgPHNwYW4+XG4gICAgICAgIGNvdW50OiB7e2NvdW50fX1cbiAgICAgIDwvc3Bhbj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1jbGljaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnY291bnQnKSkuZ2V0VGV4dCgpKS50b01hdGNoKCcwJyk7XG4gICAgICAgICBlbGVtZW50KGJ5LmNzcygnYnV0dG9uJykpLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdjb3VudCcpKS5nZXRUZXh0KCkpLnRvTWF0Y2goJzEnKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG4vKlxuICogQSBjb2xsZWN0aW9uIG9mIGRpcmVjdGl2ZXMgdGhhdCBhbGxvd3MgY3JlYXRpb24gb2YgY3VzdG9tIGV2ZW50IGhhbmRsZXJzIHRoYXQgYXJlIGRlZmluZWQgYXNcbiAqIGFuZ3VsYXIgZXhwcmVzc2lvbnMgYW5kIGFyZSBjb21waWxlZCBhbmQgZXhlY3V0ZWQgd2l0aGluIHRoZSBjdXJyZW50IHNjb3BlLlxuICovXG52YXIgbmdFdmVudERpcmVjdGl2ZXMgPSB7fTtcblxuLy8gRm9yIGV2ZW50cyB0aGF0IG1pZ2h0IGZpcmUgc3luY2hyb25vdXNseSBkdXJpbmcgRE9NIG1hbmlwdWxhdGlvblxuLy8gd2UgbmVlZCB0byBleGVjdXRlIHRoZWlyIGV2ZW50IGhhbmRsZXJzIGFzeW5jaHJvbm91c2x5IHVzaW5nICRldmFsQXN5bmMsXG4vLyBzbyB0aGF0IHRoZXkgYXJlIG5vdCBleGVjdXRlZCBpbiBhbiBpbmNvbnNpc3RlbnQgc3RhdGUuXG52YXIgZm9yY2VBc3luY0V2ZW50cyA9IHtcbiAgJ2JsdXInOiB0cnVlLFxuICAnZm9jdXMnOiB0cnVlXG59O1xuZm9yRWFjaChcbiAgJ2NsaWNrIGRibGNsaWNrIG1vdXNlZG93biBtb3VzZXVwIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZW1vdmUgbW91c2VlbnRlciBtb3VzZWxlYXZlIGtleWRvd24ga2V5dXAga2V5cHJlc3Mgc3VibWl0IGZvY3VzIGJsdXIgY29weSBjdXQgcGFzdGUnLnNwbGl0KCcgJyksXG4gIGZ1bmN0aW9uKGV2ZW50TmFtZSkge1xuICAgIHZhciBkaXJlY3RpdmVOYW1lID0gZGlyZWN0aXZlTm9ybWFsaXplKCduZy0nICsgZXZlbnROYW1lKTtcbiAgICBuZ0V2ZW50RGlyZWN0aXZlc1tkaXJlY3RpdmVOYW1lXSA9IFsnJHBhcnNlJywgJyRyb290U2NvcGUnLCBmdW5jdGlvbigkcGFyc2UsICRyb290U2NvcGUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICAgIGNvbXBpbGU6IGZ1bmN0aW9uKCRlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgICAgLy8gV2UgZXhwb3NlIHRoZSBwb3dlcmZ1bCAkZXZlbnQgb2JqZWN0IG9uIHRoZSBzY29wZSB0aGF0IHByb3ZpZGVzIGFjY2VzcyB0byB0aGUgV2luZG93LFxuICAgICAgICAgIC8vIGV0Yy4gdGhhdCBpc24ndCBwcm90ZWN0ZWQgYnkgdGhlIGZhc3QgcGF0aHMgaW4gJHBhcnNlLiAgV2UgZXhwbGljaXRseSByZXF1ZXN0IGJldHRlclxuICAgICAgICAgIC8vIGNoZWNrcyBhdCB0aGUgY29zdCBvZiBzcGVlZCBzaW5jZSBldmVudCBoYW5kbGVyIGV4cHJlc3Npb25zIGFyZSBub3QgZXhlY3V0ZWQgYXNcbiAgICAgICAgICAvLyBmcmVxdWVudGx5IGFzIHJlZ3VsYXIgY2hhbmdlIGRldGVjdGlvbi5cbiAgICAgICAgICB2YXIgZm4gPSAkcGFyc2UoYXR0cltkaXJlY3RpdmVOYW1lXSwgLyogaW50ZXJjZXB0b3JGbiAqLyBudWxsLCAvKiBleHBlbnNpdmVDaGVja3MgKi8gdHJ1ZSk7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5nRXZlbnRIYW5kbGVyKHNjb3BlLCBlbGVtZW50KSB7XG4gICAgICAgICAgICBlbGVtZW50Lm9uKGV2ZW50TmFtZSwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZm4oc2NvcGUsIHskZXZlbnQ6ZXZlbnR9KTtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgaWYgKGZvcmNlQXN5bmNFdmVudHNbZXZlbnROYW1lXSAmJiAkcm9vdFNjb3BlLiQkcGhhc2UpIHtcbiAgICAgICAgICAgICAgICBzY29wZS4kZXZhbEFzeW5jKGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzY29wZS4kYXBwbHkoY2FsbGJhY2spO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1dO1xuICB9XG4pO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nRGJsY2xpY2tcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdEYmxjbGlja2AgZGlyZWN0aXZlIGFsbG93cyB5b3UgdG8gc3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gYSBkYmxjbGljayBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nRGJsY2xpY2sge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogYSBkYmxjbGljay4gKFRoZSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgKVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxidXR0b24gbmctZGJsY2xpY2s9XCJjb3VudCA9IGNvdW50ICsgMVwiIG5nLWluaXQ9XCJjb3VudD0wXCI+XG4gICAgICAgIEluY3JlbWVudCAob24gZG91YmxlIGNsaWNrKVxuICAgICAgPC9idXR0b24+XG4gICAgICBjb3VudDoge3tjb3VudH19XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdNb3VzZWRvd25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBuZ01vdXNlZG93biBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBzcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBtb3VzZWRvd24gZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ01vdXNlZG93biB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBtb3VzZWRvd24uICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxidXR0b24gbmctbW91c2Vkb3duPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICBJbmNyZW1lbnQgKG9uIG1vdXNlIGRvd24pXG4gICAgICA8L2J1dHRvbj5cbiAgICAgIGNvdW50OiB7e2NvdW50fX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ01vdXNldXBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIG1vdXNldXAgZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ01vdXNldXAge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogbW91c2V1cC4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGJ1dHRvbiBuZy1tb3VzZXVwPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICBJbmNyZW1lbnQgKG9uIG1vdXNlIHVwKVxuICAgICAgPC9idXR0b24+XG4gICAgICBjb3VudDoge3tjb3VudH19XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nTW91c2VvdmVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBtb3VzZW92ZXIgZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ01vdXNlb3ZlciB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBtb3VzZW92ZXIuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxidXR0b24gbmctbW91c2VvdmVyPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICBJbmNyZW1lbnQgKHdoZW4gbW91c2UgaXMgb3ZlcilcbiAgICAgIDwvYnV0dG9uPlxuICAgICAgY291bnQ6IHt7Y291bnR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nTW91c2VlbnRlclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gbW91c2VlbnRlciBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2VlbnRlciB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBtb3VzZWVudGVyLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8YnV0dG9uIG5nLW1vdXNlZW50ZXI9XCJjb3VudCA9IGNvdW50ICsgMVwiIG5nLWluaXQ9XCJjb3VudD0wXCI+XG4gICAgICAgIEluY3JlbWVudCAod2hlbiBtb3VzZSBlbnRlcnMpXG4gICAgICA8L2J1dHRvbj5cbiAgICAgIGNvdW50OiB7e2NvdW50fX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ01vdXNlbGVhdmVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIG1vdXNlbGVhdmUgZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ01vdXNlbGVhdmUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogbW91c2VsZWF2ZS4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGJ1dHRvbiBuZy1tb3VzZWxlYXZlPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICBJbmNyZW1lbnQgKHdoZW4gbW91c2UgbGVhdmVzKVxuICAgICAgPC9idXR0b24+XG4gICAgICBjb3VudDoge3tjb3VudH19XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdNb3VzZW1vdmVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIG1vdXNlbW92ZSBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2Vtb3ZlIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIG1vdXNlbW92ZS4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGJ1dHRvbiBuZy1tb3VzZW1vdmU9XCJjb3VudCA9IGNvdW50ICsgMVwiIG5nLWluaXQ9XCJjb3VudD0wXCI+XG4gICAgICAgIEluY3JlbWVudCAod2hlbiBtb3VzZSBtb3ZlcylcbiAgICAgIDwvYnV0dG9uPlxuICAgICAgY291bnQ6IHt7Y291bnR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nS2V5ZG93blxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24ga2V5ZG93biBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nS2V5ZG93biB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBrZXlkb3duLiAoRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YCBhbmQgY2FuIGJlIGludGVycm9nYXRlZCBmb3Iga2V5Q29kZSwgYWx0S2V5LCBldGMuKVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxpbnB1dCBuZy1rZXlkb3duPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAga2V5IGRvd24gY291bnQ6IHt7Y291bnR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nS2V5dXBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGtleXVwIGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdLZXl1cCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBrZXl1cC4gKEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGAgYW5kIGNhbiBiZSBpbnRlcnJvZ2F0ZWQgZm9yIGtleUNvZGUsIGFsdEtleSwgZXRjLilcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHA+VHlwaW5nIGluIHRoZSBpbnB1dCBib3ggYmVsb3cgdXBkYXRlcyB0aGUga2V5IGNvdW50PC9wPlxuICAgICAgIDxpbnB1dCBuZy1rZXl1cD1cImNvdW50ID0gY291bnQgKyAxXCIgbmctaW5pdD1cImNvdW50PTBcIj4ga2V5IHVwIGNvdW50OiB7e2NvdW50fX1cblxuICAgICAgIDxwPlR5cGluZyBpbiB0aGUgaW5wdXQgYm94IGJlbG93IHVwZGF0ZXMgdGhlIGtleWNvZGU8L3A+XG4gICAgICAgPGlucHV0IG5nLWtleXVwPVwiZXZlbnQ9JGV2ZW50XCI+XG4gICAgICAgPHA+ZXZlbnQga2V5Q29kZToge3sgZXZlbnQua2V5Q29kZSB9fTwvcD5cbiAgICAgICA8cD5ldmVudCBhbHRLZXk6IHt7IGV2ZW50LmFsdEtleSB9fTwvcD5cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0tleXByZXNzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBrZXlwcmVzcyBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdLZXlwcmVzcyB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBrZXlwcmVzcy4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH1cbiAqIGFuZCBjYW4gYmUgaW50ZXJyb2dhdGVkIGZvciBrZXlDb2RlLCBhbHRLZXksIGV0Yy4pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGlucHV0IG5nLWtleXByZXNzPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAga2V5IHByZXNzIGNvdW50OiB7e2NvdW50fX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1N1Ym1pdFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRW5hYmxlcyBiaW5kaW5nIGFuZ3VsYXIgZXhwcmVzc2lvbnMgdG8gb25zdWJtaXQgZXZlbnRzLlxuICpcbiAqIEFkZGl0aW9uYWxseSBpdCBwcmV2ZW50cyB0aGUgZGVmYXVsdCBhY3Rpb24gKHdoaWNoIGZvciBmb3JtIG1lYW5zIHNlbmRpbmcgdGhlIHJlcXVlc3QgdG8gdGhlXG4gKiBzZXJ2ZXIgYW5kIHJlbG9hZGluZyB0aGUgY3VycmVudCBwYWdlKSwgYnV0IG9ubHkgaWYgdGhlIGZvcm0gZG9lcyBub3QgY29udGFpbiBgYWN0aW9uYCxcbiAqIGBkYXRhLWFjdGlvbmAsIG9yIGB4LWFjdGlvbmAgYXR0cmlidXRlcy5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipXYXJuaW5nOioqIEJlIGNhcmVmdWwgbm90IHRvIGNhdXNlIFwiZG91YmxlLXN1Ym1pc3Npb25cIiBieSB1c2luZyBib3RoIHRoZSBgbmdDbGlja2AgYW5kXG4gKiBgbmdTdWJtaXRgIGhhbmRsZXJzIHRvZ2V0aGVyLiBTZWUgdGhlXG4gKiB7QGxpbmsgZm9ybSNzdWJtaXR0aW5nLWEtZm9ybS1hbmQtcHJldmVudGluZy10aGUtZGVmYXVsdC1hY3Rpb24gYGZvcm1gIGRpcmVjdGl2ZSBkb2N1bWVudGF0aW9ufVxuICogZm9yIGEgZGV0YWlsZWQgZGlzY3Vzc2lvbiBvZiB3aGVuIGBuZ1N1Ym1pdGAgbWF5IGJlIHRyaWdnZXJlZC5cbiAqIDwvZGl2PlxuICpcbiAqIEBlbGVtZW50IGZvcm1cbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nU3VibWl0IHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuXG4gKiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwic3VibWl0RXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPHNjcmlwdD5cbiAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3N1Ym1pdEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgJHNjb3BlLmxpc3QgPSBbXTtcbiAgICAgICAgICAgICRzY29wZS50ZXh0ID0gJ2hlbGxvJztcbiAgICAgICAgICAgICRzY29wZS5zdWJtaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgaWYgKCRzY29wZS50ZXh0KSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLmxpc3QucHVzaCh0aGlzLnRleHQpO1xuICAgICAgICAgICAgICAgICRzY29wZS50ZXh0ID0gJyc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfV0pO1xuICAgICAgPC9zY3JpcHQ+XG4gICAgICA8Zm9ybSBuZy1zdWJtaXQ9XCJzdWJtaXQoKVwiIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICBFbnRlciB0ZXh0IGFuZCBoaXQgZW50ZXI6XG4gICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwidGV4dFwiIG5hbWU9XCJ0ZXh0XCIgLz5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJzdWJtaXRcIiBpZD1cInN1Ym1pdFwiIHZhbHVlPVwiU3VibWl0XCIgLz5cbiAgICAgICAgPHByZT5saXN0PXt7bGlzdH19PC9wcmU+XG4gICAgICA8L2Zvcm0+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctc3VibWl0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdsaXN0JykpLmdldFRleHQoKSkudG9CZSgnbGlzdD1bXScpO1xuICAgICAgICAgZWxlbWVudChieS5jc3MoJyNzdWJtaXQnKSkuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ2xpc3QnKSkuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2hlbGxvJyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5tb2RlbCgndGV4dCcpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvQmUoJycpO1xuICAgICAgIH0pO1xuICAgICAgIGl0KCdzaG91bGQgaWdub3JlIGVtcHR5IHN0cmluZ3MnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ2xpc3QnKSkuZ2V0VGV4dCgpKS50b0JlKCdsaXN0PVtdJyk7XG4gICAgICAgICBlbGVtZW50KGJ5LmNzcygnI3N1Ym1pdCcpKS5jbGljaygpO1xuICAgICAgICAgZWxlbWVudChieS5jc3MoJyNzdWJtaXQnKSkuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ2xpc3QnKSkuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2hlbGxvJyk7XG4gICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0ZvY3VzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBmb2N1cyBldmVudC5cbiAqXG4gKiBOb3RlOiBBcyB0aGUgYGZvY3VzYCBldmVudCBpcyBleGVjdXRlZCBzeW5jaHJvbm91c2x5IHdoZW4gY2FsbGluZyBgaW5wdXQuZm9jdXMoKWBcbiAqIEFuZ3VsYXJKUyBleGVjdXRlcyB0aGUgZXhwcmVzc2lvbiB1c2luZyBgc2NvcGUuJGV2YWxBc3luY2AgaWYgdGhlIGV2ZW50IGlzIGZpcmVkXG4gKiBkdXJpbmcgYW4gYCRhcHBseWAgdG8gZW5zdXJlIGEgY29uc2lzdGVudCBzdGF0ZS5cbiAqXG4gKiBAZWxlbWVudCB3aW5kb3csIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBhXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0ZvY3VzIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIGZvY3VzLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICogU2VlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGljayBuZ0NsaWNrfVxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdCbHVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBibHVyIGV2ZW50LlxuICpcbiAqIEEgW2JsdXIgZXZlbnRdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0V2ZW50cy9ibHVyKSBmaXJlcyB3aGVuXG4gKiBhbiBlbGVtZW50IGhhcyBsb3N0IGZvY3VzLlxuICpcbiAqIE5vdGU6IEFzIHRoZSBgYmx1cmAgZXZlbnQgaXMgZXhlY3V0ZWQgc3luY2hyb25vdXNseSBhbHNvIGR1cmluZyBET00gbWFuaXB1bGF0aW9uc1xuICogKGUuZy4gcmVtb3ZpbmcgYSBmb2N1c3NlZCBpbnB1dCksXG4gKiBBbmd1bGFySlMgZXhlY3V0ZXMgdGhlIGV4cHJlc3Npb24gdXNpbmcgYHNjb3BlLiRldmFsQXN5bmNgIGlmIHRoZSBldmVudCBpcyBmaXJlZFxuICogZHVyaW5nIGFuIGAkYXBwbHlgIHRvIGVuc3VyZSBhIGNvbnNpc3RlbnQgc3RhdGUuXG4gKlxuICogQGVsZW1lbnQgd2luZG93LCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgYVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdCbHVyIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIGJsdXIuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gKiBTZWUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsaWNrIG5nQ2xpY2t9XG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0NvcHlcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGNvcHkgZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgd2luZG93LCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgYVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDb3B5IHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIGNvcHkuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxpbnB1dCBuZy1jb3B5PVwiY29waWVkPXRydWVcIiBuZy1pbml0PVwiY29waWVkPWZhbHNlOyB2YWx1ZT0nY29weSBtZSdcIiBuZy1tb2RlbD1cInZhbHVlXCI+XG4gICAgICBjb3BpZWQ6IHt7Y29waWVkfX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDdXRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGN1dCBldmVudC5cbiAqXG4gKiBAZWxlbWVudCB3aW5kb3csIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBhXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0N1dCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBjdXQuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxpbnB1dCBuZy1jdXQ9XCJjdXQ9dHJ1ZVwiIG5nLWluaXQ9XCJjdXQ9ZmFsc2U7IHZhbHVlPSdjdXQgbWUnXCIgbmctbW9kZWw9XCJ2YWx1ZVwiPlxuICAgICAgY3V0OiB7e2N1dH19XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nUGFzdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIHBhc3RlIGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IHdpbmRvdywgaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWEsIGFcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nUGFzdGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogcGFzdGUuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxpbnB1dCBuZy1wYXN0ZT1cInBhc3RlPXRydWVcIiBuZy1pbml0PVwicGFzdGU9ZmFsc2VcIiBwbGFjZWhvbGRlcj0ncGFzdGUgaGVyZSc+XG4gICAgICBwYXN0ZWQ6IHt7cGFzdGV9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0lmXG4gKiBAcmVzdHJpY3QgQVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0lmYCBkaXJlY3RpdmUgcmVtb3ZlcyBvciByZWNyZWF0ZXMgYSBwb3J0aW9uIG9mIHRoZSBET00gdHJlZSBiYXNlZCBvbiBhblxuICoge2V4cHJlc3Npb259LiBJZiB0aGUgZXhwcmVzc2lvbiBhc3NpZ25lZCB0byBgbmdJZmAgZXZhbHVhdGVzIHRvIGEgZmFsc2VcbiAqIHZhbHVlIHRoZW4gdGhlIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00sIG90aGVyd2lzZSBhIGNsb25lIG9mIHRoZVxuICogZWxlbWVudCBpcyByZWluc2VydGVkIGludG8gdGhlIERPTS5cbiAqXG4gKiBgbmdJZmAgZGlmZmVycyBmcm9tIGBuZ1Nob3dgIGFuZCBgbmdIaWRlYCBpbiB0aGF0IGBuZ0lmYCBjb21wbGV0ZWx5IHJlbW92ZXMgYW5kIHJlY3JlYXRlcyB0aGVcbiAqIGVsZW1lbnQgaW4gdGhlIERPTSByYXRoZXIgdGhhbiBjaGFuZ2luZyBpdHMgdmlzaWJpbGl0eSB2aWEgdGhlIGBkaXNwbGF5YCBjc3MgcHJvcGVydHkuICBBIGNvbW1vblxuICogY2FzZSB3aGVuIHRoaXMgZGlmZmVyZW5jZSBpcyBzaWduaWZpY2FudCBpcyB3aGVuIHVzaW5nIGNzcyBzZWxlY3RvcnMgdGhhdCByZWx5IG9uIGFuIGVsZW1lbnQnc1xuICogcG9zaXRpb24gd2l0aGluIHRoZSBET00sIHN1Y2ggYXMgdGhlIGA6Zmlyc3QtY2hpbGRgIG9yIGA6bGFzdC1jaGlsZGAgcHNldWRvLWNsYXNzZXMuXG4gKlxuICogTm90ZSB0aGF0IHdoZW4gYW4gZWxlbWVudCBpcyByZW1vdmVkIHVzaW5nIGBuZ0lmYCBpdHMgc2NvcGUgaXMgZGVzdHJveWVkIGFuZCBhIG5ldyBzY29wZVxuICogaXMgY3JlYXRlZCB3aGVuIHRoZSBlbGVtZW50IGlzIHJlc3RvcmVkLiAgVGhlIHNjb3BlIGNyZWF0ZWQgd2l0aGluIGBuZ0lmYCBpbmhlcml0cyBmcm9tXG4gKiBpdHMgcGFyZW50IHNjb3BlIHVzaW5nXG4gKiBbcHJvdG90eXBhbCBpbmhlcml0YW5jZV0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy93aWtpL1VuZGVyc3RhbmRpbmctU2NvcGVzI2phdmFzY3JpcHQtcHJvdG90eXBhbC1pbmhlcml0YW5jZSkuXG4gKiBBbiBpbXBvcnRhbnQgaW1wbGljYXRpb24gb2YgdGhpcyBpcyBpZiBgbmdNb2RlbGAgaXMgdXNlZCB3aXRoaW4gYG5nSWZgIHRvIGJpbmQgdG9cbiAqIGEgamF2YXNjcmlwdCBwcmltaXRpdmUgZGVmaW5lZCBpbiB0aGUgcGFyZW50IHNjb3BlLiBJbiB0aGlzIGNhc2UgYW55IG1vZGlmaWNhdGlvbnMgbWFkZSB0byB0aGVcbiAqIHZhcmlhYmxlIHdpdGhpbiB0aGUgY2hpbGQgc2NvcGUgd2lsbCBvdmVycmlkZSAoaGlkZSkgdGhlIHZhbHVlIGluIHRoZSBwYXJlbnQgc2NvcGUuXG4gKlxuICogQWxzbywgYG5nSWZgIHJlY3JlYXRlcyBlbGVtZW50cyB1c2luZyB0aGVpciBjb21waWxlZCBzdGF0ZS4gQW4gZXhhbXBsZSBvZiB0aGlzIGJlaGF2aW9yXG4gKiBpcyBpZiBhbiBlbGVtZW50J3MgY2xhc3MgYXR0cmlidXRlIGlzIGRpcmVjdGx5IG1vZGlmaWVkIGFmdGVyIGl0J3MgY29tcGlsZWQsIHVzaW5nIHNvbWV0aGluZyBsaWtlXG4gKiBqUXVlcnkncyBgLmFkZENsYXNzKClgIG1ldGhvZCwgYW5kIHRoZSBlbGVtZW50IGlzIGxhdGVyIHJlbW92ZWQuIFdoZW4gYG5nSWZgIHJlY3JlYXRlcyB0aGUgZWxlbWVudFxuICogdGhlIGFkZGVkIGNsYXNzIHdpbGwgYmUgbG9zdCBiZWNhdXNlIHRoZSBvcmlnaW5hbCBjb21waWxlZCBzdGF0ZSBpcyB1c2VkIHRvIHJlZ2VuZXJhdGUgdGhlIGVsZW1lbnQuXG4gKlxuICogQWRkaXRpb25hbGx5LCB5b3UgY2FuIHByb3ZpZGUgYW5pbWF0aW9ucyB2aWEgdGhlIGBuZ0FuaW1hdGVgIG1vZHVsZSB0byBhbmltYXRlIHRoZSBgZW50ZXJgXG4gKiBhbmQgYGxlYXZlYCBlZmZlY3RzLlxuICpcbiAqIEBhbmltYXRpb25zXG4gKiBlbnRlciAtIGhhcHBlbnMganVzdCBhZnRlciB0aGUgYG5nSWZgIGNvbnRlbnRzIGNoYW5nZSBhbmQgYSBuZXcgRE9NIGVsZW1lbnQgaXMgY3JlYXRlZCBhbmQgaW5qZWN0ZWQgaW50byB0aGUgYG5nSWZgIGNvbnRhaW5lclxuICogbGVhdmUgLSBoYXBwZW5zIGp1c3QgYmVmb3JlIHRoZSBgbmdJZmAgY29udGVudHMgYXJlIHJlbW92ZWQgZnJvbSB0aGUgRE9NXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAc2NvcGVcbiAqIEBwcmlvcml0eSA2MDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdJZiBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgZmFsc3kgdGhlblxuICogICAgIHRoZSBlbGVtZW50IGlzIHJlbW92ZWQgZnJvbSB0aGUgRE9NIHRyZWUuIElmIGl0IGlzIHRydXRoeSBhIGNvcHkgb2YgdGhlIGNvbXBpbGVkXG4gKiAgICAgZWxlbWVudCBpcyBhZGRlZCB0byB0aGUgRE9NIHRyZWUuXG4gKlxuICogQGV4YW1wbGVcbiAgPGV4YW1wbGUgbW9kdWxlPVwibmdBbmltYXRlXCIgZGVwcz1cImFuZ3VsYXItYW5pbWF0ZS5qc1wiIGFuaW1hdGlvbnM9XCJ0cnVlXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIENsaWNrIG1lOiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjaGVja2VkXCIgbmctaW5pdD1cImNoZWNrZWQ9dHJ1ZVwiIC8+PGJyLz5cbiAgICAgIFNob3cgd2hlbiBjaGVja2VkOlxuICAgICAgPHNwYW4gbmctaWY9XCJjaGVja2VkXCIgY2xhc3M9XCJhbmltYXRlLWlmXCI+XG4gICAgICAgIFRoaXMgaXMgcmVtb3ZlZCB3aGVuIHRoZSBjaGVja2JveCBpcyB1bmNoZWNrZWQuXG4gICAgICA8L3NwYW4+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJhbmltYXRpb25zLmNzc1wiPlxuICAgICAgLmFuaW1hdGUtaWYge1xuICAgICAgICBiYWNrZ3JvdW5kOndoaXRlO1xuICAgICAgICBib3JkZXI6MXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICBwYWRkaW5nOjEwcHg7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLWlmLm5nLWVudGVyLCAuYW5pbWF0ZS1pZi5uZy1sZWF2ZSB7XG4gICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjphbGwgY3ViaWMtYmV6aWVyKDAuMjUwLCAwLjQ2MCwgMC40NTAsIDAuOTQwKSAwLjVzO1xuICAgICAgICB0cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDApIDAuNXM7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLWlmLm5nLWVudGVyLFxuICAgICAgLmFuaW1hdGUtaWYubmctbGVhdmUubmctbGVhdmUtYWN0aXZlIHtcbiAgICAgICAgb3BhY2l0eTowO1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1pZi5uZy1sZWF2ZSxcbiAgICAgIC5hbmltYXRlLWlmLm5nLWVudGVyLm5nLWVudGVyLWFjdGl2ZSB7XG4gICAgICAgIG9wYWNpdHk6MTtcbiAgICAgIH1cbiAgICA8L2ZpbGU+XG4gIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nSWZEaXJlY3RpdmUgPSBbJyRhbmltYXRlJywgZnVuY3Rpb24oJGFuaW1hdGUpIHtcbiAgcmV0dXJuIHtcbiAgICBtdWx0aUVsZW1lbnQ6IHRydWUsXG4gICAgdHJhbnNjbHVkZTogJ2VsZW1lbnQnLFxuICAgIHByaW9yaXR5OiA2MDAsXG4gICAgdGVybWluYWw6IHRydWUsXG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAkJHRsYjogdHJ1ZSxcbiAgICBsaW5rOiBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50LCAkYXR0ciwgY3RybCwgJHRyYW5zY2x1ZGUpIHtcbiAgICAgICAgdmFyIGJsb2NrLCBjaGlsZFNjb3BlLCBwcmV2aW91c0VsZW1lbnRzO1xuICAgICAgICAkc2NvcGUuJHdhdGNoKCRhdHRyLm5nSWYsIGZ1bmN0aW9uIG5nSWZXYXRjaEFjdGlvbih2YWx1ZSkge1xuXG4gICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoIWNoaWxkU2NvcGUpIHtcbiAgICAgICAgICAgICAgJHRyYW5zY2x1ZGUoZnVuY3Rpb24oY2xvbmUsIG5ld1Njb3BlKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRTY29wZSA9IG5ld1Njb3BlO1xuICAgICAgICAgICAgICAgIGNsb25lW2Nsb25lLmxlbmd0aCsrXSA9IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJyBlbmQgbmdJZjogJyArICRhdHRyLm5nSWYgKyAnICcpO1xuICAgICAgICAgICAgICAgIC8vIE5vdGU6IFdlIG9ubHkgbmVlZCB0aGUgZmlyc3QvbGFzdCBub2RlIG9mIHRoZSBjbG9uZWQgbm9kZXMuXG4gICAgICAgICAgICAgICAgLy8gSG93ZXZlciwgd2UgbmVlZCB0byBrZWVwIHRoZSByZWZlcmVuY2UgdG8gdGhlIGpxbGl0ZSB3cmFwcGVyIGFzIGl0IG1pZ2h0IGJlIGNoYW5nZWQgbGF0ZXJcbiAgICAgICAgICAgICAgICAvLyBieSBhIGRpcmVjdGl2ZSB3aXRoIHRlbXBsYXRlVXJsIHdoZW4gaXRzIHRlbXBsYXRlIGFycml2ZXMuXG4gICAgICAgICAgICAgICAgYmxvY2sgPSB7XG4gICAgICAgICAgICAgICAgICBjbG9uZTogY2xvbmVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICRhbmltYXRlLmVudGVyKGNsb25lLCAkZWxlbWVudC5wYXJlbnQoKSwgJGVsZW1lbnQpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHByZXZpb3VzRWxlbWVudHMpIHtcbiAgICAgICAgICAgICAgcHJldmlvdXNFbGVtZW50cy5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgcHJldmlvdXNFbGVtZW50cyA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2hpbGRTY29wZSkge1xuICAgICAgICAgICAgICBjaGlsZFNjb3BlLiRkZXN0cm95KCk7XG4gICAgICAgICAgICAgIGNoaWxkU2NvcGUgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJsb2NrKSB7XG4gICAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudHMgPSBnZXRCbG9ja05vZGVzKGJsb2NrLmNsb25lKTtcbiAgICAgICAgICAgICAgJGFuaW1hdGUubGVhdmUocHJldmlvdXNFbGVtZW50cykudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwcmV2aW91c0VsZW1lbnRzID0gbnVsbDtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGJsb2NrID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1dO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nSW5jbHVkZVxuICogQHJlc3RyaWN0IEVDQVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRmV0Y2hlcywgY29tcGlsZXMgYW5kIGluY2x1ZGVzIGFuIGV4dGVybmFsIEhUTUwgZnJhZ21lbnQuXG4gKlxuICogQnkgZGVmYXVsdCwgdGhlIHRlbXBsYXRlIFVSTCBpcyByZXN0cmljdGVkIHRvIHRoZSBzYW1lIGRvbWFpbiBhbmQgcHJvdG9jb2wgYXMgdGhlXG4gKiBhcHBsaWNhdGlvbiBkb2N1bWVudC4gVGhpcyBpcyBkb25lIGJ5IGNhbGxpbmcge0BsaW5rICRzY2UjZ2V0VHJ1c3RlZFJlc291cmNlVXJsXG4gKiAkc2NlLmdldFRydXN0ZWRSZXNvdXJjZVVybH0gb24gaXQuIFRvIGxvYWQgdGVtcGxhdGVzIGZyb20gb3RoZXIgZG9tYWlucyBvciBwcm90b2NvbHNcbiAqIHlvdSBtYXkgZWl0aGVyIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybFdoaXRlbGlzdCB3aGl0ZWxpc3QgdGhlbX0gb3JcbiAqIHtAbGluayAkc2NlI3RydXN0QXNSZXNvdXJjZVVybCB3cmFwIHRoZW19IGFzIHRydXN0ZWQgdmFsdWVzLiBSZWZlciB0byBBbmd1bGFyJ3Mge0BsaW5rXG4gKiBuZy4kc2NlIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nfS5cbiAqXG4gKiBJbiBhZGRpdGlvbiwgdGhlIGJyb3dzZXInc1xuICogW1NhbWUgT3JpZ2luIFBvbGljeV0oaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9icm93c2Vyc2VjL3dpa2kvUGFydDIjU2FtZS1vcmlnaW5fcG9saWN5X2Zvcl9YTUxIdHRwUmVxdWVzdClcbiAqIGFuZCBbQ3Jvc3MtT3JpZ2luIFJlc291cmNlIFNoYXJpbmcgKENPUlMpXShodHRwOi8vd3d3LnczLm9yZy9UUi9jb3JzLylcbiAqIHBvbGljeSBtYXkgZnVydGhlciByZXN0cmljdCB3aGV0aGVyIHRoZSB0ZW1wbGF0ZSBpcyBzdWNjZXNzZnVsbHkgbG9hZGVkLlxuICogRm9yIGV4YW1wbGUsIGBuZ0luY2x1ZGVgIHdvbid0IHdvcmsgZm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cyBvbiBhbGwgYnJvd3NlcnMgYW5kIGZvciBgZmlsZTovL2BcbiAqIGFjY2VzcyBvbiBzb21lIGJyb3dzZXJzLlxuICpcbiAqIEBhbmltYXRpb25zXG4gKiBlbnRlciAtIGFuaW1hdGlvbiBpcyB1c2VkIHRvIGJyaW5nIG5ldyBjb250ZW50IGludG8gdGhlIGJyb3dzZXIuXG4gKiBsZWF2ZSAtIGFuaW1hdGlvbiBpcyB1c2VkIHRvIGFuaW1hdGUgZXhpc3RpbmcgY29udGVudCBhd2F5LlxuICpcbiAqIFRoZSBlbnRlciBhbmQgbGVhdmUgYW5pbWF0aW9uIG9jY3VyIGNvbmN1cnJlbnRseS5cbiAqXG4gKiBAc2NvcGVcbiAqIEBwcmlvcml0eSA0MDBcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmdJbmNsdWRlfHNyYyBhbmd1bGFyIGV4cHJlc3Npb24gZXZhbHVhdGluZyB0byBVUkwuIElmIHRoZSBzb3VyY2UgaXMgYSBzdHJpbmcgY29uc3RhbnQsXG4gKiAgICAgICAgICAgICAgICAgbWFrZSBzdXJlIHlvdSB3cmFwIGl0IGluICoqc2luZ2xlKiogcXVvdGVzLCBlLmcuIGBzcmM9XCInbXlQYXJ0aWFsVGVtcGxhdGUuaHRtbCdcImAuXG4gKiBAcGFyYW0ge3N0cmluZz19IG9ubG9hZCBFeHByZXNzaW9uIHRvIGV2YWx1YXRlIHdoZW4gYSBuZXcgcGFydGlhbCBpcyBsb2FkZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmc9fSBhdXRvc2Nyb2xsIFdoZXRoZXIgYG5nSW5jbHVkZWAgc2hvdWxkIGNhbGwge0BsaW5rIG5nLiRhbmNob3JTY3JvbGxcbiAqICAgICAgICAgICAgICAgICAgJGFuY2hvclNjcm9sbH0gdG8gc2Nyb2xsIHRoZSB2aWV3cG9ydCBhZnRlciB0aGUgY29udGVudCBpcyBsb2FkZWQuXG4gKlxuICogICAgICAgICAgICAgICAgICAtIElmIHRoZSBhdHRyaWJ1dGUgaXMgbm90IHNldCwgZGlzYWJsZSBzY3JvbGxpbmcuXG4gKiAgICAgICAgICAgICAgICAgIC0gSWYgdGhlIGF0dHJpYnV0ZSBpcyBzZXQgd2l0aG91dCB2YWx1ZSwgZW5hYmxlIHNjcm9sbGluZy5cbiAqICAgICAgICAgICAgICAgICAgLSBPdGhlcndpc2UgZW5hYmxlIHNjcm9sbGluZyBvbmx5IGlmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnV0aHkgdmFsdWUuXG4gKlxuICogQGV4YW1wbGVcbiAgPGV4YW1wbGUgbW9kdWxlPVwiaW5jbHVkZUV4YW1wbGVcIiBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCIgYW5pbWF0aW9ucz1cInRydWVcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJ0ZW1wbGF0ZVwiIG5nLW9wdGlvbnM9XCJ0Lm5hbWUgZm9yIHQgaW4gdGVtcGxhdGVzXCI+XG4gICAgICAgIDxvcHRpb24gdmFsdWU9XCJcIj4oYmxhbmspPC9vcHRpb24+XG4gICAgICAgPC9zZWxlY3Q+XG4gICAgICAgdXJsIG9mIHRoZSB0ZW1wbGF0ZTogPGNvZGU+e3t0ZW1wbGF0ZS51cmx9fTwvY29kZT5cbiAgICAgICA8aHIvPlxuICAgICAgIDxkaXYgY2xhc3M9XCJzbGlkZS1hbmltYXRlLWNvbnRhaW5lclwiPlxuICAgICAgICAgPGRpdiBjbGFzcz1cInNsaWRlLWFuaW1hdGVcIiBuZy1pbmNsdWRlPVwidGVtcGxhdGUudXJsXCI+PC9kaXY+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZGl2PlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICBhbmd1bGFyLm1vZHVsZSgnaW5jbHVkZUV4YW1wbGUnLCBbJ25nQW5pbWF0ZSddKVxuICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICRzY29wZS50ZW1wbGF0ZXMgPVxuICAgICAgICAgICAgWyB7IG5hbWU6ICd0ZW1wbGF0ZTEuaHRtbCcsIHVybDogJ3RlbXBsYXRlMS5odG1sJ30sXG4gICAgICAgICAgICAgIHsgbmFtZTogJ3RlbXBsYXRlMi5odG1sJywgdXJsOiAndGVtcGxhdGUyLmh0bWwnfSBdO1xuICAgICAgICAgICRzY29wZS50ZW1wbGF0ZSA9ICRzY29wZS50ZW1wbGF0ZXNbMF07XG4gICAgICAgIH1dKTtcbiAgICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJ0ZW1wbGF0ZTEuaHRtbFwiPlxuICAgICAgQ29udGVudCBvZiB0ZW1wbGF0ZTEuaHRtbFxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwidGVtcGxhdGUyLmh0bWxcIj5cbiAgICAgIENvbnRlbnQgb2YgdGVtcGxhdGUyLmh0bWxcbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cImFuaW1hdGlvbnMuY3NzXCI+XG4gICAgICAuc2xpZGUtYW5pbWF0ZS1jb250YWluZXIge1xuICAgICAgICBwb3NpdGlvbjpyZWxhdGl2ZTtcbiAgICAgICAgYmFja2dyb3VuZDp3aGl0ZTtcbiAgICAgICAgYm9yZGVyOjFweCBzb2xpZCBibGFjaztcbiAgICAgICAgaGVpZ2h0OjQwcHg7XG4gICAgICAgIG92ZXJmbG93OmhpZGRlbjtcbiAgICAgIH1cblxuICAgICAgLnNsaWRlLWFuaW1hdGUge1xuICAgICAgICBwYWRkaW5nOjEwcHg7XG4gICAgICB9XG5cbiAgICAgIC5zbGlkZS1hbmltYXRlLm5nLWVudGVyLCAuc2xpZGUtYW5pbWF0ZS5uZy1sZWF2ZSB7XG4gICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjphbGwgY3ViaWMtYmV6aWVyKDAuMjUwLCAwLjQ2MCwgMC40NTAsIDAuOTQwKSAwLjVzO1xuICAgICAgICB0cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDApIDAuNXM7XG5cbiAgICAgICAgcG9zaXRpb246YWJzb2x1dGU7XG4gICAgICAgIHRvcDowO1xuICAgICAgICBsZWZ0OjA7XG4gICAgICAgIHJpZ2h0OjA7XG4gICAgICAgIGJvdHRvbTowO1xuICAgICAgICBkaXNwbGF5OmJsb2NrO1xuICAgICAgICBwYWRkaW5nOjEwcHg7XG4gICAgICB9XG5cbiAgICAgIC5zbGlkZS1hbmltYXRlLm5nLWVudGVyIHtcbiAgICAgICAgdG9wOi01MHB4O1xuICAgICAgfVxuICAgICAgLnNsaWRlLWFuaW1hdGUubmctZW50ZXIubmctZW50ZXItYWN0aXZlIHtcbiAgICAgICAgdG9wOjA7XG4gICAgICB9XG5cbiAgICAgIC5zbGlkZS1hbmltYXRlLm5nLWxlYXZlIHtcbiAgICAgICAgdG9wOjA7XG4gICAgICB9XG4gICAgICAuc2xpZGUtYW5pbWF0ZS5uZy1sZWF2ZS5uZy1sZWF2ZS1hY3RpdmUge1xuICAgICAgICB0b3A6NTBweDtcbiAgICAgIH1cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgdmFyIHRlbXBsYXRlU2VsZWN0ID0gZWxlbWVudChieS5tb2RlbCgndGVtcGxhdGUnKSk7XG4gICAgICB2YXIgaW5jbHVkZUVsZW0gPSBlbGVtZW50KGJ5LmNzcygnW25nLWluY2x1ZGVdJykpO1xuXG4gICAgICBpdCgnc2hvdWxkIGxvYWQgdGVtcGxhdGUxLmh0bWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgZXhwZWN0KGluY2x1ZGVFbGVtLmdldFRleHQoKSkudG9NYXRjaCgvQ29udGVudCBvZiB0ZW1wbGF0ZTEuaHRtbC8pO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgbG9hZCB0ZW1wbGF0ZTIuaHRtbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoYnJvd3Nlci5wYXJhbXMuYnJvd3NlciA9PSAnZmlyZWZveCcpIHtcbiAgICAgICAgICAvLyBGaXJlZm94IGNhbid0IGhhbmRsZSB1c2luZyBzZWxlY3RzXG4gICAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzQ4MFxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0ZW1wbGF0ZVNlbGVjdC5jbGljaygpO1xuICAgICAgICB0ZW1wbGF0ZVNlbGVjdC5hbGwoYnkuY3NzKCdvcHRpb24nKSkuZ2V0KDIpLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChpbmNsdWRlRWxlbS5nZXRUZXh0KCkpLnRvTWF0Y2goL0NvbnRlbnQgb2YgdGVtcGxhdGUyLmh0bWwvKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGNoYW5nZSB0byBibGFuaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoYnJvd3Nlci5wYXJhbXMuYnJvd3NlciA9PSAnZmlyZWZveCcpIHtcbiAgICAgICAgICAvLyBGaXJlZm94IGNhbid0IGhhbmRsZSB1c2luZyBzZWxlY3RzXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRlbXBsYXRlU2VsZWN0LmNsaWNrKCk7XG4gICAgICAgIHRlbXBsYXRlU2VsZWN0LmFsbChieS5jc3MoJ29wdGlvbicpKS5nZXQoMCkuY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KGluY2x1ZGVFbGVtLmlzUHJlc2VudCgpKS50b0JlKGZhbHNlKTtcbiAgICAgIH0pO1xuICAgIDwvZmlsZT5cbiAgPC9leGFtcGxlPlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZXZlbnRcbiAqIEBuYW1lIG5nSW5jbHVkZSMkaW5jbHVkZUNvbnRlbnRSZXF1ZXN0ZWRcbiAqIEBldmVudFR5cGUgZW1pdCBvbiB0aGUgc2NvcGUgbmdJbmNsdWRlIHdhcyBkZWNsYXJlZCBpblxuICogQGRlc2NyaXB0aW9uXG4gKiBFbWl0dGVkIGV2ZXJ5IHRpbWUgdGhlIG5nSW5jbHVkZSBjb250ZW50IGlzIHJlcXVlc3RlZC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYW5ndWxhckV2ZW50IFN5bnRoZXRpYyBldmVudCBvYmplY3QuXG4gKiBAcGFyYW0ge1N0cmluZ30gc3JjIFVSTCBvZiBjb250ZW50IHRvIGxvYWQuXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBldmVudFxuICogQG5hbWUgbmdJbmNsdWRlIyRpbmNsdWRlQ29udGVudExvYWRlZFxuICogQGV2ZW50VHlwZSBlbWl0IG9uIHRoZSBjdXJyZW50IG5nSW5jbHVkZSBzY29wZVxuICogQGRlc2NyaXB0aW9uXG4gKiBFbWl0dGVkIGV2ZXJ5IHRpbWUgdGhlIG5nSW5jbHVkZSBjb250ZW50IGlzIHJlbG9hZGVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhbmd1bGFyRXZlbnQgU3ludGhldGljIGV2ZW50IG9iamVjdC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBzcmMgVVJMIG9mIGNvbnRlbnQgdG8gbG9hZC5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGV2ZW50XG4gKiBAbmFtZSBuZ0luY2x1ZGUjJGluY2x1ZGVDb250ZW50RXJyb3JcbiAqIEBldmVudFR5cGUgZW1pdCBvbiB0aGUgc2NvcGUgbmdJbmNsdWRlIHdhcyBkZWNsYXJlZCBpblxuICogQGRlc2NyaXB0aW9uXG4gKiBFbWl0dGVkIHdoZW4gYSB0ZW1wbGF0ZSBIVFRQIHJlcXVlc3QgeWllbGRzIGFuIGVycm9uZW91cyByZXNwb25zZSAoc3RhdHVzIDwgMjAwIHx8IHN0YXR1cyA+IDI5OSlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYW5ndWxhckV2ZW50IFN5bnRoZXRpYyBldmVudCBvYmplY3QuXG4gKiBAcGFyYW0ge1N0cmluZ30gc3JjIFVSTCBvZiBjb250ZW50IHRvIGxvYWQuXG4gKi9cbnZhciBuZ0luY2x1ZGVEaXJlY3RpdmUgPSBbJyR0ZW1wbGF0ZVJlcXVlc3QnLCAnJGFuY2hvclNjcm9sbCcsICckYW5pbWF0ZScsICckc2NlJyxcbiAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCR0ZW1wbGF0ZVJlcXVlc3QsICAgJGFuY2hvclNjcm9sbCwgICAkYW5pbWF0ZSwgICAkc2NlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFQ0EnLFxuICAgIHByaW9yaXR5OiA0MDAsXG4gICAgdGVybWluYWw6IHRydWUsXG4gICAgdHJhbnNjbHVkZTogJ2VsZW1lbnQnLFxuICAgIGNvbnRyb2xsZXI6IGFuZ3VsYXIubm9vcCxcbiAgICBjb21waWxlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRyKSB7XG4gICAgICB2YXIgc3JjRXhwID0gYXR0ci5uZ0luY2x1ZGUgfHwgYXR0ci5zcmMsXG4gICAgICAgICAgb25sb2FkRXhwID0gYXR0ci5vbmxvYWQgfHwgJycsXG4gICAgICAgICAgYXV0b1Njcm9sbEV4cCA9IGF0dHIuYXV0b3Njcm9sbDtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCAkZWxlbWVudCwgJGF0dHIsIGN0cmwsICR0cmFuc2NsdWRlKSB7XG4gICAgICAgIHZhciBjaGFuZ2VDb3VudGVyID0gMCxcbiAgICAgICAgICAgIGN1cnJlbnRTY29wZSxcbiAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudCxcbiAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50O1xuXG4gICAgICAgIHZhciBjbGVhbnVwTGFzdEluY2x1ZGVDb250ZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKHByZXZpb3VzRWxlbWVudCkge1xuICAgICAgICAgICAgcHJldmlvdXNFbGVtZW50LnJlbW92ZSgpO1xuICAgICAgICAgICAgcHJldmlvdXNFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGN1cnJlbnRTY29wZSkge1xuICAgICAgICAgICAgY3VycmVudFNjb3BlLiRkZXN0cm95KCk7XG4gICAgICAgICAgICBjdXJyZW50U2NvcGUgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY3VycmVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgICRhbmltYXRlLmxlYXZlKGN1cnJlbnRFbGVtZW50KS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBwcmV2aW91c0VsZW1lbnQgPSBudWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwcmV2aW91c0VsZW1lbnQgPSBjdXJyZW50RWxlbWVudDtcbiAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgc2NvcGUuJHdhdGNoKCRzY2UucGFyc2VBc1Jlc291cmNlVXJsKHNyY0V4cCksIGZ1bmN0aW9uIG5nSW5jbHVkZVdhdGNoQWN0aW9uKHNyYykge1xuICAgICAgICAgIHZhciBhZnRlckFuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKGlzRGVmaW5lZChhdXRvU2Nyb2xsRXhwKSAmJiAoIWF1dG9TY3JvbGxFeHAgfHwgc2NvcGUuJGV2YWwoYXV0b1Njcm9sbEV4cCkpKSB7XG4gICAgICAgICAgICAgICRhbmNob3JTY3JvbGwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIHZhciB0aGlzQ2hhbmdlSWQgPSArK2NoYW5nZUNvdW50ZXI7XG5cbiAgICAgICAgICBpZiAoc3JjKSB7XG4gICAgICAgICAgICAvL3NldCB0aGUgMm5kIHBhcmFtIHRvIHRydWUgdG8gaWdub3JlIHRoZSB0ZW1wbGF0ZSByZXF1ZXN0IGVycm9yIHNvIHRoYXQgdGhlIGlubmVyXG4gICAgICAgICAgICAvL2NvbnRlbnRzIGFuZCBzY29wZSBjYW4gYmUgY2xlYW5lZCB1cC5cbiAgICAgICAgICAgICR0ZW1wbGF0ZVJlcXVlc3Qoc3JjLCB0cnVlKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgIGlmICh0aGlzQ2hhbmdlSWQgIT09IGNoYW5nZUNvdW50ZXIpIHJldHVybjtcbiAgICAgICAgICAgICAgdmFyIG5ld1Njb3BlID0gc2NvcGUuJG5ldygpO1xuICAgICAgICAgICAgICBjdHJsLnRlbXBsYXRlID0gcmVzcG9uc2U7XG5cbiAgICAgICAgICAgICAgLy8gTm90ZTogVGhpcyB3aWxsIGFsc28gbGluayBhbGwgY2hpbGRyZW4gb2YgbmctaW5jbHVkZSB0aGF0IHdlcmUgY29udGFpbmVkIGluIHRoZSBvcmlnaW5hbFxuICAgICAgICAgICAgICAvLyBodG1sLiBJZiB0aGF0IGNvbnRlbnQgY29udGFpbnMgY29udHJvbGxlcnMsIC4uLiB0aGV5IGNvdWxkIHBvbGx1dGUvY2hhbmdlIHRoZSBzY29wZS5cbiAgICAgICAgICAgICAgLy8gSG93ZXZlciwgdXNpbmcgbmctaW5jbHVkZSBvbiBhbiBlbGVtZW50IHdpdGggYWRkaXRpb25hbCBjb250ZW50IGRvZXMgbm90IG1ha2Ugc2Vuc2UuLi5cbiAgICAgICAgICAgICAgLy8gTm90ZTogV2UgY2FuJ3QgcmVtb3ZlIHRoZW0gaW4gdGhlIGNsb25lQXR0Y2hGbiBvZiAkdHJhbnNjbHVkZSBhcyB0aGF0XG4gICAgICAgICAgICAgIC8vIGZ1bmN0aW9uIGlzIGNhbGxlZCBiZWZvcmUgbGlua2luZyB0aGUgY29udGVudCwgd2hpY2ggd291bGQgYXBwbHkgY2hpbGRcbiAgICAgICAgICAgICAgLy8gZGlyZWN0aXZlcyB0byBub24gZXhpc3RpbmcgZWxlbWVudHMuXG4gICAgICAgICAgICAgIHZhciBjbG9uZSA9ICR0cmFuc2NsdWRlKG5ld1Njb3BlLCBmdW5jdGlvbihjbG9uZSkge1xuICAgICAgICAgICAgICAgIGNsZWFudXBMYXN0SW5jbHVkZUNvbnRlbnQoKTtcbiAgICAgICAgICAgICAgICAkYW5pbWF0ZS5lbnRlcihjbG9uZSwgbnVsbCwgJGVsZW1lbnQpLnRoZW4oYWZ0ZXJBbmltYXRpb24pO1xuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICBjdXJyZW50U2NvcGUgPSBuZXdTY29wZTtcbiAgICAgICAgICAgICAgY3VycmVudEVsZW1lbnQgPSBjbG9uZTtcblxuICAgICAgICAgICAgICBjdXJyZW50U2NvcGUuJGVtaXQoJyRpbmNsdWRlQ29udGVudExvYWRlZCcsIHNyYyk7XG4gICAgICAgICAgICAgIHNjb3BlLiRldmFsKG9ubG9hZEV4cCk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgaWYgKHRoaXNDaGFuZ2VJZCA9PT0gY2hhbmdlQ291bnRlcikge1xuICAgICAgICAgICAgICAgIGNsZWFudXBMYXN0SW5jbHVkZUNvbnRlbnQoKTtcbiAgICAgICAgICAgICAgICBzY29wZS4kZW1pdCgnJGluY2x1ZGVDb250ZW50RXJyb3InLCBzcmMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNjb3BlLiRlbWl0KCckaW5jbHVkZUNvbnRlbnRSZXF1ZXN0ZWQnLCBzcmMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjbGVhbnVwTGFzdEluY2x1ZGVDb250ZW50KCk7XG4gICAgICAgICAgICBjdHJsLnRlbXBsYXRlID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XTtcblxuLy8gVGhpcyBkaXJlY3RpdmUgaXMgY2FsbGVkIGR1cmluZyB0aGUgJHRyYW5zY2x1ZGUgY2FsbCBvZiB0aGUgZmlyc3QgYG5nSW5jbHVkZWAgZGlyZWN0aXZlLlxuLy8gSXQgd2lsbCByZXBsYWNlIGFuZCBjb21waWxlIHRoZSBjb250ZW50IG9mIHRoZSBlbGVtZW50IHdpdGggdGhlIGxvYWRlZCB0ZW1wbGF0ZS5cbi8vIFdlIG5lZWQgdGhpcyBkaXJlY3RpdmUgc28gdGhhdCB0aGUgZWxlbWVudCBjb250ZW50IGlzIGFscmVhZHkgZmlsbGVkIHdoZW5cbi8vIHRoZSBsaW5rIGZ1bmN0aW9uIG9mIGFub3RoZXIgZGlyZWN0aXZlIG9uIHRoZSBzYW1lIGVsZW1lbnQgYXMgbmdJbmNsdWRlXG4vLyBpcyBjYWxsZWQuXG52YXIgbmdJbmNsdWRlRmlsbENvbnRlbnREaXJlY3RpdmUgPSBbJyRjb21waWxlJyxcbiAgZnVuY3Rpb24oJGNvbXBpbGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzdHJpY3Q6ICdFQ0EnLFxuICAgICAgcHJpb3JpdHk6IC00MDAsXG4gICAgICByZXF1aXJlOiAnbmdJbmNsdWRlJyxcbiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCAkZWxlbWVudCwgJGF0dHIsIGN0cmwpIHtcbiAgICAgICAgaWYgKC9TVkcvLnRlc3QoJGVsZW1lbnRbMF0udG9TdHJpbmcoKSkpIHtcbiAgICAgICAgICAvLyBXZWJLaXQ6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzU2OTggLS0tIFNWRyBlbGVtZW50cyBkbyBub3RcbiAgICAgICAgICAvLyBzdXBwb3J0IGlubmVySFRNTCwgc28gZGV0ZWN0IHRoaXMgaGVyZSBhbmQgdHJ5IHRvIGdlbmVyYXRlIHRoZSBjb250ZW50c1xuICAgICAgICAgIC8vIHNwZWNpYWxseS5cbiAgICAgICAgICAkZWxlbWVudC5lbXB0eSgpO1xuICAgICAgICAgICRjb21waWxlKGpxTGl0ZUJ1aWxkRnJhZ21lbnQoY3RybC50ZW1wbGF0ZSwgZG9jdW1lbnQpLmNoaWxkTm9kZXMpKHNjb3BlLFxuICAgICAgICAgICAgICBmdW5jdGlvbiBuYW1lc3BhY2VBZGFwdGVkQ2xvbmUoY2xvbmUpIHtcbiAgICAgICAgICAgICRlbGVtZW50LmFwcGVuZChjbG9uZSk7XG4gICAgICAgICAgfSwge2Z1dHVyZVBhcmVudEVsZW1lbnQ6ICRlbGVtZW50fSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgJGVsZW1lbnQuaHRtbChjdHJsLnRlbXBsYXRlKTtcbiAgICAgICAgJGNvbXBpbGUoJGVsZW1lbnQuY29udGVudHMoKSkoc2NvcGUpO1xuICAgICAgfVxuICAgIH07XG4gIH1dO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nSW5pdFxuICogQHJlc3RyaWN0IEFDXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nSW5pdGAgZGlyZWN0aXZlIGFsbG93cyB5b3UgdG8gZXZhbHVhdGUgYW4gZXhwcmVzc2lvbiBpbiB0aGVcbiAqIGN1cnJlbnQgc2NvcGUuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWVycm9yXCI+XG4gKiBUaGUgb25seSBhcHByb3ByaWF0ZSB1c2Ugb2YgYG5nSW5pdGAgaXMgZm9yIGFsaWFzaW5nIHNwZWNpYWwgcHJvcGVydGllcyBvZlxuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBgbmdSZXBlYXRgfSwgYXMgc2VlbiBpbiB0aGUgZGVtbyBiZWxvdy4gQmVzaWRlcyB0aGlzIGNhc2UsIHlvdVxuICogc2hvdWxkIHVzZSB7QGxpbmsgZ3VpZGUvY29udHJvbGxlciBjb250cm9sbGVyc30gcmF0aGVyIHRoYW4gYG5nSW5pdGBcbiAqIHRvIGluaXRpYWxpemUgdmFsdWVzIG9uIGEgc2NvcGUuXG4gKiA8L2Rpdj5cbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGUqKjogSWYgeW91IGhhdmUgYXNzaWdubWVudCBpbiBgbmdJbml0YCBhbG9uZyB3aXRoIHtAbGluayBuZy4kZmlsdGVyIGAkZmlsdGVyYH0sIG1ha2VcbiAqIHN1cmUgeW91IGhhdmUgcGFyZW50aGVzaXMgZm9yIGNvcnJlY3QgcHJlY2VkZW5jZTpcbiAqIDxwcmUgY2xhc3M9XCJwcmV0dHlwcmludFwiPlxuICogYDxkaXYgbmctaW5pdD1cInRlc3QxID0gKGRhdGEgfCBvcmRlckJ5OiduYW1lJylcIj48L2Rpdj5gXG4gKiA8L3ByZT5cbiAqIDwvZGl2PlxuICpcbiAqIEBwcmlvcml0eSA0NTBcbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdJbml0IHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG1vZHVsZT1cImluaXRFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICA8c2NyaXB0PlxuICAgICBhbmd1bGFyLm1vZHVsZSgnaW5pdEV4YW1wbGUnLCBbXSlcbiAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgJHNjb3BlLmxpc3QgPSBbWydhJywgJ2InXSwgWydjJywgJ2QnXV07XG4gICAgICAgfV0pO1xuICAgPC9zY3JpcHQ+XG4gICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICA8ZGl2IG5nLXJlcGVhdD1cImlubmVyTGlzdCBpbiBsaXN0XCIgbmctaW5pdD1cIm91dGVySW5kZXggPSAkaW5kZXhcIj5cbiAgICAgICA8ZGl2IG5nLXJlcGVhdD1cInZhbHVlIGluIGlubmVyTGlzdFwiIG5nLWluaXQ9XCJpbm5lckluZGV4ID0gJGluZGV4XCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJleGFtcGxlLWluaXRcIj5saXN0WyB7e291dGVySW5kZXh9fSBdWyB7e2lubmVySW5kZXh9fSBdID0ge3t2YWx1ZX19Ozwvc3Bhbj5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9kaXY+XG4gICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBhbGlhcyBpbmRleCBwb3NpdGlvbnMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIHZhciBlbGVtZW50cyA9IGVsZW1lbnQuYWxsKGJ5LmNzcygnLmV4YW1wbGUtaW5pdCcpKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50cy5nZXQoMCkuZ2V0VGV4dCgpKS50b0JlKCdsaXN0WyAwIF1bIDAgXSA9IGE7Jyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudHMuZ2V0KDEpLmdldFRleHQoKSkudG9CZSgnbGlzdFsgMCBdWyAxIF0gPSBiOycpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnRzLmdldCgyKS5nZXRUZXh0KCkpLnRvQmUoJ2xpc3RbIDEgXVsgMCBdID0gYzsnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50cy5nZXQoMykuZ2V0VGV4dCgpKS50b0JlKCdsaXN0WyAxIF1bIDEgXSA9IGQ7Jyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nSW5pdERpcmVjdGl2ZSA9IG5nRGlyZWN0aXZlKHtcbiAgcHJpb3JpdHk6IDQ1MCxcbiAgY29tcGlsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByZTogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgIHNjb3BlLiRldmFsKGF0dHJzLm5nSW5pdCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdMaXN0XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUZXh0IGlucHV0IHRoYXQgY29udmVydHMgYmV0d2VlbiBhIGRlbGltaXRlZCBzdHJpbmcgYW5kIGFuIGFycmF5IG9mIHN0cmluZ3MuIFRoZSBkZWZhdWx0XG4gKiBkZWxpbWl0ZXIgaXMgYSBjb21tYSBmb2xsb3dlZCBieSBhIHNwYWNlIC0gZXF1aXZhbGVudCB0byBgbmctbGlzdD1cIiwgXCJgLiBZb3UgY2FuIHNwZWNpZnkgYSBjdXN0b21cbiAqIGRlbGltaXRlciBhcyB0aGUgdmFsdWUgb2YgdGhlIGBuZ0xpc3RgIGF0dHJpYnV0ZSAtIGZvciBleGFtcGxlLCBgbmctbGlzdD1cIiB8IFwiYC5cbiAqXG4gKiBUaGUgYmVoYXZpb3VyIG9mIHRoZSBkaXJlY3RpdmUgaXMgYWZmZWN0ZWQgYnkgdGhlIHVzZSBvZiB0aGUgYG5nVHJpbWAgYXR0cmlidXRlLlxuICogKiBJZiBgbmdUcmltYCBpcyBzZXQgdG8gYFwiZmFsc2VcImAgdGhlbiB3aGl0ZXNwYWNlIGFyb3VuZCBib3RoIHRoZSBzZXBhcmF0b3IgYW5kIGVhY2hcbiAqICAgbGlzdCBpdGVtIGlzIHJlc3BlY3RlZC4gVGhpcyBpbXBsaWVzIHRoYXQgdGhlIHVzZXIgb2YgdGhlIGRpcmVjdGl2ZSBpcyByZXNwb25zaWJsZSBmb3JcbiAqICAgZGVhbGluZyB3aXRoIHdoaXRlc3BhY2UgYnV0IGFsc28gYWxsb3dzIHlvdSB0byB1c2Ugd2hpdGVzcGFjZSBhcyBhIGRlbGltaXRlciwgc3VjaCBhcyBhXG4gKiAgIHRhYiBvciBuZXdsaW5lIGNoYXJhY3Rlci5cbiAqICogT3RoZXJ3aXNlIHdoaXRlc3BhY2UgYXJvdW5kIHRoZSBkZWxpbWl0ZXIgaXMgaWdub3JlZCB3aGVuIHNwbGl0dGluZyAoYWx0aG91Z2ggaXQgaXMgcmVzcGVjdGVkXG4gKiAgIHdoZW4gam9pbmluZyB0aGUgbGlzdCBpdGVtcyBiYWNrIHRvZ2V0aGVyKSBhbmQgd2hpdGVzcGFjZSBhcm91bmQgZWFjaCBsaXN0IGl0ZW0gaXMgc3RyaXBwZWRcbiAqICAgYmVmb3JlIGl0IGlzIGFkZGVkIHRvIHRoZSBtb2RlbC5cbiAqXG4gKiAjIyMgRXhhbXBsZSB3aXRoIFZhbGlkYXRpb25cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwibmdMaXN0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cImxpc3RFeGFtcGxlXCI+XG4gKiAgIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAqICAgICAgYW5ndWxhci5tb2R1bGUoJ2xpc3RFeGFtcGxlJywgW10pXG4gKiAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAqICAgICAgICAgICRzY29wZS5uYW1lcyA9IFsnbW9ycGhldXMnLCAnbmVvJywgJ3RyaW5pdHknXTtcbiAqICAgICAgICB9XSk7XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAqICAgICAgTGlzdDogPGlucHV0IG5hbWU9XCJuYW1lc0lucHV0XCIgbmctbW9kZWw9XCJuYW1lc1wiIG5nLWxpc3QgcmVxdWlyZWQ+XG4gKiAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLm5hbWVzSW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gKiAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxuICogICAgICA8YnI+XG4gKiAgICAgIDx0dD5uYW1lcyA9IHt7bmFtZXN9fTwvdHQ+PGJyLz5cbiAqICAgICAgPHR0Pm15Rm9ybS5uYW1lc0lucHV0LiR2YWxpZCA9IHt7bXlGb3JtLm5hbWVzSW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gKiAgICAgIDx0dD5teUZvcm0ubmFtZXNJbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5uYW1lc0lucHV0LiRlcnJvcn19PC90dD48YnIvPlxuICogICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPlxuICogICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+XG4gKiAgICAgPC9mb3JtPlxuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAqICAgICB2YXIgbGlzdElucHV0ID0gZWxlbWVudChieS5tb2RlbCgnbmFtZXMnKSk7XG4gKiAgICAgdmFyIG5hbWVzID0gZWxlbWVudChieS5leGFjdEJpbmRpbmcoJ25hbWVzJykpO1xuICogICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLm5hbWVzSW5wdXQuJHZhbGlkJykpO1xuICogICAgIHZhciBlcnJvciA9IGVsZW1lbnQoYnkuY3NzKCdzcGFuLmVycm9yJykpO1xuICpcbiAqICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAqICAgICAgIGV4cGVjdChuYW1lcy5nZXRUZXh0KCkpLnRvQ29udGFpbignW1wibW9ycGhldXNcIixcIm5lb1wiLFwidHJpbml0eVwiXScpO1xuICogICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gKiAgICAgICBleHBlY3QoZXJyb3IuZ2V0Q3NzVmFsdWUoJ2Rpc3BsYXknKSkudG9CZSgnbm9uZScpO1xuICogICAgIH0pO1xuICpcbiAqICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAqICAgICAgIGxpc3RJbnB1dC5jbGVhcigpO1xuICogICAgICAgbGlzdElucHV0LnNlbmRLZXlzKCcnKTtcbiAqXG4gKiAgICAgICBleHBlY3QobmFtZXMuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJycpO1xuICogICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICogICAgICAgZXhwZWN0KGVycm9yLmdldENzc1ZhbHVlKCdkaXNwbGF5JykpLm5vdC50b0JlKCdub25lJyk7XG4gKiAgICAgfSk7XG4gKiAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiAjIyMgRXhhbXBsZSAtIHNwbGl0dGluZyBvbiB3aGl0ZXNwYWNlXG4gKiA8ZXhhbXBsZSBuYW1lPVwibmdMaXN0LWRpcmVjdGl2ZS1uZXdsaW5lc1wiPlxuICogICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICAgPHRleHRhcmVhIG5nLW1vZGVsPVwibGlzdFwiIG5nLWxpc3Q9XCImIzEwO1wiIG5nLXRyaW09XCJmYWxzZVwiPjwvdGV4dGFyZWE+XG4gKiAgICA8cHJlPnt7IGxpc3QgfCBqc29uIH19PC9wcmU+XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICogICAgIGl0KFwic2hvdWxkIHNwbGl0IHRoZSB0ZXh0IGJ5IG5ld2xpbmVzXCIsIGZ1bmN0aW9uKCkge1xuICogICAgICAgdmFyIGxpc3RJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ2xpc3QnKSk7XG4gKiAgICAgICB2YXIgb3V0cHV0ID0gZWxlbWVudChieS5iaW5kaW5nKCdsaXN0IHwganNvbicpKTtcbiAqICAgICAgIGxpc3RJbnB1dC5zZW5kS2V5cygnYWJjXFxuZGVmXFxuZ2hpJyk7XG4gKiAgICAgICBleHBlY3Qob3V0cHV0LmdldFRleHQoKSkudG9Db250YWluKCdbXFxuICBcImFiY1wiLFxcbiAgXCJkZWZcIixcXG4gIFwiZ2hpXCJcXG5dJyk7XG4gKiAgICAgfSk7XG4gKiAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiBAZWxlbWVudCBpbnB1dFxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ0xpc3Qgb3B0aW9uYWwgZGVsaW1pdGVyIHRoYXQgc2hvdWxkIGJlIHVzZWQgdG8gc3BsaXQgdGhlIHZhbHVlLlxuICovXG52YXIgbmdMaXN0RGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBwcmlvcml0eTogMTAwLFxuICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCkge1xuICAgICAgLy8gV2Ugd2FudCB0byBjb250cm9sIHdoaXRlc3BhY2UgdHJpbW1pbmcgc28gd2UgdXNlIHRoaXMgY29udm9sdXRlZCBhcHByb2FjaFxuICAgICAgLy8gdG8gYWNjZXNzIHRoZSBuZ0xpc3QgYXR0cmlidXRlLCB3aGljaCBkb2Vzbid0IHByZS10cmltIHRoZSBhdHRyaWJ1dGVcbiAgICAgIHZhciBuZ0xpc3QgPSBlbGVtZW50LmF0dHIoYXR0ci4kYXR0ci5uZ0xpc3QpIHx8ICcsICc7XG4gICAgICB2YXIgdHJpbVZhbHVlcyA9IGF0dHIubmdUcmltICE9PSAnZmFsc2UnO1xuICAgICAgdmFyIHNlcGFyYXRvciA9IHRyaW1WYWx1ZXMgPyB0cmltKG5nTGlzdCkgOiBuZ0xpc3Q7XG5cbiAgICAgIHZhciBwYXJzZSA9IGZ1bmN0aW9uKHZpZXdWYWx1ZSkge1xuICAgICAgICAvLyBJZiB0aGUgdmlld1ZhbHVlIGlzIGludmFsaWQgKHNheSByZXF1aXJlZCBidXQgZW1wdHkpIGl0IHdpbGwgYmUgYHVuZGVmaW5lZGBcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZpZXdWYWx1ZSkpIHJldHVybjtcblxuICAgICAgICB2YXIgbGlzdCA9IFtdO1xuXG4gICAgICAgIGlmICh2aWV3VmFsdWUpIHtcbiAgICAgICAgICBmb3JFYWNoKHZpZXdWYWx1ZS5zcGxpdChzZXBhcmF0b3IpLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlKSBsaXN0LnB1c2godHJpbVZhbHVlcyA/IHRyaW0odmFsdWUpIDogdmFsdWUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgICB9O1xuXG4gICAgICBjdHJsLiRwYXJzZXJzLnB1c2gocGFyc2UpO1xuICAgICAgY3RybC4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZS5qb2luKG5nTGlzdCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIE92ZXJyaWRlIHRoZSBzdGFuZGFyZCAkaXNFbXB0eSBiZWNhdXNlIGFuIGVtcHR5IGFycmF5IG1lYW5zIHRoZSBpbnB1dCBpcyBlbXB0eS5cbiAgICAgIGN0cmwuJGlzRW1wdHkgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gIXZhbHVlIHx8ICF2YWx1ZS5sZW5ndGg7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn07XG5cbi8qIGdsb2JhbCBWQUxJRF9DTEFTUzogdHJ1ZSxcbiAgSU5WQUxJRF9DTEFTUzogdHJ1ZSxcbiAgUFJJU1RJTkVfQ0xBU1M6IHRydWUsXG4gIERJUlRZX0NMQVNTOiB0cnVlLFxuICBVTlRPVUNIRURfQ0xBU1M6IHRydWUsXG4gIFRPVUNIRURfQ0xBU1M6IHRydWUsXG4qL1xuXG52YXIgVkFMSURfQ0xBU1MgPSAnbmctdmFsaWQnLFxuICAgIElOVkFMSURfQ0xBU1MgPSAnbmctaW52YWxpZCcsXG4gICAgUFJJU1RJTkVfQ0xBU1MgPSAnbmctcHJpc3RpbmUnLFxuICAgIERJUlRZX0NMQVNTID0gJ25nLWRpcnR5JyxcbiAgICBVTlRPVUNIRURfQ0xBU1MgPSAnbmctdW50b3VjaGVkJyxcbiAgICBUT1VDSEVEX0NMQVNTID0gJ25nLXRvdWNoZWQnLFxuICAgIFBFTkRJTkdfQ0xBU1MgPSAnbmctcGVuZGluZyc7XG5cblxudmFyICRuZ01vZGVsTWluRXJyID0gbmV3IG1pbkVycignbmdNb2RlbCcpO1xuXG4vKipcbiAqIEBuZ2RvYyB0eXBlXG4gKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyXG4gKlxuICogQHByb3BlcnR5IHtzdHJpbmd9ICR2aWV3VmFsdWUgQWN0dWFsIHN0cmluZyB2YWx1ZSBpbiB0aGUgdmlldy5cbiAqIEBwcm9wZXJ0eSB7Kn0gJG1vZGVsVmFsdWUgVGhlIHZhbHVlIGluIHRoZSBtb2RlbCB0aGF0IHRoZSBjb250cm9sIGlzIGJvdW5kIHRvLlxuICogQHByb3BlcnR5IHtBcnJheS48RnVuY3Rpb24+fSAkcGFyc2VycyBBcnJheSBvZiBmdW5jdGlvbnMgdG8gZXhlY3V0ZSwgYXMgYSBwaXBlbGluZSwgd2hlbmV2ZXJcbiAgICAgICB0aGUgY29udHJvbCByZWFkcyB2YWx1ZSBmcm9tIHRoZSBET00uIFRoZSBmdW5jdGlvbnMgYXJlIGNhbGxlZCBpbiBhcnJheSBvcmRlciwgZWFjaCBwYXNzaW5nXG4gICAgICAgaXRzIHJldHVybiB2YWx1ZSB0aHJvdWdoIHRvIHRoZSBuZXh0LiBUaGUgbGFzdCByZXR1cm4gdmFsdWUgaXMgZm9yd2FyZGVkIHRvIHRoZVxuICAgICAgIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2YWxpZGF0b3JzIGAkdmFsaWRhdG9yc2B9IGNvbGxlY3Rpb24uXG5cblBhcnNlcnMgYXJlIHVzZWQgdG8gc2FuaXRpemUgLyBjb252ZXJ0IHRoZSB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmlld1ZhbHVlXG5gJHZpZXdWYWx1ZWB9LlxuXG5SZXR1cm5pbmcgYHVuZGVmaW5lZGAgZnJvbSBhIHBhcnNlciBtZWFucyBhIHBhcnNlIGVycm9yIG9jY3VycmVkLiBJbiB0aGF0IGNhc2UsXG5ubyB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmFsaWRhdG9ycyBgJHZhbGlkYXRvcnNgfSB3aWxsIHJ1biBhbmQgdGhlIGBuZ01vZGVsYFxud2lsbCBiZSBzZXQgdG8gYHVuZGVmaW5lZGAgdW5sZXNzIHtAbGluayBuZ01vZGVsT3B0aW9ucyBgbmdNb2RlbE9wdGlvbnMuYWxsb3dJbnZhbGlkYH1cbmlzIHNldCB0byBgdHJ1ZWAuIFRoZSBwYXJzZSBlcnJvciBpcyBzdG9yZWQgaW4gYG5nTW9kZWwuJGVycm9yLnBhcnNlYC5cblxuICpcbiAqIEBwcm9wZXJ0eSB7QXJyYXkuPEZ1bmN0aW9uPn0gJGZvcm1hdHRlcnMgQXJyYXkgb2YgZnVuY3Rpb25zIHRvIGV4ZWN1dGUsIGFzIGEgcGlwZWxpbmUsIHdoZW5ldmVyXG4gICAgICAgdGhlIG1vZGVsIHZhbHVlIGNoYW5nZXMuIFRoZSBmdW5jdGlvbnMgYXJlIGNhbGxlZCBpbiByZXZlcnNlIGFycmF5IG9yZGVyLCBlYWNoIHBhc3NpbmcgdGhlIHZhbHVlIHRocm91Z2ggdG8gdGhlXG4gICAgICAgbmV4dC4gVGhlIGxhc3QgcmV0dXJuIHZhbHVlIGlzIHVzZWQgYXMgdGhlIGFjdHVhbCBET00gdmFsdWUuXG4gICAgICAgVXNlZCB0byBmb3JtYXQgLyBjb252ZXJ0IHZhbHVlcyBmb3IgZGlzcGxheSBpbiB0aGUgY29udHJvbC5cbiAqIGBgYGpzXG4gKiBmdW5jdGlvbiBmb3JtYXR0ZXIodmFsdWUpIHtcbiAqICAgaWYgKHZhbHVlKSB7XG4gKiAgICAgcmV0dXJuIHZhbHVlLnRvVXBwZXJDYXNlKCk7XG4gKiAgIH1cbiAqIH1cbiAqIG5nTW9kZWwuJGZvcm1hdHRlcnMucHVzaChmb3JtYXR0ZXIpO1xuICogYGBgXG4gKlxuICogQHByb3BlcnR5IHtPYmplY3QuPHN0cmluZywgZnVuY3Rpb24+fSAkdmFsaWRhdG9ycyBBIGNvbGxlY3Rpb24gb2YgdmFsaWRhdG9ycyB0aGF0IGFyZSBhcHBsaWVkXG4gKiAgICAgIHdoZW5ldmVyIHRoZSBtb2RlbCB2YWx1ZSBjaGFuZ2VzLiBUaGUga2V5IHZhbHVlIHdpdGhpbiB0aGUgb2JqZWN0IHJlZmVycyB0byB0aGUgbmFtZSBvZiB0aGVcbiAqICAgICAgdmFsaWRhdG9yIHdoaWxlIHRoZSBmdW5jdGlvbiByZWZlcnMgdG8gdGhlIHZhbGlkYXRpb24gb3BlcmF0aW9uLiBUaGUgdmFsaWRhdGlvbiBvcGVyYXRpb24gaXNcbiAqICAgICAgcHJvdmlkZWQgd2l0aCB0aGUgbW9kZWwgdmFsdWUgYXMgYW4gYXJndW1lbnQgYW5kIG11c3QgcmV0dXJuIGEgdHJ1ZSBvciBmYWxzZSB2YWx1ZSBkZXBlbmRpbmdcbiAqICAgICAgb24gdGhlIHJlc3BvbnNlIG9mIHRoYXQgdmFsaWRhdGlvbi5cbiAqXG4gKiBgYGBqc1xuICogbmdNb2RlbC4kdmFsaWRhdG9ycy52YWxpZENoYXJhY3RlcnMgPSBmdW5jdGlvbihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpIHtcbiAqICAgdmFyIHZhbHVlID0gbW9kZWxWYWx1ZSB8fCB2aWV3VmFsdWU7XG4gKiAgIHJldHVybiAvWzAtOV0rLy50ZXN0KHZhbHVlKSAmJlxuICogICAgICAgICAgL1thLXpdKy8udGVzdCh2YWx1ZSkgJiZcbiAqICAgICAgICAgIC9bQS1aXSsvLnRlc3QodmFsdWUpICYmXG4gKiAgICAgICAgICAvXFxXKy8udGVzdCh2YWx1ZSk7XG4gKiB9O1xuICogYGBgXG4gKlxuICogQHByb3BlcnR5IHtPYmplY3QuPHN0cmluZywgZnVuY3Rpb24+fSAkYXN5bmNWYWxpZGF0b3JzIEEgY29sbGVjdGlvbiBvZiB2YWxpZGF0aW9ucyB0aGF0IGFyZSBleHBlY3RlZCB0b1xuICogICAgICBwZXJmb3JtIGFuIGFzeW5jaHJvbm91cyB2YWxpZGF0aW9uIChlLmcuIGEgSFRUUCByZXF1ZXN0KS4gVGhlIHZhbGlkYXRpb24gZnVuY3Rpb24gdGhhdCBpcyBwcm92aWRlZFxuICogICAgICBpcyBleHBlY3RlZCB0byByZXR1cm4gYSBwcm9taXNlIHdoZW4gaXQgaXMgcnVuIGR1cmluZyB0aGUgbW9kZWwgdmFsaWRhdGlvbiBwcm9jZXNzLiBPbmNlIHRoZSBwcm9taXNlXG4gKiAgICAgIGlzIGRlbGl2ZXJlZCB0aGVuIHRoZSB2YWxpZGF0aW9uIHN0YXR1cyB3aWxsIGJlIHNldCB0byB0cnVlIHdoZW4gZnVsZmlsbGVkIGFuZCBmYWxzZSB3aGVuIHJlamVjdGVkLlxuICogICAgICBXaGVuIHRoZSBhc3luY2hyb25vdXMgdmFsaWRhdG9ycyBhcmUgdHJpZ2dlcmVkLCBlYWNoIG9mIHRoZSB2YWxpZGF0b3JzIHdpbGwgcnVuIGluIHBhcmFsbGVsIGFuZCB0aGUgbW9kZWxcbiAqICAgICAgdmFsdWUgd2lsbCBvbmx5IGJlIHVwZGF0ZWQgb25jZSBhbGwgdmFsaWRhdG9ycyBoYXZlIGJlZW4gZnVsZmlsbGVkLiBBcyBsb25nIGFzIGFuIGFzeW5jaHJvbm91cyB2YWxpZGF0b3JcbiAqICAgICAgaXMgdW5mdWxmaWxsZWQsIGl0cyBrZXkgd2lsbCBiZSBhZGRlZCB0byB0aGUgY29udHJvbGxlcnMgYCRwZW5kaW5nYCBwcm9wZXJ0eS4gQWxzbywgYWxsIGFzeW5jaHJvbm91cyB2YWxpZGF0b3JzXG4gKiAgICAgIHdpbGwgb25seSBydW4gb25jZSBhbGwgc3luY2hyb25vdXMgdmFsaWRhdG9ycyBoYXZlIHBhc3NlZC5cbiAqXG4gKiBQbGVhc2Ugbm90ZSB0aGF0IGlmICRodHRwIGlzIHVzZWQgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdGhhdCB0aGUgc2VydmVyIHJldHVybnMgYSBzdWNjZXNzIEhUVFAgcmVzcG9uc2UgY29kZVxuICogaW4gb3JkZXIgdG8gZnVsZmlsbCB0aGUgdmFsaWRhdGlvbiBhbmQgYSBzdGF0dXMgbGV2ZWwgb2YgYDR4eGAgaW4gb3JkZXIgdG8gcmVqZWN0IHRoZSB2YWxpZGF0aW9uLlxuICpcbiAqIGBgYGpzXG4gKiBuZ01vZGVsLiRhc3luY1ZhbGlkYXRvcnMudW5pcXVlVXNlcm5hbWUgPSBmdW5jdGlvbihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpIHtcbiAqICAgdmFyIHZhbHVlID0gbW9kZWxWYWx1ZSB8fCB2aWV3VmFsdWU7XG4gKlxuICogICAvLyBMb29rdXAgdXNlciBieSB1c2VybmFtZVxuICogICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzLycgKyB2YWx1ZSkuXG4gKiAgICAgIHRoZW4oZnVuY3Rpb24gcmVzb2x2ZWQoKSB7XG4gKiAgICAgICAgLy91c2VybmFtZSBleGlzdHMsIHRoaXMgbWVhbnMgdmFsaWRhdGlvbiBmYWlsc1xuICogICAgICAgIHJldHVybiAkcS5yZWplY3QoJ2V4aXN0cycpO1xuICogICAgICB9LCBmdW5jdGlvbiByZWplY3RlZCgpIHtcbiAqICAgICAgICAvL3VzZXJuYW1lIGRvZXMgbm90IGV4aXN0LCB0aGVyZWZvcmUgdGhpcyB2YWxpZGF0aW9uIHBhc3Nlc1xuICogICAgICAgIHJldHVybiB0cnVlO1xuICogICAgICB9KTtcbiAqIH07XG4gKiBgYGBcbiAqXG4gKiBAcHJvcGVydHkge0FycmF5LjxGdW5jdGlvbj59ICR2aWV3Q2hhbmdlTGlzdGVuZXJzIEFycmF5IG9mIGZ1bmN0aW9ucyB0byBleGVjdXRlIHdoZW5ldmVyIHRoZVxuICogICAgIHZpZXcgdmFsdWUgaGFzIGNoYW5nZWQuIEl0IGlzIGNhbGxlZCB3aXRoIG5vIGFyZ3VtZW50cywgYW5kIGl0cyByZXR1cm4gdmFsdWUgaXMgaWdub3JlZC5cbiAqICAgICBUaGlzIGNhbiBiZSB1c2VkIGluIHBsYWNlIG9mIGFkZGl0aW9uYWwgJHdhdGNoZXMgYWdhaW5zdCB0aGUgbW9kZWwgdmFsdWUuXG4gKlxuICogQHByb3BlcnR5IHtPYmplY3R9ICRlcnJvciBBbiBvYmplY3QgaGFzaCB3aXRoIGFsbCBmYWlsaW5nIHZhbGlkYXRvciBpZHMgYXMga2V5cy5cbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSAkcGVuZGluZyBBbiBvYmplY3QgaGFzaCB3aXRoIGFsbCBwZW5kaW5nIHZhbGlkYXRvciBpZHMgYXMga2V5cy5cbiAqXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICR1bnRvdWNoZWQgVHJ1ZSBpZiBjb250cm9sIGhhcyBub3QgbG9zdCBmb2N1cyB5ZXQuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICR0b3VjaGVkIFRydWUgaWYgY29udHJvbCBoYXMgbG9zdCBmb2N1cy5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHByaXN0aW5lIFRydWUgaWYgdXNlciBoYXMgbm90IGludGVyYWN0ZWQgd2l0aCB0aGUgY29udHJvbCB5ZXQuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICRkaXJ0eSBUcnVlIGlmIHVzZXIgaGFzIGFscmVhZHkgaW50ZXJhY3RlZCB3aXRoIHRoZSBjb250cm9sLlxuICogQHByb3BlcnR5IHtib29sZWFufSAkdmFsaWQgVHJ1ZSBpZiB0aGVyZSBpcyBubyBlcnJvci5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJGludmFsaWQgVHJ1ZSBpZiBhdCBsZWFzdCBvbmUgZXJyb3Igb24gdGhlIGNvbnRyb2wuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gJG5hbWUgVGhlIG5hbWUgYXR0cmlidXRlIG9mIHRoZSBjb250cm9sLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIGBOZ01vZGVsQ29udHJvbGxlcmAgcHJvdmlkZXMgQVBJIGZvciB0aGUge0BsaW5rIG5nTW9kZWwgYG5nTW9kZWxgfSBkaXJlY3RpdmUuXG4gKiBUaGUgY29udHJvbGxlciBjb250YWlucyBzZXJ2aWNlcyBmb3IgZGF0YS1iaW5kaW5nLCB2YWxpZGF0aW9uLCBDU1MgdXBkYXRlcywgYW5kIHZhbHVlIGZvcm1hdHRpbmdcbiAqIGFuZCBwYXJzaW5nLiBJdCBwdXJwb3NlZnVsbHkgZG9lcyBub3QgY29udGFpbiBhbnkgbG9naWMgd2hpY2ggZGVhbHMgd2l0aCBET00gcmVuZGVyaW5nIG9yXG4gKiBsaXN0ZW5pbmcgdG8gRE9NIGV2ZW50cy5cbiAqIFN1Y2ggRE9NIHJlbGF0ZWQgbG9naWMgc2hvdWxkIGJlIHByb3ZpZGVkIGJ5IG90aGVyIGRpcmVjdGl2ZXMgd2hpY2ggbWFrZSB1c2Ugb2ZcbiAqIGBOZ01vZGVsQ29udHJvbGxlcmAgZm9yIGRhdGEtYmluZGluZyB0byBjb250cm9sIGVsZW1lbnRzLlxuICogQW5ndWxhciBwcm92aWRlcyB0aGlzIERPTSBsb2dpYyBmb3IgbW9zdCB7QGxpbmsgaW5wdXQgYGlucHV0YH0gZWxlbWVudHMuXG4gKiBBdCB0aGUgZW5kIG9mIHRoaXMgcGFnZSB5b3UgY2FuIGZpbmQgYSB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciNjdXN0b20tY29udHJvbC1leGFtcGxlXG4gKiBjdXN0b20gY29udHJvbCBleGFtcGxlfSB0aGF0IHVzZXMgYG5nTW9kZWxDb250cm9sbGVyYCB0byBiaW5kIHRvIGBjb250ZW50ZWRpdGFibGVgIGVsZW1lbnRzLlxuICpcbiAqIEBleGFtcGxlXG4gKiAjIyMgQ3VzdG9tIENvbnRyb2wgRXhhbXBsZVxuICogVGhpcyBleGFtcGxlIHNob3dzIGhvdyB0byB1c2UgYE5nTW9kZWxDb250cm9sbGVyYCB3aXRoIGEgY3VzdG9tIGNvbnRyb2wgdG8gYWNoaWV2ZVxuICogZGF0YS1iaW5kaW5nLiBOb3RpY2UgaG93IGRpZmZlcmVudCBkaXJlY3RpdmVzIChgY29udGVudGVkaXRhYmxlYCwgYG5nLW1vZGVsYCwgYW5kIGByZXF1aXJlZGApXG4gKiBjb2xsYWJvcmF0ZSB0b2dldGhlciB0byBhY2hpZXZlIHRoZSBkZXNpcmVkIHJlc3VsdC5cbiAqXG4gKiBOb3RlIHRoYXQgYGNvbnRlbnRlZGl0YWJsZWAgaXMgYW4gSFRNTDUgYXR0cmlidXRlLCB3aGljaCB0ZWxscyB0aGUgYnJvd3NlciB0byBsZXQgdGhlIGVsZW1lbnRcbiAqIGNvbnRlbnRzIGJlIGVkaXRlZCBpbiBwbGFjZSBieSB0aGUgdXNlci4gIFRoaXMgd2lsbCBub3Qgd29yayBvbiBvbGRlciBicm93c2Vycy5cbiAqXG4gKiBXZSBhcmUgdXNpbmcgdGhlIHtAbGluayBuZy5zZXJ2aWNlOiRzY2UgJHNjZX0gc2VydmljZSBoZXJlIGFuZCBpbmNsdWRlIHRoZSB7QGxpbmsgbmdTYW5pdGl6ZSAkc2FuaXRpemV9XG4gKiBtb2R1bGUgdG8gYXV0b21hdGljYWxseSByZW1vdmUgXCJiYWRcIiBjb250ZW50IGxpa2UgaW5saW5lIGV2ZW50IGxpc3RlbmVyIChlLmcuIGA8c3BhbiBvbmNsaWNrPVwiLi4uXCI+YCkuXG4gKiBIb3dldmVyLCBhcyB3ZSBhcmUgdXNpbmcgYCRzY2VgIHRoZSBtb2RlbCBjYW4gc3RpbGwgZGVjaWRlIHRvIHByb3ZpZGUgdW5zYWZlIGNvbnRlbnQgaWYgaXQgbWFya3NcbiAqIHRoYXQgY29udGVudCB1c2luZyB0aGUgYCRzY2VgIHNlcnZpY2UuXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cIk5nTW9kZWxDb250cm9sbGVyXCIgbW9kdWxlPVwiY3VzdG9tQ29udHJvbFwiIGRlcHM9XCJhbmd1bGFyLXNhbml0aXplLmpzXCI+XG4gICAgPGZpbGUgbmFtZT1cInN0eWxlLmNzc1wiPlxuICAgICAgW2NvbnRlbnRlZGl0YWJsZV0ge1xuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gICAgICAgIG1pbi1oZWlnaHQ6IDIwcHg7XG4gICAgICB9XG5cbiAgICAgIC5uZy1pbnZhbGlkIHtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgcmVkO1xuICAgICAgfVxuXG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdjdXN0b21Db250cm9sJywgWyduZ1Nhbml0aXplJ10pLlxuICAgICAgICBkaXJlY3RpdmUoJ2NvbnRlbnRlZGl0YWJsZScsIFsnJHNjZScsIGZ1bmN0aW9uKCRzY2UpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdBJywgLy8gb25seSBhY3RpdmF0ZSBvbiBlbGVtZW50IGF0dHJpYnV0ZVxuICAgICAgICAgICAgcmVxdWlyZTogJz9uZ01vZGVsJywgLy8gZ2V0IGEgaG9sZCBvZiBOZ01vZGVsQ29udHJvbGxlclxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBuZ01vZGVsKSB7XG4gICAgICAgICAgICAgIGlmICghbmdNb2RlbCkgcmV0dXJuOyAvLyBkbyBub3RoaW5nIGlmIG5vIG5nLW1vZGVsXG5cbiAgICAgICAgICAgICAgLy8gU3BlY2lmeSBob3cgVUkgc2hvdWxkIGJlIHVwZGF0ZWRcbiAgICAgICAgICAgICAgbmdNb2RlbC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5odG1sKCRzY2UuZ2V0VHJ1c3RlZEh0bWwobmdNb2RlbC4kdmlld1ZhbHVlIHx8ICcnKSk7XG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgLy8gTGlzdGVuIGZvciBjaGFuZ2UgZXZlbnRzIHRvIGVuYWJsZSBiaW5kaW5nXG4gICAgICAgICAgICAgIGVsZW1lbnQub24oJ2JsdXIga2V5dXAgY2hhbmdlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgc2NvcGUuJGV2YWxBc3luYyhyZWFkKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHJlYWQoKTsgLy8gaW5pdGlhbGl6ZVxuXG4gICAgICAgICAgICAgIC8vIFdyaXRlIGRhdGEgdG8gdGhlIG1vZGVsXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIHJlYWQoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGh0bWwgPSBlbGVtZW50Lmh0bWwoKTtcbiAgICAgICAgICAgICAgICAvLyBXaGVuIHdlIGNsZWFyIHRoZSBjb250ZW50IGVkaXRhYmxlIHRoZSBicm93c2VyIGxlYXZlcyBhIDxicj4gYmVoaW5kXG4gICAgICAgICAgICAgICAgLy8gSWYgc3RyaXAtYnIgYXR0cmlidXRlIGlzIHByb3ZpZGVkIHRoZW4gd2Ugc3RyaXAgdGhpcyBvdXRcbiAgICAgICAgICAgICAgICBpZiAoIGF0dHJzLnN0cmlwQnIgJiYgaHRtbCA9PSAnPGJyPicgKSB7XG4gICAgICAgICAgICAgICAgICBodG1sID0gJyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5nTW9kZWwuJHNldFZpZXdWYWx1ZShodG1sKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH1dKTtcbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIj5cbiAgICAgICA8ZGl2IGNvbnRlbnRlZGl0YWJsZVxuICAgICAgICAgICAgbmFtZT1cIm15V2lkZ2V0XCIgbmctbW9kZWw9XCJ1c2VyQ29udGVudFwiXG4gICAgICAgICAgICBzdHJpcC1icj1cInRydWVcIlxuICAgICAgICAgICAgcmVxdWlyZWQ+Q2hhbmdlIG1lITwvZGl2PlxuICAgICAgICA8c3BhbiBuZy1zaG93PVwibXlGb3JtLm15V2lkZ2V0LiRlcnJvci5yZXF1aXJlZFwiPlJlcXVpcmVkITwvc3Bhbj5cbiAgICAgICA8aHI+XG4gICAgICAgPHRleHRhcmVhIG5nLW1vZGVsPVwidXNlckNvbnRlbnRcIj48L3RleHRhcmVhPlxuICAgICAgPC9mb3JtPlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgaXQoJ3Nob3VsZCBkYXRhLWJpbmQgYW5kIGJlY29tZSBpbnZhbGlkJywgZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoYnJvd3Nlci5wYXJhbXMuYnJvd3NlciA9PSAnc2FmYXJpJyB8fCBicm93c2VyLnBhcmFtcy5icm93c2VyID09ICdmaXJlZm94Jykge1xuICAgICAgICAvLyBTYWZhcmlEcml2ZXIgY2FuJ3QgaGFuZGxlIGNvbnRlbnRlZGl0YWJsZVxuICAgICAgICAvLyBhbmQgRmlyZWZveCBkcml2ZXIgY2FuJ3QgY2xlYXIgY29udGVudGVkaXRhYmxlcyB2ZXJ5IHdlbGxcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGNvbnRlbnRFZGl0YWJsZSA9IGVsZW1lbnQoYnkuY3NzKCdbY29udGVudGVkaXRhYmxlXScpKTtcbiAgICAgIHZhciBjb250ZW50ID0gJ0NoYW5nZSBtZSEnO1xuXG4gICAgICBleHBlY3QoY29udGVudEVkaXRhYmxlLmdldFRleHQoKSkudG9FcXVhbChjb250ZW50KTtcblxuICAgICAgY29udGVudEVkaXRhYmxlLmNsZWFyKCk7XG4gICAgICBjb250ZW50RWRpdGFibGUuc2VuZEtleXMocHJvdHJhY3Rvci5LZXkuQkFDS19TUEFDRSk7XG4gICAgICBleHBlY3QoY29udGVudEVkaXRhYmxlLmdldFRleHQoKSkudG9FcXVhbCgnJyk7XG4gICAgICBleHBlY3QoY29udGVudEVkaXRhYmxlLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9NYXRjaCgvbmctaW52YWxpZC1yZXF1aXJlZC8pO1xuICAgIH0pO1xuICAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKlxuICovXG52YXIgTmdNb2RlbENvbnRyb2xsZXIgPSBbJyRzY29wZScsICckZXhjZXB0aW9uSGFuZGxlcicsICckYXR0cnMnLCAnJGVsZW1lbnQnLCAnJHBhcnNlJywgJyRhbmltYXRlJywgJyR0aW1lb3V0JywgJyRyb290U2NvcGUnLCAnJHEnLCAnJGludGVycG9sYXRlJyxcbiAgICBmdW5jdGlvbigkc2NvcGUsICRleGNlcHRpb25IYW5kbGVyLCAkYXR0ciwgJGVsZW1lbnQsICRwYXJzZSwgJGFuaW1hdGUsICR0aW1lb3V0LCAkcm9vdFNjb3BlLCAkcSwgJGludGVycG9sYXRlKSB7XG4gIHRoaXMuJHZpZXdWYWx1ZSA9IE51bWJlci5OYU47XG4gIHRoaXMuJG1vZGVsVmFsdWUgPSBOdW1iZXIuTmFOO1xuICB0aGlzLiQkcmF3TW9kZWxWYWx1ZSA9IHVuZGVmaW5lZDsgLy8gc3RvcmVzIHRoZSBwYXJzZWQgbW9kZWxWYWx1ZSAvIG1vZGVsIHNldCBmcm9tIHNjb3BlIHJlZ2FyZGxlc3Mgb2YgdmFsaWRpdHkuXG4gIHRoaXMuJHZhbGlkYXRvcnMgPSB7fTtcbiAgdGhpcy4kYXN5bmNWYWxpZGF0b3JzID0ge307XG4gIHRoaXMuJHBhcnNlcnMgPSBbXTtcbiAgdGhpcy4kZm9ybWF0dGVycyA9IFtdO1xuICB0aGlzLiR2aWV3Q2hhbmdlTGlzdGVuZXJzID0gW107XG4gIHRoaXMuJHVudG91Y2hlZCA9IHRydWU7XG4gIHRoaXMuJHRvdWNoZWQgPSBmYWxzZTtcbiAgdGhpcy4kcHJpc3RpbmUgPSB0cnVlO1xuICB0aGlzLiRkaXJ0eSA9IGZhbHNlO1xuICB0aGlzLiR2YWxpZCA9IHRydWU7XG4gIHRoaXMuJGludmFsaWQgPSBmYWxzZTtcbiAgdGhpcy4kZXJyb3IgPSB7fTsgLy8ga2VlcCBpbnZhbGlkIGtleXMgaGVyZVxuICB0aGlzLiQkc3VjY2VzcyA9IHt9OyAvLyBrZWVwIHZhbGlkIGtleXMgaGVyZVxuICB0aGlzLiRwZW5kaW5nID0gdW5kZWZpbmVkOyAvLyBrZWVwIHBlbmRpbmcga2V5cyBoZXJlXG4gIHRoaXMuJG5hbWUgPSAkaW50ZXJwb2xhdGUoJGF0dHIubmFtZSB8fCAnJywgZmFsc2UpKCRzY29wZSk7XG5cblxuICB2YXIgcGFyc2VkTmdNb2RlbCA9ICRwYXJzZSgkYXR0ci5uZ01vZGVsKSxcbiAgICAgIHBhcnNlZE5nTW9kZWxBc3NpZ24gPSBwYXJzZWROZ01vZGVsLmFzc2lnbixcbiAgICAgIG5nTW9kZWxHZXQgPSBwYXJzZWROZ01vZGVsLFxuICAgICAgbmdNb2RlbFNldCA9IHBhcnNlZE5nTW9kZWxBc3NpZ24sXG4gICAgICBwZW5kaW5nRGVib3VuY2UgPSBudWxsLFxuICAgICAgY3RybCA9IHRoaXM7XG5cbiAgdGhpcy4kJHNldE9wdGlvbnMgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgY3RybC4kb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5nZXR0ZXJTZXR0ZXIpIHtcbiAgICAgIHZhciBpbnZva2VNb2RlbEdldHRlciA9ICRwYXJzZSgkYXR0ci5uZ01vZGVsICsgJygpJyksXG4gICAgICAgICAgaW52b2tlTW9kZWxTZXR0ZXIgPSAkcGFyc2UoJGF0dHIubmdNb2RlbCArICcoJCQkcCknKTtcblxuICAgICAgbmdNb2RlbEdldCA9IGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICB2YXIgbW9kZWxWYWx1ZSA9IHBhcnNlZE5nTW9kZWwoJHNjb3BlKTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24obW9kZWxWYWx1ZSkpIHtcbiAgICAgICAgICBtb2RlbFZhbHVlID0gaW52b2tlTW9kZWxHZXR0ZXIoJHNjb3BlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbW9kZWxWYWx1ZTtcbiAgICAgIH07XG4gICAgICBuZ01vZGVsU2V0ID0gZnVuY3Rpb24oJHNjb3BlLCBuZXdWYWx1ZSkge1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihwYXJzZWROZ01vZGVsKCRzY29wZSkpKSB7XG4gICAgICAgICAgaW52b2tlTW9kZWxTZXR0ZXIoJHNjb3BlLCB7JCQkcDogY3RybC4kbW9kZWxWYWx1ZX0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhcnNlZE5nTW9kZWxBc3NpZ24oJHNjb3BlLCBjdHJsLiRtb2RlbFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKCFwYXJzZWROZ01vZGVsLmFzc2lnbikge1xuICAgICAgdGhyb3cgJG5nTW9kZWxNaW5FcnIoJ25vbmFzc2lnbicsIFwiRXhwcmVzc2lvbiAnezB9JyBpcyBub24tYXNzaWduYWJsZS4gRWxlbWVudDogezF9XCIsXG4gICAgICAgICAgJGF0dHIubmdNb2RlbCwgc3RhcnRpbmdUYWcoJGVsZW1lbnQpKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkcmVuZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDYWxsZWQgd2hlbiB0aGUgdmlldyBuZWVkcyB0byBiZSB1cGRhdGVkLiBJdCBpcyBleHBlY3RlZCB0aGF0IHRoZSB1c2VyIG9mIHRoZSBuZy1tb2RlbFxuICAgKiBkaXJlY3RpdmUgd2lsbCBpbXBsZW1lbnQgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIFRoZSBgJHJlbmRlcigpYCBtZXRob2QgaXMgaW52b2tlZCBpbiB0aGUgZm9sbG93aW5nIHNpdHVhdGlvbnM6XG4gICAqXG4gICAqICogYCRyb2xsYmFja1ZpZXdWYWx1ZSgpYCBpcyBjYWxsZWQuICBJZiB3ZSBhcmUgcm9sbGluZyBiYWNrIHRoZSB2aWV3IHZhbHVlIHRvIHRoZSBsYXN0XG4gICAqICAgY29tbWl0dGVkIHZhbHVlIHRoZW4gYCRyZW5kZXIoKWAgaXMgY2FsbGVkIHRvIHVwZGF0ZSB0aGUgaW5wdXQgY29udHJvbC5cbiAgICogKiBUaGUgdmFsdWUgcmVmZXJlbmNlZCBieSBgbmctbW9kZWxgIGlzIGNoYW5nZWQgcHJvZ3JhbW1hdGljYWxseSBhbmQgYm90aCB0aGUgYCRtb2RlbFZhbHVlYCBhbmRcbiAgICogICB0aGUgYCR2aWV3VmFsdWVgIGFyZSBkaWZmZXJlbnQgdG8gbGFzdCB0aW1lLlxuICAgKlxuICAgKiBTaW5jZSBgbmctbW9kZWxgIGRvZXMgbm90IGRvIGEgZGVlcCB3YXRjaCwgYCRyZW5kZXIoKWAgaXMgb25seSBpbnZva2VkIGlmIHRoZSB2YWx1ZXMgb2ZcbiAgICogYCRtb2RlbFZhbHVlYCBhbmQgYCR2aWV3VmFsdWVgIGFyZSBhY3R1YWxseSBkaWZmZXJlbnQgdG8gdGhlaXIgcHJldmlvdXMgdmFsdWUuIElmIGAkbW9kZWxWYWx1ZWBcbiAgICogb3IgYCR2aWV3VmFsdWVgIGFyZSBvYmplY3RzIChyYXRoZXIgdGhhbiBhIHN0cmluZyBvciBudW1iZXIpIHRoZW4gYCRyZW5kZXIoKWAgd2lsbCBub3QgYmVcbiAgICogaW52b2tlZCBpZiB5b3Ugb25seSBjaGFuZ2UgYSBwcm9wZXJ0eSBvbiB0aGUgb2JqZWN0cy5cbiAgICovXG4gIHRoaXMuJHJlbmRlciA9IG5vb3A7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkaXNFbXB0eVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBpcyBjYWxsZWQgd2hlbiB3ZSBuZWVkIHRvIGRldGVybWluZSBpZiB0aGUgdmFsdWUgb2YgYW4gaW5wdXQgaXMgZW1wdHkuXG4gICAqXG4gICAqIEZvciBpbnN0YW5jZSwgdGhlIHJlcXVpcmVkIGRpcmVjdGl2ZSBkb2VzIHRoaXMgdG8gd29yayBvdXQgaWYgdGhlIGlucHV0IGhhcyBkYXRhIG9yIG5vdC5cbiAgICpcbiAgICogVGhlIGRlZmF1bHQgYCRpc0VtcHR5YCBmdW5jdGlvbiBjaGVja3Mgd2hldGhlciB0aGUgdmFsdWUgaXMgYHVuZGVmaW5lZGAsIGAnJ2AsIGBudWxsYCBvciBgTmFOYC5cbiAgICpcbiAgICogWW91IGNhbiBvdmVycmlkZSB0aGlzIGZvciBpbnB1dCBkaXJlY3RpdmVzIHdob3NlIGNvbmNlcHQgb2YgYmVpbmcgZW1wdHkgaXMgZGlmZmVyZW50IHRvIHRoZVxuICAgKiBkZWZhdWx0LiBUaGUgYGNoZWNrYm94SW5wdXRUeXBlYCBkaXJlY3RpdmUgZG9lcyB0aGlzIGJlY2F1c2UgaW4gaXRzIGNhc2UgYSB2YWx1ZSBvZiBgZmFsc2VgXG4gICAqIGltcGxpZXMgZW1wdHkuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBpbnB1dCB0byBjaGVjayBmb3IgZW1wdGluZXNzLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIFwiZW1wdHlcIi5cbiAgICovXG4gIHRoaXMuJGlzRW1wdHkgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBpc1VuZGVmaW5lZCh2YWx1ZSkgfHwgdmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZTtcbiAgfTtcblxuICB2YXIgcGFyZW50Rm9ybSA9ICRlbGVtZW50LmluaGVyaXRlZERhdGEoJyRmb3JtQ29udHJvbGxlcicpIHx8IG51bGxGb3JtQ3RybCxcbiAgICAgIGN1cnJlbnRWYWxpZGF0aW9uUnVuSWQgPSAwO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFZhbGlkaXR5XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDaGFuZ2UgdGhlIHZhbGlkaXR5IHN0YXRlLCBhbmQgbm90aWZ5IHRoZSBmb3JtLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHdpdGhpbiAkcGFyc2Vycy8kZm9ybWF0dGVycyBvciBhIGN1c3RvbSB2YWxpZGF0aW9uIGltcGxlbWVudGF0aW9uLlxuICAgKiBIb3dldmVyLCBpbiBtb3N0IGNhc2VzIGl0IHNob3VsZCBiZSBzdWZmaWNpZW50IHRvIHVzZSB0aGUgYG5nTW9kZWwuJHZhbGlkYXRvcnNgIGFuZFxuICAgKiBgbmdNb2RlbC4kYXN5bmNWYWxpZGF0b3JzYCBjb2xsZWN0aW9ucyB3aGljaCB3aWxsIGNhbGwgYCRzZXRWYWxpZGl0eWAgYXV0b21hdGljYWxseS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbGlkYXRpb25FcnJvcktleSBOYW1lIG9mIHRoZSB2YWxpZGF0b3IuIFRoZSBgdmFsaWRhdGlvbkVycm9yS2V5YCB3aWxsIGJlIGFzc2lnbmVkXG4gICAqICAgICAgICB0byBlaXRoZXIgYCRlcnJvclt2YWxpZGF0aW9uRXJyb3JLZXldYCBvciBgJHBlbmRpbmdbdmFsaWRhdGlvbkVycm9yS2V5XWBcbiAgICogICAgICAgIChmb3IgdW5mdWxmaWxsZWQgYCRhc3luY1ZhbGlkYXRvcnNgKSwgc28gdGhhdCBpdCBpcyBhdmFpbGFibGUgZm9yIGRhdGEtYmluZGluZy5cbiAgICogICAgICAgIFRoZSBgdmFsaWRhdGlvbkVycm9yS2V5YCBzaG91bGQgYmUgaW4gY2FtZWxDYXNlIGFuZCB3aWxsIGdldCBjb252ZXJ0ZWQgaW50byBkYXNoLWNhc2VcbiAgICogICAgICAgIGZvciBjbGFzcyBuYW1lLiBFeGFtcGxlOiBgbXlFcnJvcmAgd2lsbCByZXN1bHQgaW4gYG5nLXZhbGlkLW15LWVycm9yYCBhbmQgYG5nLWludmFsaWQtbXktZXJyb3JgXG4gICAqICAgICAgICBjbGFzcyBhbmQgY2FuIGJlIGJvdW5kIHRvIGFzICBge3tzb21lRm9ybS5zb21lQ29udHJvbC4kZXJyb3IubXlFcnJvcn19YCAuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNWYWxpZCBXaGV0aGVyIHRoZSBjdXJyZW50IHN0YXRlIGlzIHZhbGlkICh0cnVlKSwgaW52YWxpZCAoZmFsc2UpLCBwZW5kaW5nICh1bmRlZmluZWQpLFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgb3Igc2tpcHBlZCAobnVsbCkuIFBlbmRpbmcgaXMgdXNlZCBmb3IgdW5mdWxmaWxsZWQgYCRhc3luY1ZhbGlkYXRvcnNgLlxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgU2tpcHBlZCBpcyB1c2VkIGJ5IEFuZ3VsYXIgd2hlbiB2YWxpZGF0b3JzIGRvIG5vdCBydW4gYmVjYXVzZSBvZiBwYXJzZSBlcnJvcnMgYW5kXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVuIGAkYXN5bmNWYWxpZGF0b3JzYCBkbyBub3QgcnVuIGJlY2F1c2UgYW55IG9mIHRoZSBgJHZhbGlkYXRvcnNgIGZhaWxlZC5cbiAgICovXG4gIGFkZFNldFZhbGlkaXR5TWV0aG9kKHtcbiAgICBjdHJsOiB0aGlzLFxuICAgICRlbGVtZW50OiAkZWxlbWVudCxcbiAgICBzZXQ6IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHtcbiAgICAgIG9iamVjdFtwcm9wZXJ0eV0gPSB0cnVlO1xuICAgIH0sXG4gICAgdW5zZXQ6IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHtcbiAgICAgIGRlbGV0ZSBvYmplY3RbcHJvcGVydHldO1xuICAgIH0sXG4gICAgcGFyZW50Rm9ybTogcGFyZW50Rm9ybSxcbiAgICAkYW5pbWF0ZTogJGFuaW1hdGVcbiAgfSk7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkc2V0UHJpc3RpbmVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgdGhlIGNvbnRyb2wgdG8gaXRzIHByaXN0aW5lIHN0YXRlLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHRvIHJlbW92ZSB0aGUgYG5nLWRpcnR5YCBjbGFzcyBhbmQgc2V0IHRoZSBjb250cm9sIHRvIGl0cyBwcmlzdGluZVxuICAgKiBzdGF0ZSAoYG5nLXByaXN0aW5lYCBjbGFzcykuIEEgbW9kZWwgaXMgY29uc2lkZXJlZCB0byBiZSBwcmlzdGluZSB3aGVuIHRoZSBjb250cm9sXG4gICAqIGhhcyBub3QgYmVlbiBjaGFuZ2VkIGZyb20gd2hlbiBmaXJzdCBjb21waWxlZC5cbiAgICovXG4gIHRoaXMuJHNldFByaXN0aW5lID0gZnVuY3Rpb24oKSB7XG4gICAgY3RybC4kZGlydHkgPSBmYWxzZTtcbiAgICBjdHJsLiRwcmlzdGluZSA9IHRydWU7XG4gICAgJGFuaW1hdGUucmVtb3ZlQ2xhc3MoJGVsZW1lbnQsIERJUlRZX0NMQVNTKTtcbiAgICAkYW5pbWF0ZS5hZGRDbGFzcygkZWxlbWVudCwgUFJJU1RJTkVfQ0xBU1MpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldERpcnR5XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIHRoZSBjb250cm9sIHRvIGl0cyBkaXJ0eSBzdGF0ZS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgY2FuIGJlIGNhbGxlZCB0byByZW1vdmUgdGhlIGBuZy1wcmlzdGluZWAgY2xhc3MgYW5kIHNldCB0aGUgY29udHJvbCB0byBpdHMgZGlydHlcbiAgICogc3RhdGUgKGBuZy1kaXJ0eWAgY2xhc3MpLiBBIG1vZGVsIGlzIGNvbnNpZGVyZWQgdG8gYmUgZGlydHkgd2hlbiB0aGUgY29udHJvbCBoYXMgYmVlbiBjaGFuZ2VkXG4gICAqIGZyb20gd2hlbiBmaXJzdCBjb21waWxlZC5cbiAgICovXG4gIHRoaXMuJHNldERpcnR5ID0gZnVuY3Rpb24oKSB7XG4gICAgY3RybC4kZGlydHkgPSB0cnVlO1xuICAgIGN0cmwuJHByaXN0aW5lID0gZmFsc2U7XG4gICAgJGFuaW1hdGUucmVtb3ZlQ2xhc3MoJGVsZW1lbnQsIFBSSVNUSU5FX0NMQVNTKTtcbiAgICAkYW5pbWF0ZS5hZGRDbGFzcygkZWxlbWVudCwgRElSVFlfQ0xBU1MpO1xuICAgIHBhcmVudEZvcm0uJHNldERpcnR5KCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkc2V0VW50b3VjaGVkXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIHRoZSBjb250cm9sIHRvIGl0cyB1bnRvdWNoZWQgc3RhdGUuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgdG8gcmVtb3ZlIHRoZSBgbmctdG91Y2hlZGAgY2xhc3MgYW5kIHNldCB0aGUgY29udHJvbCB0byBpdHNcbiAgICogdW50b3VjaGVkIHN0YXRlIChgbmctdW50b3VjaGVkYCBjbGFzcykuIFVwb24gY29tcGlsYXRpb24sIGEgbW9kZWwgaXMgc2V0IGFzIHVudG91Y2hlZFxuICAgKiBieSBkZWZhdWx0LCBob3dldmVyIHRoaXMgZnVuY3Rpb24gY2FuIGJlIHVzZWQgdG8gcmVzdG9yZSB0aGF0IHN0YXRlIGlmIHRoZSBtb2RlbCBoYXNcbiAgICogYWxyZWFkeSBiZWVuIHRvdWNoZWQgYnkgdGhlIHVzZXIuXG4gICAqL1xuICB0aGlzLiRzZXRVbnRvdWNoZWQgPSBmdW5jdGlvbigpIHtcbiAgICBjdHJsLiR0b3VjaGVkID0gZmFsc2U7XG4gICAgY3RybC4kdW50b3VjaGVkID0gdHJ1ZTtcbiAgICAkYW5pbWF0ZS5zZXRDbGFzcygkZWxlbWVudCwgVU5UT1VDSEVEX0NMQVNTLCBUT1VDSEVEX0NMQVNTKTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRzZXRUb3VjaGVkXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIHRoZSBjb250cm9sIHRvIGl0cyB0b3VjaGVkIHN0YXRlLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHRvIHJlbW92ZSB0aGUgYG5nLXVudG91Y2hlZGAgY2xhc3MgYW5kIHNldCB0aGUgY29udHJvbCB0byBpdHNcbiAgICogdG91Y2hlZCBzdGF0ZSAoYG5nLXRvdWNoZWRgIGNsYXNzKS4gQSBtb2RlbCBpcyBjb25zaWRlcmVkIHRvIGJlIHRvdWNoZWQgd2hlbiB0aGUgdXNlciBoYXNcbiAgICogZmlyc3QgZm9jdXNlZCB0aGUgY29udHJvbCBlbGVtZW50IGFuZCB0aGVuIHNoaWZ0ZWQgZm9jdXMgYXdheSBmcm9tIHRoZSBjb250cm9sIChibHVyIGV2ZW50KS5cbiAgICovXG4gIHRoaXMuJHNldFRvdWNoZWQgPSBmdW5jdGlvbigpIHtcbiAgICBjdHJsLiR0b3VjaGVkID0gdHJ1ZTtcbiAgICBjdHJsLiR1bnRvdWNoZWQgPSBmYWxzZTtcbiAgICAkYW5pbWF0ZS5zZXRDbGFzcygkZWxlbWVudCwgVE9VQ0hFRF9DTEFTUywgVU5UT1VDSEVEX0NMQVNTKTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRyb2xsYmFja1ZpZXdWYWx1ZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ2FuY2VsIGFuIHVwZGF0ZSBhbmQgcmVzZXQgdGhlIGlucHV0IGVsZW1lbnQncyB2YWx1ZSB0byBwcmV2ZW50IGFuIHVwZGF0ZSB0byB0aGUgYCRtb2RlbFZhbHVlYCxcbiAgICogd2hpY2ggbWF5IGJlIGNhdXNlZCBieSBhIHBlbmRpbmcgZGVib3VuY2VkIGV2ZW50IG9yIGJlY2F1c2UgdGhlIGlucHV0IGlzIHdhaXRpbmcgZm9yIGEgc29tZVxuICAgKiBmdXR1cmUgZXZlbnQuXG4gICAqXG4gICAqIElmIHlvdSBoYXZlIGFuIGlucHV0IHRoYXQgdXNlcyBgbmctbW9kZWwtb3B0aW9uc2AgdG8gc2V0IHVwIGRlYm91bmNlZCBldmVudHMgb3IgZXZlbnRzIHN1Y2hcbiAgICogYXMgYmx1ciB5b3UgY2FuIGhhdmUgYSBzaXR1YXRpb24gd2hlcmUgdGhlcmUgaXMgYSBwZXJpb2Qgd2hlbiB0aGUgYCR2aWV3VmFsdWVgXG4gICAqIGlzIG91dCBvZiBzeW5jaCB3aXRoIHRoZSBuZ01vZGVsJ3MgYCRtb2RlbFZhbHVlYC5cbiAgICpcbiAgICogSW4gdGhpcyBjYXNlLCB5b3UgY2FuIHJ1biBpbnRvIGRpZmZpY3VsdGllcyBpZiB5b3UgdHJ5IHRvIHVwZGF0ZSB0aGUgbmdNb2RlbCdzIGAkbW9kZWxWYWx1ZWBcbiAgICogcHJvZ3JhbW1hdGljYWxseSBiZWZvcmUgdGhlc2UgZGVib3VuY2VkL2Z1dHVyZSBldmVudHMgaGF2ZSByZXNvbHZlZC9vY2N1cnJlZCwgYmVjYXVzZSBBbmd1bGFyJ3NcbiAgICogZGlydHkgY2hlY2tpbmcgbWVjaGFuaXNtIGlzIG5vdCBhYmxlIHRvIHRlbGwgd2hldGhlciB0aGUgbW9kZWwgaGFzIGFjdHVhbGx5IGNoYW5nZWQgb3Igbm90LlxuICAgKlxuICAgKiBUaGUgYCRyb2xsYmFja1ZpZXdWYWx1ZSgpYCBtZXRob2Qgc2hvdWxkIGJlIGNhbGxlZCBiZWZvcmUgcHJvZ3JhbW1hdGljYWxseSBjaGFuZ2luZyB0aGUgbW9kZWwgb2YgYW5cbiAgICogaW5wdXQgd2hpY2ggbWF5IGhhdmUgc3VjaCBldmVudHMgcGVuZGluZy4gVGhpcyBpcyBpbXBvcnRhbnQgaW4gb3JkZXIgdG8gbWFrZSBzdXJlIHRoYXQgdGhlXG4gICAqIGlucHV0IGZpZWxkIHdpbGwgYmUgdXBkYXRlZCB3aXRoIHRoZSBuZXcgbW9kZWwgdmFsdWUgYW5kIGFueSBwZW5kaW5nIG9wZXJhdGlvbnMgYXJlIGNhbmNlbGxlZC5cbiAgICpcbiAgICogPGV4YW1wbGUgbmFtZT1cIm5nLW1vZGVsLWNhbmNlbC11cGRhdGVcIiBtb2R1bGU9XCJjYW5jZWwtdXBkYXRlLWV4YW1wbGVcIj5cbiAgICogICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gICAqICAgICBhbmd1bGFyLm1vZHVsZSgnY2FuY2VsLXVwZGF0ZS1leGFtcGxlJywgW10pXG4gICAqXG4gICAqICAgICAuY29udHJvbGxlcignQ2FuY2VsVXBkYXRlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAqICAgICAgICRzY29wZS5yZXNldFdpdGhDYW5jZWwgPSBmdW5jdGlvbihlKSB7XG4gICAqICAgICAgICAgaWYgKGUua2V5Q29kZSA9PSAyNykge1xuICAgKiAgICAgICAgICAgJHNjb3BlLm15Rm9ybS5teUlucHV0MS4kcm9sbGJhY2tWaWV3VmFsdWUoKTtcbiAgICogICAgICAgICAgICRzY29wZS5teVZhbHVlID0gJyc7XG4gICAqICAgICAgICAgfVxuICAgKiAgICAgICB9O1xuICAgKiAgICAgICAkc2NvcGUucmVzZXRXaXRob3V0Q2FuY2VsID0gZnVuY3Rpb24oZSkge1xuICAgKiAgICAgICAgIGlmIChlLmtleUNvZGUgPT0gMjcpIHtcbiAgICogICAgICAgICAgICRzY29wZS5teVZhbHVlID0gJyc7XG4gICAqICAgICAgICAgfVxuICAgKiAgICAgICB9O1xuICAgKiAgICAgfV0pO1xuICAgKiAgIDwvZmlsZT5cbiAgICogICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgKiAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiQ2FuY2VsVXBkYXRlQ29udHJvbGxlclwiPlxuICAgKiAgICAgICA8cD5UcnkgdHlwaW5nIHNvbWV0aGluZyBpbiBlYWNoIGlucHV0LiAgU2VlIHRoYXQgdGhlIG1vZGVsIG9ubHkgdXBkYXRlcyB3aGVuIHlvdVxuICAgKiAgICAgICAgICBibHVyIG9mZiB0aGUgaW5wdXQuXG4gICAqICAgICAgICA8L3A+XG4gICAqICAgICAgICA8cD5Ob3cgc2VlIHdoYXQgaGFwcGVucyBpZiB5b3Ugc3RhcnQgdHlwaW5nIHRoZW4gcHJlc3MgdGhlIEVzY2FwZSBrZXk8L3A+XG4gICAqXG4gICAqICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1tb2RlbC1vcHRpb25zPVwieyB1cGRhdGVPbjogJ2JsdXInIH1cIj5cbiAgICogICAgICAgICA8cD5XaXRoICRyb2xsYmFja1ZpZXdWYWx1ZSgpPC9wPlxuICAgKiAgICAgICAgIDxpbnB1dCBuYW1lPVwibXlJbnB1dDFcIiBuZy1tb2RlbD1cIm15VmFsdWVcIiBuZy1rZXlkb3duPVwicmVzZXRXaXRoQ2FuY2VsKCRldmVudClcIj48YnIvPlxuICAgKiAgICAgICAgIG15VmFsdWU6IFwie3sgbXlWYWx1ZSB9fVwiXG4gICAqXG4gICAqICAgICAgICAgPHA+V2l0aG91dCAkcm9sbGJhY2tWaWV3VmFsdWUoKTwvcD5cbiAgICogICAgICAgICA8aW5wdXQgbmFtZT1cIm15SW5wdXQyXCIgbmctbW9kZWw9XCJteVZhbHVlXCIgbmcta2V5ZG93bj1cInJlc2V0V2l0aG91dENhbmNlbCgkZXZlbnQpXCI+PGJyLz5cbiAgICogICAgICAgICBteVZhbHVlOiBcInt7IG15VmFsdWUgfX1cIlxuICAgKiAgICAgICA8L2Zvcm0+XG4gICAqICAgICA8L2Rpdj5cbiAgICogICA8L2ZpbGU+XG4gICAqIDwvZXhhbXBsZT5cbiAgICovXG4gIHRoaXMuJHJvbGxiYWNrVmlld1ZhbHVlID0gZnVuY3Rpb24oKSB7XG4gICAgJHRpbWVvdXQuY2FuY2VsKHBlbmRpbmdEZWJvdW5jZSk7XG4gICAgY3RybC4kdmlld1ZhbHVlID0gY3RybC4kJGxhc3RDb21taXR0ZWRWaWV3VmFsdWU7XG4gICAgY3RybC4kcmVuZGVyKCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmFsaWRhdGVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJ1bnMgZWFjaCBvZiB0aGUgcmVnaXN0ZXJlZCB2YWxpZGF0b3JzIChmaXJzdCBzeW5jaHJvbm91cyB2YWxpZGF0b3JzIGFuZCB0aGVuXG4gICAqIGFzeW5jaHJvbm91cyB2YWxpZGF0b3JzKS5cbiAgICogSWYgdGhlIHZhbGlkaXR5IGNoYW5nZXMgdG8gaW52YWxpZCwgdGhlIG1vZGVsIHdpbGwgYmUgc2V0IHRvIGB1bmRlZmluZWRgLFxuICAgKiB1bmxlc3Mge0BsaW5rIG5nTW9kZWxPcHRpb25zIGBuZ01vZGVsT3B0aW9ucy5hbGxvd0ludmFsaWRgfSBpcyBgdHJ1ZWAuXG4gICAqIElmIHRoZSB2YWxpZGl0eSBjaGFuZ2VzIHRvIHZhbGlkLCBpdCB3aWxsIHNldCB0aGUgbW9kZWwgdG8gdGhlIGxhc3QgYXZhaWxhYmxlIHZhbGlkXG4gICAqIG1vZGVsVmFsdWUsIGkuZS4gZWl0aGVyIHRoZSBsYXN0IHBhcnNlZCB2YWx1ZSBvciB0aGUgbGFzdCB2YWx1ZSBzZXQgZnJvbSB0aGUgc2NvcGUuXG4gICAqL1xuICB0aGlzLiR2YWxpZGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIGlnbm9yZSAkdmFsaWRhdGUgYmVmb3JlIG1vZGVsIGlzIGluaXRpYWxpemVkXG4gICAgaWYgKGlzTnVtYmVyKGN0cmwuJG1vZGVsVmFsdWUpICYmIGlzTmFOKGN0cmwuJG1vZGVsVmFsdWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHZpZXdWYWx1ZSA9IGN0cmwuJCRsYXN0Q29tbWl0dGVkVmlld1ZhbHVlO1xuICAgIC8vIE5vdGU6IHdlIHVzZSB0aGUgJCRyYXdNb2RlbFZhbHVlIGFzICRtb2RlbFZhbHVlIG1pZ2h0IGhhdmUgYmVlblxuICAgIC8vIHNldCB0byB1bmRlZmluZWQgZHVyaW5nIGEgdmlldyAtPiBtb2RlbCB1cGRhdGUgdGhhdCBmb3VuZCB2YWxpZGF0aW9uXG4gICAgLy8gZXJyb3JzLiBXZSBjYW4ndCBwYXJzZSB0aGUgdmlldyBoZXJlLCBzaW5jZSB0aGF0IGNvdWxkIGNoYW5nZVxuICAgIC8vIHRoZSBtb2RlbCBhbHRob3VnaCBuZWl0aGVyIHZpZXdWYWx1ZSBub3IgdGhlIG1vZGVsIG9uIHRoZSBzY29wZSBjaGFuZ2VkXG4gICAgdmFyIG1vZGVsVmFsdWUgPSBjdHJsLiQkcmF3TW9kZWxWYWx1ZTtcblxuICAgIC8vIENoZWNrIGlmIHRoZSB0aGVyZSdzIGEgcGFyc2UgZXJyb3IsIHNvIHdlIGRvbid0IHVuc2V0IGl0IGFjY2lkZW50aWFsbHlcbiAgICB2YXIgcGFyc2VyTmFtZSA9IGN0cmwuJCRwYXJzZXJOYW1lIHx8ICdwYXJzZSc7XG4gICAgdmFyIHBhcnNlclZhbGlkID0gY3RybC4kZXJyb3JbcGFyc2VyTmFtZV0gPyBmYWxzZSA6IHVuZGVmaW5lZDtcblxuICAgIHZhciBwcmV2VmFsaWQgPSBjdHJsLiR2YWxpZDtcbiAgICB2YXIgcHJldk1vZGVsVmFsdWUgPSBjdHJsLiRtb2RlbFZhbHVlO1xuXG4gICAgdmFyIGFsbG93SW52YWxpZCA9IGN0cmwuJG9wdGlvbnMgJiYgY3RybC4kb3B0aW9ucy5hbGxvd0ludmFsaWQ7XG5cbiAgICBjdHJsLiQkcnVuVmFsaWRhdG9ycyhwYXJzZXJWYWxpZCwgbW9kZWxWYWx1ZSwgdmlld1ZhbHVlLCBmdW5jdGlvbihhbGxWYWxpZCkge1xuICAgICAgLy8gSWYgdGhlcmUgd2FzIG5vIGNoYW5nZSBpbiB2YWxpZGl0eSwgZG9uJ3QgdXBkYXRlIHRoZSBtb2RlbFxuICAgICAgLy8gVGhpcyBwcmV2ZW50cyBjaGFuZ2luZyBhbiBpbnZhbGlkIG1vZGVsVmFsdWUgdG8gdW5kZWZpbmVkXG4gICAgICBpZiAoIWFsbG93SW52YWxpZCAmJiBwcmV2VmFsaWQgIT09IGFsbFZhbGlkKSB7XG4gICAgICAgIC8vIE5vdGU6IERvbid0IGNoZWNrIGN0cmwuJHZhbGlkIGhlcmUsIGFzIHdlIGNvdWxkIGhhdmVcbiAgICAgICAgLy8gZXh0ZXJuYWwgdmFsaWRhdG9ycyAoZS5nLiBjYWxjdWxhdGVkIG9uIHRoZSBzZXJ2ZXIpLFxuICAgICAgICAvLyB0aGF0IGp1c3QgY2FsbCAkc2V0VmFsaWRpdHkgYW5kIG5lZWQgdGhlIG1vZGVsIHZhbHVlXG4gICAgICAgIC8vIHRvIGNhbGN1bGF0ZSB0aGVpciB2YWxpZGl0eS5cbiAgICAgICAgY3RybC4kbW9kZWxWYWx1ZSA9IGFsbFZhbGlkID8gbW9kZWxWYWx1ZSA6IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAoY3RybC4kbW9kZWxWYWx1ZSAhPT0gcHJldk1vZGVsVmFsdWUpIHtcbiAgICAgICAgICBjdHJsLiQkd3JpdGVNb2RlbFRvU2NvcGUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gIH07XG5cbiAgdGhpcy4kJHJ1blZhbGlkYXRvcnMgPSBmdW5jdGlvbihwYXJzZVZhbGlkLCBtb2RlbFZhbHVlLCB2aWV3VmFsdWUsIGRvbmVDYWxsYmFjaykge1xuICAgIGN1cnJlbnRWYWxpZGF0aW9uUnVuSWQrKztcbiAgICB2YXIgbG9jYWxWYWxpZGF0aW9uUnVuSWQgPSBjdXJyZW50VmFsaWRhdGlvblJ1bklkO1xuXG4gICAgLy8gY2hlY2sgcGFyc2VyIGVycm9yXG4gICAgaWYgKCFwcm9jZXNzUGFyc2VFcnJvcnMocGFyc2VWYWxpZCkpIHtcbiAgICAgIHZhbGlkYXRpb25Eb25lKGZhbHNlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFwcm9jZXNzU3luY1ZhbGlkYXRvcnMoKSkge1xuICAgICAgdmFsaWRhdGlvbkRvbmUoZmFsc2UpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBwcm9jZXNzQXN5bmNWYWxpZGF0b3JzKCk7XG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzUGFyc2VFcnJvcnMocGFyc2VWYWxpZCkge1xuICAgICAgdmFyIGVycm9yS2V5ID0gY3RybC4kJHBhcnNlck5hbWUgfHwgJ3BhcnNlJztcbiAgICAgIGlmIChwYXJzZVZhbGlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc2V0VmFsaWRpdHkoZXJyb3JLZXksIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0VmFsaWRpdHkoZXJyb3JLZXksIHBhcnNlVmFsaWQpO1xuICAgICAgICBpZiAoIXBhcnNlVmFsaWQpIHtcbiAgICAgICAgICBmb3JFYWNoKGN0cmwuJHZhbGlkYXRvcnMsIGZ1bmN0aW9uKHYsIG5hbWUpIHtcbiAgICAgICAgICAgIHNldFZhbGlkaXR5KG5hbWUsIG51bGwpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGZvckVhY2goY3RybC4kYXN5bmNWYWxpZGF0b3JzLCBmdW5jdGlvbih2LCBuYW1lKSB7XG4gICAgICAgICAgICBzZXRWYWxpZGl0eShuYW1lLCBudWxsKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NTeW5jVmFsaWRhdG9ycygpIHtcbiAgICAgIHZhciBzeW5jVmFsaWRhdG9yc1ZhbGlkID0gdHJ1ZTtcbiAgICAgIGZvckVhY2goY3RybC4kdmFsaWRhdG9ycywgZnVuY3Rpb24odmFsaWRhdG9yLCBuYW1lKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB2YWxpZGF0b3IobW9kZWxWYWx1ZSwgdmlld1ZhbHVlKTtcbiAgICAgICAgc3luY1ZhbGlkYXRvcnNWYWxpZCA9IHN5bmNWYWxpZGF0b3JzVmFsaWQgJiYgcmVzdWx0O1xuICAgICAgICBzZXRWYWxpZGl0eShuYW1lLCByZXN1bHQpO1xuICAgICAgfSk7XG4gICAgICBpZiAoIXN5bmNWYWxpZGF0b3JzVmFsaWQpIHtcbiAgICAgICAgZm9yRWFjaChjdHJsLiRhc3luY1ZhbGlkYXRvcnMsIGZ1bmN0aW9uKHYsIG5hbWUpIHtcbiAgICAgICAgICBzZXRWYWxpZGl0eShuYW1lLCBudWxsKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NBc3luY1ZhbGlkYXRvcnMoKSB7XG4gICAgICB2YXIgdmFsaWRhdG9yUHJvbWlzZXMgPSBbXTtcbiAgICAgIHZhciBhbGxWYWxpZCA9IHRydWU7XG4gICAgICBmb3JFYWNoKGN0cmwuJGFzeW5jVmFsaWRhdG9ycywgZnVuY3Rpb24odmFsaWRhdG9yLCBuYW1lKSB7XG4gICAgICAgIHZhciBwcm9taXNlID0gdmFsaWRhdG9yKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSk7XG4gICAgICAgIGlmICghaXNQcm9taXNlTGlrZShwcm9taXNlKSkge1xuICAgICAgICAgIHRocm93ICRuZ01vZGVsTWluRXJyKFwiJGFzeW5jVmFsaWRhdG9yc1wiLFxuICAgICAgICAgICAgXCJFeHBlY3RlZCBhc3luY2hyb25vdXMgdmFsaWRhdG9yIHRvIHJldHVybiBhIHByb21pc2UgYnV0IGdvdCAnezB9JyBpbnN0ZWFkLlwiLCBwcm9taXNlKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRWYWxpZGl0eShuYW1lLCB1bmRlZmluZWQpO1xuICAgICAgICB2YWxpZGF0b3JQcm9taXNlcy5wdXNoKHByb21pc2UudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZXRWYWxpZGl0eShuYW1lLCB0cnVlKTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICBhbGxWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgIHNldFZhbGlkaXR5KG5hbWUsIGZhbHNlKTtcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgICBpZiAoIXZhbGlkYXRvclByb21pc2VzLmxlbmd0aCkge1xuICAgICAgICB2YWxpZGF0aW9uRG9uZSh0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRxLmFsbCh2YWxpZGF0b3JQcm9taXNlcykudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YWxpZGF0aW9uRG9uZShhbGxWYWxpZCk7XG4gICAgICAgIH0sIG5vb3ApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFZhbGlkaXR5KG5hbWUsIGlzVmFsaWQpIHtcbiAgICAgIGlmIChsb2NhbFZhbGlkYXRpb25SdW5JZCA9PT0gY3VycmVudFZhbGlkYXRpb25SdW5JZCkge1xuICAgICAgICBjdHJsLiRzZXRWYWxpZGl0eShuYW1lLCBpc1ZhbGlkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB2YWxpZGF0aW9uRG9uZShhbGxWYWxpZCkge1xuICAgICAgaWYgKGxvY2FsVmFsaWRhdGlvblJ1bklkID09PSBjdXJyZW50VmFsaWRhdGlvblJ1bklkKSB7XG5cbiAgICAgICAgZG9uZUNhbGxiYWNrKGFsbFZhbGlkKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkY29tbWl0Vmlld1ZhbHVlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDb21taXQgYSBwZW5kaW5nIHVwZGF0ZSB0byB0aGUgYCRtb2RlbFZhbHVlYC5cbiAgICpcbiAgICogVXBkYXRlcyBtYXkgYmUgcGVuZGluZyBieSBhIGRlYm91bmNlZCBldmVudCBvciBiZWNhdXNlIHRoZSBpbnB1dCBpcyB3YWl0aW5nIGZvciBhIHNvbWUgZnV0dXJlXG4gICAqIGV2ZW50IGRlZmluZWQgaW4gYG5nLW1vZGVsLW9wdGlvbnNgLiB0aGlzIG1ldGhvZCBpcyByYXJlbHkgbmVlZGVkIGFzIGBOZ01vZGVsQ29udHJvbGxlcmBcbiAgICogdXN1YWxseSBoYW5kbGVzIGNhbGxpbmcgdGhpcyBpbiByZXNwb25zZSB0byBpbnB1dCBldmVudHMuXG4gICAqL1xuICB0aGlzLiRjb21taXRWaWV3VmFsdWUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmlld1ZhbHVlID0gY3RybC4kdmlld1ZhbHVlO1xuXG4gICAgJHRpbWVvdXQuY2FuY2VsKHBlbmRpbmdEZWJvdW5jZSk7XG5cbiAgICAvLyBJZiB0aGUgdmlldyB2YWx1ZSBoYXMgbm90IGNoYW5nZWQgdGhlbiB3ZSBzaG91bGQganVzdCBleGl0LCBleGNlcHQgaW4gdGhlIGNhc2Ugd2hlcmUgdGhlcmUgaXNcbiAgICAvLyBhIG5hdGl2ZSB2YWxpZGF0b3Igb24gdGhlIGVsZW1lbnQuIEluIHRoaXMgY2FzZSB0aGUgdmFsaWRhdGlvbiBzdGF0ZSBtYXkgaGF2ZSBjaGFuZ2VkIGV2ZW4gdGhvdWdoXG4gICAgLy8gdGhlIHZpZXdWYWx1ZSBoYXMgc3RheWVkIGVtcHR5LlxuICAgIGlmIChjdHJsLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZSA9PT0gdmlld1ZhbHVlICYmICh2aWV3VmFsdWUgIT09ICcnIHx8ICFjdHJsLiQkaGFzTmF0aXZlVmFsaWRhdG9ycykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY3RybC4kJGxhc3RDb21taXR0ZWRWaWV3VmFsdWUgPSB2aWV3VmFsdWU7XG5cbiAgICAvLyBjaGFuZ2UgdG8gZGlydHlcbiAgICBpZiAoY3RybC4kcHJpc3RpbmUpIHtcbiAgICAgIHRoaXMuJHNldERpcnR5KCk7XG4gICAgfVxuICAgIHRoaXMuJCRwYXJzZUFuZFZhbGlkYXRlKCk7XG4gIH07XG5cbiAgdGhpcy4kJHBhcnNlQW5kVmFsaWRhdGUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmlld1ZhbHVlID0gY3RybC4kJGxhc3RDb21taXR0ZWRWaWV3VmFsdWU7XG4gICAgdmFyIG1vZGVsVmFsdWUgPSB2aWV3VmFsdWU7XG4gICAgdmFyIHBhcnNlclZhbGlkID0gaXNVbmRlZmluZWQobW9kZWxWYWx1ZSkgPyB1bmRlZmluZWQgOiB0cnVlO1xuXG4gICAgaWYgKHBhcnNlclZhbGlkKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGN0cmwuJHBhcnNlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbW9kZWxWYWx1ZSA9IGN0cmwuJHBhcnNlcnNbaV0obW9kZWxWYWx1ZSk7XG4gICAgICAgIGlmIChpc1VuZGVmaW5lZChtb2RlbFZhbHVlKSkge1xuICAgICAgICAgIHBhcnNlclZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzTnVtYmVyKGN0cmwuJG1vZGVsVmFsdWUpICYmIGlzTmFOKGN0cmwuJG1vZGVsVmFsdWUpKSB7XG4gICAgICAvLyBjdHJsLiRtb2RlbFZhbHVlIGhhcyBub3QgYmVlbiB0b3VjaGVkIHlldC4uLlxuICAgICAgY3RybC4kbW9kZWxWYWx1ZSA9IG5nTW9kZWxHZXQoJHNjb3BlKTtcbiAgICB9XG4gICAgdmFyIHByZXZNb2RlbFZhbHVlID0gY3RybC4kbW9kZWxWYWx1ZTtcbiAgICB2YXIgYWxsb3dJbnZhbGlkID0gY3RybC4kb3B0aW9ucyAmJiBjdHJsLiRvcHRpb25zLmFsbG93SW52YWxpZDtcbiAgICBjdHJsLiQkcmF3TW9kZWxWYWx1ZSA9IG1vZGVsVmFsdWU7XG5cbiAgICBpZiAoYWxsb3dJbnZhbGlkKSB7XG4gICAgICBjdHJsLiRtb2RlbFZhbHVlID0gbW9kZWxWYWx1ZTtcbiAgICAgIHdyaXRlVG9Nb2RlbElmTmVlZGVkKCk7XG4gICAgfVxuXG4gICAgLy8gUGFzcyB0aGUgJCRsYXN0Q29tbWl0dGVkVmlld1ZhbHVlIGhlcmUsIGJlY2F1c2UgdGhlIGNhY2hlZCB2aWV3VmFsdWUgbWlnaHQgYmUgb3V0IG9mIGRhdGUuXG4gICAgLy8gVGhpcyBjYW4gaGFwcGVuIGlmIGUuZy4gJHNldFZpZXdWYWx1ZSBpcyBjYWxsZWQgZnJvbSBpbnNpZGUgYSBwYXJzZXJcbiAgICBjdHJsLiQkcnVuVmFsaWRhdG9ycyhwYXJzZXJWYWxpZCwgbW9kZWxWYWx1ZSwgY3RybC4kJGxhc3RDb21taXR0ZWRWaWV3VmFsdWUsIGZ1bmN0aW9uKGFsbFZhbGlkKSB7XG4gICAgICBpZiAoIWFsbG93SW52YWxpZCkge1xuICAgICAgICAvLyBOb3RlOiBEb24ndCBjaGVjayBjdHJsLiR2YWxpZCBoZXJlLCBhcyB3ZSBjb3VsZCBoYXZlXG4gICAgICAgIC8vIGV4dGVybmFsIHZhbGlkYXRvcnMgKGUuZy4gY2FsY3VsYXRlZCBvbiB0aGUgc2VydmVyKSxcbiAgICAgICAgLy8gdGhhdCBqdXN0IGNhbGwgJHNldFZhbGlkaXR5IGFuZCBuZWVkIHRoZSBtb2RlbCB2YWx1ZVxuICAgICAgICAvLyB0byBjYWxjdWxhdGUgdGhlaXIgdmFsaWRpdHkuXG4gICAgICAgIGN0cmwuJG1vZGVsVmFsdWUgPSBhbGxWYWxpZCA/IG1vZGVsVmFsdWUgOiB1bmRlZmluZWQ7XG4gICAgICAgIHdyaXRlVG9Nb2RlbElmTmVlZGVkKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiB3cml0ZVRvTW9kZWxJZk5lZWRlZCgpIHtcbiAgICAgIGlmIChjdHJsLiRtb2RlbFZhbHVlICE9PSBwcmV2TW9kZWxWYWx1ZSkge1xuICAgICAgICBjdHJsLiQkd3JpdGVNb2RlbFRvU2NvcGUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdGhpcy4kJHdyaXRlTW9kZWxUb1Njb3BlID0gZnVuY3Rpb24oKSB7XG4gICAgbmdNb2RlbFNldCgkc2NvcGUsIGN0cmwuJG1vZGVsVmFsdWUpO1xuICAgIGZvckVhY2goY3RybC4kdmlld0NoYW5nZUxpc3RlbmVycywgZnVuY3Rpb24obGlzdGVuZXIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxpc3RlbmVyKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFZpZXdWYWx1ZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVXBkYXRlIHRoZSB2aWV3IHZhbHVlLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIHdoZW4gYW4gaW5wdXQgZGlyZWN0aXZlIHdhbnQgdG8gY2hhbmdlIHRoZSB2aWV3IHZhbHVlOyB0eXBpY2FsbHksXG4gICAqIHRoaXMgaXMgZG9uZSBmcm9tIHdpdGhpbiBhIERPTSBldmVudCBoYW5kbGVyLlxuICAgKlxuICAgKiBGb3IgZXhhbXBsZSB7QGxpbmsgbmcuZGlyZWN0aXZlOmlucHV0IGlucHV0fSBjYWxscyBpdCB3aGVuIHRoZSB2YWx1ZSBvZiB0aGUgaW5wdXQgY2hhbmdlcyBhbmRcbiAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpzZWxlY3Qgc2VsZWN0fSBjYWxscyBpdCB3aGVuIGFuIG9wdGlvbiBpcyBzZWxlY3RlZC5cbiAgICpcbiAgICogSWYgdGhlIG5ldyBgdmFsdWVgIGlzIGFuIG9iamVjdCAocmF0aGVyIHRoYW4gYSBzdHJpbmcgb3IgYSBudW1iZXIpLCB3ZSBzaG91bGQgbWFrZSBhIGNvcHkgb2YgdGhlXG4gICAqIG9iamVjdCBiZWZvcmUgcGFzc2luZyBpdCB0byBgJHNldFZpZXdWYWx1ZWAuICBUaGlzIGlzIGJlY2F1c2UgYG5nTW9kZWxgIGRvZXMgbm90IHBlcmZvcm0gYSBkZWVwXG4gICAqIHdhdGNoIG9mIG9iamVjdHMsIGl0IG9ubHkgbG9va3MgZm9yIGEgY2hhbmdlIG9mIGlkZW50aXR5LiBJZiB5b3Ugb25seSBjaGFuZ2UgdGhlIHByb3BlcnR5IG9mXG4gICAqIHRoZSBvYmplY3QgdGhlbiBuZ01vZGVsIHdpbGwgbm90IHJlYWxpc2UgdGhhdCB0aGUgb2JqZWN0IGhhcyBjaGFuZ2VkIGFuZCB3aWxsIG5vdCBpbnZva2UgdGhlXG4gICAqIGAkcGFyc2Vyc2AgYW5kIGAkdmFsaWRhdG9yc2AgcGlwZWxpbmVzLlxuICAgKlxuICAgKiBGb3IgdGhpcyByZWFzb24sIHlvdSBzaG91bGQgbm90IGNoYW5nZSBwcm9wZXJ0aWVzIG9mIHRoZSBjb3B5IG9uY2UgaXQgaGFzIGJlZW4gcGFzc2VkIHRvXG4gICAqIGAkc2V0Vmlld1ZhbHVlYC4gT3RoZXJ3aXNlIHlvdSBtYXkgY2F1c2UgdGhlIG1vZGVsIHZhbHVlIG9uIHRoZSBzY29wZSB0byBjaGFuZ2UgaW5jb3JyZWN0bHkuXG4gICAqXG4gICAqIFdoZW4gdGhpcyBtZXRob2QgaXMgY2FsbGVkLCB0aGUgbmV3IGB2YWx1ZWAgd2lsbCBiZSBzdGFnZWQgZm9yIGNvbW1pdHRpbmcgdGhyb3VnaCB0aGUgYCRwYXJzZXJzYFxuICAgKiBhbmQgYCR2YWxpZGF0b3JzYCBwaXBlbGluZXMuIElmIHRoZXJlIGFyZSBubyBzcGVjaWFsIHtAbGluayBuZ01vZGVsT3B0aW9uc30gc3BlY2lmaWVkIHRoZW4gdGhlIHN0YWdlZFxuICAgKiB2YWx1ZSBzZW50IGRpcmVjdGx5IGZvciBwcm9jZXNzaW5nLCBmaW5hbGx5IHRvIGJlIGFwcGxpZWQgdG8gYCRtb2RlbFZhbHVlYCBhbmQgdGhlbiB0aGVcbiAgICogKipleHByZXNzaW9uKiogc3BlY2lmaWVkIGluIHRoZSBgbmctbW9kZWxgIGF0dHJpYnV0ZS5cbiAgICpcbiAgICogTGFzdGx5LCBhbGwgdGhlIHJlZ2lzdGVyZWQgY2hhbmdlIGxpc3RlbmVycywgaW4gdGhlIGAkdmlld0NoYW5nZUxpc3RlbmVyc2AgbGlzdCwgYXJlIGNhbGxlZC5cbiAgICpcbiAgICogSW4gY2FzZSB0aGUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsT3B0aW9ucyBuZ01vZGVsT3B0aW9uc30gZGlyZWN0aXZlIGlzIHVzZWQgd2l0aCBgdXBkYXRlT25gXG4gICAqIGFuZCB0aGUgYGRlZmF1bHRgIHRyaWdnZXIgaXMgbm90IGxpc3RlZCwgYWxsIHRob3NlIGFjdGlvbnMgd2lsbCByZW1haW4gcGVuZGluZyB1bnRpbCBvbmUgb2YgdGhlXG4gICAqIGB1cGRhdGVPbmAgZXZlbnRzIGlzIHRyaWdnZXJlZCBvbiB0aGUgRE9NIGVsZW1lbnQuXG4gICAqIEFsbCB0aGVzZSBhY3Rpb25zIHdpbGwgYmUgZGVib3VuY2VkIGlmIHRoZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTW9kZWxPcHRpb25zIG5nTW9kZWxPcHRpb25zfVxuICAgKiBkaXJlY3RpdmUgaXMgdXNlZCB3aXRoIGEgY3VzdG9tIGRlYm91bmNlIGZvciB0aGlzIHBhcnRpY3VsYXIgZXZlbnQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCBjYWxsaW5nIHRoaXMgZnVuY3Rpb24gZG9lcyBub3QgdHJpZ2dlciBhIGAkZGlnZXN0YC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIFZhbHVlIGZyb20gdGhlIHZpZXcuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0cmlnZ2VyIEV2ZW50IHRoYXQgdHJpZ2dlcmVkIHRoZSB1cGRhdGUuXG4gICAqL1xuICB0aGlzLiRzZXRWaWV3VmFsdWUgPSBmdW5jdGlvbih2YWx1ZSwgdHJpZ2dlcikge1xuICAgIGN0cmwuJHZpZXdWYWx1ZSA9IHZhbHVlO1xuICAgIGlmICghY3RybC4kb3B0aW9ucyB8fCBjdHJsLiRvcHRpb25zLnVwZGF0ZU9uRGVmYXVsdCkge1xuICAgICAgY3RybC4kJGRlYm91bmNlVmlld1ZhbHVlQ29tbWl0KHRyaWdnZXIpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLiQkZGVib3VuY2VWaWV3VmFsdWVDb21taXQgPSBmdW5jdGlvbih0cmlnZ2VyKSB7XG4gICAgdmFyIGRlYm91bmNlRGVsYXkgPSAwLFxuICAgICAgICBvcHRpb25zID0gY3RybC4kb3B0aW9ucyxcbiAgICAgICAgZGVib3VuY2U7XG5cbiAgICBpZiAob3B0aW9ucyAmJiBpc0RlZmluZWQob3B0aW9ucy5kZWJvdW5jZSkpIHtcbiAgICAgIGRlYm91bmNlID0gb3B0aW9ucy5kZWJvdW5jZTtcbiAgICAgIGlmIChpc051bWJlcihkZWJvdW5jZSkpIHtcbiAgICAgICAgZGVib3VuY2VEZWxheSA9IGRlYm91bmNlO1xuICAgICAgfSBlbHNlIGlmIChpc051bWJlcihkZWJvdW5jZVt0cmlnZ2VyXSkpIHtcbiAgICAgICAgZGVib3VuY2VEZWxheSA9IGRlYm91bmNlW3RyaWdnZXJdO1xuICAgICAgfSBlbHNlIGlmIChpc051bWJlcihkZWJvdW5jZVsnZGVmYXVsdCddKSkge1xuICAgICAgICBkZWJvdW5jZURlbGF5ID0gZGVib3VuY2VbJ2RlZmF1bHQnXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAkdGltZW91dC5jYW5jZWwocGVuZGluZ0RlYm91bmNlKTtcbiAgICBpZiAoZGVib3VuY2VEZWxheSkge1xuICAgICAgcGVuZGluZ0RlYm91bmNlID0gJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIGN0cmwuJGNvbW1pdFZpZXdWYWx1ZSgpO1xuICAgICAgfSwgZGVib3VuY2VEZWxheSk7XG4gICAgfSBlbHNlIGlmICgkcm9vdFNjb3BlLiQkcGhhc2UpIHtcbiAgICAgIGN0cmwuJGNvbW1pdFZpZXdWYWx1ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICBjdHJsLiRjb21taXRWaWV3VmFsdWUoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICAvLyBtb2RlbCAtPiB2YWx1ZVxuICAvLyBOb3RlOiB3ZSBjYW5ub3QgdXNlIGEgbm9ybWFsIHNjb3BlLiR3YXRjaCBhcyB3ZSB3YW50IHRvIGRldGVjdCB0aGUgZm9sbG93aW5nOlxuICAvLyAxLiBzY29wZSB2YWx1ZSBpcyAnYSdcbiAgLy8gMi4gdXNlciBlbnRlcnMgJ2InXG4gIC8vIDMuIG5nLWNoYW5nZSBraWNrcyBpbiBhbmQgcmV2ZXJ0cyBzY29wZSB2YWx1ZSB0byAnYSdcbiAgLy8gICAgLT4gc2NvcGUgdmFsdWUgZGlkIG5vdCBjaGFuZ2Ugc2luY2UgdGhlIGxhc3QgZGlnZXN0IGFzXG4gIC8vICAgICAgIG5nLWNoYW5nZSBleGVjdXRlcyBpbiBhcHBseSBwaGFzZVxuICAvLyA0LiB2aWV3IHNob3VsZCBiZSBjaGFuZ2VkIGJhY2sgdG8gJ2EnXG4gICRzY29wZS4kd2F0Y2goZnVuY3Rpb24gbmdNb2RlbFdhdGNoKCkge1xuICAgIHZhciBtb2RlbFZhbHVlID0gbmdNb2RlbEdldCgkc2NvcGUpO1xuXG4gICAgLy8gaWYgc2NvcGUgbW9kZWwgdmFsdWUgYW5kIG5nTW9kZWwgdmFsdWUgYXJlIG91dCBvZiBzeW5jXG4gICAgLy8gVE9ETyhwZXJmKTogd2h5IG5vdCBtb3ZlIHRoaXMgdG8gdGhlIGFjdGlvbiBmbj9cbiAgICBpZiAobW9kZWxWYWx1ZSAhPT0gY3RybC4kbW9kZWxWYWx1ZSkge1xuICAgICAgY3RybC4kbW9kZWxWYWx1ZSA9IGN0cmwuJCRyYXdNb2RlbFZhbHVlID0gbW9kZWxWYWx1ZTtcblxuICAgICAgdmFyIGZvcm1hdHRlcnMgPSBjdHJsLiRmb3JtYXR0ZXJzLFxuICAgICAgICAgIGlkeCA9IGZvcm1hdHRlcnMubGVuZ3RoO1xuXG4gICAgICB2YXIgdmlld1ZhbHVlID0gbW9kZWxWYWx1ZTtcbiAgICAgIHdoaWxlIChpZHgtLSkge1xuICAgICAgICB2aWV3VmFsdWUgPSBmb3JtYXR0ZXJzW2lkeF0odmlld1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChjdHJsLiR2aWV3VmFsdWUgIT09IHZpZXdWYWx1ZSkge1xuICAgICAgICBjdHJsLiR2aWV3VmFsdWUgPSBjdHJsLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZSA9IHZpZXdWYWx1ZTtcbiAgICAgICAgY3RybC4kcmVuZGVyKCk7XG5cbiAgICAgICAgY3RybC4kJHJ1blZhbGlkYXRvcnModW5kZWZpbmVkLCBtb2RlbFZhbHVlLCB2aWV3VmFsdWUsIG5vb3ApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtb2RlbFZhbHVlO1xuICB9KTtcbn1dO1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdNb2RlbFxuICpcbiAqIEBlbGVtZW50IGlucHV0XG4gKiBAcHJpb3JpdHkgMVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ01vZGVsYCBkaXJlY3RpdmUgYmluZHMgYW4gYGlucHV0YCxgc2VsZWN0YCwgYHRleHRhcmVhYCAob3IgY3VzdG9tIGZvcm0gY29udHJvbCkgdG8gYVxuICogcHJvcGVydHkgb24gdGhlIHNjb3BlIHVzaW5nIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIE5nTW9kZWxDb250cm9sbGVyfSxcbiAqIHdoaWNoIGlzIGNyZWF0ZWQgYW5kIGV4cG9zZWQgYnkgdGhpcyBkaXJlY3RpdmUuXG4gKlxuICogYG5nTW9kZWxgIGlzIHJlc3BvbnNpYmxlIGZvcjpcbiAqXG4gKiAtIEJpbmRpbmcgdGhlIHZpZXcgaW50byB0aGUgbW9kZWwsIHdoaWNoIG90aGVyIGRpcmVjdGl2ZXMgc3VjaCBhcyBgaW5wdXRgLCBgdGV4dGFyZWFgIG9yIGBzZWxlY3RgXG4gKiAgIHJlcXVpcmUuXG4gKiAtIFByb3ZpZGluZyB2YWxpZGF0aW9uIGJlaGF2aW9yIChpLmUuIHJlcXVpcmVkLCBudW1iZXIsIGVtYWlsLCB1cmwpLlxuICogLSBLZWVwaW5nIHRoZSBzdGF0ZSBvZiB0aGUgY29udHJvbCAodmFsaWQvaW52YWxpZCwgZGlydHkvcHJpc3RpbmUsIHRvdWNoZWQvdW50b3VjaGVkLCB2YWxpZGF0aW9uIGVycm9ycykuXG4gKiAtIFNldHRpbmcgcmVsYXRlZCBjc3MgY2xhc3NlcyBvbiB0aGUgZWxlbWVudCAoYG5nLXZhbGlkYCwgYG5nLWludmFsaWRgLCBgbmctZGlydHlgLCBgbmctcHJpc3RpbmVgLCBgbmctdG91Y2hlZGAsIGBuZy11bnRvdWNoZWRgKSBpbmNsdWRpbmcgYW5pbWF0aW9ucy5cbiAqIC0gUmVnaXN0ZXJpbmcgdGhlIGNvbnRyb2wgd2l0aCBpdHMgcGFyZW50IHtAbGluayBuZy5kaXJlY3RpdmU6Zm9ybSBmb3JtfS5cbiAqXG4gKiBOb3RlOiBgbmdNb2RlbGAgd2lsbCB0cnkgdG8gYmluZCB0byB0aGUgcHJvcGVydHkgZ2l2ZW4gYnkgZXZhbHVhdGluZyB0aGUgZXhwcmVzc2lvbiBvbiB0aGVcbiAqIGN1cnJlbnQgc2NvcGUuIElmIHRoZSBwcm9wZXJ0eSBkb2Vzbid0IGFscmVhZHkgZXhpc3Qgb24gdGhpcyBzY29wZSwgaXQgd2lsbCBiZSBjcmVhdGVkXG4gKiBpbXBsaWNpdGx5IGFuZCBhZGRlZCB0byB0aGUgc2NvcGUuXG4gKlxuICogRm9yIGJlc3QgcHJhY3RpY2VzIG9uIHVzaW5nIGBuZ01vZGVsYCwgc2VlOlxuICpcbiAqICAtIFtVbmRlcnN0YW5kaW5nIFNjb3Blc10oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy93aWtpL1VuZGVyc3RhbmRpbmctU2NvcGVzKVxuICpcbiAqIEZvciBiYXNpYyBleGFtcGxlcywgaG93IHRvIHVzZSBgbmdNb2RlbGAsIHNlZTpcbiAqXG4gKiAgLSB7QGxpbmsgbmcuZGlyZWN0aXZlOmlucHV0IGlucHV0fVxuICogICAgLSB7QGxpbmsgaW5wdXRbdGV4dF0gdGV4dH1cbiAqICAgIC0ge0BsaW5rIGlucHV0W2NoZWNrYm94XSBjaGVja2JveH1cbiAqICAgIC0ge0BsaW5rIGlucHV0W3JhZGlvXSByYWRpb31cbiAqICAgIC0ge0BsaW5rIGlucHV0W251bWJlcl0gbnVtYmVyfVxuICogICAgLSB7QGxpbmsgaW5wdXRbZW1haWxdIGVtYWlsfVxuICogICAgLSB7QGxpbmsgaW5wdXRbdXJsXSB1cmx9XG4gKiAgICAtIHtAbGluayBpbnB1dFtkYXRlXSBkYXRlfVxuICogICAgLSB7QGxpbmsgaW5wdXRbZGF0ZXRpbWUtbG9jYWxdIGRhdGV0aW1lLWxvY2FsfVxuICogICAgLSB7QGxpbmsgaW5wdXRbdGltZV0gdGltZX1cbiAqICAgIC0ge0BsaW5rIGlucHV0W21vbnRoXSBtb250aH1cbiAqICAgIC0ge0BsaW5rIGlucHV0W3dlZWtdIHdlZWt9XG4gKiAgLSB7QGxpbmsgbmcuZGlyZWN0aXZlOnNlbGVjdCBzZWxlY3R9XG4gKiAgLSB7QGxpbmsgbmcuZGlyZWN0aXZlOnRleHRhcmVhIHRleHRhcmVhfVxuICpcbiAqICMgQ1NTIGNsYXNzZXNcbiAqIFRoZSBmb2xsb3dpbmcgQ1NTIGNsYXNzZXMgYXJlIGFkZGVkIGFuZCByZW1vdmVkIG9uIHRoZSBhc3NvY2lhdGVkIGlucHV0L3NlbGVjdC90ZXh0YXJlYSBlbGVtZW50XG4gKiBkZXBlbmRpbmcgb24gdGhlIHZhbGlkaXR5IG9mIHRoZSBtb2RlbC5cbiAqXG4gKiAgLSBgbmctdmFsaWRgOiB0aGUgbW9kZWwgaXMgdmFsaWRcbiAqICAtIGBuZy1pbnZhbGlkYDogdGhlIG1vZGVsIGlzIGludmFsaWRcbiAqICAtIGBuZy12YWxpZC1ba2V5XWA6IGZvciBlYWNoIHZhbGlkIGtleSBhZGRlZCBieSBgJHNldFZhbGlkaXR5YFxuICogIC0gYG5nLWludmFsaWQtW2tleV1gOiBmb3IgZWFjaCBpbnZhbGlkIGtleSBhZGRlZCBieSBgJHNldFZhbGlkaXR5YFxuICogIC0gYG5nLXByaXN0aW5lYDogdGhlIGNvbnRyb2wgaGFzbid0IGJlZW4gaW50ZXJhY3RlZCB3aXRoIHlldFxuICogIC0gYG5nLWRpcnR5YDogdGhlIGNvbnRyb2wgaGFzIGJlZW4gaW50ZXJhY3RlZCB3aXRoXG4gKiAgLSBgbmctdG91Y2hlZGA6IHRoZSBjb250cm9sIGhhcyBiZWVuIGJsdXJyZWRcbiAqICAtIGBuZy11bnRvdWNoZWRgOiB0aGUgY29udHJvbCBoYXNuJ3QgYmVlbiBibHVycmVkXG4gKiAgLSBgbmctcGVuZGluZ2A6IGFueSBgJGFzeW5jVmFsaWRhdG9yc2AgYXJlIHVuZnVsZmlsbGVkXG4gKlxuICogS2VlcCBpbiBtaW5kIHRoYXQgbmdBbmltYXRlIGNhbiBkZXRlY3QgZWFjaCBvZiB0aGVzZSBjbGFzc2VzIHdoZW4gYWRkZWQgYW5kIHJlbW92ZWQuXG4gKlxuICogIyMgQW5pbWF0aW9uIEhvb2tzXG4gKlxuICogQW5pbWF0aW9ucyB3aXRoaW4gbW9kZWxzIGFyZSB0cmlnZ2VyZWQgd2hlbiBhbnkgb2YgdGhlIGFzc29jaWF0ZWQgQ1NTIGNsYXNzZXMgYXJlIGFkZGVkIGFuZCByZW1vdmVkXG4gKiBvbiB0aGUgaW5wdXQgZWxlbWVudCB3aGljaCBpcyBhdHRhY2hlZCB0byB0aGUgbW9kZWwuIFRoZXNlIGNsYXNzZXMgYXJlOiBgLm5nLXByaXN0aW5lYCwgYC5uZy1kaXJ0eWAsXG4gKiBgLm5nLWludmFsaWRgIGFuZCBgLm5nLXZhbGlkYCBhcyB3ZWxsIGFzIGFueSBvdGhlciB2YWxpZGF0aW9ucyB0aGF0IGFyZSBwZXJmb3JtZWQgb24gdGhlIG1vZGVsIGl0c2VsZi5cbiAqIFRoZSBhbmltYXRpb25zIHRoYXQgYXJlIHRyaWdnZXJlZCB3aXRoaW4gbmdNb2RlbCBhcmUgc2ltaWxhciB0byBob3cgdGhleSB3b3JrIGluIG5nQ2xhc3MgYW5kXG4gKiBhbmltYXRpb25zIGNhbiBiZSBob29rZWQgaW50byB1c2luZyBDU1MgdHJhbnNpdGlvbnMsIGtleWZyYW1lcyBhcyB3ZWxsIGFzIEpTIGFuaW1hdGlvbnMuXG4gKlxuICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGEgc2ltcGxlIHdheSB0byB1dGlsaXplIENTUyB0cmFuc2l0aW9ucyB0byBzdHlsZSBhbiBpbnB1dCBlbGVtZW50XG4gKiB0aGF0IGhhcyBiZWVuIHJlbmRlcmVkIGFzIGludmFsaWQgYWZ0ZXIgaXQgaGFzIGJlZW4gdmFsaWRhdGVkOlxuICpcbiAqIDxwcmU+XG4gKiAvL2JlIHN1cmUgdG8gaW5jbHVkZSBuZ0FuaW1hdGUgYXMgYSBtb2R1bGUgdG8gaG9vayBpbnRvIG1vcmVcbiAqIC8vYWR2YW5jZWQgYW5pbWF0aW9uc1xuICogLm15LWlucHV0IHtcbiAqICAgdHJhbnNpdGlvbjowLjVzIGxpbmVhciBhbGw7XG4gKiAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICogfVxuICogLm15LWlucHV0Lm5nLWludmFsaWQge1xuICogICBiYWNrZ3JvdW5kOiByZWQ7XG4gKiAgIGNvbG9yOndoaXRlO1xuICogfVxuICogPC9wcmU+XG4gKlxuICogQGV4YW1wbGVcbiAqIDxleGFtcGxlIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiIGZpeEJhc2U9XCJ0cnVlXCIgbW9kdWxlPVwiaW5wdXRFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2lucHV0RXhhbXBsZScsIFtdKVxuICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAkc2NvcGUudmFsID0gJzEnO1xuICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8c3R5bGU+XG4gICAgICAgICAubXktaW5wdXQge1xuICAgICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246YWxsIGxpbmVhciAwLjVzO1xuICAgICAgICAgICB0cmFuc2l0aW9uOmFsbCBsaW5lYXIgMC41cztcbiAgICAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gICAgICAgICB9XG4gICAgICAgICAubXktaW5wdXQubmctaW52YWxpZCB7XG4gICAgICAgICAgIGNvbG9yOndoaXRlO1xuICAgICAgICAgICBiYWNrZ3JvdW5kOiByZWQ7XG4gICAgICAgICB9XG4gICAgICAgPC9zdHlsZT5cbiAgICAgICBVcGRhdGUgaW5wdXQgdG8gc2VlIHRyYW5zaXRpb25zIHdoZW4gdmFsaWQvaW52YWxpZC5cbiAgICAgICBJbnRlZ2VyIGlzIGEgdmFsaWQgdmFsdWUuXG4gICAgICAgPGZvcm0gbmFtZT1cInRlc3RGb3JtXCIgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJ2YWxcIiBuZy1wYXR0ZXJuPVwiL15cXGQrJC9cIiBuYW1lPVwiYW5pbVwiIGNsYXNzPVwibXktaW5wdXRcIiAvPlxuICAgICAgIDwvZm9ybT5cbiAgICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqICMjIEJpbmRpbmcgdG8gYSBnZXR0ZXIvc2V0dGVyXG4gKlxuICogU29tZXRpbWVzIGl0J3MgaGVscGZ1bCB0byBiaW5kIGBuZ01vZGVsYCB0byBhIGdldHRlci9zZXR0ZXIgZnVuY3Rpb24uICBBIGdldHRlci9zZXR0ZXIgaXMgYVxuICogZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgcmVwcmVzZW50YXRpb24gb2YgdGhlIG1vZGVsIHdoZW4gY2FsbGVkIHdpdGggemVybyBhcmd1bWVudHMsIGFuZCBzZXRzXG4gKiB0aGUgaW50ZXJuYWwgc3RhdGUgb2YgYSBtb2RlbCB3aGVuIGNhbGxlZCB3aXRoIGFuIGFyZ3VtZW50LiBJdCdzIHNvbWV0aW1lcyB1c2VmdWwgdG8gdXNlIHRoaXNcbiAqIGZvciBtb2RlbHMgdGhhdCBoYXZlIGFuIGludGVybmFsIHJlcHJlc2VudGF0aW9uIHRoYXQncyBkaWZmZXJlbnQgdGhhbiB3aGF0IHRoZSBtb2RlbCBleHBvc2VzXG4gKiB0byB0aGUgdmlldy5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtc3VjY2Vzc1wiPlxuICogKipCZXN0IFByYWN0aWNlOioqIEl0J3MgYmVzdCB0byBrZWVwIGdldHRlcnMgZmFzdCBiZWNhdXNlIEFuZ3VsYXIgaXMgbGlrZWx5IHRvIGNhbGwgdGhlbSBtb3JlXG4gKiBmcmVxdWVudGx5IHRoYW4gb3RoZXIgcGFydHMgb2YgeW91ciBjb2RlLlxuICogPC9kaXY+XG4gKlxuICogWW91IHVzZSB0aGlzIGJlaGF2aW9yIGJ5IGFkZGluZyBgbmctbW9kZWwtb3B0aW9ucz1cInsgZ2V0dGVyU2V0dGVyOiB0cnVlIH1cImAgdG8gYW4gZWxlbWVudCB0aGF0XG4gKiBoYXMgYG5nLW1vZGVsYCBhdHRhY2hlZCB0byBpdC4gWW91IGNhbiBhbHNvIGFkZCBgbmctbW9kZWwtb3B0aW9ucz1cInsgZ2V0dGVyU2V0dGVyOiB0cnVlIH1cImAgdG9cbiAqIGEgYDxmb3JtPmAsIHdoaWNoIHdpbGwgZW5hYmxlIHRoaXMgYmVoYXZpb3IgZm9yIGFsbCBgPGlucHV0PmBzIHdpdGhpbiBpdC4gU2VlXG4gKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTW9kZWxPcHRpb25zIGBuZ01vZGVsT3B0aW9uc2B9IGZvciBtb3JlLlxuICpcbiAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBzaG93cyBob3cgdG8gdXNlIGBuZ01vZGVsYCB3aXRoIGEgZ2V0dGVyL3NldHRlcjpcbiAqXG4gKiBAZXhhbXBsZVxuICogPGV4YW1wbGUgbmFtZT1cIm5nTW9kZWwtZ2V0dGVyLXNldHRlclwiIG1vZHVsZT1cImdldHRlclNldHRlckV4YW1wbGVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgPGZvcm0gbmFtZT1cInVzZXJGb3JtXCI+XG4gICAgICAgICAgIE5hbWU6XG4gICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJ1c2VyTmFtZVwiXG4gICAgICAgICAgICAgICAgICBuZy1tb2RlbD1cInVzZXIubmFtZVwiXG4gICAgICAgICAgICAgICAgICBuZy1tb2RlbC1vcHRpb25zPVwieyBnZXR0ZXJTZXR0ZXI6IHRydWUgfVwiIC8+XG4gICAgICAgICA8L2Zvcm0+XG4gICAgICAgICA8cHJlPnVzZXIubmFtZSA9IDxzcGFuIG5nLWJpbmQ9XCJ1c2VyLm5hbWUoKVwiPjwvc3Bhbj48L3ByZT5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gICAgICAgYW5ndWxhci5tb2R1bGUoJ2dldHRlclNldHRlckV4YW1wbGUnLCBbXSlcbiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgIHZhciBfbmFtZSA9ICdCcmlhbic7XG4gICAgICAgICAgICRzY29wZS51c2VyID0ge1xuICAgICAgICAgICAgIG5hbWU6IGZ1bmN0aW9uKG5ld05hbWUpIHtcbiAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChuZXdOYW1lKSkge1xuICAgICAgICAgICAgICAgICBfbmFtZSA9IG5ld05hbWU7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICByZXR1cm4gX25hbWU7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICB9O1xuICAgICAgICAgfV0pO1xuICAgICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ01vZGVsRGlyZWN0aXZlID0gWyckcm9vdFNjb3BlJywgZnVuY3Rpb24oJHJvb3RTY29wZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcmVxdWlyZTogWyduZ01vZGVsJywgJ14/Zm9ybScsICdeP25nTW9kZWxPcHRpb25zJ10sXG4gICAgY29udHJvbGxlcjogTmdNb2RlbENvbnRyb2xsZXIsXG4gICAgLy8gUHJlbGluayBuZWVkcyB0byBydW4gYmVmb3JlIGFueSBpbnB1dCBkaXJlY3RpdmVcbiAgICAvLyBzbyB0aGF0IHdlIGNhbiBzZXQgdGhlIE5nTW9kZWxPcHRpb25zIGluIE5nTW9kZWxDb250cm9sbGVyXG4gICAgLy8gYmVmb3JlIGFueW9uZSBlbHNlIHVzZXMgaXQuXG4gICAgcHJpb3JpdHk6IDEsXG4gICAgY29tcGlsZTogZnVuY3Rpb24gbmdNb2RlbENvbXBpbGUoZWxlbWVudCkge1xuICAgICAgLy8gU2V0dXAgaW5pdGlhbCBzdGF0ZSBvZiB0aGUgY29udHJvbFxuICAgICAgZWxlbWVudC5hZGRDbGFzcyhQUklTVElORV9DTEFTUykuYWRkQ2xhc3MoVU5UT1VDSEVEX0NMQVNTKS5hZGRDbGFzcyhWQUxJRF9DTEFTUyk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHByZTogZnVuY3Rpb24gbmdNb2RlbFByZUxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmxzKSB7XG4gICAgICAgICAgdmFyIG1vZGVsQ3RybCA9IGN0cmxzWzBdLFxuICAgICAgICAgICAgICBmb3JtQ3RybCA9IGN0cmxzWzFdIHx8IG51bGxGb3JtQ3RybDtcblxuICAgICAgICAgIG1vZGVsQ3RybC4kJHNldE9wdGlvbnMoY3RybHNbMl0gJiYgY3RybHNbMl0uJG9wdGlvbnMpO1xuXG4gICAgICAgICAgLy8gbm90aWZ5IG90aGVycywgZXNwZWNpYWxseSBwYXJlbnQgZm9ybXNcbiAgICAgICAgICBmb3JtQ3RybC4kYWRkQ29udHJvbChtb2RlbEN0cmwpO1xuXG4gICAgICAgICAgYXR0ci4kb2JzZXJ2ZSgnbmFtZScsIGZ1bmN0aW9uKG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICBpZiAobW9kZWxDdHJsLiRuYW1lICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICBmb3JtQ3RybC4kJHJlbmFtZUNvbnRyb2wobW9kZWxDdHJsLCBuZXdWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBmb3JtQ3RybC4kcmVtb3ZlQ29udHJvbChtb2RlbEN0cmwpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0OiBmdW5jdGlvbiBuZ01vZGVsUG9zdExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmxzKSB7XG4gICAgICAgICAgdmFyIG1vZGVsQ3RybCA9IGN0cmxzWzBdO1xuICAgICAgICAgIGlmIChtb2RlbEN0cmwuJG9wdGlvbnMgJiYgbW9kZWxDdHJsLiRvcHRpb25zLnVwZGF0ZU9uKSB7XG4gICAgICAgICAgICBlbGVtZW50Lm9uKG1vZGVsQ3RybC4kb3B0aW9ucy51cGRhdGVPbiwgZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICAgICAgbW9kZWxDdHJsLiQkZGVib3VuY2VWaWV3VmFsdWVDb21taXQoZXYgJiYgZXYudHlwZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBlbGVtZW50Lm9uKCdibHVyJywgZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICAgIGlmIChtb2RlbEN0cmwuJHRvdWNoZWQpIHJldHVybjtcblxuICAgICAgICAgICAgaWYgKCRyb290U2NvcGUuJCRwaGFzZSkge1xuICAgICAgICAgICAgICBzY29wZS4kZXZhbEFzeW5jKG1vZGVsQ3RybC4kc2V0VG91Y2hlZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzY29wZS4kYXBwbHkobW9kZWxDdHJsLiRzZXRUb3VjaGVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH07XG59XTtcblxudmFyIERFRkFVTFRfUkVHRVhQID0gLyhcXHMrfF4pZGVmYXVsdChcXHMrfCQpLztcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ01vZGVsT3B0aW9uc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQWxsb3dzIHR1bmluZyBob3cgbW9kZWwgdXBkYXRlcyBhcmUgZG9uZS4gVXNpbmcgYG5nTW9kZWxPcHRpb25zYCB5b3UgY2FuIHNwZWNpZnkgYSBjdXN0b20gbGlzdCBvZlxuICogZXZlbnRzIHRoYXQgd2lsbCB0cmlnZ2VyIGEgbW9kZWwgdXBkYXRlIGFuZC9vciBhIGRlYm91bmNpbmcgZGVsYXkgc28gdGhhdCB0aGUgYWN0dWFsIHVwZGF0ZSBvbmx5XG4gKiB0YWtlcyBwbGFjZSB3aGVuIGEgdGltZXIgZXhwaXJlczsgdGhpcyB0aW1lciB3aWxsIGJlIHJlc2V0IGFmdGVyIGFub3RoZXIgY2hhbmdlIHRha2VzIHBsYWNlLlxuICpcbiAqIEdpdmVuIHRoZSBuYXR1cmUgb2YgYG5nTW9kZWxPcHRpb25zYCwgdGhlIHZhbHVlIGRpc3BsYXllZCBpbnNpZGUgaW5wdXQgZmllbGRzIGluIHRoZSB2aWV3IG1pZ2h0XG4gKiBiZSBkaWZmZXJlbnQgdGhhbiB0aGUgdmFsdWUgaW4gdGhlIGFjdHVhbCBtb2RlbC4gVGhpcyBtZWFucyB0aGF0IGlmIHlvdSB1cGRhdGUgdGhlIG1vZGVsIHlvdVxuICogc2hvdWxkIGFsc28gaW52b2tlIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIGAkcm9sbGJhY2tWaWV3VmFsdWVgfSBvbiB0aGUgcmVsZXZhbnQgaW5wdXQgZmllbGQgaW5cbiAqIG9yZGVyIHRvIG1ha2Ugc3VyZSBpdCBpcyBzeW5jaHJvbml6ZWQgd2l0aCB0aGUgbW9kZWwgYW5kIHRoYXQgYW55IGRlYm91bmNlZCBhY3Rpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogVGhlIGVhc2llc3Qgd2F5IHRvIHJlZmVyZW5jZSB0aGUgY29udHJvbCdzIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIGAkcm9sbGJhY2tWaWV3VmFsdWVgfVxuICogbWV0aG9kIGlzIGJ5IG1ha2luZyBzdXJlIHRoZSBpbnB1dCBpcyBwbGFjZWQgaW5zaWRlIGEgZm9ybSB0aGF0IGhhcyBhIGBuYW1lYCBhdHRyaWJ1dGUuIFRoaXMgaXNcbiAqIGltcG9ydGFudCBiZWNhdXNlIGBmb3JtYCBjb250cm9sbGVycyBhcmUgcHVibGlzaGVkIHRvIHRoZSByZWxhdGVkIHNjb3BlIHVuZGVyIHRoZSBuYW1lIGluIHRoZWlyXG4gKiBgbmFtZWAgYXR0cmlidXRlLlxuICpcbiAqIEFueSBwZW5kaW5nIGNoYW5nZXMgd2lsbCB0YWtlIHBsYWNlIGltbWVkaWF0ZWx5IHdoZW4gYW4gZW5jbG9zaW5nIGZvcm0gaXMgc3VibWl0dGVkIHZpYSB0aGVcbiAqIGBzdWJtaXRgIGV2ZW50LiBOb3RlIHRoYXQgYG5nQ2xpY2tgIGV2ZW50cyB3aWxsIG9jY3VyIGJlZm9yZSB0aGUgbW9kZWwgaXMgdXBkYXRlZC4gVXNlIGBuZ1N1Ym1pdGBcbiAqIHRvIGhhdmUgYWNjZXNzIHRvIHRoZSB1cGRhdGVkIG1vZGVsLlxuICpcbiAqIGBuZ01vZGVsT3B0aW9uc2AgaGFzIGFuIGVmZmVjdCBvbiB0aGUgZWxlbWVudCBpdCdzIGRlY2xhcmVkIG9uIGFuZCBpdHMgZGVzY2VuZGFudHMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG5nTW9kZWxPcHRpb25zIG9wdGlvbnMgdG8gYXBwbHkgdG8gdGhlIGN1cnJlbnQgbW9kZWwuIFZhbGlkIGtleXMgYXJlOlxuICogICAtIGB1cGRhdGVPbmA6IHN0cmluZyBzcGVjaWZ5aW5nIHdoaWNoIGV2ZW50IHNob3VsZCB0aGUgaW5wdXQgYmUgYm91bmQgdG8uIFlvdSBjYW4gc2V0IHNldmVyYWxcbiAqICAgICBldmVudHMgdXNpbmcgYW4gc3BhY2UgZGVsaW1pdGVkIGxpc3QuIFRoZXJlIGlzIGEgc3BlY2lhbCBldmVudCBjYWxsZWQgYGRlZmF1bHRgIHRoYXRcbiAqICAgICBtYXRjaGVzIHRoZSBkZWZhdWx0IGV2ZW50cyBiZWxvbmdpbmcgb2YgdGhlIGNvbnRyb2wuXG4gKiAgIC0gYGRlYm91bmNlYDogaW50ZWdlciB2YWx1ZSB3aGljaCBjb250YWlucyB0aGUgZGVib3VuY2UgbW9kZWwgdXBkYXRlIHZhbHVlIGluIG1pbGxpc2Vjb25kcy4gQVxuICogICAgIHZhbHVlIG9mIDAgdHJpZ2dlcnMgYW4gaW1tZWRpYXRlIHVwZGF0ZS4gSWYgYW4gb2JqZWN0IGlzIHN1cHBsaWVkIGluc3RlYWQsIHlvdSBjYW4gc3BlY2lmeSBhXG4gKiAgICAgY3VzdG9tIHZhbHVlIGZvciBlYWNoIGV2ZW50LiBGb3IgZXhhbXBsZTpcbiAqICAgICBgbmctbW9kZWwtb3B0aW9ucz1cInsgdXBkYXRlT246ICdkZWZhdWx0IGJsdXInLCBkZWJvdW5jZTogeydkZWZhdWx0JzogNTAwLCAnYmx1cic6IDB9IH1cImBcbiAqICAgLSBgYWxsb3dJbnZhbGlkYDogYm9vbGVhbiB2YWx1ZSB3aGljaCBpbmRpY2F0ZXMgdGhhdCB0aGUgbW9kZWwgY2FuIGJlIHNldCB3aXRoIHZhbHVlcyB0aGF0IGRpZFxuICogICAgIG5vdCB2YWxpZGF0ZSBjb3JyZWN0bHkgaW5zdGVhZCBvZiB0aGUgZGVmYXVsdCBiZWhhdmlvciBvZiBzZXR0aW5nIHRoZSBtb2RlbCB0byB1bmRlZmluZWQuXG4gKiAgIC0gYGdldHRlclNldHRlcmA6IGJvb2xlYW4gdmFsdWUgd2hpY2ggZGV0ZXJtaW5lcyB3aGV0aGVyIG9yIG5vdCB0byB0cmVhdCBmdW5jdGlvbnMgYm91bmQgdG9cbiAgICAgICBgbmdNb2RlbGAgYXMgZ2V0dGVycy9zZXR0ZXJzLlxuICogICAtIGB0aW1lem9uZWA6IERlZmluZXMgdGhlIHRpbWV6b25lIHRvIGJlIHVzZWQgdG8gcmVhZC93cml0ZSB0aGUgYERhdGVgIGluc3RhbmNlIGluIHRoZSBtb2RlbCBmb3JcbiAqICAgICBgPGlucHV0IHR5cGU9XCJkYXRlXCI+YCwgYDxpbnB1dCB0eXBlPVwidGltZVwiPmAsIC4uLiAuIFJpZ2h0IG5vdywgdGhlIG9ubHkgc3VwcG9ydGVkIHZhbHVlIGlzIGAnVVRDJ2AsXG4gKiAgICAgb3RoZXJ3aXNlIHRoZSBkZWZhdWx0IHRpbWV6b25lIG9mIHRoZSBicm93c2VyIHdpbGwgYmUgdXNlZC5cbiAqXG4gKiBAZXhhbXBsZVxuXG4gIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBzaG93cyBob3cgdG8gb3ZlcnJpZGUgaW1tZWRpYXRlIHVwZGF0ZXMuIENoYW5nZXMgb24gdGhlIGlucHV0cyB3aXRoaW4gdGhlXG4gIGZvcm0gd2lsbCB1cGRhdGUgdGhlIG1vZGVsIG9ubHkgd2hlbiB0aGUgY29udHJvbCBsb3NlcyBmb2N1cyAoYmx1ciBldmVudCkuIElmIGBlc2NhcGVgIGtleSBpc1xuICBwcmVzc2VkIHdoaWxlIHRoZSBpbnB1dCBmaWVsZCBpcyBmb2N1c2VkLCB0aGUgdmFsdWUgaXMgcmVzZXQgdG8gdGhlIHZhbHVlIGluIHRoZSBjdXJyZW50IG1vZGVsLlxuXG4gIDxleGFtcGxlIG5hbWU9XCJuZ01vZGVsT3B0aW9ucy1kaXJlY3RpdmUtYmx1clwiIG1vZHVsZT1cIm9wdGlvbnNFeGFtcGxlXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgIDxmb3JtIG5hbWU9XCJ1c2VyRm9ybVwiPlxuICAgICAgICAgIE5hbWU6XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cInVzZXJOYW1lXCJcbiAgICAgICAgICAgICAgICAgbmctbW9kZWw9XCJ1c2VyLm5hbWVcIlxuICAgICAgICAgICAgICAgICBuZy1tb2RlbC1vcHRpb25zPVwieyB1cGRhdGVPbjogJ2JsdXInIH1cIlxuICAgICAgICAgICAgICAgICBuZy1rZXl1cD1cImNhbmNlbCgkZXZlbnQpXCIgLz48YnIgLz5cblxuICAgICAgICAgIE90aGVyIGRhdGE6XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJ1c2VyLmRhdGFcIiAvPjxiciAvPlxuICAgICAgICA8L2Zvcm0+XG4gICAgICAgIDxwcmU+dXNlci5uYW1lID0gPHNwYW4gbmctYmluZD1cInVzZXIubmFtZVwiPjwvc3Bhbj48L3ByZT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gICAgICBhbmd1bGFyLm1vZHVsZSgnb3B0aW9uc0V4YW1wbGUnLCBbXSlcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAkc2NvcGUudXNlciA9IHsgbmFtZTogJ3NheScsIGRhdGE6ICcnIH07XG5cbiAgICAgICAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PSAyNykge1xuICAgICAgICAgICAgICAkc2NvcGUudXNlckZvcm0udXNlck5hbWUuJHJvbGxiYWNrVmlld1ZhbHVlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfV0pO1xuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICB2YXIgbW9kZWwgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ3VzZXIubmFtZScpKTtcbiAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3VzZXIubmFtZScpKTtcbiAgICAgIHZhciBvdGhlciA9IGVsZW1lbnQoYnkubW9kZWwoJ3VzZXIuZGF0YScpKTtcblxuICAgICAgaXQoJ3Nob3VsZCBhbGxvdyBjdXN0b20gZXZlbnRzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGlucHV0LnNlbmRLZXlzKCcgaGVsbG8nKTtcbiAgICAgICAgaW5wdXQuY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KG1vZGVsLmdldFRleHQoKSkudG9FcXVhbCgnc2F5Jyk7XG4gICAgICAgIG90aGVyLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChtb2RlbC5nZXRUZXh0KCkpLnRvRXF1YWwoJ3NheSBoZWxsbycpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgJHJvbGxiYWNrVmlld1ZhbHVlIHdoZW4gbW9kZWwgY2hhbmdlcycsIGZ1bmN0aW9uKCkge1xuICAgICAgICBpbnB1dC5zZW5kS2V5cygnIGhlbGxvJyk7XG4gICAgICAgIGV4cGVjdChpbnB1dC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvRXF1YWwoJ3NheSBoZWxsbycpO1xuICAgICAgICBpbnB1dC5zZW5kS2V5cyhwcm90cmFjdG9yLktleS5FU0NBUEUpO1xuICAgICAgICBleHBlY3QoaW5wdXQuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0VxdWFsKCdzYXknKTtcbiAgICAgICAgb3RoZXIuY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KG1vZGVsLmdldFRleHQoKSkudG9FcXVhbCgnc2F5Jyk7XG4gICAgICB9KTtcbiAgICA8L2ZpbGU+XG4gIDwvZXhhbXBsZT5cblxuICBUaGlzIG9uZSBzaG93cyBob3cgdG8gZGVib3VuY2UgbW9kZWwgY2hhbmdlcy4gTW9kZWwgd2lsbCBiZSB1cGRhdGVkIG9ubHkgMSBzZWMgYWZ0ZXIgbGFzdCBjaGFuZ2UuXG4gIElmIHRoZSBgQ2xlYXJgIGJ1dHRvbiBpcyBwcmVzc2VkLCBhbnkgZGVib3VuY2VkIGFjdGlvbiBpcyBjYW5jZWxlZCBhbmQgdGhlIHZhbHVlIGJlY29tZXMgZW1wdHkuXG5cbiAgPGV4YW1wbGUgbmFtZT1cIm5nTW9kZWxPcHRpb25zLWRpcmVjdGl2ZS1kZWJvdW5jZVwiIG1vZHVsZT1cIm9wdGlvbnNFeGFtcGxlXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgIDxmb3JtIG5hbWU9XCJ1c2VyRm9ybVwiPlxuICAgICAgICAgIE5hbWU6XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cInVzZXJOYW1lXCJcbiAgICAgICAgICAgICAgICAgbmctbW9kZWw9XCJ1c2VyLm5hbWVcIlxuICAgICAgICAgICAgICAgICBuZy1tb2RlbC1vcHRpb25zPVwieyBkZWJvdW5jZTogMTAwMCB9XCIgLz5cbiAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwidXNlckZvcm0udXNlck5hbWUuJHJvbGxiYWNrVmlld1ZhbHVlKCk7IHVzZXIubmFtZT0nJ1wiPkNsZWFyPC9idXR0b24+PGJyIC8+XG4gICAgICAgIDwvZm9ybT5cbiAgICAgICAgPHByZT51c2VyLm5hbWUgPSA8c3BhbiBuZy1iaW5kPVwidXNlci5uYW1lXCI+PC9zcGFuPjwvcHJlPlxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdvcHRpb25zRXhhbXBsZScsIFtdKVxuICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICRzY29wZS51c2VyID0geyBuYW1lOiAnc2F5JyB9O1xuICAgICAgICB9XSk7XG4gICAgPC9maWxlPlxuICA8L2V4YW1wbGU+XG5cbiAgVGhpcyBvbmUgc2hvd3MgaG93IHRvIGJpbmQgdG8gZ2V0dGVyL3NldHRlcnM6XG5cbiAgPGV4YW1wbGUgbmFtZT1cIm5nTW9kZWxPcHRpb25zLWRpcmVjdGl2ZS1nZXR0ZXItc2V0dGVyXCIgbW9kdWxlPVwiZ2V0dGVyU2V0dGVyRXhhbXBsZVwiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICA8Zm9ybSBuYW1lPVwidXNlckZvcm1cIj5cbiAgICAgICAgICBOYW1lOlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJ1c2VyTmFtZVwiXG4gICAgICAgICAgICAgICAgIG5nLW1vZGVsPVwidXNlci5uYW1lXCJcbiAgICAgICAgICAgICAgICAgbmctbW9kZWwtb3B0aW9ucz1cInsgZ2V0dGVyU2V0dGVyOiB0cnVlIH1cIiAvPlxuICAgICAgICA8L2Zvcm0+XG4gICAgICAgIDxwcmU+dXNlci5uYW1lID0gPHNwYW4gbmctYmluZD1cInVzZXIubmFtZSgpXCI+PC9zcGFuPjwvcHJlPlxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdnZXR0ZXJTZXR0ZXJFeGFtcGxlJywgW10pXG4gICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgdmFyIF9uYW1lID0gJ0JyaWFuJztcbiAgICAgICAgICAkc2NvcGUudXNlciA9IHtcbiAgICAgICAgICAgIG5hbWU6IGZ1bmN0aW9uKG5ld05hbWUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGFuZ3VsYXIuaXNEZWZpbmVkKG5ld05hbWUpID8gKF9uYW1lID0gbmV3TmFtZSkgOiBfbmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XSk7XG4gICAgPC9maWxlPlxuICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ01vZGVsT3B0aW9uc0RpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJGF0dHJzJywgZnVuY3Rpb24oJHNjb3BlLCAkYXR0cnMpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHRoaXMuJG9wdGlvbnMgPSAkc2NvcGUuJGV2YWwoJGF0dHJzLm5nTW9kZWxPcHRpb25zKTtcbiAgICAgIC8vIEFsbG93IGFkZGluZy9vdmVycmlkaW5nIGJvdW5kIGV2ZW50c1xuICAgICAgaWYgKHRoaXMuJG9wdGlvbnMudXBkYXRlT24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLiRvcHRpb25zLnVwZGF0ZU9uRGVmYXVsdCA9IGZhbHNlO1xuICAgICAgICAvLyBleHRyYWN0IFwiZGVmYXVsdFwiIHBzZXVkby1ldmVudCBmcm9tIGxpc3Qgb2YgZXZlbnRzIHRoYXQgY2FuIHRyaWdnZXIgYSBtb2RlbCB1cGRhdGVcbiAgICAgICAgdGhpcy4kb3B0aW9ucy51cGRhdGVPbiA9IHRyaW0odGhpcy4kb3B0aW9ucy51cGRhdGVPbi5yZXBsYWNlKERFRkFVTFRfUkVHRVhQLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB0aGF0LiRvcHRpb25zLnVwZGF0ZU9uRGVmYXVsdCA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuICcgJztcbiAgICAgICAgfSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kb3B0aW9ucy51cGRhdGVPbkRlZmF1bHQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1dXG4gIH07XG59O1xuXG5cblxuLy8gaGVscGVyIG1ldGhvZHNcbmZ1bmN0aW9uIGFkZFNldFZhbGlkaXR5TWV0aG9kKGNvbnRleHQpIHtcbiAgdmFyIGN0cmwgPSBjb250ZXh0LmN0cmwsXG4gICAgICAkZWxlbWVudCA9IGNvbnRleHQuJGVsZW1lbnQsXG4gICAgICBjbGFzc0NhY2hlID0ge30sXG4gICAgICBzZXQgPSBjb250ZXh0LnNldCxcbiAgICAgIHVuc2V0ID0gY29udGV4dC51bnNldCxcbiAgICAgIHBhcmVudEZvcm0gPSBjb250ZXh0LnBhcmVudEZvcm0sXG4gICAgICAkYW5pbWF0ZSA9IGNvbnRleHQuJGFuaW1hdGU7XG5cbiAgY2xhc3NDYWNoZVtJTlZBTElEX0NMQVNTXSA9ICEoY2xhc3NDYWNoZVtWQUxJRF9DTEFTU10gPSAkZWxlbWVudC5oYXNDbGFzcyhWQUxJRF9DTEFTUykpO1xuXG4gIGN0cmwuJHNldFZhbGlkaXR5ID0gc2V0VmFsaWRpdHk7XG5cbiAgZnVuY3Rpb24gc2V0VmFsaWRpdHkodmFsaWRhdGlvbkVycm9yS2V5LCBzdGF0ZSwgY29udHJvbGxlcikge1xuICAgIGlmIChzdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjcmVhdGVBbmRTZXQoJyRwZW5kaW5nJywgdmFsaWRhdGlvbkVycm9yS2V5LCBjb250cm9sbGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdW5zZXRBbmRDbGVhbnVwKCckcGVuZGluZycsIHZhbGlkYXRpb25FcnJvcktleSwgY29udHJvbGxlcik7XG4gICAgfVxuICAgIGlmICghaXNCb29sZWFuKHN0YXRlKSkge1xuICAgICAgdW5zZXQoY3RybC4kZXJyb3IsIHZhbGlkYXRpb25FcnJvcktleSwgY29udHJvbGxlcik7XG4gICAgICB1bnNldChjdHJsLiQkc3VjY2VzcywgdmFsaWRhdGlvbkVycm9yS2V5LCBjb250cm9sbGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgIHVuc2V0KGN0cmwuJGVycm9yLCB2YWxpZGF0aW9uRXJyb3JLZXksIGNvbnRyb2xsZXIpO1xuICAgICAgICBzZXQoY3RybC4kJHN1Y2Nlc3MsIHZhbGlkYXRpb25FcnJvcktleSwgY29udHJvbGxlcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXQoY3RybC4kZXJyb3IsIHZhbGlkYXRpb25FcnJvcktleSwgY29udHJvbGxlcik7XG4gICAgICAgIHVuc2V0KGN0cmwuJCRzdWNjZXNzLCB2YWxpZGF0aW9uRXJyb3JLZXksIGNvbnRyb2xsZXIpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoY3RybC4kcGVuZGluZykge1xuICAgICAgY2FjaGVkVG9nZ2xlQ2xhc3MoUEVORElOR19DTEFTUywgdHJ1ZSk7XG4gICAgICBjdHJsLiR2YWxpZCA9IGN0cmwuJGludmFsaWQgPSB1bmRlZmluZWQ7XG4gICAgICB0b2dnbGVWYWxpZGF0aW9uQ3NzKCcnLCBudWxsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FjaGVkVG9nZ2xlQ2xhc3MoUEVORElOR19DTEFTUywgZmFsc2UpO1xuICAgICAgY3RybC4kdmFsaWQgPSBpc09iamVjdEVtcHR5KGN0cmwuJGVycm9yKTtcbiAgICAgIGN0cmwuJGludmFsaWQgPSAhY3RybC4kdmFsaWQ7XG4gICAgICB0b2dnbGVWYWxpZGF0aW9uQ3NzKCcnLCBjdHJsLiR2YWxpZCk7XG4gICAgfVxuXG4gICAgLy8gcmUtcmVhZCB0aGUgc3RhdGUgYXMgdGhlIHNldC91bnNldCBtZXRob2RzIGNvdWxkIGhhdmVcbiAgICAvLyBjb21iaW5lZCBzdGF0ZSBpbiBjdHJsLiRlcnJvclt2YWxpZGF0aW9uRXJyb3JdICh1c2VkIGZvciBmb3JtcyksXG4gICAgLy8gd2hlcmUgc2V0dGluZy91bnNldHRpbmcgb25seSBpbmNyZW1lbnRzL2RlY3JlbWVudHMgdGhlIHZhbHVlLFxuICAgIC8vIGFuZCBkb2VzIG5vdCByZXBsYWNlIGl0LlxuICAgIHZhciBjb21iaW5lZFN0YXRlO1xuICAgIGlmIChjdHJsLiRwZW5kaW5nICYmIGN0cmwuJHBlbmRpbmdbdmFsaWRhdGlvbkVycm9yS2V5XSkge1xuICAgICAgY29tYmluZWRTdGF0ZSA9IHVuZGVmaW5lZDtcbiAgICB9IGVsc2UgaWYgKGN0cmwuJGVycm9yW3ZhbGlkYXRpb25FcnJvcktleV0pIHtcbiAgICAgIGNvbWJpbmVkU3RhdGUgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKGN0cmwuJCRzdWNjZXNzW3ZhbGlkYXRpb25FcnJvcktleV0pIHtcbiAgICAgIGNvbWJpbmVkU3RhdGUgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21iaW5lZFN0YXRlID0gbnVsbDtcbiAgICB9XG5cbiAgICB0b2dnbGVWYWxpZGF0aW9uQ3NzKHZhbGlkYXRpb25FcnJvcktleSwgY29tYmluZWRTdGF0ZSk7XG4gICAgcGFyZW50Rm9ybS4kc2V0VmFsaWRpdHkodmFsaWRhdGlvbkVycm9yS2V5LCBjb21iaW5lZFN0YXRlLCBjdHJsKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUFuZFNldChuYW1lLCB2YWx1ZSwgY29udHJvbGxlcikge1xuICAgIGlmICghY3RybFtuYW1lXSkge1xuICAgICAgY3RybFtuYW1lXSA9IHt9O1xuICAgIH1cbiAgICBzZXQoY3RybFtuYW1lXSwgdmFsdWUsIGNvbnRyb2xsZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gdW5zZXRBbmRDbGVhbnVwKG5hbWUsIHZhbHVlLCBjb250cm9sbGVyKSB7XG4gICAgaWYgKGN0cmxbbmFtZV0pIHtcbiAgICAgIHVuc2V0KGN0cmxbbmFtZV0sIHZhbHVlLCBjb250cm9sbGVyKTtcbiAgICB9XG4gICAgaWYgKGlzT2JqZWN0RW1wdHkoY3RybFtuYW1lXSkpIHtcbiAgICAgIGN0cmxbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2FjaGVkVG9nZ2xlQ2xhc3MoY2xhc3NOYW1lLCBzd2l0Y2hWYWx1ZSkge1xuICAgIGlmIChzd2l0Y2hWYWx1ZSAmJiAhY2xhc3NDYWNoZVtjbGFzc05hbWVdKSB7XG4gICAgICAkYW5pbWF0ZS5hZGRDbGFzcygkZWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgICAgIGNsYXNzQ2FjaGVbY2xhc3NOYW1lXSA9IHRydWU7XG4gICAgfSBlbHNlIGlmICghc3dpdGNoVmFsdWUgJiYgY2xhc3NDYWNoZVtjbGFzc05hbWVdKSB7XG4gICAgICAkYW5pbWF0ZS5yZW1vdmVDbGFzcygkZWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgICAgIGNsYXNzQ2FjaGVbY2xhc3NOYW1lXSA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRvZ2dsZVZhbGlkYXRpb25Dc3ModmFsaWRhdGlvbkVycm9yS2V5LCBpc1ZhbGlkKSB7XG4gICAgdmFsaWRhdGlvbkVycm9yS2V5ID0gdmFsaWRhdGlvbkVycm9yS2V5ID8gJy0nICsgc25ha2VfY2FzZSh2YWxpZGF0aW9uRXJyb3JLZXksICctJykgOiAnJztcblxuICAgIGNhY2hlZFRvZ2dsZUNsYXNzKFZBTElEX0NMQVNTICsgdmFsaWRhdGlvbkVycm9yS2V5LCBpc1ZhbGlkID09PSB0cnVlKTtcbiAgICBjYWNoZWRUb2dnbGVDbGFzcyhJTlZBTElEX0NMQVNTICsgdmFsaWRhdGlvbkVycm9yS2V5LCBpc1ZhbGlkID09PSBmYWxzZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNPYmplY3RFbXB0eShvYmopIHtcbiAgaWYgKG9iaikge1xuICAgIGZvciAodmFyIHByb3AgaW4gb2JqKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nTm9uQmluZGFibGVcbiAqIEByZXN0cmljdCBBQ1xuICogQHByaW9yaXR5IDEwMDBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdOb25CaW5kYWJsZWAgZGlyZWN0aXZlIHRlbGxzIEFuZ3VsYXIgbm90IHRvIGNvbXBpbGUgb3IgYmluZCB0aGUgY29udGVudHMgb2YgdGhlIGN1cnJlbnRcbiAqIERPTSBlbGVtZW50LiBUaGlzIGlzIHVzZWZ1bCBpZiB0aGUgZWxlbWVudCBjb250YWlucyB3aGF0IGFwcGVhcnMgdG8gYmUgQW5ndWxhciBkaXJlY3RpdmVzIGFuZFxuICogYmluZGluZ3MgYnV0IHdoaWNoIHNob3VsZCBiZSBpZ25vcmVkIGJ5IEFuZ3VsYXIuIFRoaXMgY291bGQgYmUgdGhlIGNhc2UgaWYgeW91IGhhdmUgYSBzaXRlIHRoYXRcbiAqIGRpc3BsYXlzIHNuaXBwZXRzIG9mIGNvZGUsIGZvciBpbnN0YW5jZS5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqXG4gKiBAZXhhbXBsZVxuICogSW4gdGhpcyBleGFtcGxlIHRoZXJlIGFyZSB0d28gbG9jYXRpb25zIHdoZXJlIGEgc2ltcGxlIGludGVycG9sYXRpb24gYmluZGluZyAoYHt7fX1gKSBpcyBwcmVzZW50LFxuICogYnV0IHRoZSBvbmUgd3JhcHBlZCBpbiBgbmdOb25CaW5kYWJsZWAgaXMgbGVmdCBhbG9uZS5cbiAqXG4gKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgPGRpdj5Ob3JtYWw6IHt7MSArIDJ9fTwvZGl2PlxuICAgICAgICA8ZGl2IG5nLW5vbi1iaW5kYWJsZT5JZ25vcmVkOiB7ezEgKyAyfX08L2Rpdj5cbiAgICAgIDwvZmlsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLW5vbi1iaW5kYWJsZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnMSArIDInKSkuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzMnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50LmFsbChieS5jc3MoJ2RpdicpKS5sYXN0KCkuZ2V0VGV4dCgpKS50b01hdGNoKC8xIFxcKyAyLyk7XG4gICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICovXG52YXIgbmdOb25CaW5kYWJsZURpcmVjdGl2ZSA9IG5nRGlyZWN0aXZlKHsgdGVybWluYWw6IHRydWUsIHByaW9yaXR5OiAxMDAwIH0pO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nUGx1cmFsaXplXG4gKiBAcmVzdHJpY3QgRUFcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIGBuZ1BsdXJhbGl6ZWAgaXMgYSBkaXJlY3RpdmUgdGhhdCBkaXNwbGF5cyBtZXNzYWdlcyBhY2NvcmRpbmcgdG8gZW4tVVMgbG9jYWxpemF0aW9uIHJ1bGVzLlxuICogVGhlc2UgcnVsZXMgYXJlIGJ1bmRsZWQgd2l0aCBhbmd1bGFyLmpzLCBidXQgY2FuIGJlIG92ZXJyaWRkZW5cbiAqIChzZWUge0BsaW5rIGd1aWRlL2kxOG4gQW5ndWxhciBpMThufSBkZXYgZ3VpZGUpLiBZb3UgY29uZmlndXJlIG5nUGx1cmFsaXplIGRpcmVjdGl2ZVxuICogYnkgc3BlY2lmeWluZyB0aGUgbWFwcGluZ3MgYmV0d2VlblxuICogW3BsdXJhbCBjYXRlZ29yaWVzXShodHRwOi8vdW5pY29kZS5vcmcvcmVwb3MvY2xkci10bXAvdHJ1bmsvZGlmZi9zdXBwbGVtZW50YWwvbGFuZ3VhZ2VfcGx1cmFsX3J1bGVzLmh0bWwpXG4gKiBhbmQgdGhlIHN0cmluZ3MgdG8gYmUgZGlzcGxheWVkLlxuICpcbiAqICMgUGx1cmFsIGNhdGVnb3JpZXMgYW5kIGV4cGxpY2l0IG51bWJlciBydWxlc1xuICogVGhlcmUgYXJlIHR3b1xuICogW3BsdXJhbCBjYXRlZ29yaWVzXShodHRwOi8vdW5pY29kZS5vcmcvcmVwb3MvY2xkci10bXAvdHJ1bmsvZGlmZi9zdXBwbGVtZW50YWwvbGFuZ3VhZ2VfcGx1cmFsX3J1bGVzLmh0bWwpXG4gKiBpbiBBbmd1bGFyJ3MgZGVmYXVsdCBlbi1VUyBsb2NhbGU6IFwib25lXCIgYW5kIFwib3RoZXJcIi5cbiAqXG4gKiBXaGlsZSBhIHBsdXJhbCBjYXRlZ29yeSBtYXkgbWF0Y2ggbWFueSBudW1iZXJzIChmb3IgZXhhbXBsZSwgaW4gZW4tVVMgbG9jYWxlLCBcIm90aGVyXCIgY2FuIG1hdGNoXG4gKiBhbnkgbnVtYmVyIHRoYXQgaXMgbm90IDEpLCBhbiBleHBsaWNpdCBudW1iZXIgcnVsZSBjYW4gb25seSBtYXRjaCBvbmUgbnVtYmVyLiBGb3IgZXhhbXBsZSwgdGhlXG4gKiBleHBsaWNpdCBudW1iZXIgcnVsZSBmb3IgXCIzXCIgbWF0Y2hlcyB0aGUgbnVtYmVyIDMuIFRoZXJlIGFyZSBleGFtcGxlcyBvZiBwbHVyYWwgY2F0ZWdvcmllc1xuICogYW5kIGV4cGxpY2l0IG51bWJlciBydWxlcyB0aHJvdWdob3V0IHRoZSByZXN0IG9mIHRoaXMgZG9jdW1lbnRhdGlvbi5cbiAqXG4gKiAjIENvbmZpZ3VyaW5nIG5nUGx1cmFsaXplXG4gKiBZb3UgY29uZmlndXJlIG5nUGx1cmFsaXplIGJ5IHByb3ZpZGluZyAyIGF0dHJpYnV0ZXM6IGBjb3VudGAgYW5kIGB3aGVuYC5cbiAqIFlvdSBjYW4gYWxzbyBwcm92aWRlIGFuIG9wdGlvbmFsIGF0dHJpYnV0ZSwgYG9mZnNldGAuXG4gKlxuICogVGhlIHZhbHVlIG9mIHRoZSBgY291bnRgIGF0dHJpYnV0ZSBjYW4gYmUgZWl0aGVyIGEgc3RyaW5nIG9yIGFuIHtAbGluayBndWlkZS9leHByZXNzaW9uXG4gKiBBbmd1bGFyIGV4cHJlc3Npb259OyB0aGVzZSBhcmUgZXZhbHVhdGVkIG9uIHRoZSBjdXJyZW50IHNjb3BlIGZvciBpdHMgYm91bmQgdmFsdWUuXG4gKlxuICogVGhlIGB3aGVuYCBhdHRyaWJ1dGUgc3BlY2lmaWVzIHRoZSBtYXBwaW5ncyBiZXR3ZWVuIHBsdXJhbCBjYXRlZ29yaWVzIGFuZCB0aGUgYWN0dWFsXG4gKiBzdHJpbmcgdG8gYmUgZGlzcGxheWVkLiBUaGUgdmFsdWUgb2YgdGhlIGF0dHJpYnV0ZSBzaG91bGQgYmUgYSBKU09OIG9iamVjdC5cbiAqXG4gKiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgaG93IHRvIGNvbmZpZ3VyZSBuZ1BsdXJhbGl6ZTpcbiAqXG4gKiBgYGBodG1sXG4gKiA8bmctcGx1cmFsaXplIGNvdW50PVwicGVyc29uQ291bnRcIlxuICAgICAgICAgICAgICAgICB3aGVuPVwieycwJzogJ05vYm9keSBpcyB2aWV3aW5nLicsXG4gKiAgICAgICAgICAgICAgICAgICAgICAnb25lJzogJzEgcGVyc29uIGlzIHZpZXdpbmcuJyxcbiAqICAgICAgICAgICAgICAgICAgICAgICdvdGhlcic6ICd7fSBwZW9wbGUgYXJlIHZpZXdpbmcuJ31cIj5cbiAqIDwvbmctcGx1cmFsaXplPlxuICpgYGBcbiAqXG4gKiBJbiB0aGUgZXhhbXBsZSwgYFwiMDogTm9ib2R5IGlzIHZpZXdpbmcuXCJgIGlzIGFuIGV4cGxpY2l0IG51bWJlciBydWxlLiBJZiB5b3UgZGlkIG5vdFxuICogc3BlY2lmeSB0aGlzIHJ1bGUsIDAgd291bGQgYmUgbWF0Y2hlZCB0byB0aGUgXCJvdGhlclwiIGNhdGVnb3J5IGFuZCBcIjAgcGVvcGxlIGFyZSB2aWV3aW5nXCJcbiAqIHdvdWxkIGJlIHNob3duIGluc3RlYWQgb2YgXCJOb2JvZHkgaXMgdmlld2luZ1wiLiBZb3UgY2FuIHNwZWNpZnkgYW4gZXhwbGljaXQgbnVtYmVyIHJ1bGUgZm9yXG4gKiBvdGhlciBudW1iZXJzLCBmb3IgZXhhbXBsZSAxMiwgc28gdGhhdCBpbnN0ZWFkIG9mIHNob3dpbmcgXCIxMiBwZW9wbGUgYXJlIHZpZXdpbmdcIiwgeW91IGNhblxuICogc2hvdyBcImEgZG96ZW4gcGVvcGxlIGFyZSB2aWV3aW5nXCIuXG4gKlxuICogWW91IGNhbiB1c2UgYSBzZXQgb2YgY2xvc2VkIGJyYWNlcyAoYHt9YCkgYXMgYSBwbGFjZWhvbGRlciBmb3IgdGhlIG51bWJlciB0aGF0IHlvdSB3YW50IHN1YnN0aXR1dGVkXG4gKiBpbnRvIHBsdXJhbGl6ZWQgc3RyaW5ncy4gSW4gdGhlIHByZXZpb3VzIGV4YW1wbGUsIEFuZ3VsYXIgd2lsbCByZXBsYWNlIGB7fWAgd2l0aFxuICogPHNwYW4gbmctbm9uLWJpbmRhYmxlPmB7e3BlcnNvbkNvdW50fX1gPC9zcGFuPi4gVGhlIGNsb3NlZCBicmFjZXMgYHt9YCBpcyBhIHBsYWNlaG9sZGVyXG4gKiBmb3IgPHNwYW4gbmctbm9uLWJpbmRhYmxlPnt7bnVtYmVyRXhwcmVzc2lvbn19PC9zcGFuPi5cbiAqXG4gKiAjIENvbmZpZ3VyaW5nIG5nUGx1cmFsaXplIHdpdGggb2Zmc2V0XG4gKiBUaGUgYG9mZnNldGAgYXR0cmlidXRlIGFsbG93cyBmdXJ0aGVyIGN1c3RvbWl6YXRpb24gb2YgcGx1cmFsaXplZCB0ZXh0LCB3aGljaCBjYW4gcmVzdWx0IGluXG4gKiBhIGJldHRlciB1c2VyIGV4cGVyaWVuY2UuIEZvciBleGFtcGxlLCBpbnN0ZWFkIG9mIHRoZSBtZXNzYWdlIFwiNCBwZW9wbGUgYXJlIHZpZXdpbmcgdGhpcyBkb2N1bWVudFwiLFxuICogeW91IG1pZ2h0IGRpc3BsYXkgXCJKb2huLCBLYXRlIGFuZCAyIG90aGVycyBhcmUgdmlld2luZyB0aGlzIGRvY3VtZW50XCIuXG4gKiBUaGUgb2Zmc2V0IGF0dHJpYnV0ZSBhbGxvd3MgeW91IHRvIG9mZnNldCBhIG51bWJlciBieSBhbnkgZGVzaXJlZCB2YWx1ZS5cbiAqIExldCdzIHRha2UgYSBsb29rIGF0IGFuIGV4YW1wbGU6XG4gKlxuICogYGBgaHRtbFxuICogPG5nLXBsdXJhbGl6ZSBjb3VudD1cInBlcnNvbkNvdW50XCIgb2Zmc2V0PTJcbiAqICAgICAgICAgICAgICAgd2hlbj1cInsnMCc6ICdOb2JvZHkgaXMgdmlld2luZy4nLFxuICogICAgICAgICAgICAgICAgICAgICAgJzEnOiAne3twZXJzb24xfX0gaXMgdmlld2luZy4nLFxuICogICAgICAgICAgICAgICAgICAgICAgJzInOiAne3twZXJzb24xfX0gYW5kIHt7cGVyc29uMn19IGFyZSB2aWV3aW5nLicsXG4gKiAgICAgICAgICAgICAgICAgICAgICAnb25lJzogJ3t7cGVyc29uMX19LCB7e3BlcnNvbjJ9fSBhbmQgb25lIG90aGVyIHBlcnNvbiBhcmUgdmlld2luZy4nLFxuICogICAgICAgICAgICAgICAgICAgICAgJ290aGVyJzogJ3t7cGVyc29uMX19LCB7e3BlcnNvbjJ9fSBhbmQge30gb3RoZXIgcGVvcGxlIGFyZSB2aWV3aW5nLid9XCI+XG4gKiA8L25nLXBsdXJhbGl6ZT5cbiAqIGBgYFxuICpcbiAqIE5vdGljZSB0aGF0IHdlIGFyZSBzdGlsbCB1c2luZyB0d28gcGx1cmFsIGNhdGVnb3JpZXMob25lLCBvdGhlciksIGJ1dCB3ZSBhZGRlZFxuICogdGhyZWUgZXhwbGljaXQgbnVtYmVyIHJ1bGVzIDAsIDEgYW5kIDIuXG4gKiBXaGVuIG9uZSBwZXJzb24sIHBlcmhhcHMgSm9obiwgdmlld3MgdGhlIGRvY3VtZW50LCBcIkpvaG4gaXMgdmlld2luZ1wiIHdpbGwgYmUgc2hvd24uXG4gKiBXaGVuIHRocmVlIHBlb3BsZSB2aWV3IHRoZSBkb2N1bWVudCwgbm8gZXhwbGljaXQgbnVtYmVyIHJ1bGUgaXMgZm91bmQsIHNvXG4gKiBhbiBvZmZzZXQgb2YgMiBpcyB0YWtlbiBvZmYgMywgYW5kIEFuZ3VsYXIgdXNlcyAxIHRvIGRlY2lkZSB0aGUgcGx1cmFsIGNhdGVnb3J5LlxuICogSW4gdGhpcyBjYXNlLCBwbHVyYWwgY2F0ZWdvcnkgJ29uZScgaXMgbWF0Y2hlZCBhbmQgXCJKb2huLCBNYXJ5IGFuZCBvbmUgb3RoZXIgcGVyc29uIGFyZSB2aWV3aW5nXCJcbiAqIGlzIHNob3duLlxuICpcbiAqIE5vdGUgdGhhdCB3aGVuIHlvdSBzcGVjaWZ5IG9mZnNldHMsIHlvdSBtdXN0IHByb3ZpZGUgZXhwbGljaXQgbnVtYmVyIHJ1bGVzIGZvclxuICogbnVtYmVycyBmcm9tIDAgdXAgdG8gYW5kIGluY2x1ZGluZyB0aGUgb2Zmc2V0LiBJZiB5b3UgdXNlIGFuIG9mZnNldCBvZiAzLCBmb3IgZXhhbXBsZSxcbiAqIHlvdSBtdXN0IHByb3ZpZGUgZXhwbGljaXQgbnVtYmVyIHJ1bGVzIGZvciAwLCAxLCAyIGFuZCAzLiBZb3UgbXVzdCBhbHNvIHByb3ZpZGUgcGx1cmFsIHN0cmluZ3MgZm9yXG4gKiBwbHVyYWwgY2F0ZWdvcmllcyBcIm9uZVwiIGFuZCBcIm90aGVyXCIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8ZXhwcmVzc2lvbn0gY291bnQgVGhlIHZhcmlhYmxlIHRvIGJlIGJvdW5kIHRvLlxuICogQHBhcmFtIHtzdHJpbmd9IHdoZW4gVGhlIG1hcHBpbmcgYmV0d2VlbiBwbHVyYWwgY2F0ZWdvcnkgdG8gaXRzIGNvcnJlc3BvbmRpbmcgc3RyaW5ncy5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gb2Zmc2V0IE9mZnNldCB0byBkZWR1Y3QgZnJvbSB0aGUgdG90YWwgbnVtYmVyLlxuICpcbiAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGUgbW9kdWxlPVwicGx1cmFsaXplRXhhbXBsZVwiPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgncGx1cmFsaXplRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgJHNjb3BlLnBlcnNvbjEgPSAnSWdvcic7XG4gICAgICAgICAgICAgICRzY29wZS5wZXJzb24yID0gJ01pc2tvJztcbiAgICAgICAgICAgICAgJHNjb3BlLnBlcnNvbkNvdW50ID0gMTtcbiAgICAgICAgICAgIH1dKTtcbiAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgUGVyc29uIDE6PGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJwZXJzb24xXCIgdmFsdWU9XCJJZ29yXCIgLz48YnIvPlxuICAgICAgICAgIFBlcnNvbiAyOjxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwicGVyc29uMlwiIHZhbHVlPVwiTWlza29cIiAvPjxici8+XG4gICAgICAgICAgTnVtYmVyIG9mIFBlb3BsZTo8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInBlcnNvbkNvdW50XCIgdmFsdWU9XCIxXCIgLz48YnIvPlxuXG4gICAgICAgICAgPCEtLS0gRXhhbXBsZSB3aXRoIHNpbXBsZSBwbHVyYWxpemF0aW9uIHJ1bGVzIGZvciBlbiBsb2NhbGUgLS0tPlxuICAgICAgICAgIFdpdGhvdXQgT2Zmc2V0OlxuICAgICAgICAgIDxuZy1wbHVyYWxpemUgY291bnQ9XCJwZXJzb25Db3VudFwiXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGVuPVwieycwJzogJ05vYm9keSBpcyB2aWV3aW5nLicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29uZSc6ICcxIHBlcnNvbiBpcyB2aWV3aW5nLicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ290aGVyJzogJ3t9IHBlb3BsZSBhcmUgdmlld2luZy4nfVwiPlxuICAgICAgICAgIDwvbmctcGx1cmFsaXplPjxicj5cblxuICAgICAgICAgIDwhLS0tIEV4YW1wbGUgd2l0aCBvZmZzZXQgLS0tPlxuICAgICAgICAgIFdpdGggT2Zmc2V0KDIpOlxuICAgICAgICAgIDxuZy1wbHVyYWxpemUgY291bnQ9XCJwZXJzb25Db3VudFwiIG9mZnNldD0yXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGVuPVwieycwJzogJ05vYm9keSBpcyB2aWV3aW5nLicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzEnOiAne3twZXJzb24xfX0gaXMgdmlld2luZy4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcyJzogJ3t7cGVyc29uMX19IGFuZCB7e3BlcnNvbjJ9fSBhcmUgdmlld2luZy4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvbmUnOiAne3twZXJzb24xfX0sIHt7cGVyc29uMn19IGFuZCBvbmUgb3RoZXIgcGVyc29uIGFyZSB2aWV3aW5nLicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ290aGVyJzogJ3t7cGVyc29uMX19LCB7e3BlcnNvbjJ9fSBhbmQge30gb3RoZXIgcGVvcGxlIGFyZSB2aWV3aW5nLid9XCI+XG4gICAgICAgICAgPC9uZy1wbHVyYWxpemU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICBpdCgnc2hvdWxkIHNob3cgY29ycmVjdCBwbHVyYWxpemVkIHN0cmluZycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciB3aXRob3V0T2Zmc2V0ID0gZWxlbWVudC5hbGwoYnkuY3NzKCduZy1wbHVyYWxpemUnKSkuZ2V0KDApO1xuICAgICAgICAgIHZhciB3aXRoT2Zmc2V0ID0gZWxlbWVudC5hbGwoYnkuY3NzKCduZy1wbHVyYWxpemUnKSkuZ2V0KDEpO1xuICAgICAgICAgIHZhciBjb3VudElucHV0ID0gZWxlbWVudChieS5tb2RlbCgncGVyc29uQ291bnQnKSk7XG5cbiAgICAgICAgICBleHBlY3Qod2l0aG91dE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJzEgcGVyc29uIGlzIHZpZXdpbmcuJyk7XG4gICAgICAgICAgZXhwZWN0KHdpdGhPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCdJZ29yIGlzIHZpZXdpbmcuJyk7XG5cbiAgICAgICAgICBjb3VudElucHV0LmNsZWFyKCk7XG4gICAgICAgICAgY291bnRJbnB1dC5zZW5kS2V5cygnMCcpO1xuXG4gICAgICAgICAgZXhwZWN0KHdpdGhvdXRPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCdOb2JvZHkgaXMgdmlld2luZy4nKTtcbiAgICAgICAgICBleHBlY3Qod2l0aE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJ05vYm9keSBpcyB2aWV3aW5nLicpO1xuXG4gICAgICAgICAgY291bnRJbnB1dC5jbGVhcigpO1xuICAgICAgICAgIGNvdW50SW5wdXQuc2VuZEtleXMoJzInKTtcblxuICAgICAgICAgIGV4cGVjdCh3aXRob3V0T2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnMiBwZW9wbGUgYXJlIHZpZXdpbmcuJyk7XG4gICAgICAgICAgZXhwZWN0KHdpdGhPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCdJZ29yIGFuZCBNaXNrbyBhcmUgdmlld2luZy4nKTtcblxuICAgICAgICAgIGNvdW50SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICBjb3VudElucHV0LnNlbmRLZXlzKCczJyk7XG5cbiAgICAgICAgICBleHBlY3Qod2l0aG91dE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJzMgcGVvcGxlIGFyZSB2aWV3aW5nLicpO1xuICAgICAgICAgIGV4cGVjdCh3aXRoT2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnSWdvciwgTWlza28gYW5kIG9uZSBvdGhlciBwZXJzb24gYXJlIHZpZXdpbmcuJyk7XG5cbiAgICAgICAgICBjb3VudElucHV0LmNsZWFyKCk7XG4gICAgICAgICAgY291bnRJbnB1dC5zZW5kS2V5cygnNCcpO1xuXG4gICAgICAgICAgZXhwZWN0KHdpdGhvdXRPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCc0IHBlb3BsZSBhcmUgdmlld2luZy4nKTtcbiAgICAgICAgICBleHBlY3Qod2l0aE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJ0lnb3IsIE1pc2tvIGFuZCAyIG90aGVyIHBlb3BsZSBhcmUgdmlld2luZy4nKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgc2hvdyBkYXRhLWJvdW5kIG5hbWVzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHdpdGhPZmZzZXQgPSBlbGVtZW50LmFsbChieS5jc3MoJ25nLXBsdXJhbGl6ZScpKS5nZXQoMSk7XG4gICAgICAgICAgdmFyIHBlcnNvbkNvdW50ID0gZWxlbWVudChieS5tb2RlbCgncGVyc29uQ291bnQnKSk7XG4gICAgICAgICAgdmFyIHBlcnNvbjEgPSBlbGVtZW50KGJ5Lm1vZGVsKCdwZXJzb24xJykpO1xuICAgICAgICAgIHZhciBwZXJzb24yID0gZWxlbWVudChieS5tb2RlbCgncGVyc29uMicpKTtcbiAgICAgICAgICBwZXJzb25Db3VudC5jbGVhcigpO1xuICAgICAgICAgIHBlcnNvbkNvdW50LnNlbmRLZXlzKCc0Jyk7XG4gICAgICAgICAgcGVyc29uMS5jbGVhcigpO1xuICAgICAgICAgIHBlcnNvbjEuc2VuZEtleXMoJ0RpJyk7XG4gICAgICAgICAgcGVyc29uMi5jbGVhcigpO1xuICAgICAgICAgIHBlcnNvbjIuc2VuZEtleXMoJ1ZvanRhJyk7XG4gICAgICAgICAgZXhwZWN0KHdpdGhPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCdEaSwgVm9qdGEgYW5kIDIgb3RoZXIgcGVvcGxlIGFyZSB2aWV3aW5nLicpO1xuICAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ1BsdXJhbGl6ZURpcmVjdGl2ZSA9IFsnJGxvY2FsZScsICckaW50ZXJwb2xhdGUnLCBmdW5jdGlvbigkbG9jYWxlLCAkaW50ZXJwb2xhdGUpIHtcbiAgdmFyIEJSQUNFID0gL3t9L2csXG4gICAgICBJU19XSEVOID0gL153aGVuKE1pbnVzKT8oLispJC87XG5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0VBJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgdmFyIG51bWJlckV4cCA9IGF0dHIuY291bnQsXG4gICAgICAgICAgd2hlbkV4cCA9IGF0dHIuJGF0dHIud2hlbiAmJiBlbGVtZW50LmF0dHIoYXR0ci4kYXR0ci53aGVuKSwgLy8gd2UgaGF2ZSB7e319IGluIGF0dHJzXG4gICAgICAgICAgb2Zmc2V0ID0gYXR0ci5vZmZzZXQgfHwgMCxcbiAgICAgICAgICB3aGVucyA9IHNjb3BlLiRldmFsKHdoZW5FeHApIHx8IHt9LFxuICAgICAgICAgIHdoZW5zRXhwRm5zID0ge30sXG4gICAgICAgICAgc3RhcnRTeW1ib2wgPSAkaW50ZXJwb2xhdGUuc3RhcnRTeW1ib2woKSxcbiAgICAgICAgICBlbmRTeW1ib2wgPSAkaW50ZXJwb2xhdGUuZW5kU3ltYm9sKCksXG4gICAgICAgICAgYnJhY2VSZXBsYWNlbWVudCA9IHN0YXJ0U3ltYm9sICsgbnVtYmVyRXhwICsgJy0nICsgb2Zmc2V0ICsgZW5kU3ltYm9sLFxuICAgICAgICAgIHdhdGNoUmVtb3ZlciA9IGFuZ3VsYXIubm9vcCxcbiAgICAgICAgICBsYXN0Q291bnQ7XG5cbiAgICAgIGZvckVhY2goYXR0ciwgZnVuY3Rpb24oZXhwcmVzc2lvbiwgYXR0cmlidXRlTmFtZSkge1xuICAgICAgICB2YXIgdG1wTWF0Y2ggPSBJU19XSEVOLmV4ZWMoYXR0cmlidXRlTmFtZSk7XG4gICAgICAgIGlmICh0bXBNYXRjaCkge1xuICAgICAgICAgIHZhciB3aGVuS2V5ID0gKHRtcE1hdGNoWzFdID8gJy0nIDogJycpICsgbG93ZXJjYXNlKHRtcE1hdGNoWzJdKTtcbiAgICAgICAgICB3aGVuc1t3aGVuS2V5XSA9IGVsZW1lbnQuYXR0cihhdHRyLiRhdHRyW2F0dHJpYnV0ZU5hbWVdKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBmb3JFYWNoKHdoZW5zLCBmdW5jdGlvbihleHByZXNzaW9uLCBrZXkpIHtcbiAgICAgICAgd2hlbnNFeHBGbnNba2V5XSA9ICRpbnRlcnBvbGF0ZShleHByZXNzaW9uLnJlcGxhY2UoQlJBQ0UsIGJyYWNlUmVwbGFjZW1lbnQpKTtcblxuICAgICAgfSk7XG5cbiAgICAgIHNjb3BlLiR3YXRjaChudW1iZXJFeHAsIGZ1bmN0aW9uIG5nUGx1cmFsaXplV2F0Y2hBY3Rpb24obmV3VmFsKSB7XG4gICAgICAgIHZhciBjb3VudCA9IHBhcnNlRmxvYXQobmV3VmFsKTtcbiAgICAgICAgdmFyIGNvdW50SXNOYU4gPSBpc05hTihjb3VudCk7XG5cbiAgICAgICAgaWYgKCFjb3VudElzTmFOICYmICEoY291bnQgaW4gd2hlbnMpKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhwbGljaXQgbnVtYmVyIHJ1bGUgc3VjaCBhcyAxLCAyLCAzLi4uIGlzIGRlZmluZWQsIGp1c3QgdXNlIGl0LlxuICAgICAgICAgIC8vIE90aGVyd2lzZSwgY2hlY2sgaXQgYWdhaW5zdCBwbHVyYWxpemF0aW9uIHJ1bGVzIGluICRsb2NhbGUgc2VydmljZS5cbiAgICAgICAgICBjb3VudCA9ICRsb2NhbGUucGx1cmFsQ2F0KGNvdW50IC0gb2Zmc2V0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIGJvdGggYGNvdW50YCBhbmQgYGxhc3RDb3VudGAgYXJlIE5hTiwgd2UgZG9uJ3QgbmVlZCB0byByZS1yZWdpc3RlciBhIHdhdGNoLlxuICAgICAgICAvLyBJbiBKUyBgTmFOICE9PSBOYU5gLCBzbyB3ZSBoYXZlIHRvIGV4bGljaXRseSBjaGVjay5cbiAgICAgICAgaWYgKChjb3VudCAhPT0gbGFzdENvdW50KSAmJiAhKGNvdW50SXNOYU4gJiYgaXNOYU4obGFzdENvdW50KSkpIHtcbiAgICAgICAgICB3YXRjaFJlbW92ZXIoKTtcbiAgICAgICAgICB3YXRjaFJlbW92ZXIgPSBzY29wZS4kd2F0Y2god2hlbnNFeHBGbnNbY291bnRdLCB1cGRhdGVFbGVtZW50VGV4dCk7XG4gICAgICAgICAgbGFzdENvdW50ID0gY291bnQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBmdW5jdGlvbiB1cGRhdGVFbGVtZW50VGV4dChuZXdUZXh0KSB7XG4gICAgICAgIGVsZW1lbnQudGV4dChuZXdUZXh0IHx8ICcnKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1JlcGVhdFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ1JlcGVhdGAgZGlyZWN0aXZlIGluc3RhbnRpYXRlcyBhIHRlbXBsYXRlIG9uY2UgcGVyIGl0ZW0gZnJvbSBhIGNvbGxlY3Rpb24uIEVhY2ggdGVtcGxhdGVcbiAqIGluc3RhbmNlIGdldHMgaXRzIG93biBzY29wZSwgd2hlcmUgdGhlIGdpdmVuIGxvb3AgdmFyaWFibGUgaXMgc2V0IHRvIHRoZSBjdXJyZW50IGNvbGxlY3Rpb24gaXRlbSxcbiAqIGFuZCBgJGluZGV4YCBpcyBzZXQgdG8gdGhlIGl0ZW0gaW5kZXggb3Iga2V5LlxuICpcbiAqIFNwZWNpYWwgcHJvcGVydGllcyBhcmUgZXhwb3NlZCBvbiB0aGUgbG9jYWwgc2NvcGUgb2YgZWFjaCB0ZW1wbGF0ZSBpbnN0YW5jZSwgaW5jbHVkaW5nOlxuICpcbiAqIHwgVmFyaWFibGUgIHwgVHlwZSAgICAgICAgICAgIHwgRGV0YWlscyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgYCRpbmRleGAgIHwge0B0eXBlIG51bWJlcn0gIHwgaXRlcmF0b3Igb2Zmc2V0IG9mIHRoZSByZXBlYXRlZCBlbGVtZW50ICgwLi5sZW5ndGgtMSkgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgYCRmaXJzdGAgIHwge0B0eXBlIGJvb2xlYW59IHwgdHJ1ZSBpZiB0aGUgcmVwZWF0ZWQgZWxlbWVudCBpcyBmaXJzdCBpbiB0aGUgaXRlcmF0b3IuICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgYCRtaWRkbGVgIHwge0B0eXBlIGJvb2xlYW59IHwgdHJ1ZSBpZiB0aGUgcmVwZWF0ZWQgZWxlbWVudCBpcyBiZXR3ZWVuIHRoZSBmaXJzdCBhbmQgbGFzdCBpbiB0aGUgaXRlcmF0b3IuIHxcbiAqIHwgYCRsYXN0YCAgIHwge0B0eXBlIGJvb2xlYW59IHwgdHJ1ZSBpZiB0aGUgcmVwZWF0ZWQgZWxlbWVudCBpcyBsYXN0IGluIHRoZSBpdGVyYXRvci4gICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgYCRldmVuYCAgIHwge0B0eXBlIGJvb2xlYW59IHwgdHJ1ZSBpZiB0aGUgaXRlcmF0b3IgcG9zaXRpb24gYCRpbmRleGAgaXMgZXZlbiAob3RoZXJ3aXNlIGZhbHNlKS4gICAgICAgICAgIHxcbiAqIHwgYCRvZGRgICAgIHwge0B0eXBlIGJvb2xlYW59IHwgdHJ1ZSBpZiB0aGUgaXRlcmF0b3IgcG9zaXRpb24gYCRpbmRleGAgaXMgb2RkIChvdGhlcndpc2UgZmFsc2UpLiAgICAgICAgICAgIHxcbiAqXG4gKiBDcmVhdGluZyBhbGlhc2VzIGZvciB0aGVzZSBwcm9wZXJ0aWVzIGlzIHBvc3NpYmxlIHdpdGgge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0luaXQgYG5nSW5pdGB9LlxuICogVGhpcyBtYXkgYmUgdXNlZnVsIHdoZW4sIGZvciBpbnN0YW5jZSwgbmVzdGluZyBuZ1JlcGVhdHMuXG4gKlxuICogIyBJdGVyYXRpbmcgb3ZlciBvYmplY3QgcHJvcGVydGllc1xuICpcbiAqIEl0IGlzIHBvc3NpYmxlIHRvIGdldCBgbmdSZXBlYXRgIHRvIGl0ZXJhdGUgb3ZlciB0aGUgcHJvcGVydGllcyBvZiBhbiBvYmplY3QgdXNpbmcgdGhlIGZvbGxvd2luZ1xuICogc3ludGF4OlxuICpcbiAqIGBgYGpzXG4gKiA8ZGl2IG5nLXJlcGVhdD1cIihrZXksIHZhbHVlKSBpbiBteU9ialwiPiAuLi4gPC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBZb3UgbmVlZCB0byBiZSBhd2FyZSB0aGF0IHRoZSBKYXZhU2NyaXB0IHNwZWNpZmljYXRpb24gZG9lcyBub3QgZGVmaW5lIHdoYXQgb3JkZXJcbiAqIGl0IHdpbGwgcmV0dXJuIHRoZSBrZXlzIGZvciBhbiBvYmplY3QuIEluIG9yZGVyIHRvIGhhdmUgYSBndWFyYW50ZWVkIGRldGVybWluaXN0aWMgb3JkZXJcbiAqIGZvciB0aGUga2V5cywgQW5ndWxhciB2ZXJzaW9ucyB1cCB0byBhbmQgaW5jbHVkaW5nIDEuMyAqKnNvcnQgdGhlIGtleXMgYWxwaGFiZXRpY2FsbHkqKi5cbiAqXG4gKiBJZiB0aGlzIGlzIG5vdCBkZXNpcmVkLCB0aGUgcmVjb21tZW5kZWQgd29ya2Fyb3VuZCBpcyB0byBjb252ZXJ0IHlvdXIgb2JqZWN0IGludG8gYW4gYXJyYXlcbiAqIHRoYXQgaXMgc29ydGVkIGludG8gdGhlIG9yZGVyIHRoYXQgeW91IHByZWZlciBiZWZvcmUgcHJvdmlkaW5nIGl0IHRvIGBuZ1JlcGVhdGAuICBZb3UgY291bGRcbiAqIGRvIHRoaXMgd2l0aCBhIGZpbHRlciBzdWNoIGFzIFt0b0FycmF5RmlsdGVyXShodHRwOi8vbmdtb2R1bGVzLm9yZy9tb2R1bGVzL2FuZ3VsYXItdG9BcnJheUZpbHRlcilcbiAqIG9yIGltcGxlbWVudCBhIGAkd2F0Y2hgIG9uIHRoZSBvYmplY3QgeW91cnNlbGYuXG4gKlxuICogSW4gdmVyc2lvbiAxLjQgd2Ugd2lsbCByZW1vdmUgdGhlIHNvcnRpbmcsIHNpbmNlIGl0IHNlZW1zIHRoYXQgYnJvd3NlcnMgZ2VuZXJhbGx5IGZvbGxvdyB0aGVcbiAqIHN0cmF0ZWd5IG9mIHByb3ZpZGluZyBrZXlzIGluIHRoZSBvcmRlciBpbiB3aGljaCB0aGV5IHdlcmUgZGVmaW5lZCwgYWx0aG91Z2ggdGhlcmUgYXJlIGV4Y2VwdGlvbnNcbiAqIHdoZW4ga2V5cyBhcmUgZGVsZXRlZCBhbmQgcmVpbnN0YXRlZC5cbiAqXG4gKlxuICogIyBTcGVjaWFsIHJlcGVhdCBzdGFydCBhbmQgZW5kIHBvaW50c1xuICogVG8gcmVwZWF0IGEgc2VyaWVzIG9mIGVsZW1lbnRzIGluc3RlYWQgb2YganVzdCBvbmUgcGFyZW50IGVsZW1lbnQsIG5nUmVwZWF0IChhcyB3ZWxsIGFzIG90aGVyIG5nIGRpcmVjdGl2ZXMpIHN1cHBvcnRzIGV4dGVuZGluZ1xuICogdGhlIHJhbmdlIG9mIHRoZSByZXBlYXRlciBieSBkZWZpbmluZyBleHBsaWNpdCBzdGFydCBhbmQgZW5kIHBvaW50cyBieSB1c2luZyAqKm5nLXJlcGVhdC1zdGFydCoqIGFuZCAqKm5nLXJlcGVhdC1lbmQqKiByZXNwZWN0aXZlbHkuXG4gKiBUaGUgKipuZy1yZXBlYXQtc3RhcnQqKiBkaXJlY3RpdmUgd29ya3MgdGhlIHNhbWUgYXMgKipuZy1yZXBlYXQqKiwgYnV0IHdpbGwgcmVwZWF0IGFsbCB0aGUgSFRNTCBjb2RlIChpbmNsdWRpbmcgdGhlIHRhZyBpdCdzIGRlZmluZWQgb24pXG4gKiB1cCB0byBhbmQgaW5jbHVkaW5nIHRoZSBlbmRpbmcgSFRNTCB0YWcgd2hlcmUgKipuZy1yZXBlYXQtZW5kKiogaXMgcGxhY2VkLlxuICpcbiAqIFRoZSBleGFtcGxlIGJlbG93IG1ha2VzIHVzZSBvZiB0aGlzIGZlYXR1cmU6XG4gKiBgYGBodG1sXG4gKiAgIDxoZWFkZXIgbmctcmVwZWF0LXN0YXJ0PVwiaXRlbSBpbiBpdGVtc1wiPlxuICogICAgIEhlYWRlciB7eyBpdGVtIH19XG4gKiAgIDwvaGVhZGVyPlxuICogICA8ZGl2IGNsYXNzPVwiYm9keVwiPlxuICogICAgIEJvZHkge3sgaXRlbSB9fVxuICogICA8L2Rpdj5cbiAqICAgPGZvb3RlciBuZy1yZXBlYXQtZW5kPlxuICogICAgIEZvb3RlciB7eyBpdGVtIH19XG4gKiAgIDwvZm9vdGVyPlxuICogYGBgXG4gKlxuICogQW5kIHdpdGggYW4gaW5wdXQgb2Yge0B0eXBlIFsnQScsJ0InXX0gZm9yIHRoZSBpdGVtcyB2YXJpYWJsZSBpbiB0aGUgZXhhbXBsZSBhYm92ZSwgdGhlIG91dHB1dCB3aWxsIGV2YWx1YXRlIHRvOlxuICogYGBgaHRtbFxuICogICA8aGVhZGVyPlxuICogICAgIEhlYWRlciBBXG4gKiAgIDwvaGVhZGVyPlxuICogICA8ZGl2IGNsYXNzPVwiYm9keVwiPlxuICogICAgIEJvZHkgQVxuICogICA8L2Rpdj5cbiAqICAgPGZvb3Rlcj5cbiAqICAgICBGb290ZXIgQVxuICogICA8L2Zvb3Rlcj5cbiAqICAgPGhlYWRlcj5cbiAqICAgICBIZWFkZXIgQlxuICogICA8L2hlYWRlcj5cbiAqICAgPGRpdiBjbGFzcz1cImJvZHlcIj5cbiAqICAgICBCb2R5IEJcbiAqICAgPC9kaXY+XG4gKiAgIDxmb290ZXI+XG4gKiAgICAgRm9vdGVyIEJcbiAqICAgPC9mb290ZXI+XG4gKiBgYGBcbiAqXG4gKiBUaGUgY3VzdG9tIHN0YXJ0IGFuZCBlbmQgcG9pbnRzIGZvciBuZ1JlcGVhdCBhbHNvIHN1cHBvcnQgYWxsIG90aGVyIEhUTUwgZGlyZWN0aXZlIHN5bnRheCBmbGF2b3JzIHByb3ZpZGVkIGluIEFuZ3VsYXJKUyAoc3VjaFxuICogYXMgKipkYXRhLW5nLXJlcGVhdC1zdGFydCoqLCAqKngtbmctcmVwZWF0LXN0YXJ0KiogYW5kICoqbmc6cmVwZWF0LXN0YXJ0KiopLlxuICpcbiAqIEBhbmltYXRpb25zXG4gKiAqKi5lbnRlcioqIC0gd2hlbiBhIG5ldyBpdGVtIGlzIGFkZGVkIHRvIHRoZSBsaXN0IG9yIHdoZW4gYW4gaXRlbSBpcyByZXZlYWxlZCBhZnRlciBhIGZpbHRlclxuICpcbiAqICoqLmxlYXZlKiogLSB3aGVuIGFuIGl0ZW0gaXMgcmVtb3ZlZCBmcm9tIHRoZSBsaXN0IG9yIHdoZW4gYW4gaXRlbSBpcyBmaWx0ZXJlZCBvdXRcbiAqXG4gKiAqKi5tb3ZlKiogLSB3aGVuIGFuIGFkamFjZW50IGl0ZW0gaXMgZmlsdGVyZWQgb3V0IGNhdXNpbmcgYSByZW9yZGVyIG9yIHdoZW4gdGhlIGl0ZW0gY29udGVudHMgYXJlIHJlb3JkZXJlZFxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHNjb3BlXG4gKiBAcHJpb3JpdHkgMTAwMFxuICogQHBhcmFtIHtyZXBlYXRfZXhwcmVzc2lvbn0gbmdSZXBlYXQgVGhlIGV4cHJlc3Npb24gaW5kaWNhdGluZyBob3cgdG8gZW51bWVyYXRlIGEgY29sbGVjdGlvbi4gVGhlc2VcbiAqICAgZm9ybWF0cyBhcmUgY3VycmVudGx5IHN1cHBvcnRlZDpcbiAqXG4gKiAgICogYHZhcmlhYmxlIGluIGV4cHJlc3Npb25gIOKAkyB3aGVyZSB2YXJpYWJsZSBpcyB0aGUgdXNlciBkZWZpbmVkIGxvb3AgdmFyaWFibGUgYW5kIGBleHByZXNzaW9uYFxuICogICAgIGlzIGEgc2NvcGUgZXhwcmVzc2lvbiBnaXZpbmcgdGhlIGNvbGxlY3Rpb24gdG8gZW51bWVyYXRlLlxuICpcbiAqICAgICBGb3IgZXhhbXBsZTogYGFsYnVtIGluIGFydGlzdC5hbGJ1bXNgLlxuICpcbiAqICAgKiBgKGtleSwgdmFsdWUpIGluIGV4cHJlc3Npb25gIOKAkyB3aGVyZSBga2V5YCBhbmQgYHZhbHVlYCBjYW4gYmUgYW55IHVzZXIgZGVmaW5lZCBpZGVudGlmaWVycyxcbiAqICAgICBhbmQgYGV4cHJlc3Npb25gIGlzIHRoZSBzY29wZSBleHByZXNzaW9uIGdpdmluZyB0aGUgY29sbGVjdGlvbiB0byBlbnVtZXJhdGUuXG4gKlxuICogICAgIEZvciBleGFtcGxlOiBgKG5hbWUsIGFnZSkgaW4geydhZGFtJzoxMCwgJ2FtYWxpZSc6MTJ9YC5cbiAqXG4gKiAgICogYHZhcmlhYmxlIGluIGV4cHJlc3Npb24gdHJhY2sgYnkgdHJhY2tpbmdfZXhwcmVzc2lvbmAg4oCTIFlvdSBjYW4gYWxzbyBwcm92aWRlIGFuIG9wdGlvbmFsIHRyYWNraW5nIGZ1bmN0aW9uXG4gKiAgICAgd2hpY2ggY2FuIGJlIHVzZWQgdG8gYXNzb2NpYXRlIHRoZSBvYmplY3RzIGluIHRoZSBjb2xsZWN0aW9uIHdpdGggdGhlIERPTSBlbGVtZW50cy4gSWYgbm8gdHJhY2tpbmcgZnVuY3Rpb25cbiAqICAgICBpcyBzcGVjaWZpZWQgdGhlIG5nLXJlcGVhdCBhc3NvY2lhdGVzIGVsZW1lbnRzIGJ5IGlkZW50aXR5IGluIHRoZSBjb2xsZWN0aW9uLiBJdCBpcyBhbiBlcnJvciB0byBoYXZlXG4gKiAgICAgbW9yZSB0aGFuIG9uZSB0cmFja2luZyBmdW5jdGlvbiB0byByZXNvbHZlIHRvIHRoZSBzYW1lIGtleS4gKFRoaXMgd291bGQgbWVhbiB0aGF0IHR3byBkaXN0aW5jdCBvYmplY3RzIGFyZVxuICogICAgIG1hcHBlZCB0byB0aGUgc2FtZSBET00gZWxlbWVudCwgd2hpY2ggaXMgbm90IHBvc3NpYmxlLikgIEZpbHRlcnMgc2hvdWxkIGJlIGFwcGxpZWQgdG8gdGhlIGV4cHJlc3Npb24sXG4gKiAgICAgYmVmb3JlIHNwZWNpZnlpbmcgYSB0cmFja2luZyBleHByZXNzaW9uLlxuICpcbiAqICAgICBGb3IgZXhhbXBsZTogYGl0ZW0gaW4gaXRlbXNgIGlzIGVxdWl2YWxlbnQgdG8gYGl0ZW0gaW4gaXRlbXMgdHJhY2sgYnkgJGlkKGl0ZW0pYC4gVGhpcyBpbXBsaWVzIHRoYXQgdGhlIERPTSBlbGVtZW50c1xuICogICAgIHdpbGwgYmUgYXNzb2NpYXRlZCBieSBpdGVtIGlkZW50aXR5IGluIHRoZSBhcnJheS5cbiAqXG4gKiAgICAgRm9yIGV4YW1wbGU6IGBpdGVtIGluIGl0ZW1zIHRyYWNrIGJ5ICRpZChpdGVtKWAuIEEgYnVpbHQgaW4gYCRpZCgpYCBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byBhc3NpZ24gYSB1bmlxdWVcbiAqICAgICBgJCRoYXNoS2V5YCBwcm9wZXJ0eSB0byBlYWNoIGl0ZW0gaW4gdGhlIGFycmF5LiBUaGlzIHByb3BlcnR5IGlzIHRoZW4gdXNlZCBhcyBhIGtleSB0byBhc3NvY2lhdGVkIERPTSBlbGVtZW50c1xuICogICAgIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgaXRlbSBpbiB0aGUgYXJyYXkgYnkgaWRlbnRpdHkuIE1vdmluZyB0aGUgc2FtZSBvYmplY3QgaW4gYXJyYXkgd291bGQgbW92ZSB0aGUgRE9NXG4gKiAgICAgZWxlbWVudCBpbiB0aGUgc2FtZSB3YXkgaW4gdGhlIERPTS5cbiAqXG4gKiAgICAgRm9yIGV4YW1wbGU6IGBpdGVtIGluIGl0ZW1zIHRyYWNrIGJ5IGl0ZW0uaWRgIGlzIGEgdHlwaWNhbCBwYXR0ZXJuIHdoZW4gdGhlIGl0ZW1zIGNvbWUgZnJvbSB0aGUgZGF0YWJhc2UuIEluIHRoaXNcbiAqICAgICBjYXNlIHRoZSBvYmplY3QgaWRlbnRpdHkgZG9lcyBub3QgbWF0dGVyLiBUd28gb2JqZWN0cyBhcmUgY29uc2lkZXJlZCBlcXVpdmFsZW50IGFzIGxvbmcgYXMgdGhlaXIgYGlkYFxuICogICAgIHByb3BlcnR5IGlzIHNhbWUuXG4gKlxuICogICAgIEZvciBleGFtcGxlOiBgaXRlbSBpbiBpdGVtcyB8IGZpbHRlcjpzZWFyY2hUZXh0IHRyYWNrIGJ5IGl0ZW0uaWRgIGlzIGEgcGF0dGVybiB0aGF0IG1pZ2h0IGJlIHVzZWQgdG8gYXBwbHkgYSBmaWx0ZXJcbiAqICAgICB0byBpdGVtcyBpbiBjb25qdW5jdGlvbiB3aXRoIGEgdHJhY2tpbmcgZXhwcmVzc2lvbi5cbiAqXG4gKiAgICogYHZhcmlhYmxlIGluIGV4cHJlc3Npb24gYXMgYWxpYXNfZXhwcmVzc2lvbmAg4oCTIFlvdSBjYW4gYWxzbyBwcm92aWRlIGFuIG9wdGlvbmFsIGFsaWFzIGV4cHJlc3Npb24gd2hpY2ggd2lsbCB0aGVuIHN0b3JlIHRoZVxuICogICAgIGludGVybWVkaWF0ZSByZXN1bHRzIG9mIHRoZSByZXBlYXRlciBhZnRlciB0aGUgZmlsdGVycyBoYXZlIGJlZW4gYXBwbGllZC4gVHlwaWNhbGx5IHRoaXMgaXMgdXNlZCB0byByZW5kZXIgYSBzcGVjaWFsIG1lc3NhZ2VcbiAqICAgICB3aGVuIGEgZmlsdGVyIGlzIGFjdGl2ZSBvbiB0aGUgcmVwZWF0ZXIsIGJ1dCB0aGUgZmlsdGVyZWQgcmVzdWx0IHNldCBpcyBlbXB0eS5cbiAqXG4gKiAgICAgRm9yIGV4YW1wbGU6IGBpdGVtIGluIGl0ZW1zIHwgZmlsdGVyOnggYXMgcmVzdWx0c2Agd2lsbCBzdG9yZSB0aGUgZnJhZ21lbnQgb2YgdGhlIHJlcGVhdGVkIGl0ZW1zIGFzIGByZXN1bHRzYCwgYnV0IG9ubHkgYWZ0ZXJcbiAqICAgICB0aGUgaXRlbXMgaGF2ZSBiZWVuIHByb2Nlc3NlZCB0aHJvdWdoIHRoZSBmaWx0ZXIuXG4gKlxuICogQGV4YW1wbGVcbiAqIFRoaXMgZXhhbXBsZSBpbml0aWFsaXplcyB0aGUgc2NvcGUgdG8gYSBsaXN0IG9mIG5hbWVzIGFuZFxuICogdGhlbiB1c2VzIGBuZ1JlcGVhdGAgdG8gZGlzcGxheSBldmVyeSBwZXJzb246XG4gIDxleGFtcGxlIG1vZHVsZT1cIm5nQW5pbWF0ZVwiIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8ZGl2IG5nLWluaXQ9XCJmcmllbmRzID0gW1xuICAgICAgICB7bmFtZTonSm9obicsIGFnZToyNSwgZ2VuZGVyOidib3knfSxcbiAgICAgICAge25hbWU6J0plc3NpZScsIGFnZTozMCwgZ2VuZGVyOidnaXJsJ30sXG4gICAgICAgIHtuYW1lOidKb2hhbm5hJywgYWdlOjI4LCBnZW5kZXI6J2dpcmwnfSxcbiAgICAgICAge25hbWU6J0pveScsIGFnZToxNSwgZ2VuZGVyOidnaXJsJ30sXG4gICAgICAgIHtuYW1lOidNYXJ5JywgYWdlOjI4LCBnZW5kZXI6J2dpcmwnfSxcbiAgICAgICAge25hbWU6J1BldGVyJywgYWdlOjk1LCBnZW5kZXI6J2JveSd9LFxuICAgICAgICB7bmFtZTonU2ViYXN0aWFuJywgYWdlOjUwLCBnZW5kZXI6J2JveSd9LFxuICAgICAgICB7bmFtZTonRXJpa2EnLCBhZ2U6MjcsIGdlbmRlcjonZ2lybCd9LFxuICAgICAgICB7bmFtZTonUGF0cmljaycsIGFnZTo0MCwgZ2VuZGVyOidib3knfSxcbiAgICAgICAge25hbWU6J1NhbWFudGhhJywgYWdlOjYwLCBnZW5kZXI6J2dpcmwnfVxuICAgICAgXVwiPlxuICAgICAgICBJIGhhdmUge3tmcmllbmRzLmxlbmd0aH19IGZyaWVuZHMuIFRoZXkgYXJlOlxuICAgICAgICA8aW5wdXQgdHlwZT1cInNlYXJjaFwiIG5nLW1vZGVsPVwicVwiIHBsYWNlaG9sZGVyPVwiZmlsdGVyIGZyaWVuZHMuLi5cIiAvPlxuICAgICAgICA8dWwgY2xhc3M9XCJleGFtcGxlLWFuaW1hdGUtY29udGFpbmVyXCI+XG4gICAgICAgICAgPGxpIGNsYXNzPVwiYW5pbWF0ZS1yZXBlYXRcIiBuZy1yZXBlYXQ9XCJmcmllbmQgaW4gZnJpZW5kcyB8IGZpbHRlcjpxIGFzIHJlc3VsdHNcIj5cbiAgICAgICAgICAgIFt7eyRpbmRleCArIDF9fV0ge3tmcmllbmQubmFtZX19IHdobyBpcyB7e2ZyaWVuZC5hZ2V9fSB5ZWFycyBvbGQuXG4gICAgICAgICAgPC9saT5cbiAgICAgICAgICA8bGkgY2xhc3M9XCJhbmltYXRlLXJlcGVhdFwiIG5nLWlmPVwicmVzdWx0cy5sZW5ndGggPT0gMFwiPlxuICAgICAgICAgICAgPHN0cm9uZz5ObyByZXN1bHRzIGZvdW5kLi4uPC9zdHJvbmc+XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgPC91bD5cbiAgICAgIDwvZGl2PlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiYW5pbWF0aW9ucy5jc3NcIj5cbiAgICAgIC5leGFtcGxlLWFuaW1hdGUtY29udGFpbmVyIHtcbiAgICAgICAgYmFja2dyb3VuZDp3aGl0ZTtcbiAgICAgICAgYm9yZGVyOjFweCBzb2xpZCBibGFjaztcbiAgICAgICAgbGlzdC1zdHlsZTpub25lO1xuICAgICAgICBtYXJnaW46MDtcbiAgICAgICAgcGFkZGluZzowIDEwcHg7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLXJlcGVhdCB7XG4gICAgICAgIGxpbmUtaGVpZ2h0OjQwcHg7XG4gICAgICAgIGxpc3Qtc3R5bGU6bm9uZTtcbiAgICAgICAgYm94LXNpemluZzpib3JkZXItYm94O1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctbW92ZSxcbiAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1lbnRlcixcbiAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1sZWF2ZSB7XG4gICAgICAgIC13ZWJraXQtdHJhbnNpdGlvbjphbGwgbGluZWFyIDAuNXM7XG4gICAgICAgIHRyYW5zaXRpb246YWxsIGxpbmVhciAwLjVzO1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctbGVhdmUubmctbGVhdmUtYWN0aXZlLFxuICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLW1vdmUsXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctZW50ZXIge1xuICAgICAgICBvcGFjaXR5OjA7XG4gICAgICAgIG1heC1oZWlnaHQ6MDtcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLWxlYXZlLFxuICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLW1vdmUubmctbW92ZS1hY3RpdmUsXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctZW50ZXIubmctZW50ZXItYWN0aXZlIHtcbiAgICAgICAgb3BhY2l0eToxO1xuICAgICAgICBtYXgtaGVpZ2h0OjQwcHg7XG4gICAgICB9XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIHZhciBmcmllbmRzID0gZWxlbWVudC5hbGwoYnkucmVwZWF0ZXIoJ2ZyaWVuZCBpbiBmcmllbmRzJykpO1xuXG4gICAgICBpdCgnc2hvdWxkIHJlbmRlciBpbml0aWFsIGRhdGEgc2V0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdChmcmllbmRzLmNvdW50KCkpLnRvQmUoMTApO1xuICAgICAgICBleHBlY3QoZnJpZW5kcy5nZXQoMCkuZ2V0VGV4dCgpKS50b0VxdWFsKCdbMV0gSm9obiB3aG8gaXMgMjUgeWVhcnMgb2xkLicpO1xuICAgICAgICBleHBlY3QoZnJpZW5kcy5nZXQoMSkuZ2V0VGV4dCgpKS50b0VxdWFsKCdbMl0gSmVzc2llIHdobyBpcyAzMCB5ZWFycyBvbGQuJyk7XG4gICAgICAgIGV4cGVjdChmcmllbmRzLmxhc3QoKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1sxMF0gU2FtYW50aGEgd2hvIGlzIDYwIHllYXJzIG9sZC4nKTtcbiAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnZnJpZW5kcy5sZW5ndGgnKSkuZ2V0VGV4dCgpKVxuICAgICAgICAgICAgLnRvTWF0Y2goXCJJIGhhdmUgMTAgZnJpZW5kcy4gVGhleSBhcmU6XCIpO1xuICAgICAgfSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIHVwZGF0ZSByZXBlYXRlciB3aGVuIGZpbHRlciBwcmVkaWNhdGUgY2hhbmdlcycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGZyaWVuZHMuY291bnQoKSkudG9CZSgxMCk7XG5cbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3EnKSkuc2VuZEtleXMoJ21hJyk7XG5cbiAgICAgICAgIGV4cGVjdChmcmllbmRzLmNvdW50KCkpLnRvQmUoMik7XG4gICAgICAgICBleHBlY3QoZnJpZW5kcy5nZXQoMCkuZ2V0VGV4dCgpKS50b0VxdWFsKCdbMV0gTWFyeSB3aG8gaXMgMjggeWVhcnMgb2xkLicpO1xuICAgICAgICAgZXhwZWN0KGZyaWVuZHMubGFzdCgpLmdldFRleHQoKSkudG9FcXVhbCgnWzJdIFNhbWFudGhhIHdobyBpcyA2MCB5ZWFycyBvbGQuJyk7XG4gICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICovXG52YXIgbmdSZXBlYXREaXJlY3RpdmUgPSBbJyRwYXJzZScsICckYW5pbWF0ZScsIGZ1bmN0aW9uKCRwYXJzZSwgJGFuaW1hdGUpIHtcbiAgdmFyIE5HX1JFTU9WRUQgPSAnJCROR19SRU1PVkVEJztcbiAgdmFyIG5nUmVwZWF0TWluRXJyID0gbWluRXJyKCduZ1JlcGVhdCcpO1xuXG4gIHZhciB1cGRhdGVTY29wZSA9IGZ1bmN0aW9uKHNjb3BlLCBpbmRleCwgdmFsdWVJZGVudGlmaWVyLCB2YWx1ZSwga2V5SWRlbnRpZmllciwga2V5LCBhcnJheUxlbmd0aCkge1xuICAgIC8vIFRPRE8ocGVyZik6IGdlbmVyYXRlIHNldHRlcnMgdG8gc2hhdmUgb2ZmIH40MG1zIG9yIDEtMS41JVxuICAgIHNjb3BlW3ZhbHVlSWRlbnRpZmllcl0gPSB2YWx1ZTtcbiAgICBpZiAoa2V5SWRlbnRpZmllcikgc2NvcGVba2V5SWRlbnRpZmllcl0gPSBrZXk7XG4gICAgc2NvcGUuJGluZGV4ID0gaW5kZXg7XG4gICAgc2NvcGUuJGZpcnN0ID0gKGluZGV4ID09PSAwKTtcbiAgICBzY29wZS4kbGFzdCA9IChpbmRleCA9PT0gKGFycmF5TGVuZ3RoIC0gMSkpO1xuICAgIHNjb3BlLiRtaWRkbGUgPSAhKHNjb3BlLiRmaXJzdCB8fCBzY29wZS4kbGFzdCk7XG4gICAgLy8ganNoaW50IGJpdHdpc2U6IGZhbHNlXG4gICAgc2NvcGUuJG9kZCA9ICEoc2NvcGUuJGV2ZW4gPSAoaW5kZXgmMSkgPT09IDApO1xuICAgIC8vIGpzaGludCBiaXR3aXNlOiB0cnVlXG4gIH07XG5cbiAgdmFyIGdldEJsb2NrU3RhcnQgPSBmdW5jdGlvbihibG9jaykge1xuICAgIHJldHVybiBibG9jay5jbG9uZVswXTtcbiAgfTtcblxuICB2YXIgZ2V0QmxvY2tFbmQgPSBmdW5jdGlvbihibG9jaykge1xuICAgIHJldHVybiBibG9jay5jbG9uZVtibG9jay5jbG9uZS5sZW5ndGggLSAxXTtcbiAgfTtcblxuXG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBtdWx0aUVsZW1lbnQ6IHRydWUsXG4gICAgdHJhbnNjbHVkZTogJ2VsZW1lbnQnLFxuICAgIHByaW9yaXR5OiAxMDAwLFxuICAgIHRlcm1pbmFsOiB0cnVlLFxuICAgICQkdGxiOiB0cnVlLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uIG5nUmVwZWF0Q29tcGlsZSgkZWxlbWVudCwgJGF0dHIpIHtcbiAgICAgIHZhciBleHByZXNzaW9uID0gJGF0dHIubmdSZXBlYXQ7XG4gICAgICB2YXIgbmdSZXBlYXRFbmRDb21tZW50ID0gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCgnIGVuZCBuZ1JlcGVhdDogJyArIGV4cHJlc3Npb24gKyAnICcpO1xuXG4gICAgICB2YXIgbWF0Y2ggPSBleHByZXNzaW9uLm1hdGNoKC9eXFxzKihbXFxzXFxTXSs/KVxccytpblxccysoW1xcc1xcU10rPykoPzpcXHMrYXNcXHMrKFtcXHNcXFNdKz8pKT8oPzpcXHMrdHJhY2tcXHMrYnlcXHMrKFtcXHNcXFNdKz8pKT9cXHMqJC8pO1xuXG4gICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHRocm93IG5nUmVwZWF0TWluRXJyKCdpZXhwJywgXCJFeHBlY3RlZCBleHByZXNzaW9uIGluIGZvcm0gb2YgJ19pdGVtXyBpbiBfY29sbGVjdGlvbl9bIHRyYWNrIGJ5IF9pZF9dJyBidXQgZ290ICd7MH0nLlwiLFxuICAgICAgICAgICAgZXhwcmVzc2lvbik7XG4gICAgICB9XG5cbiAgICAgIHZhciBsaHMgPSBtYXRjaFsxXTtcbiAgICAgIHZhciByaHMgPSBtYXRjaFsyXTtcbiAgICAgIHZhciBhbGlhc0FzID0gbWF0Y2hbM107XG4gICAgICB2YXIgdHJhY2tCeUV4cCA9IG1hdGNoWzRdO1xuXG4gICAgICBtYXRjaCA9IGxocy5tYXRjaCgvXig/OihcXHMqW1xcJFxcd10rKXxcXChcXHMqKFtcXCRcXHddKylcXHMqLFxccyooW1xcJFxcd10rKVxccypcXCkpJC8pO1xuXG4gICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHRocm93IG5nUmVwZWF0TWluRXJyKCdpaWRleHAnLCBcIidfaXRlbV8nIGluICdfaXRlbV8gaW4gX2NvbGxlY3Rpb25fJyBzaG91bGQgYmUgYW4gaWRlbnRpZmllciBvciAnKF9rZXlfLCBfdmFsdWVfKScgZXhwcmVzc2lvbiwgYnV0IGdvdCAnezB9Jy5cIixcbiAgICAgICAgICAgIGxocyk7XG4gICAgICB9XG4gICAgICB2YXIgdmFsdWVJZGVudGlmaWVyID0gbWF0Y2hbM10gfHwgbWF0Y2hbMV07XG4gICAgICB2YXIga2V5SWRlbnRpZmllciA9IG1hdGNoWzJdO1xuXG4gICAgICBpZiAoYWxpYXNBcyAmJiAoIS9eWyRhLXpBLVpfXVskYS16QS1aMC05X10qJC8udGVzdChhbGlhc0FzKSB8fFxuICAgICAgICAgIC9eKG51bGx8dW5kZWZpbmVkfHRoaXN8XFwkaW5kZXh8XFwkZmlyc3R8XFwkbWlkZGxlfFxcJGxhc3R8XFwkZXZlbnxcXCRvZGR8XFwkcGFyZW50fFxcJHJvb3R8XFwkaWQpJC8udGVzdChhbGlhc0FzKSkpIHtcbiAgICAgICAgdGhyb3cgbmdSZXBlYXRNaW5FcnIoJ2JhZGlkZW50JywgXCJhbGlhcyAnezB9JyBpcyBpbnZhbGlkIC0tLSBtdXN0IGJlIGEgdmFsaWQgSlMgaWRlbnRpZmllciB3aGljaCBpcyBub3QgYSByZXNlcnZlZCBuYW1lLlwiLFxuICAgICAgICAgIGFsaWFzQXMpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdHJhY2tCeUV4cEdldHRlciwgdHJhY2tCeUlkRXhwRm4sIHRyYWNrQnlJZEFycmF5Rm4sIHRyYWNrQnlJZE9iakZuO1xuICAgICAgdmFyIGhhc2hGbkxvY2FscyA9IHskaWQ6IGhhc2hLZXl9O1xuXG4gICAgICBpZiAodHJhY2tCeUV4cCkge1xuICAgICAgICB0cmFja0J5RXhwR2V0dGVyID0gJHBhcnNlKHRyYWNrQnlFeHApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJhY2tCeUlkQXJyYXlGbiA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gaGFzaEtleSh2YWx1ZSk7XG4gICAgICAgIH07XG4gICAgICAgIHRyYWNrQnlJZE9iakZuID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5nUmVwZWF0TGluaygkc2NvcGUsICRlbGVtZW50LCAkYXR0ciwgY3RybCwgJHRyYW5zY2x1ZGUpIHtcblxuICAgICAgICBpZiAodHJhY2tCeUV4cEdldHRlcikge1xuICAgICAgICAgIHRyYWNrQnlJZEV4cEZuID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSwgaW5kZXgpIHtcbiAgICAgICAgICAgIC8vIGFzc2lnbiBrZXksIHZhbHVlLCBhbmQgJGluZGV4IHRvIHRoZSBsb2NhbHMgc28gdGhhdCB0aGV5IGNhbiBiZSB1c2VkIGluIGhhc2ggZnVuY3Rpb25zXG4gICAgICAgICAgICBpZiAoa2V5SWRlbnRpZmllcikgaGFzaEZuTG9jYWxzW2tleUlkZW50aWZpZXJdID0ga2V5O1xuICAgICAgICAgICAgaGFzaEZuTG9jYWxzW3ZhbHVlSWRlbnRpZmllcl0gPSB2YWx1ZTtcbiAgICAgICAgICAgIGhhc2hGbkxvY2Fscy4kaW5kZXggPSBpbmRleDtcbiAgICAgICAgICAgIHJldHVybiB0cmFja0J5RXhwR2V0dGVyKCRzY29wZSwgaGFzaEZuTG9jYWxzKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3RvcmUgYSBsaXN0IG9mIGVsZW1lbnRzIGZyb20gcHJldmlvdXMgcnVuLiBUaGlzIGlzIGEgaGFzaCB3aGVyZSBrZXkgaXMgdGhlIGl0ZW0gZnJvbSB0aGVcbiAgICAgICAgLy8gaXRlcmF0b3IsIGFuZCB0aGUgdmFsdWUgaXMgb2JqZWN0cyB3aXRoIGZvbGxvd2luZyBwcm9wZXJ0aWVzLlxuICAgICAgICAvLyAgIC0gc2NvcGU6IGJvdW5kIHNjb3BlXG4gICAgICAgIC8vICAgLSBlbGVtZW50OiBwcmV2aW91cyBlbGVtZW50LlxuICAgICAgICAvLyAgIC0gaW5kZXg6IHBvc2l0aW9uXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFdlIGFyZSB1c2luZyBuby1wcm90byBvYmplY3Qgc28gdGhhdCB3ZSBkb24ndCBuZWVkIHRvIGd1YXJkIGFnYWluc3QgaW5oZXJpdGVkIHByb3BzIHZpYVxuICAgICAgICAvLyBoYXNPd25Qcm9wZXJ0eS5cbiAgICAgICAgdmFyIGxhc3RCbG9ja01hcCA9IGNyZWF0ZU1hcCgpO1xuXG4gICAgICAgIC8vd2F0Y2ggcHJvcHNcbiAgICAgICAgJHNjb3BlLiR3YXRjaENvbGxlY3Rpb24ocmhzLCBmdW5jdGlvbiBuZ1JlcGVhdEFjdGlvbihjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgdmFyIGluZGV4LCBsZW5ndGgsXG4gICAgICAgICAgICAgIHByZXZpb3VzTm9kZSA9ICRlbGVtZW50WzBdLCAgICAgLy8gbm9kZSB0aGF0IGNsb25lZCBub2RlcyBzaG91bGQgYmUgaW5zZXJ0ZWQgYWZ0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbml0aWFsaXplZCB0byB0aGUgY29tbWVudCBub2RlIGFuY2hvclxuICAgICAgICAgICAgICBuZXh0Tm9kZSxcbiAgICAgICAgICAgICAgLy8gU2FtZSBhcyBsYXN0QmxvY2tNYXAgYnV0IGl0IGhhcyB0aGUgY3VycmVudCBzdGF0ZS4gSXQgd2lsbCBiZWNvbWUgdGhlXG4gICAgICAgICAgICAgIC8vIGxhc3RCbG9ja01hcCBvbiB0aGUgbmV4dCBpdGVyYXRpb24uXG4gICAgICAgICAgICAgIG5leHRCbG9ja01hcCA9IGNyZWF0ZU1hcCgpLFxuICAgICAgICAgICAgICBjb2xsZWN0aW9uTGVuZ3RoLFxuICAgICAgICAgICAgICBrZXksIHZhbHVlLCAvLyBrZXkvdmFsdWUgb2YgaXRlcmF0aW9uXG4gICAgICAgICAgICAgIHRyYWNrQnlJZCxcbiAgICAgICAgICAgICAgdHJhY2tCeUlkRm4sXG4gICAgICAgICAgICAgIGNvbGxlY3Rpb25LZXlzLFxuICAgICAgICAgICAgICBibG9jaywgICAgICAgLy8gbGFzdCBvYmplY3QgaW5mb3JtYXRpb24ge3Njb3BlLCBlbGVtZW50LCBpZH1cbiAgICAgICAgICAgICAgbmV4dEJsb2NrT3JkZXIsXG4gICAgICAgICAgICAgIGVsZW1lbnRzVG9SZW1vdmU7XG5cbiAgICAgICAgICBpZiAoYWxpYXNBcykge1xuICAgICAgICAgICAgJHNjb3BlW2FsaWFzQXNdID0gY29sbGVjdGlvbjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICAgIGNvbGxlY3Rpb25LZXlzID0gY29sbGVjdGlvbjtcbiAgICAgICAgICAgIHRyYWNrQnlJZEZuID0gdHJhY2tCeUlkRXhwRm4gfHwgdHJhY2tCeUlkQXJyYXlGbjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJhY2tCeUlkRm4gPSB0cmFja0J5SWRFeHBGbiB8fCB0cmFja0J5SWRPYmpGbjtcbiAgICAgICAgICAgIC8vIGlmIG9iamVjdCwgZXh0cmFjdCBrZXlzLCBzb3J0IHRoZW0gYW5kIHVzZSB0byBkZXRlcm1pbmUgb3JkZXIgb2YgaXRlcmF0aW9uIG92ZXIgb2JqIHByb3BzXG4gICAgICAgICAgICBjb2xsZWN0aW9uS2V5cyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaXRlbUtleSBpbiBjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgICAgIGlmIChjb2xsZWN0aW9uLmhhc093blByb3BlcnR5KGl0ZW1LZXkpICYmIGl0ZW1LZXkuY2hhckF0KDApICE9ICckJykge1xuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25LZXlzLnB1c2goaXRlbUtleSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbGxlY3Rpb25LZXlzLnNvcnQoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb2xsZWN0aW9uTGVuZ3RoID0gY29sbGVjdGlvbktleXMubGVuZ3RoO1xuICAgICAgICAgIG5leHRCbG9ja09yZGVyID0gbmV3IEFycmF5KGNvbGxlY3Rpb25MZW5ndGgpO1xuXG4gICAgICAgICAgLy8gbG9jYXRlIGV4aXN0aW5nIGl0ZW1zXG4gICAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgY29sbGVjdGlvbkxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAga2V5ID0gKGNvbGxlY3Rpb24gPT09IGNvbGxlY3Rpb25LZXlzKSA/IGluZGV4IDogY29sbGVjdGlvbktleXNbaW5kZXhdO1xuICAgICAgICAgICAgdmFsdWUgPSBjb2xsZWN0aW9uW2tleV07XG4gICAgICAgICAgICB0cmFja0J5SWQgPSB0cmFja0J5SWRGbihrZXksIHZhbHVlLCBpbmRleCk7XG4gICAgICAgICAgICBpZiAobGFzdEJsb2NrTWFwW3RyYWNrQnlJZF0pIHtcbiAgICAgICAgICAgICAgLy8gZm91bmQgcHJldmlvdXNseSBzZWVuIGJsb2NrXG4gICAgICAgICAgICAgIGJsb2NrID0gbGFzdEJsb2NrTWFwW3RyYWNrQnlJZF07XG4gICAgICAgICAgICAgIGRlbGV0ZSBsYXN0QmxvY2tNYXBbdHJhY2tCeUlkXTtcbiAgICAgICAgICAgICAgbmV4dEJsb2NrTWFwW3RyYWNrQnlJZF0gPSBibG9jaztcbiAgICAgICAgICAgICAgbmV4dEJsb2NrT3JkZXJbaW5kZXhdID0gYmxvY2s7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5leHRCbG9ja01hcFt0cmFja0J5SWRdKSB7XG4gICAgICAgICAgICAgIC8vIGlmIGNvbGxpc2lvbiBkZXRlY3RlZC4gcmVzdG9yZSBsYXN0QmxvY2tNYXAgYW5kIHRocm93IGFuIGVycm9yXG4gICAgICAgICAgICAgIGZvckVhY2gobmV4dEJsb2NrT3JkZXIsIGZ1bmN0aW9uKGJsb2NrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGJsb2NrICYmIGJsb2NrLnNjb3BlKSBsYXN0QmxvY2tNYXBbYmxvY2suaWRdID0gYmxvY2s7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB0aHJvdyBuZ1JlcGVhdE1pbkVycignZHVwZXMnLFxuICAgICAgICAgICAgICAgICAgXCJEdXBsaWNhdGVzIGluIGEgcmVwZWF0ZXIgYXJlIG5vdCBhbGxvd2VkLiBVc2UgJ3RyYWNrIGJ5JyBleHByZXNzaW9uIHRvIHNwZWNpZnkgdW5pcXVlIGtleXMuIFJlcGVhdGVyOiB7MH0sIER1cGxpY2F0ZSBrZXk6IHsxfSwgRHVwbGljYXRlIHZhbHVlOiB7Mn1cIixcbiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb24sIHRyYWNrQnlJZCwgdmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gbmV3IG5ldmVyIGJlZm9yZSBzZWVuIGJsb2NrXG4gICAgICAgICAgICAgIG5leHRCbG9ja09yZGVyW2luZGV4XSA9IHtpZDogdHJhY2tCeUlkLCBzY29wZTogdW5kZWZpbmVkLCBjbG9uZTogdW5kZWZpbmVkfTtcbiAgICAgICAgICAgICAgbmV4dEJsb2NrTWFwW3RyYWNrQnlJZF0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHJlbW92ZSBsZWZ0b3ZlciBpdGVtc1xuICAgICAgICAgIGZvciAodmFyIGJsb2NrS2V5IGluIGxhc3RCbG9ja01hcCkge1xuICAgICAgICAgICAgYmxvY2sgPSBsYXN0QmxvY2tNYXBbYmxvY2tLZXldO1xuICAgICAgICAgICAgZWxlbWVudHNUb1JlbW92ZSA9IGdldEJsb2NrTm9kZXMoYmxvY2suY2xvbmUpO1xuICAgICAgICAgICAgJGFuaW1hdGUubGVhdmUoZWxlbWVudHNUb1JlbW92ZSk7XG4gICAgICAgICAgICBpZiAoZWxlbWVudHNUb1JlbW92ZVswXS5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgIC8vIGlmIHRoZSBlbGVtZW50IHdhcyBub3QgcmVtb3ZlZCB5ZXQgYmVjYXVzZSBvZiBwZW5kaW5nIGFuaW1hdGlvbiwgbWFyayBpdCBhcyBkZWxldGVkXG4gICAgICAgICAgICAgIC8vIHNvIHRoYXQgd2UgY2FuIGlnbm9yZSBpdCBsYXRlclxuICAgICAgICAgICAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gZWxlbWVudHNUb1JlbW92ZS5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudHNUb1JlbW92ZVtpbmRleF1bTkdfUkVNT1ZFRF0gPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBibG9jay5zY29wZS4kZGVzdHJveSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHdlIGFyZSBub3QgdXNpbmcgZm9yRWFjaCBmb3IgcGVyZiByZWFzb25zICh0cnlpbmcgdG8gYXZvaWQgI2NhbGwpXG4gICAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgY29sbGVjdGlvbkxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAga2V5ID0gKGNvbGxlY3Rpb24gPT09IGNvbGxlY3Rpb25LZXlzKSA/IGluZGV4IDogY29sbGVjdGlvbktleXNbaW5kZXhdO1xuICAgICAgICAgICAgdmFsdWUgPSBjb2xsZWN0aW9uW2tleV07XG4gICAgICAgICAgICBibG9jayA9IG5leHRCbG9ja09yZGVyW2luZGV4XTtcblxuICAgICAgICAgICAgaWYgKGJsb2NrLnNjb3BlKSB7XG4gICAgICAgICAgICAgIC8vIGlmIHdlIGhhdmUgYWxyZWFkeSBzZWVuIHRoaXMgb2JqZWN0LCB0aGVuIHdlIG5lZWQgdG8gcmV1c2UgdGhlXG4gICAgICAgICAgICAgIC8vIGFzc29jaWF0ZWQgc2NvcGUvZWxlbWVudFxuXG4gICAgICAgICAgICAgIG5leHROb2RlID0gcHJldmlvdXNOb2RlO1xuXG4gICAgICAgICAgICAgIC8vIHNraXAgbm9kZXMgdGhhdCBhcmUgYWxyZWFkeSBwZW5kaW5nIHJlbW92YWwgdmlhIGxlYXZlIGFuaW1hdGlvblxuICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBuZXh0Tm9kZS5uZXh0U2libGluZztcbiAgICAgICAgICAgICAgfSB3aGlsZSAobmV4dE5vZGUgJiYgbmV4dE5vZGVbTkdfUkVNT1ZFRF0pO1xuXG4gICAgICAgICAgICAgIGlmIChnZXRCbG9ja1N0YXJ0KGJsb2NrKSAhPSBuZXh0Tm9kZSkge1xuICAgICAgICAgICAgICAgIC8vIGV4aXN0aW5nIGl0ZW0gd2hpY2ggZ290IG1vdmVkXG4gICAgICAgICAgICAgICAgJGFuaW1hdGUubW92ZShnZXRCbG9ja05vZGVzKGJsb2NrLmNsb25lKSwgbnVsbCwganFMaXRlKHByZXZpb3VzTm9kZSkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHByZXZpb3VzTm9kZSA9IGdldEJsb2NrRW5kKGJsb2NrKTtcbiAgICAgICAgICAgICAgdXBkYXRlU2NvcGUoYmxvY2suc2NvcGUsIGluZGV4LCB2YWx1ZUlkZW50aWZpZXIsIHZhbHVlLCBrZXlJZGVudGlmaWVyLCBrZXksIGNvbGxlY3Rpb25MZW5ndGgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gbmV3IGl0ZW0gd2hpY2ggd2UgZG9uJ3Qga25vdyBhYm91dFxuICAgICAgICAgICAgICAkdHJhbnNjbHVkZShmdW5jdGlvbiBuZ1JlcGVhdFRyYW5zY2x1ZGUoY2xvbmUsIHNjb3BlKSB7XG4gICAgICAgICAgICAgICAgYmxvY2suc2NvcGUgPSBzY29wZTtcbiAgICAgICAgICAgICAgICAvLyBodHRwOi8vanNwZXJmLmNvbS9jbG9uZS12cy1jcmVhdGVjb21tZW50XG4gICAgICAgICAgICAgICAgdmFyIGVuZE5vZGUgPSBuZ1JlcGVhdEVuZENvbW1lbnQuY2xvbmVOb2RlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICBjbG9uZVtjbG9uZS5sZW5ndGgrK10gPSBlbmROb2RlO1xuXG4gICAgICAgICAgICAgICAgLy8gVE9ETyhwZXJmKTogc3VwcG9ydCBuYWtlZCBwcmV2aW91c05vZGUgaW4gYGVudGVyYCB0byBhdm9pZCBjcmVhdGlvbiBvZiBqcUxpdGUgd3JhcHBlcj9cbiAgICAgICAgICAgICAgICAkYW5pbWF0ZS5lbnRlcihjbG9uZSwgbnVsbCwganFMaXRlKHByZXZpb3VzTm9kZSkpO1xuICAgICAgICAgICAgICAgIHByZXZpb3VzTm9kZSA9IGVuZE5vZGU7XG4gICAgICAgICAgICAgICAgLy8gTm90ZTogV2Ugb25seSBuZWVkIHRoZSBmaXJzdC9sYXN0IG5vZGUgb2YgdGhlIGNsb25lZCBub2Rlcy5cbiAgICAgICAgICAgICAgICAvLyBIb3dldmVyLCB3ZSBuZWVkIHRvIGtlZXAgdGhlIHJlZmVyZW5jZSB0byB0aGUganFsaXRlIHdyYXBwZXIgYXMgaXQgbWlnaHQgYmUgY2hhbmdlZCBsYXRlclxuICAgICAgICAgICAgICAgIC8vIGJ5IGEgZGlyZWN0aXZlIHdpdGggdGVtcGxhdGVVcmwgd2hlbiBpdHMgdGVtcGxhdGUgYXJyaXZlcy5cbiAgICAgICAgICAgICAgICBibG9jay5jbG9uZSA9IGNsb25lO1xuICAgICAgICAgICAgICAgIG5leHRCbG9ja01hcFtibG9jay5pZF0gPSBibG9jaztcbiAgICAgICAgICAgICAgICB1cGRhdGVTY29wZShibG9jay5zY29wZSwgaW5kZXgsIHZhbHVlSWRlbnRpZmllciwgdmFsdWUsIGtleUlkZW50aWZpZXIsIGtleSwgY29sbGVjdGlvbkxlbmd0aCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBsYXN0QmxvY2tNYXAgPSBuZXh0QmxvY2tNYXA7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XTtcblxudmFyIE5HX0hJREVfQ0xBU1MgPSAnbmctaGlkZSc7XG52YXIgTkdfSElERV9JTl9QUk9HUkVTU19DTEFTUyA9ICduZy1oaWRlLWFuaW1hdGUnO1xuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1Nob3dcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdTaG93YCBkaXJlY3RpdmUgc2hvd3Mgb3IgaGlkZXMgdGhlIGdpdmVuIEhUTUwgZWxlbWVudCBiYXNlZCBvbiB0aGUgZXhwcmVzc2lvblxuICogcHJvdmlkZWQgdG8gdGhlIGBuZ1Nob3dgIGF0dHJpYnV0ZS4gVGhlIGVsZW1lbnQgaXMgc2hvd24gb3IgaGlkZGVuIGJ5IHJlbW92aW5nIG9yIGFkZGluZ1xuICogdGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzIG9udG8gdGhlIGVsZW1lbnQuIFRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcyBpcyBwcmVkZWZpbmVkXG4gKiBpbiBBbmd1bGFySlMgYW5kIHNldHMgdGhlIGRpc3BsYXkgc3R5bGUgdG8gbm9uZSAodXNpbmcgYW4gIWltcG9ydGFudCBmbGFnKS5cbiAqIEZvciBDU1AgbW9kZSBwbGVhc2UgYWRkIGBhbmd1bGFyLWNzcC5jc3NgIHRvIHlvdXIgaHRtbCBmaWxlIChzZWUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NzcCBuZ0NzcH0pLlxuICpcbiAqIGBgYGh0bWxcbiAqIDwhLS0gd2hlbiAkc2NvcGUubXlWYWx1ZSBpcyB0cnV0aHkgKGVsZW1lbnQgaXMgdmlzaWJsZSkgLS0+XG4gKiA8ZGl2IG5nLXNob3c9XCJteVZhbHVlXCI+PC9kaXY+XG4gKlxuICogPCEtLSB3aGVuICRzY29wZS5teVZhbHVlIGlzIGZhbHN5IChlbGVtZW50IGlzIGhpZGRlbikgLS0+XG4gKiA8ZGl2IG5nLXNob3c9XCJteVZhbHVlXCIgY2xhc3M9XCJuZy1oaWRlXCI+PC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBXaGVuIHRoZSBgbmdTaG93YCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIGZhbHN5IHZhbHVlIHRoZW4gdGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzIGlzIGFkZGVkIHRvIHRoZSBjbGFzc1xuICogYXR0cmlidXRlIG9uIHRoZSBlbGVtZW50IGNhdXNpbmcgaXQgdG8gYmVjb21lIGhpZGRlbi4gV2hlbiB0cnV0aHksIHRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcyBpcyByZW1vdmVkXG4gKiBmcm9tIHRoZSBlbGVtZW50IGNhdXNpbmcgdGhlIGVsZW1lbnQgbm90IHRvIGFwcGVhciBoaWRkZW4uXG4gKlxuICogIyMgV2h5IGlzICFpbXBvcnRhbnQgdXNlZD9cbiAqXG4gKiBZb3UgbWF5IGJlIHdvbmRlcmluZyB3aHkgIWltcG9ydGFudCBpcyB1c2VkIGZvciB0aGUgYC5uZy1oaWRlYCBDU1MgY2xhc3MuIFRoaXMgaXMgYmVjYXVzZSB0aGUgYC5uZy1oaWRlYCBzZWxlY3RvclxuICogY2FuIGJlIGVhc2lseSBvdmVycmlkZGVuIGJ5IGhlYXZpZXIgc2VsZWN0b3JzLiBGb3IgZXhhbXBsZSwgc29tZXRoaW5nIGFzIHNpbXBsZVxuICogYXMgY2hhbmdpbmcgdGhlIGRpc3BsYXkgc3R5bGUgb24gYSBIVE1MIGxpc3QgaXRlbSB3b3VsZCBtYWtlIGhpZGRlbiBlbGVtZW50cyBhcHBlYXIgdmlzaWJsZS5cbiAqIFRoaXMgYWxzbyBiZWNvbWVzIGEgYmlnZ2VyIGlzc3VlIHdoZW4gZGVhbGluZyB3aXRoIENTUyBmcmFtZXdvcmtzLlxuICpcbiAqIEJ5IHVzaW5nICFpbXBvcnRhbnQsIHRoZSBzaG93IGFuZCBoaWRlIGJlaGF2aW9yIHdpbGwgd29yayBhcyBleHBlY3RlZCBkZXNwaXRlIGFueSBjbGFzaCBiZXR3ZWVuIENTUyBzZWxlY3RvclxuICogc3BlY2lmaWNpdHkgKHdoZW4gIWltcG9ydGFudCBpc24ndCB1c2VkIHdpdGggYW55IGNvbmZsaWN0aW5nIHN0eWxlcykuIElmIGEgZGV2ZWxvcGVyIGNob29zZXMgdG8gb3ZlcnJpZGUgdGhlXG4gKiBzdHlsaW5nIHRvIGNoYW5nZSBob3cgdG8gaGlkZSBhbiBlbGVtZW50IHRoZW4gaXQgaXMganVzdCBhIG1hdHRlciBvZiB1c2luZyAhaW1wb3J0YW50IGluIHRoZWlyIG93biBDU1MgY29kZS5cbiAqXG4gKiAjIyMgT3ZlcnJpZGluZyBgLm5nLWhpZGVgXG4gKlxuICogQnkgZGVmYXVsdCwgdGhlIGAubmctaGlkZWAgY2xhc3Mgd2lsbCBzdHlsZSB0aGUgZWxlbWVudCB3aXRoIGBkaXNwbGF5OiBub25lIWltcG9ydGFudGAuIElmIHlvdSB3aXNoIHRvIGNoYW5nZVxuICogdGhlIGhpZGUgYmVoYXZpb3Igd2l0aCBuZ1Nob3cvbmdIaWRlIHRoZW4gdGhpcyBjYW4gYmUgYWNoaWV2ZWQgYnkgcmVzdGF0aW5nIHRoZSBzdHlsZXMgZm9yIHRoZSBgLm5nLWhpZGVgXG4gKiBjbGFzcyBDU1MuIE5vdGUgdGhhdCB0aGUgc2VsZWN0b3IgdGhhdCBuZWVkcyB0byBiZSB1c2VkIGlzIGFjdHVhbGx5IGAubmctaGlkZTpub3QoLm5nLWhpZGUtYW5pbWF0ZSlgIHRvIGNvcGVcbiAqIHdpdGggZXh0cmEgYW5pbWF0aW9uIGNsYXNzZXMgdGhhdCBjYW4gYmUgYWRkZWQuXG4gKlxuICogYGBgY3NzXG4gKiAubmctaGlkZTpub3QoLm5nLWhpZGUtYW5pbWF0ZSkge1xuICogICAvJiM0MjsgdGhpcyBpcyBqdXN0IGFub3RoZXIgZm9ybSBvZiBoaWRpbmcgYW4gZWxlbWVudCAmIzQyOy9cbiAqICAgZGlzcGxheTogYmxvY2shaW1wb3J0YW50O1xuICogICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gKiAgIHRvcDogLTk5OTlweDtcbiAqICAgbGVmdDogLTk5OTlweDtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEJ5IGRlZmF1bHQgeW91IGRvbid0IG5lZWQgdG8gb3ZlcnJpZGUgaW4gQ1NTIGFueXRoaW5nIGFuZCB0aGUgYW5pbWF0aW9ucyB3aWxsIHdvcmsgYXJvdW5kIHRoZSBkaXNwbGF5IHN0eWxlLlxuICpcbiAqICMjIEEgbm90ZSBhYm91dCBhbmltYXRpb25zIHdpdGggYG5nU2hvd2BcbiAqXG4gKiBBbmltYXRpb25zIGluIG5nU2hvdy9uZ0hpZGUgd29yayB3aXRoIHRoZSBzaG93IGFuZCBoaWRlIGV2ZW50cyB0aGF0IGFyZSB0cmlnZ2VyZWQgd2hlbiB0aGUgZGlyZWN0aXZlIGV4cHJlc3Npb25cbiAqIGlzIHRydWUgYW5kIGZhbHNlLiBUaGlzIHN5c3RlbSB3b3JrcyBsaWtlIHRoZSBhbmltYXRpb24gc3lzdGVtIHByZXNlbnQgd2l0aCBuZ0NsYXNzIGV4Y2VwdCB0aGF0XG4gKiB5b3UgbXVzdCBhbHNvIGluY2x1ZGUgdGhlICFpbXBvcnRhbnQgZmxhZyB0byBvdmVycmlkZSB0aGUgZGlzcGxheSBwcm9wZXJ0eVxuICogc28gdGhhdCB5b3UgY2FuIHBlcmZvcm0gYW4gYW5pbWF0aW9uIHdoZW4gdGhlIGVsZW1lbnQgaXMgaGlkZGVuIGR1cmluZyB0aGUgdGltZSBvZiB0aGUgYW5pbWF0aW9uLlxuICpcbiAqIGBgYGNzc1xuICogLy9cbiAqIC8vYSB3b3JraW5nIGV4YW1wbGUgY2FuIGJlIGZvdW5kIGF0IHRoZSBib3R0b20gb2YgdGhpcyBwYWdlXG4gKiAvL1xuICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQsIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlIHtcbiAqICAgLyYjNDI7IHRoaXMgaXMgcmVxdWlyZWQgYXMgb2YgMS4zeCB0byBwcm9wZXJseVxuICogICAgICBhcHBseSBhbGwgc3R5bGluZyBpbiBhIHNob3cvaGlkZSBhbmltYXRpb24gJiM0MjsvXG4gKiAgIHRyYW5zaXRpb246IDBzIGxpbmVhciBhbGw7XG4gKiB9XG4gKlxuICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQtYWN0aXZlLFxuICogLm15LWVsZW1lbnQubmctaGlkZS1yZW1vdmUtYWN0aXZlIHtcbiAqICAgLyYjNDI7IHRoZSB0cmFuc2l0aW9uIGlzIGRlZmluZWQgaW4gdGhlIGFjdGl2ZSBjbGFzcyAmIzQyOy9cbiAqICAgdHJhbnNpdGlvbjogMXMgbGluZWFyIGFsbDtcbiAqIH1cbiAqXG4gKiAubXktZWxlbWVudC5uZy1oaWRlLWFkZCB7IC4uLiB9XG4gKiAubXktZWxlbWVudC5uZy1oaWRlLWFkZC5uZy1oaWRlLWFkZC1hY3RpdmUgeyAuLi4gfVxuICogLm15LWVsZW1lbnQubmctaGlkZS1yZW1vdmUgeyAuLi4gfVxuICogLm15LWVsZW1lbnQubmctaGlkZS1yZW1vdmUubmctaGlkZS1yZW1vdmUtYWN0aXZlIHsgLi4uIH1cbiAqIGBgYFxuICpcbiAqIEtlZXAgaW4gbWluZCB0aGF0LCBhcyBvZiBBbmd1bGFySlMgdmVyc2lvbiAxLjMuMC1iZXRhLjExLCB0aGVyZSBpcyBubyBuZWVkIHRvIGNoYW5nZSB0aGUgZGlzcGxheVxuICogcHJvcGVydHkgdG8gYmxvY2sgZHVyaW5nIGFuaW1hdGlvbiBzdGF0ZXMtLW5nQW5pbWF0ZSB3aWxsIGhhbmRsZSB0aGUgc3R5bGUgdG9nZ2xpbmcgYXV0b21hdGljYWxseSBmb3IgeW91LlxuICpcbiAqIEBhbmltYXRpb25zXG4gKiBhZGRDbGFzczogYC5uZy1oaWRlYCAtIGhhcHBlbnMgYWZ0ZXIgdGhlIGBuZ1Nob3dgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgdHJ1dGh5IHZhbHVlIGFuZCB0aGUganVzdCBiZWZvcmUgY29udGVudHMgYXJlIHNldCB0byB2aXNpYmxlXG4gKiByZW1vdmVDbGFzczogYC5uZy1oaWRlYCAtIGhhcHBlbnMgYWZ0ZXIgdGhlIGBuZ1Nob3dgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgbm9uIHRydXRoeSB2YWx1ZSBhbmQganVzdCBiZWZvcmUgdGhlIGNvbnRlbnRzIGFyZSBzZXQgdG8gaGlkZGVuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nU2hvdyBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgdHJ1dGh5XG4gKiAgICAgdGhlbiB0aGUgZWxlbWVudCBpcyBzaG93biBvciBoaWRkZW4gcmVzcGVjdGl2ZWx5LlxuICpcbiAqIEBleGFtcGxlXG4gIDxleGFtcGxlIG1vZHVsZT1cIm5nQW5pbWF0ZVwiIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICBDbGljayBtZTogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY2hlY2tlZFwiPjxici8+XG4gICAgICA8ZGl2PlxuICAgICAgICBTaG93OlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2hlY2stZWxlbWVudCBhbmltYXRlLXNob3dcIiBuZy1zaG93PVwiY2hlY2tlZFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi10aHVtYnMtdXBcIj48L3NwYW4+IEkgc2hvdyB1cCB3aGVuIHlvdXIgY2hlY2tib3ggaXMgY2hlY2tlZC5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIEhpZGU6XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjaGVjay1lbGVtZW50IGFuaW1hdGUtc2hvd1wiIG5nLWhpZGU9XCJjaGVja2VkXCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLXRodW1icy1kb3duXCI+PC9zcGFuPiBJIGhpZGUgd2hlbiB5b3VyIGNoZWNrYm94IGlzIGNoZWNrZWQuXG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJnbHlwaGljb25zLmNzc1wiPlxuICAgICAgQGltcG9ydCB1cmwoLi4vLi4vY29tcG9uZW50cy9ib290c3RyYXAtMy4xLjEvY3NzL2Jvb3RzdHJhcC5jc3MpO1xuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiYW5pbWF0aW9ucy5jc3NcIj5cbiAgICAgIC5hbmltYXRlLXNob3cge1xuICAgICAgICBsaW5lLWhlaWdodDogMjBweDtcbiAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgcGFkZGluZzogMTBweDtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XG4gICAgICAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1zaG93Lm5nLWhpZGUtYWRkLm5nLWhpZGUtYWRkLWFjdGl2ZSxcbiAgICAgIC5hbmltYXRlLXNob3cubmctaGlkZS1yZW1vdmUubmctaGlkZS1yZW1vdmUtYWN0aXZlIHtcbiAgICAgICAgLXdlYmtpdC10cmFuc2l0aW9uOiBhbGwgbGluZWFyIDAuNXM7XG4gICAgICAgIHRyYW5zaXRpb246IGFsbCBsaW5lYXIgMC41cztcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtc2hvdy5uZy1oaWRlIHtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDA7XG4gICAgICAgIG9wYWNpdHk6IDA7XG4gICAgICAgIHBhZGRpbmc6IDAgMTBweDtcbiAgICAgIH1cblxuICAgICAgLmNoZWNrLWVsZW1lbnQge1xuICAgICAgICBwYWRkaW5nOiAxMHB4O1xuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcbiAgICAgICAgYmFja2dyb3VuZDogd2hpdGU7XG4gICAgICB9XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIHZhciB0aHVtYnNVcCA9IGVsZW1lbnQoYnkuY3NzKCdzcGFuLmdseXBoaWNvbi10aHVtYnMtdXAnKSk7XG4gICAgICB2YXIgdGh1bWJzRG93biA9IGVsZW1lbnQoYnkuY3NzKCdzcGFuLmdseXBoaWNvbi10aHVtYnMtZG93bicpKTtcblxuICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1zaG93IC8gbmctaGlkZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICBleHBlY3QodGh1bWJzVXAuaXNEaXNwbGF5ZWQoKSkudG9CZUZhbHN5KCk7XG4gICAgICAgIGV4cGVjdCh0aHVtYnNEb3duLmlzRGlzcGxheWVkKCkpLnRvQmVUcnV0aHkoKTtcblxuICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdjaGVja2VkJykpLmNsaWNrKCk7XG5cbiAgICAgICAgZXhwZWN0KHRodW1ic1VwLmlzRGlzcGxheWVkKCkpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgZXhwZWN0KHRodW1ic0Rvd24uaXNEaXNwbGF5ZWQoKSkudG9CZUZhbHN5KCk7XG4gICAgICB9KTtcbiAgICA8L2ZpbGU+XG4gIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nU2hvd0RpcmVjdGl2ZSA9IFsnJGFuaW1hdGUnLCBmdW5jdGlvbigkYW5pbWF0ZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgbXVsdGlFbGVtZW50OiB0cnVlLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICBzY29wZS4kd2F0Y2goYXR0ci5uZ1Nob3csIGZ1bmN0aW9uIG5nU2hvd1dhdGNoQWN0aW9uKHZhbHVlKSB7XG4gICAgICAgIC8vIHdlJ3JlIGFkZGluZyBhIHRlbXBvcmFyeSwgYW5pbWF0aW9uLXNwZWNpZmljIGNsYXNzIGZvciBuZy1oaWRlIHNpbmNlIHRoaXMgd2F5XG4gICAgICAgIC8vIHdlIGNhbiBjb250cm9sIHdoZW4gdGhlIGVsZW1lbnQgaXMgYWN0dWFsbHkgZGlzcGxheWVkIG9uIHNjcmVlbiB3aXRob3V0IGhhdmluZ1xuICAgICAgICAvLyB0byBoYXZlIGEgZ2xvYmFsL2dyZWVkeSBDU1Mgc2VsZWN0b3IgdGhhdCBicmVha3Mgd2hlbiBvdGhlciBhbmltYXRpb25zIGFyZSBydW4uXG4gICAgICAgIC8vIFJlYWQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzkxMDMjaXNzdWVjb21tZW50LTU4MzM1ODQ1XG4gICAgICAgICRhbmltYXRlW3ZhbHVlID8gJ3JlbW92ZUNsYXNzJyA6ICdhZGRDbGFzcyddKGVsZW1lbnQsIE5HX0hJREVfQ0xBU1MsIHtcbiAgICAgICAgICB0ZW1wQ2xhc3NlczogTkdfSElERV9JTl9QUk9HUkVTU19DTEFTU1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1dO1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdIaWRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nSGlkZWAgZGlyZWN0aXZlIHNob3dzIG9yIGhpZGVzIHRoZSBnaXZlbiBIVE1MIGVsZW1lbnQgYmFzZWQgb24gdGhlIGV4cHJlc3Npb25cbiAqIHByb3ZpZGVkIHRvIHRoZSBgbmdIaWRlYCBhdHRyaWJ1dGUuIFRoZSBlbGVtZW50IGlzIHNob3duIG9yIGhpZGRlbiBieSByZW1vdmluZyBvciBhZGRpbmdcbiAqIHRoZSBgbmctaGlkZWAgQ1NTIGNsYXNzIG9udG8gdGhlIGVsZW1lbnQuIFRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcyBpcyBwcmVkZWZpbmVkXG4gKiBpbiBBbmd1bGFySlMgYW5kIHNldHMgdGhlIGRpc3BsYXkgc3R5bGUgdG8gbm9uZSAodXNpbmcgYW4gIWltcG9ydGFudCBmbGFnKS5cbiAqIEZvciBDU1AgbW9kZSBwbGVhc2UgYWRkIGBhbmd1bGFyLWNzcC5jc3NgIHRvIHlvdXIgaHRtbCBmaWxlIChzZWUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NzcCBuZ0NzcH0pLlxuICpcbiAqIGBgYGh0bWxcbiAqIDwhLS0gd2hlbiAkc2NvcGUubXlWYWx1ZSBpcyB0cnV0aHkgKGVsZW1lbnQgaXMgaGlkZGVuKSAtLT5cbiAqIDxkaXYgbmctaGlkZT1cIm15VmFsdWVcIiBjbGFzcz1cIm5nLWhpZGVcIj48L2Rpdj5cbiAqXG4gKiA8IS0tIHdoZW4gJHNjb3BlLm15VmFsdWUgaXMgZmFsc3kgKGVsZW1lbnQgaXMgdmlzaWJsZSkgLS0+XG4gKiA8ZGl2IG5nLWhpZGU9XCJteVZhbHVlXCI+PC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBXaGVuIHRoZSBgbmdIaWRlYCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHRydXRoeSB2YWx1ZSB0aGVuIHRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcyBpcyBhZGRlZCB0byB0aGUgY2xhc3NcbiAqIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudCBjYXVzaW5nIGl0IHRvIGJlY29tZSBoaWRkZW4uIFdoZW4gZmFsc3ksIHRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcyBpcyByZW1vdmVkXG4gKiBmcm9tIHRoZSBlbGVtZW50IGNhdXNpbmcgdGhlIGVsZW1lbnQgbm90IHRvIGFwcGVhciBoaWRkZW4uXG4gKlxuICogIyMgV2h5IGlzICFpbXBvcnRhbnQgdXNlZD9cbiAqXG4gKiBZb3UgbWF5IGJlIHdvbmRlcmluZyB3aHkgIWltcG9ydGFudCBpcyB1c2VkIGZvciB0aGUgYC5uZy1oaWRlYCBDU1MgY2xhc3MuIFRoaXMgaXMgYmVjYXVzZSB0aGUgYC5uZy1oaWRlYCBzZWxlY3RvclxuICogY2FuIGJlIGVhc2lseSBvdmVycmlkZGVuIGJ5IGhlYXZpZXIgc2VsZWN0b3JzLiBGb3IgZXhhbXBsZSwgc29tZXRoaW5nIGFzIHNpbXBsZVxuICogYXMgY2hhbmdpbmcgdGhlIGRpc3BsYXkgc3R5bGUgb24gYSBIVE1MIGxpc3QgaXRlbSB3b3VsZCBtYWtlIGhpZGRlbiBlbGVtZW50cyBhcHBlYXIgdmlzaWJsZS5cbiAqIFRoaXMgYWxzbyBiZWNvbWVzIGEgYmlnZ2VyIGlzc3VlIHdoZW4gZGVhbGluZyB3aXRoIENTUyBmcmFtZXdvcmtzLlxuICpcbiAqIEJ5IHVzaW5nICFpbXBvcnRhbnQsIHRoZSBzaG93IGFuZCBoaWRlIGJlaGF2aW9yIHdpbGwgd29yayBhcyBleHBlY3RlZCBkZXNwaXRlIGFueSBjbGFzaCBiZXR3ZWVuIENTUyBzZWxlY3RvclxuICogc3BlY2lmaWNpdHkgKHdoZW4gIWltcG9ydGFudCBpc24ndCB1c2VkIHdpdGggYW55IGNvbmZsaWN0aW5nIHN0eWxlcykuIElmIGEgZGV2ZWxvcGVyIGNob29zZXMgdG8gb3ZlcnJpZGUgdGhlXG4gKiBzdHlsaW5nIHRvIGNoYW5nZSBob3cgdG8gaGlkZSBhbiBlbGVtZW50IHRoZW4gaXQgaXMganVzdCBhIG1hdHRlciBvZiB1c2luZyAhaW1wb3J0YW50IGluIHRoZWlyIG93biBDU1MgY29kZS5cbiAqXG4gKiAjIyMgT3ZlcnJpZGluZyBgLm5nLWhpZGVgXG4gKlxuICogQnkgZGVmYXVsdCwgdGhlIGAubmctaGlkZWAgY2xhc3Mgd2lsbCBzdHlsZSB0aGUgZWxlbWVudCB3aXRoIGBkaXNwbGF5OiBub25lIWltcG9ydGFudGAuIElmIHlvdSB3aXNoIHRvIGNoYW5nZVxuICogdGhlIGhpZGUgYmVoYXZpb3Igd2l0aCBuZ1Nob3cvbmdIaWRlIHRoZW4gdGhpcyBjYW4gYmUgYWNoaWV2ZWQgYnkgcmVzdGF0aW5nIHRoZSBzdHlsZXMgZm9yIHRoZSBgLm5nLWhpZGVgXG4gKiBjbGFzcyBpbiBDU1M6XG4gKlxuICogYGBgY3NzXG4gKiAubmctaGlkZSB7XG4gKiAgIC8mIzQyOyB0aGlzIGlzIGp1c3QgYW5vdGhlciBmb3JtIG9mIGhpZGluZyBhbiBlbGVtZW50ICYjNDI7L1xuICogICBkaXNwbGF5OiBibG9jayFpbXBvcnRhbnQ7XG4gKiAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAqICAgdG9wOiAtOTk5OXB4O1xuICogICBsZWZ0OiAtOTk5OXB4O1xuICogfVxuICogYGBgXG4gKlxuICogQnkgZGVmYXVsdCB5b3UgZG9uJ3QgbmVlZCB0byBvdmVycmlkZSBpbiBDU1MgYW55dGhpbmcgYW5kIHRoZSBhbmltYXRpb25zIHdpbGwgd29yayBhcm91bmQgdGhlIGRpc3BsYXkgc3R5bGUuXG4gKlxuICogIyMgQSBub3RlIGFib3V0IGFuaW1hdGlvbnMgd2l0aCBgbmdIaWRlYFxuICpcbiAqIEFuaW1hdGlvbnMgaW4gbmdTaG93L25nSGlkZSB3b3JrIHdpdGggdGhlIHNob3cgYW5kIGhpZGUgZXZlbnRzIHRoYXQgYXJlIHRyaWdnZXJlZCB3aGVuIHRoZSBkaXJlY3RpdmUgZXhwcmVzc2lvblxuICogaXMgdHJ1ZSBhbmQgZmFsc2UuIFRoaXMgc3lzdGVtIHdvcmtzIGxpa2UgdGhlIGFuaW1hdGlvbiBzeXN0ZW0gcHJlc2VudCB3aXRoIG5nQ2xhc3MsIGV4Y2VwdCB0aGF0IHRoZSBgLm5nLWhpZGVgXG4gKiBDU1MgY2xhc3MgaXMgYWRkZWQgYW5kIHJlbW92ZWQgZm9yIHlvdSBpbnN0ZWFkIG9mIHlvdXIgb3duIENTUyBjbGFzcy5cbiAqXG4gKiBgYGBjc3NcbiAqIC8vXG4gKiAvL2Egd29ya2luZyBleGFtcGxlIGNhbiBiZSBmb3VuZCBhdCB0aGUgYm90dG9tIG9mIHRoaXMgcGFnZVxuICogLy9cbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtYWRkLCAubXktZWxlbWVudC5uZy1oaWRlLXJlbW92ZSB7XG4gKiAgIHRyYW5zaXRpb246IDAuNXMgbGluZWFyIGFsbDtcbiAqIH1cbiAqXG4gKiAubXktZWxlbWVudC5uZy1oaWRlLWFkZCB7IC4uLiB9XG4gKiAubXktZWxlbWVudC5uZy1oaWRlLWFkZC5uZy1oaWRlLWFkZC1hY3RpdmUgeyAuLi4gfVxuICogLm15LWVsZW1lbnQubmctaGlkZS1yZW1vdmUgeyAuLi4gfVxuICogLm15LWVsZW1lbnQubmctaGlkZS1yZW1vdmUubmctaGlkZS1yZW1vdmUtYWN0aXZlIHsgLi4uIH1cbiAqIGBgYFxuICpcbiAqIEtlZXAgaW4gbWluZCB0aGF0LCBhcyBvZiBBbmd1bGFySlMgdmVyc2lvbiAxLjMuMC1iZXRhLjExLCB0aGVyZSBpcyBubyBuZWVkIHRvIGNoYW5nZSB0aGUgZGlzcGxheVxuICogcHJvcGVydHkgdG8gYmxvY2sgZHVyaW5nIGFuaW1hdGlvbiBzdGF0ZXMtLW5nQW5pbWF0ZSB3aWxsIGhhbmRsZSB0aGUgc3R5bGUgdG9nZ2xpbmcgYXV0b21hdGljYWxseSBmb3IgeW91LlxuICpcbiAqIEBhbmltYXRpb25zXG4gKiByZW1vdmVDbGFzczogYC5uZy1oaWRlYCAtIGhhcHBlbnMgYWZ0ZXIgdGhlIGBuZ0hpZGVgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgdHJ1dGh5IHZhbHVlIGFuZCBqdXN0IGJlZm9yZSB0aGUgY29udGVudHMgYXJlIHNldCB0byBoaWRkZW5cbiAqIGFkZENsYXNzOiBgLm5nLWhpZGVgIC0gaGFwcGVucyBhZnRlciB0aGUgYG5nSGlkZWAgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBub24gdHJ1dGh5IHZhbHVlIGFuZCBqdXN0IGJlZm9yZSB0aGUgY29udGVudHMgYXJlIHNldCB0byB2aXNpYmxlXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nSGlkZSBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgdHJ1dGh5IHRoZW5cbiAqICAgICB0aGUgZWxlbWVudCBpcyBzaG93biBvciBoaWRkZW4gcmVzcGVjdGl2ZWx5LlxuICpcbiAqIEBleGFtcGxlXG4gIDxleGFtcGxlIG1vZHVsZT1cIm5nQW5pbWF0ZVwiIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICBDbGljayBtZTogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY2hlY2tlZFwiPjxici8+XG4gICAgICA8ZGl2PlxuICAgICAgICBTaG93OlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2hlY2stZWxlbWVudCBhbmltYXRlLWhpZGVcIiBuZy1zaG93PVwiY2hlY2tlZFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi10aHVtYnMtdXBcIj48L3NwYW4+IEkgc2hvdyB1cCB3aGVuIHlvdXIgY2hlY2tib3ggaXMgY2hlY2tlZC5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIEhpZGU6XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjaGVjay1lbGVtZW50IGFuaW1hdGUtaGlkZVwiIG5nLWhpZGU9XCJjaGVja2VkXCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLXRodW1icy1kb3duXCI+PC9zcGFuPiBJIGhpZGUgd2hlbiB5b3VyIGNoZWNrYm94IGlzIGNoZWNrZWQuXG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJnbHlwaGljb25zLmNzc1wiPlxuICAgICAgQGltcG9ydCB1cmwoLi4vLi4vY29tcG9uZW50cy9ib290c3RyYXAtMy4xLjEvY3NzL2Jvb3RzdHJhcC5jc3MpO1xuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiYW5pbWF0aW9ucy5jc3NcIj5cbiAgICAgIC5hbmltYXRlLWhpZGUge1xuICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246IGFsbCBsaW5lYXIgMC41cztcbiAgICAgICAgdHJhbnNpdGlvbjogYWxsIGxpbmVhciAwLjVzO1xuICAgICAgICBsaW5lLWhlaWdodDogMjBweDtcbiAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgcGFkZGluZzogMTBweDtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XG4gICAgICAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1oaWRlLm5nLWhpZGUge1xuICAgICAgICBsaW5lLWhlaWdodDogMDtcbiAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgICAgcGFkZGluZzogMCAxMHB4O1xuICAgICAgfVxuXG4gICAgICAuY2hlY2stZWxlbWVudCB7XG4gICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAgICAgIH1cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgdmFyIHRodW1ic1VwID0gZWxlbWVudChieS5jc3MoJ3NwYW4uZ2x5cGhpY29uLXRodW1icy11cCcpKTtcbiAgICAgIHZhciB0aHVtYnNEb3duID0gZWxlbWVudChieS5jc3MoJ3NwYW4uZ2x5cGhpY29uLXRodW1icy1kb3duJykpO1xuXG4gICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLXNob3cgLyBuZy1oaWRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdCh0aHVtYnNVcC5pc0Rpc3BsYXllZCgpKS50b0JlRmFsc3koKTtcbiAgICAgICAgZXhwZWN0KHRodW1ic0Rvd24uaXNEaXNwbGF5ZWQoKSkudG9CZVRydXRoeSgpO1xuXG4gICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2NoZWNrZWQnKSkuY2xpY2soKTtcblxuICAgICAgICBleHBlY3QodGh1bWJzVXAuaXNEaXNwbGF5ZWQoKSkudG9CZVRydXRoeSgpO1xuICAgICAgICBleHBlY3QodGh1bWJzRG93bi5pc0Rpc3BsYXllZCgpKS50b0JlRmFsc3koKTtcbiAgICAgIH0pO1xuICAgIDwvZmlsZT5cbiAgPC9leGFtcGxlPlxuICovXG52YXIgbmdIaWRlRGlyZWN0aXZlID0gWyckYW5pbWF0ZScsIGZ1bmN0aW9uKCRhbmltYXRlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBtdWx0aUVsZW1lbnQ6IHRydWUsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgIHNjb3BlLiR3YXRjaChhdHRyLm5nSGlkZSwgZnVuY3Rpb24gbmdIaWRlV2F0Y2hBY3Rpb24odmFsdWUpIHtcbiAgICAgICAgLy8gVGhlIGNvbW1lbnQgaW5zaWRlIG9mIHRoZSBuZ1Nob3dEaXJlY3RpdmUgZXhwbGFpbnMgd2h5IHdlIGFkZCBhbmRcbiAgICAgICAgLy8gcmVtb3ZlIGEgdGVtcG9yYXJ5IGNsYXNzIGZvciB0aGUgc2hvdy9oaWRlIGFuaW1hdGlvblxuICAgICAgICAkYW5pbWF0ZVt2YWx1ZSA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXShlbGVtZW50LE5HX0hJREVfQ0xBU1MsIHtcbiAgICAgICAgICB0ZW1wQ2xhc3NlczogTkdfSElERV9JTl9QUk9HUkVTU19DTEFTU1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1dO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nU3R5bGVcbiAqIEByZXN0cmljdCBBQ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ1N0eWxlYCBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBzZXQgQ1NTIHN0eWxlIG9uIGFuIEhUTUwgZWxlbWVudCBjb25kaXRpb25hbGx5LlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ1N0eWxlXG4gKlxuICoge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gd2hpY2ggZXZhbHMgdG8gYW5cbiAqIG9iamVjdCB3aG9zZSBrZXlzIGFyZSBDU1Mgc3R5bGUgbmFtZXMgYW5kIHZhbHVlcyBhcmUgY29ycmVzcG9uZGluZyB2YWx1ZXMgZm9yIHRob3NlIENTU1xuICoga2V5cy5cbiAqXG4gKiBTaW5jZSBzb21lIENTUyBzdHlsZSBuYW1lcyBhcmUgbm90IHZhbGlkIGtleXMgZm9yIGFuIG9iamVjdCwgdGhleSBtdXN0IGJlIHF1b3RlZC5cbiAqIFNlZSB0aGUgJ2JhY2tncm91bmQtY29sb3InIHN0eWxlIGluIHRoZSBleGFtcGxlIGJlbG93LlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJidXR0b25cIiB2YWx1ZT1cInNldCBjb2xvclwiIG5nLWNsaWNrPVwibXlTdHlsZT17Y29sb3I6J3JlZCd9XCI+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwiYnV0dG9uXCIgdmFsdWU9XCJzZXQgYmFja2dyb3VuZFwiIG5nLWNsaWNrPVwibXlTdHlsZT17J2JhY2tncm91bmQtY29sb3InOidibHVlJ31cIj5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJidXR0b25cIiB2YWx1ZT1cImNsZWFyXCIgbmctY2xpY2s9XCJteVN0eWxlPXt9XCI+XG4gICAgICAgIDxici8+XG4gICAgICAgIDxzcGFuIG5nLXN0eWxlPVwibXlTdHlsZVwiPlNhbXBsZSBUZXh0PC9zcGFuPlxuICAgICAgICA8cHJlPm15U3R5bGU9e3tteVN0eWxlfX08L3ByZT5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgc3BhbiB7XG4gICAgICAgICBjb2xvcjogYmxhY2s7XG4gICAgICAgfVxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICB2YXIgY29sb3JTcGFuID0gZWxlbWVudChieS5jc3MoJ3NwYW4nKSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLXN0eWxlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoY29sb3JTcGFuLmdldENzc1ZhbHVlKCdjb2xvcicpKS50b0JlKCdyZ2JhKDAsIDAsIDAsIDEpJyk7XG4gICAgICAgICBlbGVtZW50KGJ5LmNzcygnaW5wdXRbdmFsdWU9XFwnc2V0IGNvbG9yXFwnXScpKS5jbGljaygpO1xuICAgICAgICAgZXhwZWN0KGNvbG9yU3Bhbi5nZXRDc3NWYWx1ZSgnY29sb3InKSkudG9CZSgncmdiYSgyNTUsIDAsIDAsIDEpJyk7XG4gICAgICAgICBlbGVtZW50KGJ5LmNzcygnaW5wdXRbdmFsdWU9Y2xlYXJdJykpLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QoY29sb3JTcGFuLmdldENzc1ZhbHVlKCdjb2xvcicpKS50b0JlKCdyZ2JhKDAsIDAsIDAsIDEpJyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nU3R5bGVEaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZShmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICBzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKGF0dHIubmdTdHlsZSwgZnVuY3Rpb24gbmdTdHlsZVdhdGNoQWN0aW9uKG5ld1N0eWxlcywgb2xkU3R5bGVzKSB7XG4gICAgaWYgKG9sZFN0eWxlcyAmJiAobmV3U3R5bGVzICE9PSBvbGRTdHlsZXMpKSB7XG4gICAgICBmb3JFYWNoKG9sZFN0eWxlcywgZnVuY3Rpb24odmFsLCBzdHlsZSkgeyBlbGVtZW50LmNzcyhzdHlsZSwgJycpO30pO1xuICAgIH1cbiAgICBpZiAobmV3U3R5bGVzKSBlbGVtZW50LmNzcyhuZXdTdHlsZXMpO1xuICB9KTtcbn0pO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nU3dpdGNoXG4gKiBAcmVzdHJpY3QgRUFcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdTd2l0Y2hgIGRpcmVjdGl2ZSBpcyB1c2VkIHRvIGNvbmRpdGlvbmFsbHkgc3dhcCBET00gc3RydWN0dXJlIG9uIHlvdXIgdGVtcGxhdGUgYmFzZWQgb24gYSBzY29wZSBleHByZXNzaW9uLlxuICogRWxlbWVudHMgd2l0aGluIGBuZ1N3aXRjaGAgYnV0IHdpdGhvdXQgYG5nU3dpdGNoV2hlbmAgb3IgYG5nU3dpdGNoRGVmYXVsdGAgZGlyZWN0aXZlcyB3aWxsIGJlIHByZXNlcnZlZCBhdCB0aGUgbG9jYXRpb25cbiAqIGFzIHNwZWNpZmllZCBpbiB0aGUgdGVtcGxhdGUuXG4gKlxuICogVGhlIGRpcmVjdGl2ZSBpdHNlbGYgd29ya3Mgc2ltaWxhciB0byBuZ0luY2x1ZGUsIGhvd2V2ZXIsIGluc3RlYWQgb2YgZG93bmxvYWRpbmcgdGVtcGxhdGUgY29kZSAob3IgbG9hZGluZyBpdFxuICogZnJvbSB0aGUgdGVtcGxhdGUgY2FjaGUpLCBgbmdTd2l0Y2hgIHNpbXBseSBjaG9vc2VzIG9uZSBvZiB0aGUgbmVzdGVkIGVsZW1lbnRzIGFuZCBtYWtlcyBpdCB2aXNpYmxlIGJhc2VkIG9uIHdoaWNoIGVsZW1lbnRcbiAqIG1hdGNoZXMgdGhlIHZhbHVlIG9idGFpbmVkIGZyb20gdGhlIGV2YWx1YXRlZCBleHByZXNzaW9uLiBJbiBvdGhlciB3b3JkcywgeW91IGRlZmluZSBhIGNvbnRhaW5lciBlbGVtZW50XG4gKiAod2hlcmUgeW91IHBsYWNlIHRoZSBkaXJlY3RpdmUpLCBwbGFjZSBhbiBleHByZXNzaW9uIG9uIHRoZSAqKmBvbj1cIi4uLlwiYCBhdHRyaWJ1dGUqKlxuICogKG9yIHRoZSAqKmBuZy1zd2l0Y2g9XCIuLi5cImAgYXR0cmlidXRlKiopLCBkZWZpbmUgYW55IGlubmVyIGVsZW1lbnRzIGluc2lkZSBvZiB0aGUgZGlyZWN0aXZlIGFuZCBwbGFjZVxuICogYSB3aGVuIGF0dHJpYnV0ZSBwZXIgZWxlbWVudC4gVGhlIHdoZW4gYXR0cmlidXRlIGlzIHVzZWQgdG8gaW5mb3JtIG5nU3dpdGNoIHdoaWNoIGVsZW1lbnQgdG8gZGlzcGxheSB3aGVuIHRoZSBvblxuICogZXhwcmVzc2lvbiBpcyBldmFsdWF0ZWQuIElmIGEgbWF0Y2hpbmcgZXhwcmVzc2lvbiBpcyBub3QgZm91bmQgdmlhIGEgd2hlbiBhdHRyaWJ1dGUgdGhlbiBhbiBlbGVtZW50IHdpdGggdGhlIGRlZmF1bHRcbiAqIGF0dHJpYnV0ZSBpcyBkaXNwbGF5ZWQuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIj5cbiAqIEJlIGF3YXJlIHRoYXQgdGhlIGF0dHJpYnV0ZSB2YWx1ZXMgdG8gbWF0Y2ggYWdhaW5zdCBjYW5ub3QgYmUgZXhwcmVzc2lvbnMuIFRoZXkgYXJlIGludGVycHJldGVkXG4gKiBhcyBsaXRlcmFsIHN0cmluZyB2YWx1ZXMgdG8gbWF0Y2ggYWdhaW5zdC5cbiAqIEZvciBleGFtcGxlLCAqKmBuZy1zd2l0Y2gtd2hlbj1cInNvbWVWYWxcImAqKiB3aWxsIG1hdGNoIGFnYWluc3QgdGhlIHN0cmluZyBgXCJzb21lVmFsXCJgIG5vdCBhZ2FpbnN0IHRoZVxuICogdmFsdWUgb2YgdGhlIGV4cHJlc3Npb24gYCRzY29wZS5zb21lVmFsYC5cbiAqIDwvZGl2PlxuXG4gKiBAYW5pbWF0aW9uc1xuICogZW50ZXIgLSBoYXBwZW5zIGFmdGVyIHRoZSBuZ1N3aXRjaCBjb250ZW50cyBjaGFuZ2UgYW5kIHRoZSBtYXRjaGVkIGNoaWxkIGVsZW1lbnQgaXMgcGxhY2VkIGluc2lkZSB0aGUgY29udGFpbmVyXG4gKiBsZWF2ZSAtIGhhcHBlbnMganVzdCBhZnRlciB0aGUgbmdTd2l0Y2ggY29udGVudHMgY2hhbmdlIGFuZCBqdXN0IGJlZm9yZSB0aGUgZm9ybWVyIGNvbnRlbnRzIGFyZSByZW1vdmVkIGZyb20gdGhlIERPTVxuICpcbiAqIEB1c2FnZVxuICpcbiAqIGBgYFxuICogPEFOWSBuZy1zd2l0Y2g9XCJleHByZXNzaW9uXCI+XG4gKiAgIDxBTlkgbmctc3dpdGNoLXdoZW49XCJtYXRjaFZhbHVlMVwiPi4uLjwvQU5ZPlxuICogICA8QU5ZIG5nLXN3aXRjaC13aGVuPVwibWF0Y2hWYWx1ZTJcIj4uLi48L0FOWT5cbiAqICAgPEFOWSBuZy1zd2l0Y2gtZGVmYXVsdD4uLi48L0FOWT5cbiAqIDwvQU5ZPlxuICogYGBgXG4gKlxuICpcbiAqIEBzY29wZVxuICogQHByaW9yaXR5IDEyMDBcbiAqIEBwYXJhbSB7Kn0gbmdTd2l0Y2h8b24gZXhwcmVzc2lvbiB0byBtYXRjaCBhZ2FpbnN0IDx0dD5uZy1zd2l0Y2gtd2hlbjwvdHQ+LlxuICogT24gY2hpbGQgZWxlbWVudHMgYWRkOlxuICpcbiAqICogYG5nU3dpdGNoV2hlbmA6IHRoZSBjYXNlIHN0YXRlbWVudCB0byBtYXRjaCBhZ2FpbnN0LiBJZiBtYXRjaCB0aGVuIHRoaXNcbiAqICAgY2FzZSB3aWxsIGJlIGRpc3BsYXllZC4gSWYgdGhlIHNhbWUgbWF0Y2ggYXBwZWFycyBtdWx0aXBsZSB0aW1lcywgYWxsIHRoZVxuICogICBlbGVtZW50cyB3aWxsIGJlIGRpc3BsYXllZC5cbiAqICogYG5nU3dpdGNoRGVmYXVsdGA6IHRoZSBkZWZhdWx0IGNhc2Ugd2hlbiBubyBvdGhlciBjYXNlIG1hdGNoLiBJZiB0aGVyZVxuICogICBhcmUgbXVsdGlwbGUgZGVmYXVsdCBjYXNlcywgYWxsIG9mIHRoZW0gd2lsbCBiZSBkaXNwbGF5ZWQgd2hlbiBubyBvdGhlclxuICogICBjYXNlIG1hdGNoLlxuICpcbiAqXG4gKiBAZXhhbXBsZVxuICA8ZXhhbXBsZSBtb2R1bGU9XCJzd2l0Y2hFeGFtcGxlXCIgZGVwcz1cImFuZ3VsYXItYW5pbWF0ZS5qc1wiIGFuaW1hdGlvbnM9XCJ0cnVlXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJzZWxlY3Rpb25cIiBuZy1vcHRpb25zPVwiaXRlbSBmb3IgaXRlbSBpbiBpdGVtc1wiPlxuICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgPHR0PnNlbGVjdGlvbj17e3NlbGVjdGlvbn19PC90dD5cbiAgICAgICAgPGhyLz5cbiAgICAgICAgPGRpdiBjbGFzcz1cImFuaW1hdGUtc3dpdGNoLWNvbnRhaW5lclwiXG4gICAgICAgICAgbmctc3dpdGNoIG9uPVwic2VsZWN0aW9uXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYW5pbWF0ZS1zd2l0Y2hcIiBuZy1zd2l0Y2gtd2hlbj1cInNldHRpbmdzXCI+U2V0dGluZ3MgRGl2PC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYW5pbWF0ZS1zd2l0Y2hcIiBuZy1zd2l0Y2gtd2hlbj1cImhvbWVcIj5Ib21lIFNwYW48L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhbmltYXRlLXN3aXRjaFwiIG5nLXN3aXRjaC1kZWZhdWx0PmRlZmF1bHQ8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgYW5ndWxhci5tb2R1bGUoJ3N3aXRjaEV4YW1wbGUnLCBbJ25nQW5pbWF0ZSddKVxuICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICRzY29wZS5pdGVtcyA9IFsnc2V0dGluZ3MnLCAnaG9tZScsICdvdGhlciddO1xuICAgICAgICAgICRzY29wZS5zZWxlY3Rpb24gPSAkc2NvcGUuaXRlbXNbMF07XG4gICAgICAgIH1dKTtcbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cImFuaW1hdGlvbnMuY3NzXCI+XG4gICAgICAuYW5pbWF0ZS1zd2l0Y2gtY29udGFpbmVyIHtcbiAgICAgICAgcG9zaXRpb246cmVsYXRpdmU7XG4gICAgICAgIGJhY2tncm91bmQ6d2hpdGU7XG4gICAgICAgIGJvcmRlcjoxcHggc29saWQgYmxhY2s7XG4gICAgICAgIGhlaWdodDo0MHB4O1xuICAgICAgICBvdmVyZmxvdzpoaWRkZW47XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLXN3aXRjaCB7XG4gICAgICAgIHBhZGRpbmc6MTBweDtcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtc3dpdGNoLm5nLWFuaW1hdGUge1xuICAgICAgICAtd2Via2l0LXRyYW5zaXRpb246YWxsIGN1YmljLWJlemllcigwLjI1MCwgMC40NjAsIDAuNDUwLCAwLjk0MCkgMC41cztcbiAgICAgICAgdHJhbnNpdGlvbjphbGwgY3ViaWMtYmV6aWVyKDAuMjUwLCAwLjQ2MCwgMC40NTAsIDAuOTQwKSAwLjVzO1xuXG4gICAgICAgIHBvc2l0aW9uOmFic29sdXRlO1xuICAgICAgICB0b3A6MDtcbiAgICAgICAgbGVmdDowO1xuICAgICAgICByaWdodDowO1xuICAgICAgICBib3R0b206MDtcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtc3dpdGNoLm5nLWxlYXZlLm5nLWxlYXZlLWFjdGl2ZSxcbiAgICAgIC5hbmltYXRlLXN3aXRjaC5uZy1lbnRlciB7XG4gICAgICAgIHRvcDotNTBweDtcbiAgICAgIH1cbiAgICAgIC5hbmltYXRlLXN3aXRjaC5uZy1sZWF2ZSxcbiAgICAgIC5hbmltYXRlLXN3aXRjaC5uZy1lbnRlci5uZy1lbnRlci1hY3RpdmUge1xuICAgICAgICB0b3A6MDtcbiAgICAgIH1cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgdmFyIHN3aXRjaEVsZW0gPSBlbGVtZW50KGJ5LmNzcygnW25nLXN3aXRjaF0nKSk7XG4gICAgICB2YXIgc2VsZWN0ID0gZWxlbWVudChieS5tb2RlbCgnc2VsZWN0aW9uJykpO1xuXG4gICAgICBpdCgnc2hvdWxkIHN0YXJ0IGluIHNldHRpbmdzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdChzd2l0Y2hFbGVtLmdldFRleHQoKSkudG9NYXRjaCgvU2V0dGluZ3MgRGl2Lyk7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgY2hhbmdlIHRvIGhvbWUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZWN0LmFsbChieS5jc3MoJ29wdGlvbicpKS5nZXQoMSkuY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KHN3aXRjaEVsZW0uZ2V0VGV4dCgpKS50b01hdGNoKC9Ib21lIFNwYW4vKTtcbiAgICAgIH0pO1xuICAgICAgaXQoJ3Nob3VsZCBzZWxlY3QgZGVmYXVsdCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxlY3QuYWxsKGJ5LmNzcygnb3B0aW9uJykpLmdldCgyKS5jbGljaygpO1xuICAgICAgICBleHBlY3Qoc3dpdGNoRWxlbS5nZXRUZXh0KCkpLnRvTWF0Y2goL2RlZmF1bHQvKTtcbiAgICAgIH0pO1xuICAgIDwvZmlsZT5cbiAgPC9leGFtcGxlPlxuICovXG52YXIgbmdTd2l0Y2hEaXJlY3RpdmUgPSBbJyRhbmltYXRlJywgZnVuY3Rpb24oJGFuaW1hdGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0VBJyxcbiAgICByZXF1aXJlOiAnbmdTd2l0Y2gnLFxuXG4gICAgLy8gYXNrcyBmb3IgJHNjb3BlIHRvIGZvb2wgdGhlIEJDIGNvbnRyb2xsZXIgbW9kdWxlXG4gICAgY29udHJvbGxlcjogWyckc2NvcGUnLCBmdW5jdGlvbiBuZ1N3aXRjaENvbnRyb2xsZXIoKSB7XG4gICAgIHRoaXMuY2FzZXMgPSB7fTtcbiAgICB9XSxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0ciwgbmdTd2l0Y2hDb250cm9sbGVyKSB7XG4gICAgICB2YXIgd2F0Y2hFeHByID0gYXR0ci5uZ1N3aXRjaCB8fCBhdHRyLm9uLFxuICAgICAgICAgIHNlbGVjdGVkVHJhbnNjbHVkZXMgPSBbXSxcbiAgICAgICAgICBzZWxlY3RlZEVsZW1lbnRzID0gW10sXG4gICAgICAgICAgcHJldmlvdXNMZWF2ZUFuaW1hdGlvbnMgPSBbXSxcbiAgICAgICAgICBzZWxlY3RlZFNjb3BlcyA9IFtdO1xuXG4gICAgICB2YXIgc3BsaWNlRmFjdG9yeSA9IGZ1bmN0aW9uKGFycmF5LCBpbmRleCkge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHsgYXJyYXkuc3BsaWNlKGluZGV4LCAxKTsgfTtcbiAgICAgIH07XG5cbiAgICAgIHNjb3BlLiR3YXRjaCh3YXRjaEV4cHIsIGZ1bmN0aW9uIG5nU3dpdGNoV2F0Y2hBY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIGksIGlpO1xuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IHByZXZpb3VzTGVhdmVBbmltYXRpb25zLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgICAkYW5pbWF0ZS5jYW5jZWwocHJldmlvdXNMZWF2ZUFuaW1hdGlvbnNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHByZXZpb3VzTGVhdmVBbmltYXRpb25zLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSBzZWxlY3RlZFNjb3Blcy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgICAgdmFyIHNlbGVjdGVkID0gZ2V0QmxvY2tOb2RlcyhzZWxlY3RlZEVsZW1lbnRzW2ldLmNsb25lKTtcbiAgICAgICAgICBzZWxlY3RlZFNjb3Blc1tpXS4kZGVzdHJveSgpO1xuICAgICAgICAgIHZhciBwcm9taXNlID0gcHJldmlvdXNMZWF2ZUFuaW1hdGlvbnNbaV0gPSAkYW5pbWF0ZS5sZWF2ZShzZWxlY3RlZCk7XG4gICAgICAgICAgcHJvbWlzZS50aGVuKHNwbGljZUZhY3RvcnkocHJldmlvdXNMZWF2ZUFuaW1hdGlvbnMsIGkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGVjdGVkRWxlbWVudHMubGVuZ3RoID0gMDtcbiAgICAgICAgc2VsZWN0ZWRTY29wZXMubGVuZ3RoID0gMDtcblxuICAgICAgICBpZiAoKHNlbGVjdGVkVHJhbnNjbHVkZXMgPSBuZ1N3aXRjaENvbnRyb2xsZXIuY2FzZXNbJyEnICsgdmFsdWVdIHx8IG5nU3dpdGNoQ29udHJvbGxlci5jYXNlc1snPyddKSkge1xuICAgICAgICAgIGZvckVhY2goc2VsZWN0ZWRUcmFuc2NsdWRlcywgZnVuY3Rpb24oc2VsZWN0ZWRUcmFuc2NsdWRlKSB7XG4gICAgICAgICAgICBzZWxlY3RlZFRyYW5zY2x1ZGUudHJhbnNjbHVkZShmdW5jdGlvbihjYXNlRWxlbWVudCwgc2VsZWN0ZWRTY29wZSkge1xuICAgICAgICAgICAgICBzZWxlY3RlZFNjb3Blcy5wdXNoKHNlbGVjdGVkU2NvcGUpO1xuICAgICAgICAgICAgICB2YXIgYW5jaG9yID0gc2VsZWN0ZWRUcmFuc2NsdWRlLmVsZW1lbnQ7XG4gICAgICAgICAgICAgIGNhc2VFbGVtZW50W2Nhc2VFbGVtZW50Lmxlbmd0aCsrXSA9IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJyBlbmQgbmdTd2l0Y2hXaGVuOiAnKTtcbiAgICAgICAgICAgICAgdmFyIGJsb2NrID0geyBjbG9uZTogY2FzZUVsZW1lbnQgfTtcblxuICAgICAgICAgICAgICBzZWxlY3RlZEVsZW1lbnRzLnB1c2goYmxvY2spO1xuICAgICAgICAgICAgICAkYW5pbWF0ZS5lbnRlcihjYXNlRWxlbWVudCwgYW5jaG9yLnBhcmVudCgpLCBhbmNob3IpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1dO1xuXG52YXIgbmdTd2l0Y2hXaGVuRGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoe1xuICB0cmFuc2NsdWRlOiAnZWxlbWVudCcsXG4gIHByaW9yaXR5OiAxMjAwLFxuICByZXF1aXJlOiAnXm5nU3dpdGNoJyxcbiAgbXVsdGlFbGVtZW50OiB0cnVlLFxuICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmwsICR0cmFuc2NsdWRlKSB7XG4gICAgY3RybC5jYXNlc1snIScgKyBhdHRycy5uZ1N3aXRjaFdoZW5dID0gKGN0cmwuY2FzZXNbJyEnICsgYXR0cnMubmdTd2l0Y2hXaGVuXSB8fCBbXSk7XG4gICAgY3RybC5jYXNlc1snIScgKyBhdHRycy5uZ1N3aXRjaFdoZW5dLnB1c2goeyB0cmFuc2NsdWRlOiAkdHJhbnNjbHVkZSwgZWxlbWVudDogZWxlbWVudCB9KTtcbiAgfVxufSk7XG5cbnZhciBuZ1N3aXRjaERlZmF1bHREaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZSh7XG4gIHRyYW5zY2x1ZGU6ICdlbGVtZW50JyxcbiAgcHJpb3JpdHk6IDEyMDAsXG4gIHJlcXVpcmU6ICdebmdTd2l0Y2gnLFxuICBtdWx0aUVsZW1lbnQ6IHRydWUsXG4gIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkdHJhbnNjbHVkZSkge1xuICAgIGN0cmwuY2FzZXNbJz8nXSA9IChjdHJsLmNhc2VzWyc/J10gfHwgW10pO1xuICAgIGN0cmwuY2FzZXNbJz8nXS5wdXNoKHsgdHJhbnNjbHVkZTogJHRyYW5zY2x1ZGUsIGVsZW1lbnQ6IGVsZW1lbnQgfSk7XG4gICB9XG59KTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1RyYW5zY2x1ZGVcbiAqIEByZXN0cmljdCBFQUNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERpcmVjdGl2ZSB0aGF0IG1hcmtzIHRoZSBpbnNlcnRpb24gcG9pbnQgZm9yIHRoZSB0cmFuc2NsdWRlZCBET00gb2YgdGhlIG5lYXJlc3QgcGFyZW50IGRpcmVjdGl2ZSB0aGF0IHVzZXMgdHJhbnNjbHVzaW9uLlxuICpcbiAqIEFueSBleGlzdGluZyBjb250ZW50IG9mIHRoZSBlbGVtZW50IHRoYXQgdGhpcyBkaXJlY3RpdmUgaXMgcGxhY2VkIG9uIHdpbGwgYmUgcmVtb3ZlZCBiZWZvcmUgdGhlIHRyYW5zY2x1ZGVkIGNvbnRlbnQgaXMgaW5zZXJ0ZWQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG1vZHVsZT1cInRyYW5zY2x1ZGVFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCd0cmFuc2NsdWRlRXhhbXBsZScsIFtdKVxuICAgICAgICAgIC5kaXJlY3RpdmUoJ3BhbmUnLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICAgICAgICAgICAgIHNjb3BlOiB7IHRpdGxlOidAJyB9LFxuICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IHN0eWxlPVwiYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XCI+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBzdHlsZT1cImJhY2tncm91bmQtY29sb3I6IGdyYXlcIj57e3RpdGxlfX08L2Rpdj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICc8bmctdHJhbnNjbHVkZT48L25nLXRyYW5zY2x1ZGU+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2PidcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgfSlcbiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICRzY29wZS50aXRsZSA9ICdMb3JlbSBJcHN1bSc7XG4gICAgICAgICAgICRzY29wZS50ZXh0ID0gJ05lcXVlIHBvcnJvIHF1aXNxdWFtIGVzdCBxdWkgZG9sb3JlbSBpcHN1bSBxdWlhIGRvbG9yLi4uJztcbiAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgPGlucHV0IG5nLW1vZGVsPVwidGl0bGVcIj4gPGJyLz5cbiAgICAgICAgIDx0ZXh0YXJlYSBuZy1tb2RlbD1cInRleHRcIj48L3RleHRhcmVhPiA8YnIvPlxuICAgICAgICAgPHBhbmUgdGl0bGU9XCJ7e3RpdGxlfX1cIj57e3RleHR9fTwvcGFuZT5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIGl0KCdzaG91bGQgaGF2ZSB0cmFuc2NsdWRlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciB0aXRsZUVsZW1lbnQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd0aXRsZScpKTtcbiAgICAgICAgICB0aXRsZUVsZW1lbnQuY2xlYXIoKTtcbiAgICAgICAgICB0aXRsZUVsZW1lbnQuc2VuZEtleXMoJ1RJVExFJyk7XG4gICAgICAgICAgdmFyIHRleHRFbGVtZW50ID0gZWxlbWVudChieS5tb2RlbCgndGV4dCcpKTtcbiAgICAgICAgICB0ZXh0RWxlbWVudC5jbGVhcigpO1xuICAgICAgICAgIHRleHRFbGVtZW50LnNlbmRLZXlzKCdURVhUJyk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygndGl0bGUnKSkuZ2V0VGV4dCgpKS50b0VxdWFsKCdUSVRMRScpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ3RleHQnKSkuZ2V0VGV4dCgpKS50b0VxdWFsKCdURVhUJyk7XG4gICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKlxuICovXG52YXIgbmdUcmFuc2NsdWRlRGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoe1xuICByZXN0cmljdDogJ0VBQycsXG4gIGxpbms6IGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycywgY29udHJvbGxlciwgJHRyYW5zY2x1ZGUpIHtcbiAgICBpZiAoISR0cmFuc2NsdWRlKSB7XG4gICAgICB0aHJvdyBtaW5FcnIoJ25nVHJhbnNjbHVkZScpKCdvcnBoYW4nLFxuICAgICAgICdJbGxlZ2FsIHVzZSBvZiBuZ1RyYW5zY2x1ZGUgZGlyZWN0aXZlIGluIHRoZSB0ZW1wbGF0ZSEgJyArXG4gICAgICAgJ05vIHBhcmVudCBkaXJlY3RpdmUgdGhhdCByZXF1aXJlcyBhIHRyYW5zY2x1c2lvbiBmb3VuZC4gJyArXG4gICAgICAgJ0VsZW1lbnQ6IHswfScsXG4gICAgICAgc3RhcnRpbmdUYWcoJGVsZW1lbnQpKTtcbiAgICB9XG5cbiAgICAkdHJhbnNjbHVkZShmdW5jdGlvbihjbG9uZSkge1xuICAgICAgJGVsZW1lbnQuZW1wdHkoKTtcbiAgICAgICRlbGVtZW50LmFwcGVuZChjbG9uZSk7XG4gICAgfSk7XG4gIH1cbn0pO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIHNjcmlwdFxuICogQHJlc3RyaWN0IEVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIExvYWQgdGhlIGNvbnRlbnQgb2YgYSBgPHNjcmlwdD5gIGVsZW1lbnQgaW50byB7QGxpbmsgbmcuJHRlbXBsYXRlQ2FjaGUgYCR0ZW1wbGF0ZUNhY2hlYH0sIHNvIHRoYXQgdGhlXG4gKiB0ZW1wbGF0ZSBjYW4gYmUgdXNlZCBieSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nSW5jbHVkZSBgbmdJbmNsdWRlYH0sXG4gKiB7QGxpbmsgbmdSb3V0ZS5kaXJlY3RpdmU6bmdWaWV3IGBuZ1ZpZXdgfSwgb3Ige0BsaW5rIGd1aWRlL2RpcmVjdGl2ZSBkaXJlY3RpdmVzfS4gVGhlIHR5cGUgb2YgdGhlXG4gKiBgPHNjcmlwdD5gIGVsZW1lbnQgbXVzdCBiZSBzcGVjaWZpZWQgYXMgYHRleHQvbmctdGVtcGxhdGVgLCBhbmQgYSBjYWNoZSBuYW1lIGZvciB0aGUgdGVtcGxhdGUgbXVzdCBiZVxuICogYXNzaWduZWQgdGhyb3VnaCB0aGUgZWxlbWVudCdzIGBpZGAsIHdoaWNoIGNhbiB0aGVuIGJlIHVzZWQgYXMgYSBkaXJlY3RpdmUncyBgdGVtcGxhdGVVcmxgLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIE11c3QgYmUgc2V0IHRvIGAndGV4dC9uZy10ZW1wbGF0ZSdgLlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIENhY2hlIG5hbWUgb2YgdGhlIHRlbXBsYXRlLlxuICpcbiAqIEBleGFtcGxlXG4gIDxleGFtcGxlPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8c2NyaXB0IHR5cGU9XCJ0ZXh0L25nLXRlbXBsYXRlXCIgaWQ9XCIvdHBsLmh0bWxcIj5cbiAgICAgICAgQ29udGVudCBvZiB0aGUgdGVtcGxhdGUuXG4gICAgICA8L3NjcmlwdD5cblxuICAgICAgPGEgbmctY2xpY2s9XCJjdXJyZW50VHBsPScvdHBsLmh0bWwnXCIgaWQ9XCJ0cGwtbGlua1wiPkxvYWQgaW5saW5lZCB0ZW1wbGF0ZTwvYT5cbiAgICAgIDxkaXYgaWQ9XCJ0cGwtY29udGVudFwiIG5nLWluY2x1ZGUgc3JjPVwiY3VycmVudFRwbFwiPjwvZGl2PlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICBpdCgnc2hvdWxkIGxvYWQgdGVtcGxhdGUgZGVmaW5lZCBpbnNpZGUgc2NyaXB0IHRhZycsIGZ1bmN0aW9uKCkge1xuICAgICAgICBlbGVtZW50KGJ5LmNzcygnI3RwbC1saW5rJykpLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnI3RwbC1jb250ZW50JykpLmdldFRleHQoKSkudG9NYXRjaCgvQ29udGVudCBvZiB0aGUgdGVtcGxhdGUvKTtcbiAgICAgIH0pO1xuICAgIDwvZmlsZT5cbiAgPC9leGFtcGxlPlxuICovXG52YXIgc2NyaXB0RGlyZWN0aXZlID0gWyckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICB0ZXJtaW5hbDogdHJ1ZSxcbiAgICBjb21waWxlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRyKSB7XG4gICAgICBpZiAoYXR0ci50eXBlID09ICd0ZXh0L25nLXRlbXBsYXRlJykge1xuICAgICAgICB2YXIgdGVtcGxhdGVVcmwgPSBhdHRyLmlkLFxuICAgICAgICAgICAgdGV4dCA9IGVsZW1lbnRbMF0udGV4dDtcblxuICAgICAgICAkdGVtcGxhdGVDYWNoZS5wdXQodGVtcGxhdGVVcmwsIHRleHQpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1dO1xuXG52YXIgbmdPcHRpb25zTWluRXJyID0gbWluRXJyKCduZ09wdGlvbnMnKTtcbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgc2VsZWN0XG4gKiBAcmVzdHJpY3QgRVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSFRNTCBgU0VMRUNUYCBlbGVtZW50IHdpdGggYW5ndWxhciBkYXRhLWJpbmRpbmcuXG4gKlxuICogIyBgbmdPcHRpb25zYFxuICpcbiAqIFRoZSBgbmdPcHRpb25zYCBhdHRyaWJ1dGUgY2FuIGJlIHVzZWQgdG8gZHluYW1pY2FsbHkgZ2VuZXJhdGUgYSBsaXN0IG9mIGA8b3B0aW9uPmBcbiAqIGVsZW1lbnRzIGZvciB0aGUgYDxzZWxlY3Q+YCBlbGVtZW50IHVzaW5nIHRoZSBhcnJheSBvciBvYmplY3Qgb2J0YWluZWQgYnkgZXZhbHVhdGluZyB0aGVcbiAqIGBuZ09wdGlvbnNgIGNvbXByZWhlbnNpb24gZXhwcmVzc2lvbi5cbiAqXG4gKiBJbiBtYW55IGNhc2VzLCBgbmdSZXBlYXRgIGNhbiBiZSB1c2VkIG9uIGA8b3B0aW9uPmAgZWxlbWVudHMgaW5zdGVhZCBvZiBgbmdPcHRpb25zYCB0byBhY2hpZXZlIGFcbiAqIHNpbWlsYXIgcmVzdWx0LiBIb3dldmVyLCBgbmdPcHRpb25zYCBwcm92aWRlcyBzb21lIGJlbmVmaXRzIHN1Y2ggYXMgcmVkdWNpbmcgbWVtb3J5IGFuZFxuICogaW5jcmVhc2luZyBzcGVlZCBieSBub3QgY3JlYXRpbmcgYSBuZXcgc2NvcGUgZm9yIGVhY2ggcmVwZWF0ZWQgaW5zdGFuY2UsIGFzIHdlbGwgYXMgcHJvdmlkaW5nXG4gKiBtb3JlIGZsZXhpYmlsaXR5IGluIGhvdyB0aGUgYDxzZWxlY3Q+YCdzIG1vZGVsIGlzIGFzc2lnbmVkIHZpYSB0aGUgYHNlbGVjdGAgKipgYXNgKiogcGFydCBvZiB0aGVcbiAqIGNvbXByZWhlbnNpb24gZXhwcmVzc2lvbi4gYG5nT3B0aW9uc2Agc2hvdWxkIGJlIHVzZWQgd2hlbiB0aGUgYDxzZWxlY3Q+YCBtb2RlbCBuZWVkcyB0byBiZSBib3VuZFxuICogIHRvIGEgbm9uLXN0cmluZyB2YWx1ZS4gVGhpcyBpcyBiZWNhdXNlIGFuIG9wdGlvbiBlbGVtZW50IGNhbiBvbmx5IGJlIGJvdW5kIHRvIHN0cmluZyB2YWx1ZXMgYXRcbiAqIHByZXNlbnQuXG4gKlxuICogV2hlbiBhbiBpdGVtIGluIHRoZSBgPHNlbGVjdD5gIG1lbnUgaXMgc2VsZWN0ZWQsIHRoZSBhcnJheSBlbGVtZW50IG9yIG9iamVjdCBwcm9wZXJ0eVxuICogcmVwcmVzZW50ZWQgYnkgdGhlIHNlbGVjdGVkIG9wdGlvbiB3aWxsIGJlIGJvdW5kIHRvIHRoZSBtb2RlbCBpZGVudGlmaWVkIGJ5IHRoZSBgbmdNb2RlbGBcbiAqIGRpcmVjdGl2ZS5cbiAqXG4gKiBPcHRpb25hbGx5LCBhIHNpbmdsZSBoYXJkLWNvZGVkIGA8b3B0aW9uPmAgZWxlbWVudCwgd2l0aCB0aGUgdmFsdWUgc2V0IHRvIGFuIGVtcHR5IHN0cmluZywgY2FuXG4gKiBiZSBuZXN0ZWQgaW50byB0aGUgYDxzZWxlY3Q+YCBlbGVtZW50LiBUaGlzIGVsZW1lbnQgd2lsbCB0aGVuIHJlcHJlc2VudCB0aGUgYG51bGxgIG9yIFwibm90IHNlbGVjdGVkXCJcbiAqIG9wdGlvbi4gU2VlIGV4YW1wbGUgYmVsb3cgZm9yIGRlbW9uc3RyYXRpb24uXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICoqTm90ZToqKiBgbmdNb2RlbGAgY29tcGFyZXMgYnkgcmVmZXJlbmNlLCBub3QgdmFsdWUuIFRoaXMgaXMgaW1wb3J0YW50IHdoZW4gYmluZGluZyB0byBhblxuICogYXJyYXkgb2Ygb2JqZWN0cy4gU2VlIGFuIGV4YW1wbGUgW2luIHRoaXMganNmaWRkbGVdKGh0dHA6Ly9qc2ZpZGRsZS5uZXQvcVd6VGIvKS5cbiAqIDwvZGl2PlxuICpcbiAqICMjIGBzZWxlY3RgICoqYGFzYCoqXG4gKlxuICogVXNpbmcgYHNlbGVjdGAgKipgYXNgKiogd2lsbCBiaW5kIHRoZSByZXN1bHQgb2YgdGhlIGBzZWxlY3RgIGV4cHJlc3Npb24gdG8gdGhlIG1vZGVsLCBidXRcbiAqIHRoZSB2YWx1ZSBvZiB0aGUgYDxzZWxlY3Q+YCBhbmQgYDxvcHRpb24+YCBodG1sIGVsZW1lbnRzIHdpbGwgYmUgZWl0aGVyIHRoZSBpbmRleCAoZm9yIGFycmF5IGRhdGEgc291cmNlcylcbiAqIG9yIHByb3BlcnR5IG5hbWUgKGZvciBvYmplY3QgZGF0YSBzb3VyY2VzKSBvZiB0aGUgdmFsdWUgd2l0aGluIHRoZSBjb2xsZWN0aW9uLiBJZiBhICoqYHRyYWNrIGJ5YCoqIGV4cHJlc3Npb25cbiAqIGlzIHVzZWQsIHRoZSByZXN1bHQgb2YgdGhhdCBleHByZXNzaW9uIHdpbGwgYmUgc2V0IGFzIHRoZSB2YWx1ZSBvZiB0aGUgYG9wdGlvbmAgYW5kIGBzZWxlY3RgIGVsZW1lbnRzLlxuICpcbiAqXG4gKiAjIyMgYHNlbGVjdGAgKipgYXNgKiogYW5kICoqYHRyYWNrIGJ5YCoqXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqIERvIG5vdCB1c2UgYHNlbGVjdGAgKipgYXNgKiogYW5kICoqYHRyYWNrIGJ5YCoqIGluIHRoZSBzYW1lIGV4cHJlc3Npb24uIFRoZXkgYXJlIG5vdCBkZXNpZ25lZCB0byB3b3JrIHRvZ2V0aGVyLlxuICogPC9kaXY+XG4gKlxuICogQ29uc2lkZXIgdGhlIGZvbGxvd2luZyBleGFtcGxlOlxuICpcbiAqIGBgYGh0bWxcbiAqIDxzZWxlY3Qgbmctb3B0aW9ucz1cIml0ZW0uc3ViSXRlbSBhcyBpdGVtLmxhYmVsIGZvciBpdGVtIGluIHZhbHVlcyB0cmFjayBieSBpdGVtLmlkXCIgbmctbW9kZWw9XCJzZWxlY3RlZFwiPlxuICogYGBgXG4gKlxuICogYGBganNcbiAqICRzY29wZS52YWx1ZXMgPSBbe1xuICogICBpZDogMSxcbiAqICAgbGFiZWw6ICdhTGFiZWwnLFxuICogICBzdWJJdGVtOiB7IG5hbWU6ICdhU3ViSXRlbScgfVxuICogfSwge1xuICogICBpZDogMixcbiAqICAgbGFiZWw6ICdiTGFiZWwnLFxuICogICBzdWJJdGVtOiB7IG5hbWU6ICdiU3ViSXRlbScgfVxuICogfV07XG4gKlxuICogJHNjb3BlLnNlbGVjdGVkID0geyBuYW1lOiAnYVN1Ykl0ZW0nIH07XG4gKiBgYGBcbiAqXG4gKiBXaXRoIHRoZSBwdXJwb3NlIG9mIHByZXNlcnZpbmcgdGhlIHNlbGVjdGlvbiwgdGhlICoqYHRyYWNrIGJ5YCoqIGV4cHJlc3Npb24gaXMgYWx3YXlzIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnRcbiAqIG9mIHRoZSBkYXRhIHNvdXJjZSAodG8gYGl0ZW1gIGluIHRoaXMgZXhhbXBsZSkuIFRvIGNhbGN1bGF0ZSB3aGV0aGVyIGFuIGVsZW1lbnQgaXMgc2VsZWN0ZWQsIHdlIGRvIHRoZVxuICogZm9sbG93aW5nOlxuICpcbiAqIDEuIEFwcGx5ICoqYHRyYWNrIGJ5YCoqIHRvIHRoZSBlbGVtZW50cyBpbiB0aGUgYXJyYXkuIEluIHRoZSBleGFtcGxlOiBgWzEsIDJdYFxuICogMi4gQXBwbHkgKipgdHJhY2sgYnlgKiogdG8gdGhlIGFscmVhZHkgc2VsZWN0ZWQgdmFsdWUgaW4gYG5nTW9kZWxgLlxuICogICAgSW4gdGhlIGV4YW1wbGU6IHRoaXMgaXMgbm90IHBvc3NpYmxlIGFzICoqYHRyYWNrIGJ5YCoqIHJlZmVycyB0byBgaXRlbS5pZGAsIGJ1dCB0aGUgc2VsZWN0ZWRcbiAqICAgIHZhbHVlIGZyb20gYG5nTW9kZWxgIGlzIGB7bmFtZTogJ2FTdWJJdGVtJ31gLCBzbyB0aGUgKipgdHJhY2sgYnlgKiogZXhwcmVzc2lvbiBpcyBhcHBsaWVkIHRvXG4gKiAgICBhIHdyb25nIG9iamVjdCwgdGhlIHNlbGVjdGVkIGVsZW1lbnQgY2FuJ3QgYmUgZm91bmQsIGA8c2VsZWN0PmAgaXMgYWx3YXlzIHJlc2V0IHRvIHRoZSBcIm5vdFxuICogICAgc2VsZWN0ZWRcIiBvcHRpb24uXG4gKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgVGhlIGNvbnRyb2wgaXMgY29uc2lkZXJlZCB2YWxpZCBvbmx5IGlmIHZhbHVlIGlzIGVudGVyZWQuXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS5cbiAqIEBwYXJhbSB7Y29tcHJlaGVuc2lvbl9leHByZXNzaW9uPX0gbmdPcHRpb25zIGluIG9uZSBvZiB0aGUgZm9sbG93aW5nIGZvcm1zOlxuICpcbiAqICAgKiBmb3IgYXJyYXkgZGF0YSBzb3VyY2VzOlxuICogICAgICogYGxhYmVsYCAqKmBmb3JgKiogYHZhbHVlYCAqKmBpbmAqKiBgYXJyYXlgXG4gKiAgICAgKiBgc2VsZWN0YCAqKmBhc2AqKiBgbGFiZWxgICoqYGZvcmAqKiBgdmFsdWVgICoqYGluYCoqIGBhcnJheWBcbiAqICAgICAqIGBsYWJlbGAgKipgZ3JvdXAgYnlgKiogYGdyb3VwYCAqKmBmb3JgKiogYHZhbHVlYCAqKmBpbmAqKiBgYXJyYXlgXG4gKiAgICAgKiBgbGFiZWxgICoqYGdyb3VwIGJ5YCoqIGBncm91cGAgKipgZm9yYCoqIGB2YWx1ZWAgKipgaW5gKiogYGFycmF5YCAqKmB0cmFjayBieWAqKiBgdHJhY2tleHByYFxuICogICAgICogYGxhYmVsYCAqKmBmb3JgKiogYHZhbHVlYCAqKmBpbmAqKiBgYXJyYXlgIHwgb3JkZXJCeTpgb3JkZXJleHByYCAqKmB0cmFjayBieWAqKiBgdHJhY2tleHByYFxuICogICAgICAgIChmb3IgaW5jbHVkaW5nIGEgZmlsdGVyIHdpdGggYHRyYWNrIGJ5YClcbiAqICAgKiBmb3Igb2JqZWN0IGRhdGEgc291cmNlczpcbiAqICAgICAqIGBsYWJlbGAgKipgZm9yIChgKipga2V5YCAqKmAsYCoqIGB2YWx1ZWAqKmApIGluYCoqIGBvYmplY3RgXG4gKiAgICAgKiBgc2VsZWN0YCAqKmBhc2AqKiBgbGFiZWxgICoqYGZvciAoYCoqYGtleWAgKipgLGAqKiBgdmFsdWVgKipgKSBpbmAqKiBgb2JqZWN0YFxuICogICAgICogYGxhYmVsYCAqKmBncm91cCBieWAqKiBgZ3JvdXBgICoqYGZvciAoYCoqYGtleWAqKmAsYCoqIGB2YWx1ZWAqKmApIGluYCoqIGBvYmplY3RgXG4gKiAgICAgKiBgc2VsZWN0YCAqKmBhc2AqKiBgbGFiZWxgICoqYGdyb3VwIGJ5YCoqIGBncm91cGBcbiAqICAgICAgICAgKipgZm9yYCBgKGAqKmBrZXlgKipgLGAqKiBgdmFsdWVgKipgKSBpbmAqKiBgb2JqZWN0YFxuICpcbiAqIFdoZXJlOlxuICpcbiAqICAgKiBgYXJyYXlgIC8gYG9iamVjdGA6IGFuIGV4cHJlc3Npb24gd2hpY2ggZXZhbHVhdGVzIHRvIGFuIGFycmF5IC8gb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqICAgKiBgdmFsdWVgOiBsb2NhbCB2YXJpYWJsZSB3aGljaCB3aWxsIHJlZmVyIHRvIGVhY2ggaXRlbSBpbiB0aGUgYGFycmF5YCBvciBlYWNoIHByb3BlcnR5IHZhbHVlXG4gKiAgICAgIG9mIGBvYmplY3RgIGR1cmluZyBpdGVyYXRpb24uXG4gKiAgICogYGtleWA6IGxvY2FsIHZhcmlhYmxlIHdoaWNoIHdpbGwgcmVmZXIgdG8gYSBwcm9wZXJ0eSBuYW1lIGluIGBvYmplY3RgIGR1cmluZyBpdGVyYXRpb24uXG4gKiAgICogYGxhYmVsYDogVGhlIHJlc3VsdCBvZiB0aGlzIGV4cHJlc3Npb24gd2lsbCBiZSB0aGUgbGFiZWwgZm9yIGA8b3B0aW9uPmAgZWxlbWVudC4gVGhlXG4gKiAgICAgYGV4cHJlc3Npb25gIHdpbGwgbW9zdCBsaWtlbHkgcmVmZXIgdG8gdGhlIGB2YWx1ZWAgdmFyaWFibGUgKGUuZy4gYHZhbHVlLnByb3BlcnR5TmFtZWApLlxuICogICAqIGBzZWxlY3RgOiBUaGUgcmVzdWx0IG9mIHRoaXMgZXhwcmVzc2lvbiB3aWxsIGJlIGJvdW5kIHRvIHRoZSBtb2RlbCBvZiB0aGUgcGFyZW50IGA8c2VsZWN0PmBcbiAqICAgICAgZWxlbWVudC4gSWYgbm90IHNwZWNpZmllZCwgYHNlbGVjdGAgZXhwcmVzc2lvbiB3aWxsIGRlZmF1bHQgdG8gYHZhbHVlYC5cbiAqICAgKiBgZ3JvdXBgOiBUaGUgcmVzdWx0IG9mIHRoaXMgZXhwcmVzc2lvbiB3aWxsIGJlIHVzZWQgdG8gZ3JvdXAgb3B0aW9ucyB1c2luZyB0aGUgYDxvcHRncm91cD5gXG4gKiAgICAgIERPTSBlbGVtZW50LlxuICogICAqIGB0cmFja2V4cHJgOiBVc2VkIHdoZW4gd29ya2luZyB3aXRoIGFuIGFycmF5IG9mIG9iamVjdHMuIFRoZSByZXN1bHQgb2YgdGhpcyBleHByZXNzaW9uIHdpbGwgYmVcbiAqICAgICAgdXNlZCB0byBpZGVudGlmeSB0aGUgb2JqZWN0cyBpbiB0aGUgYXJyYXkuIFRoZSBgdHJhY2tleHByYCB3aWxsIG1vc3QgbGlrZWx5IHJlZmVyIHRvIHRoZVxuICogICAgIGB2YWx1ZWAgdmFyaWFibGUgKGUuZy4gYHZhbHVlLnByb3BlcnR5TmFtZWApLiBXaXRoIHRoaXMgdGhlIHNlbGVjdGlvbiBpcyBwcmVzZXJ2ZWRcbiAqICAgICAgZXZlbiB3aGVuIHRoZSBvcHRpb25zIGFyZSByZWNyZWF0ZWQgKGUuZy4gcmVsb2FkZWQgZnJvbSB0aGUgc2VydmVyKS5cbiAqXG4gKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlIG1vZHVsZT1cInNlbGVjdEV4YW1wbGVcIj5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxzY3JpcHQ+XG4gICAgICAgIGFuZ3VsYXIubW9kdWxlKCdzZWxlY3RFeGFtcGxlJywgW10pXG4gICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICRzY29wZS5jb2xvcnMgPSBbXG4gICAgICAgICAgICAgIHtuYW1lOidibGFjaycsIHNoYWRlOidkYXJrJ30sXG4gICAgICAgICAgICAgIHtuYW1lOid3aGl0ZScsIHNoYWRlOidsaWdodCd9LFxuICAgICAgICAgICAgICB7bmFtZToncmVkJywgc2hhZGU6J2RhcmsnfSxcbiAgICAgICAgICAgICAge25hbWU6J2JsdWUnLCBzaGFkZTonZGFyayd9LFxuICAgICAgICAgICAgICB7bmFtZToneWVsbG93Jywgc2hhZGU6J2xpZ2h0J31cbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICAkc2NvcGUubXlDb2xvciA9ICRzY29wZS5jb2xvcnNbMl07IC8vIHJlZFxuICAgICAgICAgIH1dKTtcbiAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgPHVsPlxuICAgICAgICAgICAgPGxpIG5nLXJlcGVhdD1cImNvbG9yIGluIGNvbG9yc1wiPlxuICAgICAgICAgICAgICBOYW1lOiA8aW5wdXQgbmctbW9kZWw9XCJjb2xvci5uYW1lXCI+XG4gICAgICAgICAgICAgIFs8YSBocmVmIG5nLWNsaWNrPVwiY29sb3JzLnNwbGljZSgkaW5kZXgsIDEpXCI+WDwvYT5dXG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICBbPGEgaHJlZiBuZy1jbGljaz1cImNvbG9ycy5wdXNoKHt9KVwiPmFkZDwvYT5dXG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgPGhyLz5cbiAgICAgICAgICBDb2xvciAobnVsbCBub3QgYWxsb3dlZCk6XG4gICAgICAgICAgPHNlbGVjdCBuZy1tb2RlbD1cIm15Q29sb3JcIiBuZy1vcHRpb25zPVwiY29sb3IubmFtZSBmb3IgY29sb3IgaW4gY29sb3JzXCI+PC9zZWxlY3Q+PGJyPlxuXG4gICAgICAgICAgQ29sb3IgKG51bGwgYWxsb3dlZCk6XG4gICAgICAgICAgPHNwYW4gIGNsYXNzPVwibnVsbGFibGVcIj5cbiAgICAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJteUNvbG9yXCIgbmctb3B0aW9ucz1cImNvbG9yLm5hbWUgZm9yIGNvbG9yIGluIGNvbG9yc1wiPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiXCI+LS0gY2hvb3NlIGNvbG9yIC0tPC9vcHRpb24+XG4gICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICA8L3NwYW4+PGJyLz5cblxuICAgICAgICAgIENvbG9yIGdyb3VwZWQgYnkgc2hhZGU6XG4gICAgICAgICAgPHNlbGVjdCBuZy1tb2RlbD1cIm15Q29sb3JcIiBuZy1vcHRpb25zPVwiY29sb3IubmFtZSBncm91cCBieSBjb2xvci5zaGFkZSBmb3IgY29sb3IgaW4gY29sb3JzXCI+XG4gICAgICAgICAgPC9zZWxlY3Q+PGJyLz5cblxuXG4gICAgICAgICAgU2VsZWN0IDxhIGhyZWYgbmctY2xpY2s9XCJteUNvbG9yID0geyBuYW1lOidub3QgaW4gbGlzdCcsIHNoYWRlOiAnb3RoZXInIH1cIj5ib2d1czwvYT4uPGJyPlxuICAgICAgICAgIDxoci8+XG4gICAgICAgICAgQ3VycmVudGx5IHNlbGVjdGVkOiB7eyB7c2VsZWN0ZWRfY29sb3I6bXlDb2xvcn0gfX1cbiAgICAgICAgICA8ZGl2IHN0eWxlPVwiYm9yZGVyOnNvbGlkIDFweCBibGFjazsgaGVpZ2h0OjIwcHhcIlxuICAgICAgICAgICAgICAgbmctc3R5bGU9XCJ7J2JhY2tncm91bmQtY29sb3InOm15Q29sb3IubmFtZX1cIj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLW9wdGlvbnMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygne3NlbGVjdGVkX2NvbG9yOm15Q29sb3J9JykpLmdldFRleHQoKSkudG9NYXRjaCgncmVkJyk7XG4gICAgICAgICAgIGVsZW1lbnQuYWxsKGJ5Lm1vZGVsKCdteUNvbG9yJykpLmZpcnN0KCkuY2xpY2soKTtcbiAgICAgICAgICAgZWxlbWVudC5hbGwoYnkuY3NzKCdzZWxlY3RbbmctbW9kZWw9XCJteUNvbG9yXCJdIG9wdGlvbicpKS5maXJzdCgpLmNsaWNrKCk7XG4gICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ3tzZWxlY3RlZF9jb2xvcjpteUNvbG9yfScpKS5nZXRUZXh0KCkpLnRvTWF0Y2goJ2JsYWNrJyk7XG4gICAgICAgICAgIGVsZW1lbnQoYnkuY3NzKCcubnVsbGFibGUgc2VsZWN0W25nLW1vZGVsPVwibXlDb2xvclwiXScpKS5jbGljaygpO1xuICAgICAgICAgICBlbGVtZW50LmFsbChieS5jc3MoJy5udWxsYWJsZSBzZWxlY3RbbmctbW9kZWw9XCJteUNvbG9yXCJdIG9wdGlvbicpKS5maXJzdCgpLmNsaWNrKCk7XG4gICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ3tzZWxlY3RlZF9jb2xvcjpteUNvbG9yfScpKS5nZXRUZXh0KCkpLnRvTWF0Y2goJ251bGwnKTtcbiAgICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqL1xuXG52YXIgbmdPcHRpb25zRGlyZWN0aXZlID0gdmFsdWVGbih7XG4gIHJlc3RyaWN0OiAnQScsXG4gIHRlcm1pbmFsOiB0cnVlXG59KTtcblxuLy8ganNoaW50IG1heGxlbjogZmFsc2VcbnZhciBzZWxlY3REaXJlY3RpdmUgPSBbJyRjb21waWxlJywgJyRwYXJzZScsIGZ1bmN0aW9uKCRjb21waWxlLCAgICRwYXJzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgIC8vMDAwMDExMTExMTExMTEwMDAwMDAwMDAwMDIyMjIyMjIyMjIwMDAwMDAwMDAwMDAwMDAwMDAwMDAzMzMzMzMzMzMzMDAwMDAwMDAwMDAwMDA0NDQ0NDQ0NDQ0NDQ0NDQwMDAwMDAwMDA1NTU1NTU1NTU1NTU1NTUwMDAwMDAwNjY2NjY2NjY2NjY2NjY2MDAwMDAwMDAwMDAwMDAwNzc3Nzc3Nzc3NzAwMDAwMDAwMDAwMDAwMDAwMDA4ODg4ODg4ODg4XG4gIHZhciBOR19PUFRJT05TX1JFR0VYUCA9IC9eXFxzKihbXFxzXFxTXSs/KSg/Olxccythc1xccysoW1xcc1xcU10rPykpPyg/Olxccytncm91cFxccytieVxccysoW1xcc1xcU10rPykpP1xccytmb3JcXHMrKD86KFtcXCRcXHddW1xcJFxcd10qKXwoPzpcXChcXHMqKFtcXCRcXHddW1xcJFxcd10qKVxccyosXFxzKihbXFwkXFx3XVtcXCRcXHddKilcXHMqXFwpKSlcXHMraW5cXHMrKFtcXHNcXFNdKz8pKD86XFxzK3RyYWNrXFxzK2J5XFxzKyhbXFxzXFxTXSs/KSk/JC8sXG4gICAgICBudWxsTW9kZWxDdHJsID0geyRzZXRWaWV3VmFsdWU6IG5vb3B9O1xuLy8ganNoaW50IG1heGxlbjogMTAwXG5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHJlcXVpcmU6IFsnc2VsZWN0JywgJz9uZ01vZGVsJ10sXG4gICAgY29udHJvbGxlcjogWyckZWxlbWVudCcsICckc2NvcGUnLCAnJGF0dHJzJywgZnVuY3Rpb24oJGVsZW1lbnQsICRzY29wZSwgJGF0dHJzKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgb3B0aW9uc01hcCA9IHt9LFxuICAgICAgICAgIG5nTW9kZWxDdHJsID0gbnVsbE1vZGVsQ3RybCxcbiAgICAgICAgICBudWxsT3B0aW9uLFxuICAgICAgICAgIHVua25vd25PcHRpb247XG5cblxuICAgICAgc2VsZi5kYXRhYm91bmQgPSAkYXR0cnMubmdNb2RlbDtcblxuXG4gICAgICBzZWxmLmluaXQgPSBmdW5jdGlvbihuZ01vZGVsQ3RybF8sIG51bGxPcHRpb25fLCB1bmtub3duT3B0aW9uXykge1xuICAgICAgICBuZ01vZGVsQ3RybCA9IG5nTW9kZWxDdHJsXztcbiAgICAgICAgbnVsbE9wdGlvbiA9IG51bGxPcHRpb25fO1xuICAgICAgICB1bmtub3duT3B0aW9uID0gdW5rbm93bk9wdGlvbl87XG4gICAgICB9O1xuXG5cbiAgICAgIHNlbGYuYWRkT3B0aW9uID0gZnVuY3Rpb24odmFsdWUsIGVsZW1lbnQpIHtcbiAgICAgICAgYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkodmFsdWUsICdcIm9wdGlvbiB2YWx1ZVwiJyk7XG4gICAgICAgIG9wdGlvbnNNYXBbdmFsdWVdID0gdHJ1ZTtcblxuICAgICAgICBpZiAobmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSA9PSB2YWx1ZSkge1xuICAgICAgICAgICRlbGVtZW50LnZhbCh2YWx1ZSk7XG4gICAgICAgICAgaWYgKHVua25vd25PcHRpb24ucGFyZW50KCkpIHVua25vd25PcHRpb24ucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV29ya2Fyb3VuZCBmb3IgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM4MTQ1OVxuICAgICAgICAvLyBBZGRpbmcgYW4gPG9wdGlvbiBzZWxlY3RlZD1cInNlbGVjdGVkXCI+IGVsZW1lbnQgdG8gYSA8c2VsZWN0IHJlcXVpcmVkPVwicmVxdWlyZWRcIj4gc2hvdWxkXG4gICAgICAgIC8vIGF1dG9tYXRpY2FsbHkgc2VsZWN0IHRoZSBuZXcgZWxlbWVudFxuICAgICAgICBpZiAoZWxlbWVudCAmJiBlbGVtZW50WzBdLmhhc0F0dHJpYnV0ZSgnc2VsZWN0ZWQnKSkge1xuICAgICAgICAgIGVsZW1lbnRbMF0uc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9O1xuXG5cbiAgICAgIHNlbGYucmVtb3ZlT3B0aW9uID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzT3B0aW9uKHZhbHVlKSkge1xuICAgICAgICAgIGRlbGV0ZSBvcHRpb25zTWFwW3ZhbHVlXTtcbiAgICAgICAgICBpZiAobmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyVW5rbm93bk9wdGlvbih2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG5cbiAgICAgIHNlbGYucmVuZGVyVW5rbm93bk9wdGlvbiA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICB2YXIgdW5rbm93blZhbCA9ICc/ICcgKyBoYXNoS2V5KHZhbCkgKyAnID8nO1xuICAgICAgICB1bmtub3duT3B0aW9uLnZhbCh1bmtub3duVmFsKTtcbiAgICAgICAgJGVsZW1lbnQucHJlcGVuZCh1bmtub3duT3B0aW9uKTtcbiAgICAgICAgJGVsZW1lbnQudmFsKHVua25vd25WYWwpO1xuICAgICAgICB1bmtub3duT3B0aW9uLnByb3AoJ3NlbGVjdGVkJywgdHJ1ZSk7IC8vIG5lZWRlZCBmb3IgSUVcbiAgICAgIH07XG5cblxuICAgICAgc2VsZi5oYXNPcHRpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gb3B0aW9uc01hcC5oYXNPd25Qcm9wZXJ0eSh2YWx1ZSk7XG4gICAgICB9O1xuXG4gICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBkaXNhYmxlIHVua25vd24gb3B0aW9uIHNvIHRoYXQgd2UgZG9uJ3QgZG8gd29yayB3aGVuIHRoZSB3aG9sZSBzZWxlY3QgaXMgYmVpbmcgZGVzdHJveWVkXG4gICAgICAgIHNlbGYucmVuZGVyVW5rbm93bk9wdGlvbiA9IG5vb3A7XG4gICAgICB9KTtcbiAgICB9XSxcblxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJscykge1xuICAgICAgLy8gaWYgbmdNb2RlbCBpcyBub3QgZGVmaW5lZCwgd2UgZG9uJ3QgbmVlZCB0byBkbyBhbnl0aGluZ1xuICAgICAgaWYgKCFjdHJsc1sxXSkgcmV0dXJuO1xuXG4gICAgICB2YXIgc2VsZWN0Q3RybCA9IGN0cmxzWzBdLFxuICAgICAgICAgIG5nTW9kZWxDdHJsID0gY3RybHNbMV0sXG4gICAgICAgICAgbXVsdGlwbGUgPSBhdHRyLm11bHRpcGxlLFxuICAgICAgICAgIG9wdGlvbnNFeHAgPSBhdHRyLm5nT3B0aW9ucyxcbiAgICAgICAgICBudWxsT3B0aW9uID0gZmFsc2UsIC8vIGlmIGZhbHNlLCB1c2VyIHdpbGwgbm90IGJlIGFibGUgdG8gc2VsZWN0IGl0ICh1c2VkIGJ5IG5nT3B0aW9ucylcbiAgICAgICAgICBlbXB0eU9wdGlvbixcbiAgICAgICAgICByZW5kZXJTY2hlZHVsZWQgPSBmYWxzZSxcbiAgICAgICAgICAvLyB3ZSBjYW4ndCBqdXN0IGpxTGl0ZSgnPG9wdGlvbj4nKSBzaW5jZSBqcUxpdGUgaXMgbm90IHNtYXJ0IGVub3VnaFxuICAgICAgICAgIC8vIHRvIGNyZWF0ZSBpdCBpbiA8c2VsZWN0PiBhbmQgSUUgYmFyZnMgb3RoZXJ3aXNlLlxuICAgICAgICAgIG9wdGlvblRlbXBsYXRlID0ganFMaXRlKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpKSxcbiAgICAgICAgICBvcHRHcm91cFRlbXBsYXRlID1qcUxpdGUoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0Z3JvdXAnKSksXG4gICAgICAgICAgdW5rbm93bk9wdGlvbiA9IG9wdGlvblRlbXBsYXRlLmNsb25lKCk7XG5cbiAgICAgIC8vIGZpbmQgXCJudWxsXCIgb3B0aW9uXG4gICAgICBmb3IgKHZhciBpID0gMCwgY2hpbGRyZW4gPSBlbGVtZW50LmNoaWxkcmVuKCksIGlpID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICBpZiAoY2hpbGRyZW5baV0udmFsdWUgPT09ICcnKSB7XG4gICAgICAgICAgZW1wdHlPcHRpb24gPSBudWxsT3B0aW9uID0gY2hpbGRyZW4uZXEoaSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc2VsZWN0Q3RybC5pbml0KG5nTW9kZWxDdHJsLCBudWxsT3B0aW9uLCB1bmtub3duT3B0aW9uKTtcblxuICAgICAgLy8gcmVxdWlyZWQgdmFsaWRhdG9yXG4gICAgICBpZiAobXVsdGlwbGUpIHtcbiAgICAgICAgbmdNb2RlbEN0cmwuJGlzRW1wdHkgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiAhdmFsdWUgfHwgdmFsdWUubGVuZ3RoID09PSAwO1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9uc0V4cCkgc2V0dXBBc09wdGlvbnMoc2NvcGUsIGVsZW1lbnQsIG5nTW9kZWxDdHJsKTtcbiAgICAgIGVsc2UgaWYgKG11bHRpcGxlKSBzZXR1cEFzTXVsdGlwbGUoc2NvcGUsIGVsZW1lbnQsIG5nTW9kZWxDdHJsKTtcbiAgICAgIGVsc2Ugc2V0dXBBc1NpbmdsZShzY29wZSwgZWxlbWVudCwgbmdNb2RlbEN0cmwsIHNlbGVjdEN0cmwpO1xuXG5cbiAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG5cbiAgICAgIGZ1bmN0aW9uIHNldHVwQXNTaW5nbGUoc2NvcGUsIHNlbGVjdEVsZW1lbnQsIG5nTW9kZWxDdHJsLCBzZWxlY3RDdHJsKSB7XG4gICAgICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgdmlld1ZhbHVlID0gbmdNb2RlbEN0cmwuJHZpZXdWYWx1ZTtcblxuICAgICAgICAgIGlmIChzZWxlY3RDdHJsLmhhc09wdGlvbih2aWV3VmFsdWUpKSB7XG4gICAgICAgICAgICBpZiAodW5rbm93bk9wdGlvbi5wYXJlbnQoKSkgdW5rbm93bk9wdGlvbi5yZW1vdmUoKTtcbiAgICAgICAgICAgIHNlbGVjdEVsZW1lbnQudmFsKHZpZXdWYWx1ZSk7XG4gICAgICAgICAgICBpZiAodmlld1ZhbHVlID09PSAnJykgZW1wdHlPcHRpb24ucHJvcCgnc2VsZWN0ZWQnLCB0cnVlKTsgLy8gdG8gbWFrZSBJRTkgaGFwcHlcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZpZXdWYWx1ZSkgJiYgZW1wdHlPcHRpb24pIHtcbiAgICAgICAgICAgICAgc2VsZWN0RWxlbWVudC52YWwoJycpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2VsZWN0Q3RybC5yZW5kZXJVbmtub3duT3B0aW9uKHZpZXdWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHNlbGVjdEVsZW1lbnQub24oJ2NoYW5nZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICh1bmtub3duT3B0aW9uLnBhcmVudCgpKSB1bmtub3duT3B0aW9uLnJlbW92ZSgpO1xuICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHNldFZpZXdWYWx1ZShzZWxlY3RFbGVtZW50LnZhbCgpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNldHVwQXNNdWx0aXBsZShzY29wZSwgc2VsZWN0RWxlbWVudCwgY3RybCkge1xuICAgICAgICB2YXIgbGFzdFZpZXc7XG4gICAgICAgIGN0cmwuJHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBpdGVtcyA9IG5ldyBIYXNoTWFwKGN0cmwuJHZpZXdWYWx1ZSk7XG4gICAgICAgICAgZm9yRWFjaChzZWxlY3RFbGVtZW50LmZpbmQoJ29wdGlvbicpLCBmdW5jdGlvbihvcHRpb24pIHtcbiAgICAgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IGlzRGVmaW5lZChpdGVtcy5nZXQob3B0aW9uLnZhbHVlKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gd2UgaGF2ZSB0byBkbyBpdCBvbiBlYWNoIHdhdGNoIHNpbmNlIG5nTW9kZWwgd2F0Y2hlcyByZWZlcmVuY2UsIGJ1dFxuICAgICAgICAvLyB3ZSBuZWVkIHRvIHdvcmsgb2YgYW4gYXJyYXksIHNvIHdlIG5lZWQgdG8gc2VlIGlmIGFueXRoaW5nIHdhcyBpbnNlcnRlZC9yZW1vdmVkXG4gICAgICAgIHNjb3BlLiR3YXRjaChmdW5jdGlvbiBzZWxlY3RNdWx0aXBsZVdhdGNoKCkge1xuICAgICAgICAgIGlmICghZXF1YWxzKGxhc3RWaWV3LCBjdHJsLiR2aWV3VmFsdWUpKSB7XG4gICAgICAgICAgICBsYXN0VmlldyA9IHNoYWxsb3dDb3B5KGN0cmwuJHZpZXdWYWx1ZSk7XG4gICAgICAgICAgICBjdHJsLiRyZW5kZXIoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNlbGVjdEVsZW1lbnQub24oJ2NoYW5nZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhcnJheSA9IFtdO1xuICAgICAgICAgICAgZm9yRWFjaChzZWxlY3RFbGVtZW50LmZpbmQoJ29wdGlvbicpLCBmdW5jdGlvbihvcHRpb24pIHtcbiAgICAgICAgICAgICAgaWYgKG9wdGlvbi5zZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgIGFycmF5LnB1c2gob3B0aW9uLnZhbHVlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjdHJsLiRzZXRWaWV3VmFsdWUoYXJyYXkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2V0dXBBc09wdGlvbnMoc2NvcGUsIHNlbGVjdEVsZW1lbnQsIGN0cmwpIHtcbiAgICAgICAgdmFyIG1hdGNoO1xuXG4gICAgICAgIGlmICghKG1hdGNoID0gb3B0aW9uc0V4cC5tYXRjaChOR19PUFRJT05TX1JFR0VYUCkpKSB7XG4gICAgICAgICAgdGhyb3cgbmdPcHRpb25zTWluRXJyKCdpZXhwJyxcbiAgICAgICAgICAgIFwiRXhwZWN0ZWQgZXhwcmVzc2lvbiBpbiBmb3JtIG9mIFwiICtcbiAgICAgICAgICAgIFwiJ19zZWxlY3RfIChhcyBfbGFiZWxfKT8gZm9yIChfa2V5XywpP192YWx1ZV8gaW4gX2NvbGxlY3Rpb25fJ1wiICtcbiAgICAgICAgICAgIFwiIGJ1dCBnb3QgJ3swfScuIEVsZW1lbnQ6IHsxfVwiLFxuICAgICAgICAgICAgb3B0aW9uc0V4cCwgc3RhcnRpbmdUYWcoc2VsZWN0RWxlbWVudCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRpc3BsYXlGbiA9ICRwYXJzZShtYXRjaFsyXSB8fCBtYXRjaFsxXSksXG4gICAgICAgICAgICB2YWx1ZU5hbWUgPSBtYXRjaFs0XSB8fCBtYXRjaFs2XSxcbiAgICAgICAgICAgIHNlbGVjdEFzID0gLyBhcyAvLnRlc3QobWF0Y2hbMF0pICYmIG1hdGNoWzFdLFxuICAgICAgICAgICAgc2VsZWN0QXNGbiA9IHNlbGVjdEFzID8gJHBhcnNlKHNlbGVjdEFzKSA6IG51bGwsXG4gICAgICAgICAgICBrZXlOYW1lID0gbWF0Y2hbNV0sXG4gICAgICAgICAgICBncm91cEJ5Rm4gPSAkcGFyc2UobWF0Y2hbM10gfHwgJycpLFxuICAgICAgICAgICAgdmFsdWVGbiA9ICRwYXJzZShtYXRjaFsyXSA/IG1hdGNoWzFdIDogdmFsdWVOYW1lKSxcbiAgICAgICAgICAgIHZhbHVlc0ZuID0gJHBhcnNlKG1hdGNoWzddKSxcbiAgICAgICAgICAgIHRyYWNrID0gbWF0Y2hbOF0sXG4gICAgICAgICAgICB0cmFja0ZuID0gdHJhY2sgPyAkcGFyc2UobWF0Y2hbOF0pIDogbnVsbCxcbiAgICAgICAgICAgIHRyYWNrS2V5c0NhY2hlID0ge30sXG4gICAgICAgICAgICAvLyBUaGlzIGlzIGFuIGFycmF5IG9mIGFycmF5IG9mIGV4aXN0aW5nIG9wdGlvbiBncm91cHMgaW4gRE9NLlxuICAgICAgICAgICAgLy8gV2UgdHJ5IHRvIHJldXNlIHRoZXNlIGlmIHBvc3NpYmxlXG4gICAgICAgICAgICAvLyAtIG9wdGlvbkdyb3Vwc0NhY2hlWzBdIGlzIHRoZSBvcHRpb25zIHdpdGggbm8gb3B0aW9uIGdyb3VwXG4gICAgICAgICAgICAvLyAtIG9wdGlvbkdyb3Vwc0NhY2hlWz9dWzBdIGlzIHRoZSBwYXJlbnQ6IGVpdGhlciB0aGUgU0VMRUNUIG9yIE9QVEdST1VQIGVsZW1lbnRcbiAgICAgICAgICAgIG9wdGlvbkdyb3Vwc0NhY2hlID0gW1t7ZWxlbWVudDogc2VsZWN0RWxlbWVudCwgbGFiZWw6Jyd9XV0sXG4gICAgICAgICAgICAvL3JlLXVzYWJsZSBvYmplY3QgdG8gcmVwcmVzZW50IG9wdGlvbidzIGxvY2Fsc1xuICAgICAgICAgICAgbG9jYWxzID0ge307XG5cbiAgICAgICAgaWYgKG51bGxPcHRpb24pIHtcbiAgICAgICAgICAvLyBjb21waWxlIHRoZSBlbGVtZW50IHNpbmNlIHRoZXJlIG1pZ2h0IGJlIGJpbmRpbmdzIGluIGl0XG4gICAgICAgICAgJGNvbXBpbGUobnVsbE9wdGlvbikoc2NvcGUpO1xuXG4gICAgICAgICAgLy8gcmVtb3ZlIHRoZSBjbGFzcywgd2hpY2ggaXMgYWRkZWQgYXV0b21hdGljYWxseSBiZWNhdXNlIHdlIHJlY29tcGlsZSB0aGUgZWxlbWVudCBhbmQgaXRcbiAgICAgICAgICAvLyBiZWNvbWVzIHRoZSBjb21waWxhdGlvbiByb290XG4gICAgICAgICAgbnVsbE9wdGlvbi5yZW1vdmVDbGFzcygnbmctc2NvcGUnKTtcblxuICAgICAgICAgIC8vIHdlIG5lZWQgdG8gcmVtb3ZlIGl0IGJlZm9yZSBjYWxsaW5nIHNlbGVjdEVsZW1lbnQuZW1wdHkoKSBiZWNhdXNlIG90aGVyd2lzZSBJRSB3aWxsXG4gICAgICAgICAgLy8gcmVtb3ZlIHRoZSBsYWJlbCBmcm9tIHRoZSBlbGVtZW50LiB3dGY/XG4gICAgICAgICAgbnVsbE9wdGlvbi5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNsZWFyIGNvbnRlbnRzLCB3ZSdsbCBhZGQgd2hhdCdzIG5lZWRlZCBiYXNlZCBvbiB0aGUgbW9kZWxcbiAgICAgICAgc2VsZWN0RWxlbWVudC5lbXB0eSgpO1xuXG4gICAgICAgIHNlbGVjdEVsZW1lbnQub24oJ2NoYW5nZScsIHNlbGVjdGlvbkNoYW5nZWQpO1xuXG4gICAgICAgIGN0cmwuJHJlbmRlciA9IHJlbmRlcjtcblxuICAgICAgICBzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKHZhbHVlc0ZuLCBzY2hlZHVsZVJlbmRlcmluZyk7XG4gICAgICAgIHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oZ2V0TGFiZWxzLCBzY2hlZHVsZVJlbmRlcmluZyk7XG5cbiAgICAgICAgaWYgKG11bHRpcGxlKSB7XG4gICAgICAgICAgc2NvcGUuJHdhdGNoQ29sbGVjdGlvbihmdW5jdGlvbigpIHsgcmV0dXJuIGN0cmwuJG1vZGVsVmFsdWU7IH0sIHNjaGVkdWxlUmVuZGVyaW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xuXG4gICAgICAgIGZ1bmN0aW9uIGNhbGxFeHByZXNzaW9uKGV4cHJGbiwga2V5LCB2YWx1ZSkge1xuICAgICAgICAgIGxvY2Fsc1t2YWx1ZU5hbWVdID0gdmFsdWU7XG4gICAgICAgICAgaWYgKGtleU5hbWUpIGxvY2Fsc1trZXlOYW1lXSA9IGtleTtcbiAgICAgICAgICByZXR1cm4gZXhwckZuKHNjb3BlLCBsb2NhbHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc2VsZWN0aW9uQ2hhbmdlZCgpIHtcbiAgICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgY29sbGVjdGlvbiA9IHZhbHVlc0ZuKHNjb3BlKSB8fCBbXTtcbiAgICAgICAgICAgIHZhciB2aWV3VmFsdWU7XG4gICAgICAgICAgICBpZiAobXVsdGlwbGUpIHtcbiAgICAgICAgICAgICAgdmlld1ZhbHVlID0gW107XG4gICAgICAgICAgICAgIGZvckVhY2goc2VsZWN0RWxlbWVudC52YWwoKSwgZnVuY3Rpb24oc2VsZWN0ZWRLZXkpIHtcbiAgICAgICAgICAgICAgICAgIHNlbGVjdGVkS2V5ID0gdHJhY2tGbiA/IHRyYWNrS2V5c0NhY2hlW3NlbGVjdGVkS2V5XSA6IHNlbGVjdGVkS2V5O1xuICAgICAgICAgICAgICAgIHZpZXdWYWx1ZS5wdXNoKGdldFZpZXdWYWx1ZShzZWxlY3RlZEtleSwgY29sbGVjdGlvbltzZWxlY3RlZEtleV0pKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWRLZXkgPSB0cmFja0ZuID8gdHJhY2tLZXlzQ2FjaGVbc2VsZWN0RWxlbWVudC52YWwoKV0gOiBzZWxlY3RFbGVtZW50LnZhbCgpO1xuICAgICAgICAgICAgICB2aWV3VmFsdWUgPSBnZXRWaWV3VmFsdWUoc2VsZWN0ZWRLZXksIGNvbGxlY3Rpb25bc2VsZWN0ZWRLZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN0cmwuJHNldFZpZXdWYWx1ZSh2aWV3VmFsdWUpO1xuICAgICAgICAgICAgcmVuZGVyKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRWaWV3VmFsdWUoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgIGlmIChrZXkgPT09ICc/Jykge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJycpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdmlld1ZhbHVlRm4gPSBzZWxlY3RBc0ZuID8gc2VsZWN0QXNGbiA6IHZhbHVlRm47XG4gICAgICAgICAgICByZXR1cm4gY2FsbEV4cHJlc3Npb24odmlld1ZhbHVlRm4sIGtleSwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldExhYmVscygpIHtcbiAgICAgICAgICB2YXIgdmFsdWVzID0gdmFsdWVzRm4oc2NvcGUpO1xuICAgICAgICAgIHZhciB0b0Rpc3BsYXk7XG4gICAgICAgICAgaWYgKHZhbHVlcyAmJiBpc0FycmF5KHZhbHVlcykpIHtcbiAgICAgICAgICAgIHRvRGlzcGxheSA9IG5ldyBBcnJheSh2YWx1ZXMubGVuZ3RoKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHZhbHVlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICAgIHRvRGlzcGxheVtpXSA9IGNhbGxFeHByZXNzaW9uKGRpc3BsYXlGbiwgaSwgdmFsdWVzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0b0Rpc3BsYXk7XG4gICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZXMpIHtcbiAgICAgICAgICAgIC8vIFRPRE86IEFkZCBhIHRlc3QgZm9yIHRoaXMgY2FzZVxuICAgICAgICAgICAgdG9EaXNwbGF5ID0ge307XG4gICAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIHZhbHVlcykge1xuICAgICAgICAgICAgICBpZiAodmFsdWVzLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgICAgICAgICAgdG9EaXNwbGF5W3Byb3BdID0gY2FsbEV4cHJlc3Npb24oZGlzcGxheUZuLCBwcm9wLCB2YWx1ZXNbcHJvcF0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0b0Rpc3BsYXk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVJc1NlbGVjdGVkRm4odmlld1ZhbHVlKSB7XG4gICAgICAgICAgdmFyIHNlbGVjdGVkU2V0O1xuICAgICAgICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgICAgICAgaWYgKHRyYWNrRm4gJiYgaXNBcnJheSh2aWV3VmFsdWUpKSB7XG5cbiAgICAgICAgICAgICAgc2VsZWN0ZWRTZXQgPSBuZXcgSGFzaE1hcChbXSk7XG4gICAgICAgICAgICAgIGZvciAodmFyIHRyYWNrSW5kZXggPSAwOyB0cmFja0luZGV4IDwgdmlld1ZhbHVlLmxlbmd0aDsgdHJhY2tJbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgLy8gdHJhY2tpbmcgYnkga2V5XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRTZXQucHV0KGNhbGxFeHByZXNzaW9uKHRyYWNrRm4sIG51bGwsIHZpZXdWYWx1ZVt0cmFja0luZGV4XSksIHRydWUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzZWxlY3RlZFNldCA9IG5ldyBIYXNoTWFwKHZpZXdWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICh0cmFja0ZuKSB7XG4gICAgICAgICAgICB2aWV3VmFsdWUgPSBjYWxsRXhwcmVzc2lvbih0cmFja0ZuLCBudWxsLCB2aWV3VmFsdWUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBpc1NlbGVjdGVkKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBjb21wYXJlVmFsdWVGbjtcbiAgICAgICAgICAgIGlmICh0cmFja0ZuKSB7XG4gICAgICAgICAgICAgIGNvbXBhcmVWYWx1ZUZuID0gdHJhY2tGbjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VsZWN0QXNGbikge1xuICAgICAgICAgICAgICBjb21wYXJlVmFsdWVGbiA9IHNlbGVjdEFzRm47XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb21wYXJlVmFsdWVGbiA9IHZhbHVlRm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgICAgICAgICByZXR1cm4gaXNEZWZpbmVkKHNlbGVjdGVkU2V0LnJlbW92ZShjYWxsRXhwcmVzc2lvbihjb21wYXJlVmFsdWVGbiwga2V5LCB2YWx1ZSkpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiB2aWV3VmFsdWUgPT09IGNhbGxFeHByZXNzaW9uKGNvbXBhcmVWYWx1ZUZuLCBrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc2NoZWR1bGVSZW5kZXJpbmcoKSB7XG4gICAgICAgICAgaWYgKCFyZW5kZXJTY2hlZHVsZWQpIHtcbiAgICAgICAgICAgIHNjb3BlLiQkcG9zdERpZ2VzdChyZW5kZXIpO1xuICAgICAgICAgICAgcmVuZGVyU2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQSBuZXcgbGFiZWxNYXAgaXMgY3JlYXRlZCB3aXRoIGVhY2ggcmVuZGVyLlxuICAgICAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBmb3IgZWFjaCBleGlzdGluZyBvcHRpb24gd2l0aCBhZGRlZD1mYWxzZSxcbiAgICAgICAgICogYW5kIGVhY2ggbmV3IG9wdGlvbiB3aXRoIGFkZGVkPXRydWUuXG4gICAgICAgICAqIC0gTGFiZWxzIHRoYXQgYXJlIHBhc3NlZCB0byB0aGlzIG1ldGhvZCB0d2ljZSxcbiAgICAgICAgICogKG9uY2Ugd2l0aCBhZGRlZD10cnVlIGFuZCBvbmNlIHdpdGggYWRkZWQ9ZmFsc2UpIHdpbGwgZW5kIHVwIHdpdGggYSB2YWx1ZSBvZiAwLCBhbmRcbiAgICAgICAgICogd2lsbCBjYXVzZSBubyBjaGFuZ2UgdG8gaGFwcGVuIHRvIHRoZSBjb3JyZXNwb25kaW5nIG9wdGlvbi5cbiAgICAgICAgICogLSBMYWJlbHMgdGhhdCBhcmUgcGFzc2VkIHRvIHRoaXMgbWV0aG9kIG9ubHkgb25jZSB3aXRoIGFkZGVkPWZhbHNlIHdpbGwgZW5kIHVwIHdpdGggYVxuICAgICAgICAgKiB2YWx1ZSBvZiAtMSBhbmQgd2lsbCBldmVudHVhbGx5IGJlIHBhc3NlZCB0byBzZWxlY3RDdHJsLnJlbW92ZU9wdGlvbigpXG4gICAgICAgICAqIC0gTGFiZWxzIHRoYXQgYXJlIHBhc3NlZCB0byB0aGlzIG1ldGhvZCBvbmx5IG9uY2Ugd2l0aCBhZGRlZD10cnVlIHdpbGwgZW5kIHVwIHdpdGggYVxuICAgICAgICAgKiB2YWx1ZSBvZiAxIGFuZCB3aWxsIGV2ZW50dWFsbHkgYmUgcGFzc2VkIHRvIHNlbGVjdEN0cmwuYWRkT3B0aW9uKClcbiAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlTGFiZWxNYXAobGFiZWxNYXAsIGxhYmVsLCBhZGRlZCkge1xuICAgICAgICAgIGxhYmVsTWFwW2xhYmVsXSA9IGxhYmVsTWFwW2xhYmVsXSB8fCAwO1xuICAgICAgICAgIGxhYmVsTWFwW2xhYmVsXSArPSAoYWRkZWQgPyAxIDogLTEpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgIHJlbmRlclNjaGVkdWxlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgLy8gVGVtcG9yYXJ5IGxvY2F0aW9uIGZvciB0aGUgb3B0aW9uIGdyb3VwcyBiZWZvcmUgd2UgcmVuZGVyIHRoZW1cbiAgICAgICAgICB2YXIgb3B0aW9uR3JvdXBzID0geycnOltdfSxcbiAgICAgICAgICAgICAgb3B0aW9uR3JvdXBOYW1lcyA9IFsnJ10sXG4gICAgICAgICAgICAgIG9wdGlvbkdyb3VwTmFtZSxcbiAgICAgICAgICAgICAgb3B0aW9uR3JvdXAsXG4gICAgICAgICAgICAgIG9wdGlvbixcbiAgICAgICAgICAgICAgZXhpc3RpbmdQYXJlbnQsIGV4aXN0aW5nT3B0aW9ucywgZXhpc3RpbmdPcHRpb24sXG4gICAgICAgICAgICAgIHZpZXdWYWx1ZSA9IGN0cmwuJHZpZXdWYWx1ZSxcbiAgICAgICAgICAgICAgdmFsdWVzID0gdmFsdWVzRm4oc2NvcGUpIHx8IFtdLFxuICAgICAgICAgICAgICBrZXlzID0ga2V5TmFtZSA/IHNvcnRlZEtleXModmFsdWVzKSA6IHZhbHVlcyxcbiAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgZ3JvdXBMZW5ndGgsIGxlbmd0aCxcbiAgICAgICAgICAgICAgZ3JvdXBJbmRleCwgaW5kZXgsXG4gICAgICAgICAgICAgIGxhYmVsTWFwID0ge30sXG4gICAgICAgICAgICAgIHNlbGVjdGVkLFxuICAgICAgICAgICAgICBpc1NlbGVjdGVkID0gY3JlYXRlSXNTZWxlY3RlZEZuKHZpZXdWYWx1ZSksXG4gICAgICAgICAgICAgIGFueVNlbGVjdGVkID0gZmFsc2UsXG4gICAgICAgICAgICAgIGxhc3RFbGVtZW50LFxuICAgICAgICAgICAgICBlbGVtZW50LFxuICAgICAgICAgICAgICBsYWJlbCxcbiAgICAgICAgICAgICAgb3B0aW9uSWQ7XG5cbiAgICAgICAgICB0cmFja0tleXNDYWNoZSA9IHt9O1xuXG4gICAgICAgICAgLy8gV2Ugbm93IGJ1aWxkIHVwIHRoZSBsaXN0IG9mIG9wdGlvbnMgd2UgbmVlZCAod2UgbWVyZ2UgbGF0ZXIpXG4gICAgICAgICAgZm9yIChpbmRleCA9IDA7IGxlbmd0aCA9IGtleXMubGVuZ3RoLCBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAga2V5ID0gaW5kZXg7XG4gICAgICAgICAgICBpZiAoa2V5TmFtZSkge1xuICAgICAgICAgICAgICBrZXkgPSBrZXlzW2luZGV4XTtcbiAgICAgICAgICAgICAgaWYgKGtleS5jaGFyQXQoMCkgPT09ICckJykgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlc1trZXldO1xuXG4gICAgICAgICAgICBvcHRpb25Hcm91cE5hbWUgPSBjYWxsRXhwcmVzc2lvbihncm91cEJ5Rm4sIGtleSwgdmFsdWUpIHx8ICcnO1xuICAgICAgICAgICAgaWYgKCEob3B0aW9uR3JvdXAgPSBvcHRpb25Hcm91cHNbb3B0aW9uR3JvdXBOYW1lXSkpIHtcbiAgICAgICAgICAgICAgb3B0aW9uR3JvdXAgPSBvcHRpb25Hcm91cHNbb3B0aW9uR3JvdXBOYW1lXSA9IFtdO1xuICAgICAgICAgICAgICBvcHRpb25Hcm91cE5hbWVzLnB1c2gob3B0aW9uR3JvdXBOYW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2VsZWN0ZWQgPSBpc1NlbGVjdGVkKGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgYW55U2VsZWN0ZWQgPSBhbnlTZWxlY3RlZCB8fCBzZWxlY3RlZDtcblxuICAgICAgICAgICAgbGFiZWwgPSBjYWxsRXhwcmVzc2lvbihkaXNwbGF5Rm4sIGtleSwgdmFsdWUpOyAvLyB3aGF0IHdpbGwgYmUgc2VlbiBieSB0aGUgdXNlclxuXG4gICAgICAgICAgICAvLyBkb2luZyBkaXNwbGF5Rm4oc2NvcGUsIGxvY2FscykgfHwgJycgb3ZlcndyaXRlcyB6ZXJvIHZhbHVlc1xuICAgICAgICAgICAgbGFiZWwgPSBpc0RlZmluZWQobGFiZWwpID8gbGFiZWwgOiAnJztcbiAgICAgICAgICAgIG9wdGlvbklkID0gdHJhY2tGbiA/IHRyYWNrRm4oc2NvcGUsIGxvY2FscykgOiAoa2V5TmFtZSA/IGtleXNbaW5kZXhdIDogaW5kZXgpO1xuICAgICAgICAgICAgaWYgKHRyYWNrRm4pIHtcbiAgICAgICAgICAgICAgdHJhY2tLZXlzQ2FjaGVbb3B0aW9uSWRdID0ga2V5O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvcHRpb25Hcm91cC5wdXNoKHtcbiAgICAgICAgICAgICAgLy8gZWl0aGVyIHRoZSBpbmRleCBpbnRvIGFycmF5IG9yIGtleSBmcm9tIG9iamVjdFxuICAgICAgICAgICAgICBpZDogb3B0aW9uSWQsXG4gICAgICAgICAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgICAgICAgICAgc2VsZWN0ZWQ6IHNlbGVjdGVkICAgICAgICAgICAgICAgICAgIC8vIGRldGVybWluZSBpZiB3ZSBzaG91bGQgYmUgc2VsZWN0ZWRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIW11bHRpcGxlKSB7XG4gICAgICAgICAgICBpZiAobnVsbE9wdGlvbiB8fCB2aWV3VmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgLy8gaW5zZXJ0IG51bGwgb3B0aW9uIGlmIHdlIGhhdmUgYSBwbGFjZWhvbGRlciwgb3IgdGhlIG1vZGVsIGlzIG51bGxcbiAgICAgICAgICAgICAgb3B0aW9uR3JvdXBzWycnXS51bnNoaWZ0KHtpZDonJywgbGFiZWw6JycsIHNlbGVjdGVkOiFhbnlTZWxlY3RlZH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghYW55U2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgLy8gb3B0aW9uIGNvdWxkIG5vdCBiZSBmb3VuZCwgd2UgaGF2ZSB0byBpbnNlcnQgdGhlIHVuZGVmaW5lZCBpdGVtXG4gICAgICAgICAgICAgIG9wdGlvbkdyb3Vwc1snJ10udW5zaGlmdCh7aWQ6Jz8nLCBsYWJlbDonJywgc2VsZWN0ZWQ6dHJ1ZX0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIE5vdyB3ZSBuZWVkIHRvIHVwZGF0ZSB0aGUgbGlzdCBvZiBET00gbm9kZXMgdG8gbWF0Y2ggdGhlIG9wdGlvbkdyb3VwcyB3ZSBjb21wdXRlZCBhYm92ZVxuICAgICAgICAgIGZvciAoZ3JvdXBJbmRleCA9IDAsIGdyb3VwTGVuZ3RoID0gb3B0aW9uR3JvdXBOYW1lcy5sZW5ndGg7XG4gICAgICAgICAgICAgICBncm91cEluZGV4IDwgZ3JvdXBMZW5ndGg7XG4gICAgICAgICAgICAgICBncm91cEluZGV4KyspIHtcbiAgICAgICAgICAgIC8vIGN1cnJlbnQgb3B0aW9uIGdyb3VwIG5hbWUgb3IgJycgaWYgbm8gZ3JvdXBcbiAgICAgICAgICAgIG9wdGlvbkdyb3VwTmFtZSA9IG9wdGlvbkdyb3VwTmFtZXNbZ3JvdXBJbmRleF07XG5cbiAgICAgICAgICAgIC8vIGxpc3Qgb2Ygb3B0aW9ucyBmb3IgdGhhdCBncm91cC4gKGZpcnN0IGl0ZW0gaGFzIHRoZSBwYXJlbnQpXG4gICAgICAgICAgICBvcHRpb25Hcm91cCA9IG9wdGlvbkdyb3Vwc1tvcHRpb25Hcm91cE5hbWVdO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9uR3JvdXBzQ2FjaGUubGVuZ3RoIDw9IGdyb3VwSW5kZXgpIHtcbiAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBncm93IHRoZSBvcHRpb25Hcm91cHNcbiAgICAgICAgICAgICAgZXhpc3RpbmdQYXJlbnQgPSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudDogb3B0R3JvdXBUZW1wbGF0ZS5jbG9uZSgpLmF0dHIoJ2xhYmVsJywgb3B0aW9uR3JvdXBOYW1lKSxcbiAgICAgICAgICAgICAgICBsYWJlbDogb3B0aW9uR3JvdXAubGFiZWxcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgZXhpc3RpbmdPcHRpb25zID0gW2V4aXN0aW5nUGFyZW50XTtcbiAgICAgICAgICAgICAgb3B0aW9uR3JvdXBzQ2FjaGUucHVzaChleGlzdGluZ09wdGlvbnMpO1xuICAgICAgICAgICAgICBzZWxlY3RFbGVtZW50LmFwcGVuZChleGlzdGluZ1BhcmVudC5lbGVtZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGV4aXN0aW5nT3B0aW9ucyA9IG9wdGlvbkdyb3Vwc0NhY2hlW2dyb3VwSW5kZXhdO1xuICAgICAgICAgICAgICBleGlzdGluZ1BhcmVudCA9IGV4aXN0aW5nT3B0aW9uc1swXTsgIC8vIGVpdGhlciBTRUxFQ1QgKG5vIGdyb3VwKSBvciBPUFRHUk9VUCBlbGVtZW50XG5cbiAgICAgICAgICAgICAgLy8gdXBkYXRlIHRoZSBPUFRHUk9VUCBsYWJlbCBpZiBub3QgdGhlIHNhbWUuXG4gICAgICAgICAgICAgIGlmIChleGlzdGluZ1BhcmVudC5sYWJlbCAhPSBvcHRpb25Hcm91cE5hbWUpIHtcbiAgICAgICAgICAgICAgICBleGlzdGluZ1BhcmVudC5lbGVtZW50LmF0dHIoJ2xhYmVsJywgZXhpc3RpbmdQYXJlbnQubGFiZWwgPSBvcHRpb25Hcm91cE5hbWUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxhc3RFbGVtZW50ID0gbnVsbDsgIC8vIHN0YXJ0IGF0IHRoZSBiZWdpbm5pbmdcbiAgICAgICAgICAgIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBvcHRpb25Hcm91cC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgIG9wdGlvbiA9IG9wdGlvbkdyb3VwW2luZGV4XTtcbiAgICAgICAgICAgICAgaWYgKChleGlzdGluZ09wdGlvbiA9IGV4aXN0aW5nT3B0aW9uc1tpbmRleCArIDFdKSkge1xuICAgICAgICAgICAgICAgIC8vIHJldXNlIGVsZW1lbnRzXG4gICAgICAgICAgICAgICAgbGFzdEVsZW1lbnQgPSBleGlzdGluZ09wdGlvbi5lbGVtZW50O1xuICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ09wdGlvbi5sYWJlbCAhPT0gb3B0aW9uLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICB1cGRhdGVMYWJlbE1hcChsYWJlbE1hcCwgZXhpc3RpbmdPcHRpb24ubGFiZWwsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgIHVwZGF0ZUxhYmVsTWFwKGxhYmVsTWFwLCBvcHRpb24ubGFiZWwsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgbGFzdEVsZW1lbnQudGV4dChleGlzdGluZ09wdGlvbi5sYWJlbCA9IG9wdGlvbi5sYWJlbCk7XG4gICAgICAgICAgICAgICAgICBsYXN0RWxlbWVudC5wcm9wKCdsYWJlbCcsIGV4aXN0aW5nT3B0aW9uLmxhYmVsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nT3B0aW9uLmlkICE9PSBvcHRpb24uaWQpIHtcbiAgICAgICAgICAgICAgICAgIGxhc3RFbGVtZW50LnZhbChleGlzdGluZ09wdGlvbi5pZCA9IG9wdGlvbi5pZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGxhc3RFbGVtZW50LnByb3AoJ3NlbGVjdGVkJykgcHJvdmlkZWQgYnkgalF1ZXJ5IGhhcyBzaWRlLWVmZmVjdHNcbiAgICAgICAgICAgICAgICBpZiAobGFzdEVsZW1lbnRbMF0uc2VsZWN0ZWQgIT09IG9wdGlvbi5zZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgICAgbGFzdEVsZW1lbnQucHJvcCgnc2VsZWN0ZWQnLCAoZXhpc3RpbmdPcHRpb24uc2VsZWN0ZWQgPSBvcHRpb24uc2VsZWN0ZWQpKTtcbiAgICAgICAgICAgICAgICAgIGlmIChtc2llKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNlZSAjNzY5MlxuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgc2VsZWN0ZWQgaXRlbSB3b3VsZG4ndCB2aXN1YWxseSB1cGRhdGUgb24gSUUgd2l0aG91dCB0aGlzLlxuICAgICAgICAgICAgICAgICAgICAvLyBUZXN0ZWQgb24gV2luNzogSUU5LCBJRTEwIGFuZCBJRTExLiBGdXR1cmUgSUVzIHNob3VsZCBiZSB0ZXN0ZWQgYXMgd2VsbFxuICAgICAgICAgICAgICAgICAgICBsYXN0RWxlbWVudC5wcm9wKCdzZWxlY3RlZCcsIGV4aXN0aW5nT3B0aW9uLnNlbGVjdGVkKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZ3JvdyBlbGVtZW50c1xuXG4gICAgICAgICAgICAgICAgLy8gaWYgaXQncyBhIG51bGwgb3B0aW9uXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbi5pZCA9PT0gJycgJiYgbnVsbE9wdGlvbikge1xuICAgICAgICAgICAgICAgICAgLy8gcHV0IGJhY2sgdGhlIHByZS1jb21waWxlZCBlbGVtZW50XG4gICAgICAgICAgICAgICAgICBlbGVtZW50ID0gbnVsbE9wdGlvbjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgLy8galF1ZXJ5KHYxLjQuMikgQnVnOiBXZSBzaG91bGQgYmUgYWJsZSB0byBjaGFpbiB0aGUgbWV0aG9kIGNhbGxzLCBidXRcbiAgICAgICAgICAgICAgICAgIC8vIGluIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnkgb24gc29tZSBicm93c2VyIHRoZSAudGV4dCgpIHJldHVybnMgYSBzdHJpbmdcbiAgICAgICAgICAgICAgICAgIC8vIHJhdGhlciB0aGVuIHRoZSBlbGVtZW50LlxuICAgICAgICAgICAgICAgICAgKGVsZW1lbnQgPSBvcHRpb25UZW1wbGF0ZS5jbG9uZSgpKVxuICAgICAgICAgICAgICAgICAgICAgIC52YWwob3B0aW9uLmlkKVxuICAgICAgICAgICAgICAgICAgICAgIC5wcm9wKCdzZWxlY3RlZCcsIG9wdGlvbi5zZWxlY3RlZClcbiAgICAgICAgICAgICAgICAgICAgICAuYXR0cignc2VsZWN0ZWQnLCBvcHRpb24uc2VsZWN0ZWQpXG4gICAgICAgICAgICAgICAgICAgICAgLnByb3AoJ2xhYmVsJywgb3B0aW9uLmxhYmVsKVxuICAgICAgICAgICAgICAgICAgICAgIC50ZXh0KG9wdGlvbi5sYWJlbCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZXhpc3RpbmdPcHRpb25zLnB1c2goZXhpc3RpbmdPcHRpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBvcHRpb24ubGFiZWwsXG4gICAgICAgICAgICAgICAgICAgIGlkOiBvcHRpb24uaWQsXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkOiBvcHRpb24uc2VsZWN0ZWRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB1cGRhdGVMYWJlbE1hcChsYWJlbE1hcCwgb3B0aW9uLmxhYmVsLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBpZiAobGFzdEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgIGxhc3RFbGVtZW50LmFmdGVyKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBleGlzdGluZ1BhcmVudC5lbGVtZW50LmFwcGVuZChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGFzdEVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyByZW1vdmUgYW55IGV4Y2Vzc2l2ZSBPUFRJT05zIGluIGEgZ3JvdXBcbiAgICAgICAgICAgIGluZGV4Kys7IC8vIGluY3JlbWVudCBzaW5jZSB0aGUgZXhpc3RpbmdPcHRpb25zWzBdIGlzIHBhcmVudCBlbGVtZW50IG5vdCBPUFRJT05cbiAgICAgICAgICAgIHdoaWxlIChleGlzdGluZ09wdGlvbnMubGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgICAgICAgICAgb3B0aW9uID0gZXhpc3RpbmdPcHRpb25zLnBvcCgpO1xuICAgICAgICAgICAgICB1cGRhdGVMYWJlbE1hcChsYWJlbE1hcCwgb3B0aW9uLmxhYmVsLCBmYWxzZSk7XG4gICAgICAgICAgICAgIG9wdGlvbi5lbGVtZW50LnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyByZW1vdmUgYW55IGV4Y2Vzc2l2ZSBPUFRHUk9VUHMgZnJvbSBzZWxlY3RcbiAgICAgICAgICB3aGlsZSAob3B0aW9uR3JvdXBzQ2FjaGUubGVuZ3RoID4gZ3JvdXBJbmRleCkge1xuICAgICAgICAgICAgLy8gcmVtb3ZlIGFsbCB0aGUgbGFiZWxzIGluIHRoZSBvcHRpb24gZ3JvdXBcbiAgICAgICAgICAgIG9wdGlvbkdyb3VwID0gb3B0aW9uR3JvdXBzQ2FjaGUucG9wKCk7XG4gICAgICAgICAgICBmb3IgKGluZGV4ID0gMTsgaW5kZXggPCBvcHRpb25Hcm91cC5sZW5ndGg7ICsraW5kZXgpIHtcbiAgICAgICAgICAgICAgdXBkYXRlTGFiZWxNYXAobGFiZWxNYXAsIG9wdGlvbkdyb3VwW2luZGV4XS5sYWJlbCwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3B0aW9uR3JvdXBbMF0uZWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yRWFjaChsYWJlbE1hcCwgZnVuY3Rpb24oY291bnQsIGxhYmVsKSB7XG4gICAgICAgICAgICBpZiAoY291bnQgPiAwKSB7XG4gICAgICAgICAgICAgIHNlbGVjdEN0cmwuYWRkT3B0aW9uKGxhYmVsKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY291bnQgPCAwKSB7XG4gICAgICAgICAgICAgIHNlbGVjdEN0cmwucmVtb3ZlT3B0aW9uKGxhYmVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbn1dO1xuXG52YXIgb3B0aW9uRGlyZWN0aXZlID0gWyckaW50ZXJwb2xhdGUnLCBmdW5jdGlvbigkaW50ZXJwb2xhdGUpIHtcbiAgdmFyIG51bGxTZWxlY3RDdHJsID0ge1xuICAgIGFkZE9wdGlvbjogbm9vcCxcbiAgICByZW1vdmVPcHRpb246IG5vb3BcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRScsXG4gICAgcHJpb3JpdHk6IDEwMCxcbiAgICBjb21waWxlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRyKSB7XG4gICAgICBpZiAoaXNVbmRlZmluZWQoYXR0ci52YWx1ZSkpIHtcbiAgICAgICAgdmFyIGludGVycG9sYXRlRm4gPSAkaW50ZXJwb2xhdGUoZWxlbWVudC50ZXh0KCksIHRydWUpO1xuICAgICAgICBpZiAoIWludGVycG9sYXRlRm4pIHtcbiAgICAgICAgICBhdHRyLiRzZXQoJ3ZhbHVlJywgZWxlbWVudC50ZXh0KCkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgICB2YXIgc2VsZWN0Q3RybE5hbWUgPSAnJHNlbGVjdENvbnRyb2xsZXInLFxuICAgICAgICAgICAgcGFyZW50ID0gZWxlbWVudC5wYXJlbnQoKSxcbiAgICAgICAgICAgIHNlbGVjdEN0cmwgPSBwYXJlbnQuZGF0YShzZWxlY3RDdHJsTmFtZSkgfHxcbiAgICAgICAgICAgICAgcGFyZW50LnBhcmVudCgpLmRhdGEoc2VsZWN0Q3RybE5hbWUpOyAvLyBpbiBjYXNlIHdlIGFyZSBpbiBvcHRncm91cFxuXG4gICAgICAgIGlmICghc2VsZWN0Q3RybCB8fCAhc2VsZWN0Q3RybC5kYXRhYm91bmQpIHtcbiAgICAgICAgICBzZWxlY3RDdHJsID0gbnVsbFNlbGVjdEN0cmw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW50ZXJwb2xhdGVGbikge1xuICAgICAgICAgIHNjb3BlLiR3YXRjaChpbnRlcnBvbGF0ZUZuLCBmdW5jdGlvbiBpbnRlcnBvbGF0ZVdhdGNoQWN0aW9uKG5ld1ZhbCwgb2xkVmFsKSB7XG4gICAgICAgICAgICBhdHRyLiRzZXQoJ3ZhbHVlJywgbmV3VmFsKTtcbiAgICAgICAgICAgIGlmIChvbGRWYWwgIT09IG5ld1ZhbCkge1xuICAgICAgICAgICAgICBzZWxlY3RDdHJsLnJlbW92ZU9wdGlvbihvbGRWYWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZWN0Q3RybC5hZGRPcHRpb24obmV3VmFsLCBlbGVtZW50KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWxlY3RDdHJsLmFkZE9wdGlvbihhdHRyLnZhbHVlLCBlbGVtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsZW1lbnQub24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2VsZWN0Q3RybC5yZW1vdmVPcHRpb24oYXR0ci52YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XTtcblxudmFyIHN0eWxlRGlyZWN0aXZlID0gdmFsdWVGbih7XG4gIHJlc3RyaWN0OiAnRScsXG4gIHRlcm1pbmFsOiBmYWxzZVxufSk7XG5cbnZhciByZXF1aXJlZERpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcmVxdWlyZTogJz9uZ01vZGVsJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxtLCBhdHRyLCBjdHJsKSB7XG4gICAgICBpZiAoIWN0cmwpIHJldHVybjtcbiAgICAgIGF0dHIucmVxdWlyZWQgPSB0cnVlOyAvLyBmb3JjZSB0cnV0aHkgaW4gY2FzZSB3ZSBhcmUgb24gbm9uIGlucHV0IGVsZW1lbnRcblxuICAgICAgY3RybC4kdmFsaWRhdG9ycy5yZXF1aXJlZCA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICAgICAgICByZXR1cm4gIWF0dHIucmVxdWlyZWQgfHwgIWN0cmwuJGlzRW1wdHkodmlld1ZhbHVlKTtcbiAgICAgIH07XG5cbiAgICAgIGF0dHIuJG9ic2VydmUoJ3JlcXVpcmVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59O1xuXG5cbnZhciBwYXR0ZXJuRGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiAnP25nTW9kZWwnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbG0sIGF0dHIsIGN0cmwpIHtcbiAgICAgIGlmICghY3RybCkgcmV0dXJuO1xuXG4gICAgICB2YXIgcmVnZXhwLCBwYXR0ZXJuRXhwID0gYXR0ci5uZ1BhdHRlcm4gfHwgYXR0ci5wYXR0ZXJuO1xuICAgICAgYXR0ci4kb2JzZXJ2ZSgncGF0dGVybicsIGZ1bmN0aW9uKHJlZ2V4KSB7XG4gICAgICAgIGlmIChpc1N0cmluZyhyZWdleCkgJiYgcmVnZXgubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHJlZ2V4ID0gbmV3IFJlZ0V4cCgnXicgKyByZWdleCArICckJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVnZXggJiYgIXJlZ2V4LnRlc3QpIHtcbiAgICAgICAgICB0aHJvdyBtaW5FcnIoJ25nUGF0dGVybicpKCdub3JlZ2V4cCcsXG4gICAgICAgICAgICAnRXhwZWN0ZWQgezB9IHRvIGJlIGEgUmVnRXhwIGJ1dCB3YXMgezF9LiBFbGVtZW50OiB7Mn0nLCBwYXR0ZXJuRXhwLFxuICAgICAgICAgICAgcmVnZXgsIHN0YXJ0aW5nVGFnKGVsbSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVnZXhwID0gcmVnZXggfHwgdW5kZWZpbmVkO1xuICAgICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgICAgfSk7XG5cbiAgICAgIGN0cmwuJHZhbGlkYXRvcnMucGF0dGVybiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KHZhbHVlKSB8fCBpc1VuZGVmaW5lZChyZWdleHApIHx8IHJlZ2V4cC50ZXN0KHZhbHVlKTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufTtcblxuXG52YXIgbWF4bGVuZ3RoRGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiAnP25nTW9kZWwnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbG0sIGF0dHIsIGN0cmwpIHtcbiAgICAgIGlmICghY3RybCkgcmV0dXJuO1xuXG4gICAgICB2YXIgbWF4bGVuZ3RoID0gLTE7XG4gICAgICBhdHRyLiRvYnNlcnZlKCdtYXhsZW5ndGgnLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YXIgaW50VmFsID0gaW50KHZhbHVlKTtcbiAgICAgICAgbWF4bGVuZ3RoID0gaXNOYU4oaW50VmFsKSA/IC0xIDogaW50VmFsO1xuICAgICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgICAgfSk7XG4gICAgICBjdHJsLiR2YWxpZGF0b3JzLm1heGxlbmd0aCA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICAgICAgICByZXR1cm4gKG1heGxlbmd0aCA8IDApIHx8IGN0cmwuJGlzRW1wdHkodmlld1ZhbHVlKSB8fCAodmlld1ZhbHVlLmxlbmd0aCA8PSBtYXhsZW5ndGgpO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59O1xuXG52YXIgbWlubGVuZ3RoRGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiAnP25nTW9kZWwnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbG0sIGF0dHIsIGN0cmwpIHtcbiAgICAgIGlmICghY3RybCkgcmV0dXJuO1xuXG4gICAgICB2YXIgbWlubGVuZ3RoID0gMDtcbiAgICAgIGF0dHIuJG9ic2VydmUoJ21pbmxlbmd0aCcsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIG1pbmxlbmd0aCA9IGludCh2YWx1ZSkgfHwgMDtcbiAgICAgICAgY3RybC4kdmFsaWRhdGUoKTtcbiAgICAgIH0pO1xuICAgICAgY3RybC4kdmFsaWRhdG9ycy5taW5sZW5ndGggPSBmdW5jdGlvbihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmlld1ZhbHVlKSB8fCB2aWV3VmFsdWUubGVuZ3RoID49IG1pbmxlbmd0aDtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufTtcblxuICBpZiAod2luZG93LmFuZ3VsYXIuYm9vdHN0cmFwKSB7XG4gICAgLy9Bbmd1bGFySlMgaXMgYWxyZWFkeSBsb2FkZWQsIHNvIHdlIGNhbiByZXR1cm4gaGVyZS4uLlxuICAgIGNvbnNvbGUubG9nKCdXQVJOSU5HOiBUcmllZCB0byBsb2FkIGFuZ3VsYXIgbW9yZSB0aGFuIG9uY2UuJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy90cnkgdG8gYmluZCB0byBqcXVlcnkgbm93IHNvIHRoYXQgb25lIGNhbiB3cml0ZSBqcUxpdGUoZG9jdW1lbnQpLnJlYWR5KClcbiAgLy9idXQgd2Ugd2lsbCByZWJpbmQgb24gYm9vdHN0cmFwIGFnYWluLlxuICBiaW5kSlF1ZXJ5KCk7XG5cbiAgcHVibGlzaEV4dGVybmFsQVBJKGFuZ3VsYXIpO1xuXG4gIGpxTGl0ZShkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG4gICAgYW5ndWxhckluaXQoZG9jdW1lbnQsIGJvb3RzdHJhcCk7XG4gIH0pO1xuXG59KSh3aW5kb3csIGRvY3VtZW50KTtcblxuIXdpbmRvdy5hbmd1bGFyLiQkY3NwKCkgJiYgd2luZG93LmFuZ3VsYXIuZWxlbWVudChkb2N1bWVudCkuZmluZCgnaGVhZCcpLnByZXBlbmQoJzxzdHlsZSB0eXBlPVwidGV4dC9jc3NcIj5AY2hhcnNldCBcIlVURi04XCI7W25nXFxcXDpjbG9ha10sW25nLWNsb2FrXSxbZGF0YS1uZy1jbG9ha10sW3gtbmctY2xvYWtdLC5uZy1jbG9haywueC1uZy1jbG9haywubmctaGlkZTpub3QoLm5nLWhpZGUtYW5pbWF0ZSl7ZGlzcGxheTpub25lICFpbXBvcnRhbnQ7fW5nXFxcXDpmb3Jte2Rpc3BsYXk6YmxvY2s7fTwvc3R5bGU+Jyk7XG4vKipcbiAqIFN0YXRlLWJhc2VkIHJvdXRpbmcgZm9yIEFuZ3VsYXJKU1xuICogQHZlcnNpb24gdjAuMi4xM1xuICogQGxpbmsgaHR0cDovL2FuZ3VsYXItdWkuZ2l0aHViLmNvbS9cbiAqIEBsaWNlbnNlIE1JVCBMaWNlbnNlLCBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxuICovXG5cbi8qIGNvbW1vbmpzIHBhY2thZ2UgbWFuYWdlciBzdXBwb3J0IChlZyBjb21wb25lbnRqcykgKi9cbmlmICh0eXBlb2YgbW9kdWxlICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiICYmIG1vZHVsZS5leHBvcnRzID09PSBleHBvcnRzKXtcbiAgbW9kdWxlLmV4cG9ydHMgPSAndWkucm91dGVyJztcbn1cblxuKGZ1bmN0aW9uICh3aW5kb3csIGFuZ3VsYXIsIHVuZGVmaW5lZCkge1xuLypqc2hpbnQgZ2xvYmFsc3RyaWN0OnRydWUqL1xuLypnbG9iYWwgYW5ndWxhcjpmYWxzZSovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpc0RlZmluZWQgPSBhbmd1bGFyLmlzRGVmaW5lZCxcbiAgICBpc0Z1bmN0aW9uID0gYW5ndWxhci5pc0Z1bmN0aW9uLFxuICAgIGlzU3RyaW5nID0gYW5ndWxhci5pc1N0cmluZyxcbiAgICBpc09iamVjdCA9IGFuZ3VsYXIuaXNPYmplY3QsXG4gICAgaXNBcnJheSA9IGFuZ3VsYXIuaXNBcnJheSxcbiAgICBmb3JFYWNoID0gYW5ndWxhci5mb3JFYWNoLFxuICAgIGV4dGVuZCA9IGFuZ3VsYXIuZXh0ZW5kLFxuICAgIGNvcHkgPSBhbmd1bGFyLmNvcHk7XG5cbmZ1bmN0aW9uIGluaGVyaXQocGFyZW50LCBleHRyYSkge1xuICByZXR1cm4gZXh0ZW5kKG5ldyAoZXh0ZW5kKGZ1bmN0aW9uKCkge30sIHsgcHJvdG90eXBlOiBwYXJlbnQgfSkpKCksIGV4dHJhKTtcbn1cblxuZnVuY3Rpb24gbWVyZ2UoZHN0KSB7XG4gIGZvckVhY2goYXJndW1lbnRzLCBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAob2JqICE9PSBkc3QpIHtcbiAgICAgIGZvckVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIGlmICghZHN0Lmhhc093blByb3BlcnR5KGtleSkpIGRzdFtrZXldID0gdmFsdWU7XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gZHN0O1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSBjb21tb24gYW5jZXN0b3IgcGF0aCBiZXR3ZWVuIHR3byBzdGF0ZXMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGZpcnN0IFRoZSBmaXJzdCBzdGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzZWNvbmQgVGhlIHNlY29uZCBzdGF0ZS5cbiAqIEByZXR1cm4ge0FycmF5fSBSZXR1cm5zIGFuIGFycmF5IG9mIHN0YXRlIG5hbWVzIGluIGRlc2NlbmRpbmcgb3JkZXIsIG5vdCBpbmNsdWRpbmcgdGhlIHJvb3QuXG4gKi9cbmZ1bmN0aW9uIGFuY2VzdG9ycyhmaXJzdCwgc2Vjb25kKSB7XG4gIHZhciBwYXRoID0gW107XG5cbiAgZm9yICh2YXIgbiBpbiBmaXJzdC5wYXRoKSB7XG4gICAgaWYgKGZpcnN0LnBhdGhbbl0gIT09IHNlY29uZC5wYXRoW25dKSBicmVhaztcbiAgICBwYXRoLnB1c2goZmlyc3QucGF0aFtuXSk7XG4gIH1cbiAgcmV0dXJuIHBhdGg7XG59XG5cbi8qKlxuICogSUU4LXNhZmUgd3JhcHBlciBmb3IgYE9iamVjdC5rZXlzKClgLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgQSBKYXZhU2NyaXB0IG9iamVjdC5cbiAqIEByZXR1cm4ge0FycmF5fSBSZXR1cm5zIHRoZSBrZXlzIG9mIHRoZSBvYmplY3QgYXMgYW4gYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdEtleXMob2JqZWN0KSB7XG4gIGlmIChPYmplY3Qua2V5cykge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmplY3QpO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcblxuICBhbmd1bGFyLmZvckVhY2gob2JqZWN0LCBmdW5jdGlvbih2YWwsIGtleSkge1xuICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIElFOC1zYWZlIHdyYXBwZXIgZm9yIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZigpYC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBBIEphdmFTY3JpcHQgYXJyYXkuXG4gKiBAcGFyYW0geyp9IHZhbHVlIEEgdmFsdWUgdG8gc2VhcmNoIHRoZSBhcnJheSBmb3IuXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IFJldHVybnMgdGhlIGFycmF5IGluZGV4IHZhbHVlIG9mIGB2YWx1ZWAsIG9yIGAtMWAgaWYgbm90IHByZXNlbnQuXG4gKi9cbmZ1bmN0aW9uIGluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG4gIGlmIChBcnJheS5wcm90b3R5cGUuaW5kZXhPZikge1xuICAgIHJldHVybiBhcnJheS5pbmRleE9mKHZhbHVlLCBOdW1iZXIoYXJndW1lbnRzWzJdKSB8fCAwKTtcbiAgfVxuICB2YXIgbGVuID0gYXJyYXkubGVuZ3RoID4+PiAwLCBmcm9tID0gTnVtYmVyKGFyZ3VtZW50c1syXSkgfHwgMDtcbiAgZnJvbSA9IChmcm9tIDwgMCkgPyBNYXRoLmNlaWwoZnJvbSkgOiBNYXRoLmZsb29yKGZyb20pO1xuXG4gIGlmIChmcm9tIDwgMCkgZnJvbSArPSBsZW47XG5cbiAgZm9yICg7IGZyb20gPCBsZW47IGZyb20rKykge1xuICAgIGlmIChmcm9tIGluIGFycmF5ICYmIGFycmF5W2Zyb21dID09PSB2YWx1ZSkgcmV0dXJuIGZyb207XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG4vKipcbiAqIE1lcmdlcyBhIHNldCBvZiBwYXJhbWV0ZXJzIHdpdGggYWxsIHBhcmFtZXRlcnMgaW5oZXJpdGVkIGJldHdlZW4gdGhlIGNvbW1vbiBwYXJlbnRzIG9mIHRoZVxuICogY3VycmVudCBzdGF0ZSBhbmQgYSBnaXZlbiBkZXN0aW5hdGlvbiBzdGF0ZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY3VycmVudFBhcmFtcyBUaGUgdmFsdWUgb2YgdGhlIGN1cnJlbnQgc3RhdGUgcGFyYW1ldGVycyAoJHN0YXRlUGFyYW1zKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBuZXdQYXJhbXMgVGhlIHNldCBvZiBwYXJhbWV0ZXJzIHdoaWNoIHdpbGwgYmUgY29tcG9zaXRlZCB3aXRoIGluaGVyaXRlZCBwYXJhbXMuXG4gKiBAcGFyYW0ge09iamVjdH0gJGN1cnJlbnQgSW50ZXJuYWwgZGVmaW5pdGlvbiBvZiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IHN0YXRlLlxuICogQHBhcmFtIHtPYmplY3R9ICR0byBJbnRlcm5hbCBkZWZpbml0aW9uIG9mIG9iamVjdCByZXByZXNlbnRpbmcgc3RhdGUgdG8gdHJhbnNpdGlvbiB0by5cbiAqL1xuZnVuY3Rpb24gaW5oZXJpdFBhcmFtcyhjdXJyZW50UGFyYW1zLCBuZXdQYXJhbXMsICRjdXJyZW50LCAkdG8pIHtcbiAgdmFyIHBhcmVudHMgPSBhbmNlc3RvcnMoJGN1cnJlbnQsICR0byksIHBhcmVudFBhcmFtcywgaW5oZXJpdGVkID0ge30sIGluaGVyaXRMaXN0ID0gW107XG5cbiAgZm9yICh2YXIgaSBpbiBwYXJlbnRzKSB7XG4gICAgaWYgKCFwYXJlbnRzW2ldLnBhcmFtcykgY29udGludWU7XG4gICAgcGFyZW50UGFyYW1zID0gb2JqZWN0S2V5cyhwYXJlbnRzW2ldLnBhcmFtcyk7XG4gICAgaWYgKCFwYXJlbnRQYXJhbXMubGVuZ3RoKSBjb250aW51ZTtcblxuICAgIGZvciAodmFyIGogaW4gcGFyZW50UGFyYW1zKSB7XG4gICAgICBpZiAoaW5kZXhPZihpbmhlcml0TGlzdCwgcGFyZW50UGFyYW1zW2pdKSA+PSAwKSBjb250aW51ZTtcbiAgICAgIGluaGVyaXRMaXN0LnB1c2gocGFyZW50UGFyYW1zW2pdKTtcbiAgICAgIGluaGVyaXRlZFtwYXJlbnRQYXJhbXNbal1dID0gY3VycmVudFBhcmFtc1twYXJlbnRQYXJhbXNbal1dO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZXh0ZW5kKHt9LCBpbmhlcml0ZWQsIG5ld1BhcmFtcyk7XG59XG5cbi8qKlxuICogUGVyZm9ybXMgYSBub24tc3RyaWN0IGNvbXBhcmlzb24gb2YgdGhlIHN1YnNldCBvZiB0d28gb2JqZWN0cywgZGVmaW5lZCBieSBhIGxpc3Qgb2Yga2V5cy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgZmlyc3Qgb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIHNlY29uZCBvYmplY3QuXG4gKiBAcGFyYW0ge0FycmF5fSBrZXlzIFRoZSBsaXN0IG9mIGtleXMgd2l0aGluIGVhY2ggb2JqZWN0IHRvIGNvbXBhcmUuIElmIHRoZSBsaXN0IGlzIGVtcHR5IG9yIG5vdCBzcGVjaWZpZWQsXG4gKiAgICAgICAgICAgICAgICAgICAgIGl0IGRlZmF1bHRzIHRvIHRoZSBsaXN0IG9mIGtleXMgaW4gYGFgLlxuICogQHJldHVybiB7Qm9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGtleXMgbWF0Y2gsIG90aGVyd2lzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEZvcktleXMoYSwgYiwga2V5cykge1xuICBpZiAoIWtleXMpIHtcbiAgICBrZXlzID0gW107XG4gICAgZm9yICh2YXIgbiBpbiBhKSBrZXlzLnB1c2gobik7IC8vIFVzZWQgaW5zdGVhZCBvZiBPYmplY3Qua2V5cygpIGZvciBJRTggY29tcGF0aWJpbGl0eVxuICB9XG5cbiAgZm9yICh2YXIgaT0wOyBpPGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgayA9IGtleXNbaV07XG4gICAgaWYgKGFba10gIT0gYltrXSkgcmV0dXJuIGZhbHNlOyAvLyBOb3QgJz09PScsIHZhbHVlcyBhcmVuJ3QgbmVjZXNzYXJpbHkgbm9ybWFsaXplZFxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHN1YnNldCBvZiBhbiBvYmplY3QsIGJhc2VkIG9uIGEgbGlzdCBvZiBrZXlzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGtleXNcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZXNcbiAqIEByZXR1cm4ge0Jvb2xlYW59IFJldHVybnMgYSBzdWJzZXQgb2YgYHZhbHVlc2AuXG4gKi9cbmZ1bmN0aW9uIGZpbHRlckJ5S2V5cyhrZXlzLCB2YWx1ZXMpIHtcbiAgdmFyIGZpbHRlcmVkID0ge307XG5cbiAgZm9yRWFjaChrZXlzLCBmdW5jdGlvbiAobmFtZSkge1xuICAgIGZpbHRlcmVkW25hbWVdID0gdmFsdWVzW25hbWVdO1xuICB9KTtcbiAgcmV0dXJuIGZpbHRlcmVkO1xufVxuXG4vLyBsaWtlIF8uaW5kZXhCeVxuLy8gd2hlbiB5b3Uga25vdyB0aGF0IHlvdXIgaW5kZXggdmFsdWVzIHdpbGwgYmUgdW5pcXVlLCBvciB5b3Ugd2FudCBsYXN0LW9uZS1pbiB0byB3aW5cbmZ1bmN0aW9uIGluZGV4QnkoYXJyYXksIHByb3BOYW1lKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZm9yRWFjaChhcnJheSwgZnVuY3Rpb24oaXRlbSkge1xuICAgIHJlc3VsdFtpdGVtW3Byb3BOYW1lXV0gPSBpdGVtO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gZXh0cmFjdGVkIGZyb20gdW5kZXJzY29yZS5qc1xuLy8gUmV0dXJuIGEgY29weSBvZiB0aGUgb2JqZWN0IG9ubHkgY29udGFpbmluZyB0aGUgd2hpdGVsaXN0ZWQgcHJvcGVydGllcy5cbmZ1bmN0aW9uIHBpY2sob2JqKSB7XG4gIHZhciBjb3B5ID0ge307XG4gIHZhciBrZXlzID0gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShBcnJheS5wcm90b3R5cGUsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuICBmb3JFYWNoKGtleXMsIGZ1bmN0aW9uKGtleSkge1xuICAgIGlmIChrZXkgaW4gb2JqKSBjb3B5W2tleV0gPSBvYmpba2V5XTtcbiAgfSk7XG4gIHJldHVybiBjb3B5O1xufVxuXG4vLyBleHRyYWN0ZWQgZnJvbSB1bmRlcnNjb3JlLmpzXG4vLyBSZXR1cm4gYSBjb3B5IG9mIHRoZSBvYmplY3Qgb21pdHRpbmcgdGhlIGJsYWNrbGlzdGVkIHByb3BlcnRpZXMuXG5mdW5jdGlvbiBvbWl0KG9iaikge1xuICB2YXIgY29weSA9IHt9O1xuICB2YXIga2V5cyA9IEFycmF5LnByb3RvdHlwZS5jb25jYXQuYXBwbHkoQXJyYXkucHJvdG90eXBlLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmIChpbmRleE9mKGtleXMsIGtleSkgPT0gLTEpIGNvcHlba2V5XSA9IG9ialtrZXldO1xuICB9XG4gIHJldHVybiBjb3B5O1xufVxuXG5mdW5jdGlvbiBwbHVjayhjb2xsZWN0aW9uLCBrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBbXSA6IHt9O1xuXG4gIGZvckVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsLCBpKSB7XG4gICAgcmVzdWx0W2ldID0gaXNGdW5jdGlvbihrZXkpID8ga2V5KHZhbCkgOiB2YWxba2V5XTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGZpbHRlcihjb2xsZWN0aW9uLCBjYWxsYmFjaykge1xuICB2YXIgYXJyYXkgPSBpc0FycmF5KGNvbGxlY3Rpb24pO1xuICB2YXIgcmVzdWx0ID0gYXJyYXkgPyBbXSA6IHt9O1xuICBmb3JFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbCwgaSkge1xuICAgIGlmIChjYWxsYmFjayh2YWwsIGkpKSB7XG4gICAgICByZXN1bHRbYXJyYXkgPyByZXN1bHQubGVuZ3RoIDogaV0gPSB2YWw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbWFwKGNvbGxlY3Rpb24sIGNhbGxiYWNrKSB7XG4gIHZhciByZXN1bHQgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gW10gOiB7fTtcblxuICBmb3JFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbCwgaSkge1xuICAgIHJlc3VsdFtpXSA9IGNhbGxiYWNrKHZhbCwgaSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEBuZ2RvYyBvdmVydmlld1xuICogQG5hbWUgdWkucm91dGVyLnV0aWxcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqICMgdWkucm91dGVyLnV0aWwgc3ViLW1vZHVsZVxuICpcbiAqIFRoaXMgbW9kdWxlIGlzIGEgZGVwZW5kZW5jeSBvZiBvdGhlciBzdWItbW9kdWxlcy4gRG8gbm90IGluY2x1ZGUgdGhpcyBtb2R1bGUgYXMgYSBkZXBlbmRlbmN5XG4gKiBpbiB5b3VyIGFuZ3VsYXIgYXBwICh1c2Uge0BsaW5rIHVpLnJvdXRlcn0gbW9kdWxlIGluc3RlYWQpLlxuICpcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ3VpLnJvdXRlci51dGlsJywgWyduZyddKTtcblxuLyoqXG4gKiBAbmdkb2Mgb3ZlcnZpZXdcbiAqIEBuYW1lIHVpLnJvdXRlci5yb3V0ZXJcbiAqIFxuICogQHJlcXVpcmVzIHVpLnJvdXRlci51dGlsXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiAjIHVpLnJvdXRlci5yb3V0ZXIgc3ViLW1vZHVsZVxuICpcbiAqIFRoaXMgbW9kdWxlIGlzIGEgZGVwZW5kZW5jeSBvZiBvdGhlciBzdWItbW9kdWxlcy4gRG8gbm90IGluY2x1ZGUgdGhpcyBtb2R1bGUgYXMgYSBkZXBlbmRlbmN5XG4gKiBpbiB5b3VyIGFuZ3VsYXIgYXBwICh1c2Uge0BsaW5rIHVpLnJvdXRlcn0gbW9kdWxlIGluc3RlYWQpLlxuICovXG5hbmd1bGFyLm1vZHVsZSgndWkucm91dGVyLnJvdXRlcicsIFsndWkucm91dGVyLnV0aWwnXSk7XG5cbi8qKlxuICogQG5nZG9jIG92ZXJ2aWV3XG4gKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGVcbiAqIFxuICogQHJlcXVpcmVzIHVpLnJvdXRlci5yb3V0ZXJcbiAqIEByZXF1aXJlcyB1aS5yb3V0ZXIudXRpbFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogIyB1aS5yb3V0ZXIuc3RhdGUgc3ViLW1vZHVsZVxuICpcbiAqIFRoaXMgbW9kdWxlIGlzIGEgZGVwZW5kZW5jeSBvZiB0aGUgbWFpbiB1aS5yb3V0ZXIgbW9kdWxlLiBEbyBub3QgaW5jbHVkZSB0aGlzIG1vZHVsZSBhcyBhIGRlcGVuZGVuY3lcbiAqIGluIHlvdXIgYW5ndWxhciBhcHAgKHVzZSB7QGxpbmsgdWkucm91dGVyfSBtb2R1bGUgaW5zdGVhZCkuXG4gKiBcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ3VpLnJvdXRlci5zdGF0ZScsIFsndWkucm91dGVyLnJvdXRlcicsICd1aS5yb3V0ZXIudXRpbCddKTtcblxuLyoqXG4gKiBAbmdkb2Mgb3ZlcnZpZXdcbiAqIEBuYW1lIHVpLnJvdXRlclxuICpcbiAqIEByZXF1aXJlcyB1aS5yb3V0ZXIuc3RhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqICMgdWkucm91dGVyXG4gKiBcbiAqICMjIFRoZSBtYWluIG1vZHVsZSBmb3IgdWkucm91dGVyIFxuICogVGhlcmUgYXJlIHNldmVyYWwgc3ViLW1vZHVsZXMgaW5jbHVkZWQgd2l0aCB0aGUgdWkucm91dGVyIG1vZHVsZSwgaG93ZXZlciBvbmx5IHRoaXMgbW9kdWxlIGlzIG5lZWRlZFxuICogYXMgYSBkZXBlbmRlbmN5IHdpdGhpbiB5b3VyIGFuZ3VsYXIgYXBwLiBUaGUgb3RoZXIgbW9kdWxlcyBhcmUgZm9yIG9yZ2FuaXphdGlvbiBwdXJwb3Nlcy4gXG4gKlxuICogVGhlIG1vZHVsZXMgYXJlOlxuICogKiB1aS5yb3V0ZXIgLSB0aGUgbWFpbiBcInVtYnJlbGxhXCIgbW9kdWxlXG4gKiAqIHVpLnJvdXRlci5yb3V0ZXIgLSBcbiAqIFxuICogKllvdSdsbCBuZWVkIHRvIGluY2x1ZGUgKipvbmx5KiogdGhpcyBtb2R1bGUgYXMgdGhlIGRlcGVuZGVuY3kgd2l0aGluIHlvdXIgYW5ndWxhciBhcHAuKlxuICogXG4gKiA8cHJlPlxuICogPCFkb2N0eXBlIGh0bWw+XG4gKiA8aHRtbCBuZy1hcHA9XCJteUFwcFwiPlxuICogPGhlYWQ+XG4gKiAgIDxzY3JpcHQgc3JjPVwianMvYW5ndWxhci5qc1wiPjwvc2NyaXB0PlxuICogICA8IS0tIEluY2x1ZGUgdGhlIHVpLXJvdXRlciBzY3JpcHQgLS0+XG4gKiAgIDxzY3JpcHQgc3JjPVwianMvYW5ndWxhci11aS1yb3V0ZXIubWluLmpzXCI+PC9zY3JpcHQ+XG4gKiAgIDxzY3JpcHQ+XG4gKiAgICAgLy8gLi4uYW5kIGFkZCAndWkucm91dGVyJyBhcyBhIGRlcGVuZGVuY3lcbiAqICAgICB2YXIgbXlBcHAgPSBhbmd1bGFyLm1vZHVsZSgnbXlBcHAnLCBbJ3VpLnJvdXRlciddKTtcbiAqICAgPC9zY3JpcHQ+XG4gKiA8L2hlYWQ+XG4gKiA8Ym9keT5cbiAqIDwvYm9keT5cbiAqIDwvaHRtbD5cbiAqIDwvcHJlPlxuICovXG5hbmd1bGFyLm1vZHVsZSgndWkucm91dGVyJywgWyd1aS5yb3V0ZXIuc3RhdGUnXSk7XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5yb3V0ZXIuY29tcGF0JywgWyd1aS5yb3V0ZXInXSk7XG5cbi8qKlxuICogQG5nZG9jIG9iamVjdFxuICogQG5hbWUgdWkucm91dGVyLnV0aWwuJHJlc29sdmVcbiAqXG4gKiBAcmVxdWlyZXMgJHFcbiAqIEByZXF1aXJlcyAkaW5qZWN0b3JcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIE1hbmFnZXMgcmVzb2x1dGlvbiBvZiAoYWN5Y2xpYykgZ3JhcGhzIG9mIHByb21pc2VzLlxuICovXG4kUmVzb2x2ZS4kaW5qZWN0ID0gWyckcScsICckaW5qZWN0b3InXTtcbmZ1bmN0aW9uICRSZXNvbHZlKCAgJHEsICAgICRpbmplY3Rvcikge1xuICBcbiAgdmFyIFZJU0lUX0lOX1BST0dSRVNTID0gMSxcbiAgICAgIFZJU0lUX0RPTkUgPSAyLFxuICAgICAgTk9USElORyA9IHt9LFxuICAgICAgTk9fREVQRU5ERU5DSUVTID0gW10sXG4gICAgICBOT19MT0NBTFMgPSBOT1RISU5HLFxuICAgICAgTk9fUEFSRU5UID0gZXh0ZW5kKCRxLndoZW4oTk9USElORyksIHsgJCRwcm9taXNlczogTk9USElORywgJCR2YWx1ZXM6IE5PVEhJTkcgfSk7XG4gIFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgdWkucm91dGVyLnV0aWwuJHJlc29sdmUjc3R1ZHlcbiAgICogQG1ldGhvZE9mIHVpLnJvdXRlci51dGlsLiRyZXNvbHZlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTdHVkaWVzIGEgc2V0IG9mIGludm9jYWJsZXMgdGhhdCBhcmUgbGlrZWx5IHRvIGJlIHVzZWQgbXVsdGlwbGUgdGltZXMuXG4gICAqIDxwcmU+XG4gICAqICRyZXNvbHZlLnN0dWR5KGludm9jYWJsZXMpKGxvY2FscywgcGFyZW50LCBzZWxmKVxuICAgKiA8L3ByZT5cbiAgICogaXMgZXF1aXZhbGVudCB0b1xuICAgKiA8cHJlPlxuICAgKiAkcmVzb2x2ZS5yZXNvbHZlKGludm9jYWJsZXMsIGxvY2FscywgcGFyZW50LCBzZWxmKVxuICAgKiA8L3ByZT5cbiAgICogYnV0IHRoZSBmb3JtZXIgaXMgbW9yZSBlZmZpY2llbnQgKGluIGZhY3QgYHJlc29sdmVgIGp1c3QgY2FsbHMgYHN0dWR5YCBcbiAgICogaW50ZXJuYWxseSkuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBpbnZvY2FibGVzIEludm9jYWJsZSBvYmplY3RzXG4gICAqIEByZXR1cm4ge2Z1bmN0aW9ufSBhIGZ1bmN0aW9uIHRvIHBhc3MgaW4gbG9jYWxzLCBwYXJlbnQgYW5kIHNlbGZcbiAgICovXG4gIHRoaXMuc3R1ZHkgPSBmdW5jdGlvbiAoaW52b2NhYmxlcykge1xuICAgIGlmICghaXNPYmplY3QoaW52b2NhYmxlcykpIHRocm93IG5ldyBFcnJvcihcIidpbnZvY2FibGVzJyBtdXN0IGJlIGFuIG9iamVjdFwiKTtcbiAgICB2YXIgaW52b2NhYmxlS2V5cyA9IG9iamVjdEtleXMoaW52b2NhYmxlcyB8fCB7fSk7XG4gICAgXG4gICAgLy8gUGVyZm9ybSBhIHRvcG9sb2dpY2FsIHNvcnQgb2YgaW52b2NhYmxlcyB0byBidWlsZCBhbiBvcmRlcmVkIHBsYW5cbiAgICB2YXIgcGxhbiA9IFtdLCBjeWNsZSA9IFtdLCB2aXNpdGVkID0ge307XG4gICAgZnVuY3Rpb24gdmlzaXQodmFsdWUsIGtleSkge1xuICAgICAgaWYgKHZpc2l0ZWRba2V5XSA9PT0gVklTSVRfRE9ORSkgcmV0dXJuO1xuICAgICAgXG4gICAgICBjeWNsZS5wdXNoKGtleSk7XG4gICAgICBpZiAodmlzaXRlZFtrZXldID09PSBWSVNJVF9JTl9QUk9HUkVTUykge1xuICAgICAgICBjeWNsZS5zcGxpY2UoMCwgaW5kZXhPZihjeWNsZSwga2V5KSk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkN5Y2xpYyBkZXBlbmRlbmN5OiBcIiArIGN5Y2xlLmpvaW4oXCIgLT4gXCIpKTtcbiAgICAgIH1cbiAgICAgIHZpc2l0ZWRba2V5XSA9IFZJU0lUX0lOX1BST0dSRVNTO1xuICAgICAgXG4gICAgICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICAgIHBsYW4ucHVzaChrZXksIFsgZnVuY3Rpb24oKSB7IHJldHVybiAkaW5qZWN0b3IuZ2V0KHZhbHVlKTsgfV0sIE5PX0RFUEVOREVOQ0lFUyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcGFyYW1zID0gJGluamVjdG9yLmFubm90YXRlKHZhbHVlKTtcbiAgICAgICAgZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgIGlmIChwYXJhbSAhPT0ga2V5ICYmIGludm9jYWJsZXMuaGFzT3duUHJvcGVydHkocGFyYW0pKSB2aXNpdChpbnZvY2FibGVzW3BhcmFtXSwgcGFyYW0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcGxhbi5wdXNoKGtleSwgdmFsdWUsIHBhcmFtcyk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGN5Y2xlLnBvcCgpO1xuICAgICAgdmlzaXRlZFtrZXldID0gVklTSVRfRE9ORTtcbiAgICB9XG4gICAgZm9yRWFjaChpbnZvY2FibGVzLCB2aXNpdCk7XG4gICAgaW52b2NhYmxlcyA9IGN5Y2xlID0gdmlzaXRlZCA9IG51bGw7IC8vIHBsYW4gaXMgYWxsIHRoYXQncyByZXF1aXJlZFxuICAgIFxuICAgIGZ1bmN0aW9uIGlzUmVzb2x2ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0KHZhbHVlKSAmJiB2YWx1ZS50aGVuICYmIHZhbHVlLiQkcHJvbWlzZXM7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBmdW5jdGlvbiAobG9jYWxzLCBwYXJlbnQsIHNlbGYpIHtcbiAgICAgIGlmIChpc1Jlc29sdmUobG9jYWxzKSAmJiBzZWxmID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc2VsZiA9IHBhcmVudDsgcGFyZW50ID0gbG9jYWxzOyBsb2NhbHMgPSBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKCFsb2NhbHMpIGxvY2FscyA9IE5PX0xPQ0FMUztcbiAgICAgIGVsc2UgaWYgKCFpc09iamVjdChsb2NhbHMpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIidsb2NhbHMnIG11c3QgYmUgYW4gb2JqZWN0XCIpO1xuICAgICAgfSAgICAgICBcbiAgICAgIGlmICghcGFyZW50KSBwYXJlbnQgPSBOT19QQVJFTlQ7XG4gICAgICBlbHNlIGlmICghaXNSZXNvbHZlKHBhcmVudCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiJ3BhcmVudCcgbXVzdCBiZSBhIHByb21pc2UgcmV0dXJuZWQgYnkgJHJlc29sdmUucmVzb2x2ZSgpXCIpO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBUbyBjb21wbGV0ZSB0aGUgb3ZlcmFsbCByZXNvbHV0aW9uLCB3ZSBoYXZlIHRvIHdhaXQgZm9yIHRoZSBwYXJlbnRcbiAgICAgIC8vIHByb21pc2UgYW5kIGZvciB0aGUgcHJvbWlzZSBmb3IgZWFjaCBpbnZva2FibGUgaW4gb3VyIHBsYW4uXG4gICAgICB2YXIgcmVzb2x1dGlvbiA9ICRxLmRlZmVyKCksXG4gICAgICAgICAgcmVzdWx0ID0gcmVzb2x1dGlvbi5wcm9taXNlLFxuICAgICAgICAgIHByb21pc2VzID0gcmVzdWx0LiQkcHJvbWlzZXMgPSB7fSxcbiAgICAgICAgICB2YWx1ZXMgPSBleHRlbmQoe30sIGxvY2FscyksXG4gICAgICAgICAgd2FpdCA9IDEgKyBwbGFuLmxlbmd0aC8zLFxuICAgICAgICAgIG1lcmdlZCA9IGZhbHNlO1xuICAgICAgICAgIFxuICAgICAgZnVuY3Rpb24gZG9uZSgpIHtcbiAgICAgICAgLy8gTWVyZ2UgcGFyZW50IHZhbHVlcyB3ZSBoYXZlbid0IGdvdCB5ZXQgYW5kIHB1Ymxpc2ggb3VyIG93biAkJHZhbHVlc1xuICAgICAgICBpZiAoIS0td2FpdCkge1xuICAgICAgICAgIGlmICghbWVyZ2VkKSBtZXJnZSh2YWx1ZXMsIHBhcmVudC4kJHZhbHVlcyk7IFxuICAgICAgICAgIHJlc3VsdC4kJHZhbHVlcyA9IHZhbHVlcztcbiAgICAgICAgICByZXN1bHQuJCRwcm9taXNlcyA9IHJlc3VsdC4kJHByb21pc2VzIHx8IHRydWU7IC8vIGtlZXAgZm9yIGlzUmVzb2x2ZSgpXG4gICAgICAgICAgZGVsZXRlIHJlc3VsdC4kJGluaGVyaXRlZFZhbHVlcztcbiAgICAgICAgICByZXNvbHV0aW9uLnJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICBmdW5jdGlvbiBmYWlsKHJlYXNvbikge1xuICAgICAgICByZXN1bHQuJCRmYWlsdXJlID0gcmVhc29uO1xuICAgICAgICByZXNvbHV0aW9uLnJlamVjdChyZWFzb24pO1xuICAgICAgfVxuXG4gICAgICAvLyBTaG9ydC1jaXJjdWl0IGlmIHBhcmVudCBoYXMgYWxyZWFkeSBmYWlsZWRcbiAgICAgIGlmIChpc0RlZmluZWQocGFyZW50LiQkZmFpbHVyZSkpIHtcbiAgICAgICAgZmFpbChwYXJlbnQuJCRmYWlsdXJlKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgaWYgKHBhcmVudC4kJGluaGVyaXRlZFZhbHVlcykge1xuICAgICAgICBtZXJnZSh2YWx1ZXMsIG9taXQocGFyZW50LiQkaW5oZXJpdGVkVmFsdWVzLCBpbnZvY2FibGVLZXlzKSk7XG4gICAgICB9XG5cbiAgICAgIC8vIE1lcmdlIHBhcmVudCB2YWx1ZXMgaWYgdGhlIHBhcmVudCBoYXMgYWxyZWFkeSByZXNvbHZlZCwgb3IgbWVyZ2VcbiAgICAgIC8vIHBhcmVudCBwcm9taXNlcyBhbmQgd2FpdCBpZiB0aGUgcGFyZW50IHJlc29sdmUgaXMgc3RpbGwgaW4gcHJvZ3Jlc3MuXG4gICAgICBleHRlbmQocHJvbWlzZXMsIHBhcmVudC4kJHByb21pc2VzKTtcbiAgICAgIGlmIChwYXJlbnQuJCR2YWx1ZXMpIHtcbiAgICAgICAgbWVyZ2VkID0gbWVyZ2UodmFsdWVzLCBvbWl0KHBhcmVudC4kJHZhbHVlcywgaW52b2NhYmxlS2V5cykpO1xuICAgICAgICByZXN1bHQuJCRpbmhlcml0ZWRWYWx1ZXMgPSBvbWl0KHBhcmVudC4kJHZhbHVlcywgaW52b2NhYmxlS2V5cyk7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwYXJlbnQuJCRpbmhlcml0ZWRWYWx1ZXMpIHtcbiAgICAgICAgICByZXN1bHQuJCRpbmhlcml0ZWRWYWx1ZXMgPSBvbWl0KHBhcmVudC4kJGluaGVyaXRlZFZhbHVlcywgaW52b2NhYmxlS2V5cyk7XG4gICAgICAgIH0gICAgICAgIFxuICAgICAgICBwYXJlbnQudGhlbihkb25lLCBmYWlsKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gUHJvY2VzcyBlYWNoIGludm9jYWJsZSBpbiB0aGUgcGxhbiwgYnV0IGlnbm9yZSBhbnkgd2hlcmUgYSBsb2NhbCBvZiB0aGUgc2FtZSBuYW1lIGV4aXN0cy5cbiAgICAgIGZvciAodmFyIGk9MCwgaWk9cGxhbi5sZW5ndGg7IGk8aWk7IGkrPTMpIHtcbiAgICAgICAgaWYgKGxvY2Fscy5oYXNPd25Qcm9wZXJ0eShwbGFuW2ldKSkgZG9uZSgpO1xuICAgICAgICBlbHNlIGludm9rZShwbGFuW2ldLCBwbGFuW2krMV0sIHBsYW5baSsyXSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGZ1bmN0aW9uIGludm9rZShrZXksIGludm9jYWJsZSwgcGFyYW1zKSB7XG4gICAgICAgIC8vIENyZWF0ZSBhIGRlZmVycmVkIGZvciB0aGlzIGludm9jYXRpb24uIEZhaWx1cmVzIHdpbGwgcHJvcGFnYXRlIHRvIHRoZSByZXNvbHV0aW9uIGFzIHdlbGwuXG4gICAgICAgIHZhciBpbnZvY2F0aW9uID0gJHEuZGVmZXIoKSwgd2FpdFBhcmFtcyA9IDA7XG4gICAgICAgIGZ1bmN0aW9uIG9uZmFpbHVyZShyZWFzb24pIHtcbiAgICAgICAgICBpbnZvY2F0aW9uLnJlamVjdChyZWFzb24pO1xuICAgICAgICAgIGZhaWwocmVhc29uKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBXYWl0IGZvciBhbnkgcGFyYW1ldGVyIHRoYXQgd2UgaGF2ZSBhIHByb21pc2UgZm9yIChlaXRoZXIgZnJvbSBwYXJlbnQgb3IgZnJvbSB0aGlzXG4gICAgICAgIC8vIHJlc29sdmU7IGluIHRoYXQgY2FzZSBzdHVkeSgpIHdpbGwgaGF2ZSBtYWRlIHN1cmUgaXQncyBvcmRlcmVkIGJlZm9yZSB1cyBpbiB0aGUgcGxhbikuXG4gICAgICAgIGZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiAoZGVwKSB7XG4gICAgICAgICAgaWYgKHByb21pc2VzLmhhc093blByb3BlcnR5KGRlcCkgJiYgIWxvY2Fscy5oYXNPd25Qcm9wZXJ0eShkZXApKSB7XG4gICAgICAgICAgICB3YWl0UGFyYW1zKys7XG4gICAgICAgICAgICBwcm9taXNlc1tkZXBdLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICB2YWx1ZXNbZGVwXSA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgaWYgKCEoLS13YWl0UGFyYW1zKSkgcHJvY2VlZCgpO1xuICAgICAgICAgICAgfSwgb25mYWlsdXJlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIXdhaXRQYXJhbXMpIHByb2NlZWQoKTtcbiAgICAgICAgZnVuY3Rpb24gcHJvY2VlZCgpIHtcbiAgICAgICAgICBpZiAoaXNEZWZpbmVkKHJlc3VsdC4kJGZhaWx1cmUpKSByZXR1cm47XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGludm9jYXRpb24ucmVzb2x2ZSgkaW5qZWN0b3IuaW52b2tlKGludm9jYWJsZSwgc2VsZiwgdmFsdWVzKSk7XG4gICAgICAgICAgICBpbnZvY2F0aW9uLnByb21pc2UudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgIHZhbHVlc1trZXldID0gcmVzdWx0O1xuICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICB9LCBvbmZhaWx1cmUpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIG9uZmFpbHVyZShlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gUHVibGlzaCBwcm9taXNlIHN5bmNocm9ub3VzbHk7IGludm9jYXRpb25zIGZ1cnRoZXIgZG93biBpbiB0aGUgcGxhbiBtYXkgZGVwZW5kIG9uIGl0LlxuICAgICAgICBwcm9taXNlc1trZXldID0gaW52b2NhdGlvbi5wcm9taXNlO1xuICAgICAgfVxuICAgICAgXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gIH07XG4gIFxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHVpLnJvdXRlci51dGlsLiRyZXNvbHZlI3Jlc29sdmVcbiAgICogQG1ldGhvZE9mIHVpLnJvdXRlci51dGlsLiRyZXNvbHZlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZXNvbHZlcyBhIHNldCBvZiBpbnZvY2FibGVzLiBBbiBpbnZvY2FibGUgaXMgYSBmdW5jdGlvbiB0byBiZSBpbnZva2VkIHZpYSBcbiAgICogYCRpbmplY3Rvci5pbnZva2UoKWAsIGFuZCBjYW4gaGF2ZSBhbiBhcmJpdHJhcnkgbnVtYmVyIG9mIGRlcGVuZGVuY2llcy4gXG4gICAqIEFuIGludm9jYWJsZSBjYW4gZWl0aGVyIHJldHVybiBhIHZhbHVlIGRpcmVjdGx5LFxuICAgKiBvciBhIGAkcWAgcHJvbWlzZS4gSWYgYSBwcm9taXNlIGlzIHJldHVybmVkIGl0IHdpbGwgYmUgcmVzb2x2ZWQgYW5kIHRoZSBcbiAgICogcmVzdWx0aW5nIHZhbHVlIHdpbGwgYmUgdXNlZCBpbnN0ZWFkLiBEZXBlbmRlbmNpZXMgb2YgaW52b2NhYmxlcyBhcmUgcmVzb2x2ZWQgXG4gICAqIChpbiB0aGlzIG9yZGVyIG9mIHByZWNlZGVuY2UpXG4gICAqXG4gICAqIC0gZnJvbSB0aGUgc3BlY2lmaWVkIGBsb2NhbHNgXG4gICAqIC0gZnJvbSBhbm90aGVyIGludm9jYWJsZSB0aGF0IGlzIHBhcnQgb2YgdGhpcyBgJHJlc29sdmVgIGNhbGxcbiAgICogLSBmcm9tIGFuIGludm9jYWJsZSB0aGF0IGlzIGluaGVyaXRlZCBmcm9tIGEgYHBhcmVudGAgY2FsbCB0byBgJHJlc29sdmVgIFxuICAgKiAgIChvciByZWN1cnNpdmVseVxuICAgKiAtIGZyb20gYW55IGFuY2VzdG9yIGAkcmVzb2x2ZWAgb2YgdGhhdCBwYXJlbnQpLlxuICAgKlxuICAgKiBUaGUgcmV0dXJuIHZhbHVlIG9mIGAkcmVzb2x2ZWAgaXMgYSBwcm9taXNlIGZvciBhbiBvYmplY3QgdGhhdCBjb250YWlucyBcbiAgICogKGluIHRoaXMgb3JkZXIgb2YgcHJlY2VkZW5jZSlcbiAgICpcbiAgICogLSBhbnkgYGxvY2Fsc2AgKGlmIHNwZWNpZmllZClcbiAgICogLSB0aGUgcmVzb2x2ZWQgcmV0dXJuIHZhbHVlcyBvZiBhbGwgaW5qZWN0YWJsZXNcbiAgICogLSBhbnkgdmFsdWVzIGluaGVyaXRlZCBmcm9tIGEgYHBhcmVudGAgY2FsbCB0byBgJHJlc29sdmVgIChpZiBzcGVjaWZpZWQpXG4gICAqXG4gICAqIFRoZSBwcm9taXNlIHdpbGwgcmVzb2x2ZSBhZnRlciB0aGUgYHBhcmVudGAgcHJvbWlzZSAoaWYgYW55KSBhbmQgYWxsIHByb21pc2VzIFxuICAgKiByZXR1cm5lZCBieSBpbmplY3RhYmxlcyBoYXZlIGJlZW4gcmVzb2x2ZWQuIElmIGFueSBpbnZvY2FibGUgXG4gICAqIChvciBgJGluamVjdG9yLmludm9rZWApIHRocm93cyBhbiBleGNlcHRpb24sIG9yIGlmIGEgcHJvbWlzZSByZXR1cm5lZCBieSBhbiBcbiAgICogaW52b2NhYmxlIGlzIHJlamVjdGVkLCB0aGUgYCRyZXNvbHZlYCBwcm9taXNlIGlzIGltbWVkaWF0ZWx5IHJlamVjdGVkIHdpdGggdGhlIFxuICAgKiBzYW1lIGVycm9yLiBBIHJlamVjdGlvbiBvZiBhIGBwYXJlbnRgIHByb21pc2UgKGlmIHNwZWNpZmllZCkgd2lsbCBsaWtld2lzZSBiZSBcbiAgICogcHJvcGFnYXRlZCBpbW1lZGlhdGVseS4gT25jZSB0aGUgYCRyZXNvbHZlYCBwcm9taXNlIGhhcyBiZWVuIHJlamVjdGVkLCBubyBcbiAgICogZnVydGhlciBpbnZvY2FibGVzIHdpbGwgYmUgY2FsbGVkLlxuICAgKiBcbiAgICogQ3ljbGljIGRlcGVuZGVuY2llcyBiZXR3ZWVuIGludm9jYWJsZXMgYXJlIG5vdCBwZXJtaXR0ZWQgYW5kIHdpbGwgY2F1ZXMgYCRyZXNvbHZlYFxuICAgKiB0byB0aHJvdyBhbiBlcnJvci4gQXMgYSBzcGVjaWFsIGNhc2UsIGFuIGluamVjdGFibGUgY2FuIGRlcGVuZCBvbiBhIHBhcmFtZXRlciBcbiAgICogd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBpbmplY3RhYmxlLCB3aGljaCB3aWxsIGJlIGZ1bGZpbGxlZCBmcm9tIHRoZSBgcGFyZW50YCBcbiAgICogaW5qZWN0YWJsZSBvZiB0aGUgc2FtZSBuYW1lLiBUaGlzIGFsbG93cyBpbmhlcml0ZWQgdmFsdWVzIHRvIGJlIGRlY29yYXRlZC4gXG4gICAqIE5vdGUgdGhhdCBpbiB0aGlzIGNhc2UgYW55IG90aGVyIGluamVjdGFibGUgaW4gdGhlIHNhbWUgYCRyZXNvbHZlYCB3aXRoIHRoZSBzYW1lXG4gICAqIGRlcGVuZGVuY3kgd291bGQgc2VlIHRoZSBkZWNvcmF0ZWQgdmFsdWUsIG5vdCB0aGUgaW5oZXJpdGVkIHZhbHVlLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgbWlzc2luZyBkZXBlbmRlbmNpZXMgLS0gdW5saWtlIGN5Y2xpYyBkZXBlbmRlbmNpZXMgLS0gd2lsbCBjYXVzZSBhbiBcbiAgICogKGFzeW5jaHJvbm91cykgcmVqZWN0aW9uIG9mIHRoZSBgJHJlc29sdmVgIHByb21pc2UgcmF0aGVyIHRoYW4gYSAoc3luY2hyb25vdXMpIFxuICAgKiBleGNlcHRpb24uXG4gICAqXG4gICAqIEludm9jYWJsZXMgYXJlIGludm9rZWQgZWFnZXJseSBhcyBzb29uIGFzIGFsbCBkZXBlbmRlbmNpZXMgYXJlIGF2YWlsYWJsZS4gXG4gICAqIFRoaXMgaXMgdHJ1ZSBldmVuIGZvciBkZXBlbmRlbmNpZXMgaW5oZXJpdGVkIGZyb20gYSBgcGFyZW50YCBjYWxsIHRvIGAkcmVzb2x2ZWAuXG4gICAqXG4gICAqIEFzIGEgc3BlY2lhbCBjYXNlLCBhbiBpbnZvY2FibGUgY2FuIGJlIGEgc3RyaW5nLCBpbiB3aGljaCBjYXNlIGl0IGlzIHRha2VuIHRvIFxuICAgKiBiZSBhIHNlcnZpY2UgbmFtZSB0byBiZSBwYXNzZWQgdG8gYCRpbmplY3Rvci5nZXQoKWAuIFRoaXMgaXMgc3VwcG9ydGVkIHByaW1hcmlseSBcbiAgICogZm9yIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5IHdpdGggdGhlIGByZXNvbHZlYCBwcm9wZXJ0eSBvZiBgJHJvdXRlUHJvdmlkZXJgIFxuICAgKiByb3V0ZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBpbnZvY2FibGVzIGZ1bmN0aW9ucyB0byBpbnZva2Ugb3IgXG4gICAqIGAkaW5qZWN0b3JgIHNlcnZpY2VzIHRvIGZldGNoLlxuICAgKiBAcGFyYW0ge29iamVjdH0gbG9jYWxzICB2YWx1ZXMgdG8gbWFrZSBhdmFpbGFibGUgdG8gdGhlIGluamVjdGFibGVzXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwYXJlbnQgIGEgcHJvbWlzZSByZXR1cm5lZCBieSBhbm90aGVyIGNhbGwgdG8gYCRyZXNvbHZlYC5cbiAgICogQHBhcmFtIHtvYmplY3R9IHNlbGYgIHRoZSBgdGhpc2AgZm9yIHRoZSBpbnZva2VkIG1ldGhvZHNcbiAgICogQHJldHVybiB7b2JqZWN0fSBQcm9taXNlIGZvciBhbiBvYmplY3QgdGhhdCBjb250YWlucyB0aGUgcmVzb2x2ZWQgcmV0dXJuIHZhbHVlXG4gICAqIG9mIGFsbCBpbnZvY2FibGVzLCBhcyB3ZWxsIGFzIGFueSBpbmhlcml0ZWQgYW5kIGxvY2FsIHZhbHVlcy5cbiAgICovXG4gIHRoaXMucmVzb2x2ZSA9IGZ1bmN0aW9uIChpbnZvY2FibGVzLCBsb2NhbHMsIHBhcmVudCwgc2VsZikge1xuICAgIHJldHVybiB0aGlzLnN0dWR5KGludm9jYWJsZXMpKGxvY2FscywgcGFyZW50LCBzZWxmKTtcbiAgfTtcbn1cblxuYW5ndWxhci5tb2R1bGUoJ3VpLnJvdXRlci51dGlsJykuc2VydmljZSgnJHJlc29sdmUnLCAkUmVzb2x2ZSk7XG5cblxuLyoqXG4gKiBAbmdkb2Mgb2JqZWN0XG4gKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC4kdGVtcGxhdGVGYWN0b3J5XG4gKlxuICogQHJlcXVpcmVzICRodHRwXG4gKiBAcmVxdWlyZXMgJHRlbXBsYXRlQ2FjaGVcbiAqIEByZXF1aXJlcyAkaW5qZWN0b3JcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNlcnZpY2UuIE1hbmFnZXMgbG9hZGluZyBvZiB0ZW1wbGF0ZXMuXG4gKi9cbiRUZW1wbGF0ZUZhY3RvcnkuJGluamVjdCA9IFsnJGh0dHAnLCAnJHRlbXBsYXRlQ2FjaGUnLCAnJGluamVjdG9yJ107XG5mdW5jdGlvbiAkVGVtcGxhdGVGYWN0b3J5KCAgJGh0dHAsICAgJHRlbXBsYXRlQ2FjaGUsICAgJGluamVjdG9yKSB7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC4kdGVtcGxhdGVGYWN0b3J5I2Zyb21Db25maWdcbiAgICogQG1ldGhvZE9mIHVpLnJvdXRlci51dGlsLiR0ZW1wbGF0ZUZhY3RvcnlcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENyZWF0ZXMgYSB0ZW1wbGF0ZSBmcm9tIGEgY29uZmlndXJhdGlvbiBvYmplY3QuIFxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIENvbmZpZ3VyYXRpb24gb2JqZWN0IGZvciB3aGljaCB0byBsb2FkIGEgdGVtcGxhdGUuIFxuICAgKiBUaGUgZm9sbG93aW5nIHByb3BlcnRpZXMgYXJlIHNlYXJjaCBpbiB0aGUgc3BlY2lmaWVkIG9yZGVyLCBhbmQgdGhlIGZpcnN0IG9uZSBcbiAgICogdGhhdCBpcyBkZWZpbmVkIGlzIHVzZWQgdG8gY3JlYXRlIHRoZSB0ZW1wbGF0ZTpcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSBjb25maWcudGVtcGxhdGUgaHRtbCBzdHJpbmcgdGVtcGxhdGUgb3IgZnVuY3Rpb24gdG8gXG4gICAqIGxvYWQgdmlhIHtAbGluayB1aS5yb3V0ZXIudXRpbC4kdGVtcGxhdGVGYWN0b3J5I2Zyb21TdHJpbmcgZnJvbVN0cmluZ30uXG4gICAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0gY29uZmlnLnRlbXBsYXRlVXJsIHVybCB0byBsb2FkIG9yIGEgZnVuY3Rpb24gcmV0dXJuaW5nIFxuICAgKiB0aGUgdXJsIHRvIGxvYWQgdmlhIHtAbGluayB1aS5yb3V0ZXIudXRpbC4kdGVtcGxhdGVGYWN0b3J5I2Zyb21VcmwgZnJvbVVybH0uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbmZpZy50ZW1wbGF0ZVByb3ZpZGVyIGZ1bmN0aW9uIHRvIGludm9rZSB2aWEgXG4gICAqIHtAbGluayB1aS5yb3V0ZXIudXRpbC4kdGVtcGxhdGVGYWN0b3J5I2Zyb21Qcm92aWRlciBmcm9tUHJvdmlkZXJ9LlxuICAgKiBAcGFyYW0ge29iamVjdH0gcGFyYW1zICBQYXJhbWV0ZXJzIHRvIHBhc3MgdG8gdGhlIHRlbXBsYXRlIGZ1bmN0aW9uLlxuICAgKiBAcGFyYW0ge29iamVjdH0gbG9jYWxzIExvY2FscyB0byBwYXNzIHRvIGBpbnZva2VgIGlmIHRoZSB0ZW1wbGF0ZSBpcyBsb2FkZWQgXG4gICAqIHZpYSBhIGB0ZW1wbGF0ZVByb3ZpZGVyYC4gRGVmYXVsdHMgdG8gYHsgcGFyYW1zOiBwYXJhbXMgfWAuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ3xvYmplY3R9ICBUaGUgdGVtcGxhdGUgaHRtbCBhcyBhIHN0cmluZywgb3IgYSBwcm9taXNlIGZvciBcbiAgICogdGhhdCBzdHJpbmcsb3IgYG51bGxgIGlmIG5vIHRlbXBsYXRlIGlzIGNvbmZpZ3VyZWQuXG4gICAqL1xuICB0aGlzLmZyb21Db25maWcgPSBmdW5jdGlvbiAoY29uZmlnLCBwYXJhbXMsIGxvY2Fscykge1xuICAgIHJldHVybiAoXG4gICAgICBpc0RlZmluZWQoY29uZmlnLnRlbXBsYXRlKSA/IHRoaXMuZnJvbVN0cmluZyhjb25maWcudGVtcGxhdGUsIHBhcmFtcykgOlxuICAgICAgaXNEZWZpbmVkKGNvbmZpZy50ZW1wbGF0ZVVybCkgPyB0aGlzLmZyb21VcmwoY29uZmlnLnRlbXBsYXRlVXJsLCBwYXJhbXMpIDpcbiAgICAgIGlzRGVmaW5lZChjb25maWcudGVtcGxhdGVQcm92aWRlcikgPyB0aGlzLmZyb21Qcm92aWRlcihjb25maWcudGVtcGxhdGVQcm92aWRlciwgcGFyYW1zLCBsb2NhbHMpIDpcbiAgICAgIG51bGxcbiAgICApO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgdWkucm91dGVyLnV0aWwuJHRlbXBsYXRlRmFjdG9yeSNmcm9tU3RyaW5nXG4gICAqIEBtZXRob2RPZiB1aS5yb3V0ZXIudXRpbC4kdGVtcGxhdGVGYWN0b3J5XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDcmVhdGVzIGEgdGVtcGxhdGUgZnJvbSBhIHN0cmluZyBvciBhIGZ1bmN0aW9uIHJldHVybmluZyBhIHN0cmluZy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSB0ZW1wbGF0ZSBodG1sIHRlbXBsYXRlIGFzIGEgc3RyaW5nIG9yIGZ1bmN0aW9uIHRoYXQgXG4gICAqIHJldHVybnMgYW4gaHRtbCB0ZW1wbGF0ZSBhcyBhIHN0cmluZy5cbiAgICogQHBhcmFtIHtvYmplY3R9IHBhcmFtcyBQYXJhbWV0ZXJzIHRvIHBhc3MgdG8gdGhlIHRlbXBsYXRlIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd8b2JqZWN0fSBUaGUgdGVtcGxhdGUgaHRtbCBhcyBhIHN0cmluZywgb3IgYSBwcm9taXNlIGZvciB0aGF0IFxuICAgKiBzdHJpbmcuXG4gICAqL1xuICB0aGlzLmZyb21TdHJpbmcgPSBmdW5jdGlvbiAodGVtcGxhdGUsIHBhcmFtcykge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHRlbXBsYXRlKSA/IHRlbXBsYXRlKHBhcmFtcykgOiB0ZW1wbGF0ZTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHVpLnJvdXRlci51dGlsLiR0ZW1wbGF0ZUZhY3RvcnkjZnJvbVVybFxuICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnV0aWwuJHRlbXBsYXRlRmFjdG9yeVxuICAgKiBcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIExvYWRzIGEgdGVtcGxhdGUgZnJvbSB0aGUgYSBVUkwgdmlhIGAkaHR0cGAgYW5kIGAkdGVtcGxhdGVDYWNoZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfEZ1bmN0aW9ufSB1cmwgdXJsIG9mIHRoZSB0ZW1wbGF0ZSB0byBsb2FkLCBvciBhIGZ1bmN0aW9uIFxuICAgKiB0aGF0IHJldHVybnMgYSB1cmwuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgUGFyYW1ldGVycyB0byBwYXNzIHRvIHRoZSB1cmwgZnVuY3Rpb24uXG4gICAqIEByZXR1cm4ge3N0cmluZ3xQcm9taXNlLjxzdHJpbmc+fSBUaGUgdGVtcGxhdGUgaHRtbCBhcyBhIHN0cmluZywgb3IgYSBwcm9taXNlIFxuICAgKiBmb3IgdGhhdCBzdHJpbmcuXG4gICAqL1xuICB0aGlzLmZyb21VcmwgPSBmdW5jdGlvbiAodXJsLCBwYXJhbXMpIHtcbiAgICBpZiAoaXNGdW5jdGlvbih1cmwpKSB1cmwgPSB1cmwocGFyYW1zKTtcbiAgICBpZiAodXJsID09IG51bGwpIHJldHVybiBudWxsO1xuICAgIGVsc2UgcmV0dXJuICRodHRwXG4gICAgICAgIC5nZXQodXJsLCB7IGNhY2hlOiAkdGVtcGxhdGVDYWNoZSwgaGVhZGVyczogeyBBY2NlcHQ6ICd0ZXh0L2h0bWwnIH19KVxuICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkgeyByZXR1cm4gcmVzcG9uc2UuZGF0YTsgfSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC4kdGVtcGxhdGVGYWN0b3J5I2Zyb21Qcm92aWRlclxuICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnV0aWwuJHRlbXBsYXRlRmFjdG9yeVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ3JlYXRlcyBhIHRlbXBsYXRlIGJ5IGludm9raW5nIGFuIGluamVjdGFibGUgcHJvdmlkZXIgZnVuY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByb3ZpZGVyIEZ1bmN0aW9uIHRvIGludm9rZSB2aWEgYCRpbmplY3Rvci5pbnZva2VgXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgUGFyYW1ldGVycyBmb3IgdGhlIHRlbXBsYXRlLlxuICAgKiBAcGFyYW0ge09iamVjdH0gbG9jYWxzIExvY2FscyB0byBwYXNzIHRvIGBpbnZva2VgLiBEZWZhdWx0cyB0byBcbiAgICogYHsgcGFyYW1zOiBwYXJhbXMgfWAuXG4gICAqIEByZXR1cm4ge3N0cmluZ3xQcm9taXNlLjxzdHJpbmc+fSBUaGUgdGVtcGxhdGUgaHRtbCBhcyBhIHN0cmluZywgb3IgYSBwcm9taXNlIFxuICAgKiBmb3IgdGhhdCBzdHJpbmcuXG4gICAqL1xuICB0aGlzLmZyb21Qcm92aWRlciA9IGZ1bmN0aW9uIChwcm92aWRlciwgcGFyYW1zLCBsb2NhbHMpIHtcbiAgICByZXR1cm4gJGluamVjdG9yLmludm9rZShwcm92aWRlciwgbnVsbCwgbG9jYWxzIHx8IHsgcGFyYW1zOiBwYXJhbXMgfSk7XG4gIH07XG59XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5yb3V0ZXIudXRpbCcpLnNlcnZpY2UoJyR0ZW1wbGF0ZUZhY3RvcnknLCAkVGVtcGxhdGVGYWN0b3J5KTtcblxudmFyICQkVU1GUDsgLy8gcmVmZXJlbmNlIHRvICRVcmxNYXRjaGVyRmFjdG9yeVByb3ZpZGVyXG5cbi8qKlxuICogQG5nZG9jIG9iamVjdFxuICogQG5hbWUgdWkucm91dGVyLnV0aWwudHlwZTpVcmxNYXRjaGVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBNYXRjaGVzIFVSTHMgYWdhaW5zdCBwYXR0ZXJucyBhbmQgZXh0cmFjdHMgbmFtZWQgcGFyYW1ldGVycyBmcm9tIHRoZSBwYXRoIG9yIHRoZSBzZWFyY2hcbiAqIHBhcnQgb2YgdGhlIFVSTC4gQSBVUkwgcGF0dGVybiBjb25zaXN0cyBvZiBhIHBhdGggcGF0dGVybiwgb3B0aW9uYWxseSBmb2xsb3dlZCBieSAnPycgYW5kIGEgbGlzdFxuICogb2Ygc2VhcmNoIHBhcmFtZXRlcnMuIE11bHRpcGxlIHNlYXJjaCBwYXJhbWV0ZXIgbmFtZXMgYXJlIHNlcGFyYXRlZCBieSAnJicuIFNlYXJjaCBwYXJhbWV0ZXJzXG4gKiBkbyBub3QgaW5mbHVlbmNlIHdoZXRoZXIgb3Igbm90IGEgVVJMIGlzIG1hdGNoZWQsIGJ1dCB0aGVpciB2YWx1ZXMgYXJlIHBhc3NlZCB0aHJvdWdoIGludG9cbiAqIHRoZSBtYXRjaGVkIHBhcmFtZXRlcnMgcmV0dXJuZWQgYnkge0BsaW5rIHVpLnJvdXRlci51dGlsLnR5cGU6VXJsTWF0Y2hlciNtZXRob2RzX2V4ZWMgZXhlY30uXG4gKiBcbiAqIFBhdGggcGFyYW1ldGVyIHBsYWNlaG9sZGVycyBjYW4gYmUgc3BlY2lmaWVkIHVzaW5nIHNpbXBsZSBjb2xvbi9jYXRjaC1hbGwgc3ludGF4IG9yIGN1cmx5IGJyYWNlXG4gKiBzeW50YXgsIHdoaWNoIG9wdGlvbmFsbHkgYWxsb3dzIGEgcmVndWxhciBleHByZXNzaW9uIGZvciB0aGUgcGFyYW1ldGVyIHRvIGJlIHNwZWNpZmllZDpcbiAqXG4gKiAqIGAnOidgIG5hbWUgLSBjb2xvbiBwbGFjZWhvbGRlclxuICogKiBgJyonYCBuYW1lIC0gY2F0Y2gtYWxsIHBsYWNlaG9sZGVyXG4gKiAqIGAneycgbmFtZSAnfSdgIC0gY3VybHkgcGxhY2Vob2xkZXJcbiAqICogYCd7JyBuYW1lICc6JyByZWdleHB8dHlwZSAnfSdgIC0gY3VybHkgcGxhY2Vob2xkZXIgd2l0aCByZWdleHAgb3IgdHlwZSBuYW1lLiBTaG91bGQgdGhlXG4gKiAgIHJlZ2V4cCBpdHNlbGYgY29udGFpbiBjdXJseSBicmFjZXMsIHRoZXkgbXVzdCBiZSBpbiBtYXRjaGVkIHBhaXJzIG9yIGVzY2FwZWQgd2l0aCBhIGJhY2tzbGFzaC5cbiAqXG4gKiBQYXJhbWV0ZXIgbmFtZXMgbWF5IGNvbnRhaW4gb25seSB3b3JkIGNoYXJhY3RlcnMgKGxhdGluIGxldHRlcnMsIGRpZ2l0cywgYW5kIHVuZGVyc2NvcmUpIGFuZFxuICogbXVzdCBiZSB1bmlxdWUgd2l0aGluIHRoZSBwYXR0ZXJuIChhY3Jvc3MgYm90aCBwYXRoIGFuZCBzZWFyY2ggcGFyYW1ldGVycykuIEZvciBjb2xvbiBcbiAqIHBsYWNlaG9sZGVycyBvciBjdXJseSBwbGFjZWhvbGRlcnMgd2l0aG91dCBhbiBleHBsaWNpdCByZWdleHAsIGEgcGF0aCBwYXJhbWV0ZXIgbWF0Y2hlcyBhbnlcbiAqIG51bWJlciBvZiBjaGFyYWN0ZXJzIG90aGVyIHRoYW4gJy8nLiBGb3IgY2F0Y2gtYWxsIHBsYWNlaG9sZGVycyB0aGUgcGF0aCBwYXJhbWV0ZXIgbWF0Y2hlc1xuICogYW55IG51bWJlciBvZiBjaGFyYWN0ZXJzLlxuICogXG4gKiBFeGFtcGxlczpcbiAqIFxuICogKiBgJy9oZWxsby8nYCAtIE1hdGNoZXMgb25seSBpZiB0aGUgcGF0aCBpcyBleGFjdGx5ICcvaGVsbG8vJy4gVGhlcmUgaXMgbm8gc3BlY2lhbCB0cmVhdG1lbnQgZm9yXG4gKiAgIHRyYWlsaW5nIHNsYXNoZXMsIGFuZCBwYXR0ZXJucyBoYXZlIHRvIG1hdGNoIHRoZSBlbnRpcmUgcGF0aCwgbm90IGp1c3QgYSBwcmVmaXguXG4gKiAqIGAnL3VzZXIvOmlkJ2AgLSBNYXRjaGVzICcvdXNlci9ib2InIG9yICcvdXNlci8xMjM0ISEhJyBvciBldmVuICcvdXNlci8nIGJ1dCBub3QgJy91c2VyJyBvclxuICogICAnL3VzZXIvYm9iL2RldGFpbHMnLiBUaGUgc2Vjb25kIHBhdGggc2VnbWVudCB3aWxsIGJlIGNhcHR1cmVkIGFzIHRoZSBwYXJhbWV0ZXIgJ2lkJy5cbiAqICogYCcvdXNlci97aWR9J2AgLSBTYW1lIGFzIHRoZSBwcmV2aW91cyBleGFtcGxlLCBidXQgdXNpbmcgY3VybHkgYnJhY2Ugc3ludGF4LlxuICogKiBgJy91c2VyL3tpZDpbXi9dKn0nYCAtIFNhbWUgYXMgdGhlIHByZXZpb3VzIGV4YW1wbGUuXG4gKiAqIGAnL3VzZXIve2lkOlswLTlhLWZBLUZdezEsOH19J2AgLSBTaW1pbGFyIHRvIHRoZSBwcmV2aW91cyBleGFtcGxlLCBidXQgb25seSBtYXRjaGVzIGlmIHRoZSBpZFxuICogICBwYXJhbWV0ZXIgY29uc2lzdHMgb2YgMSB0byA4IGhleCBkaWdpdHMuXG4gKiAqIGAnL2ZpbGVzL3twYXRoOi4qfSdgIC0gTWF0Y2hlcyBhbnkgVVJMIHN0YXJ0aW5nIHdpdGggJy9maWxlcy8nIGFuZCBjYXB0dXJlcyB0aGUgcmVzdCBvZiB0aGVcbiAqICAgcGF0aCBpbnRvIHRoZSBwYXJhbWV0ZXIgJ3BhdGgnLlxuICogKiBgJy9maWxlcy8qcGF0aCdgIC0gZGl0dG8uXG4gKiAqIGAnL2NhbGVuZGFyL3tzdGFydDpkYXRlfSdgIC0gTWF0Y2hlcyBcIi9jYWxlbmRhci8yMDE0LTExLTEyXCIgKGJlY2F1c2UgdGhlIHBhdHRlcm4gZGVmaW5lZFxuICogICBpbiB0aGUgYnVpbHQtaW4gIGBkYXRlYCBUeXBlIG1hdGNoZXMgYDIwMTQtMTEtMTJgKSBhbmQgcHJvdmlkZXMgYSBEYXRlIG9iamVjdCBpbiAkc3RhdGVQYXJhbXMuc3RhcnRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0dGVybiAgVGhlIHBhdHRlcm4gdG8gY29tcGlsZSBpbnRvIGEgbWF0Y2hlci5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgIEEgY29uZmlndXJhdGlvbiBvYmplY3QgaGFzaDpcbiAqIEBwYXJhbSB7T2JqZWN0PX0gcGFyZW50TWF0Y2hlciBVc2VkIHRvIGNvbmNhdGVuYXRlIHRoZSBwYXR0ZXJuL2NvbmZpZyBvbnRvXG4gKiAgIGFuIGV4aXN0aW5nIFVybE1hdGNoZXJcbiAqXG4gKiAqIGBjYXNlSW5zZW5zaXRpdmVgIC0gYHRydWVgIGlmIFVSTCBtYXRjaGluZyBzaG91bGQgYmUgY2FzZSBpbnNlbnNpdGl2ZSwgb3RoZXJ3aXNlIGBmYWxzZWAsIHRoZSBkZWZhdWx0IHZhbHVlIChmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSkgaXMgYGZhbHNlYC5cbiAqICogYHN0cmljdGAgLSBgZmFsc2VgIGlmIG1hdGNoaW5nIGFnYWluc3QgYSBVUkwgd2l0aCBhIHRyYWlsaW5nIHNsYXNoIHNob3VsZCBiZSB0cmVhdGVkIGFzIGVxdWl2YWxlbnQgdG8gYSBVUkwgd2l0aG91dCBhIHRyYWlsaW5nIHNsYXNoLCB0aGUgZGVmYXVsdCB2YWx1ZSBpcyBgdHJ1ZWAuXG4gKlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHByZWZpeCAgQSBzdGF0aWMgcHJlZml4IG9mIHRoaXMgcGF0dGVybi4gVGhlIG1hdGNoZXIgZ3VhcmFudGVlcyB0aGF0IGFueVxuICogICBVUkwgbWF0Y2hpbmcgdGhpcyBtYXRjaGVyIChpLmUuIGFueSBzdHJpbmcgZm9yIHdoaWNoIHtAbGluayB1aS5yb3V0ZXIudXRpbC50eXBlOlVybE1hdGNoZXIjbWV0aG9kc19leGVjIGV4ZWMoKX0gcmV0dXJuc1xuICogICBub24tbnVsbCkgd2lsbCBzdGFydCB3aXRoIHRoaXMgcHJlZml4LlxuICpcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBzb3VyY2UgIFRoZSBwYXR0ZXJuIHRoYXQgd2FzIHBhc3NlZCBpbnRvIHRoZSBjb25zdHJ1Y3RvclxuICpcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBzb3VyY2VQYXRoICBUaGUgcGF0aCBwb3J0aW9uIG9mIHRoZSBzb3VyY2UgcHJvcGVydHlcbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gc291cmNlU2VhcmNoICBUaGUgc2VhcmNoIHBvcnRpb24gb2YgdGhlIHNvdXJjZSBwcm9wZXJ0eVxuICpcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSByZWdleCAgVGhlIGNvbnN0cnVjdGVkIHJlZ2V4IHRoYXQgd2lsbCBiZSB1c2VkIHRvIG1hdGNoIGFnYWluc3QgdGhlIHVybCB3aGVuIFxuICogICBpdCBpcyB0aW1lIHRvIGRldGVybWluZSB3aGljaCB1cmwgd2lsbCBtYXRjaC5cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSAgTmV3IGBVcmxNYXRjaGVyYCBvYmplY3RcbiAqL1xuZnVuY3Rpb24gVXJsTWF0Y2hlcihwYXR0ZXJuLCBjb25maWcsIHBhcmVudE1hdGNoZXIpIHtcbiAgY29uZmlnID0gZXh0ZW5kKHsgcGFyYW1zOiB7fSB9LCBpc09iamVjdChjb25maWcpID8gY29uZmlnIDoge30pO1xuXG4gIC8vIEZpbmQgYWxsIHBsYWNlaG9sZGVycyBhbmQgY3JlYXRlIGEgY29tcGlsZWQgcGF0dGVybiwgdXNpbmcgZWl0aGVyIGNsYXNzaWMgb3IgY3VybHkgc3ludGF4OlxuICAvLyAgICcqJyBuYW1lXG4gIC8vICAgJzonIG5hbWVcbiAgLy8gICAneycgbmFtZSAnfSdcbiAgLy8gICAneycgbmFtZSAnOicgcmVnZXhwICd9J1xuICAvLyBUaGUgcmVndWxhciBleHByZXNzaW9uIGlzIHNvbWV3aGF0IGNvbXBsaWNhdGVkIGR1ZSB0byB0aGUgbmVlZCB0byBhbGxvdyBjdXJseSBicmFjZXNcbiAgLy8gaW5zaWRlIHRoZSByZWd1bGFyIGV4cHJlc3Npb24uIFRoZSBwbGFjZWhvbGRlciByZWdleHAgYnJlYWtzIGRvd24gYXMgZm9sbG93czpcbiAgLy8gICAgKFs6Kl0pKFtcXHdcXFtcXF1dKykgICAgICAgICAgICAgIC0gY2xhc3NpYyBwbGFjZWhvbGRlciAoJDEgLyAkMikgKHNlYXJjaCB2ZXJzaW9uIGhhcyAtIGZvciBzbmFrZS1jYXNlKVxuICAvLyAgICBcXHsoW1xcd1xcW1xcXV0rKSg/OlxcOiggLi4uICkpP1xcfSAgLSBjdXJseSBicmFjZSBwbGFjZWhvbGRlciAoJDMpIHdpdGggb3B0aW9uYWwgcmVnZXhwL3R5cGUgLi4uICgkNCkgKHNlYXJjaCB2ZXJzaW9uIGhhcyAtIGZvciBzbmFrZS1jYXNlXG4gIC8vICAgICg/OiAuLi4gfCAuLi4gfCAuLi4gKSsgICAgICAgICAtIHRoZSByZWdleHAgY29uc2lzdHMgb2YgYW55IG51bWJlciBvZiBhdG9tcywgYW4gYXRvbSBiZWluZyBlaXRoZXJcbiAgLy8gICAgW157fVxcXFxdKyAgICAgICAgICAgICAgICAgICAgICAgLSBhbnl0aGluZyBvdGhlciB0aGFuIGN1cmx5IGJyYWNlcyBvciBiYWNrc2xhc2hcbiAgLy8gICAgXFxcXC4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBhIGJhY2tzbGFzaCBlc2NhcGVcbiAgLy8gICAgXFx7KD86W157fVxcXFxdK3xcXFxcLikqXFx9ICAgICAgICAgIC0gYSBtYXRjaGVkIHNldCBvZiBjdXJseSBicmFjZXMgY29udGFpbmluZyBvdGhlciBhdG9tc1xuICB2YXIgcGxhY2Vob2xkZXIgICAgICAgPSAvKFs6Kl0pKFtcXHdcXFtcXF1dKyl8XFx7KFtcXHdcXFtcXF1dKykoPzpcXDooKD86W157fVxcXFxdK3xcXFxcLnxcXHsoPzpbXnt9XFxcXF0rfFxcXFwuKSpcXH0pKykpP1xcfS9nLFxuICAgICAgc2VhcmNoUGxhY2Vob2xkZXIgPSAvKFs6XT8pKFtcXHdcXFtcXF0tXSspfFxceyhbXFx3XFxbXFxdLV0rKSg/OlxcOigoPzpbXnt9XFxcXF0rfFxcXFwufFxceyg/Oltee31cXFxcXSt8XFxcXC4pKlxcfSkrKSk/XFx9L2csXG4gICAgICBjb21waWxlZCA9ICdeJywgbGFzdCA9IDAsIG0sXG4gICAgICBzZWdtZW50cyA9IHRoaXMuc2VnbWVudHMgPSBbXSxcbiAgICAgIHBhcmVudFBhcmFtcyA9IHBhcmVudE1hdGNoZXIgPyBwYXJlbnRNYXRjaGVyLnBhcmFtcyA6IHt9LFxuICAgICAgcGFyYW1zID0gdGhpcy5wYXJhbXMgPSBwYXJlbnRNYXRjaGVyID8gcGFyZW50TWF0Y2hlci5wYXJhbXMuJCRuZXcoKSA6IG5ldyAkJFVNRlAuUGFyYW1TZXQoKSxcbiAgICAgIHBhcmFtTmFtZXMgPSBbXTtcblxuICBmdW5jdGlvbiBhZGRQYXJhbWV0ZXIoaWQsIHR5cGUsIGNvbmZpZywgbG9jYXRpb24pIHtcbiAgICBwYXJhbU5hbWVzLnB1c2goaWQpO1xuICAgIGlmIChwYXJlbnRQYXJhbXNbaWRdKSByZXR1cm4gcGFyZW50UGFyYW1zW2lkXTtcbiAgICBpZiAoIS9eXFx3KygtK1xcdyspKig/OlxcW1xcXSk/JC8udGVzdChpZCkpIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcGFyYW1ldGVyIG5hbWUgJ1wiICsgaWQgKyBcIicgaW4gcGF0dGVybiAnXCIgKyBwYXR0ZXJuICsgXCInXCIpO1xuICAgIGlmIChwYXJhbXNbaWRdKSB0aHJvdyBuZXcgRXJyb3IoXCJEdXBsaWNhdGUgcGFyYW1ldGVyIG5hbWUgJ1wiICsgaWQgKyBcIicgaW4gcGF0dGVybiAnXCIgKyBwYXR0ZXJuICsgXCInXCIpO1xuICAgIHBhcmFtc1tpZF0gPSBuZXcgJCRVTUZQLlBhcmFtKGlkLCB0eXBlLCBjb25maWcsIGxvY2F0aW9uKTtcbiAgICByZXR1cm4gcGFyYW1zW2lkXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHF1b3RlUmVnRXhwKHN0cmluZywgcGF0dGVybiwgc3F1YXNoKSB7XG4gICAgdmFyIHN1cnJvdW5kUGF0dGVybiA9IFsnJywnJ10sIHJlc3VsdCA9IHN0cmluZy5yZXBsYWNlKC9bXFxcXFxcW1xcXVxcXiQqKz8uKCl8e31dL2csIFwiXFxcXCQmXCIpO1xuICAgIGlmICghcGF0dGVybikgcmV0dXJuIHJlc3VsdDtcbiAgICBzd2l0Y2goc3F1YXNoKSB7XG4gICAgICBjYXNlIGZhbHNlOiBzdXJyb3VuZFBhdHRlcm4gPSBbJygnLCAnKSddOyAgIGJyZWFrO1xuICAgICAgY2FzZSB0cnVlOiAgc3Vycm91bmRQYXR0ZXJuID0gWyc/KCcsICcpPyddOyBicmVhaztcbiAgICAgIGRlZmF1bHQ6ICAgIHN1cnJvdW5kUGF0dGVybiA9IFsnKCcgKyBzcXVhc2ggKyBcInxcIiwgJyk/J107ICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdCArIHN1cnJvdW5kUGF0dGVyblswXSArIHBhdHRlcm4gKyBzdXJyb3VuZFBhdHRlcm5bMV07XG4gIH1cblxuICB0aGlzLnNvdXJjZSA9IHBhdHRlcm47XG5cbiAgLy8gU3BsaXQgaW50byBzdGF0aWMgc2VnbWVudHMgc2VwYXJhdGVkIGJ5IHBhdGggcGFyYW1ldGVyIHBsYWNlaG9sZGVycy5cbiAgLy8gVGhlIG51bWJlciBvZiBzZWdtZW50cyBpcyBhbHdheXMgMSBtb3JlIHRoYW4gdGhlIG51bWJlciBvZiBwYXJhbWV0ZXJzLlxuICBmdW5jdGlvbiBtYXRjaERldGFpbHMobSwgaXNTZWFyY2gpIHtcbiAgICB2YXIgaWQsIHJlZ2V4cCwgc2VnbWVudCwgdHlwZSwgY2ZnLCBhcnJheU1vZGU7XG4gICAgaWQgICAgICAgICAgPSBtWzJdIHx8IG1bM107IC8vIElFWzc4XSByZXR1cm5zICcnIGZvciB1bm1hdGNoZWQgZ3JvdXBzIGluc3RlYWQgb2YgbnVsbFxuICAgIGNmZyAgICAgICAgID0gY29uZmlnLnBhcmFtc1tpZF07XG4gICAgc2VnbWVudCAgICAgPSBwYXR0ZXJuLnN1YnN0cmluZyhsYXN0LCBtLmluZGV4KTtcbiAgICByZWdleHAgICAgICA9IGlzU2VhcmNoID8gbVs0XSA6IG1bNF0gfHwgKG1bMV0gPT0gJyonID8gJy4qJyA6IG51bGwpO1xuICAgIHR5cGUgICAgICAgID0gJCRVTUZQLnR5cGUocmVnZXhwIHx8IFwic3RyaW5nXCIpIHx8IGluaGVyaXQoJCRVTUZQLnR5cGUoXCJzdHJpbmdcIiksIHsgcGF0dGVybjogbmV3IFJlZ0V4cChyZWdleHApIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBpZDogaWQsIHJlZ2V4cDogcmVnZXhwLCBzZWdtZW50OiBzZWdtZW50LCB0eXBlOiB0eXBlLCBjZmc6IGNmZ1xuICAgIH07XG4gIH1cblxuICB2YXIgcCwgcGFyYW0sIHNlZ21lbnQ7XG4gIHdoaWxlICgobSA9IHBsYWNlaG9sZGVyLmV4ZWMocGF0dGVybikpKSB7XG4gICAgcCA9IG1hdGNoRGV0YWlscyhtLCBmYWxzZSk7XG4gICAgaWYgKHAuc2VnbWVudC5pbmRleE9mKCc/JykgPj0gMCkgYnJlYWs7IC8vIHdlJ3JlIGludG8gdGhlIHNlYXJjaCBwYXJ0XG5cbiAgICBwYXJhbSA9IGFkZFBhcmFtZXRlcihwLmlkLCBwLnR5cGUsIHAuY2ZnLCBcInBhdGhcIik7XG4gICAgY29tcGlsZWQgKz0gcXVvdGVSZWdFeHAocC5zZWdtZW50LCBwYXJhbS50eXBlLnBhdHRlcm4uc291cmNlLCBwYXJhbS5zcXVhc2gpO1xuICAgIHNlZ21lbnRzLnB1c2gocC5zZWdtZW50KTtcbiAgICBsYXN0ID0gcGxhY2Vob2xkZXIubGFzdEluZGV4O1xuICB9XG4gIHNlZ21lbnQgPSBwYXR0ZXJuLnN1YnN0cmluZyhsYXN0KTtcblxuICAvLyBGaW5kIGFueSBzZWFyY2ggcGFyYW1ldGVyIG5hbWVzIGFuZCByZW1vdmUgdGhlbSBmcm9tIHRoZSBsYXN0IHNlZ21lbnRcbiAgdmFyIGkgPSBzZWdtZW50LmluZGV4T2YoJz8nKTtcblxuICBpZiAoaSA+PSAwKSB7XG4gICAgdmFyIHNlYXJjaCA9IHRoaXMuc291cmNlU2VhcmNoID0gc2VnbWVudC5zdWJzdHJpbmcoaSk7XG4gICAgc2VnbWVudCA9IHNlZ21lbnQuc3Vic3RyaW5nKDAsIGkpO1xuICAgIHRoaXMuc291cmNlUGF0aCA9IHBhdHRlcm4uc3Vic3RyaW5nKDAsIGxhc3QgKyBpKTtcblxuICAgIGlmIChzZWFyY2gubGVuZ3RoID4gMCkge1xuICAgICAgbGFzdCA9IDA7XG4gICAgICB3aGlsZSAoKG0gPSBzZWFyY2hQbGFjZWhvbGRlci5leGVjKHNlYXJjaCkpKSB7XG4gICAgICAgIHAgPSBtYXRjaERldGFpbHMobSwgdHJ1ZSk7XG4gICAgICAgIHBhcmFtID0gYWRkUGFyYW1ldGVyKHAuaWQsIHAudHlwZSwgcC5jZmcsIFwic2VhcmNoXCIpO1xuICAgICAgICBsYXN0ID0gcGxhY2Vob2xkZXIubGFzdEluZGV4O1xuICAgICAgICAvLyBjaGVjayBpZiA/JlxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aGlzLnNvdXJjZVBhdGggPSBwYXR0ZXJuO1xuICAgIHRoaXMuc291cmNlU2VhcmNoID0gJyc7XG4gIH1cblxuICBjb21waWxlZCArPSBxdW90ZVJlZ0V4cChzZWdtZW50KSArIChjb25maWcuc3RyaWN0ID09PSBmYWxzZSA/ICdcXC8/JyA6ICcnKSArICckJztcbiAgc2VnbWVudHMucHVzaChzZWdtZW50KTtcblxuICB0aGlzLnJlZ2V4cCA9IG5ldyBSZWdFeHAoY29tcGlsZWQsIGNvbmZpZy5jYXNlSW5zZW5zaXRpdmUgPyAnaScgOiB1bmRlZmluZWQpO1xuICB0aGlzLnByZWZpeCA9IHNlZ21lbnRzWzBdO1xuICB0aGlzLiQkcGFyYW1OYW1lcyA9IHBhcmFtTmFtZXM7XG59XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC50eXBlOlVybE1hdGNoZXIjY29uY2F0XG4gKiBAbWV0aG9kT2YgdWkucm91dGVyLnV0aWwudHlwZTpVcmxNYXRjaGVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIGEgbmV3IG1hdGNoZXIgZm9yIGEgcGF0dGVybiBjb25zdHJ1Y3RlZCBieSBhcHBlbmRpbmcgdGhlIHBhdGggcGFydCBhbmQgYWRkaW5nIHRoZVxuICogc2VhcmNoIHBhcmFtZXRlcnMgb2YgdGhlIHNwZWNpZmllZCBwYXR0ZXJuIHRvIHRoaXMgcGF0dGVybi4gVGhlIGN1cnJlbnQgcGF0dGVybiBpcyBub3RcbiAqIG1vZGlmaWVkLiBUaGlzIGNhbiBiZSB1bmRlcnN0b29kIGFzIGNyZWF0aW5nIGEgcGF0dGVybiBmb3IgVVJMcyB0aGF0IGFyZSByZWxhdGl2ZSB0byAob3JcbiAqIHN1ZmZpeGVzIG9mKSB0aGUgY3VycmVudCBwYXR0ZXJuLlxuICpcbiAqIEBleGFtcGxlXG4gKiBUaGUgZm9sbG93aW5nIHR3byBtYXRjaGVycyBhcmUgZXF1aXZhbGVudDpcbiAqIDxwcmU+XG4gKiBuZXcgVXJsTWF0Y2hlcignL3VzZXIve2lkfT9xJykuY29uY2F0KCcvZGV0YWlscz9kYXRlJyk7XG4gKiBuZXcgVXJsTWF0Y2hlcignL3VzZXIve2lkfS9kZXRhaWxzP3EmZGF0ZScpO1xuICogPC9wcmU+XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdHRlcm4gIFRoZSBwYXR0ZXJuIHRvIGFwcGVuZC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgIEFuIG9iamVjdCBoYXNoIG9mIHRoZSBjb25maWd1cmF0aW9uIGZvciB0aGUgbWF0Y2hlci5cbiAqIEByZXR1cm5zIHtVcmxNYXRjaGVyfSAgQSBtYXRjaGVyIGZvciB0aGUgY29uY2F0ZW5hdGVkIHBhdHRlcm4uXG4gKi9cblVybE1hdGNoZXIucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uIChwYXR0ZXJuLCBjb25maWcpIHtcbiAgLy8gQmVjYXVzZSBvcmRlciBvZiBzZWFyY2ggcGFyYW1ldGVycyBpcyBpcnJlbGV2YW50LCB3ZSBjYW4gYWRkIG91ciBvd24gc2VhcmNoXG4gIC8vIHBhcmFtZXRlcnMgdG8gdGhlIGVuZCBvZiB0aGUgbmV3IHBhdHRlcm4uIFBhcnNlIHRoZSBuZXcgcGF0dGVybiBieSBpdHNlbGZcbiAgLy8gYW5kIHRoZW4gam9pbiB0aGUgYml0cyB0b2dldGhlciwgYnV0IGl0J3MgbXVjaCBlYXNpZXIgdG8gZG8gdGhpcyBvbiBhIHN0cmluZyBsZXZlbC5cbiAgdmFyIGRlZmF1bHRDb25maWcgPSB7XG4gICAgY2FzZUluc2Vuc2l0aXZlOiAkJFVNRlAuY2FzZUluc2Vuc2l0aXZlKCksXG4gICAgc3RyaWN0OiAkJFVNRlAuc3RyaWN0TW9kZSgpLFxuICAgIHNxdWFzaDogJCRVTUZQLmRlZmF1bHRTcXVhc2hQb2xpY3koKVxuICB9O1xuICByZXR1cm4gbmV3IFVybE1hdGNoZXIodGhpcy5zb3VyY2VQYXRoICsgcGF0dGVybiArIHRoaXMuc291cmNlU2VhcmNoLCBleHRlbmQoZGVmYXVsdENvbmZpZywgY29uZmlnKSwgdGhpcyk7XG59O1xuXG5VcmxNYXRjaGVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuc291cmNlO1xufTtcblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIHVpLnJvdXRlci51dGlsLnR5cGU6VXJsTWF0Y2hlciNleGVjXG4gKiBAbWV0aG9kT2YgdWkucm91dGVyLnV0aWwudHlwZTpVcmxNYXRjaGVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUZXN0cyB0aGUgc3BlY2lmaWVkIHBhdGggYWdhaW5zdCB0aGlzIG1hdGNoZXIsIGFuZCByZXR1cm5zIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSBjYXB0dXJlZFxuICogcGFyYW1ldGVyIHZhbHVlcywgb3IgbnVsbCBpZiB0aGUgcGF0aCBkb2VzIG5vdCBtYXRjaC4gVGhlIHJldHVybmVkIG9iamVjdCBjb250YWlucyB0aGUgdmFsdWVzXG4gKiBvZiBhbnkgc2VhcmNoIHBhcmFtZXRlcnMgdGhhdCBhcmUgbWVudGlvbmVkIGluIHRoZSBwYXR0ZXJuLCBidXQgdGhlaXIgdmFsdWUgbWF5IGJlIG51bGwgaWZcbiAqIHRoZXkgYXJlIG5vdCBwcmVzZW50IGluIGBzZWFyY2hQYXJhbXNgLiBUaGlzIG1lYW5zIHRoYXQgc2VhcmNoIHBhcmFtZXRlcnMgYXJlIGFsd2F5cyB0cmVhdGVkXG4gKiBhcyBvcHRpb25hbC5cbiAqXG4gKiBAZXhhbXBsZVxuICogPHByZT5cbiAqIG5ldyBVcmxNYXRjaGVyKCcvdXNlci97aWR9P3EmcicpLmV4ZWMoJy91c2VyL2JvYicsIHtcbiAqICAgeDogJzEnLCBxOiAnaGVsbG8nXG4gKiB9KTtcbiAqIC8vIHJldHVybnMgeyBpZDogJ2JvYicsIHE6ICdoZWxsbycsIHI6IG51bGwgfVxuICogPC9wcmU+XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggIFRoZSBVUkwgcGF0aCB0byBtYXRjaCwgZS5nLiBgJGxvY2F0aW9uLnBhdGgoKWAuXG4gKiBAcGFyYW0ge09iamVjdH0gc2VhcmNoUGFyYW1zICBVUkwgc2VhcmNoIHBhcmFtZXRlcnMsIGUuZy4gYCRsb2NhdGlvbi5zZWFyY2goKWAuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSAgVGhlIGNhcHR1cmVkIHBhcmFtZXRlciB2YWx1ZXMuXG4gKi9cblVybE1hdGNoZXIucHJvdG90eXBlLmV4ZWMgPSBmdW5jdGlvbiAocGF0aCwgc2VhcmNoUGFyYW1zKSB7XG4gIHZhciBtID0gdGhpcy5yZWdleHAuZXhlYyhwYXRoKTtcbiAgaWYgKCFtKSByZXR1cm4gbnVsbDtcbiAgc2VhcmNoUGFyYW1zID0gc2VhcmNoUGFyYW1zIHx8IHt9O1xuXG4gIHZhciBwYXJhbU5hbWVzID0gdGhpcy5wYXJhbWV0ZXJzKCksIG5Ub3RhbCA9IHBhcmFtTmFtZXMubGVuZ3RoLFxuICAgIG5QYXRoID0gdGhpcy5zZWdtZW50cy5sZW5ndGggLSAxLFxuICAgIHZhbHVlcyA9IHt9LCBpLCBqLCBjZmcsIHBhcmFtTmFtZTtcblxuICBpZiAoblBhdGggIT09IG0ubGVuZ3RoIC0gMSkgdGhyb3cgbmV3IEVycm9yKFwiVW5iYWxhbmNlZCBjYXB0dXJlIGdyb3VwIGluIHJvdXRlICdcIiArIHRoaXMuc291cmNlICsgXCInXCIpO1xuXG4gIGZ1bmN0aW9uIGRlY29kZVBhdGhBcnJheShzdHJpbmcpIHtcbiAgICBmdW5jdGlvbiByZXZlcnNlU3RyaW5nKHN0cikgeyByZXR1cm4gc3RyLnNwbGl0KFwiXCIpLnJldmVyc2UoKS5qb2luKFwiXCIpOyB9XG4gICAgZnVuY3Rpb24gdW5xdW90ZURhc2hlcyhzdHIpIHsgcmV0dXJuIHN0ci5yZXBsYWNlKC9cXFxcLS8sIFwiLVwiKTsgfVxuXG4gICAgdmFyIHNwbGl0ID0gcmV2ZXJzZVN0cmluZyhzdHJpbmcpLnNwbGl0KC8tKD8hXFxcXCkvKTtcbiAgICB2YXIgYWxsUmV2ZXJzZWQgPSBtYXAoc3BsaXQsIHJldmVyc2VTdHJpbmcpO1xuICAgIHJldHVybiBtYXAoYWxsUmV2ZXJzZWQsIHVucXVvdGVEYXNoZXMpLnJldmVyc2UoKTtcbiAgfVxuXG4gIGZvciAoaSA9IDA7IGkgPCBuUGF0aDsgaSsrKSB7XG4gICAgcGFyYW1OYW1lID0gcGFyYW1OYW1lc1tpXTtcbiAgICB2YXIgcGFyYW0gPSB0aGlzLnBhcmFtc1twYXJhbU5hbWVdO1xuICAgIHZhciBwYXJhbVZhbCA9IG1baSsxXTtcbiAgICAvLyBpZiB0aGUgcGFyYW0gdmFsdWUgbWF0Y2hlcyBhIHByZS1yZXBsYWNlIHBhaXIsIHJlcGxhY2UgdGhlIHZhbHVlIGJlZm9yZSBkZWNvZGluZy5cbiAgICBmb3IgKGogPSAwOyBqIDwgcGFyYW0ucmVwbGFjZTsgaisrKSB7XG4gICAgICBpZiAocGFyYW0ucmVwbGFjZVtqXS5mcm9tID09PSBwYXJhbVZhbCkgcGFyYW1WYWwgPSBwYXJhbS5yZXBsYWNlW2pdLnRvO1xuICAgIH1cbiAgICBpZiAocGFyYW1WYWwgJiYgcGFyYW0uYXJyYXkgPT09IHRydWUpIHBhcmFtVmFsID0gZGVjb2RlUGF0aEFycmF5KHBhcmFtVmFsKTtcbiAgICB2YWx1ZXNbcGFyYW1OYW1lXSA9IHBhcmFtLnZhbHVlKHBhcmFtVmFsKTtcbiAgfVxuICBmb3IgKC8qKi87IGkgPCBuVG90YWw7IGkrKykge1xuICAgIHBhcmFtTmFtZSA9IHBhcmFtTmFtZXNbaV07XG4gICAgdmFsdWVzW3BhcmFtTmFtZV0gPSB0aGlzLnBhcmFtc1twYXJhbU5hbWVdLnZhbHVlKHNlYXJjaFBhcmFtc1twYXJhbU5hbWVdKTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZXM7XG59O1xuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgdWkucm91dGVyLnV0aWwudHlwZTpVcmxNYXRjaGVyI3BhcmFtZXRlcnNcbiAqIEBtZXRob2RPZiB1aS5yb3V0ZXIudXRpbC50eXBlOlVybE1hdGNoZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgdGhlIG5hbWVzIG9mIGFsbCBwYXRoIGFuZCBzZWFyY2ggcGFyYW1ldGVycyBvZiB0aGlzIHBhdHRlcm4gaW4gYW4gdW5zcGVjaWZpZWQgb3JkZXIuXG4gKiBcbiAqIEByZXR1cm5zIHtBcnJheS48c3RyaW5nPn0gIEFuIGFycmF5IG9mIHBhcmFtZXRlciBuYW1lcy4gTXVzdCBiZSB0cmVhdGVkIGFzIHJlYWQtb25seS4gSWYgdGhlXG4gKiAgICBwYXR0ZXJuIGhhcyBubyBwYXJhbWV0ZXJzLCBhbiBlbXB0eSBhcnJheSBpcyByZXR1cm5lZC5cbiAqL1xuVXJsTWF0Y2hlci5wcm90b3R5cGUucGFyYW1ldGVycyA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICBpZiAoIWlzRGVmaW5lZChwYXJhbSkpIHJldHVybiB0aGlzLiQkcGFyYW1OYW1lcztcbiAgcmV0dXJuIHRoaXMucGFyYW1zW3BhcmFtXSB8fCBudWxsO1xufTtcblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIHVpLnJvdXRlci51dGlsLnR5cGU6VXJsTWF0Y2hlciN2YWxpZGF0ZVxuICogQG1ldGhvZE9mIHVpLnJvdXRlci51dGlsLnR5cGU6VXJsTWF0Y2hlclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ2hlY2tzIGFuIG9iamVjdCBoYXNoIG9mIHBhcmFtZXRlcnMgdG8gdmFsaWRhdGUgdGhlaXIgY29ycmVjdG5lc3MgYWNjb3JkaW5nIHRvIHRoZSBwYXJhbWV0ZXJcbiAqIHR5cGVzIG9mIHRoaXMgYFVybE1hdGNoZXJgLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgVGhlIG9iamVjdCBoYXNoIG9mIHBhcmFtZXRlcnMgdG8gdmFsaWRhdGUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhcmFtc2AgdmFsaWRhdGVzLCBvdGhlcndpc2UgYGZhbHNlYC5cbiAqL1xuVXJsTWF0Y2hlci5wcm90b3R5cGUudmFsaWRhdGVzID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICByZXR1cm4gdGhpcy5wYXJhbXMuJCR2YWxpZGF0ZXMocGFyYW1zKTtcbn07XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC50eXBlOlVybE1hdGNoZXIjZm9ybWF0XG4gKiBAbWV0aG9kT2YgdWkucm91dGVyLnV0aWwudHlwZTpVcmxNYXRjaGVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDcmVhdGVzIGEgVVJMIHRoYXQgbWF0Y2hlcyB0aGlzIHBhdHRlcm4gYnkgc3Vic3RpdHV0aW5nIHRoZSBzcGVjaWZpZWQgdmFsdWVzXG4gKiBmb3IgdGhlIHBhdGggYW5kIHNlYXJjaCBwYXJhbWV0ZXJzLiBOdWxsIHZhbHVlcyBmb3IgcGF0aCBwYXJhbWV0ZXJzIGFyZVxuICogdHJlYXRlZCBhcyBlbXB0eSBzdHJpbmdzLlxuICpcbiAqIEBleGFtcGxlXG4gKiA8cHJlPlxuICogbmV3IFVybE1hdGNoZXIoJy91c2VyL3tpZH0/cScpLmZvcm1hdCh7IGlkOidib2InLCBxOid5ZXMnIH0pO1xuICogLy8gcmV0dXJucyAnL3VzZXIvYm9iP3E9eWVzJ1xuICogPC9wcmU+XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbHVlcyAgdGhlIHZhbHVlcyB0byBzdWJzdGl0dXRlIGZvciB0aGUgcGFyYW1ldGVycyBpbiB0aGlzIHBhdHRlcm4uXG4gKiBAcmV0dXJucyB7c3RyaW5nfSAgdGhlIGZvcm1hdHRlZCBVUkwgKHBhdGggYW5kIG9wdGlvbmFsbHkgc2VhcmNoIHBhcnQpLlxuICovXG5VcmxNYXRjaGVyLnByb3RvdHlwZS5mb3JtYXQgPSBmdW5jdGlvbiAodmFsdWVzKSB7XG4gIHZhbHVlcyA9IHZhbHVlcyB8fCB7fTtcbiAgdmFyIHNlZ21lbnRzID0gdGhpcy5zZWdtZW50cywgcGFyYW1zID0gdGhpcy5wYXJhbWV0ZXJzKCksIHBhcmFtc2V0ID0gdGhpcy5wYXJhbXM7XG4gIGlmICghdGhpcy52YWxpZGF0ZXModmFsdWVzKSkgcmV0dXJuIG51bGw7XG5cbiAgdmFyIGksIHNlYXJjaCA9IGZhbHNlLCBuUGF0aCA9IHNlZ21lbnRzLmxlbmd0aCAtIDEsIG5Ub3RhbCA9IHBhcmFtcy5sZW5ndGgsIHJlc3VsdCA9IHNlZ21lbnRzWzBdO1xuXG4gIGZ1bmN0aW9uIGVuY29kZURhc2hlcyhzdHIpIHsgLy8gUmVwbGFjZSBkYXNoZXMgd2l0aCBlbmNvZGVkIFwiXFwtXCJcbiAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cikucmVwbGFjZSgvLS9nLCBmdW5jdGlvbihjKSB7IHJldHVybiAnJTVDJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7IH0pO1xuICB9XG5cbiAgZm9yIChpID0gMDsgaSA8IG5Ub3RhbDsgaSsrKSB7XG4gICAgdmFyIGlzUGF0aFBhcmFtID0gaSA8IG5QYXRoO1xuICAgIHZhciBuYW1lID0gcGFyYW1zW2ldLCBwYXJhbSA9IHBhcmFtc2V0W25hbWVdLCB2YWx1ZSA9IHBhcmFtLnZhbHVlKHZhbHVlc1tuYW1lXSk7XG4gICAgdmFyIGlzRGVmYXVsdFZhbHVlID0gcGFyYW0uaXNPcHRpb25hbCAmJiBwYXJhbS50eXBlLmVxdWFscyhwYXJhbS52YWx1ZSgpLCB2YWx1ZSk7XG4gICAgdmFyIHNxdWFzaCA9IGlzRGVmYXVsdFZhbHVlID8gcGFyYW0uc3F1YXNoIDogZmFsc2U7XG4gICAgdmFyIGVuY29kZWQgPSBwYXJhbS50eXBlLmVuY29kZSh2YWx1ZSk7XG5cbiAgICBpZiAoaXNQYXRoUGFyYW0pIHtcbiAgICAgIHZhciBuZXh0U2VnbWVudCA9IHNlZ21lbnRzW2kgKyAxXTtcbiAgICAgIGlmIChzcXVhc2ggPT09IGZhbHNlKSB7XG4gICAgICAgIGlmIChlbmNvZGVkICE9IG51bGwpIHtcbiAgICAgICAgICBpZiAoaXNBcnJheShlbmNvZGVkKSkge1xuICAgICAgICAgICAgcmVzdWx0ICs9IG1hcChlbmNvZGVkLCBlbmNvZGVEYXNoZXMpLmpvaW4oXCItXCIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gZW5jb2RlVVJJQ29tcG9uZW50KGVuY29kZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgKz0gbmV4dFNlZ21lbnQ7XG4gICAgICB9IGVsc2UgaWYgKHNxdWFzaCA9PT0gdHJ1ZSkge1xuICAgICAgICB2YXIgY2FwdHVyZSA9IHJlc3VsdC5tYXRjaCgvXFwvJC8pID8gL1xcLz8oLiopLyA6IC8oLiopLztcbiAgICAgICAgcmVzdWx0ICs9IG5leHRTZWdtZW50Lm1hdGNoKGNhcHR1cmUpWzFdO1xuICAgICAgfSBlbHNlIGlmIChpc1N0cmluZyhzcXVhc2gpKSB7XG4gICAgICAgIHJlc3VsdCArPSBzcXVhc2ggKyBuZXh0U2VnbWVudDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGVuY29kZWQgPT0gbnVsbCB8fCAoaXNEZWZhdWx0VmFsdWUgJiYgc3F1YXNoICE9PSBmYWxzZSkpIGNvbnRpbnVlO1xuICAgICAgaWYgKCFpc0FycmF5KGVuY29kZWQpKSBlbmNvZGVkID0gWyBlbmNvZGVkIF07XG4gICAgICBlbmNvZGVkID0gbWFwKGVuY29kZWQsIGVuY29kZVVSSUNvbXBvbmVudCkuam9pbignJicgKyBuYW1lICsgJz0nKTtcbiAgICAgIHJlc3VsdCArPSAoc2VhcmNoID8gJyYnIDogJz8nKSArIChuYW1lICsgJz0nICsgZW5jb2RlZCk7XG4gICAgICBzZWFyY2ggPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIEBuZ2RvYyBvYmplY3RcbiAqIEBuYW1lIHVpLnJvdXRlci51dGlsLnR5cGU6VHlwZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSW1wbGVtZW50cyBhbiBpbnRlcmZhY2UgdG8gZGVmaW5lIGN1c3RvbSBwYXJhbWV0ZXIgdHlwZXMgdGhhdCBjYW4gYmUgZGVjb2RlZCBmcm9tIGFuZCBlbmNvZGVkIHRvXG4gKiBzdHJpbmcgcGFyYW1ldGVycyBtYXRjaGVkIGluIGEgVVJMLiBVc2VkIGJ5IHtAbGluayB1aS5yb3V0ZXIudXRpbC50eXBlOlVybE1hdGNoZXIgYFVybE1hdGNoZXJgfVxuICogb2JqZWN0cyB3aGVuIG1hdGNoaW5nIG9yIGZvcm1hdHRpbmcgVVJMcywgb3IgY29tcGFyaW5nIG9yIHZhbGlkYXRpbmcgcGFyYW1ldGVyIHZhbHVlcy5cbiAqXG4gKiBTZWUge0BsaW5rIHVpLnJvdXRlci51dGlsLiR1cmxNYXRjaGVyRmFjdG9yeSNtZXRob2RzX3R5cGUgYCR1cmxNYXRjaGVyRmFjdG9yeSN0eXBlKClgfSBmb3IgbW9yZVxuICogaW5mb3JtYXRpb24gb24gcmVnaXN0ZXJpbmcgY3VzdG9tIHR5cGVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgIEEgY29uZmlndXJhdGlvbiBvYmplY3Qgd2hpY2ggY29udGFpbnMgdGhlIGN1c3RvbSB0eXBlIGRlZmluaXRpb24uICBUaGUgb2JqZWN0J3NcbiAqICAgICAgICBwcm9wZXJ0aWVzIHdpbGwgb3ZlcnJpZGUgdGhlIGRlZmF1bHQgbWV0aG9kcyBhbmQvb3IgcGF0dGVybiBpbiBgVHlwZWAncyBwdWJsaWMgaW50ZXJmYWNlLlxuICogQGV4YW1wbGVcbiAqIDxwcmU+XG4gKiB7XG4gKiAgIGRlY29kZTogZnVuY3Rpb24odmFsKSB7IHJldHVybiBwYXJzZUludCh2YWwsIDEwKTsgfSxcbiAqICAgZW5jb2RlOiBmdW5jdGlvbih2YWwpIHsgcmV0dXJuIHZhbCAmJiB2YWwudG9TdHJpbmcoKTsgfSxcbiAqICAgZXF1YWxzOiBmdW5jdGlvbihhLCBiKSB7IHJldHVybiB0aGlzLmlzKGEpICYmIGEgPT09IGI7IH0sXG4gKiAgIGlzOiBmdW5jdGlvbih2YWwpIHsgcmV0dXJuIGFuZ3VsYXIuaXNOdW1iZXIodmFsKSBpc0Zpbml0ZSh2YWwpICYmIHZhbCAlIDEgPT09IDA7IH0sXG4gKiAgIHBhdHRlcm46IC9cXGQrL1xuICogfVxuICogPC9wcmU+XG4gKlxuICogQHByb3BlcnR5IHtSZWdFeHB9IHBhdHRlcm4gVGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiBwYXR0ZXJuIHVzZWQgdG8gbWF0Y2ggdmFsdWVzIG9mIHRoaXMgdHlwZSB3aGVuXG4gKiAgICAgICAgICAgY29taW5nIGZyb20gYSBzdWJzdHJpbmcgb2YgYSBVUkwuXG4gKlxuICogQHJldHVybnMge09iamVjdH0gIFJldHVybnMgYSBuZXcgYFR5cGVgIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gVHlwZShjb25maWcpIHtcbiAgZXh0ZW5kKHRoaXMsIGNvbmZpZyk7XG59XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC50eXBlOlR5cGUjaXNcbiAqIEBtZXRob2RPZiB1aS5yb3V0ZXIudXRpbC50eXBlOlR5cGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERldGVjdHMgd2hldGhlciBhIHZhbHVlIGlzIG9mIGEgcGFydGljdWxhciB0eXBlLiBBY2NlcHRzIGEgbmF0aXZlIChkZWNvZGVkKSB2YWx1ZVxuICogYW5kIGRldGVybWluZXMgd2hldGhlciBpdCBtYXRjaGVzIHRoZSBjdXJyZW50IGBUeXBlYCBvYmplY3QuXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgIE9wdGlvbmFsLiBJZiB0aGUgdHlwZSBjaGVjayBpcyBoYXBwZW5pbmcgaW4gdGhlIGNvbnRleHQgb2YgYSBzcGVjaWZpY1xuICogICAgICAgIHtAbGluayB1aS5yb3V0ZXIudXRpbC50eXBlOlVybE1hdGNoZXIgYFVybE1hdGNoZXJgfSBvYmplY3QsIHRoaXMgaXMgdGhlIG5hbWUgb2YgdGhlXG4gKiAgICAgICAgcGFyYW1ldGVyIGluIHdoaWNoIGB2YWxgIGlzIHN0b3JlZC4gQ2FuIGJlIHVzZWQgZm9yIG1ldGEtcHJvZ3JhbW1pbmcgb2YgYFR5cGVgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gIFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZSBtYXRjaGVzIHRoZSB0eXBlLCBvdGhlcndpc2UgYGZhbHNlYC5cbiAqL1xuVHlwZS5wcm90b3R5cGUuaXMgPSBmdW5jdGlvbih2YWwsIGtleSkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC50eXBlOlR5cGUjZW5jb2RlXG4gKiBAbWV0aG9kT2YgdWkucm91dGVyLnV0aWwudHlwZTpUeXBlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBFbmNvZGVzIGEgY3VzdG9tL25hdGl2ZSB0eXBlIHZhbHVlIHRvIGEgc3RyaW5nIHRoYXQgY2FuIGJlIGVtYmVkZGVkIGluIGEgVVJMLiBOb3RlIHRoYXQgdGhlXG4gKiByZXR1cm4gdmFsdWUgZG9lcyAqbm90KiBuZWVkIHRvIGJlIFVSTC1zYWZlIChpLmUuIHBhc3NlZCB0aHJvdWdoIGBlbmNvZGVVUklDb21wb25lbnQoKWApLCBpdFxuICogb25seSBuZWVkcyB0byBiZSBhIHJlcHJlc2VudGF0aW9uIG9mIGB2YWxgIHRoYXQgaGFzIGJlZW4gY29lcmNlZCB0byBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbCAgVGhlIHZhbHVlIHRvIGVuY29kZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgIFRoZSBuYW1lIG9mIHRoZSBwYXJhbWV0ZXIgaW4gd2hpY2ggYHZhbGAgaXMgc3RvcmVkLiBDYW4gYmUgdXNlZCBmb3JcbiAqICAgICAgICBtZXRhLXByb2dyYW1taW5nIG9mIGBUeXBlYCBvYmplY3RzLlxuICogQHJldHVybnMge3N0cmluZ30gIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYHZhbGAgdGhhdCBjYW4gYmUgZW5jb2RlZCBpbiBhIFVSTC5cbiAqL1xuVHlwZS5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24odmFsLCBrZXkpIHtcbiAgcmV0dXJuIHZhbDtcbn07XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC50eXBlOlR5cGUjZGVjb2RlXG4gKiBAbWV0aG9kT2YgdWkucm91dGVyLnV0aWwudHlwZTpUeXBlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0cyBhIHBhcmFtZXRlciB2YWx1ZSAoZnJvbSBVUkwgc3RyaW5nIG9yIHRyYW5zaXRpb24gcGFyYW0pIHRvIGEgY3VzdG9tL25hdGl2ZSB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsICBUaGUgVVJMIHBhcmFtZXRlciB2YWx1ZSB0byBkZWNvZGUuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5ICBUaGUgbmFtZSBvZiB0aGUgcGFyYW1ldGVyIGluIHdoaWNoIGB2YWxgIGlzIHN0b3JlZC4gQ2FuIGJlIHVzZWQgZm9yXG4gKiAgICAgICAgbWV0YS1wcm9ncmFtbWluZyBvZiBgVHlwZWAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHsqfSAgUmV0dXJucyBhIGN1c3RvbSByZXByZXNlbnRhdGlvbiBvZiB0aGUgVVJMIHBhcmFtZXRlciB2YWx1ZS5cbiAqL1xuVHlwZS5wcm90b3R5cGUuZGVjb2RlID0gZnVuY3Rpb24odmFsLCBrZXkpIHtcbiAgcmV0dXJuIHZhbDtcbn07XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC50eXBlOlR5cGUjZXF1YWxzXG4gKiBAbWV0aG9kT2YgdWkucm91dGVyLnV0aWwudHlwZTpUeXBlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdHdvIGRlY29kZWQgdmFsdWVzIGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBwYXJhbSB7Kn0gYSAgQSB2YWx1ZSB0byBjb21wYXJlIGFnYWluc3QuXG4gKiBAcGFyYW0geyp9IGIgIEEgdmFsdWUgdG8gY29tcGFyZSBhZ2FpbnN0LlxuICogQHJldHVybnMge0Jvb2xlYW59ICBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50L2VxdWFsLCBvdGhlcndpc2UgYGZhbHNlYC5cbiAqL1xuVHlwZS5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA9PSBiO1xufTtcblxuVHlwZS5wcm90b3R5cGUuJHN1YlBhdHRlcm4gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHN1YiA9IHRoaXMucGF0dGVybi50b1N0cmluZygpO1xuICByZXR1cm4gc3ViLnN1YnN0cigxLCBzdWIubGVuZ3RoIC0gMik7XG59O1xuXG5UeXBlLnByb3RvdHlwZS5wYXR0ZXJuID0gLy4qLztcblxuVHlwZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIFwie1R5cGU6XCIgKyB0aGlzLm5hbWUgKyBcIn1cIjsgfTtcblxuLypcbiAqIFdyYXBzIGFuIGV4aXN0aW5nIGN1c3RvbSBUeXBlIGFzIGFuIGFycmF5IG9mIFR5cGUsIGRlcGVuZGluZyBvbiAnbW9kZScuXG4gKiBlLmcuOlxuICogLSB1cmxtYXRjaGVyIHBhdHRlcm4gXCIvcGF0aD97cXVlcnlQYXJhbVtdOmludH1cIlxuICogLSB1cmw6IFwiL3BhdGg/cXVlcnlQYXJhbT0xJnF1ZXJ5UGFyYW09MlxuICogLSAkc3RhdGVQYXJhbXMucXVlcnlQYXJhbSB3aWxsIGJlIFsxLCAyXVxuICogaWYgYG1vZGVgIGlzIFwiYXV0b1wiLCB0aGVuXG4gKiAtIHVybDogXCIvcGF0aD9xdWVyeVBhcmFtPTEgd2lsbCBjcmVhdGUgJHN0YXRlUGFyYW1zLnF1ZXJ5UGFyYW06IDFcbiAqIC0gdXJsOiBcIi9wYXRoP3F1ZXJ5UGFyYW09MSZxdWVyeVBhcmFtPTIgd2lsbCBjcmVhdGUgJHN0YXRlUGFyYW1zLnF1ZXJ5UGFyYW06IFsxLCAyXVxuICovXG5UeXBlLnByb3RvdHlwZS4kYXNBcnJheSA9IGZ1bmN0aW9uKG1vZGUsIGlzU2VhcmNoKSB7XG4gIGlmICghbW9kZSkgcmV0dXJuIHRoaXM7XG4gIGlmIChtb2RlID09PSBcImF1dG9cIiAmJiAhaXNTZWFyY2gpIHRocm93IG5ldyBFcnJvcihcIidhdXRvJyBhcnJheSBtb2RlIGlzIGZvciBxdWVyeSBwYXJhbWV0ZXJzIG9ubHlcIik7XG4gIHJldHVybiBuZXcgQXJyYXlUeXBlKHRoaXMsIG1vZGUpO1xuXG4gIGZ1bmN0aW9uIEFycmF5VHlwZSh0eXBlLCBtb2RlKSB7XG4gICAgZnVuY3Rpb24gYmluZFRvKHR5cGUsIGNhbGxiYWNrTmFtZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdHlwZVtjYWxsYmFja05hbWVdLmFwcGx5KHR5cGUsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIFdyYXAgbm9uLWFycmF5IHZhbHVlIGFzIGFycmF5XG4gICAgZnVuY3Rpb24gYXJyYXlXcmFwKHZhbCkgeyByZXR1cm4gaXNBcnJheSh2YWwpID8gdmFsIDogKGlzRGVmaW5lZCh2YWwpID8gWyB2YWwgXSA6IFtdKTsgfVxuICAgIC8vIFVud3JhcCBhcnJheSB2YWx1ZSBmb3IgXCJhdXRvXCIgbW9kZS4gUmV0dXJuIHVuZGVmaW5lZCBmb3IgZW1wdHkgYXJyYXkuXG4gICAgZnVuY3Rpb24gYXJyYXlVbndyYXAodmFsKSB7XG4gICAgICBzd2l0Y2godmFsLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6IHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIGNhc2UgMTogcmV0dXJuIG1vZGUgPT09IFwiYXV0b1wiID8gdmFsWzBdIDogdmFsO1xuICAgICAgICBkZWZhdWx0OiByZXR1cm4gdmFsO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBmYWxzZXkodmFsKSB7IHJldHVybiAhdmFsOyB9XG5cbiAgICAvLyBXcmFwcyB0eXBlICguaXMvLmVuY29kZS8uZGVjb2RlKSBmdW5jdGlvbnMgdG8gb3BlcmF0ZSBvbiBlYWNoIHZhbHVlIG9mIGFuIGFycmF5XG4gICAgZnVuY3Rpb24gYXJyYXlIYW5kbGVyKGNhbGxiYWNrLCBhbGxUcnV0aHlNb2RlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gaGFuZGxlQXJyYXkodmFsKSB7XG4gICAgICAgIHZhbCA9IGFycmF5V3JhcCh2YWwpO1xuICAgICAgICB2YXIgcmVzdWx0ID0gbWFwKHZhbCwgY2FsbGJhY2spO1xuICAgICAgICBpZiAoYWxsVHJ1dGh5TW9kZSA9PT0gdHJ1ZSlcbiAgICAgICAgICByZXR1cm4gZmlsdGVyKHJlc3VsdCwgZmFsc2V5KS5sZW5ndGggPT09IDA7XG4gICAgICAgIHJldHVybiBhcnJheVVud3JhcChyZXN1bHQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBXcmFwcyB0eXBlICguZXF1YWxzKSBmdW5jdGlvbnMgdG8gb3BlcmF0ZSBvbiBlYWNoIHZhbHVlIG9mIGFuIGFycmF5XG4gICAgZnVuY3Rpb24gYXJyYXlFcXVhbHNIYW5kbGVyKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gaGFuZGxlQXJyYXkodmFsMSwgdmFsMikge1xuICAgICAgICB2YXIgbGVmdCA9IGFycmF5V3JhcCh2YWwxKSwgcmlnaHQgPSBhcnJheVdyYXAodmFsMik7XG4gICAgICAgIGlmIChsZWZ0Lmxlbmd0aCAhPT0gcmlnaHQubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVmdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmICghY2FsbGJhY2sobGVmdFtpXSwgcmlnaHRbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHRoaXMuZW5jb2RlID0gYXJyYXlIYW5kbGVyKGJpbmRUbyh0eXBlLCAnZW5jb2RlJykpO1xuICAgIHRoaXMuZGVjb2RlID0gYXJyYXlIYW5kbGVyKGJpbmRUbyh0eXBlLCAnZGVjb2RlJykpO1xuICAgIHRoaXMuaXMgICAgID0gYXJyYXlIYW5kbGVyKGJpbmRUbyh0eXBlLCAnaXMnKSwgdHJ1ZSk7XG4gICAgdGhpcy5lcXVhbHMgPSBhcnJheUVxdWFsc0hhbmRsZXIoYmluZFRvKHR5cGUsICdlcXVhbHMnKSk7XG4gICAgdGhpcy5wYXR0ZXJuID0gdHlwZS5wYXR0ZXJuO1xuICAgIHRoaXMuJGFycmF5TW9kZSA9IG1vZGU7XG4gIH1cbn07XG5cblxuXG4vKipcbiAqIEBuZ2RvYyBvYmplY3RcbiAqIEBuYW1lIHVpLnJvdXRlci51dGlsLiR1cmxNYXRjaGVyRmFjdG9yeVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRmFjdG9yeSBmb3Ige0BsaW5rIHVpLnJvdXRlci51dGlsLnR5cGU6VXJsTWF0Y2hlciBgVXJsTWF0Y2hlcmB9IGluc3RhbmNlcy4gVGhlIGZhY3RvcnlcbiAqIGlzIGFsc28gYXZhaWxhYmxlIHRvIHByb3ZpZGVycyB1bmRlciB0aGUgbmFtZSBgJHVybE1hdGNoZXJGYWN0b3J5UHJvdmlkZXJgLlxuICovXG5mdW5jdGlvbiAkVXJsTWF0Y2hlckZhY3RvcnkoKSB7XG4gICQkVU1GUCA9IHRoaXM7XG5cbiAgdmFyIGlzQ2FzZUluc2Vuc2l0aXZlID0gZmFsc2UsIGlzU3RyaWN0TW9kZSA9IHRydWUsIGRlZmF1bHRTcXVhc2hQb2xpY3kgPSBmYWxzZTtcblxuICBmdW5jdGlvbiB2YWxUb1N0cmluZyh2YWwpIHsgcmV0dXJuIHZhbCAhPSBudWxsID8gdmFsLnRvU3RyaW5nKCkucmVwbGFjZSgvXFwvL2csIFwiJTJGXCIpIDogdmFsOyB9XG4gIGZ1bmN0aW9uIHZhbEZyb21TdHJpbmcodmFsKSB7IHJldHVybiB2YWwgIT0gbnVsbCA/IHZhbC50b1N0cmluZygpLnJlcGxhY2UoLyUyRi9nLCBcIi9cIikgOiB2YWw7IH1cbi8vICBUT0RPOiBpbiAxLjAsIG1ha2Ugc3RyaW5nIC5pcygpIHJldHVybiBmYWxzZSBpZiB2YWx1ZSBpcyB1bmRlZmluZWQgYnkgZGVmYXVsdC5cbi8vICBmdW5jdGlvbiByZWdleHBNYXRjaGVzKHZhbCkgeyAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqLyByZXR1cm4gaXNEZWZpbmVkKHZhbCkgJiYgdGhpcy5wYXR0ZXJuLnRlc3QodmFsKTsgfVxuICBmdW5jdGlvbiByZWdleHBNYXRjaGVzKHZhbCkgeyAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqLyByZXR1cm4gdGhpcy5wYXR0ZXJuLnRlc3QodmFsKTsgfVxuXG4gIHZhciAkdHlwZXMgPSB7fSwgZW5xdWV1ZSA9IHRydWUsIHR5cGVRdWV1ZSA9IFtdLCBpbmplY3RvciwgZGVmYXVsdFR5cGVzID0ge1xuICAgIHN0cmluZzoge1xuICAgICAgZW5jb2RlOiB2YWxUb1N0cmluZyxcbiAgICAgIGRlY29kZTogdmFsRnJvbVN0cmluZyxcbiAgICAgIGlzOiByZWdleHBNYXRjaGVzLFxuICAgICAgcGF0dGVybjogL1teL10qL1xuICAgIH0sXG4gICAgaW50OiB7XG4gICAgICBlbmNvZGU6IHZhbFRvU3RyaW5nLFxuICAgICAgZGVjb2RlOiBmdW5jdGlvbih2YWwpIHsgcmV0dXJuIHBhcnNlSW50KHZhbCwgMTApOyB9LFxuICAgICAgaXM6IGZ1bmN0aW9uKHZhbCkgeyByZXR1cm4gaXNEZWZpbmVkKHZhbCkgJiYgdGhpcy5kZWNvZGUodmFsLnRvU3RyaW5nKCkpID09PSB2YWw7IH0sXG4gICAgICBwYXR0ZXJuOiAvXFxkKy9cbiAgICB9LFxuICAgIGJvb2w6IHtcbiAgICAgIGVuY29kZTogZnVuY3Rpb24odmFsKSB7IHJldHVybiB2YWwgPyAxIDogMDsgfSxcbiAgICAgIGRlY29kZTogZnVuY3Rpb24odmFsKSB7IHJldHVybiBwYXJzZUludCh2YWwsIDEwKSAhPT0gMDsgfSxcbiAgICAgIGlzOiBmdW5jdGlvbih2YWwpIHsgcmV0dXJuIHZhbCA9PT0gdHJ1ZSB8fCB2YWwgPT09IGZhbHNlOyB9LFxuICAgICAgcGF0dGVybjogLzB8MS9cbiAgICB9LFxuICAgIGRhdGU6IHtcbiAgICAgIGVuY29kZTogZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICBpZiAoIXRoaXMuaXModmFsKSlcbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gWyB2YWwuZ2V0RnVsbFllYXIoKSxcbiAgICAgICAgICAoJzAnICsgKHZhbC5nZXRNb250aCgpICsgMSkpLnNsaWNlKC0yKSxcbiAgICAgICAgICAoJzAnICsgdmFsLmdldERhdGUoKSkuc2xpY2UoLTIpXG4gICAgICAgIF0uam9pbihcIi1cIik7XG4gICAgICB9LFxuICAgICAgZGVjb2RlOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgIGlmICh0aGlzLmlzKHZhbCkpIHJldHVybiB2YWw7XG4gICAgICAgIHZhciBtYXRjaCA9IHRoaXMuY2FwdHVyZS5leGVjKHZhbCk7XG4gICAgICAgIHJldHVybiBtYXRjaCA/IG5ldyBEYXRlKG1hdGNoWzFdLCBtYXRjaFsyXSAtIDEsIG1hdGNoWzNdKSA6IHVuZGVmaW5lZDtcbiAgICAgIH0sXG4gICAgICBpczogZnVuY3Rpb24odmFsKSB7IHJldHVybiB2YWwgaW5zdGFuY2VvZiBEYXRlICYmICFpc05hTih2YWwudmFsdWVPZigpKTsgfSxcbiAgICAgIGVxdWFsczogZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIHRoaXMuaXMoYSkgJiYgdGhpcy5pcyhiKSAmJiBhLnRvSVNPU3RyaW5nKCkgPT09IGIudG9JU09TdHJpbmcoKTsgfSxcbiAgICAgIHBhdHRlcm46IC9bMC05XXs0fS0oPzowWzEtOV18MVswLTJdKS0oPzowWzEtOV18WzEtMl1bMC05XXwzWzAtMV0pLyxcbiAgICAgIGNhcHR1cmU6IC8oWzAtOV17NH0pLSgwWzEtOV18MVswLTJdKS0oMFsxLTldfFsxLTJdWzAtOV18M1swLTFdKS9cbiAgICB9LFxuICAgIGpzb246IHtcbiAgICAgIGVuY29kZTogYW5ndWxhci50b0pzb24sXG4gICAgICBkZWNvZGU6IGFuZ3VsYXIuZnJvbUpzb24sXG4gICAgICBpczogYW5ndWxhci5pc09iamVjdCxcbiAgICAgIGVxdWFsczogYW5ndWxhci5lcXVhbHMsXG4gICAgICBwYXR0ZXJuOiAvW14vXSovXG4gICAgfSxcbiAgICBhbnk6IHsgLy8gZG9lcyBub3QgZW5jb2RlL2RlY29kZVxuICAgICAgZW5jb2RlOiBhbmd1bGFyLmlkZW50aXR5LFxuICAgICAgZGVjb2RlOiBhbmd1bGFyLmlkZW50aXR5LFxuICAgICAgaXM6IGFuZ3VsYXIuaWRlbnRpdHksXG4gICAgICBlcXVhbHM6IGFuZ3VsYXIuZXF1YWxzLFxuICAgICAgcGF0dGVybjogLy4qL1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBnZXREZWZhdWx0Q29uZmlnKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzdHJpY3Q6IGlzU3RyaWN0TW9kZSxcbiAgICAgIGNhc2VJbnNlbnNpdGl2ZTogaXNDYXNlSW5zZW5zaXRpdmVcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gaXNJbmplY3RhYmxlKHZhbHVlKSB7XG4gICAgcmV0dXJuIChpc0Z1bmN0aW9uKHZhbHVlKSB8fCAoaXNBcnJheSh2YWx1ZSkgJiYgaXNGdW5jdGlvbih2YWx1ZVt2YWx1ZS5sZW5ndGggLSAxXSkpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBbSW50ZXJuYWxdIEdldCB0aGUgZGVmYXVsdCB2YWx1ZSBvZiBhIHBhcmFtZXRlciwgd2hpY2ggbWF5IGJlIGFuIGluamVjdGFibGUgZnVuY3Rpb24uXG4gICAqL1xuICAkVXJsTWF0Y2hlckZhY3RvcnkuJCRnZXREZWZhdWx0VmFsdWUgPSBmdW5jdGlvbihjb25maWcpIHtcbiAgICBpZiAoIWlzSW5qZWN0YWJsZShjb25maWcudmFsdWUpKSByZXR1cm4gY29uZmlnLnZhbHVlO1xuICAgIGlmICghaW5qZWN0b3IpIHRocm93IG5ldyBFcnJvcihcIkluamVjdGFibGUgZnVuY3Rpb25zIGNhbm5vdCBiZSBjYWxsZWQgYXQgY29uZmlndXJhdGlvbiB0aW1lXCIpO1xuICAgIHJldHVybiBpbmplY3Rvci5pbnZva2UoY29uZmlnLnZhbHVlKTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHVpLnJvdXRlci51dGlsLiR1cmxNYXRjaGVyRmFjdG9yeSNjYXNlSW5zZW5zaXRpdmVcbiAgICogQG1ldGhvZE9mIHVpLnJvdXRlci51dGlsLiR1cmxNYXRjaGVyRmFjdG9yeVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogRGVmaW5lcyB3aGV0aGVyIFVSTCBtYXRjaGluZyBzaG91bGQgYmUgY2FzZSBzZW5zaXRpdmUgKHRoZSBkZWZhdWx0IGJlaGF2aW9yKSwgb3Igbm90LlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHZhbHVlIGBmYWxzZWAgdG8gbWF0Y2ggVVJMIGluIGEgY2FzZSBzZW5zaXRpdmUgbWFubmVyOyBvdGhlcndpc2UgYHRydWVgO1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdGhlIGN1cnJlbnQgdmFsdWUgb2YgY2FzZUluc2Vuc2l0aXZlXG4gICAqL1xuICB0aGlzLmNhc2VJbnNlbnNpdGl2ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpXG4gICAgICBpc0Nhc2VJbnNlbnNpdGl2ZSA9IHZhbHVlO1xuICAgIHJldHVybiBpc0Nhc2VJbnNlbnNpdGl2ZTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHVpLnJvdXRlci51dGlsLiR1cmxNYXRjaGVyRmFjdG9yeSNzdHJpY3RNb2RlXG4gICAqIEBtZXRob2RPZiB1aS5yb3V0ZXIudXRpbC4kdXJsTWF0Y2hlckZhY3RvcnlcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIERlZmluZXMgd2hldGhlciBVUkxzIHNob3VsZCBtYXRjaCB0cmFpbGluZyBzbGFzaGVzLCBvciBub3QgKHRoZSBkZWZhdWx0IGJlaGF2aW9yKS5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFuPX0gdmFsdWUgYGZhbHNlYCB0byBtYXRjaCB0cmFpbGluZyBzbGFzaGVzIGluIFVSTHMsIG90aGVyd2lzZSBgdHJ1ZWAuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSB0aGUgY3VycmVudCB2YWx1ZSBvZiBzdHJpY3RNb2RlXG4gICAqL1xuICB0aGlzLnN0cmljdE1vZGUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmIChpc0RlZmluZWQodmFsdWUpKVxuICAgICAgaXNTdHJpY3RNb2RlID0gdmFsdWU7XG4gICAgcmV0dXJuIGlzU3RyaWN0TW9kZTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHVpLnJvdXRlci51dGlsLiR1cmxNYXRjaGVyRmFjdG9yeSNkZWZhdWx0U3F1YXNoUG9saWN5XG4gICAqIEBtZXRob2RPZiB1aS5yb3V0ZXIudXRpbC4kdXJsTWF0Y2hlckZhY3RvcnlcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgdGhlIGRlZmF1bHQgYmVoYXZpb3Igd2hlbiBnZW5lcmF0aW5nIG9yIG1hdGNoaW5nIFVSTHMgd2l0aCBkZWZhdWx0IHBhcmFtZXRlciB2YWx1ZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBBIHN0cmluZyB0aGF0IGRlZmluZXMgdGhlIGRlZmF1bHQgcGFyYW1ldGVyIFVSTCBzcXVhc2hpbmcgYmVoYXZpb3IuXG4gICAqICAgIGBub3NxdWFzaGA6IFdoZW4gZ2VuZXJhdGluZyBhbiBocmVmIHdpdGggYSBkZWZhdWx0IHBhcmFtZXRlciB2YWx1ZSwgZG8gbm90IHNxdWFzaCB0aGUgcGFyYW1ldGVyIHZhbHVlIGZyb20gdGhlIFVSTFxuICAgKiAgICBgc2xhc2hgOiBXaGVuIGdlbmVyYXRpbmcgYW4gaHJlZiB3aXRoIGEgZGVmYXVsdCBwYXJhbWV0ZXIgdmFsdWUsIHNxdWFzaCAocmVtb3ZlKSB0aGUgcGFyYW1ldGVyIHZhbHVlLCBhbmQsIGlmIHRoZVxuICAgKiAgICAgICAgICAgICBwYXJhbWV0ZXIgaXMgc3Vycm91bmRlZCBieSBzbGFzaGVzLCBzcXVhc2ggKHJlbW92ZSkgb25lIHNsYXNoIGZyb20gdGhlIFVSTFxuICAgKiAgICBhbnkgb3RoZXIgc3RyaW5nLCBlLmcuIFwiflwiOiBXaGVuIGdlbmVyYXRpbmcgYW4gaHJlZiB3aXRoIGEgZGVmYXVsdCBwYXJhbWV0ZXIgdmFsdWUsIHNxdWFzaCAocmVtb3ZlKVxuICAgKiAgICAgICAgICAgICB0aGUgcGFyYW1ldGVyIHZhbHVlIGZyb20gdGhlIFVSTCBhbmQgcmVwbGFjZSBpdCB3aXRoIHRoaXMgc3RyaW5nLlxuICAgKi9cbiAgdGhpcy5kZWZhdWx0U3F1YXNoUG9saWN5ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoIWlzRGVmaW5lZCh2YWx1ZSkpIHJldHVybiBkZWZhdWx0U3F1YXNoUG9saWN5O1xuICAgIGlmICh2YWx1ZSAhPT0gdHJ1ZSAmJiB2YWx1ZSAhPT0gZmFsc2UgJiYgIWlzU3RyaW5nKHZhbHVlKSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgc3F1YXNoIHBvbGljeTogXCIgKyB2YWx1ZSArIFwiLiBWYWxpZCBwb2xpY2llczogZmFsc2UsIHRydWUsIGFyYml0cmFyeS1zdHJpbmdcIik7XG4gICAgZGVmYXVsdFNxdWFzaFBvbGljeSA9IHZhbHVlO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHVpLnJvdXRlci51dGlsLiR1cmxNYXRjaGVyRmFjdG9yeSNjb21waWxlXG4gICAqIEBtZXRob2RPZiB1aS5yb3V0ZXIudXRpbC4kdXJsTWF0Y2hlckZhY3RvcnlcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENyZWF0ZXMgYSB7QGxpbmsgdWkucm91dGVyLnV0aWwudHlwZTpVcmxNYXRjaGVyIGBVcmxNYXRjaGVyYH0gZm9yIHRoZSBzcGVjaWZpZWQgcGF0dGVybi5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhdHRlcm4gIFRoZSBVUkwgcGF0dGVybi5cbiAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyAgVGhlIGNvbmZpZyBvYmplY3QgaGFzaC5cbiAgICogQHJldHVybnMge1VybE1hdGNoZXJ9ICBUaGUgVXJsTWF0Y2hlci5cbiAgICovXG4gIHRoaXMuY29tcGlsZSA9IGZ1bmN0aW9uIChwYXR0ZXJuLCBjb25maWcpIHtcbiAgICByZXR1cm4gbmV3IFVybE1hdGNoZXIocGF0dGVybiwgZXh0ZW5kKGdldERlZmF1bHRDb25maWcoKSwgY29uZmlnKSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSB1aS5yb3V0ZXIudXRpbC4kdXJsTWF0Y2hlckZhY3RvcnkjaXNNYXRjaGVyXG4gICAqIEBtZXRob2RPZiB1aS5yb3V0ZXIudXRpbC4kdXJsTWF0Y2hlckZhY3RvcnlcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIG9iamVjdCBpcyBhIGBVcmxNYXRjaGVyYCwgb3IgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0ICBUaGUgb2JqZWN0IHRvIHBlcmZvcm0gdGhlIHR5cGUgY2hlY2sgYWdhaW5zdC5cbiAgICogQHJldHVybnMge0Jvb2xlYW59ICBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0IG1hdGNoZXMgdGhlIGBVcmxNYXRjaGVyYCBpbnRlcmZhY2UsIGJ5XG4gICAqICAgICAgICAgIGltcGxlbWVudGluZyBhbGwgdGhlIHNhbWUgbWV0aG9kcy5cbiAgICovXG4gIHRoaXMuaXNNYXRjaGVyID0gZnVuY3Rpb24gKG8pIHtcbiAgICBpZiAoIWlzT2JqZWN0KG8pKSByZXR1cm4gZmFsc2U7XG4gICAgdmFyIHJlc3VsdCA9IHRydWU7XG5cbiAgICBmb3JFYWNoKFVybE1hdGNoZXIucHJvdG90eXBlLCBmdW5jdGlvbih2YWwsIG5hbWUpIHtcbiAgICAgIGlmIChpc0Z1bmN0aW9uKHZhbCkpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0ICYmIChpc0RlZmluZWQob1tuYW1lXSkgJiYgaXNGdW5jdGlvbihvW25hbWVdKSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHVpLnJvdXRlci51dGlsLiR1cmxNYXRjaGVyRmFjdG9yeSN0eXBlXG4gICAqIEBtZXRob2RPZiB1aS5yb3V0ZXIudXRpbC4kdXJsTWF0Y2hlckZhY3RvcnlcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJlZ2lzdGVycyBhIGN1c3RvbSB7QGxpbmsgdWkucm91dGVyLnV0aWwudHlwZTpUeXBlIGBUeXBlYH0gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG9cbiAgICogZ2VuZXJhdGUgVVJMcyB3aXRoIHR5cGVkIHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lICBUaGUgdHlwZSBuYW1lLlxuICAgKiBAcGFyYW0ge09iamVjdHxGdW5jdGlvbn0gZGVmaW5pdGlvbiAgIFRoZSB0eXBlIGRlZmluaXRpb24uIFNlZVxuICAgKiAgICAgICAge0BsaW5rIHVpLnJvdXRlci51dGlsLnR5cGU6VHlwZSBgVHlwZWB9IGZvciBpbmZvcm1hdGlvbiBvbiB0aGUgdmFsdWVzIGFjY2VwdGVkLlxuICAgKiBAcGFyYW0ge09iamVjdHxGdW5jdGlvbn0gZGVmaW5pdGlvbkZuIChvcHRpb25hbCkgQSBmdW5jdGlvbiB0aGF0IGlzIGluamVjdGVkIGJlZm9yZSB0aGUgYXBwXG4gICAqICAgICAgICBydW50aW1lIHN0YXJ0cy4gIFRoZSByZXN1bHQgb2YgdGhpcyBmdW5jdGlvbiBpcyBtZXJnZWQgaW50byB0aGUgZXhpc3RpbmcgYGRlZmluaXRpb25gLlxuICAgKiAgICAgICAgU2VlIHtAbGluayB1aS5yb3V0ZXIudXRpbC50eXBlOlR5cGUgYFR5cGVgfSBmb3IgaW5mb3JtYXRpb24gb24gdGhlIHZhbHVlcyBhY2NlcHRlZC5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gIFJldHVybnMgYCR1cmxNYXRjaGVyRmFjdG9yeVByb3ZpZGVyYC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogVGhpcyBpcyBhIHNpbXBsZSBleGFtcGxlIG9mIGEgY3VzdG9tIHR5cGUgdGhhdCBlbmNvZGVzIGFuZCBkZWNvZGVzIGl0ZW1zIGZyb20gYW5cbiAgICogYXJyYXksIHVzaW5nIHRoZSBhcnJheSBpbmRleCBhcyB0aGUgVVJMLWVuY29kZWQgdmFsdWU6XG4gICAqXG4gICAqIDxwcmU+XG4gICAqIHZhciBsaXN0ID0gWydKb2huJywgJ1BhdWwnLCAnR2VvcmdlJywgJ1JpbmdvJ107XG4gICAqXG4gICAqICR1cmxNYXRjaGVyRmFjdG9yeVByb3ZpZGVyLnR5cGUoJ2xpc3RJdGVtJywge1xuICAgKiAgIGVuY29kZTogZnVuY3Rpb24oaXRlbSkge1xuICAgKiAgICAgLy8gUmVwcmVzZW50IHRoZSBsaXN0IGl0ZW0gaW4gdGhlIFVSTCB1c2luZyBpdHMgY29ycmVzcG9uZGluZyBpbmRleFxuICAgKiAgICAgcmV0dXJuIGxpc3QuaW5kZXhPZihpdGVtKTtcbiAgICogICB9LFxuICAgKiAgIGRlY29kZTogZnVuY3Rpb24oaXRlbSkge1xuICAgKiAgICAgLy8gTG9vayB1cCB0aGUgbGlzdCBpdGVtIGJ5IGluZGV4XG4gICAqICAgICByZXR1cm4gbGlzdFtwYXJzZUludChpdGVtLCAxMCldO1xuICAgKiAgIH0sXG4gICAqICAgaXM6IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICogICAgIC8vIEVuc3VyZSB0aGUgaXRlbSBpcyB2YWxpZCBieSBjaGVja2luZyB0byBzZWUgdGhhdCBpdCBhcHBlYXJzXG4gICAqICAgICAvLyBpbiB0aGUgbGlzdFxuICAgKiAgICAgcmV0dXJuIGxpc3QuaW5kZXhPZihpdGVtKSA+IC0xO1xuICAgKiAgIH1cbiAgICogfSk7XG4gICAqXG4gICAqICRzdGF0ZVByb3ZpZGVyLnN0YXRlKCdsaXN0Jywge1xuICAgKiAgIHVybDogXCIvbGlzdC97aXRlbTpsaXN0SXRlbX1cIixcbiAgICogICBjb250cm9sbGVyOiBmdW5jdGlvbigkc2NvcGUsICRzdGF0ZVBhcmFtcykge1xuICAgKiAgICAgY29uc29sZS5sb2coJHN0YXRlUGFyYW1zLml0ZW0pO1xuICAgKiAgIH1cbiAgICogfSk7XG4gICAqXG4gICAqIC8vIC4uLlxuICAgKlxuICAgKiAvLyBDaGFuZ2VzIFVSTCB0byAnL2xpc3QvMycsIGxvZ3MgXCJSaW5nb1wiIHRvIHRoZSBjb25zb2xlXG4gICAqICRzdGF0ZS5nbygnbGlzdCcsIHsgaXRlbTogXCJSaW5nb1wiIH0pO1xuICAgKiA8L3ByZT5cbiAgICpcbiAgICogVGhpcyBpcyBhIG1vcmUgY29tcGxleCBleGFtcGxlIG9mIGEgdHlwZSB0aGF0IHJlbGllcyBvbiBkZXBlbmRlbmN5IGluamVjdGlvbiB0b1xuICAgKiBpbnRlcmFjdCB3aXRoIHNlcnZpY2VzLCBhbmQgdXNlcyB0aGUgcGFyYW1ldGVyIG5hbWUgZnJvbSB0aGUgVVJMIHRvIGluZmVyIGhvdyB0b1xuICAgKiBoYW5kbGUgZW5jb2RpbmcgYW5kIGRlY29kaW5nIHBhcmFtZXRlciB2YWx1ZXM6XG4gICAqXG4gICAqIDxwcmU+XG4gICAqIC8vIERlZmluZXMgYSBjdXN0b20gdHlwZSB0aGF0IGdldHMgYSB2YWx1ZSBmcm9tIGEgc2VydmljZSxcbiAgICogLy8gd2hlcmUgZWFjaCBzZXJ2aWNlIGdldHMgZGlmZmVyZW50IHR5cGVzIG9mIHZhbHVlcyBmcm9tXG4gICAqIC8vIGEgYmFja2VuZCBBUEk6XG4gICAqICR1cmxNYXRjaGVyRmFjdG9yeVByb3ZpZGVyLnR5cGUoJ2RiT2JqZWN0Jywge30sIGZ1bmN0aW9uKFVzZXJzLCBQb3N0cykge1xuICAgKlxuICAgKiAgIC8vIE1hdGNoZXMgdXAgc2VydmljZXMgdG8gVVJMIHBhcmFtZXRlciBuYW1lc1xuICAgKiAgIHZhciBzZXJ2aWNlcyA9IHtcbiAgICogICAgIHVzZXI6IFVzZXJzLFxuICAgKiAgICAgcG9zdDogUG9zdHNcbiAgICogICB9O1xuICAgKlxuICAgKiAgIHJldHVybiB7XG4gICAqICAgICBlbmNvZGU6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgKiAgICAgICAvLyBSZXByZXNlbnQgdGhlIG9iamVjdCBpbiB0aGUgVVJMIHVzaW5nIGl0cyB1bmlxdWUgSURcbiAgICogICAgICAgcmV0dXJuIG9iamVjdC5pZDtcbiAgICogICAgIH0sXG4gICAqICAgICBkZWNvZGU6IGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICogICAgICAgLy8gTG9vayB1cCB0aGUgb2JqZWN0IGJ5IElELCB1c2luZyB0aGUgcGFyYW1ldGVyXG4gICAqICAgICAgIC8vIG5hbWUgKGtleSkgdG8gY2FsbCB0aGUgY29ycmVjdCBzZXJ2aWNlXG4gICAqICAgICAgIHJldHVybiBzZXJ2aWNlc1trZXldLmZpbmRCeUlkKHZhbHVlKTtcbiAgICogICAgIH0sXG4gICAqICAgICBpczogZnVuY3Rpb24ob2JqZWN0LCBrZXkpIHtcbiAgICogICAgICAgLy8gQ2hlY2sgdGhhdCBvYmplY3QgaXMgYSB2YWxpZCBkYk9iamVjdFxuICAgKiAgICAgICByZXR1cm4gYW5ndWxhci5pc09iamVjdChvYmplY3QpICYmIG9iamVjdC5pZCAmJiBzZXJ2aWNlc1trZXldO1xuICAgKiAgICAgfVxuICAgKiAgICAgZXF1YWxzOiBmdW5jdGlvbihhLCBiKSB7XG4gICAqICAgICAgIC8vIENoZWNrIHRoZSBlcXVhbGl0eSBvZiBkZWNvZGVkIG9iamVjdHMgYnkgY29tcGFyaW5nXG4gICAqICAgICAgIC8vIHRoZWlyIHVuaXF1ZSBJRHNcbiAgICogICAgICAgcmV0dXJuIGEuaWQgPT09IGIuaWQ7XG4gICAqICAgICB9XG4gICAqICAgfTtcbiAgICogfSk7XG4gICAqXG4gICAqIC8vIEluIGEgY29uZmlnKCkgYmxvY2ssIHlvdSBjYW4gdGhlbiBhdHRhY2ggVVJMcyB3aXRoXG4gICAqIC8vIHR5cGUtYW5ub3RhdGVkIHBhcmFtZXRlcnM6XG4gICAqICRzdGF0ZVByb3ZpZGVyLnN0YXRlKCd1c2VycycsIHtcbiAgICogICB1cmw6IFwiL3VzZXJzXCIsXG4gICAqICAgLy8gLi4uXG4gICAqIH0pLnN0YXRlKCd1c2Vycy5pdGVtJywge1xuICAgKiAgIHVybDogXCIve3VzZXI6ZGJPYmplY3R9XCIsXG4gICAqICAgY29udHJvbGxlcjogZnVuY3Rpb24oJHNjb3BlLCAkc3RhdGVQYXJhbXMpIHtcbiAgICogICAgIC8vICRzdGF0ZVBhcmFtcy51c2VyIHdpbGwgbm93IGJlIGFuIG9iamVjdCByZXR1cm5lZCBmcm9tXG4gICAqICAgICAvLyB0aGUgVXNlcnMgc2VydmljZVxuICAgKiAgIH0sXG4gICAqICAgLy8gLi4uXG4gICAqIH0pO1xuICAgKiA8L3ByZT5cbiAgICovXG4gIHRoaXMudHlwZSA9IGZ1bmN0aW9uIChuYW1lLCBkZWZpbml0aW9uLCBkZWZpbml0aW9uRm4pIHtcbiAgICBpZiAoIWlzRGVmaW5lZChkZWZpbml0aW9uKSkgcmV0dXJuICR0eXBlc1tuYW1lXTtcbiAgICBpZiAoJHR5cGVzLmhhc093blByb3BlcnR5KG5hbWUpKSB0aHJvdyBuZXcgRXJyb3IoXCJBIHR5cGUgbmFtZWQgJ1wiICsgbmFtZSArIFwiJyBoYXMgYWxyZWFkeSBiZWVuIGRlZmluZWQuXCIpO1xuXG4gICAgJHR5cGVzW25hbWVdID0gbmV3IFR5cGUoZXh0ZW5kKHsgbmFtZTogbmFtZSB9LCBkZWZpbml0aW9uKSk7XG4gICAgaWYgKGRlZmluaXRpb25Gbikge1xuICAgICAgdHlwZVF1ZXVlLnB1c2goeyBuYW1lOiBuYW1lLCBkZWY6IGRlZmluaXRpb25GbiB9KTtcbiAgICAgIGlmICghZW5xdWV1ZSkgZmx1c2hUeXBlUXVldWUoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gYGZsdXNoVHlwZVF1ZXVlKClgIHdhaXRzIHVudGlsIGAkdXJsTWF0Y2hlckZhY3RvcnlgIGlzIGluamVjdGVkIGJlZm9yZSBpbnZva2luZyB0aGUgcXVldWVkIGBkZWZpbml0aW9uRm5gc1xuICBmdW5jdGlvbiBmbHVzaFR5cGVRdWV1ZSgpIHtcbiAgICB3aGlsZSh0eXBlUXVldWUubGVuZ3RoKSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVRdWV1ZS5zaGlmdCgpO1xuICAgICAgaWYgKHR5cGUucGF0dGVybikgdGhyb3cgbmV3IEVycm9yKFwiWW91IGNhbm5vdCBvdmVycmlkZSBhIHR5cGUncyAucGF0dGVybiBhdCBydW50aW1lLlwiKTtcbiAgICAgIGFuZ3VsYXIuZXh0ZW5kKCR0eXBlc1t0eXBlLm5hbWVdLCBpbmplY3Rvci5pbnZva2UodHlwZS5kZWYpKTtcbiAgICB9XG4gIH1cblxuICAvLyBSZWdpc3RlciBkZWZhdWx0IHR5cGVzLiBTdG9yZSB0aGVtIGluIHRoZSBwcm90b3R5cGUgb2YgJHR5cGVzLlxuICBmb3JFYWNoKGRlZmF1bHRUeXBlcywgZnVuY3Rpb24odHlwZSwgbmFtZSkgeyAkdHlwZXNbbmFtZV0gPSBuZXcgVHlwZShleHRlbmQoe25hbWU6IG5hbWV9LCB0eXBlKSk7IH0pO1xuICAkdHlwZXMgPSBpbmhlcml0KCR0eXBlcywge30pO1xuXG4gIC8qIE5vIG5lZWQgdG8gZG9jdW1lbnQgJGdldCwgc2luY2UgaXQgcmV0dXJucyB0aGlzICovXG4gIHRoaXMuJGdldCA9IFsnJGluamVjdG9yJywgZnVuY3Rpb24gKCRpbmplY3Rvcikge1xuICAgIGluamVjdG9yID0gJGluamVjdG9yO1xuICAgIGVucXVldWUgPSBmYWxzZTtcbiAgICBmbHVzaFR5cGVRdWV1ZSgpO1xuXG4gICAgZm9yRWFjaChkZWZhdWx0VHlwZXMsIGZ1bmN0aW9uKHR5cGUsIG5hbWUpIHtcbiAgICAgIGlmICghJHR5cGVzW25hbWVdKSAkdHlwZXNbbmFtZV0gPSBuZXcgVHlwZSh0eXBlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfV07XG5cbiAgdGhpcy5QYXJhbSA9IGZ1bmN0aW9uIFBhcmFtKGlkLCB0eXBlLCBjb25maWcsIGxvY2F0aW9uKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGNvbmZpZyA9IHVud3JhcFNob3J0aGFuZChjb25maWcpO1xuICAgIHR5cGUgPSBnZXRUeXBlKGNvbmZpZywgdHlwZSwgbG9jYXRpb24pO1xuICAgIHZhciBhcnJheU1vZGUgPSBnZXRBcnJheU1vZGUoKTtcbiAgICB0eXBlID0gYXJyYXlNb2RlID8gdHlwZS4kYXNBcnJheShhcnJheU1vZGUsIGxvY2F0aW9uID09PSBcInNlYXJjaFwiKSA6IHR5cGU7XG4gICAgaWYgKHR5cGUubmFtZSA9PT0gXCJzdHJpbmdcIiAmJiAhYXJyYXlNb2RlICYmIGxvY2F0aW9uID09PSBcInBhdGhcIiAmJiBjb25maWcudmFsdWUgPT09IHVuZGVmaW5lZClcbiAgICAgIGNvbmZpZy52YWx1ZSA9IFwiXCI7IC8vIGZvciAwLjIueDsgaW4gMC4zLjArIGRvIG5vdCBhdXRvbWF0aWNhbGx5IGRlZmF1bHQgdG8gXCJcIlxuICAgIHZhciBpc09wdGlvbmFsID0gY29uZmlnLnZhbHVlICE9PSB1bmRlZmluZWQ7XG4gICAgdmFyIHNxdWFzaCA9IGdldFNxdWFzaFBvbGljeShjb25maWcsIGlzT3B0aW9uYWwpO1xuICAgIHZhciByZXBsYWNlID0gZ2V0UmVwbGFjZShjb25maWcsIGFycmF5TW9kZSwgaXNPcHRpb25hbCwgc3F1YXNoKTtcblxuICAgIGZ1bmN0aW9uIHVud3JhcFNob3J0aGFuZChjb25maWcpIHtcbiAgICAgIHZhciBrZXlzID0gaXNPYmplY3QoY29uZmlnKSA/IG9iamVjdEtleXMoY29uZmlnKSA6IFtdO1xuICAgICAgdmFyIGlzU2hvcnRoYW5kID0gaW5kZXhPZihrZXlzLCBcInZhbHVlXCIpID09PSAtMSAmJiBpbmRleE9mKGtleXMsIFwidHlwZVwiKSA9PT0gLTEgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4T2Yoa2V5cywgXCJzcXVhc2hcIikgPT09IC0xICYmIGluZGV4T2Yoa2V5cywgXCJhcnJheVwiKSA9PT0gLTE7XG4gICAgICBpZiAoaXNTaG9ydGhhbmQpIGNvbmZpZyA9IHsgdmFsdWU6IGNvbmZpZyB9O1xuICAgICAgY29uZmlnLiQkZm4gPSBpc0luamVjdGFibGUoY29uZmlnLnZhbHVlKSA/IGNvbmZpZy52YWx1ZSA6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbmZpZy52YWx1ZTsgfTtcbiAgICAgIHJldHVybiBjb25maWc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0VHlwZShjb25maWcsIHVybFR5cGUsIGxvY2F0aW9uKSB7XG4gICAgICBpZiAoY29uZmlnLnR5cGUgJiYgdXJsVHlwZSkgdGhyb3cgbmV3IEVycm9yKFwiUGFyYW0gJ1wiK2lkK1wiJyBoYXMgdHdvIHR5cGUgY29uZmlndXJhdGlvbnMuXCIpO1xuICAgICAgaWYgKHVybFR5cGUpIHJldHVybiB1cmxUeXBlO1xuICAgICAgaWYgKCFjb25maWcudHlwZSkgcmV0dXJuIChsb2NhdGlvbiA9PT0gXCJjb25maWdcIiA/ICR0eXBlcy5hbnkgOiAkdHlwZXMuc3RyaW5nKTtcbiAgICAgIHJldHVybiBjb25maWcudHlwZSBpbnN0YW5jZW9mIFR5cGUgPyBjb25maWcudHlwZSA6IG5ldyBUeXBlKGNvbmZpZy50eXBlKTtcbiAgICB9XG5cbiAgICAvLyBhcnJheSBjb25maWc6IHBhcmFtIG5hbWUgKHBhcmFtW10pIG92ZXJyaWRlcyBkZWZhdWx0IHNldHRpbmdzLiAgZXhwbGljaXQgY29uZmlnIG92ZXJyaWRlcyBwYXJhbSBuYW1lLlxuICAgIGZ1bmN0aW9uIGdldEFycmF5TW9kZSgpIHtcbiAgICAgIHZhciBhcnJheURlZmF1bHRzID0geyBhcnJheTogKGxvY2F0aW9uID09PSBcInNlYXJjaFwiID8gXCJhdXRvXCIgOiBmYWxzZSkgfTtcbiAgICAgIHZhciBhcnJheVBhcmFtTm9tZW5jbGF0dXJlID0gaWQubWF0Y2goL1xcW1xcXSQvKSA/IHsgYXJyYXk6IHRydWUgfSA6IHt9O1xuICAgICAgcmV0dXJuIGV4dGVuZChhcnJheURlZmF1bHRzLCBhcnJheVBhcmFtTm9tZW5jbGF0dXJlLCBjb25maWcpLmFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHJldHVybnMgZmFsc2UsIHRydWUsIG9yIHRoZSBzcXVhc2ggdmFsdWUgdG8gaW5kaWNhdGUgdGhlIFwiZGVmYXVsdCBwYXJhbWV0ZXIgdXJsIHNxdWFzaCBwb2xpY3lcIi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRTcXVhc2hQb2xpY3koY29uZmlnLCBpc09wdGlvbmFsKSB7XG4gICAgICB2YXIgc3F1YXNoID0gY29uZmlnLnNxdWFzaDtcbiAgICAgIGlmICghaXNPcHRpb25hbCB8fCBzcXVhc2ggPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG4gICAgICBpZiAoIWlzRGVmaW5lZChzcXVhc2gpIHx8IHNxdWFzaCA9PSBudWxsKSByZXR1cm4gZGVmYXVsdFNxdWFzaFBvbGljeTtcbiAgICAgIGlmIChzcXVhc2ggPT09IHRydWUgfHwgaXNTdHJpbmcoc3F1YXNoKSkgcmV0dXJuIHNxdWFzaDtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgc3F1YXNoIHBvbGljeTogJ1wiICsgc3F1YXNoICsgXCInLiBWYWxpZCBwb2xpY2llczogZmFsc2UsIHRydWUsIG9yIGFyYml0cmFyeSBzdHJpbmdcIik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UmVwbGFjZShjb25maWcsIGFycmF5TW9kZSwgaXNPcHRpb25hbCwgc3F1YXNoKSB7XG4gICAgICB2YXIgcmVwbGFjZSwgY29uZmlndXJlZEtleXMsIGRlZmF1bHRQb2xpY3kgPSBbXG4gICAgICAgIHsgZnJvbTogXCJcIiwgICB0bzogKGlzT3B0aW9uYWwgfHwgYXJyYXlNb2RlID8gdW5kZWZpbmVkIDogXCJcIikgfSxcbiAgICAgICAgeyBmcm9tOiBudWxsLCB0bzogKGlzT3B0aW9uYWwgfHwgYXJyYXlNb2RlID8gdW5kZWZpbmVkIDogXCJcIikgfVxuICAgICAgXTtcbiAgICAgIHJlcGxhY2UgPSBpc0FycmF5KGNvbmZpZy5yZXBsYWNlKSA/IGNvbmZpZy5yZXBsYWNlIDogW107XG4gICAgICBpZiAoaXNTdHJpbmcoc3F1YXNoKSlcbiAgICAgICAgcmVwbGFjZS5wdXNoKHsgZnJvbTogc3F1YXNoLCB0bzogdW5kZWZpbmVkIH0pO1xuICAgICAgY29uZmlndXJlZEtleXMgPSBtYXAocmVwbGFjZSwgZnVuY3Rpb24oaXRlbSkgeyByZXR1cm4gaXRlbS5mcm9tOyB9ICk7XG4gICAgICByZXR1cm4gZmlsdGVyKGRlZmF1bHRQb2xpY3ksIGZ1bmN0aW9uKGl0ZW0pIHsgcmV0dXJuIGluZGV4T2YoY29uZmlndXJlZEtleXMsIGl0ZW0uZnJvbSkgPT09IC0xOyB9KS5jb25jYXQocmVwbGFjZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogW0ludGVybmFsXSBHZXQgdGhlIGRlZmF1bHQgdmFsdWUgb2YgYSBwYXJhbWV0ZXIsIHdoaWNoIG1heSBiZSBhbiBpbmplY3RhYmxlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uICQkZ2V0RGVmYXVsdFZhbHVlKCkge1xuICAgICAgaWYgKCFpbmplY3RvcikgdGhyb3cgbmV3IEVycm9yKFwiSW5qZWN0YWJsZSBmdW5jdGlvbnMgY2Fubm90IGJlIGNhbGxlZCBhdCBjb25maWd1cmF0aW9uIHRpbWVcIik7XG4gICAgICByZXR1cm4gaW5qZWN0b3IuaW52b2tlKGNvbmZpZy4kJGZuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBbSW50ZXJuYWxdIEdldHMgdGhlIGRlY29kZWQgcmVwcmVzZW50YXRpb24gb2YgYSB2YWx1ZSBpZiB0aGUgdmFsdWUgaXMgZGVmaW5lZCwgb3RoZXJ3aXNlLCByZXR1cm5zIHRoZVxuICAgICAqIGRlZmF1bHQgdmFsdWUsIHdoaWNoIG1heSBiZSB0aGUgcmVzdWx0IG9mIGFuIGluamVjdGFibGUgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gJHZhbHVlKHZhbHVlKSB7XG4gICAgICBmdW5jdGlvbiBoYXNSZXBsYWNlVmFsKHZhbCkgeyByZXR1cm4gZnVuY3Rpb24ob2JqKSB7IHJldHVybiBvYmouZnJvbSA9PT0gdmFsOyB9OyB9XG4gICAgICBmdW5jdGlvbiAkcmVwbGFjZSh2YWx1ZSkge1xuICAgICAgICB2YXIgcmVwbGFjZW1lbnQgPSBtYXAoZmlsdGVyKHNlbGYucmVwbGFjZSwgaGFzUmVwbGFjZVZhbCh2YWx1ZSkpLCBmdW5jdGlvbihvYmopIHsgcmV0dXJuIG9iai50bzsgfSk7XG4gICAgICAgIHJldHVybiByZXBsYWNlbWVudC5sZW5ndGggPyByZXBsYWNlbWVudFswXSA6IHZhbHVlO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSAkcmVwbGFjZSh2YWx1ZSk7XG4gICAgICByZXR1cm4gaXNEZWZpbmVkKHZhbHVlKSA/IHNlbGYudHlwZS5kZWNvZGUodmFsdWUpIDogJCRnZXREZWZhdWx0VmFsdWUoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b1N0cmluZygpIHsgcmV0dXJuIFwie1BhcmFtOlwiICsgaWQgKyBcIiBcIiArIHR5cGUgKyBcIiBzcXVhc2g6ICdcIiArIHNxdWFzaCArIFwiJyBvcHRpb25hbDogXCIgKyBpc09wdGlvbmFsICsgXCJ9XCI7IH1cblxuICAgIGV4dGVuZCh0aGlzLCB7XG4gICAgICBpZDogaWQsXG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgYXJyYXk6IGFycmF5TW9kZSxcbiAgICAgIHNxdWFzaDogc3F1YXNoLFxuICAgICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICAgIGlzT3B0aW9uYWw6IGlzT3B0aW9uYWwsXG4gICAgICB2YWx1ZTogJHZhbHVlLFxuICAgICAgZHluYW1pYzogdW5kZWZpbmVkLFxuICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICB0b1N0cmluZzogdG9TdHJpbmdcbiAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBQYXJhbVNldChwYXJhbXMpIHtcbiAgICBleHRlbmQodGhpcywgcGFyYW1zIHx8IHt9KTtcbiAgfVxuXG4gIFBhcmFtU2V0LnByb3RvdHlwZSA9IHtcbiAgICAkJG5ldzogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gaW5oZXJpdCh0aGlzLCBleHRlbmQobmV3IFBhcmFtU2V0KCksIHsgJCRwYXJlbnQ6IHRoaXN9KSk7XG4gICAgfSxcbiAgICAkJGtleXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBrZXlzID0gW10sIGNoYWluID0gW10sIHBhcmVudCA9IHRoaXMsXG4gICAgICAgIGlnbm9yZSA9IG9iamVjdEtleXMoUGFyYW1TZXQucHJvdG90eXBlKTtcbiAgICAgIHdoaWxlIChwYXJlbnQpIHsgY2hhaW4ucHVzaChwYXJlbnQpOyBwYXJlbnQgPSBwYXJlbnQuJCRwYXJlbnQ7IH1cbiAgICAgIGNoYWluLnJldmVyc2UoKTtcbiAgICAgIGZvckVhY2goY2hhaW4sIGZ1bmN0aW9uKHBhcmFtc2V0KSB7XG4gICAgICAgIGZvckVhY2gob2JqZWN0S2V5cyhwYXJhbXNldCksIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgICAgaWYgKGluZGV4T2Yoa2V5cywga2V5KSA9PT0gLTEgJiYgaW5kZXhPZihpZ25vcmUsIGtleSkgPT09IC0xKSBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBrZXlzO1xuICAgIH0sXG4gICAgJCR2YWx1ZXM6IGZ1bmN0aW9uKHBhcmFtVmFsdWVzKSB7XG4gICAgICB2YXIgdmFsdWVzID0ge30sIHNlbGYgPSB0aGlzO1xuICAgICAgZm9yRWFjaChzZWxmLiQka2V5cygpLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgdmFsdWVzW2tleV0gPSBzZWxmW2tleV0udmFsdWUocGFyYW1WYWx1ZXMgJiYgcGFyYW1WYWx1ZXNba2V5XSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfSxcbiAgICAkJGVxdWFsczogZnVuY3Rpb24ocGFyYW1WYWx1ZXMxLCBwYXJhbVZhbHVlczIpIHtcbiAgICAgIHZhciBlcXVhbCA9IHRydWUsIHNlbGYgPSB0aGlzO1xuICAgICAgZm9yRWFjaChzZWxmLiQka2V5cygpLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgdmFyIGxlZnQgPSBwYXJhbVZhbHVlczEgJiYgcGFyYW1WYWx1ZXMxW2tleV0sIHJpZ2h0ID0gcGFyYW1WYWx1ZXMyICYmIHBhcmFtVmFsdWVzMltrZXldO1xuICAgICAgICBpZiAoIXNlbGZba2V5XS50eXBlLmVxdWFscyhsZWZ0LCByaWdodCkpIGVxdWFsID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBlcXVhbDtcbiAgICB9LFxuICAgICQkdmFsaWRhdGVzOiBmdW5jdGlvbiAkJHZhbGlkYXRlKHBhcmFtVmFsdWVzKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHJ1ZSwgaXNPcHRpb25hbCwgdmFsLCBwYXJhbSwgc2VsZiA9IHRoaXM7XG5cbiAgICAgIGZvckVhY2godGhpcy4kJGtleXMoKSwgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIHBhcmFtID0gc2VsZltrZXldO1xuICAgICAgICB2YWwgPSBwYXJhbVZhbHVlc1trZXldO1xuICAgICAgICBpc09wdGlvbmFsID0gIXZhbCAmJiBwYXJhbS5pc09wdGlvbmFsO1xuICAgICAgICByZXN1bHQgPSByZXN1bHQgJiYgKGlzT3B0aW9uYWwgfHwgISFwYXJhbS50eXBlLmlzKHZhbCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgJCRwYXJlbnQ6IHVuZGVmaW5lZFxuICB9O1xuXG4gIHRoaXMuUGFyYW1TZXQgPSBQYXJhbVNldDtcbn1cblxuLy8gUmVnaXN0ZXIgYXMgYSBwcm92aWRlciBzbyBpdCdzIGF2YWlsYWJsZSB0byBvdGhlciBwcm92aWRlcnNcbmFuZ3VsYXIubW9kdWxlKCd1aS5yb3V0ZXIudXRpbCcpLnByb3ZpZGVyKCckdXJsTWF0Y2hlckZhY3RvcnknLCAkVXJsTWF0Y2hlckZhY3RvcnkpO1xuYW5ndWxhci5tb2R1bGUoJ3VpLnJvdXRlci51dGlsJykucnVuKFsnJHVybE1hdGNoZXJGYWN0b3J5JywgZnVuY3Rpb24oJHVybE1hdGNoZXJGYWN0b3J5KSB7IH1dKTtcblxuLyoqXG4gKiBAbmdkb2Mgb2JqZWN0XG4gKiBAbmFtZSB1aS5yb3V0ZXIucm91dGVyLiR1cmxSb3V0ZXJQcm92aWRlclxuICpcbiAqIEByZXF1aXJlcyB1aS5yb3V0ZXIudXRpbC4kdXJsTWF0Y2hlckZhY3RvcnlQcm92aWRlclxuICogQHJlcXVpcmVzICRsb2NhdGlvblByb3ZpZGVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBgJHVybFJvdXRlclByb3ZpZGVyYCBoYXMgdGhlIHJlc3BvbnNpYmlsaXR5IG9mIHdhdGNoaW5nIGAkbG9jYXRpb25gLiBcbiAqIFdoZW4gYCRsb2NhdGlvbmAgY2hhbmdlcyBpdCBydW5zIHRocm91Z2ggYSBsaXN0IG9mIHJ1bGVzIG9uZSBieSBvbmUgdW50aWwgYSBcbiAqIG1hdGNoIGlzIGZvdW5kLiBgJHVybFJvdXRlclByb3ZpZGVyYCBpcyB1c2VkIGJlaGluZCB0aGUgc2NlbmVzIGFueXRpbWUgeW91IHNwZWNpZnkgXG4gKiBhIHVybCBpbiBhIHN0YXRlIGNvbmZpZ3VyYXRpb24uIEFsbCB1cmxzIGFyZSBjb21waWxlZCBpbnRvIGEgVXJsTWF0Y2hlciBvYmplY3QuXG4gKlxuICogVGhlcmUgYXJlIHNldmVyYWwgbWV0aG9kcyBvbiBgJHVybFJvdXRlclByb3ZpZGVyYCB0aGF0IG1ha2UgaXQgdXNlZnVsIHRvIHVzZSBkaXJlY3RseVxuICogaW4geW91ciBtb2R1bGUgY29uZmlnLlxuICovXG4kVXJsUm91dGVyUHJvdmlkZXIuJGluamVjdCA9IFsnJGxvY2F0aW9uUHJvdmlkZXInLCAnJHVybE1hdGNoZXJGYWN0b3J5UHJvdmlkZXInXTtcbmZ1bmN0aW9uICRVcmxSb3V0ZXJQcm92aWRlciggICAkbG9jYXRpb25Qcm92aWRlciwgICAkdXJsTWF0Y2hlckZhY3RvcnkpIHtcbiAgdmFyIHJ1bGVzID0gW10sIG90aGVyd2lzZSA9IG51bGwsIGludGVyY2VwdERlZmVycmVkID0gZmFsc2UsIGxpc3RlbmVyO1xuXG4gIC8vIFJldHVybnMgYSBzdHJpbmcgdGhhdCBpcyBhIHByZWZpeCBvZiBhbGwgc3RyaW5ncyBtYXRjaGluZyB0aGUgUmVnRXhwXG4gIGZ1bmN0aW9uIHJlZ0V4cFByZWZpeChyZSkge1xuICAgIHZhciBwcmVmaXggPSAvXlxcXigoPzpcXFxcW15hLXpBLVowLTldfFteXFxcXFxcW1xcXVxcXiQqKz8uKCl8e31dKykqKS8uZXhlYyhyZS5zb3VyY2UpO1xuICAgIHJldHVybiAocHJlZml4ICE9IG51bGwpID8gcHJlZml4WzFdLnJlcGxhY2UoL1xcXFwoLikvZywgXCIkMVwiKSA6ICcnO1xuICB9XG5cbiAgLy8gSW50ZXJwb2xhdGVzIG1hdGNoZWQgdmFsdWVzIGludG8gYSBTdHJpbmcucmVwbGFjZSgpLXN0eWxlIHBhdHRlcm5cbiAgZnVuY3Rpb24gaW50ZXJwb2xhdGUocGF0dGVybiwgbWF0Y2gpIHtcbiAgICByZXR1cm4gcGF0dGVybi5yZXBsYWNlKC9cXCQoXFwkfFxcZHsxLDJ9KS8sIGZ1bmN0aW9uIChtLCB3aGF0KSB7XG4gICAgICByZXR1cm4gbWF0Y2hbd2hhdCA9PT0gJyQnID8gMCA6IE51bWJlcih3aGF0KV07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHVpLnJvdXRlci5yb3V0ZXIuJHVybFJvdXRlclByb3ZpZGVyI3J1bGVcbiAgICogQG1ldGhvZE9mIHVpLnJvdXRlci5yb3V0ZXIuJHVybFJvdXRlclByb3ZpZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBEZWZpbmVzIHJ1bGVzIHRoYXQgYXJlIHVzZWQgYnkgYCR1cmxSb3V0ZXJQcm92aWRlcmAgdG8gZmluZCBtYXRjaGVzIGZvclxuICAgKiBzcGVjaWZpYyBVUkxzLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiA8cHJlPlxuICAgKiB2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFsndWkucm91dGVyLnJvdXRlciddKTtcbiAgICpcbiAgICogYXBwLmNvbmZpZyhmdW5jdGlvbiAoJHVybFJvdXRlclByb3ZpZGVyKSB7XG4gICAqICAgLy8gSGVyZSdzIGFuIGV4YW1wbGUgb2YgaG93IHlvdSBtaWdodCBhbGxvdyBjYXNlIGluc2Vuc2l0aXZlIHVybHNcbiAgICogICAkdXJsUm91dGVyUHJvdmlkZXIucnVsZShmdW5jdGlvbiAoJGluamVjdG9yLCAkbG9jYXRpb24pIHtcbiAgICogICAgIHZhciBwYXRoID0gJGxvY2F0aW9uLnBhdGgoKSxcbiAgICogICAgICAgICBub3JtYWxpemVkID0gcGF0aC50b0xvd2VyQ2FzZSgpO1xuICAgKlxuICAgKiAgICAgaWYgKHBhdGggIT09IG5vcm1hbGl6ZWQpIHtcbiAgICogICAgICAgcmV0dXJuIG5vcm1hbGl6ZWQ7XG4gICAqICAgICB9XG4gICAqICAgfSk7XG4gICAqIH0pO1xuICAgKiA8L3ByZT5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHJ1bGUgSGFuZGxlciBmdW5jdGlvbiB0aGF0IHRha2VzIGAkaW5qZWN0b3JgIGFuZCBgJGxvY2F0aW9uYFxuICAgKiBzZXJ2aWNlcyBhcyBhcmd1bWVudHMuIFlvdSBjYW4gdXNlIHRoZW0gdG8gcmV0dXJuIGEgdmFsaWQgcGF0aCBhcyBhIHN0cmluZy5cbiAgICpcbiAgICogQHJldHVybiB7b2JqZWN0fSBgJHVybFJvdXRlclByb3ZpZGVyYCAtIGAkdXJsUm91dGVyUHJvdmlkZXJgIGluc3RhbmNlXG4gICAqL1xuICB0aGlzLnJ1bGUgPSBmdW5jdGlvbiAocnVsZSkge1xuICAgIGlmICghaXNGdW5jdGlvbihydWxlKSkgdGhyb3cgbmV3IEVycm9yKFwiJ3J1bGUnIG11c3QgYmUgYSBmdW5jdGlvblwiKTtcbiAgICBydWxlcy5wdXNoKHJ1bGUpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2Mgb2JqZWN0XG4gICAqIEBuYW1lIHVpLnJvdXRlci5yb3V0ZXIuJHVybFJvdXRlclByb3ZpZGVyI290aGVyd2lzZVxuICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnJvdXRlci4kdXJsUm91dGVyUHJvdmlkZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIERlZmluZXMgYSBwYXRoIHRoYXQgaXMgdXNlZCB3aGVuIGFuIGludmFsaWQgcm91dGUgaXMgcmVxdWVzdGVkLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiA8cHJlPlxuICAgKiB2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFsndWkucm91dGVyLnJvdXRlciddKTtcbiAgICpcbiAgICogYXBwLmNvbmZpZyhmdW5jdGlvbiAoJHVybFJvdXRlclByb3ZpZGVyKSB7XG4gICAqICAgLy8gaWYgdGhlIHBhdGggZG9lc24ndCBtYXRjaCBhbnkgb2YgdGhlIHVybHMgeW91IGNvbmZpZ3VyZWRcbiAgICogICAvLyBvdGhlcndpc2Ugd2lsbCB0YWtlIGNhcmUgb2Ygcm91dGluZyB0aGUgdXNlciB0byB0aGVcbiAgICogICAvLyBzcGVjaWZpZWQgdXJsXG4gICAqICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnL2luZGV4Jyk7XG4gICAqXG4gICAqICAgLy8gRXhhbXBsZSBvZiB1c2luZyBmdW5jdGlvbiBydWxlIGFzIHBhcmFtXG4gICAqICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZShmdW5jdGlvbiAoJGluamVjdG9yLCAkbG9jYXRpb24pIHtcbiAgICogICAgIHJldHVybiAnL2EvdmFsaWQvdXJsJztcbiAgICogICB9KTtcbiAgICogfSk7XG4gICAqIDwvcHJlPlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IHJ1bGUgVGhlIHVybCBwYXRoIHlvdSB3YW50IHRvIHJlZGlyZWN0IHRvIG9yIGEgZnVuY3Rpb24gXG4gICAqIHJ1bGUgdGhhdCByZXR1cm5zIHRoZSB1cmwgcGF0aC4gVGhlIGZ1bmN0aW9uIHZlcnNpb24gaXMgcGFzc2VkIHR3byBwYXJhbXM6IFxuICAgKiBgJGluamVjdG9yYCBhbmQgYCRsb2NhdGlvbmAgc2VydmljZXMsIGFuZCBtdXN0IHJldHVybiBhIHVybCBzdHJpbmcuXG4gICAqXG4gICAqIEByZXR1cm4ge29iamVjdH0gYCR1cmxSb3V0ZXJQcm92aWRlcmAgLSBgJHVybFJvdXRlclByb3ZpZGVyYCBpbnN0YW5jZVxuICAgKi9cbiAgdGhpcy5vdGhlcndpc2UgPSBmdW5jdGlvbiAocnVsZSkge1xuICAgIGlmIChpc1N0cmluZyhydWxlKSkge1xuICAgICAgdmFyIHJlZGlyZWN0ID0gcnVsZTtcbiAgICAgIHJ1bGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZWRpcmVjdDsgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoIWlzRnVuY3Rpb24ocnVsZSkpIHRocm93IG5ldyBFcnJvcihcIidydWxlJyBtdXN0IGJlIGEgZnVuY3Rpb25cIik7XG4gICAgb3RoZXJ3aXNlID0gcnVsZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuXG4gIGZ1bmN0aW9uIGhhbmRsZUlmTWF0Y2goJGluamVjdG9yLCBoYW5kbGVyLCBtYXRjaCkge1xuICAgIGlmICghbWF0Y2gpIHJldHVybiBmYWxzZTtcbiAgICB2YXIgcmVzdWx0ID0gJGluamVjdG9yLmludm9rZShoYW5kbGVyLCBoYW5kbGVyLCB7ICRtYXRjaDogbWF0Y2ggfSk7XG4gICAgcmV0dXJuIGlzRGVmaW5lZChyZXN1bHQpID8gcmVzdWx0IDogdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgdWkucm91dGVyLnJvdXRlci4kdXJsUm91dGVyUHJvdmlkZXIjd2hlblxuICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnJvdXRlci4kdXJsUm91dGVyUHJvdmlkZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJlZ2lzdGVycyBhIGhhbmRsZXIgZm9yIGEgZ2l2ZW4gdXJsIG1hdGNoaW5nLiBpZiBoYW5kbGUgaXMgYSBzdHJpbmcsIGl0IGlzXG4gICAqIHRyZWF0ZWQgYXMgYSByZWRpcmVjdCwgYW5kIGlzIGludGVycG9sYXRlZCBhY2NvcmRpbmcgdG8gdGhlIHN5bnRheCBvZiBtYXRjaFxuICAgKiAoaS5lLiBsaWtlIGBTdHJpbmcucmVwbGFjZSgpYCBmb3IgYFJlZ0V4cGAsIG9yIGxpa2UgYSBgVXJsTWF0Y2hlcmAgcGF0dGVybiBvdGhlcndpc2UpLlxuICAgKlxuICAgKiBJZiB0aGUgaGFuZGxlciBpcyBhIGZ1bmN0aW9uLCBpdCBpcyBpbmplY3RhYmxlLiBJdCBnZXRzIGludm9rZWQgaWYgYCRsb2NhdGlvbmBcbiAgICogbWF0Y2hlcy4gWW91IGhhdmUgdGhlIG9wdGlvbiBvZiBpbmplY3QgdGhlIG1hdGNoIG9iamVjdCBhcyBgJG1hdGNoYC5cbiAgICpcbiAgICogVGhlIGhhbmRsZXIgY2FuIHJldHVyblxuICAgKlxuICAgKiAtICoqZmFsc3kqKiB0byBpbmRpY2F0ZSB0aGF0IHRoZSBydWxlIGRpZG4ndCBtYXRjaCBhZnRlciBhbGwsIHRoZW4gYCR1cmxSb3V0ZXJgXG4gICAqICAgd2lsbCBjb250aW51ZSB0cnlpbmcgdG8gZmluZCBhbm90aGVyIG9uZSB0aGF0IG1hdGNoZXMuXG4gICAqIC0gKipzdHJpbmcqKiB3aGljaCBpcyB0cmVhdGVkIGFzIGEgcmVkaXJlY3QgYW5kIHBhc3NlZCB0byBgJGxvY2F0aW9uLnVybCgpYFxuICAgKiAtICoqdm9pZCoqIG9yIGFueSAqKnRydXRoeSoqIHZhbHVlIHRlbGxzIGAkdXJsUm91dGVyYCB0aGF0IHRoZSB1cmwgd2FzIGhhbmRsZWQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIDxwcmU+XG4gICAqIHZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnYXBwJywgWyd1aS5yb3V0ZXIucm91dGVyJ10pO1xuICAgKlxuICAgKiBhcHAuY29uZmlnKGZ1bmN0aW9uICgkdXJsUm91dGVyUHJvdmlkZXIpIHtcbiAgICogICAkdXJsUm91dGVyUHJvdmlkZXIud2hlbigkc3RhdGUudXJsLCBmdW5jdGlvbiAoJG1hdGNoLCAkc3RhdGVQYXJhbXMpIHtcbiAgICogICAgIGlmICgkc3RhdGUuJGN1cnJlbnQubmF2aWdhYmxlICE9PSBzdGF0ZSB8fFxuICAgKiAgICAgICAgICFlcXVhbEZvcktleXMoJG1hdGNoLCAkc3RhdGVQYXJhbXMpIHtcbiAgICogICAgICAkc3RhdGUudHJhbnNpdGlvblRvKHN0YXRlLCAkbWF0Y2gsIGZhbHNlKTtcbiAgICogICAgIH1cbiAgICogICB9KTtcbiAgICogfSk7XG4gICAqIDwvcHJlPlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IHdoYXQgVGhlIGluY29taW5nIHBhdGggdGhhdCB5b3Ugd2FudCB0byByZWRpcmVjdC5cbiAgICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSBoYW5kbGVyIFRoZSBwYXRoIHlvdSB3YW50IHRvIHJlZGlyZWN0IHlvdXIgdXNlciB0by5cbiAgICovXG4gIHRoaXMud2hlbiA9IGZ1bmN0aW9uICh3aGF0LCBoYW5kbGVyKSB7XG4gICAgdmFyIHJlZGlyZWN0LCBoYW5kbGVySXNTdHJpbmcgPSBpc1N0cmluZyhoYW5kbGVyKTtcbiAgICBpZiAoaXNTdHJpbmcod2hhdCkpIHdoYXQgPSAkdXJsTWF0Y2hlckZhY3RvcnkuY29tcGlsZSh3aGF0KTtcblxuICAgIGlmICghaGFuZGxlcklzU3RyaW5nICYmICFpc0Z1bmN0aW9uKGhhbmRsZXIpICYmICFpc0FycmF5KGhhbmRsZXIpKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCAnaGFuZGxlcicgaW4gd2hlbigpXCIpO1xuXG4gICAgdmFyIHN0cmF0ZWdpZXMgPSB7XG4gICAgICBtYXRjaGVyOiBmdW5jdGlvbiAod2hhdCwgaGFuZGxlcikge1xuICAgICAgICBpZiAoaGFuZGxlcklzU3RyaW5nKSB7XG4gICAgICAgICAgcmVkaXJlY3QgPSAkdXJsTWF0Y2hlckZhY3RvcnkuY29tcGlsZShoYW5kbGVyKTtcbiAgICAgICAgICBoYW5kbGVyID0gWyckbWF0Y2gnLCBmdW5jdGlvbiAoJG1hdGNoKSB7IHJldHVybiByZWRpcmVjdC5mb3JtYXQoJG1hdGNoKTsgfV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbiAoJGluamVjdG9yLCAkbG9jYXRpb24pIHtcbiAgICAgICAgICByZXR1cm4gaGFuZGxlSWZNYXRjaCgkaW5qZWN0b3IsIGhhbmRsZXIsIHdoYXQuZXhlYygkbG9jYXRpb24ucGF0aCgpLCAkbG9jYXRpb24uc2VhcmNoKCkpKTtcbiAgICAgICAgfSwge1xuICAgICAgICAgIHByZWZpeDogaXNTdHJpbmcod2hhdC5wcmVmaXgpID8gd2hhdC5wcmVmaXggOiAnJ1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICByZWdleDogZnVuY3Rpb24gKHdoYXQsIGhhbmRsZXIpIHtcbiAgICAgICAgaWYgKHdoYXQuZ2xvYmFsIHx8IHdoYXQuc3RpY2t5KSB0aHJvdyBuZXcgRXJyb3IoXCJ3aGVuKCkgUmVnRXhwIG11c3Qgbm90IGJlIGdsb2JhbCBvciBzdGlja3lcIik7XG5cbiAgICAgICAgaWYgKGhhbmRsZXJJc1N0cmluZykge1xuICAgICAgICAgIHJlZGlyZWN0ID0gaGFuZGxlcjtcbiAgICAgICAgICBoYW5kbGVyID0gWyckbWF0Y2gnLCBmdW5jdGlvbiAoJG1hdGNoKSB7IHJldHVybiBpbnRlcnBvbGF0ZShyZWRpcmVjdCwgJG1hdGNoKTsgfV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbiAoJGluamVjdG9yLCAkbG9jYXRpb24pIHtcbiAgICAgICAgICByZXR1cm4gaGFuZGxlSWZNYXRjaCgkaW5qZWN0b3IsIGhhbmRsZXIsIHdoYXQuZXhlYygkbG9jYXRpb24ucGF0aCgpKSk7XG4gICAgICAgIH0sIHtcbiAgICAgICAgICBwcmVmaXg6IHJlZ0V4cFByZWZpeCh3aGF0KVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGNoZWNrID0geyBtYXRjaGVyOiAkdXJsTWF0Y2hlckZhY3RvcnkuaXNNYXRjaGVyKHdoYXQpLCByZWdleDogd2hhdCBpbnN0YW5jZW9mIFJlZ0V4cCB9O1xuXG4gICAgZm9yICh2YXIgbiBpbiBjaGVjaykge1xuICAgICAgaWYgKGNoZWNrW25dKSByZXR1cm4gdGhpcy5ydWxlKHN0cmF0ZWdpZXNbbl0od2hhdCwgaGFuZGxlcikpO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgJ3doYXQnIGluIHdoZW4oKVwiKTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHVpLnJvdXRlci5yb3V0ZXIuJHVybFJvdXRlclByb3ZpZGVyI2RlZmVySW50ZXJjZXB0XG4gICAqIEBtZXRob2RPZiB1aS5yb3V0ZXIucm91dGVyLiR1cmxSb3V0ZXJQcm92aWRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogRGlzYWJsZXMgKG9yIGVuYWJsZXMpIGRlZmVycmluZyBsb2NhdGlvbiBjaGFuZ2UgaW50ZXJjZXB0aW9uLlxuICAgKlxuICAgKiBJZiB5b3Ugd2lzaCB0byBjdXN0b21pemUgdGhlIGJlaGF2aW9yIG9mIHN5bmNpbmcgdGhlIFVSTCAoZm9yIGV4YW1wbGUsIGlmIHlvdSB3aXNoIHRvXG4gICAqIGRlZmVyIGEgdHJhbnNpdGlvbiBidXQgbWFpbnRhaW4gdGhlIGN1cnJlbnQgVVJMKSwgY2FsbCB0aGlzIG1ldGhvZCBhdCBjb25maWd1cmF0aW9uIHRpbWUuXG4gICAqIFRoZW4sIGF0IHJ1biB0aW1lLCBjYWxsIGAkdXJsUm91dGVyLmxpc3RlbigpYCBhZnRlciB5b3UgaGF2ZSBjb25maWd1cmVkIHlvdXIgb3duXG4gICAqIGAkbG9jYXRpb25DaGFuZ2VTdWNjZXNzYCBldmVudCBoYW5kbGVyLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiA8cHJlPlxuICAgKiB2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFsndWkucm91dGVyLnJvdXRlciddKTtcbiAgICpcbiAgICogYXBwLmNvbmZpZyhmdW5jdGlvbiAoJHVybFJvdXRlclByb3ZpZGVyKSB7XG4gICAqXG4gICAqICAgLy8gUHJldmVudCAkdXJsUm91dGVyIGZyb20gYXV0b21hdGljYWxseSBpbnRlcmNlcHRpbmcgVVJMIGNoYW5nZXM7XG4gICAqICAgLy8gdGhpcyBhbGxvd3MgeW91IHRvIGNvbmZpZ3VyZSBjdXN0b20gYmVoYXZpb3IgaW4gYmV0d2VlblxuICAgKiAgIC8vIGxvY2F0aW9uIGNoYW5nZXMgYW5kIHJvdXRlIHN5bmNocm9uaXphdGlvbjpcbiAgICogICAkdXJsUm91dGVyUHJvdmlkZXIuZGVmZXJJbnRlcmNlcHQoKTtcbiAgICpcbiAgICogfSkucnVuKGZ1bmN0aW9uICgkcm9vdFNjb3BlLCAkdXJsUm91dGVyLCBVc2VyU2VydmljZSkge1xuICAgKlxuICAgKiAgICRyb290U2NvcGUuJG9uKCckbG9jYXRpb25DaGFuZ2VTdWNjZXNzJywgZnVuY3Rpb24oZSkge1xuICAgKiAgICAgLy8gVXNlclNlcnZpY2UgaXMgYW4gZXhhbXBsZSBzZXJ2aWNlIGZvciBtYW5hZ2luZyB1c2VyIHN0YXRlXG4gICAqICAgICBpZiAoVXNlclNlcnZpY2UuaXNMb2dnZWRJbigpKSByZXR1cm47XG4gICAqXG4gICAqICAgICAvLyBQcmV2ZW50ICR1cmxSb3V0ZXIncyBkZWZhdWx0IGhhbmRsZXIgZnJvbSBmaXJpbmdcbiAgICogICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICpcbiAgICogICAgIFVzZXJTZXJ2aWNlLmhhbmRsZUxvZ2luKCkudGhlbihmdW5jdGlvbigpIHtcbiAgICogICAgICAgLy8gT25jZSB0aGUgdXNlciBoYXMgbG9nZ2VkIGluLCBzeW5jIHRoZSBjdXJyZW50IFVSTFxuICAgKiAgICAgICAvLyB0byB0aGUgcm91dGVyOlxuICAgKiAgICAgICAkdXJsUm91dGVyLnN5bmMoKTtcbiAgICogICAgIH0pO1xuICAgKiAgIH0pO1xuICAgKlxuICAgKiAgIC8vIENvbmZpZ3VyZXMgJHVybFJvdXRlcidzIGxpc3RlbmVyICphZnRlciogeW91ciBjdXN0b20gbGlzdGVuZXJcbiAgICogICAkdXJsUm91dGVyLmxpc3RlbigpO1xuICAgKiB9KTtcbiAgICogPC9wcmU+XG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZGVmZXIgSW5kaWNhdGVzIHdoZXRoZXIgdG8gZGVmZXIgbG9jYXRpb24gY2hhbmdlIGludGVyY2VwdGlvbi4gUGFzc2luZ1xuICAgICAgICAgICAgbm8gcGFyYW1ldGVyIGlzIGVxdWl2YWxlbnQgdG8gYHRydWVgLlxuICAgKi9cbiAgdGhpcy5kZWZlckludGVyY2VwdCA9IGZ1bmN0aW9uIChkZWZlcikge1xuICAgIGlmIChkZWZlciA9PT0gdW5kZWZpbmVkKSBkZWZlciA9IHRydWU7XG4gICAgaW50ZXJjZXB0RGVmZXJyZWQgPSBkZWZlcjtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG9iamVjdFxuICAgKiBAbmFtZSB1aS5yb3V0ZXIucm91dGVyLiR1cmxSb3V0ZXJcbiAgICpcbiAgICogQHJlcXVpcmVzICRsb2NhdGlvblxuICAgKiBAcmVxdWlyZXMgJHJvb3RTY29wZVxuICAgKiBAcmVxdWlyZXMgJGluamVjdG9yXG4gICAqIEByZXF1aXJlcyAkYnJvd3NlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICovXG4gIHRoaXMuJGdldCA9ICRnZXQ7XG4gICRnZXQuJGluamVjdCA9IFsnJGxvY2F0aW9uJywgJyRyb290U2NvcGUnLCAnJGluamVjdG9yJywgJyRicm93c2VyJ107XG4gIGZ1bmN0aW9uICRnZXQoICAgJGxvY2F0aW9uLCAgICRyb290U2NvcGUsICAgJGluamVjdG9yLCAgICRicm93c2VyKSB7XG5cbiAgICB2YXIgYmFzZUhyZWYgPSAkYnJvd3Nlci5iYXNlSHJlZigpLCBsb2NhdGlvbiA9ICRsb2NhdGlvbi51cmwoKSwgbGFzdFB1c2hlZFVybDtcblxuICAgIGZ1bmN0aW9uIGFwcGVuZEJhc2VQYXRoKHVybCwgaXNIdG1sNSwgYWJzb2x1dGUpIHtcbiAgICAgIGlmIChiYXNlSHJlZiA9PT0gJy8nKSByZXR1cm4gdXJsO1xuICAgICAgaWYgKGlzSHRtbDUpIHJldHVybiBiYXNlSHJlZi5zbGljZSgwLCAtMSkgKyB1cmw7XG4gICAgICBpZiAoYWJzb2x1dGUpIHJldHVybiBiYXNlSHJlZi5zbGljZSgxKSArIHVybDtcbiAgICAgIHJldHVybiB1cmw7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogT3B0aW1pemUgZ3JvdXBzIG9mIHJ1bGVzIHdpdGggbm9uLWVtcHR5IHByZWZpeCBpbnRvIHNvbWUgc29ydCBvZiBkZWNpc2lvbiB0cmVlXG4gICAgZnVuY3Rpb24gdXBkYXRlKGV2dCkge1xuICAgICAgaWYgKGV2dCAmJiBldnQuZGVmYXVsdFByZXZlbnRlZCkgcmV0dXJuO1xuICAgICAgdmFyIGlnbm9yZVVwZGF0ZSA9IGxhc3RQdXNoZWRVcmwgJiYgJGxvY2F0aW9uLnVybCgpID09PSBsYXN0UHVzaGVkVXJsO1xuICAgICAgbGFzdFB1c2hlZFVybCA9IHVuZGVmaW5lZDtcbiAgICAgIGlmIChpZ25vcmVVcGRhdGUpIHJldHVybiB0cnVlO1xuXG4gICAgICBmdW5jdGlvbiBjaGVjayhydWxlKSB7XG4gICAgICAgIHZhciBoYW5kbGVkID0gcnVsZSgkaW5qZWN0b3IsICRsb2NhdGlvbik7XG5cbiAgICAgICAgaWYgKCFoYW5kbGVkKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChpc1N0cmluZyhoYW5kbGVkKSkgJGxvY2F0aW9uLnJlcGxhY2UoKS51cmwoaGFuZGxlZCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIG4gPSBydWxlcy5sZW5ndGgsIGk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgaWYgKGNoZWNrKHJ1bGVzW2ldKSkgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gYWx3YXlzIGNoZWNrIG90aGVyd2lzZSBsYXN0IHRvIGFsbG93IGR5bmFtaWMgdXBkYXRlcyB0byB0aGUgc2V0IG9mIHJ1bGVzXG4gICAgICBpZiAob3RoZXJ3aXNlKSBjaGVjayhvdGhlcndpc2UpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RlbigpIHtcbiAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXIgfHwgJHJvb3RTY29wZS4kb24oJyRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3MnLCB1cGRhdGUpO1xuICAgICAgcmV0dXJuIGxpc3RlbmVyO1xuICAgIH1cblxuICAgIGlmICghaW50ZXJjZXB0RGVmZXJyZWQpIGxpc3RlbigpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAgICAgKiBAbmFtZSB1aS5yb3V0ZXIucm91dGVyLiR1cmxSb3V0ZXIjc3luY1xuICAgICAgICogQG1ldGhvZE9mIHVpLnJvdXRlci5yb3V0ZXIuJHVybFJvdXRlclxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogVHJpZ2dlcnMgYW4gdXBkYXRlOyB0aGUgc2FtZSB1cGRhdGUgdGhhdCBoYXBwZW5zIHdoZW4gdGhlIGFkZHJlc3MgYmFyIHVybCBjaGFuZ2VzLCBha2EgYCRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3NgLlxuICAgICAgICogVGhpcyBtZXRob2QgaXMgdXNlZnVsIHdoZW4geW91IG5lZWQgdG8gdXNlIGBwcmV2ZW50RGVmYXVsdCgpYCBvbiB0aGUgYCRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3NgIGV2ZW50LFxuICAgICAgICogcGVyZm9ybSBzb21lIGN1c3RvbSBsb2dpYyAocm91dGUgcHJvdGVjdGlvbiwgYXV0aCwgY29uZmlnLCByZWRpcmVjdGlvbiwgZXRjKSBhbmQgdGhlbiBmaW5hbGx5IHByb2NlZWRcbiAgICAgICAqIHdpdGggdGhlIHRyYW5zaXRpb24gYnkgY2FsbGluZyBgJHVybFJvdXRlci5zeW5jKClgLlxuICAgICAgICpcbiAgICAgICAqIEBleGFtcGxlXG4gICAgICAgKiA8cHJlPlxuICAgICAgICogYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFsndWkucm91dGVyJ10pXG4gICAgICAgKiAgIC5ydW4oZnVuY3Rpb24oJHJvb3RTY29wZSwgJHVybFJvdXRlcikge1xuICAgICAgICogICAgICRyb290U2NvcGUuJG9uKCckbG9jYXRpb25DaGFuZ2VTdWNjZXNzJywgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgKiAgICAgICAvLyBIYWx0IHN0YXRlIGNoYW5nZSBmcm9tIGV2ZW4gc3RhcnRpbmdcbiAgICAgICAqICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICogICAgICAgLy8gUGVyZm9ybSBjdXN0b20gbG9naWNcbiAgICAgICAqICAgICAgIHZhciBtZWV0c1JlcXVpcmVtZW50ID0gLi4uXG4gICAgICAgKiAgICAgICAvLyBDb250aW51ZSB3aXRoIHRoZSB1cGRhdGUgYW5kIHN0YXRlIHRyYW5zaXRpb24gaWYgbG9naWMgYWxsb3dzXG4gICAgICAgKiAgICAgICBpZiAobWVldHNSZXF1aXJlbWVudCkgJHVybFJvdXRlci5zeW5jKCk7XG4gICAgICAgKiAgICAgfSk7XG4gICAgICAgKiB9KTtcbiAgICAgICAqIDwvcHJlPlxuICAgICAgICovXG4gICAgICBzeW5jOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdXBkYXRlKCk7XG4gICAgICB9LFxuXG4gICAgICBsaXN0ZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbGlzdGVuKCk7XG4gICAgICB9LFxuXG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uKHJlYWQpIHtcbiAgICAgICAgaWYgKHJlYWQpIHtcbiAgICAgICAgICBsb2NhdGlvbiA9ICRsb2NhdGlvbi51cmwoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCRsb2NhdGlvbi51cmwoKSA9PT0gbG9jYXRpb24pIHJldHVybjtcblxuICAgICAgICAkbG9jYXRpb24udXJsKGxvY2F0aW9uKTtcbiAgICAgICAgJGxvY2F0aW9uLnJlcGxhY2UoKTtcbiAgICAgIH0sXG5cbiAgICAgIHB1c2g6IGZ1bmN0aW9uKHVybE1hdGNoZXIsIHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgICAkbG9jYXRpb24udXJsKHVybE1hdGNoZXIuZm9ybWF0KHBhcmFtcyB8fCB7fSkpO1xuICAgICAgICBsYXN0UHVzaGVkVXJsID0gb3B0aW9ucyAmJiBvcHRpb25zLiQkYXZvaWRSZXN5bmMgPyAkbG9jYXRpb24udXJsKCkgOiB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMucmVwbGFjZSkgJGxvY2F0aW9uLnJlcGxhY2UoKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAgICAgKiBAbmFtZSB1aS5yb3V0ZXIucm91dGVyLiR1cmxSb3V0ZXIjaHJlZlxuICAgICAgICogQG1ldGhvZE9mIHVpLnJvdXRlci5yb3V0ZXIuJHVybFJvdXRlclxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogQSBVUkwgZ2VuZXJhdGlvbiBtZXRob2QgdGhhdCByZXR1cm5zIHRoZSBjb21waWxlZCBVUkwgZm9yIGEgZ2l2ZW5cbiAgICAgICAqIHtAbGluayB1aS5yb3V0ZXIudXRpbC50eXBlOlVybE1hdGNoZXIgYFVybE1hdGNoZXJgfSwgcG9wdWxhdGVkIHdpdGggdGhlIHByb3ZpZGVkIHBhcmFtZXRlcnMuXG4gICAgICAgKlxuICAgICAgICogQGV4YW1wbGVcbiAgICAgICAqIDxwcmU+XG4gICAgICAgKiAkYm9iID0gJHVybFJvdXRlci5ocmVmKG5ldyBVcmxNYXRjaGVyKFwiL2Fib3V0LzpwZXJzb25cIiksIHtcbiAgICAgICAqICAgcGVyc29uOiBcImJvYlwiXG4gICAgICAgKiB9KTtcbiAgICAgICAqIC8vICRib2IgPT0gXCIvYWJvdXQvYm9iXCI7XG4gICAgICAgKiA8L3ByZT5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge1VybE1hdGNoZXJ9IHVybE1hdGNoZXIgVGhlIGBVcmxNYXRjaGVyYCBvYmplY3Qgd2hpY2ggaXMgdXNlZCBhcyB0aGUgdGVtcGxhdGUgb2YgdGhlIFVSTCB0byBnZW5lcmF0ZS5cbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gcGFyYW1zIEFuIG9iamVjdCBvZiBwYXJhbWV0ZXIgdmFsdWVzIHRvIGZpbGwgdGhlIG1hdGNoZXIncyByZXF1aXJlZCBwYXJhbWV0ZXJzLlxuICAgICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIE9wdGlvbnMgb2JqZWN0LiBUaGUgb3B0aW9ucyBhcmU6XG4gICAgICAgKlxuICAgICAgICogLSAqKmBhYnNvbHV0ZWAqKiAtIHtib29sZWFuPWZhbHNlfSwgIElmIHRydWUgd2lsbCBnZW5lcmF0ZSBhbiBhYnNvbHV0ZSB1cmwsIGUuZy4gXCJodHRwOi8vd3d3LmV4YW1wbGUuY29tL2Z1bGx1cmxcIi5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBmdWxseSBjb21waWxlZCBVUkwsIG9yIGBudWxsYCBpZiBgcGFyYW1zYCBmYWlsIHZhbGlkYXRpb24gYWdhaW5zdCBgdXJsTWF0Y2hlcmBcbiAgICAgICAqL1xuICAgICAgaHJlZjogZnVuY3Rpb24odXJsTWF0Y2hlciwgcGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAgIGlmICghdXJsTWF0Y2hlci52YWxpZGF0ZXMocGFyYW1zKSkgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgdmFyIGlzSHRtbDUgPSAkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUoKTtcbiAgICAgICAgaWYgKGFuZ3VsYXIuaXNPYmplY3QoaXNIdG1sNSkpIHtcbiAgICAgICAgICBpc0h0bWw1ID0gaXNIdG1sNS5lbmFibGVkO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgdXJsID0gdXJsTWF0Y2hlci5mb3JtYXQocGFyYW1zKTtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgICAgaWYgKCFpc0h0bWw1ICYmIHVybCAhPT0gbnVsbCkge1xuICAgICAgICAgIHVybCA9IFwiI1wiICsgJGxvY2F0aW9uUHJvdmlkZXIuaGFzaFByZWZpeCgpICsgdXJsO1xuICAgICAgICB9XG4gICAgICAgIHVybCA9IGFwcGVuZEJhc2VQYXRoKHVybCwgaXNIdG1sNSwgb3B0aW9ucy5hYnNvbHV0ZSk7XG5cbiAgICAgICAgaWYgKCFvcHRpb25zLmFic29sdXRlIHx8ICF1cmwpIHtcbiAgICAgICAgICByZXR1cm4gdXJsO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNsYXNoID0gKCFpc0h0bWw1ICYmIHVybCA/ICcvJyA6ICcnKSwgcG9ydCA9ICRsb2NhdGlvbi5wb3J0KCk7XG4gICAgICAgIHBvcnQgPSAocG9ydCA9PT0gODAgfHwgcG9ydCA9PT0gNDQzID8gJycgOiAnOicgKyBwb3J0KTtcblxuICAgICAgICByZXR1cm4gWyRsb2NhdGlvbi5wcm90b2NvbCgpLCAnOi8vJywgJGxvY2F0aW9uLmhvc3QoKSwgcG9ydCwgc2xhc2gsIHVybF0uam9pbignJyk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuXG5hbmd1bGFyLm1vZHVsZSgndWkucm91dGVyLnJvdXRlcicpLnByb3ZpZGVyKCckdXJsUm91dGVyJywgJFVybFJvdXRlclByb3ZpZGVyKTtcblxuLyoqXG4gKiBAbmdkb2Mgb2JqZWN0XG4gKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlUHJvdmlkZXJcbiAqXG4gKiBAcmVxdWlyZXMgdWkucm91dGVyLnJvdXRlci4kdXJsUm91dGVyUHJvdmlkZXJcbiAqIEByZXF1aXJlcyB1aS5yb3V0ZXIudXRpbC4kdXJsTWF0Y2hlckZhY3RvcnlQcm92aWRlclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIG5ldyBgJHN0YXRlUHJvdmlkZXJgIHdvcmtzIHNpbWlsYXIgdG8gQW5ndWxhcidzIHYxIHJvdXRlciwgYnV0IGl0IGZvY3VzZXMgcHVyZWx5XG4gKiBvbiBzdGF0ZS5cbiAqXG4gKiBBIHN0YXRlIGNvcnJlc3BvbmRzIHRvIGEgXCJwbGFjZVwiIGluIHRoZSBhcHBsaWNhdGlvbiBpbiB0ZXJtcyBvZiB0aGUgb3ZlcmFsbCBVSSBhbmRcbiAqIG5hdmlnYXRpb24uIEEgc3RhdGUgZGVzY3JpYmVzICh2aWEgdGhlIGNvbnRyb2xsZXIgLyB0ZW1wbGF0ZSAvIHZpZXcgcHJvcGVydGllcykgd2hhdFxuICogdGhlIFVJIGxvb2tzIGxpa2UgYW5kIGRvZXMgYXQgdGhhdCBwbGFjZS5cbiAqXG4gKiBTdGF0ZXMgb2Z0ZW4gaGF2ZSB0aGluZ3MgaW4gY29tbW9uLCBhbmQgdGhlIHByaW1hcnkgd2F5IG9mIGZhY3RvcmluZyBvdXQgdGhlc2VcbiAqIGNvbW1vbmFsaXRpZXMgaW4gdGhpcyBtb2RlbCBpcyB2aWEgdGhlIHN0YXRlIGhpZXJhcmNoeSwgaS5lLiBwYXJlbnQvY2hpbGQgc3RhdGVzIGFrYVxuICogbmVzdGVkIHN0YXRlcy5cbiAqXG4gKiBUaGUgYCRzdGF0ZVByb3ZpZGVyYCBwcm92aWRlcyBpbnRlcmZhY2VzIHRvIGRlY2xhcmUgdGhlc2Ugc3RhdGVzIGZvciB5b3VyIGFwcC5cbiAqL1xuJFN0YXRlUHJvdmlkZXIuJGluamVjdCA9IFsnJHVybFJvdXRlclByb3ZpZGVyJywgJyR1cmxNYXRjaGVyRmFjdG9yeVByb3ZpZGVyJ107XG5mdW5jdGlvbiAkU3RhdGVQcm92aWRlciggICAkdXJsUm91dGVyUHJvdmlkZXIsICAgJHVybE1hdGNoZXJGYWN0b3J5KSB7XG5cbiAgdmFyIHJvb3QsIHN0YXRlcyA9IHt9LCAkc3RhdGUsIHF1ZXVlID0ge30sIGFic3RyYWN0S2V5ID0gJ2Fic3RyYWN0JztcblxuICAvLyBCdWlsZHMgc3RhdGUgcHJvcGVydGllcyBmcm9tIGRlZmluaXRpb24gcGFzc2VkIHRvIHJlZ2lzdGVyU3RhdGUoKVxuICB2YXIgc3RhdGVCdWlsZGVyID0ge1xuXG4gICAgLy8gRGVyaXZlIHBhcmVudCBzdGF0ZSBmcm9tIGEgaGllcmFyY2hpY2FsIG5hbWUgb25seSBpZiAncGFyZW50JyBpcyBub3QgZXhwbGljaXRseSBkZWZpbmVkLlxuICAgIC8vIHN0YXRlLmNoaWxkcmVuID0gW107XG4gICAgLy8gaWYgKHBhcmVudCkgcGFyZW50LmNoaWxkcmVuLnB1c2goc3RhdGUpO1xuICAgIHBhcmVudDogZnVuY3Rpb24oc3RhdGUpIHtcbiAgICAgIGlmIChpc0RlZmluZWQoc3RhdGUucGFyZW50KSAmJiBzdGF0ZS5wYXJlbnQpIHJldHVybiBmaW5kU3RhdGUoc3RhdGUucGFyZW50KTtcbiAgICAgIC8vIHJlZ2V4IG1hdGNoZXMgYW55IHZhbGlkIGNvbXBvc2l0ZSBzdGF0ZSBuYW1lXG4gICAgICAvLyB3b3VsZCBtYXRjaCBcImNvbnRhY3QubGlzdFwiIGJ1dCBub3QgXCJjb250YWN0c1wiXG4gICAgICB2YXIgY29tcG9zaXRlTmFtZSA9IC9eKC4rKVxcLlteLl0rJC8uZXhlYyhzdGF0ZS5uYW1lKTtcbiAgICAgIHJldHVybiBjb21wb3NpdGVOYW1lID8gZmluZFN0YXRlKGNvbXBvc2l0ZU5hbWVbMV0pIDogcm9vdDtcbiAgICB9LFxuXG4gICAgLy8gaW5oZXJpdCAnZGF0YScgZnJvbSBwYXJlbnQgYW5kIG92ZXJyaWRlIGJ5IG93biB2YWx1ZXMgKGlmIGFueSlcbiAgICBkYXRhOiBmdW5jdGlvbihzdGF0ZSkge1xuICAgICAgaWYgKHN0YXRlLnBhcmVudCAmJiBzdGF0ZS5wYXJlbnQuZGF0YSkge1xuICAgICAgICBzdGF0ZS5kYXRhID0gc3RhdGUuc2VsZi5kYXRhID0gZXh0ZW5kKHt9LCBzdGF0ZS5wYXJlbnQuZGF0YSwgc3RhdGUuZGF0YSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RhdGUuZGF0YTtcbiAgICB9LFxuXG4gICAgLy8gQnVpbGQgYSBVUkxNYXRjaGVyIGlmIG5lY2Vzc2FyeSwgZWl0aGVyIHZpYSBhIHJlbGF0aXZlIG9yIGFic29sdXRlIFVSTFxuICAgIHVybDogZnVuY3Rpb24oc3RhdGUpIHtcbiAgICAgIHZhciB1cmwgPSBzdGF0ZS51cmwsIGNvbmZpZyA9IHsgcGFyYW1zOiBzdGF0ZS5wYXJhbXMgfHwge30gfTtcblxuICAgICAgaWYgKGlzU3RyaW5nKHVybCkpIHtcbiAgICAgICAgaWYgKHVybC5jaGFyQXQoMCkgPT0gJ14nKSByZXR1cm4gJHVybE1hdGNoZXJGYWN0b3J5LmNvbXBpbGUodXJsLnN1YnN0cmluZygxKSwgY29uZmlnKTtcbiAgICAgICAgcmV0dXJuIChzdGF0ZS5wYXJlbnQubmF2aWdhYmxlIHx8IHJvb3QpLnVybC5jb25jYXQodXJsLCBjb25maWcpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXVybCB8fCAkdXJsTWF0Y2hlckZhY3RvcnkuaXNNYXRjaGVyKHVybCkpIHJldHVybiB1cmw7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHVybCAnXCIgKyB1cmwgKyBcIicgaW4gc3RhdGUgJ1wiICsgc3RhdGUgKyBcIidcIik7XG4gICAgfSxcblxuICAgIC8vIEtlZXAgdHJhY2sgb2YgdGhlIGNsb3Nlc3QgYW5jZXN0b3Igc3RhdGUgdGhhdCBoYXMgYSBVUkwgKGkuZS4gaXMgbmF2aWdhYmxlKVxuICAgIG5hdmlnYWJsZTogZnVuY3Rpb24oc3RhdGUpIHtcbiAgICAgIHJldHVybiBzdGF0ZS51cmwgPyBzdGF0ZSA6IChzdGF0ZS5wYXJlbnQgPyBzdGF0ZS5wYXJlbnQubmF2aWdhYmxlIDogbnVsbCk7XG4gICAgfSxcblxuICAgIC8vIE93biBwYXJhbWV0ZXJzIGZvciB0aGlzIHN0YXRlLiBzdGF0ZS51cmwucGFyYW1zIGlzIGFscmVhZHkgYnVpbHQgYXQgdGhpcyBwb2ludC4gQ3JlYXRlIGFuZCBhZGQgbm9uLXVybCBwYXJhbXNcbiAgICBvd25QYXJhbXM6IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgICB2YXIgcGFyYW1zID0gc3RhdGUudXJsICYmIHN0YXRlLnVybC5wYXJhbXMgfHwgbmV3ICQkVU1GUC5QYXJhbVNldCgpO1xuICAgICAgZm9yRWFjaChzdGF0ZS5wYXJhbXMgfHwge30sIGZ1bmN0aW9uKGNvbmZpZywgaWQpIHtcbiAgICAgICAgaWYgKCFwYXJhbXNbaWRdKSBwYXJhbXNbaWRdID0gbmV3ICQkVU1GUC5QYXJhbShpZCwgbnVsbCwgY29uZmlnLCBcImNvbmZpZ1wiKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHBhcmFtcztcbiAgICB9LFxuXG4gICAgLy8gRGVyaXZlIHBhcmFtZXRlcnMgZm9yIHRoaXMgc3RhdGUgYW5kIGVuc3VyZSB0aGV5J3JlIGEgc3VwZXItc2V0IG9mIHBhcmVudCdzIHBhcmFtZXRlcnNcbiAgICBwYXJhbXM6IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgICByZXR1cm4gc3RhdGUucGFyZW50ICYmIHN0YXRlLnBhcmVudC5wYXJhbXMgPyBleHRlbmQoc3RhdGUucGFyZW50LnBhcmFtcy4kJG5ldygpLCBzdGF0ZS5vd25QYXJhbXMpIDogbmV3ICQkVU1GUC5QYXJhbVNldCgpO1xuICAgIH0sXG5cbiAgICAvLyBJZiB0aGVyZSBpcyBubyBleHBsaWNpdCBtdWx0aS12aWV3IGNvbmZpZ3VyYXRpb24sIG1ha2Ugb25lIHVwIHNvIHdlIGRvbid0IGhhdmVcbiAgICAvLyB0byBoYW5kbGUgYm90aCBjYXNlcyBpbiB0aGUgdmlldyBkaXJlY3RpdmUgbGF0ZXIuIE5vdGUgdGhhdCBoYXZpbmcgYW4gZXhwbGljaXRcbiAgICAvLyAndmlld3MnIHByb3BlcnR5IHdpbGwgbWVhbiB0aGUgZGVmYXVsdCB1bm5hbWVkIHZpZXcgcHJvcGVydGllcyBhcmUgaWdub3JlZC4gVGhpc1xuICAgIC8vIGlzIGFsc28gYSBnb29kIHRpbWUgdG8gcmVzb2x2ZSB2aWV3IG5hbWVzIHRvIGFic29sdXRlIG5hbWVzLCBzbyBldmVyeXRoaW5nIGlzIGFcbiAgICAvLyBzdHJhaWdodCBsb29rdXAgYXQgbGluayB0aW1lLlxuICAgIHZpZXdzOiBmdW5jdGlvbihzdGF0ZSkge1xuICAgICAgdmFyIHZpZXdzID0ge307XG5cbiAgICAgIGZvckVhY2goaXNEZWZpbmVkKHN0YXRlLnZpZXdzKSA/IHN0YXRlLnZpZXdzIDogeyAnJzogc3RhdGUgfSwgZnVuY3Rpb24gKHZpZXcsIG5hbWUpIHtcbiAgICAgICAgaWYgKG5hbWUuaW5kZXhPZignQCcpIDwgMCkgbmFtZSArPSAnQCcgKyBzdGF0ZS5wYXJlbnQubmFtZTtcbiAgICAgICAgdmlld3NbbmFtZV0gPSB2aWV3O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gdmlld3M7XG4gICAgfSxcblxuICAgIC8vIEtlZXAgYSBmdWxsIHBhdGggZnJvbSB0aGUgcm9vdCBkb3duIHRvIHRoaXMgc3RhdGUgYXMgdGhpcyBpcyBuZWVkZWQgZm9yIHN0YXRlIGFjdGl2YXRpb24uXG4gICAgcGF0aDogZnVuY3Rpb24oc3RhdGUpIHtcbiAgICAgIHJldHVybiBzdGF0ZS5wYXJlbnQgPyBzdGF0ZS5wYXJlbnQucGF0aC5jb25jYXQoc3RhdGUpIDogW107IC8vIGV4Y2x1ZGUgcm9vdCBmcm9tIHBhdGhcbiAgICB9LFxuXG4gICAgLy8gU3BlZWQgdXAgJHN0YXRlLmNvbnRhaW5zKCkgYXMgaXQncyB1c2VkIGEgbG90XG4gICAgaW5jbHVkZXM6IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgICB2YXIgaW5jbHVkZXMgPSBzdGF0ZS5wYXJlbnQgPyBleHRlbmQoe30sIHN0YXRlLnBhcmVudC5pbmNsdWRlcykgOiB7fTtcbiAgICAgIGluY2x1ZGVzW3N0YXRlLm5hbWVdID0gdHJ1ZTtcbiAgICAgIHJldHVybiBpbmNsdWRlcztcbiAgICB9LFxuXG4gICAgJGRlbGVnYXRlczoge31cbiAgfTtcblxuICBmdW5jdGlvbiBpc1JlbGF0aXZlKHN0YXRlTmFtZSkge1xuICAgIHJldHVybiBzdGF0ZU5hbWUuaW5kZXhPZihcIi5cIikgPT09IDAgfHwgc3RhdGVOYW1lLmluZGV4T2YoXCJeXCIpID09PSAwO1xuICB9XG5cbiAgZnVuY3Rpb24gZmluZFN0YXRlKHN0YXRlT3JOYW1lLCBiYXNlKSB7XG4gICAgaWYgKCFzdGF0ZU9yTmFtZSkgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgIHZhciBpc1N0ciA9IGlzU3RyaW5nKHN0YXRlT3JOYW1lKSxcbiAgICAgICAgbmFtZSAgPSBpc1N0ciA/IHN0YXRlT3JOYW1lIDogc3RhdGVPck5hbWUubmFtZSxcbiAgICAgICAgcGF0aCAgPSBpc1JlbGF0aXZlKG5hbWUpO1xuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIGlmICghYmFzZSkgdGhyb3cgbmV3IEVycm9yKFwiTm8gcmVmZXJlbmNlIHBvaW50IGdpdmVuIGZvciBwYXRoICdcIiAgKyBuYW1lICsgXCInXCIpO1xuICAgICAgYmFzZSA9IGZpbmRTdGF0ZShiYXNlKTtcbiAgICAgIFxuICAgICAgdmFyIHJlbCA9IG5hbWUuc3BsaXQoXCIuXCIpLCBpID0gMCwgcGF0aExlbmd0aCA9IHJlbC5sZW5ndGgsIGN1cnJlbnQgPSBiYXNlO1xuXG4gICAgICBmb3IgKDsgaSA8IHBhdGhMZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAocmVsW2ldID09PSBcIlwiICYmIGkgPT09IDApIHtcbiAgICAgICAgICBjdXJyZW50ID0gYmFzZTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVsW2ldID09PSBcIl5cIikge1xuICAgICAgICAgIGlmICghY3VycmVudC5wYXJlbnQpIHRocm93IG5ldyBFcnJvcihcIlBhdGggJ1wiICsgbmFtZSArIFwiJyBub3QgdmFsaWQgZm9yIHN0YXRlICdcIiArIGJhc2UubmFtZSArIFwiJ1wiKTtcbiAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnQ7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICByZWwgPSByZWwuc2xpY2UoaSkuam9pbihcIi5cIik7XG4gICAgICBuYW1lID0gY3VycmVudC5uYW1lICsgKGN1cnJlbnQubmFtZSAmJiByZWwgPyBcIi5cIiA6IFwiXCIpICsgcmVsO1xuICAgIH1cbiAgICB2YXIgc3RhdGUgPSBzdGF0ZXNbbmFtZV07XG5cbiAgICBpZiAoc3RhdGUgJiYgKGlzU3RyIHx8ICghaXNTdHIgJiYgKHN0YXRlID09PSBzdGF0ZU9yTmFtZSB8fCBzdGF0ZS5zZWxmID09PSBzdGF0ZU9yTmFtZSkpKSkge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gcXVldWVTdGF0ZShwYXJlbnROYW1lLCBzdGF0ZSkge1xuICAgIGlmICghcXVldWVbcGFyZW50TmFtZV0pIHtcbiAgICAgIHF1ZXVlW3BhcmVudE5hbWVdID0gW107XG4gICAgfVxuICAgIHF1ZXVlW3BhcmVudE5hbWVdLnB1c2goc3RhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gZmx1c2hRdWV1ZWRDaGlsZHJlbihwYXJlbnROYW1lKSB7XG4gICAgdmFyIHF1ZXVlZCA9IHF1ZXVlW3BhcmVudE5hbWVdIHx8IFtdO1xuICAgIHdoaWxlKHF1ZXVlZC5sZW5ndGgpIHtcbiAgICAgIHJlZ2lzdGVyU3RhdGUocXVldWVkLnNoaWZ0KCkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlZ2lzdGVyU3RhdGUoc3RhdGUpIHtcbiAgICAvLyBXcmFwIGEgbmV3IG9iamVjdCBhcm91bmQgdGhlIHN0YXRlIHNvIHdlIGNhbiBzdG9yZSBvdXIgcHJpdmF0ZSBkZXRhaWxzIGVhc2lseS5cbiAgICBzdGF0ZSA9IGluaGVyaXQoc3RhdGUsIHtcbiAgICAgIHNlbGY6IHN0YXRlLFxuICAgICAgcmVzb2x2ZTogc3RhdGUucmVzb2x2ZSB8fCB7fSxcbiAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMubmFtZTsgfVxuICAgIH0pO1xuXG4gICAgdmFyIG5hbWUgPSBzdGF0ZS5uYW1lO1xuICAgIGlmICghaXNTdHJpbmcobmFtZSkgfHwgbmFtZS5pbmRleE9mKCdAJykgPj0gMCkgdGhyb3cgbmV3IEVycm9yKFwiU3RhdGUgbXVzdCBoYXZlIGEgdmFsaWQgbmFtZVwiKTtcbiAgICBpZiAoc3RhdGVzLmhhc093blByb3BlcnR5KG5hbWUpKSB0aHJvdyBuZXcgRXJyb3IoXCJTdGF0ZSAnXCIgKyBuYW1lICsgXCInJyBpcyBhbHJlYWR5IGRlZmluZWRcIik7XG5cbiAgICAvLyBHZXQgcGFyZW50IG5hbWVcbiAgICB2YXIgcGFyZW50TmFtZSA9IChuYW1lLmluZGV4T2YoJy4nKSAhPT0gLTEpID8gbmFtZS5zdWJzdHJpbmcoMCwgbmFtZS5sYXN0SW5kZXhPZignLicpKVxuICAgICAgICA6IChpc1N0cmluZyhzdGF0ZS5wYXJlbnQpKSA/IHN0YXRlLnBhcmVudFxuICAgICAgICA6IChpc09iamVjdChzdGF0ZS5wYXJlbnQpICYmIGlzU3RyaW5nKHN0YXRlLnBhcmVudC5uYW1lKSkgPyBzdGF0ZS5wYXJlbnQubmFtZVxuICAgICAgICA6ICcnO1xuXG4gICAgLy8gSWYgcGFyZW50IGlzIG5vdCByZWdpc3RlcmVkIHlldCwgYWRkIHN0YXRlIHRvIHF1ZXVlIGFuZCByZWdpc3RlciBsYXRlclxuICAgIGlmIChwYXJlbnROYW1lICYmICFzdGF0ZXNbcGFyZW50TmFtZV0pIHtcbiAgICAgIHJldHVybiBxdWV1ZVN0YXRlKHBhcmVudE5hbWUsIHN0YXRlLnNlbGYpO1xuICAgIH1cblxuICAgIGZvciAodmFyIGtleSBpbiBzdGF0ZUJ1aWxkZXIpIHtcbiAgICAgIGlmIChpc0Z1bmN0aW9uKHN0YXRlQnVpbGRlcltrZXldKSkgc3RhdGVba2V5XSA9IHN0YXRlQnVpbGRlcltrZXldKHN0YXRlLCBzdGF0ZUJ1aWxkZXIuJGRlbGVnYXRlc1trZXldKTtcbiAgICB9XG4gICAgc3RhdGVzW25hbWVdID0gc3RhdGU7XG5cbiAgICAvLyBSZWdpc3RlciB0aGUgc3RhdGUgaW4gdGhlIGdsb2JhbCBzdGF0ZSBsaXN0IGFuZCB3aXRoICR1cmxSb3V0ZXIgaWYgbmVjZXNzYXJ5LlxuICAgIGlmICghc3RhdGVbYWJzdHJhY3RLZXldICYmIHN0YXRlLnVybCkge1xuICAgICAgJHVybFJvdXRlclByb3ZpZGVyLndoZW4oc3RhdGUudXJsLCBbJyRtYXRjaCcsICckc3RhdGVQYXJhbXMnLCBmdW5jdGlvbiAoJG1hdGNoLCAkc3RhdGVQYXJhbXMpIHtcbiAgICAgICAgaWYgKCRzdGF0ZS4kY3VycmVudC5uYXZpZ2FibGUgIT0gc3RhdGUgfHwgIWVxdWFsRm9yS2V5cygkbWF0Y2gsICRzdGF0ZVBhcmFtcykpIHtcbiAgICAgICAgICAkc3RhdGUudHJhbnNpdGlvblRvKHN0YXRlLCAkbWF0Y2gsIHsgaW5oZXJpdDogdHJ1ZSwgbG9jYXRpb246IGZhbHNlIH0pO1xuICAgICAgICB9XG4gICAgICB9XSk7XG4gICAgfVxuXG4gICAgLy8gUmVnaXN0ZXIgYW55IHF1ZXVlZCBjaGlsZHJlblxuICAgIGZsdXNoUXVldWVkQ2hpbGRyZW4obmFtZSk7XG5cbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cblxuICAvLyBDaGVja3MgdGV4dCB0byBzZWUgaWYgaXQgbG9va3MgbGlrZSBhIGdsb2IuXG4gIGZ1bmN0aW9uIGlzR2xvYiAodGV4dCkge1xuICAgIHJldHVybiB0ZXh0LmluZGV4T2YoJyonKSA+IC0xO1xuICB9XG5cbiAgLy8gUmV0dXJucyB0cnVlIGlmIGdsb2IgbWF0Y2hlcyBjdXJyZW50ICRzdGF0ZSBuYW1lLlxuICBmdW5jdGlvbiBkb2VzU3RhdGVNYXRjaEdsb2IgKGdsb2IpIHtcbiAgICB2YXIgZ2xvYlNlZ21lbnRzID0gZ2xvYi5zcGxpdCgnLicpLFxuICAgICAgICBzZWdtZW50cyA9ICRzdGF0ZS4kY3VycmVudC5uYW1lLnNwbGl0KCcuJyk7XG5cbiAgICAvL21hdGNoIGdyZWVkeSBzdGFydHNcbiAgICBpZiAoZ2xvYlNlZ21lbnRzWzBdID09PSAnKionKSB7XG4gICAgICAgc2VnbWVudHMgPSBzZWdtZW50cy5zbGljZShpbmRleE9mKHNlZ21lbnRzLCBnbG9iU2VnbWVudHNbMV0pKTtcbiAgICAgICBzZWdtZW50cy51bnNoaWZ0KCcqKicpO1xuICAgIH1cbiAgICAvL21hdGNoIGdyZWVkeSBlbmRzXG4gICAgaWYgKGdsb2JTZWdtZW50c1tnbG9iU2VnbWVudHMubGVuZ3RoIC0gMV0gPT09ICcqKicpIHtcbiAgICAgICBzZWdtZW50cy5zcGxpY2UoaW5kZXhPZihzZWdtZW50cywgZ2xvYlNlZ21lbnRzW2dsb2JTZWdtZW50cy5sZW5ndGggLSAyXSkgKyAxLCBOdW1iZXIuTUFYX1ZBTFVFKTtcbiAgICAgICBzZWdtZW50cy5wdXNoKCcqKicpO1xuICAgIH1cblxuICAgIGlmIChnbG9iU2VnbWVudHMubGVuZ3RoICE9IHNlZ21lbnRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vbWF0Y2ggc2luZ2xlIHN0YXJzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBnbG9iU2VnbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAoZ2xvYlNlZ21lbnRzW2ldID09PSAnKicpIHtcbiAgICAgICAgc2VnbWVudHNbaV0gPSAnKic7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlZ21lbnRzLmpvaW4oJycpID09PSBnbG9iU2VnbWVudHMuam9pbignJyk7XG4gIH1cblxuXG4gIC8vIEltcGxpY2l0IHJvb3Qgc3RhdGUgdGhhdCBpcyBhbHdheXMgYWN0aXZlXG4gIHJvb3QgPSByZWdpc3RlclN0YXRlKHtcbiAgICBuYW1lOiAnJyxcbiAgICB1cmw6ICdeJyxcbiAgICB2aWV3czogbnVsbCxcbiAgICAnYWJzdHJhY3QnOiB0cnVlXG4gIH0pO1xuICByb290Lm5hdmlnYWJsZSA9IG51bGw7XG5cblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVQcm92aWRlciNkZWNvcmF0b3JcbiAgICogQG1ldGhvZE9mIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVQcm92aWRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQWxsb3dzIHlvdSB0byBleHRlbmQgKGNhcmVmdWxseSkgb3Igb3ZlcnJpZGUgKGF0IHlvdXIgb3duIHBlcmlsKSB0aGUgXG4gICAqIGBzdGF0ZUJ1aWxkZXJgIG9iamVjdCB1c2VkIGludGVybmFsbHkgYnkgYCRzdGF0ZVByb3ZpZGVyYC4gVGhpcyBjYW4gYmUgdXNlZCBcbiAgICogdG8gYWRkIGN1c3RvbSBmdW5jdGlvbmFsaXR5IHRvIHVpLXJvdXRlciwgZm9yIGV4YW1wbGUgaW5mZXJyaW5nIHRlbXBsYXRlVXJsIFxuICAgKiBiYXNlZCBvbiB0aGUgc3RhdGUgbmFtZS5cbiAgICpcbiAgICogV2hlbiBwYXNzaW5nIG9ubHkgYSBuYW1lLCBpdCByZXR1cm5zIHRoZSBjdXJyZW50IChvcmlnaW5hbCBvciBkZWNvcmF0ZWQpIGJ1aWxkZXJcbiAgICogZnVuY3Rpb24gdGhhdCBtYXRjaGVzIGBuYW1lYC5cbiAgICpcbiAgICogVGhlIGJ1aWxkZXIgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIGRlY29yYXRlZCBhcmUgbGlzdGVkIGJlbG93LiBUaG91Z2ggbm90IGFsbFxuICAgKiBuZWNlc3NhcmlseSBoYXZlIGEgZ29vZCB1c2UgY2FzZSBmb3IgZGVjb3JhdGlvbiwgdGhhdCBpcyB1cCB0byB5b3UgdG8gZGVjaWRlLlxuICAgKlxuICAgKiBJbiBhZGRpdGlvbiwgdXNlcnMgY2FuIGF0dGFjaCBjdXN0b20gZGVjb3JhdG9ycywgd2hpY2ggd2lsbCBnZW5lcmF0ZSBuZXcgXG4gICAqIHByb3BlcnRpZXMgd2l0aGluIHRoZSBzdGF0ZSdzIGludGVybmFsIGRlZmluaXRpb24uIFRoZXJlIGlzIGN1cnJlbnRseSBubyBjbGVhciBcbiAgICogdXNlLWNhc2UgZm9yIHRoaXMgYmV5b25kIGFjY2Vzc2luZyBpbnRlcm5hbCBzdGF0ZXMgKGkuZS4gJHN0YXRlLiRjdXJyZW50KSwgXG4gICAqIGhvd2V2ZXIsIGV4cGVjdCB0aGlzIHRvIGJlY29tZSBpbmNyZWFzaW5nbHkgcmVsZXZhbnQgYXMgd2UgaW50cm9kdWNlIGFkZGl0aW9uYWwgXG4gICAqIG1ldGEtcHJvZ3JhbW1pbmcgZmVhdHVyZXMuXG4gICAqXG4gICAqICoqV2FybmluZyoqOiBEZWNvcmF0b3JzIHNob3VsZCBub3QgYmUgaW50ZXJkZXBlbmRlbnQgYmVjYXVzZSB0aGUgb3JkZXIgb2YgXG4gICAqIGV4ZWN1dGlvbiBvZiB0aGUgYnVpbGRlciBmdW5jdGlvbnMgaW4gbm9uLWRldGVybWluaXN0aWMuIEJ1aWxkZXIgZnVuY3Rpb25zIFxuICAgKiBzaG91bGQgb25seSBiZSBkZXBlbmRlbnQgb24gdGhlIHN0YXRlIGRlZmluaXRpb24gb2JqZWN0IGFuZCBzdXBlciBmdW5jdGlvbi5cbiAgICpcbiAgICpcbiAgICogRXhpc3RpbmcgYnVpbGRlciBmdW5jdGlvbnMgYW5kIGN1cnJlbnQgcmV0dXJuIHZhbHVlczpcbiAgICpcbiAgICogLSAqKnBhcmVudCoqIGB7b2JqZWN0fWAgLSByZXR1cm5zIHRoZSBwYXJlbnQgc3RhdGUgb2JqZWN0LlxuICAgKiAtICoqZGF0YSoqIGB7b2JqZWN0fWAgLSByZXR1cm5zIHN0YXRlIGRhdGEsIGluY2x1ZGluZyBhbnkgaW5oZXJpdGVkIGRhdGEgdGhhdCBpcyBub3RcbiAgICogICBvdmVycmlkZGVuIGJ5IG93biB2YWx1ZXMgKGlmIGFueSkuXG4gICAqIC0gKip1cmwqKiBge29iamVjdH1gIC0gcmV0dXJucyBhIHtAbGluayB1aS5yb3V0ZXIudXRpbC50eXBlOlVybE1hdGNoZXIgVXJsTWF0Y2hlcn1cbiAgICogICBvciBgbnVsbGAuXG4gICAqIC0gKipuYXZpZ2FibGUqKiBge29iamVjdH1gIC0gcmV0dXJucyBjbG9zZXN0IGFuY2VzdG9yIHN0YXRlIHRoYXQgaGFzIGEgVVJMIChha2EgaXMgXG4gICAqICAgbmF2aWdhYmxlKS5cbiAgICogLSAqKnBhcmFtcyoqIGB7b2JqZWN0fWAgLSByZXR1cm5zIGFuIGFycmF5IG9mIHN0YXRlIHBhcmFtcyB0aGF0IGFyZSBlbnN1cmVkIHRvIFxuICAgKiAgIGJlIGEgc3VwZXItc2V0IG9mIHBhcmVudCdzIHBhcmFtcy5cbiAgICogLSAqKnZpZXdzKiogYHtvYmplY3R9YCAtIHJldHVybnMgYSB2aWV3cyBvYmplY3Qgd2hlcmUgZWFjaCBrZXkgaXMgYW4gYWJzb2x1dGUgdmlldyBcbiAgICogICBuYW1lIChpLmUuIFwidmlld05hbWVAc3RhdGVOYW1lXCIpIGFuZCBlYWNoIHZhbHVlIGlzIHRoZSBjb25maWcgb2JqZWN0IFxuICAgKiAgICh0ZW1wbGF0ZSwgY29udHJvbGxlcikgZm9yIHRoZSB2aWV3LiBFdmVuIHdoZW4geW91IGRvbid0IHVzZSB0aGUgdmlld3Mgb2JqZWN0IFxuICAgKiAgIGV4cGxpY2l0bHkgb24gYSBzdGF0ZSBjb25maWcsIG9uZSBpcyBzdGlsbCBjcmVhdGVkIGZvciB5b3UgaW50ZXJuYWxseS5cbiAgICogICBTbyBieSBkZWNvcmF0aW5nIHRoaXMgYnVpbGRlciBmdW5jdGlvbiB5b3UgaGF2ZSBhY2Nlc3MgdG8gZGVjb3JhdGluZyB0ZW1wbGF0ZSBcbiAgICogICBhbmQgY29udHJvbGxlciBwcm9wZXJ0aWVzLlxuICAgKiAtICoqb3duUGFyYW1zKiogYHtvYmplY3R9YCAtIHJldHVybnMgYW4gYXJyYXkgb2YgcGFyYW1zIHRoYXQgYmVsb25nIHRvIHRoZSBzdGF0ZSwgXG4gICAqICAgbm90IGluY2x1ZGluZyBhbnkgcGFyYW1zIGRlZmluZWQgYnkgYW5jZXN0b3Igc3RhdGVzLlxuICAgKiAtICoqcGF0aCoqIGB7c3RyaW5nfWAgLSByZXR1cm5zIHRoZSBmdWxsIHBhdGggZnJvbSB0aGUgcm9vdCBkb3duIHRvIHRoaXMgc3RhdGUuIFxuICAgKiAgIE5lZWRlZCBmb3Igc3RhdGUgYWN0aXZhdGlvbi5cbiAgICogLSAqKmluY2x1ZGVzKiogYHtvYmplY3R9YCAtIHJldHVybnMgYW4gb2JqZWN0IHRoYXQgaW5jbHVkZXMgZXZlcnkgc3RhdGUgdGhhdCBcbiAgICogICB3b3VsZCBwYXNzIGEgYCRzdGF0ZS5pbmNsdWRlcygpYCB0ZXN0LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiA8cHJlPlxuICAgKiAvLyBPdmVycmlkZSB0aGUgaW50ZXJuYWwgJ3ZpZXdzJyBidWlsZGVyIHdpdGggYSBmdW5jdGlvbiB0aGF0IHRha2VzIHRoZSBzdGF0ZVxuICAgKiAvLyBkZWZpbml0aW9uLCBhbmQgYSByZWZlcmVuY2UgdG8gdGhlIGludGVybmFsIGZ1bmN0aW9uIGJlaW5nIG92ZXJyaWRkZW46XG4gICAqICRzdGF0ZVByb3ZpZGVyLmRlY29yYXRvcigndmlld3MnLCBmdW5jdGlvbiAoc3RhdGUsIHBhcmVudCkge1xuICAgKiAgIHZhciByZXN1bHQgPSB7fSxcbiAgICogICAgICAgdmlld3MgPSBwYXJlbnQoc3RhdGUpO1xuICAgKlxuICAgKiAgIGFuZ3VsYXIuZm9yRWFjaCh2aWV3cywgZnVuY3Rpb24gKGNvbmZpZywgbmFtZSkge1xuICAgKiAgICAgdmFyIGF1dG9OYW1lID0gKHN0YXRlLm5hbWUgKyAnLicgKyBuYW1lKS5yZXBsYWNlKCcuJywgJy8nKTtcbiAgICogICAgIGNvbmZpZy50ZW1wbGF0ZVVybCA9IGNvbmZpZy50ZW1wbGF0ZVVybCB8fCAnL3BhcnRpYWxzLycgKyBhdXRvTmFtZSArICcuaHRtbCc7XG4gICAqICAgICByZXN1bHRbbmFtZV0gPSBjb25maWc7XG4gICAqICAgfSk7XG4gICAqICAgcmV0dXJuIHJlc3VsdDtcbiAgICogfSk7XG4gICAqXG4gICAqICRzdGF0ZVByb3ZpZGVyLnN0YXRlKCdob21lJywge1xuICAgKiAgIHZpZXdzOiB7XG4gICAqICAgICAnY29udGFjdC5saXN0JzogeyBjb250cm9sbGVyOiAnTGlzdENvbnRyb2xsZXInIH0sXG4gICAqICAgICAnY29udGFjdC5pdGVtJzogeyBjb250cm9sbGVyOiAnSXRlbUNvbnRyb2xsZXInIH1cbiAgICogICB9XG4gICAqIH0pO1xuICAgKlxuICAgKiAvLyAuLi5cbiAgICpcbiAgICogJHN0YXRlLmdvKCdob21lJyk7XG4gICAqIC8vIEF1dG8tcG9wdWxhdGVzIGxpc3QgYW5kIGl0ZW0gdmlld3Mgd2l0aCAvcGFydGlhbHMvaG9tZS9jb250YWN0L2xpc3QuaHRtbCxcbiAgICogLy8gYW5kIC9wYXJ0aWFscy9ob21lL2NvbnRhY3QvaXRlbS5odG1sLCByZXNwZWN0aXZlbHkuXG4gICAqIDwvcHJlPlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgYnVpbGRlciBmdW5jdGlvbiB0byBkZWNvcmF0ZS4gXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBmdW5jIEEgZnVuY3Rpb24gdGhhdCBpcyByZXNwb25zaWJsZSBmb3IgZGVjb3JhdGluZyB0aGUgb3JpZ2luYWwgXG4gICAqIGJ1aWxkZXIgZnVuY3Rpb24uIFRoZSBmdW5jdGlvbiByZWNlaXZlcyB0d28gcGFyYW1ldGVyczpcbiAgICpcbiAgICogICAtIGB7b2JqZWN0fWAgLSBzdGF0ZSAtIFRoZSBzdGF0ZSBjb25maWcgb2JqZWN0LlxuICAgKiAgIC0gYHtvYmplY3R9YCAtIHN1cGVyIC0gVGhlIG9yaWdpbmFsIGJ1aWxkZXIgZnVuY3Rpb24uXG4gICAqXG4gICAqIEByZXR1cm4ge29iamVjdH0gJHN0YXRlUHJvdmlkZXIgLSAkc3RhdGVQcm92aWRlciBpbnN0YW5jZVxuICAgKi9cbiAgdGhpcy5kZWNvcmF0b3IgPSBkZWNvcmF0b3I7XG4gIGZ1bmN0aW9uIGRlY29yYXRvcihuYW1lLCBmdW5jKSB7XG4gICAgLypqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG4gICAgaWYgKGlzU3RyaW5nKG5hbWUpICYmICFpc0RlZmluZWQoZnVuYykpIHtcbiAgICAgIHJldHVybiBzdGF0ZUJ1aWxkZXJbbmFtZV07XG4gICAgfVxuICAgIGlmICghaXNGdW5jdGlvbihmdW5jKSB8fCAhaXNTdHJpbmcobmFtZSkpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBpZiAoc3RhdGVCdWlsZGVyW25hbWVdICYmICFzdGF0ZUJ1aWxkZXIuJGRlbGVnYXRlc1tuYW1lXSkge1xuICAgICAgc3RhdGVCdWlsZGVyLiRkZWxlZ2F0ZXNbbmFtZV0gPSBzdGF0ZUJ1aWxkZXJbbmFtZV07XG4gICAgfVxuICAgIHN0YXRlQnVpbGRlcltuYW1lXSA9IGZ1bmM7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVQcm92aWRlciNzdGF0ZVxuICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVByb3ZpZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZWdpc3RlcnMgYSBzdGF0ZSBjb25maWd1cmF0aW9uIHVuZGVyIGEgZ2l2ZW4gc3RhdGUgbmFtZS4gVGhlIHN0YXRlQ29uZmlnIG9iamVjdFxuICAgKiBoYXMgdGhlIGZvbGxvd2luZyBhY2NlcHRhYmxlIHByb3BlcnRpZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEEgdW5pcXVlIHN0YXRlIG5hbWUsIGUuZy4gXCJob21lXCIsIFwiYWJvdXRcIiwgXCJjb250YWN0c1wiLlxuICAgKiBUbyBjcmVhdGUgYSBwYXJlbnQvY2hpbGQgc3RhdGUgdXNlIGEgZG90LCBlLmcuIFwiYWJvdXQuc2FsZXNcIiwgXCJob21lLm5ld2VzdFwiLlxuICAgKiBAcGFyYW0ge29iamVjdH0gc3RhdGVDb25maWcgU3RhdGUgY29uZmlndXJhdGlvbiBvYmplY3QuXG4gICAqIEBwYXJhbSB7c3RyaW5nfGZ1bmN0aW9uPX0gc3RhdGVDb25maWcudGVtcGxhdGVcbiAgICogPGEgaWQ9J3RlbXBsYXRlJz48L2E+XG4gICAqICAgaHRtbCB0ZW1wbGF0ZSBhcyBhIHN0cmluZyBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJuc1xuICAgKiAgIGFuIGh0bWwgdGVtcGxhdGUgYXMgYSBzdHJpbmcgd2hpY2ggc2hvdWxkIGJlIHVzZWQgYnkgdGhlIHVpVmlldyBkaXJlY3RpdmVzLiBUaGlzIHByb3BlcnR5IFxuICAgKiAgIHRha2VzIHByZWNlZGVuY2Ugb3ZlciB0ZW1wbGF0ZVVybC5cbiAgICogICBcbiAgICogICBJZiBgdGVtcGxhdGVgIGlzIGEgZnVuY3Rpb24sIGl0IHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICAgKlxuICAgKiAgIC0ge2FycmF5LiZsdDtvYmplY3QmZ3Q7fSAtIHN0YXRlIHBhcmFtZXRlcnMgZXh0cmFjdGVkIGZyb20gdGhlIGN1cnJlbnQgJGxvY2F0aW9uLnBhdGgoKSBieVxuICAgKiAgICAgYXBwbHlpbmcgdGhlIGN1cnJlbnQgc3RhdGVcbiAgICpcbiAgICogPHByZT50ZW1wbGF0ZTpcbiAgICogICBcIjxoMT5pbmxpbmUgdGVtcGxhdGUgZGVmaW5pdGlvbjwvaDE+XCIgK1xuICAgKiAgIFwiPGRpdiB1aS12aWV3PjwvZGl2PlwiPC9wcmU+XG4gICAqIDxwcmU+dGVtcGxhdGU6IGZ1bmN0aW9uKHBhcmFtcykge1xuICAgKiAgICAgICByZXR1cm4gXCI8aDE+Z2VuZXJhdGVkIHRlbXBsYXRlPC9oMT5cIjsgfTwvcHJlPlxuICAgKiA8L2Rpdj5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8ZnVuY3Rpb249fSBzdGF0ZUNvbmZpZy50ZW1wbGF0ZVVybFxuICAgKiA8YSBpZD0ndGVtcGxhdGVVcmwnPjwvYT5cbiAgICpcbiAgICogICBwYXRoIG9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHBhdGggdG8gYW4gaHRtbFxuICAgKiAgIHRlbXBsYXRlIHRoYXQgc2hvdWxkIGJlIHVzZWQgYnkgdWlWaWV3LlxuICAgKiAgIFxuICAgKiAgIElmIGB0ZW1wbGF0ZVVybGAgaXMgYSBmdW5jdGlvbiwgaXQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gICAqXG4gICAqICAgLSB7YXJyYXkuJmx0O29iamVjdCZndDt9IC0gc3RhdGUgcGFyYW1ldGVycyBleHRyYWN0ZWQgZnJvbSB0aGUgY3VycmVudCAkbG9jYXRpb24ucGF0aCgpIGJ5IFxuICAgKiAgICAgYXBwbHlpbmcgdGhlIGN1cnJlbnQgc3RhdGVcbiAgICpcbiAgICogPHByZT50ZW1wbGF0ZVVybDogXCJob21lLmh0bWxcIjwvcHJlPlxuICAgKiA8cHJlPnRlbXBsYXRlVXJsOiBmdW5jdGlvbihwYXJhbXMpIHtcbiAgICogICAgIHJldHVybiBteVRlbXBsYXRlc1twYXJhbXMucGFnZUlkXTsgfTwvcHJlPlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uPX0gc3RhdGVDb25maWcudGVtcGxhdGVQcm92aWRlclxuICAgKiA8YSBpZD0ndGVtcGxhdGVQcm92aWRlcic+PC9hPlxuICAgKiAgICBQcm92aWRlciBmdW5jdGlvbiB0aGF0IHJldHVybnMgSFRNTCBjb250ZW50IHN0cmluZy5cbiAgICogPHByZT4gdGVtcGxhdGVQcm92aWRlcjpcbiAgICogICAgICAgZnVuY3Rpb24oTXlUZW1wbGF0ZVNlcnZpY2UsIHBhcmFtcykge1xuICAgKiAgICAgICAgIHJldHVybiBNeVRlbXBsYXRlU2VydmljZS5nZXRUZW1wbGF0ZShwYXJhbXMucGFnZUlkKTtcbiAgICogICAgICAgfTwvcHJlPlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xmdW5jdGlvbj19IHN0YXRlQ29uZmlnLmNvbnRyb2xsZXJcbiAgICogPGEgaWQ9J2NvbnRyb2xsZXInPjwvYT5cbiAgICpcbiAgICogIENvbnRyb2xsZXIgZm4gdGhhdCBzaG91bGQgYmUgYXNzb2NpYXRlZCB3aXRoIG5ld2x5XG4gICAqICAgcmVsYXRlZCBzY29wZSBvciB0aGUgbmFtZSBvZiBhIHJlZ2lzdGVyZWQgY29udHJvbGxlciBpZiBwYXNzZWQgYXMgYSBzdHJpbmcuXG4gICAqICAgT3B0aW9uYWxseSwgdGhlIENvbnRyb2xsZXJBcyBtYXkgYmUgZGVjbGFyZWQgaGVyZS5cbiAgICogPHByZT5jb250cm9sbGVyOiBcIk15UmVnaXN0ZXJlZENvbnRyb2xsZXJcIjwvcHJlPlxuICAgKiA8cHJlPmNvbnRyb2xsZXI6XG4gICAqICAgICBcIk15UmVnaXN0ZXJlZENvbnRyb2xsZXIgYXMgZm9vQ3RybFwifTwvcHJlPlxuICAgKiA8cHJlPmNvbnRyb2xsZXI6IGZ1bmN0aW9uKCRzY29wZSwgTXlTZXJ2aWNlKSB7XG4gICAqICAgICAkc2NvcGUuZGF0YSA9IE15U2VydmljZS5nZXREYXRhKCk7IH08L3ByZT5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbj19IHN0YXRlQ29uZmlnLmNvbnRyb2xsZXJQcm92aWRlclxuICAgKiA8YSBpZD0nY29udHJvbGxlclByb3ZpZGVyJz48L2E+XG4gICAqXG4gICAqIEluamVjdGFibGUgcHJvdmlkZXIgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBhY3R1YWwgY29udHJvbGxlciBvciBzdHJpbmcuXG4gICAqIDxwcmU+Y29udHJvbGxlclByb3ZpZGVyOlxuICAgKiAgIGZ1bmN0aW9uKE15UmVzb2x2ZURhdGEpIHtcbiAgICogICAgIGlmIChNeVJlc29sdmVEYXRhLmZvbylcbiAgICogICAgICAgcmV0dXJuIFwiRm9vQ3RybFwiXG4gICAqICAgICBlbHNlIGlmIChNeVJlc29sdmVEYXRhLmJhcilcbiAgICogICAgICAgcmV0dXJuIFwiQmFyQ3RybFwiO1xuICAgKiAgICAgZWxzZSByZXR1cm4gZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAqICAgICAgICRzY29wZS5iYXogPSBcIlF1eFwiO1xuICAgKiAgICAgfVxuICAgKiAgIH08L3ByZT5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBzdGF0ZUNvbmZpZy5jb250cm9sbGVyQXNcbiAgICogPGEgaWQ9J2NvbnRyb2xsZXJBcyc+PC9hPlxuICAgKiBcbiAgICogQSBjb250cm9sbGVyIGFsaWFzIG5hbWUuIElmIHByZXNlbnQgdGhlIGNvbnRyb2xsZXIgd2lsbCBiZVxuICAgKiAgIHB1Ymxpc2hlZCB0byBzY29wZSB1bmRlciB0aGUgY29udHJvbGxlckFzIG5hbWUuXG4gICAqIDxwcmU+Y29udHJvbGxlckFzOiBcIm15Q3RybFwiPC9wcmU+XG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0PX0gc3RhdGVDb25maWcucmVzb2x2ZVxuICAgKiA8YSBpZD0ncmVzb2x2ZSc+PC9hPlxuICAgKlxuICAgKiBBbiBvcHRpb25hbCBtYXAmbHQ7c3RyaW5nLCBmdW5jdGlvbiZndDsgb2YgZGVwZW5kZW5jaWVzIHdoaWNoXG4gICAqICAgc2hvdWxkIGJlIGluamVjdGVkIGludG8gdGhlIGNvbnRyb2xsZXIuIElmIGFueSBvZiB0aGVzZSBkZXBlbmRlbmNpZXMgYXJlIHByb21pc2VzLCBcbiAgICogICB0aGUgcm91dGVyIHdpbGwgd2FpdCBmb3IgdGhlbSBhbGwgdG8gYmUgcmVzb2x2ZWQgYmVmb3JlIHRoZSBjb250cm9sbGVyIGlzIGluc3RhbnRpYXRlZC5cbiAgICogICBJZiBhbGwgdGhlIHByb21pc2VzIGFyZSByZXNvbHZlZCBzdWNjZXNzZnVsbHksIHRoZSAkc3RhdGVDaGFuZ2VTdWNjZXNzIGV2ZW50IGlzIGZpcmVkXG4gICAqICAgYW5kIHRoZSB2YWx1ZXMgb2YgdGhlIHJlc29sdmVkIHByb21pc2VzIGFyZSBpbmplY3RlZCBpbnRvIGFueSBjb250cm9sbGVycyB0aGF0IHJlZmVyZW5jZSB0aGVtLlxuICAgKiAgIElmIGFueSAgb2YgdGhlIHByb21pc2VzIGFyZSByZWplY3RlZCB0aGUgJHN0YXRlQ2hhbmdlRXJyb3IgZXZlbnQgaXMgZmlyZWQuXG4gICAqXG4gICAqICAgVGhlIG1hcCBvYmplY3QgaXM6XG4gICAqICAgXG4gICAqICAgLSBrZXkgLSB7c3RyaW5nfTogbmFtZSBvZiBkZXBlbmRlbmN5IHRvIGJlIGluamVjdGVkIGludG8gY29udHJvbGxlclxuICAgKiAgIC0gZmFjdG9yeSAtIHtzdHJpbmd8ZnVuY3Rpb259OiBJZiBzdHJpbmcgdGhlbiBpdCBpcyBhbGlhcyBmb3Igc2VydmljZS4gT3RoZXJ3aXNlIGlmIGZ1bmN0aW9uLCBcbiAgICogICAgIGl0IGlzIGluamVjdGVkIGFuZCByZXR1cm4gdmFsdWUgaXQgdHJlYXRlZCBhcyBkZXBlbmRlbmN5LiBJZiByZXN1bHQgaXMgYSBwcm9taXNlLCBpdCBpcyBcbiAgICogICAgIHJlc29sdmVkIGJlZm9yZSBpdHMgdmFsdWUgaXMgaW5qZWN0ZWQgaW50byBjb250cm9sbGVyLlxuICAgKlxuICAgKiA8cHJlPnJlc29sdmU6IHtcbiAgICogICAgIG15UmVzb2x2ZTE6XG4gICAqICAgICAgIGZ1bmN0aW9uKCRodHRwLCAkc3RhdGVQYXJhbXMpIHtcbiAgICogICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KFwiL2FwaS9mb29zL1wiK3N0YXRlUGFyYW1zLmZvb0lEKTtcbiAgICogICAgICAgfVxuICAgKiAgICAgfTwvcHJlPlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHN0YXRlQ29uZmlnLnVybFxuICAgKiA8YSBpZD0ndXJsJz48L2E+XG4gICAqXG4gICAqICAgQSB1cmwgZnJhZ21lbnQgd2l0aCBvcHRpb25hbCBwYXJhbWV0ZXJzLiBXaGVuIGEgc3RhdGUgaXMgbmF2aWdhdGVkIG9yXG4gICAqICAgdHJhbnNpdGlvbmVkIHRvLCB0aGUgYCRzdGF0ZVBhcmFtc2Agc2VydmljZSB3aWxsIGJlIHBvcHVsYXRlZCB3aXRoIGFueSBcbiAgICogICBwYXJhbWV0ZXJzIHRoYXQgd2VyZSBwYXNzZWQuXG4gICAqXG4gICAqIGV4YW1wbGVzOlxuICAgKiA8cHJlPnVybDogXCIvaG9tZVwiXG4gICAqIHVybDogXCIvdXNlcnMvOnVzZXJpZFwiXG4gICAqIHVybDogXCIvYm9va3Mve2Jvb2tpZDpbYS16QS1aXy1dfVwiXG4gICAqIHVybDogXCIvYm9va3Mve2NhdGVnb3J5aWQ6aW50fVwiXG4gICAqIHVybDogXCIvYm9va3Mve3B1Ymxpc2hlcm5hbWU6c3RyaW5nfS97Y2F0ZWdvcnlpZDppbnR9XCJcbiAgICogdXJsOiBcIi9tZXNzYWdlcz9iZWZvcmUmYWZ0ZXJcIlxuICAgKiB1cmw6IFwiL21lc3NhZ2VzP3tiZWZvcmU6ZGF0ZX0me2FmdGVyOmRhdGV9XCI8L3ByZT5cbiAgICogdXJsOiBcIi9tZXNzYWdlcy86bWFpbGJveGlkP3tiZWZvcmU6ZGF0ZX0me2FmdGVyOmRhdGV9XCJcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3Q9fSBzdGF0ZUNvbmZpZy52aWV3c1xuICAgKiA8YSBpZD0ndmlld3MnPjwvYT5cbiAgICogYW4gb3B0aW9uYWwgbWFwJmx0O3N0cmluZywgb2JqZWN0Jmd0OyB3aGljaCBkZWZpbmVkIG11bHRpcGxlIHZpZXdzLCBvciB0YXJnZXRzIHZpZXdzXG4gICAqIG1hbnVhbGx5L2V4cGxpY2l0bHkuXG4gICAqXG4gICAqIEV4YW1wbGVzOlxuICAgKlxuICAgKiBUYXJnZXRzIHRocmVlIG5hbWVkIGB1aS12aWV3YHMgaW4gdGhlIHBhcmVudCBzdGF0ZSdzIHRlbXBsYXRlXG4gICAqIDxwcmU+dmlld3M6IHtcbiAgICogICAgIGhlYWRlcjoge1xuICAgKiAgICAgICBjb250cm9sbGVyOiBcImhlYWRlckN0cmxcIixcbiAgICogICAgICAgdGVtcGxhdGVVcmw6IFwiaGVhZGVyLmh0bWxcIlxuICAgKiAgICAgfSwgYm9keToge1xuICAgKiAgICAgICBjb250cm9sbGVyOiBcImJvZHlDdHJsXCIsXG4gICAqICAgICAgIHRlbXBsYXRlVXJsOiBcImJvZHkuaHRtbFwiXG4gICAqICAgICB9LCBmb290ZXI6IHtcbiAgICogICAgICAgY29udHJvbGxlcjogXCJmb290Q3RybFwiLFxuICAgKiAgICAgICB0ZW1wbGF0ZVVybDogXCJmb290ZXIuaHRtbFwiXG4gICAqICAgICB9XG4gICAqICAgfTwvcHJlPlxuICAgKlxuICAgKiBUYXJnZXRzIG5hbWVkIGB1aS12aWV3PVwiaGVhZGVyXCJgIGZyb20gZ3JhbmRwYXJlbnQgc3RhdGUgJ3RvcCcncyB0ZW1wbGF0ZSwgYW5kIG5hbWVkIGB1aS12aWV3PVwiYm9keVwiIGZyb20gcGFyZW50IHN0YXRlJ3MgdGVtcGxhdGUuXG4gICAqIDxwcmU+dmlld3M6IHtcbiAgICogICAgICdoZWFkZXJAdG9wJzoge1xuICAgKiAgICAgICBjb250cm9sbGVyOiBcIm1zZ0hlYWRlckN0cmxcIixcbiAgICogICAgICAgdGVtcGxhdGVVcmw6IFwibXNnSGVhZGVyLmh0bWxcIlxuICAgKiAgICAgfSwgJ2JvZHknOiB7XG4gICAqICAgICAgIGNvbnRyb2xsZXI6IFwibWVzc2FnZXNDdHJsXCIsXG4gICAqICAgICAgIHRlbXBsYXRlVXJsOiBcIm1lc3NhZ2VzLmh0bWxcIlxuICAgKiAgICAgfVxuICAgKiAgIH08L3ByZT5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFuPX0gW3N0YXRlQ29uZmlnLmFic3RyYWN0PWZhbHNlXVxuICAgKiA8YSBpZD0nYWJzdHJhY3QnPjwvYT5cbiAgICogQW4gYWJzdHJhY3Qgc3RhdGUgd2lsbCBuZXZlciBiZSBkaXJlY3RseSBhY3RpdmF0ZWQsXG4gICAqICAgYnV0IGNhbiBwcm92aWRlIGluaGVyaXRlZCBwcm9wZXJ0aWVzIHRvIGl0cyBjb21tb24gY2hpbGRyZW4gc3RhdGVzLlxuICAgKiA8cHJlPmFic3RyYWN0OiB0cnVlPC9wcmU+XG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb249fSBzdGF0ZUNvbmZpZy5vbkVudGVyXG4gICAqIDxhIGlkPSdvbkVudGVyJz48L2E+XG4gICAqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIGZvciB3aGVuIGEgc3RhdGUgaXMgZW50ZXJlZC4gR29vZCB3YXlcbiAgICogICB0byB0cmlnZ2VyIGFuIGFjdGlvbiBvciBkaXNwYXRjaCBhbiBldmVudCwgc3VjaCBhcyBvcGVuaW5nIGEgZGlhbG9nLlxuICAgKiBJZiBtaW5pZnlpbmcgeW91ciBzY3JpcHRzLCBtYWtlIHN1cmUgdG8gZXhwbGljdGx5IGFubm90YXRlIHRoaXMgZnVuY3Rpb24sXG4gICAqIGJlY2F1c2UgaXQgd29uJ3QgYmUgYXV0b21hdGljYWxseSBhbm5vdGF0ZWQgYnkgeW91ciBidWlsZCB0b29scy5cbiAgICpcbiAgICogPHByZT5vbkVudGVyOiBmdW5jdGlvbihNeVNlcnZpY2UsICRzdGF0ZVBhcmFtcykge1xuICAgKiAgICAgTXlTZXJ2aWNlLmZvbygkc3RhdGVQYXJhbXMubXlQYXJhbSk7XG4gICAqIH08L3ByZT5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbj19IHN0YXRlQ29uZmlnLm9uRXhpdFxuICAgKiA8YSBpZD0nb25FeGl0Jz48L2E+XG4gICAqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIGZvciB3aGVuIGEgc3RhdGUgaXMgZXhpdGVkLiBHb29kIHdheSB0b1xuICAgKiAgIHRyaWdnZXIgYW4gYWN0aW9uIG9yIGRpc3BhdGNoIGFuIGV2ZW50LCBzdWNoIGFzIG9wZW5pbmcgYSBkaWFsb2cuXG4gICAqIElmIG1pbmlmeWluZyB5b3VyIHNjcmlwdHMsIG1ha2Ugc3VyZSB0byBleHBsaWN0bHkgYW5ub3RhdGUgdGhpcyBmdW5jdGlvbixcbiAgICogYmVjYXVzZSBpdCB3b24ndCBiZSBhdXRvbWF0aWNhbGx5IGFubm90YXRlZCBieSB5b3VyIGJ1aWxkIHRvb2xzLlxuICAgKlxuICAgKiA8cHJlPm9uRXhpdDogZnVuY3Rpb24oTXlTZXJ2aWNlLCAkc3RhdGVQYXJhbXMpIHtcbiAgICogICAgIE15U2VydmljZS5jbGVhbnVwKCRzdGF0ZVBhcmFtcy5teVBhcmFtKTtcbiAgICogfTwvcHJlPlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBbc3RhdGVDb25maWcucmVsb2FkT25TZWFyY2g9dHJ1ZV1cbiAgICogPGEgaWQ9J3JlbG9hZE9uU2VhcmNoJz48L2E+XG4gICAqXG4gICAqIElmIGBmYWxzZWAsIHdpbGwgbm90IHJldHJpZ2dlciB0aGUgc2FtZSBzdGF0ZVxuICAgKiAgIGp1c3QgYmVjYXVzZSBhIHNlYXJjaC9xdWVyeSBwYXJhbWV0ZXIgaGFzIGNoYW5nZWQgKHZpYSAkbG9jYXRpb24uc2VhcmNoKCkgb3IgJGxvY2F0aW9uLmhhc2goKSkuIFxuICAgKiAgIFVzZWZ1bCBmb3Igd2hlbiB5b3UnZCBsaWtlIHRvIG1vZGlmeSAkbG9jYXRpb24uc2VhcmNoKCkgd2l0aG91dCB0cmlnZ2VyaW5nIGEgcmVsb2FkLlxuICAgKiA8cHJlPnJlbG9hZE9uU2VhcmNoOiBmYWxzZTwvcHJlPlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdD19IHN0YXRlQ29uZmlnLmRhdGFcbiAgICogPGEgaWQ9J2RhdGEnPjwvYT5cbiAgICpcbiAgICogQXJiaXRyYXJ5IGRhdGEgb2JqZWN0LCB1c2VmdWwgZm9yIGN1c3RvbSBjb25maWd1cmF0aW9uLiAgVGhlIHBhcmVudCBzdGF0ZSdzIGBkYXRhYCBpc1xuICAgKiAgIHByb3RvdHlwYWxseSBpbmhlcml0ZWQuICBJbiBvdGhlciB3b3JkcywgYWRkaW5nIGEgZGF0YSBwcm9wZXJ0eSB0byBhIHN0YXRlIGFkZHMgaXQgdG9cbiAgICogICB0aGUgZW50aXJlIHN1YnRyZWUgdmlhIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UuXG4gICAqXG4gICAqIDxwcmU+ZGF0YToge1xuICAgKiAgICAgcmVxdWlyZWRSb2xlOiAnZm9vJ1xuICAgKiB9IDwvcHJlPlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdD19IHN0YXRlQ29uZmlnLnBhcmFtc1xuICAgKiA8YSBpZD0ncGFyYW1zJz48L2E+XG4gICAqXG4gICAqIEEgbWFwIHdoaWNoIG9wdGlvbmFsbHkgY29uZmlndXJlcyBwYXJhbWV0ZXJzIGRlY2xhcmVkIGluIHRoZSBgdXJsYCwgb3JcbiAgICogICBkZWZpbmVzIGFkZGl0aW9uYWwgbm9uLXVybCBwYXJhbWV0ZXJzLiAgRm9yIGVhY2ggcGFyYW1ldGVyIGJlaW5nXG4gICAqICAgY29uZmlndXJlZCwgYWRkIGEgY29uZmlndXJhdGlvbiBvYmplY3Qga2V5ZWQgdG8gdGhlIG5hbWUgb2YgdGhlIHBhcmFtZXRlci5cbiAgICpcbiAgICogICBFYWNoIHBhcmFtZXRlciBjb25maWd1cmF0aW9uIG9iamVjdCBtYXkgY29udGFpbiB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAqXG4gICAqICAgLSAqKiB2YWx1ZSAqKiAtIHtvYmplY3R8ZnVuY3Rpb249fTogc3BlY2lmaWVzIHRoZSBkZWZhdWx0IHZhbHVlIGZvciB0aGlzXG4gICAqICAgICBwYXJhbWV0ZXIuICBUaGlzIGltcGxpY2l0bHkgc2V0cyB0aGlzIHBhcmFtZXRlciBhcyBvcHRpb25hbC5cbiAgICpcbiAgICogICAgIFdoZW4gVUktUm91dGVyIHJvdXRlcyB0byBhIHN0YXRlIGFuZCBubyB2YWx1ZSBpc1xuICAgKiAgICAgc3BlY2lmaWVkIGZvciB0aGlzIHBhcmFtZXRlciBpbiB0aGUgVVJMIG9yIHRyYW5zaXRpb24sIHRoZVxuICAgKiAgICAgZGVmYXVsdCB2YWx1ZSB3aWxsIGJlIHVzZWQgaW5zdGVhZC4gIElmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbixcbiAgICogICAgIGl0IHdpbGwgYmUgaW5qZWN0ZWQgYW5kIGludm9rZWQsIGFuZCB0aGUgcmV0dXJuIHZhbHVlIHVzZWQuXG4gICAqXG4gICAqICAgICAqTm90ZSo6IGB1bmRlZmluZWRgIGlzIHRyZWF0ZWQgYXMgXCJubyBkZWZhdWx0IHZhbHVlXCIgd2hpbGUgYG51bGxgXG4gICAqICAgICBpcyB0cmVhdGVkIGFzIFwidGhlIGRlZmF1bHQgdmFsdWUgaXMgYG51bGxgXCIuXG4gICAqXG4gICAqICAgICAqU2hvcnRoYW5kKjogSWYgeW91IG9ubHkgbmVlZCB0byBjb25maWd1cmUgdGhlIGRlZmF1bHQgdmFsdWUgb2YgdGhlXG4gICAqICAgICBwYXJhbWV0ZXIsIHlvdSBtYXkgdXNlIGEgc2hvcnRoYW5kIHN5bnRheC4gICBJbiB0aGUgKipgcGFyYW1zYCoqXG4gICAqICAgICBtYXAsIGluc3RlYWQgbWFwcGluZyB0aGUgcGFyYW0gbmFtZSB0byBhIGZ1bGwgcGFyYW1ldGVyIGNvbmZpZ3VyYXRpb25cbiAgICogICAgIG9iamVjdCwgc2ltcGx5IHNldCBtYXAgaXQgdG8gdGhlIGRlZmF1bHQgcGFyYW1ldGVyIHZhbHVlLCBlLmcuOlxuICAgKlxuICAgKiA8cHJlPi8vIGRlZmluZSBhIHBhcmFtZXRlcidzIGRlZmF1bHQgdmFsdWVcbiAgICogcGFyYW1zOiB7XG4gICAqICAgICBwYXJhbTE6IHsgdmFsdWU6IFwiZGVmYXVsdFZhbHVlXCIgfVxuICAgKiB9XG4gICAqIC8vIHNob3J0aGFuZCBkZWZhdWx0IHZhbHVlc1xuICAgKiBwYXJhbXM6IHtcbiAgICogICAgIHBhcmFtMTogXCJkZWZhdWx0VmFsdWVcIixcbiAgICogICAgIHBhcmFtMjogXCJwYXJhbTJEZWZhdWx0XCJcbiAgICogfTwvcHJlPlxuICAgKlxuICAgKiAgIC0gKiogYXJyYXkgKiogLSB7Ym9vbGVhbj19OiAqKGRlZmF1bHQ6IGZhbHNlKSogSWYgdHJ1ZSwgdGhlIHBhcmFtIHZhbHVlIHdpbGwgYmVcbiAgICogICAgIHRyZWF0ZWQgYXMgYW4gYXJyYXkgb2YgdmFsdWVzLiAgSWYgeW91IHNwZWNpZmllZCBhIFR5cGUsIHRoZSB2YWx1ZSB3aWxsIGJlXG4gICAqICAgICB0cmVhdGVkIGFzIGFuIGFycmF5IG9mIHRoZSBzcGVjaWZpZWQgVHlwZS4gIE5vdGU6IHF1ZXJ5IHBhcmFtZXRlciB2YWx1ZXNcbiAgICogICAgIGRlZmF1bHQgdG8gYSBzcGVjaWFsIGBcImF1dG9cImAgbW9kZS5cbiAgICpcbiAgICogICAgIEZvciBxdWVyeSBwYXJhbWV0ZXJzIGluIGBcImF1dG9cImAgbW9kZSwgaWYgbXVsdGlwbGUgIHZhbHVlcyBmb3IgYSBzaW5nbGUgcGFyYW1ldGVyXG4gICAqICAgICBhcmUgcHJlc2VudCBpbiB0aGUgVVJMIChlLmcuOiBgL2Zvbz9iYXI9MSZiYXI9MiZiYXI9M2ApIHRoZW4gdGhlIHZhbHVlc1xuICAgKiAgICAgYXJlIG1hcHBlZCB0byBhbiBhcnJheSAoZS5nLjogYHsgZm9vOiBbICcxJywgJzInLCAnMycgXSB9YCkuICBIb3dldmVyLCBpZlxuICAgKiAgICAgb25seSBvbmUgdmFsdWUgaXMgcHJlc2VudCAoZS5nLjogYC9mb28/YmFyPTFgKSB0aGVuIHRoZSB2YWx1ZSBpcyB0cmVhdGVkIGFzIHNpbmdsZVxuICAgKiAgICAgdmFsdWUgKGUuZy46IGB7IGZvbzogJzEnIH1gKS5cbiAgICpcbiAgICogPHByZT5wYXJhbXM6IHtcbiAgICogICAgIHBhcmFtMTogeyBhcnJheTogdHJ1ZSB9XG4gICAqIH08L3ByZT5cbiAgICpcbiAgICogICAtICoqIHNxdWFzaCAqKiAtIHtib29sfHN0cmluZz19OiBgc3F1YXNoYCBjb25maWd1cmVzIGhvdyBhIGRlZmF1bHQgcGFyYW1ldGVyIHZhbHVlIGlzIHJlcHJlc2VudGVkIGluIHRoZSBVUkwgd2hlblxuICAgKiAgICAgdGhlIGN1cnJlbnQgcGFyYW1ldGVyIHZhbHVlIGlzIHRoZSBzYW1lIGFzIHRoZSBkZWZhdWx0IHZhbHVlLiBJZiBgc3F1YXNoYCBpcyBub3Qgc2V0LCBpdCB1c2VzIHRoZVxuICAgKiAgICAgY29uZmlndXJlZCBkZWZhdWx0IHNxdWFzaCBwb2xpY3kuXG4gICAqICAgICAoU2VlIHtAbGluayB1aS5yb3V0ZXIudXRpbC4kdXJsTWF0Y2hlckZhY3RvcnkjbWV0aG9kc19kZWZhdWx0U3F1YXNoUG9saWN5IGBkZWZhdWx0U3F1YXNoUG9saWN5KClgfSlcbiAgICpcbiAgICogICBUaGVyZSBhcmUgdGhyZWUgc3F1YXNoIHNldHRpbmdzOlxuICAgKlxuICAgKiAgICAgLSBmYWxzZTogVGhlIHBhcmFtZXRlcidzIGRlZmF1bHQgdmFsdWUgaXMgbm90IHNxdWFzaGVkLiAgSXQgaXMgZW5jb2RlZCBhbmQgaW5jbHVkZWQgaW4gdGhlIFVSTFxuICAgKiAgICAgLSB0cnVlOiBUaGUgcGFyYW1ldGVyJ3MgZGVmYXVsdCB2YWx1ZSBpcyBvbWl0dGVkIGZyb20gdGhlIFVSTC4gIElmIHRoZSBwYXJhbWV0ZXIgaXMgcHJlY2VlZGVkIGFuZCBmb2xsb3dlZFxuICAgKiAgICAgICBieSBzbGFzaGVzIGluIHRoZSBzdGF0ZSdzIGB1cmxgIGRlY2xhcmF0aW9uLCB0aGVuIG9uZSBvZiB0aG9zZSBzbGFzaGVzIGFyZSBvbWl0dGVkLlxuICAgKiAgICAgICBUaGlzIGNhbiBhbGxvdyBmb3IgY2xlYW5lciBsb29raW5nIFVSTHMuXG4gICAqICAgICAtIGBcIjxhcmJpdHJhcnkgc3RyaW5nPlwiYDogVGhlIHBhcmFtZXRlcidzIGRlZmF1bHQgdmFsdWUgaXMgcmVwbGFjZWQgd2l0aCBhbiBhcmJpdHJhcnkgcGxhY2Vob2xkZXIgb2YgIHlvdXIgY2hvaWNlLlxuICAgKlxuICAgKiA8cHJlPnBhcmFtczoge1xuICAgKiAgICAgcGFyYW0xOiB7XG4gICAqICAgICAgIHZhbHVlOiBcImRlZmF1bHRJZFwiLFxuICAgKiAgICAgICBzcXVhc2g6IHRydWVcbiAgICogfSB9XG4gICAqIC8vIHNxdWFzaCBcImRlZmF1bHRWYWx1ZVwiIHRvIFwiflwiXG4gICAqIHBhcmFtczoge1xuICAgKiAgICAgcGFyYW0xOiB7XG4gICAqICAgICAgIHZhbHVlOiBcImRlZmF1bHRWYWx1ZVwiLFxuICAgKiAgICAgICBzcXVhc2g6IFwiflwiXG4gICAqIH0gfVxuICAgKiA8L3ByZT5cbiAgICpcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogPHByZT5cbiAgICogLy8gU29tZSBzdGF0ZSBuYW1lIGV4YW1wbGVzXG4gICAqXG4gICAqIC8vIHN0YXRlTmFtZSBjYW4gYmUgYSBzaW5nbGUgdG9wLWxldmVsIG5hbWUgKG11c3QgYmUgdW5pcXVlKS5cbiAgICogJHN0YXRlUHJvdmlkZXIuc3RhdGUoXCJob21lXCIsIHt9KTtcbiAgICpcbiAgICogLy8gT3IgaXQgY2FuIGJlIGEgbmVzdGVkIHN0YXRlIG5hbWUuIFRoaXMgc3RhdGUgaXMgYSBjaGlsZCBvZiB0aGVcbiAgICogLy8gYWJvdmUgXCJob21lXCIgc3RhdGUuXG4gICAqICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwiaG9tZS5uZXdlc3RcIiwge30pO1xuICAgKlxuICAgKiAvLyBOZXN0IHN0YXRlcyBhcyBkZWVwbHkgYXMgbmVlZGVkLlxuICAgKiAkc3RhdGVQcm92aWRlci5zdGF0ZShcImhvbWUubmV3ZXN0LmFiYy54eXouaW5jZXB0aW9uXCIsIHt9KTtcbiAgICpcbiAgICogLy8gc3RhdGUoKSByZXR1cm5zICRzdGF0ZVByb3ZpZGVyLCBzbyB5b3UgY2FuIGNoYWluIHN0YXRlIGRlY2xhcmF0aW9ucy5cbiAgICogJHN0YXRlUHJvdmlkZXJcbiAgICogICAuc3RhdGUoXCJob21lXCIsIHt9KVxuICAgKiAgIC5zdGF0ZShcImFib3V0XCIsIHt9KVxuICAgKiAgIC5zdGF0ZShcImNvbnRhY3RzXCIsIHt9KTtcbiAgICogPC9wcmU+XG4gICAqXG4gICAqL1xuICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gIGZ1bmN0aW9uIHN0YXRlKG5hbWUsIGRlZmluaXRpb24pIHtcbiAgICAvKmpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cbiAgICBpZiAoaXNPYmplY3QobmFtZSkpIGRlZmluaXRpb24gPSBuYW1lO1xuICAgIGVsc2UgZGVmaW5pdGlvbi5uYW1lID0gbmFtZTtcbiAgICByZWdpc3RlclN0YXRlKGRlZmluaXRpb24pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBvYmplY3RcbiAgICogQG5hbWUgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVxuICAgKlxuICAgKiBAcmVxdWlyZXMgJHJvb3RTY29wZVxuICAgKiBAcmVxdWlyZXMgJHFcbiAgICogQHJlcXVpcmVzIHVpLnJvdXRlci5zdGF0ZS4kdmlld1xuICAgKiBAcmVxdWlyZXMgJGluamVjdG9yXG4gICAqIEByZXF1aXJlcyB1aS5yb3V0ZXIudXRpbC4kcmVzb2x2ZVxuICAgKiBAcmVxdWlyZXMgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVBhcmFtc1xuICAgKiBAcmVxdWlyZXMgdWkucm91dGVyLnJvdXRlci4kdXJsUm91dGVyXG4gICAqXG4gICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBwYXJhbXMgQSBwYXJhbSBvYmplY3QsIGUuZy4ge3NlY3Rpb25JZDogc2VjdGlvbi5pZCl9LCB0aGF0IFxuICAgKiB5b3UnZCBsaWtlIHRvIHRlc3QgYWdhaW5zdCB0aGUgY3VycmVudCBhY3RpdmUgc3RhdGUuXG4gICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBjdXJyZW50IEEgcmVmZXJlbmNlIHRvIHRoZSBzdGF0ZSdzIGNvbmZpZyBvYmplY3QuIEhvd2V2ZXIgXG4gICAqIHlvdSBwYXNzZWQgaXQgaW4uIFVzZWZ1bCBmb3IgYWNjZXNzaW5nIGN1c3RvbSBkYXRhLlxuICAgKiBAcHJvcGVydHkge29iamVjdH0gdHJhbnNpdGlvbiBDdXJyZW50bHkgcGVuZGluZyB0cmFuc2l0aW9uLiBBIHByb21pc2UgdGhhdCdsbCBcbiAgICogcmVzb2x2ZSBvciByZWplY3QuXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBgJHN0YXRlYCBzZXJ2aWNlIGlzIHJlc3BvbnNpYmxlIGZvciByZXByZXNlbnRpbmcgc3RhdGVzIGFzIHdlbGwgYXMgdHJhbnNpdGlvbmluZ1xuICAgKiBiZXR3ZWVuIHRoZW0uIEl0IGFsc28gcHJvdmlkZXMgaW50ZXJmYWNlcyB0byBhc2sgZm9yIGN1cnJlbnQgc3RhdGUgb3IgZXZlbiBzdGF0ZXNcbiAgICogeW91J3JlIGNvbWluZyBmcm9tLlxuICAgKi9cbiAgdGhpcy4kZ2V0ID0gJGdldDtcbiAgJGdldC4kaW5qZWN0ID0gWyckcm9vdFNjb3BlJywgJyRxJywgJyR2aWV3JywgJyRpbmplY3RvcicsICckcmVzb2x2ZScsICckc3RhdGVQYXJhbXMnLCAnJHVybFJvdXRlcicsICckbG9jYXRpb24nLCAnJHVybE1hdGNoZXJGYWN0b3J5J107XG4gIGZ1bmN0aW9uICRnZXQoICAgJHJvb3RTY29wZSwgICAkcSwgICAkdmlldywgICAkaW5qZWN0b3IsICAgJHJlc29sdmUsICAgJHN0YXRlUGFyYW1zLCAgICR1cmxSb3V0ZXIsICAgJGxvY2F0aW9uLCAgICR1cmxNYXRjaGVyRmFjdG9yeSkge1xuXG4gICAgdmFyIFRyYW5zaXRpb25TdXBlcnNlZGVkID0gJHEucmVqZWN0KG5ldyBFcnJvcigndHJhbnNpdGlvbiBzdXBlcnNlZGVkJykpO1xuICAgIHZhciBUcmFuc2l0aW9uUHJldmVudGVkID0gJHEucmVqZWN0KG5ldyBFcnJvcigndHJhbnNpdGlvbiBwcmV2ZW50ZWQnKSk7XG4gICAgdmFyIFRyYW5zaXRpb25BYm9ydGVkID0gJHEucmVqZWN0KG5ldyBFcnJvcigndHJhbnNpdGlvbiBhYm9ydGVkJykpO1xuICAgIHZhciBUcmFuc2l0aW9uRmFpbGVkID0gJHEucmVqZWN0KG5ldyBFcnJvcigndHJhbnNpdGlvbiBmYWlsZWQnKSk7XG5cbiAgICAvLyBIYW5kbGVzIHRoZSBjYXNlIHdoZXJlIGEgc3RhdGUgd2hpY2ggaXMgdGhlIHRhcmdldCBvZiBhIHRyYW5zaXRpb24gaXMgbm90IGZvdW5kLCBhbmQgdGhlIHVzZXJcbiAgICAvLyBjYW4gb3B0aW9uYWxseSByZXRyeSBvciBkZWZlciB0aGUgdHJhbnNpdGlvblxuICAgIGZ1bmN0aW9uIGhhbmRsZVJlZGlyZWN0KHJlZGlyZWN0LCBzdGF0ZSwgcGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBldmVudFxuICAgICAgICogQG5hbWUgdWkucm91dGVyLnN0YXRlLiRzdGF0ZSMkc3RhdGVOb3RGb3VuZFxuICAgICAgICogQGV2ZW50T2YgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVxuICAgICAgICogQGV2ZW50VHlwZSBicm9hZGNhc3Qgb24gcm9vdCBzY29wZVxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBGaXJlZCB3aGVuIGEgcmVxdWVzdGVkIHN0YXRlICoqY2Fubm90IGJlIGZvdW5kKiogdXNpbmcgdGhlIHByb3ZpZGVkIHN0YXRlIG5hbWUgZHVyaW5nIHRyYW5zaXRpb24uXG4gICAgICAgKiBUaGUgZXZlbnQgaXMgYnJvYWRjYXN0IGFsbG93aW5nIGFueSBoYW5kbGVycyBhIHNpbmdsZSBjaGFuY2UgdG8gZGVhbCB3aXRoIHRoZSBlcnJvciAodXN1YWxseSBieVxuICAgICAgICogbGF6eS1sb2FkaW5nIHRoZSB1bmZvdW5kIHN0YXRlKS4gQSBzcGVjaWFsIGB1bmZvdW5kU3RhdGVgIG9iamVjdCBpcyBwYXNzZWQgdG8gdGhlIGxpc3RlbmVyIGhhbmRsZXIsXG4gICAgICAgKiB5b3UgY2FuIHNlZSBpdHMgdGhyZWUgcHJvcGVydGllcyBpbiB0aGUgZXhhbXBsZS4gWW91IGNhbiB1c2UgYGV2ZW50LnByZXZlbnREZWZhdWx0KClgIHRvIGFib3J0IHRoZVxuICAgICAgICogdHJhbnNpdGlvbiBhbmQgdGhlIHByb21pc2UgcmV0dXJuZWQgZnJvbSBgZ29gIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aCBhIGAndHJhbnNpdGlvbiBhYm9ydGVkJ2AgdmFsdWUuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50IEV2ZW50IG9iamVjdC5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSB1bmZvdW5kU3RhdGUgVW5mb3VuZCBTdGF0ZSBpbmZvcm1hdGlvbi4gQ29udGFpbnM6IGB0bywgdG9QYXJhbXMsIG9wdGlvbnNgIHByb3BlcnRpZXMuXG4gICAgICAgKiBAcGFyYW0ge1N0YXRlfSBmcm9tU3RhdGUgQ3VycmVudCBzdGF0ZSBvYmplY3QuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gZnJvbVBhcmFtcyBDdXJyZW50IHN0YXRlIHBhcmFtcy5cbiAgICAgICAqXG4gICAgICAgKiBAZXhhbXBsZVxuICAgICAgICpcbiAgICAgICAqIDxwcmU+XG4gICAgICAgKiAvLyBzb21ld2hlcmUsIGFzc3VtZSBsYXp5LnN0YXRlIGhhcyBub3QgYmVlbiBkZWZpbmVkXG4gICAgICAgKiAkc3RhdGUuZ28oXCJsYXp5LnN0YXRlXCIsIHthOjEsIGI6Mn0sIHtpbmhlcml0OmZhbHNlfSk7XG4gICAgICAgKlxuICAgICAgICogLy8gc29tZXdoZXJlIGVsc2VcbiAgICAgICAqICRzY29wZS4kb24oJyRzdGF0ZU5vdEZvdW5kJyxcbiAgICAgICAqIGZ1bmN0aW9uKGV2ZW50LCB1bmZvdW5kU3RhdGUsIGZyb21TdGF0ZSwgZnJvbVBhcmFtcyl7XG4gICAgICAgKiAgICAgY29uc29sZS5sb2codW5mb3VuZFN0YXRlLnRvKTsgLy8gXCJsYXp5LnN0YXRlXCJcbiAgICAgICAqICAgICBjb25zb2xlLmxvZyh1bmZvdW5kU3RhdGUudG9QYXJhbXMpOyAvLyB7YToxLCBiOjJ9XG4gICAgICAgKiAgICAgY29uc29sZS5sb2codW5mb3VuZFN0YXRlLm9wdGlvbnMpOyAvLyB7aW5oZXJpdDpmYWxzZX0gKyBkZWZhdWx0IG9wdGlvbnNcbiAgICAgICAqIH0pXG4gICAgICAgKiA8L3ByZT5cbiAgICAgICAqL1xuICAgICAgdmFyIGV2dCA9ICRyb290U2NvcGUuJGJyb2FkY2FzdCgnJHN0YXRlTm90Rm91bmQnLCByZWRpcmVjdCwgc3RhdGUsIHBhcmFtcyk7XG5cbiAgICAgIGlmIChldnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAkdXJsUm91dGVyLnVwZGF0ZSgpO1xuICAgICAgICByZXR1cm4gVHJhbnNpdGlvbkFib3J0ZWQ7XG4gICAgICB9XG5cbiAgICAgIGlmICghZXZ0LnJldHJ5KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICAvLyBBbGxvdyB0aGUgaGFuZGxlciB0byByZXR1cm4gYSBwcm9taXNlIHRvIGRlZmVyIHN0YXRlIGxvb2t1cCByZXRyeVxuICAgICAgaWYgKG9wdGlvbnMuJHJldHJ5KSB7XG4gICAgICAgICR1cmxSb3V0ZXIudXBkYXRlKCk7XG4gICAgICAgIHJldHVybiBUcmFuc2l0aW9uRmFpbGVkO1xuICAgICAgfVxuICAgICAgdmFyIHJldHJ5VHJhbnNpdGlvbiA9ICRzdGF0ZS50cmFuc2l0aW9uID0gJHEud2hlbihldnQucmV0cnkpO1xuXG4gICAgICByZXRyeVRyYW5zaXRpb24udGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHJldHJ5VHJhbnNpdGlvbiAhPT0gJHN0YXRlLnRyYW5zaXRpb24pIHJldHVybiBUcmFuc2l0aW9uU3VwZXJzZWRlZDtcbiAgICAgICAgcmVkaXJlY3Qub3B0aW9ucy4kcmV0cnkgPSB0cnVlO1xuICAgICAgICByZXR1cm4gJHN0YXRlLnRyYW5zaXRpb25UbyhyZWRpcmVjdC50bywgcmVkaXJlY3QudG9QYXJhbXMsIHJlZGlyZWN0Lm9wdGlvbnMpO1xuICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBUcmFuc2l0aW9uQWJvcnRlZDtcbiAgICAgIH0pO1xuICAgICAgJHVybFJvdXRlci51cGRhdGUoKTtcblxuICAgICAgcmV0dXJuIHJldHJ5VHJhbnNpdGlvbjtcbiAgICB9XG5cbiAgICByb290LmxvY2FscyA9IHsgcmVzb2x2ZTogbnVsbCwgZ2xvYmFsczogeyAkc3RhdGVQYXJhbXM6IHt9IH0gfTtcblxuICAgICRzdGF0ZSA9IHtcbiAgICAgIHBhcmFtczoge30sXG4gICAgICBjdXJyZW50OiByb290LnNlbGYsXG4gICAgICAkY3VycmVudDogcm9vdCxcbiAgICAgIHRyYW5zaXRpb246IG51bGxcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAgICogQG5hbWUgdWkucm91dGVyLnN0YXRlLiRzdGF0ZSNyZWxvYWRcbiAgICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQSBtZXRob2QgdGhhdCBmb3JjZSByZWxvYWRzIHRoZSBjdXJyZW50IHN0YXRlLiBBbGwgcmVzb2x2ZXMgYXJlIHJlLXJlc29sdmVkLCBldmVudHMgYXJlIG5vdCByZS1maXJlZCwgXG4gICAgICogYW5kIGNvbnRyb2xsZXJzIHJlaW5zdGFudGlhdGVkIChidWcgd2l0aCBjb250cm9sbGVycyByZWluc3RhbnRpYXRpbmcgcmlnaHQgbm93LCBmaXhpbmcgc29vbikuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIDxwcmU+XG4gICAgICogdmFyIGFwcCBhbmd1bGFyLm1vZHVsZSgnYXBwJywgWyd1aS5yb3V0ZXInXSk7XG4gICAgICpcbiAgICAgKiBhcHAuY29udHJvbGxlcignY3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsICRzdGF0ZSkge1xuICAgICAqICAgJHNjb3BlLnJlbG9hZCA9IGZ1bmN0aW9uKCl7XG4gICAgICogICAgICRzdGF0ZS5yZWxvYWQoKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9KTtcbiAgICAgKiA8L3ByZT5cbiAgICAgKlxuICAgICAqIGByZWxvYWQoKWAgaXMganVzdCBhbiBhbGlhcyBmb3I6XG4gICAgICogPHByZT5cbiAgICAgKiAkc3RhdGUudHJhbnNpdGlvblRvKCRzdGF0ZS5jdXJyZW50LCAkc3RhdGVQYXJhbXMsIHsgXG4gICAgICogICByZWxvYWQ6IHRydWUsIGluaGVyaXQ6IGZhbHNlLCBub3RpZnk6IHRydWVcbiAgICAgKiB9KTtcbiAgICAgKiA8L3ByZT5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtwcm9taXNlfSBBIHByb21pc2UgcmVwcmVzZW50aW5nIHRoZSBzdGF0ZSBvZiB0aGUgbmV3IHRyYW5zaXRpb24uIFNlZVxuICAgICAqIHtAbGluayB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlI21ldGhvZHNfZ28gJHN0YXRlLmdvfS5cbiAgICAgKi9cbiAgICAkc3RhdGUucmVsb2FkID0gZnVuY3Rpb24gcmVsb2FkKCkge1xuICAgICAgcmV0dXJuICRzdGF0ZS50cmFuc2l0aW9uVG8oJHN0YXRlLmN1cnJlbnQsICRzdGF0ZVBhcmFtcywgeyByZWxvYWQ6IHRydWUsIGluaGVyaXQ6IGZhbHNlLCBub3RpZnk6IHRydWUgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgICAqIEBuYW1lIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGUjZ29cbiAgICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQ29udmVuaWVuY2UgbWV0aG9kIGZvciB0cmFuc2l0aW9uaW5nIHRvIGEgbmV3IHN0YXRlLiBgJHN0YXRlLmdvYCBjYWxscyBcbiAgICAgKiBgJHN0YXRlLnRyYW5zaXRpb25Ub2AgaW50ZXJuYWxseSBidXQgYXV0b21hdGljYWxseSBzZXRzIG9wdGlvbnMgdG8gXG4gICAgICogYHsgbG9jYXRpb246IHRydWUsIGluaGVyaXQ6IHRydWUsIHJlbGF0aXZlOiAkc3RhdGUuJGN1cnJlbnQsIG5vdGlmeTogdHJ1ZSB9YC4gXG4gICAgICogVGhpcyBhbGxvd3MgeW91IHRvIGVhc2lseSB1c2UgYW4gYWJzb2x1dGUgb3IgcmVsYXRpdmUgdG8gcGF0aCBhbmQgc3BlY2lmeSBcbiAgICAgKiBvbmx5IHRoZSBwYXJhbWV0ZXJzIHlvdSdkIGxpa2UgdG8gdXBkYXRlICh3aGlsZSBsZXR0aW5nIHVuc3BlY2lmaWVkIHBhcmFtZXRlcnMgXG4gICAgICogaW5oZXJpdCBmcm9tIHRoZSBjdXJyZW50bHkgYWN0aXZlIGFuY2VzdG9yIHN0YXRlcykuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIDxwcmU+XG4gICAgICogdmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbJ3VpLnJvdXRlciddKTtcbiAgICAgKlxuICAgICAqIGFwcC5jb250cm9sbGVyKCdjdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgJHN0YXRlKSB7XG4gICAgICogICAkc2NvcGUuY2hhbmdlU3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICogICAgICRzdGF0ZS5nbygnY29udGFjdC5kZXRhaWwnKTtcbiAgICAgKiAgIH07XG4gICAgICogfSk7XG4gICAgICogPC9wcmU+XG4gICAgICogPGltZyBzcmM9Jy4uL25nZG9jX2Fzc2V0cy9TdGF0ZUdvRXhhbXBsZXMucG5nJy8+XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdG8gQWJzb2x1dGUgc3RhdGUgbmFtZSBvciByZWxhdGl2ZSBzdGF0ZSBwYXRoLiBTb21lIGV4YW1wbGVzOlxuICAgICAqXG4gICAgICogLSBgJHN0YXRlLmdvKCdjb250YWN0LmRldGFpbCcpYCAtIHdpbGwgZ28gdG8gdGhlIGBjb250YWN0LmRldGFpbGAgc3RhdGVcbiAgICAgKiAtIGAkc3RhdGUuZ28oJ14nKWAgLSB3aWxsIGdvIHRvIGEgcGFyZW50IHN0YXRlXG4gICAgICogLSBgJHN0YXRlLmdvKCdeLnNpYmxpbmcnKWAgLSB3aWxsIGdvIHRvIGEgc2libGluZyBzdGF0ZVxuICAgICAqIC0gYCRzdGF0ZS5nbygnLmNoaWxkLmdyYW5kY2hpbGQnKWAgLSB3aWxsIGdvIHRvIGdyYW5kY2hpbGQgc3RhdGVcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gcGFyYW1zIEEgbWFwIG9mIHRoZSBwYXJhbWV0ZXJzIHRoYXQgd2lsbCBiZSBzZW50IHRvIHRoZSBzdGF0ZSwgXG4gICAgICogd2lsbCBwb3B1bGF0ZSAkc3RhdGVQYXJhbXMuIEFueSBwYXJhbWV0ZXJzIHRoYXQgYXJlIG5vdCBzcGVjaWZpZWQgd2lsbCBiZSBpbmhlcml0ZWQgZnJvbSBjdXJyZW50bHkgXG4gICAgICogZGVmaW5lZCBwYXJhbWV0ZXJzLiBUaGlzIGFsbG93cywgZm9yIGV4YW1wbGUsIGdvaW5nIHRvIGEgc2libGluZyBzdGF0ZSB0aGF0IHNoYXJlcyBwYXJhbWV0ZXJzXG4gICAgICogc3BlY2lmaWVkIGluIGEgcGFyZW50IHN0YXRlLiBQYXJhbWV0ZXIgaW5oZXJpdGFuY2Ugb25seSB3b3JrcyBiZXR3ZWVuIGNvbW1vbiBhbmNlc3RvciBzdGF0ZXMsIEkuZS5cbiAgICAgKiB0cmFuc2l0aW9uaW5nIHRvIGEgc2libGluZyB3aWxsIGdldCB5b3UgdGhlIHBhcmFtZXRlcnMgZm9yIGFsbCBwYXJlbnRzLCB0cmFuc2l0aW9uaW5nIHRvIGEgY2hpbGRcbiAgICAgKiB3aWxsIGdldCB5b3UgYWxsIGN1cnJlbnQgcGFyYW1ldGVycywgZXRjLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBPcHRpb25zIG9iamVjdC4gVGhlIG9wdGlvbnMgYXJlOlxuICAgICAqXG4gICAgICogLSAqKmBsb2NhdGlvbmAqKiAtIHtib29sZWFuPXRydWV8c3RyaW5nPX0gLSBJZiBgdHJ1ZWAgd2lsbCB1cGRhdGUgdGhlIHVybCBpbiB0aGUgbG9jYXRpb24gYmFyLCBpZiBgZmFsc2VgXG4gICAgICogICAgd2lsbCBub3QuIElmIHN0cmluZywgbXVzdCBiZSBgXCJyZXBsYWNlXCJgLCB3aGljaCB3aWxsIHVwZGF0ZSB1cmwgYW5kIGFsc28gcmVwbGFjZSBsYXN0IGhpc3RvcnkgcmVjb3JkLlxuICAgICAqIC0gKipgaW5oZXJpdGAqKiAtIHtib29sZWFuPXRydWV9LCBJZiBgdHJ1ZWAgd2lsbCBpbmhlcml0IHVybCBwYXJhbWV0ZXJzIGZyb20gY3VycmVudCB1cmwuXG4gICAgICogLSAqKmByZWxhdGl2ZWAqKiAtIHtvYmplY3Q9JHN0YXRlLiRjdXJyZW50fSwgV2hlbiB0cmFuc2l0aW9uaW5nIHdpdGggcmVsYXRpdmUgcGF0aCAoZS5nICdeJyksIFxuICAgICAqICAgIGRlZmluZXMgd2hpY2ggc3RhdGUgdG8gYmUgcmVsYXRpdmUgZnJvbS5cbiAgICAgKiAtICoqYG5vdGlmeWAqKiAtIHtib29sZWFuPXRydWV9LCBJZiBgdHJ1ZWAgd2lsbCBicm9hZGNhc3QgJHN0YXRlQ2hhbmdlU3RhcnQgYW5kICRzdGF0ZUNoYW5nZVN1Y2Nlc3MgZXZlbnRzLlxuICAgICAqIC0gKipgcmVsb2FkYCoqICh2MC4yLjUpIC0ge2Jvb2xlYW49ZmFsc2V9LCBJZiBgdHJ1ZWAgd2lsbCBmb3JjZSB0cmFuc2l0aW9uIGV2ZW4gaWYgdGhlIHN0YXRlIG9yIHBhcmFtcyBcbiAgICAgKiAgICBoYXZlIG5vdCBjaGFuZ2VkLCBha2EgYSByZWxvYWQgb2YgdGhlIHNhbWUgc3RhdGUuIEl0IGRpZmZlcnMgZnJvbSByZWxvYWRPblNlYXJjaCBiZWNhdXNlIHlvdSdkXG4gICAgICogICAgdXNlIHRoaXMgd2hlbiB5b3Ugd2FudCB0byBmb3JjZSBhIHJlbG9hZCB3aGVuICpldmVyeXRoaW5nKiBpcyB0aGUgc2FtZSwgaW5jbHVkaW5nIHNlYXJjaCBwYXJhbXMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7cHJvbWlzZX0gQSBwcm9taXNlIHJlcHJlc2VudGluZyB0aGUgc3RhdGUgb2YgdGhlIG5ldyB0cmFuc2l0aW9uLlxuICAgICAqXG4gICAgICogUG9zc2libGUgc3VjY2VzcyB2YWx1ZXM6XG4gICAgICpcbiAgICAgKiAtICRzdGF0ZS5jdXJyZW50XG4gICAgICpcbiAgICAgKiA8YnIvPlBvc3NpYmxlIHJlamVjdGlvbiB2YWx1ZXM6XG4gICAgICpcbiAgICAgKiAtICd0cmFuc2l0aW9uIHN1cGVyc2VkZWQnIC0gd2hlbiBhIG5ld2VyIHRyYW5zaXRpb24gaGFzIGJlZW4gc3RhcnRlZCBhZnRlciB0aGlzIG9uZVxuICAgICAqIC0gJ3RyYW5zaXRpb24gcHJldmVudGVkJyAtIHdoZW4gYGV2ZW50LnByZXZlbnREZWZhdWx0KClgIGhhcyBiZWVuIGNhbGxlZCBpbiBhIGAkc3RhdGVDaGFuZ2VTdGFydGAgbGlzdGVuZXJcbiAgICAgKiAtICd0cmFuc2l0aW9uIGFib3J0ZWQnIC0gd2hlbiBgZXZlbnQucHJldmVudERlZmF1bHQoKWAgaGFzIGJlZW4gY2FsbGVkIGluIGEgYCRzdGF0ZU5vdEZvdW5kYCBsaXN0ZW5lciBvclxuICAgICAqICAgd2hlbiBhIGAkc3RhdGVOb3RGb3VuZGAgYGV2ZW50LnJldHJ5YCBwcm9taXNlIGVycm9ycy5cbiAgICAgKiAtICd0cmFuc2l0aW9uIGZhaWxlZCcgLSB3aGVuIGEgc3RhdGUgaGFzIGJlZW4gdW5zdWNjZXNzZnVsbHkgZm91bmQgYWZ0ZXIgMiB0cmllcy5cbiAgICAgKiAtICpyZXNvbHZlIGVycm9yKiAtIHdoZW4gYW4gZXJyb3IgaGFzIG9jY3VycmVkIHdpdGggYSBgcmVzb2x2ZWBcbiAgICAgKlxuICAgICAqL1xuICAgICRzdGF0ZS5nbyA9IGZ1bmN0aW9uIGdvKHRvLCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiAkc3RhdGUudHJhbnNpdGlvblRvKHRvLCBwYXJhbXMsIGV4dGVuZCh7IGluaGVyaXQ6IHRydWUsIHJlbGF0aXZlOiAkc3RhdGUuJGN1cnJlbnQgfSwgb3B0aW9ucykpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICAgKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlI3RyYW5zaXRpb25Ub1xuICAgICAqIEBtZXRob2RPZiB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBMb3ctbGV2ZWwgbWV0aG9kIGZvciB0cmFuc2l0aW9uaW5nIHRvIGEgbmV3IHN0YXRlLiB7QGxpbmsgdWkucm91dGVyLnN0YXRlLiRzdGF0ZSNtZXRob2RzX2dvICRzdGF0ZS5nb31cbiAgICAgKiB1c2VzIGB0cmFuc2l0aW9uVG9gIGludGVybmFsbHkuIGAkc3RhdGUuZ29gIGlzIHJlY29tbWVuZGVkIGluIG1vc3Qgc2l0dWF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogPHByZT5cbiAgICAgKiB2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFsndWkucm91dGVyJ10pO1xuICAgICAqXG4gICAgICogYXBwLmNvbnRyb2xsZXIoJ2N0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCAkc3RhdGUpIHtcbiAgICAgKiAgICRzY29wZS5jaGFuZ2VTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgKiAgICAgJHN0YXRlLnRyYW5zaXRpb25UbygnY29udGFjdC5kZXRhaWwnKTtcbiAgICAgKiAgIH07XG4gICAgICogfSk7XG4gICAgICogPC9wcmU+XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdG8gU3RhdGUgbmFtZS5cbiAgICAgKiBAcGFyYW0ge29iamVjdD19IHRvUGFyYW1zIEEgbWFwIG9mIHRoZSBwYXJhbWV0ZXJzIHRoYXQgd2lsbCBiZSBzZW50IHRvIHRoZSBzdGF0ZSxcbiAgICAgKiB3aWxsIHBvcHVsYXRlICRzdGF0ZVBhcmFtcy5cbiAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgT3B0aW9ucyBvYmplY3QuIFRoZSBvcHRpb25zIGFyZTpcbiAgICAgKlxuICAgICAqIC0gKipgbG9jYXRpb25gKiogLSB7Ym9vbGVhbj10cnVlfHN0cmluZz19IC0gSWYgYHRydWVgIHdpbGwgdXBkYXRlIHRoZSB1cmwgaW4gdGhlIGxvY2F0aW9uIGJhciwgaWYgYGZhbHNlYFxuICAgICAqICAgIHdpbGwgbm90LiBJZiBzdHJpbmcsIG11c3QgYmUgYFwicmVwbGFjZVwiYCwgd2hpY2ggd2lsbCB1cGRhdGUgdXJsIGFuZCBhbHNvIHJlcGxhY2UgbGFzdCBoaXN0b3J5IHJlY29yZC5cbiAgICAgKiAtICoqYGluaGVyaXRgKiogLSB7Ym9vbGVhbj1mYWxzZX0sIElmIGB0cnVlYCB3aWxsIGluaGVyaXQgdXJsIHBhcmFtZXRlcnMgZnJvbSBjdXJyZW50IHVybC5cbiAgICAgKiAtICoqYHJlbGF0aXZlYCoqIC0ge29iamVjdD19LCBXaGVuIHRyYW5zaXRpb25pbmcgd2l0aCByZWxhdGl2ZSBwYXRoIChlLmcgJ14nKSwgXG4gICAgICogICAgZGVmaW5lcyB3aGljaCBzdGF0ZSB0byBiZSByZWxhdGl2ZSBmcm9tLlxuICAgICAqIC0gKipgbm90aWZ5YCoqIC0ge2Jvb2xlYW49dHJ1ZX0sIElmIGB0cnVlYCB3aWxsIGJyb2FkY2FzdCAkc3RhdGVDaGFuZ2VTdGFydCBhbmQgJHN0YXRlQ2hhbmdlU3VjY2VzcyBldmVudHMuXG4gICAgICogLSAqKmByZWxvYWRgKiogKHYwLjIuNSkgLSB7Ym9vbGVhbj1mYWxzZX0sIElmIGB0cnVlYCB3aWxsIGZvcmNlIHRyYW5zaXRpb24gZXZlbiBpZiB0aGUgc3RhdGUgb3IgcGFyYW1zIFxuICAgICAqICAgIGhhdmUgbm90IGNoYW5nZWQsIGFrYSBhIHJlbG9hZCBvZiB0aGUgc2FtZSBzdGF0ZS4gSXQgZGlmZmVycyBmcm9tIHJlbG9hZE9uU2VhcmNoIGJlY2F1c2UgeW91J2RcbiAgICAgKiAgICB1c2UgdGhpcyB3aGVuIHlvdSB3YW50IHRvIGZvcmNlIGEgcmVsb2FkIHdoZW4gKmV2ZXJ5dGhpbmcqIGlzIHRoZSBzYW1lLCBpbmNsdWRpbmcgc2VhcmNoIHBhcmFtcy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtwcm9taXNlfSBBIHByb21pc2UgcmVwcmVzZW50aW5nIHRoZSBzdGF0ZSBvZiB0aGUgbmV3IHRyYW5zaXRpb24uIFNlZVxuICAgICAqIHtAbGluayB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlI21ldGhvZHNfZ28gJHN0YXRlLmdvfS5cbiAgICAgKi9cbiAgICAkc3RhdGUudHJhbnNpdGlvblRvID0gZnVuY3Rpb24gdHJhbnNpdGlvblRvKHRvLCB0b1BhcmFtcywgb3B0aW9ucykge1xuICAgICAgdG9QYXJhbXMgPSB0b1BhcmFtcyB8fCB7fTtcbiAgICAgIG9wdGlvbnMgPSBleHRlbmQoe1xuICAgICAgICBsb2NhdGlvbjogdHJ1ZSwgaW5oZXJpdDogZmFsc2UsIHJlbGF0aXZlOiBudWxsLCBub3RpZnk6IHRydWUsIHJlbG9hZDogZmFsc2UsICRyZXRyeTogZmFsc2VcbiAgICAgIH0sIG9wdGlvbnMgfHwge30pO1xuXG4gICAgICB2YXIgZnJvbSA9ICRzdGF0ZS4kY3VycmVudCwgZnJvbVBhcmFtcyA9ICRzdGF0ZS5wYXJhbXMsIGZyb21QYXRoID0gZnJvbS5wYXRoO1xuICAgICAgdmFyIGV2dCwgdG9TdGF0ZSA9IGZpbmRTdGF0ZSh0bywgb3B0aW9ucy5yZWxhdGl2ZSk7XG5cbiAgICAgIGlmICghaXNEZWZpbmVkKHRvU3RhdGUpKSB7XG4gICAgICAgIHZhciByZWRpcmVjdCA9IHsgdG86IHRvLCB0b1BhcmFtczogdG9QYXJhbXMsIG9wdGlvbnM6IG9wdGlvbnMgfTtcbiAgICAgICAgdmFyIHJlZGlyZWN0UmVzdWx0ID0gaGFuZGxlUmVkaXJlY3QocmVkaXJlY3QsIGZyb20uc2VsZiwgZnJvbVBhcmFtcywgb3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKHJlZGlyZWN0UmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlZGlyZWN0UmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWx3YXlzIHJldHJ5IG9uY2UgaWYgdGhlICRzdGF0ZU5vdEZvdW5kIHdhcyBub3QgcHJldmVudGVkXG4gICAgICAgIC8vIChoYW5kbGVzIGVpdGhlciByZWRpcmVjdCBjaGFuZ2VkIG9yIHN0YXRlIGxhenktZGVmaW5pdGlvbilcbiAgICAgICAgdG8gPSByZWRpcmVjdC50bztcbiAgICAgICAgdG9QYXJhbXMgPSByZWRpcmVjdC50b1BhcmFtcztcbiAgICAgICAgb3B0aW9ucyA9IHJlZGlyZWN0Lm9wdGlvbnM7XG4gICAgICAgIHRvU3RhdGUgPSBmaW5kU3RhdGUodG8sIG9wdGlvbnMucmVsYXRpdmUpO1xuXG4gICAgICAgIGlmICghaXNEZWZpbmVkKHRvU3RhdGUpKSB7XG4gICAgICAgICAgaWYgKCFvcHRpb25zLnJlbGF0aXZlKSB0aHJvdyBuZXcgRXJyb3IoXCJObyBzdWNoIHN0YXRlICdcIiArIHRvICsgXCInXCIpO1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCByZXNvbHZlICdcIiArIHRvICsgXCInIGZyb20gc3RhdGUgJ1wiICsgb3B0aW9ucy5yZWxhdGl2ZSArIFwiJ1wiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRvU3RhdGVbYWJzdHJhY3RLZXldKSB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgdHJhbnNpdGlvbiB0byBhYnN0cmFjdCBzdGF0ZSAnXCIgKyB0byArIFwiJ1wiKTtcbiAgICAgIGlmIChvcHRpb25zLmluaGVyaXQpIHRvUGFyYW1zID0gaW5oZXJpdFBhcmFtcygkc3RhdGVQYXJhbXMsIHRvUGFyYW1zIHx8IHt9LCAkc3RhdGUuJGN1cnJlbnQsIHRvU3RhdGUpO1xuICAgICAgaWYgKCF0b1N0YXRlLnBhcmFtcy4kJHZhbGlkYXRlcyh0b1BhcmFtcykpIHJldHVybiBUcmFuc2l0aW9uRmFpbGVkO1xuXG4gICAgICB0b1BhcmFtcyA9IHRvU3RhdGUucGFyYW1zLiQkdmFsdWVzKHRvUGFyYW1zKTtcbiAgICAgIHRvID0gdG9TdGF0ZTtcblxuICAgICAgdmFyIHRvUGF0aCA9IHRvLnBhdGg7XG5cbiAgICAgIC8vIFN0YXJ0aW5nIGZyb20gdGhlIHJvb3Qgb2YgdGhlIHBhdGgsIGtlZXAgYWxsIGxldmVscyB0aGF0IGhhdmVuJ3QgY2hhbmdlZFxuICAgICAgdmFyIGtlZXAgPSAwLCBzdGF0ZSA9IHRvUGF0aFtrZWVwXSwgbG9jYWxzID0gcm9vdC5sb2NhbHMsIHRvTG9jYWxzID0gW107XG5cbiAgICAgIGlmICghb3B0aW9ucy5yZWxvYWQpIHtcbiAgICAgICAgd2hpbGUgKHN0YXRlICYmIHN0YXRlID09PSBmcm9tUGF0aFtrZWVwXSAmJiBzdGF0ZS5vd25QYXJhbXMuJCRlcXVhbHModG9QYXJhbXMsIGZyb21QYXJhbXMpKSB7XG4gICAgICAgICAgbG9jYWxzID0gdG9Mb2NhbHNba2VlcF0gPSBzdGF0ZS5sb2NhbHM7XG4gICAgICAgICAga2VlcCsrO1xuICAgICAgICAgIHN0YXRlID0gdG9QYXRoW2tlZXBdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHdlJ3JlIGdvaW5nIHRvIHRoZSBzYW1lIHN0YXRlIGFuZCBhbGwgbG9jYWxzIGFyZSBrZXB0LCB3ZSd2ZSBnb3Qgbm90aGluZyB0byBkby5cbiAgICAgIC8vIEJ1dCBjbGVhciAndHJhbnNpdGlvbicsIGFzIHdlIHN0aWxsIHdhbnQgdG8gY2FuY2VsIGFueSBvdGhlciBwZW5kaW5nIHRyYW5zaXRpb25zLlxuICAgICAgLy8gVE9ETzogV2UgbWF5IG5vdCB3YW50IHRvIGJ1bXAgJ3RyYW5zaXRpb24nIGlmIHdlJ3JlIGNhbGxlZCBmcm9tIGEgbG9jYXRpb24gY2hhbmdlXG4gICAgICAvLyB0aGF0IHdlJ3ZlIGluaXRpYXRlZCBvdXJzZWx2ZXMsIGJlY2F1c2Ugd2UgbWlnaHQgYWNjaWRlbnRhbGx5IGFib3J0IGEgbGVnaXRpbWF0ZVxuICAgICAgLy8gdHJhbnNpdGlvbiBpbml0aWF0ZWQgZnJvbSBjb2RlP1xuICAgICAgaWYgKHNob3VsZFRyaWdnZXJSZWxvYWQodG8sIGZyb20sIGxvY2Fscywgb3B0aW9ucykpIHtcbiAgICAgICAgaWYgKHRvLnNlbGYucmVsb2FkT25TZWFyY2ggIT09IGZhbHNlKSAkdXJsUm91dGVyLnVwZGF0ZSgpO1xuICAgICAgICAkc3RhdGUudHJhbnNpdGlvbiA9IG51bGw7XG4gICAgICAgIHJldHVybiAkcS53aGVuKCRzdGF0ZS5jdXJyZW50KTtcbiAgICAgIH1cblxuICAgICAgLy8gRmlsdGVyIHBhcmFtZXRlcnMgYmVmb3JlIHdlIHBhc3MgdGhlbSB0byBldmVudCBoYW5kbGVycyBldGMuXG4gICAgICB0b1BhcmFtcyA9IGZpbHRlckJ5S2V5cyh0by5wYXJhbXMuJCRrZXlzKCksIHRvUGFyYW1zIHx8IHt9KTtcblxuICAgICAgLy8gQnJvYWRjYXN0IHN0YXJ0IGV2ZW50IGFuZCBjYW5jZWwgdGhlIHRyYW5zaXRpb24gaWYgcmVxdWVzdGVkXG4gICAgICBpZiAob3B0aW9ucy5ub3RpZnkpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBldmVudFxuICAgICAgICAgKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlIyRzdGF0ZUNoYW5nZVN0YXJ0XG4gICAgICAgICAqIEBldmVudE9mIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVcbiAgICAgICAgICogQGV2ZW50VHlwZSBicm9hZGNhc3Qgb24gcm9vdCBzY29wZVxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogRmlyZWQgd2hlbiB0aGUgc3RhdGUgdHJhbnNpdGlvbiAqKmJlZ2lucyoqLiBZb3UgY2FuIHVzZSBgZXZlbnQucHJldmVudERlZmF1bHQoKWBcbiAgICAgICAgICogdG8gcHJldmVudCB0aGUgdHJhbnNpdGlvbiBmcm9tIGhhcHBlbmluZyBhbmQgdGhlbiB0aGUgdHJhbnNpdGlvbiBwcm9taXNlIHdpbGwgYmVcbiAgICAgICAgICogcmVqZWN0ZWQgd2l0aCBhIGAndHJhbnNpdGlvbiBwcmV2ZW50ZWQnYCB2YWx1ZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50IEV2ZW50IG9iamVjdC5cbiAgICAgICAgICogQHBhcmFtIHtTdGF0ZX0gdG9TdGF0ZSBUaGUgc3RhdGUgYmVpbmcgdHJhbnNpdGlvbmVkIHRvLlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gdG9QYXJhbXMgVGhlIHBhcmFtcyBzdXBwbGllZCB0byB0aGUgYHRvU3RhdGVgLlxuICAgICAgICAgKiBAcGFyYW0ge1N0YXRlfSBmcm9tU3RhdGUgVGhlIGN1cnJlbnQgc3RhdGUsIHByZS10cmFuc2l0aW9uLlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZnJvbVBhcmFtcyBUaGUgcGFyYW1zIHN1cHBsaWVkIHRvIHRoZSBgZnJvbVN0YXRlYC5cbiAgICAgICAgICpcbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICpcbiAgICAgICAgICogPHByZT5cbiAgICAgICAgICogJHJvb3RTY29wZS4kb24oJyRzdGF0ZUNoYW5nZVN0YXJ0JyxcbiAgICAgICAgICogZnVuY3Rpb24oZXZlbnQsIHRvU3RhdGUsIHRvUGFyYW1zLCBmcm9tU3RhdGUsIGZyb21QYXJhbXMpe1xuICAgICAgICAgKiAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICogICAgIC8vIHRyYW5zaXRpb25UbygpIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZCB3aXRoXG4gICAgICAgICAqICAgICAvLyBhICd0cmFuc2l0aW9uIHByZXZlbnRlZCcgZXJyb3JcbiAgICAgICAgICogfSlcbiAgICAgICAgICogPC9wcmU+XG4gICAgICAgICAqL1xuICAgICAgICBpZiAoJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckc3RhdGVDaGFuZ2VTdGFydCcsIHRvLnNlbGYsIHRvUGFyYW1zLCBmcm9tLnNlbGYsIGZyb21QYXJhbXMpLmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAkdXJsUm91dGVyLnVwZGF0ZSgpO1xuICAgICAgICAgIHJldHVybiBUcmFuc2l0aW9uUHJldmVudGVkO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFJlc29sdmUgbG9jYWxzIGZvciB0aGUgcmVtYWluaW5nIHN0YXRlcywgYnV0IGRvbid0IHVwZGF0ZSBhbnkgZ2xvYmFsIHN0YXRlIGp1c3RcbiAgICAgIC8vIHlldCAtLSBpZiBhbnl0aGluZyBmYWlscyB0byByZXNvbHZlIHRoZSBjdXJyZW50IHN0YXRlIG5lZWRzIHRvIHJlbWFpbiB1bnRvdWNoZWQuXG4gICAgICAvLyBXZSBhbHNvIHNldCB1cCBhbiBpbmhlcml0YW5jZSBjaGFpbiBmb3IgdGhlIGxvY2FscyBoZXJlLiBUaGlzIGFsbG93cyB0aGUgdmlldyBkaXJlY3RpdmVcbiAgICAgIC8vIHRvIHF1aWNrbHkgbG9vayB1cCB0aGUgY29ycmVjdCBkZWZpbml0aW9uIGZvciBlYWNoIHZpZXcgaW4gdGhlIGN1cnJlbnQgc3RhdGUuIEV2ZW5cbiAgICAgIC8vIHRob3VnaCB3ZSBjcmVhdGUgdGhlIGxvY2FscyBvYmplY3QgaXRzZWxmIG91dHNpZGUgcmVzb2x2ZVN0YXRlKCksIGl0IGlzIGluaXRpYWxseVxuICAgICAgLy8gZW1wdHkgYW5kIGdldHMgZmlsbGVkIGFzeW5jaHJvbm91c2x5LiBXZSBuZWVkIHRvIGtlZXAgdHJhY2sgb2YgdGhlIHByb21pc2UgZm9yIHRoZVxuICAgICAgLy8gKGZ1bGx5IHJlc29sdmVkKSBjdXJyZW50IGxvY2FscywgYW5kIHBhc3MgdGhpcyBkb3duIHRoZSBjaGFpbi5cbiAgICAgIHZhciByZXNvbHZlZCA9ICRxLndoZW4obG9jYWxzKTtcblxuICAgICAgZm9yICh2YXIgbCA9IGtlZXA7IGwgPCB0b1BhdGgubGVuZ3RoOyBsKyssIHN0YXRlID0gdG9QYXRoW2xdKSB7XG4gICAgICAgIGxvY2FscyA9IHRvTG9jYWxzW2xdID0gaW5oZXJpdChsb2NhbHMpO1xuICAgICAgICByZXNvbHZlZCA9IHJlc29sdmVTdGF0ZShzdGF0ZSwgdG9QYXJhbXMsIHN0YXRlID09PSB0bywgcmVzb2x2ZWQsIGxvY2Fscywgb3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIC8vIE9uY2UgZXZlcnl0aGluZyBpcyByZXNvbHZlZCwgd2UgYXJlIHJlYWR5IHRvIHBlcmZvcm0gdGhlIGFjdHVhbCB0cmFuc2l0aW9uXG4gICAgICAvLyBhbmQgcmV0dXJuIGEgcHJvbWlzZSBmb3IgdGhlIG5ldyBzdGF0ZS4gV2UgYWxzbyBrZWVwIHRyYWNrIG9mIHdoYXQgdGhlXG4gICAgICAvLyBjdXJyZW50IHByb21pc2UgaXMsIHNvIHRoYXQgd2UgY2FuIGRldGVjdCBvdmVybGFwcGluZyB0cmFuc2l0aW9ucyBhbmRcbiAgICAgIC8vIGtlZXAgb25seSB0aGUgb3V0Y29tZSBvZiB0aGUgbGFzdCB0cmFuc2l0aW9uLlxuICAgICAgdmFyIHRyYW5zaXRpb24gPSAkc3RhdGUudHJhbnNpdGlvbiA9IHJlc29sdmVkLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbCwgZW50ZXJpbmcsIGV4aXRpbmc7XG5cbiAgICAgICAgaWYgKCRzdGF0ZS50cmFuc2l0aW9uICE9PSB0cmFuc2l0aW9uKSByZXR1cm4gVHJhbnNpdGlvblN1cGVyc2VkZWQ7XG5cbiAgICAgICAgLy8gRXhpdCAnZnJvbScgc3RhdGVzIG5vdCBrZXB0XG4gICAgICAgIGZvciAobCA9IGZyb21QYXRoLmxlbmd0aCAtIDE7IGwgPj0ga2VlcDsgbC0tKSB7XG4gICAgICAgICAgZXhpdGluZyA9IGZyb21QYXRoW2xdO1xuICAgICAgICAgIGlmIChleGl0aW5nLnNlbGYub25FeGl0KSB7XG4gICAgICAgICAgICAkaW5qZWN0b3IuaW52b2tlKGV4aXRpbmcuc2VsZi5vbkV4aXQsIGV4aXRpbmcuc2VsZiwgZXhpdGluZy5sb2NhbHMuZ2xvYmFscyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGV4aXRpbmcubG9jYWxzID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEVudGVyICd0bycgc3RhdGVzIG5vdCBrZXB0XG4gICAgICAgIGZvciAobCA9IGtlZXA7IGwgPCB0b1BhdGgubGVuZ3RoOyBsKyspIHtcbiAgICAgICAgICBlbnRlcmluZyA9IHRvUGF0aFtsXTtcbiAgICAgICAgICBlbnRlcmluZy5sb2NhbHMgPSB0b0xvY2Fsc1tsXTtcbiAgICAgICAgICBpZiAoZW50ZXJpbmcuc2VsZi5vbkVudGVyKSB7XG4gICAgICAgICAgICAkaW5qZWN0b3IuaW52b2tlKGVudGVyaW5nLnNlbGYub25FbnRlciwgZW50ZXJpbmcuc2VsZiwgZW50ZXJpbmcubG9jYWxzLmdsb2JhbHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJ1biBpdCBhZ2FpbiwgdG8gY2F0Y2ggYW55IHRyYW5zaXRpb25zIGluIGNhbGxiYWNrc1xuICAgICAgICBpZiAoJHN0YXRlLnRyYW5zaXRpb24gIT09IHRyYW5zaXRpb24pIHJldHVybiBUcmFuc2l0aW9uU3VwZXJzZWRlZDtcblxuICAgICAgICAvLyBVcGRhdGUgZ2xvYmFscyBpbiAkc3RhdGVcbiAgICAgICAgJHN0YXRlLiRjdXJyZW50ID0gdG87XG4gICAgICAgICRzdGF0ZS5jdXJyZW50ID0gdG8uc2VsZjtcbiAgICAgICAgJHN0YXRlLnBhcmFtcyA9IHRvUGFyYW1zO1xuICAgICAgICBjb3B5KCRzdGF0ZS5wYXJhbXMsICRzdGF0ZVBhcmFtcyk7XG4gICAgICAgICRzdGF0ZS50cmFuc2l0aW9uID0gbnVsbDtcblxuICAgICAgICBpZiAob3B0aW9ucy5sb2NhdGlvbiAmJiB0by5uYXZpZ2FibGUpIHtcbiAgICAgICAgICAkdXJsUm91dGVyLnB1c2godG8ubmF2aWdhYmxlLnVybCwgdG8ubmF2aWdhYmxlLmxvY2Fscy5nbG9iYWxzLiRzdGF0ZVBhcmFtcywge1xuICAgICAgICAgICAgJCRhdm9pZFJlc3luYzogdHJ1ZSwgcmVwbGFjZTogb3B0aW9ucy5sb2NhdGlvbiA9PT0gJ3JlcGxhY2UnXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5ub3RpZnkpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBldmVudFxuICAgICAgICAgKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlIyRzdGF0ZUNoYW5nZVN1Y2Nlc3NcbiAgICAgICAgICogQGV2ZW50T2YgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVxuICAgICAgICAgKiBAZXZlbnRUeXBlIGJyb2FkY2FzdCBvbiByb290IHNjb3BlXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiBGaXJlZCBvbmNlIHRoZSBzdGF0ZSB0cmFuc2l0aW9uIGlzICoqY29tcGxldGUqKi5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50IEV2ZW50IG9iamVjdC5cbiAgICAgICAgICogQHBhcmFtIHtTdGF0ZX0gdG9TdGF0ZSBUaGUgc3RhdGUgYmVpbmcgdHJhbnNpdGlvbmVkIHRvLlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gdG9QYXJhbXMgVGhlIHBhcmFtcyBzdXBwbGllZCB0byB0aGUgYHRvU3RhdGVgLlxuICAgICAgICAgKiBAcGFyYW0ge1N0YXRlfSBmcm9tU3RhdGUgVGhlIGN1cnJlbnQgc3RhdGUsIHByZS10cmFuc2l0aW9uLlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZnJvbVBhcmFtcyBUaGUgcGFyYW1zIHN1cHBsaWVkIHRvIHRoZSBgZnJvbVN0YXRlYC5cbiAgICAgICAgICovXG4gICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCckc3RhdGVDaGFuZ2VTdWNjZXNzJywgdG8uc2VsZiwgdG9QYXJhbXMsIGZyb20uc2VsZiwgZnJvbVBhcmFtcyk7XG4gICAgICAgIH1cbiAgICAgICAgJHVybFJvdXRlci51cGRhdGUodHJ1ZSk7XG5cbiAgICAgICAgcmV0dXJuICRzdGF0ZS5jdXJyZW50O1xuICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIGlmICgkc3RhdGUudHJhbnNpdGlvbiAhPT0gdHJhbnNpdGlvbikgcmV0dXJuIFRyYW5zaXRpb25TdXBlcnNlZGVkO1xuXG4gICAgICAgICRzdGF0ZS50cmFuc2l0aW9uID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBldmVudFxuICAgICAgICAgKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlIyRzdGF0ZUNoYW5nZUVycm9yXG4gICAgICAgICAqIEBldmVudE9mIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVcbiAgICAgICAgICogQGV2ZW50VHlwZSBicm9hZGNhc3Qgb24gcm9vdCBzY29wZVxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogRmlyZWQgd2hlbiBhbiAqKmVycm9yIG9jY3VycyoqIGR1cmluZyB0cmFuc2l0aW9uLiBJdCdzIGltcG9ydGFudCB0byBub3RlIHRoYXQgaWYgeW91XG4gICAgICAgICAqIGhhdmUgYW55IGVycm9ycyBpbiB5b3VyIHJlc29sdmUgZnVuY3Rpb25zIChqYXZhc2NyaXB0IGVycm9ycywgbm9uLWV4aXN0ZW50IHNlcnZpY2VzLCBldGMpXG4gICAgICAgICAqIHRoZXkgd2lsbCBub3QgdGhyb3cgdHJhZGl0aW9uYWxseS4gWW91IG11c3QgbGlzdGVuIGZvciB0aGlzICRzdGF0ZUNoYW5nZUVycm9yIGV2ZW50IHRvXG4gICAgICAgICAqIGNhdGNoICoqQUxMKiogZXJyb3JzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQgRXZlbnQgb2JqZWN0LlxuICAgICAgICAgKiBAcGFyYW0ge1N0YXRlfSB0b1N0YXRlIFRoZSBzdGF0ZSBiZWluZyB0cmFuc2l0aW9uZWQgdG8uXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0b1BhcmFtcyBUaGUgcGFyYW1zIHN1cHBsaWVkIHRvIHRoZSBgdG9TdGF0ZWAuXG4gICAgICAgICAqIEBwYXJhbSB7U3RhdGV9IGZyb21TdGF0ZSBUaGUgY3VycmVudCBzdGF0ZSwgcHJlLXRyYW5zaXRpb24uXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBmcm9tUGFyYW1zIFRoZSBwYXJhbXMgc3VwcGxpZWQgdG8gdGhlIGBmcm9tU3RhdGVgLlxuICAgICAgICAgKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBUaGUgcmVzb2x2ZSBlcnJvciBvYmplY3QuXG4gICAgICAgICAqL1xuICAgICAgICBldnQgPSAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJyRzdGF0ZUNoYW5nZUVycm9yJywgdG8uc2VsZiwgdG9QYXJhbXMsIGZyb20uc2VsZiwgZnJvbVBhcmFtcywgZXJyb3IpO1xuXG4gICAgICAgIGlmICghZXZ0LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICR1cmxSb3V0ZXIudXBkYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJHEucmVqZWN0KGVycm9yKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gdHJhbnNpdGlvbjtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAgICogQG5hbWUgdWkucm91dGVyLnN0YXRlLiRzdGF0ZSNpc1xuICAgICAqIEBtZXRob2RPZiB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaW1pbGFyIHRvIHtAbGluayB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlI21ldGhvZHNfaW5jbHVkZXMgJHN0YXRlLmluY2x1ZGVzfSxcbiAgICAgKiBidXQgb25seSBjaGVja3MgZm9yIHRoZSBmdWxsIHN0YXRlIG5hbWUuIElmIHBhcmFtcyBpcyBzdXBwbGllZCB0aGVuIGl0IHdpbGwgYmVcbiAgICAgKiB0ZXN0ZWQgZm9yIHN0cmljdCBlcXVhbGl0eSBhZ2FpbnN0IHRoZSBjdXJyZW50IGFjdGl2ZSBwYXJhbXMgb2JqZWN0LCBzbyBhbGwgcGFyYW1zXG4gICAgICogbXVzdCBtYXRjaCB3aXRoIG5vbmUgbWlzc2luZyBhbmQgbm8gZXh0cmFzLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiA8cHJlPlxuICAgICAqICRzdGF0ZS4kY3VycmVudC5uYW1lID0gJ2NvbnRhY3RzLmRldGFpbHMuaXRlbSc7XG4gICAgICpcbiAgICAgKiAvLyBhYnNvbHV0ZSBuYW1lXG4gICAgICogJHN0YXRlLmlzKCdjb250YWN0LmRldGFpbHMuaXRlbScpOyAvLyByZXR1cm5zIHRydWVcbiAgICAgKiAkc3RhdGUuaXMoY29udGFjdERldGFpbEl0ZW1TdGF0ZU9iamVjdCk7IC8vIHJldHVybnMgdHJ1ZVxuICAgICAqXG4gICAgICogLy8gcmVsYXRpdmUgbmFtZSAoLiBhbmQgXiksIHR5cGljYWxseSBmcm9tIGEgdGVtcGxhdGVcbiAgICAgKiAvLyBFLmcuIGZyb20gdGhlICdjb250YWN0cy5kZXRhaWxzJyB0ZW1wbGF0ZVxuICAgICAqIDxkaXYgbmctY2xhc3M9XCJ7aGlnaGxpZ2h0ZWQ6ICRzdGF0ZS5pcygnLml0ZW0nKX1cIj5JdGVtPC9kaXY+XG4gICAgICogPC9wcmU+XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IHN0YXRlT3JOYW1lIFRoZSBzdGF0ZSBuYW1lIChhYnNvbHV0ZSBvciByZWxhdGl2ZSkgb3Igc3RhdGUgb2JqZWN0IHlvdSdkIGxpa2UgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtvYmplY3Q9fSBwYXJhbXMgQSBwYXJhbSBvYmplY3QsIGUuZy4gYHtzZWN0aW9uSWQ6IHNlY3Rpb24uaWR9YCwgdGhhdCB5b3UnZCBsaWtlXG4gICAgICogdG8gdGVzdCBhZ2FpbnN0IHRoZSBjdXJyZW50IGFjdGl2ZSBzdGF0ZS5cbiAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgQW4gb3B0aW9ucyBvYmplY3QuICBUaGUgb3B0aW9ucyBhcmU6XG4gICAgICpcbiAgICAgKiAtICoqYHJlbGF0aXZlYCoqIC0ge3N0cmluZ3xvYmplY3R9IC0gIElmIGBzdGF0ZU9yTmFtZWAgaXMgYSByZWxhdGl2ZSBzdGF0ZSBuYW1lIGFuZCBgb3B0aW9ucy5yZWxhdGl2ZWAgaXMgc2V0LCAuaXMgd2lsbFxuICAgICAqIHRlc3QgcmVsYXRpdmUgdG8gYG9wdGlvbnMucmVsYXRpdmVgIHN0YXRlIChvciBuYW1lKS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgaXQgaXMgdGhlIHN0YXRlLlxuICAgICAqL1xuICAgICRzdGF0ZS5pcyA9IGZ1bmN0aW9uIGlzKHN0YXRlT3JOYW1lLCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSBleHRlbmQoeyByZWxhdGl2ZTogJHN0YXRlLiRjdXJyZW50IH0sIG9wdGlvbnMgfHwge30pO1xuICAgICAgdmFyIHN0YXRlID0gZmluZFN0YXRlKHN0YXRlT3JOYW1lLCBvcHRpb25zLnJlbGF0aXZlKTtcblxuICAgICAgaWYgKCFpc0RlZmluZWQoc3RhdGUpKSB7IHJldHVybiB1bmRlZmluZWQ7IH1cbiAgICAgIGlmICgkc3RhdGUuJGN1cnJlbnQgIT09IHN0YXRlKSB7IHJldHVybiBmYWxzZTsgfVxuICAgICAgcmV0dXJuIHBhcmFtcyA/IGVxdWFsRm9yS2V5cyhzdGF0ZS5wYXJhbXMuJCR2YWx1ZXMocGFyYW1zKSwgJHN0YXRlUGFyYW1zKSA6IHRydWU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgICAqIEBuYW1lIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGUjaW5jbHVkZXNcbiAgICAgKiBAbWV0aG9kT2YgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQSBtZXRob2QgdG8gZGV0ZXJtaW5lIGlmIHRoZSBjdXJyZW50IGFjdGl2ZSBzdGF0ZSBpcyBlcXVhbCB0byBvciBpcyB0aGUgY2hpbGQgb2YgdGhlXG4gICAgICogc3RhdGUgc3RhdGVOYW1lLiBJZiBhbnkgcGFyYW1zIGFyZSBwYXNzZWQgdGhlbiB0aGV5IHdpbGwgYmUgdGVzdGVkIGZvciBhIG1hdGNoIGFzIHdlbGwuXG4gICAgICogTm90IGFsbCB0aGUgcGFyYW1ldGVycyBuZWVkIHRvIGJlIHBhc3NlZCwganVzdCB0aGUgb25lcyB5b3UnZCBsaWtlIHRvIHRlc3QgZm9yIGVxdWFsaXR5LlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBQYXJ0aWFsIGFuZCByZWxhdGl2ZSBuYW1lc1xuICAgICAqIDxwcmU+XG4gICAgICogJHN0YXRlLiRjdXJyZW50Lm5hbWUgPSAnY29udGFjdHMuZGV0YWlscy5pdGVtJztcbiAgICAgKlxuICAgICAqIC8vIFVzaW5nIHBhcnRpYWwgbmFtZXNcbiAgICAgKiAkc3RhdGUuaW5jbHVkZXMoXCJjb250YWN0c1wiKTsgLy8gcmV0dXJucyB0cnVlXG4gICAgICogJHN0YXRlLmluY2x1ZGVzKFwiY29udGFjdHMuZGV0YWlsc1wiKTsgLy8gcmV0dXJucyB0cnVlXG4gICAgICogJHN0YXRlLmluY2x1ZGVzKFwiY29udGFjdHMuZGV0YWlscy5pdGVtXCIpOyAvLyByZXR1cm5zIHRydWVcbiAgICAgKiAkc3RhdGUuaW5jbHVkZXMoXCJjb250YWN0cy5saXN0XCIpOyAvLyByZXR1cm5zIGZhbHNlXG4gICAgICogJHN0YXRlLmluY2x1ZGVzKFwiYWJvdXRcIik7IC8vIHJldHVybnMgZmFsc2VcbiAgICAgKlxuICAgICAqIC8vIFVzaW5nIHJlbGF0aXZlIG5hbWVzICguIGFuZCBeKSwgdHlwaWNhbGx5IGZyb20gYSB0ZW1wbGF0ZVxuICAgICAqIC8vIEUuZy4gZnJvbSB0aGUgJ2NvbnRhY3RzLmRldGFpbHMnIHRlbXBsYXRlXG4gICAgICogPGRpdiBuZy1jbGFzcz1cIntoaWdobGlnaHRlZDogJHN0YXRlLmluY2x1ZGVzKCcuaXRlbScpfVwiPkl0ZW08L2Rpdj5cbiAgICAgKiA8L3ByZT5cbiAgICAgKlxuICAgICAqIEJhc2ljIGdsb2JiaW5nIHBhdHRlcm5zXG4gICAgICogPHByZT5cbiAgICAgKiAkc3RhdGUuJGN1cnJlbnQubmFtZSA9ICdjb250YWN0cy5kZXRhaWxzLml0ZW0udXJsJztcbiAgICAgKlxuICAgICAqICRzdGF0ZS5pbmNsdWRlcyhcIiouZGV0YWlscy4qLipcIik7IC8vIHJldHVybnMgdHJ1ZVxuICAgICAqICRzdGF0ZS5pbmNsdWRlcyhcIiouZGV0YWlscy4qKlwiKTsgLy8gcmV0dXJucyB0cnVlXG4gICAgICogJHN0YXRlLmluY2x1ZGVzKFwiKiouaXRlbS4qKlwiKTsgLy8gcmV0dXJucyB0cnVlXG4gICAgICogJHN0YXRlLmluY2x1ZGVzKFwiKi5kZXRhaWxzLml0ZW0udXJsXCIpOyAvLyByZXR1cm5zIHRydWVcbiAgICAgKiAkc3RhdGUuaW5jbHVkZXMoXCIqLmRldGFpbHMuKi51cmxcIik7IC8vIHJldHVybnMgdHJ1ZVxuICAgICAqICRzdGF0ZS5pbmNsdWRlcyhcIiouZGV0YWlscy4qXCIpOyAvLyByZXR1cm5zIGZhbHNlXG4gICAgICogJHN0YXRlLmluY2x1ZGVzKFwiaXRlbS4qKlwiKTsgLy8gcmV0dXJucyBmYWxzZVxuICAgICAqIDwvcHJlPlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0YXRlT3JOYW1lIEEgcGFydGlhbCBuYW1lLCByZWxhdGl2ZSBuYW1lLCBvciBnbG9iIHBhdHRlcm5cbiAgICAgKiB0byBiZSBzZWFyY2hlZCBmb3Igd2l0aGluIHRoZSBjdXJyZW50IHN0YXRlIG5hbWUuXG4gICAgICogQHBhcmFtIHtvYmplY3Q9fSBwYXJhbXMgQSBwYXJhbSBvYmplY3QsIGUuZy4gYHtzZWN0aW9uSWQ6IHNlY3Rpb24uaWR9YCxcbiAgICAgKiB0aGF0IHlvdSdkIGxpa2UgdG8gdGVzdCBhZ2FpbnN0IHRoZSBjdXJyZW50IGFjdGl2ZSBzdGF0ZS5cbiAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgQW4gb3B0aW9ucyBvYmplY3QuICBUaGUgb3B0aW9ucyBhcmU6XG4gICAgICpcbiAgICAgKiAtICoqYHJlbGF0aXZlYCoqIC0ge3N0cmluZ3xvYmplY3Q9fSAtICBJZiBgc3RhdGVPck5hbWVgIGlzIGEgcmVsYXRpdmUgc3RhdGUgcmVmZXJlbmNlIGFuZCBgb3B0aW9ucy5yZWxhdGl2ZWAgaXMgc2V0LFxuICAgICAqIC5pbmNsdWRlcyB3aWxsIHRlc3QgcmVsYXRpdmUgdG8gYG9wdGlvbnMucmVsYXRpdmVgIHN0YXRlIChvciBuYW1lKS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgaXQgZG9lcyBpbmNsdWRlIHRoZSBzdGF0ZVxuICAgICAqL1xuICAgICRzdGF0ZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzKHN0YXRlT3JOYW1lLCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSBleHRlbmQoeyByZWxhdGl2ZTogJHN0YXRlLiRjdXJyZW50IH0sIG9wdGlvbnMgfHwge30pO1xuICAgICAgaWYgKGlzU3RyaW5nKHN0YXRlT3JOYW1lKSAmJiBpc0dsb2Ioc3RhdGVPck5hbWUpKSB7XG4gICAgICAgIGlmICghZG9lc1N0YXRlTWF0Y2hHbG9iKHN0YXRlT3JOYW1lKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZU9yTmFtZSA9ICRzdGF0ZS4kY3VycmVudC5uYW1lO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3RhdGUgPSBmaW5kU3RhdGUoc3RhdGVPck5hbWUsIG9wdGlvbnMucmVsYXRpdmUpO1xuICAgICAgaWYgKCFpc0RlZmluZWQoc3RhdGUpKSB7IHJldHVybiB1bmRlZmluZWQ7IH1cbiAgICAgIGlmICghaXNEZWZpbmVkKCRzdGF0ZS4kY3VycmVudC5pbmNsdWRlc1tzdGF0ZS5uYW1lXSkpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgICByZXR1cm4gcGFyYW1zID8gZXF1YWxGb3JLZXlzKHN0YXRlLnBhcmFtcy4kJHZhbHVlcyhwYXJhbXMpLCAkc3RhdGVQYXJhbXMsIG9iamVjdEtleXMocGFyYW1zKSkgOiB0cnVlO1xuICAgIH07XG5cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgICAqIEBuYW1lIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGUjaHJlZlxuICAgICAqIEBtZXRob2RPZiB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBBIHVybCBnZW5lcmF0aW9uIG1ldGhvZCB0aGF0IHJldHVybnMgdGhlIGNvbXBpbGVkIHVybCBmb3IgdGhlIGdpdmVuIHN0YXRlIHBvcHVsYXRlZCB3aXRoIHRoZSBnaXZlbiBwYXJhbXMuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIDxwcmU+XG4gICAgICogZXhwZWN0KCRzdGF0ZS5ocmVmKFwiYWJvdXQucGVyc29uXCIsIHsgcGVyc29uOiBcImJvYlwiIH0pKS50b0VxdWFsKFwiL2Fib3V0L2JvYlwiKTtcbiAgICAgKiA8L3ByZT5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0gc3RhdGVPck5hbWUgVGhlIHN0YXRlIG5hbWUgb3Igc3RhdGUgb2JqZWN0IHlvdSdkIGxpa2UgdG8gZ2VuZXJhdGUgYSB1cmwgZnJvbS5cbiAgICAgKiBAcGFyYW0ge29iamVjdD19IHBhcmFtcyBBbiBvYmplY3Qgb2YgcGFyYW1ldGVyIHZhbHVlcyB0byBmaWxsIHRoZSBzdGF0ZSdzIHJlcXVpcmVkIHBhcmFtZXRlcnMuXG4gICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIE9wdGlvbnMgb2JqZWN0LiBUaGUgb3B0aW9ucyBhcmU6XG4gICAgICpcbiAgICAgKiAtICoqYGxvc3N5YCoqIC0ge2Jvb2xlYW49dHJ1ZX0gLSAgSWYgdHJ1ZSwgYW5kIGlmIHRoZXJlIGlzIG5vIHVybCBhc3NvY2lhdGVkIHdpdGggdGhlIHN0YXRlIHByb3ZpZGVkIGluIHRoZVxuICAgICAqICAgIGZpcnN0IHBhcmFtZXRlciwgdGhlbiB0aGUgY29uc3RydWN0ZWQgaHJlZiB1cmwgd2lsbCBiZSBidWlsdCBmcm9tIHRoZSBmaXJzdCBuYXZpZ2FibGUgYW5jZXN0b3IgKGFrYVxuICAgICAqICAgIGFuY2VzdG9yIHdpdGggYSB2YWxpZCB1cmwpLlxuICAgICAqIC0gKipgaW5oZXJpdGAqKiAtIHtib29sZWFuPXRydWV9LCBJZiBgdHJ1ZWAgd2lsbCBpbmhlcml0IHVybCBwYXJhbWV0ZXJzIGZyb20gY3VycmVudCB1cmwuXG4gICAgICogLSAqKmByZWxhdGl2ZWAqKiAtIHtvYmplY3Q9JHN0YXRlLiRjdXJyZW50fSwgV2hlbiB0cmFuc2l0aW9uaW5nIHdpdGggcmVsYXRpdmUgcGF0aCAoZS5nICdeJyksIFxuICAgICAqICAgIGRlZmluZXMgd2hpY2ggc3RhdGUgdG8gYmUgcmVsYXRpdmUgZnJvbS5cbiAgICAgKiAtICoqYGFic29sdXRlYCoqIC0ge2Jvb2xlYW49ZmFsc2V9LCAgSWYgdHJ1ZSB3aWxsIGdlbmVyYXRlIGFuIGFic29sdXRlIHVybCwgZS5nLiBcImh0dHA6Ly93d3cuZXhhbXBsZS5jb20vZnVsbHVybFwiLlxuICAgICAqIFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IGNvbXBpbGVkIHN0YXRlIHVybFxuICAgICAqL1xuICAgICRzdGF0ZS5ocmVmID0gZnVuY3Rpb24gaHJlZihzdGF0ZU9yTmFtZSwgcGFyYW1zLCBvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0gZXh0ZW5kKHtcbiAgICAgICAgbG9zc3k6ICAgIHRydWUsXG4gICAgICAgIGluaGVyaXQ6ICB0cnVlLFxuICAgICAgICBhYnNvbHV0ZTogZmFsc2UsXG4gICAgICAgIHJlbGF0aXZlOiAkc3RhdGUuJGN1cnJlbnRcbiAgICAgIH0sIG9wdGlvbnMgfHwge30pO1xuXG4gICAgICB2YXIgc3RhdGUgPSBmaW5kU3RhdGUoc3RhdGVPck5hbWUsIG9wdGlvbnMucmVsYXRpdmUpO1xuXG4gICAgICBpZiAoIWlzRGVmaW5lZChzdGF0ZSkpIHJldHVybiBudWxsO1xuICAgICAgaWYgKG9wdGlvbnMuaW5oZXJpdCkgcGFyYW1zID0gaW5oZXJpdFBhcmFtcygkc3RhdGVQYXJhbXMsIHBhcmFtcyB8fCB7fSwgJHN0YXRlLiRjdXJyZW50LCBzdGF0ZSk7XG4gICAgICBcbiAgICAgIHZhciBuYXYgPSAoc3RhdGUgJiYgb3B0aW9ucy5sb3NzeSkgPyBzdGF0ZS5uYXZpZ2FibGUgOiBzdGF0ZTtcblxuICAgICAgaWYgKCFuYXYgfHwgbmF2LnVybCA9PT0gdW5kZWZpbmVkIHx8IG5hdi51cmwgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gJHVybFJvdXRlci5ocmVmKG5hdi51cmwsIGZpbHRlckJ5S2V5cyhzdGF0ZS5wYXJhbXMuJCRrZXlzKCksIHBhcmFtcyB8fCB7fSksIHtcbiAgICAgICAgYWJzb2x1dGU6IG9wdGlvbnMuYWJzb2x1dGVcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICAgKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlI2dldFxuICAgICAqIEBtZXRob2RPZiB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBSZXR1cm5zIHRoZSBzdGF0ZSBjb25maWd1cmF0aW9uIG9iamVjdCBmb3IgYW55IHNwZWNpZmljIHN0YXRlIG9yIGFsbCBzdGF0ZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xvYmplY3Q9fSBzdGF0ZU9yTmFtZSAoYWJzb2x1dGUgb3IgcmVsYXRpdmUpIElmIHByb3ZpZGVkLCB3aWxsIG9ubHkgZ2V0IHRoZSBjb25maWcgZm9yXG4gICAgICogdGhlIHJlcXVlc3RlZCBzdGF0ZS4gSWYgbm90IHByb3ZpZGVkLCByZXR1cm5zIGFuIGFycmF5IG9mIEFMTCBzdGF0ZSBjb25maWdzLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdD19IGNvbnRleHQgV2hlbiBzdGF0ZU9yTmFtZSBpcyBhIHJlbGF0aXZlIHN0YXRlIHJlZmVyZW5jZSwgdGhlIHN0YXRlIHdpbGwgYmUgcmV0cmlldmVkIHJlbGF0aXZlIHRvIGNvbnRleHQuXG4gICAgICogQHJldHVybnMge09iamVjdHxBcnJheX0gU3RhdGUgY29uZmlndXJhdGlvbiBvYmplY3Qgb3IgYXJyYXkgb2YgYWxsIG9iamVjdHMuXG4gICAgICovXG4gICAgJHN0YXRlLmdldCA9IGZ1bmN0aW9uIChzdGF0ZU9yTmFtZSwgY29udGV4dCkge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiBtYXAob2JqZWN0S2V5cyhzdGF0ZXMpLCBmdW5jdGlvbihuYW1lKSB7IHJldHVybiBzdGF0ZXNbbmFtZV0uc2VsZjsgfSk7XG4gICAgICB2YXIgc3RhdGUgPSBmaW5kU3RhdGUoc3RhdGVPck5hbWUsIGNvbnRleHQgfHwgJHN0YXRlLiRjdXJyZW50KTtcbiAgICAgIHJldHVybiAoc3RhdGUgJiYgc3RhdGUuc2VsZikgPyBzdGF0ZS5zZWxmIDogbnVsbDtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcmVzb2x2ZVN0YXRlKHN0YXRlLCBwYXJhbXMsIHBhcmFtc0FyZUZpbHRlcmVkLCBpbmhlcml0ZWQsIGRzdCwgb3B0aW9ucykge1xuICAgICAgLy8gTWFrZSBhIHJlc3RyaWN0ZWQgJHN0YXRlUGFyYW1zIHdpdGggb25seSB0aGUgcGFyYW1ldGVycyB0aGF0IGFwcGx5IHRvIHRoaXMgc3RhdGUgaWZcbiAgICAgIC8vIG5lY2Vzc2FyeS4gSW4gYWRkaXRpb24gdG8gYmVpbmcgYXZhaWxhYmxlIHRvIHRoZSBjb250cm9sbGVyIGFuZCBvbkVudGVyL29uRXhpdCBjYWxsYmFja3MsXG4gICAgICAvLyB3ZSBhbHNvIG5lZWQgJHN0YXRlUGFyYW1zIHRvIGJlIGF2YWlsYWJsZSBmb3IgYW55ICRpbmplY3RvciBjYWxscyB3ZSBtYWtlIGR1cmluZyB0aGVcbiAgICAgIC8vIGRlcGVuZGVuY3kgcmVzb2x1dGlvbiBwcm9jZXNzLlxuICAgICAgdmFyICRzdGF0ZVBhcmFtcyA9IChwYXJhbXNBcmVGaWx0ZXJlZCkgPyBwYXJhbXMgOiBmaWx0ZXJCeUtleXMoc3RhdGUucGFyYW1zLiQka2V5cygpLCBwYXJhbXMpO1xuICAgICAgdmFyIGxvY2FscyA9IHsgJHN0YXRlUGFyYW1zOiAkc3RhdGVQYXJhbXMgfTtcblxuICAgICAgLy8gUmVzb2x2ZSAnZ2xvYmFsJyBkZXBlbmRlbmNpZXMgZm9yIHRoZSBzdGF0ZSwgaS5lLiB0aG9zZSBub3Qgc3BlY2lmaWMgdG8gYSB2aWV3LlxuICAgICAgLy8gV2UncmUgYWxzbyBpbmNsdWRpbmcgJHN0YXRlUGFyYW1zIGluIHRoaXM7IHRoYXQgd2F5IHRoZSBwYXJhbWV0ZXJzIGFyZSByZXN0cmljdGVkXG4gICAgICAvLyB0byB0aGUgc2V0IHRoYXQgc2hvdWxkIGJlIHZpc2libGUgdG8gdGhlIHN0YXRlLCBhbmQgYXJlIGluZGVwZW5kZW50IG9mIHdoZW4gd2UgdXBkYXRlXG4gICAgICAvLyB0aGUgZ2xvYmFsICRzdGF0ZSBhbmQgJHN0YXRlUGFyYW1zIHZhbHVlcy5cbiAgICAgIGRzdC5yZXNvbHZlID0gJHJlc29sdmUucmVzb2x2ZShzdGF0ZS5yZXNvbHZlLCBsb2NhbHMsIGRzdC5yZXNvbHZlLCBzdGF0ZSk7XG4gICAgICB2YXIgcHJvbWlzZXMgPSBbZHN0LnJlc29sdmUudGhlbihmdW5jdGlvbiAoZ2xvYmFscykge1xuICAgICAgICBkc3QuZ2xvYmFscyA9IGdsb2JhbHM7XG4gICAgICB9KV07XG4gICAgICBpZiAoaW5oZXJpdGVkKSBwcm9taXNlcy5wdXNoKGluaGVyaXRlZCk7XG5cbiAgICAgIC8vIFJlc29sdmUgdGVtcGxhdGUgYW5kIGRlcGVuZGVuY2llcyBmb3IgYWxsIHZpZXdzLlxuICAgICAgZm9yRWFjaChzdGF0ZS52aWV3cywgZnVuY3Rpb24gKHZpZXcsIG5hbWUpIHtcbiAgICAgICAgdmFyIGluamVjdGFibGVzID0gKHZpZXcucmVzb2x2ZSAmJiB2aWV3LnJlc29sdmUgIT09IHN0YXRlLnJlc29sdmUgPyB2aWV3LnJlc29sdmUgOiB7fSk7XG4gICAgICAgIGluamVjdGFibGVzLiR0ZW1wbGF0ZSA9IFsgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiAkdmlldy5sb2FkKG5hbWUsIHsgdmlldzogdmlldywgbG9jYWxzOiBsb2NhbHMsIHBhcmFtczogJHN0YXRlUGFyYW1zLCBub3RpZnk6IG9wdGlvbnMubm90aWZ5IH0pIHx8ICcnO1xuICAgICAgICB9XTtcblxuICAgICAgICBwcm9taXNlcy5wdXNoKCRyZXNvbHZlLnJlc29sdmUoaW5qZWN0YWJsZXMsIGxvY2FscywgZHN0LnJlc29sdmUsIHN0YXRlKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAvLyBSZWZlcmVuY2VzIHRvIHRoZSBjb250cm9sbGVyIChvbmx5IGluc3RhbnRpYXRlZCBhdCBsaW5rIHRpbWUpXG4gICAgICAgICAgaWYgKGlzRnVuY3Rpb24odmlldy5jb250cm9sbGVyUHJvdmlkZXIpIHx8IGlzQXJyYXkodmlldy5jb250cm9sbGVyUHJvdmlkZXIpKSB7XG4gICAgICAgICAgICB2YXIgaW5qZWN0TG9jYWxzID0gYW5ndWxhci5leHRlbmQoe30sIGluamVjdGFibGVzLCBsb2NhbHMpO1xuICAgICAgICAgICAgcmVzdWx0LiQkY29udHJvbGxlciA9ICRpbmplY3Rvci5pbnZva2Uodmlldy5jb250cm9sbGVyUHJvdmlkZXIsIG51bGwsIGluamVjdExvY2Fscyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdC4kJGNvbnRyb2xsZXIgPSB2aWV3LmNvbnRyb2xsZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIFByb3ZpZGUgYWNjZXNzIHRvIHRoZSBzdGF0ZSBpdHNlbGYgZm9yIGludGVybmFsIHVzZVxuICAgICAgICAgIHJlc3VsdC4kJHN0YXRlID0gc3RhdGU7XG4gICAgICAgICAgcmVzdWx0LiQkY29udHJvbGxlckFzID0gdmlldy5jb250cm9sbGVyQXM7XG4gICAgICAgICAgZHN0W25hbWVdID0gcmVzdWx0O1xuICAgICAgICB9KSk7XG4gICAgICB9KTtcblxuICAgICAgLy8gV2FpdCBmb3IgYWxsIHRoZSBwcm9taXNlcyBhbmQgdGhlbiByZXR1cm4gdGhlIGFjdGl2YXRpb24gb2JqZWN0XG4gICAgICByZXR1cm4gJHEuYWxsKHByb21pc2VzKS50aGVuKGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICAgICAgcmV0dXJuIGRzdDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiAkc3RhdGU7XG4gIH1cblxuICBmdW5jdGlvbiBzaG91bGRUcmlnZ2VyUmVsb2FkKHRvLCBmcm9tLCBsb2NhbHMsIG9wdGlvbnMpIHtcbiAgICBpZiAodG8gPT09IGZyb20gJiYgKChsb2NhbHMgPT09IGZyb20ubG9jYWxzICYmICFvcHRpb25zLnJlbG9hZCkgfHwgKHRvLnNlbGYucmVsb2FkT25TZWFyY2ggPT09IGZhbHNlKSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxufVxuXG5hbmd1bGFyLm1vZHVsZSgndWkucm91dGVyLnN0YXRlJylcbiAgLnZhbHVlKCckc3RhdGVQYXJhbXMnLCB7fSlcbiAgLnByb3ZpZGVyKCckc3RhdGUnLCAkU3RhdGVQcm92aWRlcik7XG5cblxuJFZpZXdQcm92aWRlci4kaW5qZWN0ID0gW107XG5mdW5jdGlvbiAkVmlld1Byb3ZpZGVyKCkge1xuXG4gIHRoaXMuJGdldCA9ICRnZXQ7XG4gIC8qKlxuICAgKiBAbmdkb2Mgb2JqZWN0XG4gICAqIEBuYW1lIHVpLnJvdXRlci5zdGF0ZS4kdmlld1xuICAgKlxuICAgKiBAcmVxdWlyZXMgdWkucm91dGVyLnV0aWwuJHRlbXBsYXRlRmFjdG9yeVxuICAgKiBAcmVxdWlyZXMgJHJvb3RTY29wZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICovXG4gICRnZXQuJGluamVjdCA9IFsnJHJvb3RTY29wZScsICckdGVtcGxhdGVGYWN0b3J5J107XG4gIGZ1bmN0aW9uICRnZXQoICAgJHJvb3RTY29wZSwgICAkdGVtcGxhdGVGYWN0b3J5KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vICR2aWV3LmxvYWQoJ2Z1bGwudmlld05hbWUnLCB7IHRlbXBsYXRlOiAuLi4sIGNvbnRyb2xsZXI6IC4uLiwgcmVzb2x2ZTogLi4uLCBhc3luYzogZmFsc2UsIHBhcmFtczogLi4uIH0pXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgICAgICogQG5hbWUgdWkucm91dGVyLnN0YXRlLiR2aWV3I2xvYWRcbiAgICAgICAqIEBtZXRob2RPZiB1aS5yb3V0ZXIuc3RhdGUuJHZpZXdcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBuYW1lXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBvcHRpb24gb2JqZWN0LlxuICAgICAgICovXG4gICAgICBsb2FkOiBmdW5jdGlvbiBsb2FkKG5hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHJlc3VsdCwgZGVmYXVsdHMgPSB7XG4gICAgICAgICAgdGVtcGxhdGU6IG51bGwsIGNvbnRyb2xsZXI6IG51bGwsIHZpZXc6IG51bGwsIGxvY2FsczogbnVsbCwgbm90aWZ5OiB0cnVlLCBhc3luYzogdHJ1ZSwgcGFyYW1zOiB7fVxuICAgICAgICB9O1xuICAgICAgICBvcHRpb25zID0gZXh0ZW5kKGRlZmF1bHRzLCBvcHRpb25zKTtcblxuICAgICAgICBpZiAob3B0aW9ucy52aWV3KSB7XG4gICAgICAgICAgcmVzdWx0ID0gJHRlbXBsYXRlRmFjdG9yeS5mcm9tQ29uZmlnKG9wdGlvbnMudmlldywgb3B0aW9ucy5wYXJhbXMsIG9wdGlvbnMubG9jYWxzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0ICYmIG9wdGlvbnMubm90aWZ5KSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmdkb2MgZXZlbnRcbiAgICAgICAgICogQG5hbWUgdWkucm91dGVyLnN0YXRlLiRzdGF0ZSMkdmlld0NvbnRlbnRMb2FkaW5nXG4gICAgICAgICAqIEBldmVudE9mIHVpLnJvdXRlci5zdGF0ZS4kdmlld1xuICAgICAgICAgKiBAZXZlbnRUeXBlIGJyb2FkY2FzdCBvbiByb290IHNjb3BlXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBGaXJlZCBvbmNlIHRoZSB2aWV3ICoqYmVnaW5zIGxvYWRpbmcqKiwgKmJlZm9yZSogdGhlIERPTSBpcyByZW5kZXJlZC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50IEV2ZW50IG9iamVjdC5cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHZpZXdDb25maWcgVGhlIHZpZXcgY29uZmlnIHByb3BlcnRpZXMgKHRlbXBsYXRlLCBjb250cm9sbGVyLCBldGMpLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKlxuICAgICAgICAgKiA8cHJlPlxuICAgICAgICAgKiAkc2NvcGUuJG9uKCckdmlld0NvbnRlbnRMb2FkaW5nJyxcbiAgICAgICAgICogZnVuY3Rpb24oZXZlbnQsIHZpZXdDb25maWcpe1xuICAgICAgICAgKiAgICAgLy8gQWNjZXNzIHRvIGFsbCB0aGUgdmlldyBjb25maWcgcHJvcGVydGllcy5cbiAgICAgICAgICogICAgIC8vIGFuZCBvbmUgc3BlY2lhbCBwcm9wZXJ0eSAndGFyZ2V0VmlldydcbiAgICAgICAgICogICAgIC8vIHZpZXdDb25maWcudGFyZ2V0Vmlld1xuICAgICAgICAgKiB9KTtcbiAgICAgICAgICogPC9wcmU+XG4gICAgICAgICAqL1xuICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnJHZpZXdDb250ZW50TG9hZGluZycsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuXG5hbmd1bGFyLm1vZHVsZSgndWkucm91dGVyLnN0YXRlJykucHJvdmlkZXIoJyR2aWV3JywgJFZpZXdQcm92aWRlcik7XG5cbi8qKlxuICogQG5nZG9jIG9iamVjdFxuICogQG5hbWUgdWkucm91dGVyLnN0YXRlLiR1aVZpZXdTY3JvbGxQcm92aWRlclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUHJvdmlkZXIgdGhhdCByZXR1cm5zIHRoZSB7QGxpbmsgdWkucm91dGVyLnN0YXRlLiR1aVZpZXdTY3JvbGx9IHNlcnZpY2UgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uICRWaWV3U2Nyb2xsUHJvdmlkZXIoKSB7XG5cbiAgdmFyIHVzZUFuY2hvclNjcm9sbCA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgdWkucm91dGVyLnN0YXRlLiR1aVZpZXdTY3JvbGxQcm92aWRlciN1c2VBbmNob3JTY3JvbGxcbiAgICogQG1ldGhvZE9mIHVpLnJvdXRlci5zdGF0ZS4kdWlWaWV3U2Nyb2xsUHJvdmlkZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJldmVydHMgYmFjayB0byB1c2luZyB0aGUgY29yZSBbYCRhbmNob3JTY3JvbGxgXShodHRwOi8vZG9jcy5hbmd1bGFyanMub3JnL2FwaS9uZy4kYW5jaG9yU2Nyb2xsKSBzZXJ2aWNlIGZvclxuICAgKiBzY3JvbGxpbmcgYmFzZWQgb24gdGhlIHVybCBhbmNob3IuXG4gICAqL1xuICB0aGlzLnVzZUFuY2hvclNjcm9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgICB1c2VBbmNob3JTY3JvbGwgPSB0cnVlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2Mgb2JqZWN0XG4gICAqIEBuYW1lIHVpLnJvdXRlci5zdGF0ZS4kdWlWaWV3U2Nyb2xsXG4gICAqXG4gICAqIEByZXF1aXJlcyAkYW5jaG9yU2Nyb2xsXG4gICAqIEByZXF1aXJlcyAkdGltZW91dFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogV2hlbiBjYWxsZWQgd2l0aCBhIGpxTGl0ZSBlbGVtZW50LCBpdCBzY3JvbGxzIHRoZSBlbGVtZW50IGludG8gdmlldyAoYWZ0ZXIgYVxuICAgKiBgJHRpbWVvdXRgIHNvIHRoZSBET00gaGFzIHRpbWUgdG8gcmVmcmVzaCkuXG4gICAqXG4gICAqIElmIHlvdSBwcmVmZXIgdG8gcmVseSBvbiBgJGFuY2hvclNjcm9sbGAgdG8gc2Nyb2xsIHRoZSB2aWV3IHRvIHRoZSBhbmNob3IsXG4gICAqIHRoaXMgY2FuIGJlIGVuYWJsZWQgYnkgY2FsbGluZyB7QGxpbmsgdWkucm91dGVyLnN0YXRlLiR1aVZpZXdTY3JvbGxQcm92aWRlciNtZXRob2RzX3VzZUFuY2hvclNjcm9sbCBgJHVpVmlld1Njcm9sbFByb3ZpZGVyLnVzZUFuY2hvclNjcm9sbCgpYH0uXG4gICAqL1xuICB0aGlzLiRnZXQgPSBbJyRhbmNob3JTY3JvbGwnLCAnJHRpbWVvdXQnLCBmdW5jdGlvbiAoJGFuY2hvclNjcm9sbCwgJHRpbWVvdXQpIHtcbiAgICBpZiAodXNlQW5jaG9yU2Nyb2xsKSB7XG4gICAgICByZXR1cm4gJGFuY2hvclNjcm9sbDtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCRlbGVtZW50KSB7XG4gICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICRlbGVtZW50WzBdLnNjcm9sbEludG9WaWV3KCk7XG4gICAgICB9LCAwLCBmYWxzZSk7XG4gICAgfTtcbiAgfV07XG59XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5yb3V0ZXIuc3RhdGUnKS5wcm92aWRlcignJHVpVmlld1Njcm9sbCcsICRWaWV3U2Nyb2xsUHJvdmlkZXIpO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIHVpLnJvdXRlci5zdGF0ZS5kaXJlY3RpdmU6dWktdmlld1xuICpcbiAqIEByZXF1aXJlcyB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlXG4gKiBAcmVxdWlyZXMgJGNvbXBpbGVcbiAqIEByZXF1aXJlcyAkY29udHJvbGxlclxuICogQHJlcXVpcmVzICRpbmplY3RvclxuICogQHJlcXVpcmVzIHVpLnJvdXRlci5zdGF0ZS4kdWlWaWV3U2Nyb2xsXG4gKiBAcmVxdWlyZXMgJGRvY3VtZW50XG4gKlxuICogQHJlc3RyaWN0IEVDQVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIHVpLXZpZXcgZGlyZWN0aXZlIHRlbGxzICRzdGF0ZSB3aGVyZSB0byBwbGFjZSB5b3VyIHRlbXBsYXRlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgQSB2aWV3IG5hbWUuIFRoZSBuYW1lIHNob3VsZCBiZSB1bmlxdWUgYW1vbmdzdCB0aGUgb3RoZXIgdmlld3MgaW4gdGhlXG4gKiBzYW1lIHN0YXRlLiBZb3UgY2FuIGhhdmUgdmlld3Mgb2YgdGhlIHNhbWUgbmFtZSB0aGF0IGxpdmUgaW4gZGlmZmVyZW50IHN0YXRlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IGF1dG9zY3JvbGwgSXQgYWxsb3dzIHlvdSB0byBzZXQgdGhlIHNjcm9sbCBiZWhhdmlvciBvZiB0aGUgYnJvd3NlciB3aW5kb3dcbiAqIHdoZW4gYSB2aWV3IGlzIHBvcHVsYXRlZC4gQnkgZGVmYXVsdCwgJGFuY2hvclNjcm9sbCBpcyBvdmVycmlkZGVuIGJ5IHVpLXJvdXRlcidzIGN1c3RvbSBzY3JvbGxcbiAqIHNlcnZpY2UsIHtAbGluayB1aS5yb3V0ZXIuc3RhdGUuJHVpVmlld1Njcm9sbH0uIFRoaXMgY3VzdG9tIHNlcnZpY2UgbGV0J3MgeW91XG4gKiBzY3JvbGwgdWktdmlldyBlbGVtZW50cyBpbnRvIHZpZXcgd2hlbiB0aGV5IGFyZSBwb3B1bGF0ZWQgZHVyaW5nIGEgc3RhdGUgYWN0aXZhdGlvbi5cbiAqXG4gKiAqTm90ZTogVG8gcmV2ZXJ0IGJhY2sgdG8gb2xkIFtgJGFuY2hvclNjcm9sbGBdKGh0dHA6Ly9kb2NzLmFuZ3VsYXJqcy5vcmcvYXBpL25nLiRhbmNob3JTY3JvbGwpXG4gKiBmdW5jdGlvbmFsaXR5LCBjYWxsIGAkdWlWaWV3U2Nyb2xsUHJvdmlkZXIudXNlQW5jaG9yU2Nyb2xsKClgLipcbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IG9ubG9hZCBFeHByZXNzaW9uIHRvIGV2YWx1YXRlIHdoZW5ldmVyIHRoZSB2aWV3IHVwZGF0ZXMuXG4gKiBcbiAqIEBleGFtcGxlXG4gKiBBIHZpZXcgY2FuIGJlIHVubmFtZWQgb3IgbmFtZWQuIFxuICogPHByZT5cbiAqIDwhLS0gVW5uYW1lZCAtLT5cbiAqIDxkaXYgdWktdmlldz48L2Rpdj4gXG4gKiBcbiAqIDwhLS0gTmFtZWQgLS0+XG4gKiA8ZGl2IHVpLXZpZXc9XCJ2aWV3TmFtZVwiPjwvZGl2PlxuICogPC9wcmU+XG4gKlxuICogWW91IGNhbiBvbmx5IGhhdmUgb25lIHVubmFtZWQgdmlldyB3aXRoaW4gYW55IHRlbXBsYXRlIChvciByb290IGh0bWwpLiBJZiB5b3UgYXJlIG9ubHkgdXNpbmcgYSBcbiAqIHNpbmdsZSB2aWV3IGFuZCBpdCBpcyB1bm5hbWVkIHRoZW4geW91IGNhbiBwb3B1bGF0ZSBpdCBsaWtlIHNvOlxuICogPHByZT5cbiAqIDxkaXYgdWktdmlldz48L2Rpdj4gXG4gKiAkc3RhdGVQcm92aWRlci5zdGF0ZShcImhvbWVcIiwge1xuICogICB0ZW1wbGF0ZTogXCI8aDE+SEVMTE8hPC9oMT5cIlxuICogfSlcbiAqIDwvcHJlPlxuICogXG4gKiBUaGUgYWJvdmUgaXMgYSBjb252ZW5pZW50IHNob3J0Y3V0IGVxdWl2YWxlbnQgdG8gc3BlY2lmeWluZyB5b3VyIHZpZXcgZXhwbGljaXRseSB3aXRoIHRoZSB7QGxpbmsgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVByb3ZpZGVyI3ZpZXdzIGB2aWV3c2B9XG4gKiBjb25maWcgcHJvcGVydHksIGJ5IG5hbWUsIGluIHRoaXMgY2FzZSBhbiBlbXB0eSBuYW1lOlxuICogPHByZT5cbiAqICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwiaG9tZVwiLCB7XG4gKiAgIHZpZXdzOiB7XG4gKiAgICAgXCJcIjoge1xuICogICAgICAgdGVtcGxhdGU6IFwiPGgxPkhFTExPITwvaDE+XCJcbiAqICAgICB9XG4gKiAgIH0gICAgXG4gKiB9KVxuICogPC9wcmU+XG4gKiBcbiAqIEJ1dCB0eXBpY2FsbHkgeW91J2xsIG9ubHkgdXNlIHRoZSB2aWV3cyBwcm9wZXJ0eSBpZiB5b3UgbmFtZSB5b3VyIHZpZXcgb3IgaGF2ZSBtb3JlIHRoYW4gb25lIHZpZXcgXG4gKiBpbiB0aGUgc2FtZSB0ZW1wbGF0ZS4gVGhlcmUncyBub3QgcmVhbGx5IGEgY29tcGVsbGluZyByZWFzb24gdG8gbmFtZSBhIHZpZXcgaWYgaXRzIHRoZSBvbmx5IG9uZSwgXG4gKiBidXQgeW91IGNvdWxkIGlmIHlvdSB3YW50ZWQsIGxpa2Ugc286XG4gKiA8cHJlPlxuICogPGRpdiB1aS12aWV3PVwibWFpblwiPjwvZGl2PlxuICogPC9wcmU+IFxuICogPHByZT5cbiAqICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwiaG9tZVwiLCB7XG4gKiAgIHZpZXdzOiB7XG4gKiAgICAgXCJtYWluXCI6IHtcbiAqICAgICAgIHRlbXBsYXRlOiBcIjxoMT5IRUxMTyE8L2gxPlwiXG4gKiAgICAgfVxuICogICB9ICAgIFxuICogfSlcbiAqIDwvcHJlPlxuICogXG4gKiBSZWFsbHkgdGhvdWdoLCB5b3UnbGwgdXNlIHZpZXdzIHRvIHNldCB1cCBtdWx0aXBsZSB2aWV3czpcbiAqIDxwcmU+XG4gKiA8ZGl2IHVpLXZpZXc+PC9kaXY+XG4gKiA8ZGl2IHVpLXZpZXc9XCJjaGFydFwiPjwvZGl2PiBcbiAqIDxkaXYgdWktdmlldz1cImRhdGFcIj48L2Rpdj4gXG4gKiA8L3ByZT5cbiAqIFxuICogPHByZT5cbiAqICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwiaG9tZVwiLCB7XG4gKiAgIHZpZXdzOiB7XG4gKiAgICAgXCJcIjoge1xuICogICAgICAgdGVtcGxhdGU6IFwiPGgxPkhFTExPITwvaDE+XCJcbiAqICAgICB9LFxuICogICAgIFwiY2hhcnRcIjoge1xuICogICAgICAgdGVtcGxhdGU6IFwiPGNoYXJ0X3RoaW5nLz5cIlxuICogICAgIH0sXG4gKiAgICAgXCJkYXRhXCI6IHtcbiAqICAgICAgIHRlbXBsYXRlOiBcIjxkYXRhX3RoaW5nLz5cIlxuICogICAgIH1cbiAqICAgfSAgICBcbiAqIH0pXG4gKiA8L3ByZT5cbiAqXG4gKiBFeGFtcGxlcyBmb3IgYGF1dG9zY3JvbGxgOlxuICpcbiAqIDxwcmU+XG4gKiA8IS0tIElmIGF1dG9zY3JvbGwgcHJlc2VudCB3aXRoIG5vIGV4cHJlc3Npb24sXG4gKiAgICAgIHRoZW4gc2Nyb2xsIHVpLXZpZXcgaW50byB2aWV3IC0tPlxuICogPHVpLXZpZXcgYXV0b3Njcm9sbC8+XG4gKlxuICogPCEtLSBJZiBhdXRvc2Nyb2xsIHByZXNlbnQgd2l0aCB2YWxpZCBleHByZXNzaW9uLFxuICogICAgICB0aGVuIHNjcm9sbCB1aS12aWV3IGludG8gdmlldyBpZiBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlIC0tPlxuICogPHVpLXZpZXcgYXV0b3Njcm9sbD0ndHJ1ZScvPlxuICogPHVpLXZpZXcgYXV0b3Njcm9sbD0nZmFsc2UnLz5cbiAqIDx1aS12aWV3IGF1dG9zY3JvbGw9J3Njb3BlVmFyaWFibGUnLz5cbiAqIDwvcHJlPlxuICovXG4kVmlld0RpcmVjdGl2ZS4kaW5qZWN0ID0gWyckc3RhdGUnLCAnJGluamVjdG9yJywgJyR1aVZpZXdTY3JvbGwnLCAnJGludGVycG9sYXRlJ107XG5mdW5jdGlvbiAkVmlld0RpcmVjdGl2ZSggICAkc3RhdGUsICAgJGluamVjdG9yLCAgICR1aVZpZXdTY3JvbGwsICAgJGludGVycG9sYXRlKSB7XG5cbiAgZnVuY3Rpb24gZ2V0U2VydmljZSgpIHtcbiAgICByZXR1cm4gKCRpbmplY3Rvci5oYXMpID8gZnVuY3Rpb24oc2VydmljZSkge1xuICAgICAgcmV0dXJuICRpbmplY3Rvci5oYXMoc2VydmljZSkgPyAkaW5qZWN0b3IuZ2V0KHNlcnZpY2UpIDogbnVsbDtcbiAgICB9IDogZnVuY3Rpb24oc2VydmljZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuICRpbmplY3Rvci5nZXQoc2VydmljZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICB2YXIgc2VydmljZSA9IGdldFNlcnZpY2UoKSxcbiAgICAgICRhbmltYXRvciA9IHNlcnZpY2UoJyRhbmltYXRvcicpLFxuICAgICAgJGFuaW1hdGUgPSBzZXJ2aWNlKCckYW5pbWF0ZScpO1xuXG4gIC8vIFJldHVybnMgYSBzZXQgb2YgRE9NIG1hbmlwdWxhdGlvbiBmdW5jdGlvbnMgYmFzZWQgb24gd2hpY2ggQW5ndWxhciB2ZXJzaW9uXG4gIC8vIGl0IHNob3VsZCB1c2VcbiAgZnVuY3Rpb24gZ2V0UmVuZGVyZXIoYXR0cnMsIHNjb3BlKSB7XG4gICAgdmFyIHN0YXRpY3MgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVudGVyOiBmdW5jdGlvbiAoZWxlbWVudCwgdGFyZ2V0LCBjYikgeyB0YXJnZXQuYWZ0ZXIoZWxlbWVudCk7IGNiKCk7IH0sXG4gICAgICAgIGxlYXZlOiBmdW5jdGlvbiAoZWxlbWVudCwgY2IpIHsgZWxlbWVudC5yZW1vdmUoKTsgY2IoKTsgfVxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgaWYgKCRhbmltYXRlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBlbnRlcjogZnVuY3Rpb24oZWxlbWVudCwgdGFyZ2V0LCBjYikge1xuICAgICAgICAgIHZhciBwcm9taXNlID0gJGFuaW1hdGUuZW50ZXIoZWxlbWVudCwgbnVsbCwgdGFyZ2V0LCBjYik7XG4gICAgICAgICAgaWYgKHByb21pc2UgJiYgcHJvbWlzZS50aGVuKSBwcm9taXNlLnRoZW4oY2IpO1xuICAgICAgICB9LFxuICAgICAgICBsZWF2ZTogZnVuY3Rpb24oZWxlbWVudCwgY2IpIHtcbiAgICAgICAgICB2YXIgcHJvbWlzZSA9ICRhbmltYXRlLmxlYXZlKGVsZW1lbnQsIGNiKTtcbiAgICAgICAgICBpZiAocHJvbWlzZSAmJiBwcm9taXNlLnRoZW4pIHByb21pc2UudGhlbihjYik7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKCRhbmltYXRvcikge1xuICAgICAgdmFyIGFuaW1hdGUgPSAkYW5pbWF0b3IgJiYgJGFuaW1hdG9yKHNjb3BlLCBhdHRycyk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVudGVyOiBmdW5jdGlvbihlbGVtZW50LCB0YXJnZXQsIGNiKSB7YW5pbWF0ZS5lbnRlcihlbGVtZW50LCBudWxsLCB0YXJnZXQpOyBjYigpOyB9LFxuICAgICAgICBsZWF2ZTogZnVuY3Rpb24oZWxlbWVudCwgY2IpIHsgYW5pbWF0ZS5sZWF2ZShlbGVtZW50KTsgY2IoKTsgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RhdGljcygpO1xuICB9XG5cbiAgdmFyIGRpcmVjdGl2ZSA9IHtcbiAgICByZXN0cmljdDogJ0VDQScsXG4gICAgdGVybWluYWw6IHRydWUsXG4gICAgcHJpb3JpdHk6IDQwMCxcbiAgICB0cmFuc2NsdWRlOiAnZWxlbWVudCcsXG4gICAgY29tcGlsZTogZnVuY3Rpb24gKHRFbGVtZW50LCB0QXR0cnMsICR0cmFuc2NsdWRlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHNjb3BlLCAkZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgdmFyIHByZXZpb3VzRWwsIGN1cnJlbnRFbCwgY3VycmVudFNjb3BlLCBsYXRlc3RMb2NhbHMsXG4gICAgICAgICAgICBvbmxvYWRFeHAgICAgID0gYXR0cnMub25sb2FkIHx8ICcnLFxuICAgICAgICAgICAgYXV0b1Njcm9sbEV4cCA9IGF0dHJzLmF1dG9zY3JvbGwsXG4gICAgICAgICAgICByZW5kZXJlciAgICAgID0gZ2V0UmVuZGVyZXIoYXR0cnMsIHNjb3BlKTtcblxuICAgICAgICBzY29wZS4kb24oJyRzdGF0ZUNoYW5nZVN1Y2Nlc3MnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB1cGRhdGVWaWV3KGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHNjb3BlLiRvbignJHZpZXdDb250ZW50TG9hZGluZycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHVwZGF0ZVZpZXcoZmFsc2UpO1xuICAgICAgICB9KTtcblxuICAgICAgICB1cGRhdGVWaWV3KHRydWUpO1xuXG4gICAgICAgIGZ1bmN0aW9uIGNsZWFudXBMYXN0VmlldygpIHtcbiAgICAgICAgICBpZiAocHJldmlvdXNFbCkge1xuICAgICAgICAgICAgcHJldmlvdXNFbC5yZW1vdmUoKTtcbiAgICAgICAgICAgIHByZXZpb3VzRWwgPSBudWxsO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjdXJyZW50U2NvcGUpIHtcbiAgICAgICAgICAgIGN1cnJlbnRTY29wZS4kZGVzdHJveSgpO1xuICAgICAgICAgICAgY3VycmVudFNjb3BlID0gbnVsbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY3VycmVudEVsKSB7XG4gICAgICAgICAgICByZW5kZXJlci5sZWF2ZShjdXJyZW50RWwsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBwcmV2aW91c0VsID0gbnVsbDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBwcmV2aW91c0VsID0gY3VycmVudEVsO1xuICAgICAgICAgICAgY3VycmVudEVsID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVWaWV3KGZpcnN0VGltZSkge1xuICAgICAgICAgIHZhciBuZXdTY29wZSxcbiAgICAgICAgICAgICAgbmFtZSAgICAgICAgICAgID0gZ2V0VWlWaWV3TmFtZShzY29wZSwgYXR0cnMsICRlbGVtZW50LCAkaW50ZXJwb2xhdGUpLFxuICAgICAgICAgICAgICBwcmV2aW91c0xvY2FscyAgPSBuYW1lICYmICRzdGF0ZS4kY3VycmVudCAmJiAkc3RhdGUuJGN1cnJlbnQubG9jYWxzW25hbWVdO1xuXG4gICAgICAgICAgaWYgKCFmaXJzdFRpbWUgJiYgcHJldmlvdXNMb2NhbHMgPT09IGxhdGVzdExvY2FscykgcmV0dXJuOyAvLyBub3RoaW5nIHRvIGRvXG4gICAgICAgICAgbmV3U2NvcGUgPSBzY29wZS4kbmV3KCk7XG4gICAgICAgICAgbGF0ZXN0TG9jYWxzID0gJHN0YXRlLiRjdXJyZW50LmxvY2Fsc1tuYW1lXTtcblxuICAgICAgICAgIHZhciBjbG9uZSA9ICR0cmFuc2NsdWRlKG5ld1Njb3BlLCBmdW5jdGlvbihjbG9uZSkge1xuICAgICAgICAgICAgcmVuZGVyZXIuZW50ZXIoY2xvbmUsICRlbGVtZW50LCBmdW5jdGlvbiBvblVpVmlld0VudGVyKCkge1xuICAgICAgICAgICAgICBpZihjdXJyZW50U2NvcGUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50U2NvcGUuJGVtaXQoJyR2aWV3Q29udGVudEFuaW1hdGlvbkVuZGVkJyk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQoYXV0b1Njcm9sbEV4cCkgJiYgIWF1dG9TY3JvbGxFeHAgfHwgc2NvcGUuJGV2YWwoYXV0b1Njcm9sbEV4cCkpIHtcbiAgICAgICAgICAgICAgICAkdWlWaWV3U2Nyb2xsKGNsb25lKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjbGVhbnVwTGFzdFZpZXcoKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGN1cnJlbnRFbCA9IGNsb25lO1xuICAgICAgICAgIGN1cnJlbnRTY29wZSA9IG5ld1Njb3BlO1xuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBldmVudFxuICAgICAgICAgICAqIEBuYW1lIHVpLnJvdXRlci5zdGF0ZS5kaXJlY3RpdmU6dWktdmlldyMkdmlld0NvbnRlbnRMb2FkZWRcbiAgICAgICAgICAgKiBAZXZlbnRPZiB1aS5yb3V0ZXIuc3RhdGUuZGlyZWN0aXZlOnVpLXZpZXdcbiAgICAgICAgICAgKiBAZXZlbnRUeXBlIGVtaXRzIG9uIHVpLXZpZXcgZGlyZWN0aXZlIHNjb3BlXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uICAgICAgICAgICAqXG4gICAgICAgICAgICogRmlyZWQgb25jZSB0aGUgdmlldyBpcyAqKmxvYWRlZCoqLCAqYWZ0ZXIqIHRoZSBET00gaXMgcmVuZGVyZWQuXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQgRXZlbnQgb2JqZWN0LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGN1cnJlbnRTY29wZS4kZW1pdCgnJHZpZXdDb250ZW50TG9hZGVkJyk7XG4gICAgICAgICAgY3VycmVudFNjb3BlLiRldmFsKG9ubG9hZEV4cCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBkaXJlY3RpdmU7XG59XG5cbiRWaWV3RGlyZWN0aXZlRmlsbC4kaW5qZWN0ID0gWyckY29tcGlsZScsICckY29udHJvbGxlcicsICckc3RhdGUnLCAnJGludGVycG9sYXRlJ107XG5mdW5jdGlvbiAkVmlld0RpcmVjdGl2ZUZpbGwgKCAgJGNvbXBpbGUsICAgJGNvbnRyb2xsZXIsICAgJHN0YXRlLCAgICRpbnRlcnBvbGF0ZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRUNBJyxcbiAgICBwcmlvcml0eTogLTQwMCxcbiAgICBjb21waWxlOiBmdW5jdGlvbiAodEVsZW1lbnQpIHtcbiAgICAgIHZhciBpbml0aWFsID0gdEVsZW1lbnQuaHRtbCgpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzY29wZSwgJGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgIHZhciBjdXJyZW50ID0gJHN0YXRlLiRjdXJyZW50LFxuICAgICAgICAgICAgbmFtZSA9IGdldFVpVmlld05hbWUoc2NvcGUsIGF0dHJzLCAkZWxlbWVudCwgJGludGVycG9sYXRlKSxcbiAgICAgICAgICAgIGxvY2FscyAgPSBjdXJyZW50ICYmIGN1cnJlbnQubG9jYWxzW25hbWVdO1xuXG4gICAgICAgIGlmICghIGxvY2Fscykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgICRlbGVtZW50LmRhdGEoJyR1aVZpZXcnLCB7IG5hbWU6IG5hbWUsIHN0YXRlOiBsb2NhbHMuJCRzdGF0ZSB9KTtcbiAgICAgICAgJGVsZW1lbnQuaHRtbChsb2NhbHMuJHRlbXBsYXRlID8gbG9jYWxzLiR0ZW1wbGF0ZSA6IGluaXRpYWwpO1xuXG4gICAgICAgIHZhciBsaW5rID0gJGNvbXBpbGUoJGVsZW1lbnQuY29udGVudHMoKSk7XG5cbiAgICAgICAgaWYgKGxvY2Fscy4kJGNvbnRyb2xsZXIpIHtcbiAgICAgICAgICBsb2NhbHMuJHNjb3BlID0gc2NvcGU7XG4gICAgICAgICAgdmFyIGNvbnRyb2xsZXIgPSAkY29udHJvbGxlcihsb2NhbHMuJCRjb250cm9sbGVyLCBsb2NhbHMpO1xuICAgICAgICAgIGlmIChsb2NhbHMuJCRjb250cm9sbGVyQXMpIHtcbiAgICAgICAgICAgIHNjb3BlW2xvY2Fscy4kJGNvbnRyb2xsZXJBc10gPSBjb250cm9sbGVyO1xuICAgICAgICAgIH1cbiAgICAgICAgICAkZWxlbWVudC5kYXRhKCckbmdDb250cm9sbGVyQ29udHJvbGxlcicsIGNvbnRyb2xsZXIpO1xuICAgICAgICAgICRlbGVtZW50LmNoaWxkcmVuKCkuZGF0YSgnJG5nQ29udHJvbGxlckNvbnRyb2xsZXInLCBjb250cm9sbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxpbmsoc2NvcGUpO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogU2hhcmVkIHVpLXZpZXcgY29kZSBmb3IgYm90aCBkaXJlY3RpdmVzOlxuICogR2l2ZW4gc2NvcGUsIGVsZW1lbnQsIGFuZCBpdHMgYXR0cmlidXRlcywgcmV0dXJuIHRoZSB2aWV3J3MgbmFtZVxuICovXG5mdW5jdGlvbiBnZXRVaVZpZXdOYW1lKHNjb3BlLCBhdHRycywgZWxlbWVudCwgJGludGVycG9sYXRlKSB7XG4gIHZhciBuYW1lID0gJGludGVycG9sYXRlKGF0dHJzLnVpVmlldyB8fCBhdHRycy5uYW1lIHx8ICcnKShzY29wZSk7XG4gIHZhciBpbmhlcml0ZWQgPSBlbGVtZW50LmluaGVyaXRlZERhdGEoJyR1aVZpZXcnKTtcbiAgcmV0dXJuIG5hbWUuaW5kZXhPZignQCcpID49IDAgPyAgbmFtZSA6ICAobmFtZSArICdAJyArIChpbmhlcml0ZWQgPyBpbmhlcml0ZWQuc3RhdGUubmFtZSA6ICcnKSk7XG59XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5yb3V0ZXIuc3RhdGUnKS5kaXJlY3RpdmUoJ3VpVmlldycsICRWaWV3RGlyZWN0aXZlKTtcbmFuZ3VsYXIubW9kdWxlKCd1aS5yb3V0ZXIuc3RhdGUnKS5kaXJlY3RpdmUoJ3VpVmlldycsICRWaWV3RGlyZWN0aXZlRmlsbCk7XG5cbmZ1bmN0aW9uIHBhcnNlU3RhdGVSZWYocmVmLCBjdXJyZW50KSB7XG4gIHZhciBwcmVwYXJzZWQgPSByZWYubWF0Y2goL15cXHMqKHtbXn1dKn0pXFxzKiQvKSwgcGFyc2VkO1xuICBpZiAocHJlcGFyc2VkKSByZWYgPSBjdXJyZW50ICsgJygnICsgcHJlcGFyc2VkWzFdICsgJyknO1xuICBwYXJzZWQgPSByZWYucmVwbGFjZSgvXFxuL2csIFwiIFwiKS5tYXRjaCgvXihbXihdKz8pXFxzKihcXCgoLiopXFwpKT8kLyk7XG4gIGlmICghcGFyc2VkIHx8IHBhcnNlZC5sZW5ndGggIT09IDQpIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgc3RhdGUgcmVmICdcIiArIHJlZiArIFwiJ1wiKTtcbiAgcmV0dXJuIHsgc3RhdGU6IHBhcnNlZFsxXSwgcGFyYW1FeHByOiBwYXJzZWRbM10gfHwgbnVsbCB9O1xufVxuXG5mdW5jdGlvbiBzdGF0ZUNvbnRleHQoZWwpIHtcbiAgdmFyIHN0YXRlRGF0YSA9IGVsLnBhcmVudCgpLmluaGVyaXRlZERhdGEoJyR1aVZpZXcnKTtcblxuICBpZiAoc3RhdGVEYXRhICYmIHN0YXRlRGF0YS5zdGF0ZSAmJiBzdGF0ZURhdGEuc3RhdGUubmFtZSkge1xuICAgIHJldHVybiBzdGF0ZURhdGEuc3RhdGU7XG4gIH1cbn1cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGUuZGlyZWN0aXZlOnVpLXNyZWZcbiAqXG4gKiBAcmVxdWlyZXMgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVxuICogQHJlcXVpcmVzICR0aW1lb3V0XG4gKlxuICogQHJlc3RyaWN0IEFcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgZGlyZWN0aXZlIHRoYXQgYmluZHMgYSBsaW5rIChgPGE+YCB0YWcpIHRvIGEgc3RhdGUuIElmIHRoZSBzdGF0ZSBoYXMgYW4gYXNzb2NpYXRlZCBcbiAqIFVSTCwgdGhlIGRpcmVjdGl2ZSB3aWxsIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGUgJiB1cGRhdGUgdGhlIGBocmVmYCBhdHRyaWJ1dGUgdmlhIFxuICogdGhlIHtAbGluayB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlI21ldGhvZHNfaHJlZiAkc3RhdGUuaHJlZigpfSBtZXRob2QuIENsaWNraW5nIFxuICogdGhlIGxpbmsgd2lsbCB0cmlnZ2VyIGEgc3RhdGUgdHJhbnNpdGlvbiB3aXRoIG9wdGlvbmFsIHBhcmFtZXRlcnMuIFxuICpcbiAqIEFsc28gbWlkZGxlLWNsaWNraW5nLCByaWdodC1jbGlja2luZywgYW5kIGN0cmwtY2xpY2tpbmcgb24gdGhlIGxpbmsgd2lsbCBiZSBcbiAqIGhhbmRsZWQgbmF0aXZlbHkgYnkgdGhlIGJyb3dzZXIuXG4gKlxuICogWW91IGNhbiBhbHNvIHVzZSByZWxhdGl2ZSBzdGF0ZSBwYXRocyB3aXRoaW4gdWktc3JlZiwganVzdCBsaWtlIHRoZSByZWxhdGl2ZSBcbiAqIHBhdGhzIHBhc3NlZCB0byBgJHN0YXRlLmdvKClgLiBZb3UganVzdCBuZWVkIHRvIGJlIGF3YXJlIHRoYXQgdGhlIHBhdGggaXMgcmVsYXRpdmVcbiAqIHRvIHRoZSBzdGF0ZSB0aGF0IHRoZSBsaW5rIGxpdmVzIGluLCBpbiBvdGhlciB3b3JkcyB0aGUgc3RhdGUgdGhhdCBsb2FkZWQgdGhlIFxuICogdGVtcGxhdGUgY29udGFpbmluZyB0aGUgbGluay5cbiAqXG4gKiBZb3UgY2FuIHNwZWNpZnkgb3B0aW9ucyB0byBwYXNzIHRvIHtAbGluayB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlI2dvICRzdGF0ZS5nbygpfVxuICogdXNpbmcgdGhlIGB1aS1zcmVmLW9wdHNgIGF0dHJpYnV0ZS4gT3B0aW9ucyBhcmUgcmVzdHJpY3RlZCB0byBgbG9jYXRpb25gLCBgaW5oZXJpdGAsXG4gKiBhbmQgYHJlbG9hZGAuXG4gKlxuICogQGV4YW1wbGVcbiAqIEhlcmUncyBhbiBleGFtcGxlIG9mIGhvdyB5b3UnZCB1c2UgdWktc3JlZiBhbmQgaG93IGl0IHdvdWxkIGNvbXBpbGUuIElmIHlvdSBoYXZlIHRoZSBcbiAqIGZvbGxvd2luZyB0ZW1wbGF0ZTpcbiAqIDxwcmU+XG4gKiA8YSB1aS1zcmVmPVwiaG9tZVwiPkhvbWU8L2E+IHwgPGEgdWktc3JlZj1cImFib3V0XCI+QWJvdXQ8L2E+IHwgPGEgdWktc3JlZj1cIntwYWdlOiAyfVwiPk5leHQgcGFnZTwvYT5cbiAqIFxuICogPHVsPlxuICogICAgIDxsaSBuZy1yZXBlYXQ9XCJjb250YWN0IGluIGNvbnRhY3RzXCI+XG4gKiAgICAgICAgIDxhIHVpLXNyZWY9XCJjb250YWN0cy5kZXRhaWwoeyBpZDogY29udGFjdC5pZCB9KVwiPnt7IGNvbnRhY3QubmFtZSB9fTwvYT5cbiAqICAgICA8L2xpPlxuICogPC91bD5cbiAqIDwvcHJlPlxuICogXG4gKiBUaGVuIHRoZSBjb21waWxlZCBodG1sIHdvdWxkIGJlIChhc3N1bWluZyBIdG1sNU1vZGUgaXMgb2ZmIGFuZCBjdXJyZW50IHN0YXRlIGlzIGNvbnRhY3RzKTpcbiAqIDxwcmU+XG4gKiA8YSBocmVmPVwiIy9ob21lXCIgdWktc3JlZj1cImhvbWVcIj5Ib21lPC9hPiB8IDxhIGhyZWY9XCIjL2Fib3V0XCIgdWktc3JlZj1cImFib3V0XCI+QWJvdXQ8L2E+IHwgPGEgaHJlZj1cIiMvY29udGFjdHM/cGFnZT0yXCIgdWktc3JlZj1cIntwYWdlOiAyfVwiPk5leHQgcGFnZTwvYT5cbiAqIFxuICogPHVsPlxuICogICAgIDxsaSBuZy1yZXBlYXQ9XCJjb250YWN0IGluIGNvbnRhY3RzXCI+XG4gKiAgICAgICAgIDxhIGhyZWY9XCIjL2NvbnRhY3RzLzFcIiB1aS1zcmVmPVwiY29udGFjdHMuZGV0YWlsKHsgaWQ6IGNvbnRhY3QuaWQgfSlcIj5Kb2U8L2E+XG4gKiAgICAgPC9saT5cbiAqICAgICA8bGkgbmctcmVwZWF0PVwiY29udGFjdCBpbiBjb250YWN0c1wiPlxuICogICAgICAgICA8YSBocmVmPVwiIy9jb250YWN0cy8yXCIgdWktc3JlZj1cImNvbnRhY3RzLmRldGFpbCh7IGlkOiBjb250YWN0LmlkIH0pXCI+QWxpY2U8L2E+XG4gKiAgICAgPC9saT5cbiAqICAgICA8bGkgbmctcmVwZWF0PVwiY29udGFjdCBpbiBjb250YWN0c1wiPlxuICogICAgICAgICA8YSBocmVmPVwiIy9jb250YWN0cy8zXCIgdWktc3JlZj1cImNvbnRhY3RzLmRldGFpbCh7IGlkOiBjb250YWN0LmlkIH0pXCI+Qm9iPC9hPlxuICogICAgIDwvbGk+XG4gKiA8L3VsPlxuICpcbiAqIDxhIHVpLXNyZWY9XCJob21lXCIgdWktc3JlZi1vcHRzPVwie3JlbG9hZDogdHJ1ZX1cIj5Ib21lPC9hPlxuICogPC9wcmU+XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVpLXNyZWYgJ3N0YXRlTmFtZScgY2FuIGJlIGFueSB2YWxpZCBhYnNvbHV0ZSBvciByZWxhdGl2ZSBzdGF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHVpLXNyZWYtb3B0cyBvcHRpb25zIHRvIHBhc3MgdG8ge0BsaW5rIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGUjZ28gJHN0YXRlLmdvKCl9XG4gKi9cbiRTdGF0ZVJlZkRpcmVjdGl2ZS4kaW5qZWN0ID0gWyckc3RhdGUnLCAnJHRpbWVvdXQnXTtcbmZ1bmN0aW9uICRTdGF0ZVJlZkRpcmVjdGl2ZSgkc3RhdGUsICR0aW1lb3V0KSB7XG4gIHZhciBhbGxvd2VkT3B0aW9ucyA9IFsnbG9jYXRpb24nLCAnaW5oZXJpdCcsICdyZWxvYWQnXTtcblxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcmVxdWlyZTogWyc/XnVpU3JlZkFjdGl2ZScsICc/XnVpU3JlZkFjdGl2ZUVxJ10sXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCB1aVNyZWZBY3RpdmUpIHtcbiAgICAgIHZhciByZWYgPSBwYXJzZVN0YXRlUmVmKGF0dHJzLnVpU3JlZiwgJHN0YXRlLmN1cnJlbnQubmFtZSk7XG4gICAgICB2YXIgcGFyYW1zID0gbnVsbCwgdXJsID0gbnVsbCwgYmFzZSA9IHN0YXRlQ29udGV4dChlbGVtZW50KSB8fCAkc3RhdGUuJGN1cnJlbnQ7XG4gICAgICB2YXIgbmV3SHJlZiA9IG51bGwsIGlzQW5jaG9yID0gZWxlbWVudC5wcm9wKFwidGFnTmFtZVwiKSA9PT0gXCJBXCI7XG4gICAgICB2YXIgaXNGb3JtID0gZWxlbWVudFswXS5ub2RlTmFtZSA9PT0gXCJGT1JNXCI7XG4gICAgICB2YXIgYXR0ciA9IGlzRm9ybSA/IFwiYWN0aW9uXCIgOiBcImhyZWZcIiwgbmF2ID0gdHJ1ZTtcblxuICAgICAgdmFyIG9wdGlvbnMgPSB7IHJlbGF0aXZlOiBiYXNlLCBpbmhlcml0OiB0cnVlIH07XG4gICAgICB2YXIgb3B0aW9uc092ZXJyaWRlID0gc2NvcGUuJGV2YWwoYXR0cnMudWlTcmVmT3B0cykgfHwge307XG5cbiAgICAgIGFuZ3VsYXIuZm9yRWFjaChhbGxvd2VkT3B0aW9ucywgZnVuY3Rpb24ob3B0aW9uKSB7XG4gICAgICAgIGlmIChvcHRpb24gaW4gb3B0aW9uc092ZXJyaWRlKSB7XG4gICAgICAgICAgb3B0aW9uc1tvcHRpb25dID0gb3B0aW9uc092ZXJyaWRlW29wdGlvbl07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB2YXIgdXBkYXRlID0gZnVuY3Rpb24obmV3VmFsKSB7XG4gICAgICAgIGlmIChuZXdWYWwpIHBhcmFtcyA9IGFuZ3VsYXIuY29weShuZXdWYWwpO1xuICAgICAgICBpZiAoIW5hdikgcmV0dXJuO1xuXG4gICAgICAgIG5ld0hyZWYgPSAkc3RhdGUuaHJlZihyZWYuc3RhdGUsIHBhcmFtcywgb3B0aW9ucyk7XG5cbiAgICAgICAgdmFyIGFjdGl2ZURpcmVjdGl2ZSA9IHVpU3JlZkFjdGl2ZVsxXSB8fCB1aVNyZWZBY3RpdmVbMF07XG4gICAgICAgIGlmIChhY3RpdmVEaXJlY3RpdmUpIHtcbiAgICAgICAgICBhY3RpdmVEaXJlY3RpdmUuJCRzZXRTdGF0ZUluZm8ocmVmLnN0YXRlLCBwYXJhbXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuZXdIcmVmID09PSBudWxsKSB7XG4gICAgICAgICAgbmF2ID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGF0dHJzLiRzZXQoYXR0ciwgbmV3SHJlZik7XG4gICAgICB9O1xuXG4gICAgICBpZiAocmVmLnBhcmFtRXhwcikge1xuICAgICAgICBzY29wZS4kd2F0Y2gocmVmLnBhcmFtRXhwciwgZnVuY3Rpb24obmV3VmFsLCBvbGRWYWwpIHtcbiAgICAgICAgICBpZiAobmV3VmFsICE9PSBwYXJhbXMpIHVwZGF0ZShuZXdWYWwpO1xuICAgICAgICB9LCB0cnVlKTtcbiAgICAgICAgcGFyYW1zID0gYW5ndWxhci5jb3B5KHNjb3BlLiRldmFsKHJlZi5wYXJhbUV4cHIpKTtcbiAgICAgIH1cbiAgICAgIHVwZGF0ZSgpO1xuXG4gICAgICBpZiAoaXNGb3JtKSByZXR1cm47XG5cbiAgICAgIGVsZW1lbnQuYmluZChcImNsaWNrXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIGJ1dHRvbiA9IGUud2hpY2ggfHwgZS5idXR0b247XG4gICAgICAgIGlmICggIShidXR0b24gPiAxIHx8IGUuY3RybEtleSB8fCBlLm1ldGFLZXkgfHwgZS5zaGlmdEtleSB8fCBlbGVtZW50LmF0dHIoJ3RhcmdldCcpKSApIHtcbiAgICAgICAgICAvLyBIQUNLOiBUaGlzIGlzIHRvIGFsbG93IG5nLWNsaWNrcyB0byBiZSBwcm9jZXNzZWQgYmVmb3JlIHRoZSB0cmFuc2l0aW9uIGlzIGluaXRpYXRlZDpcbiAgICAgICAgICB2YXIgdHJhbnNpdGlvbiA9ICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJHN0YXRlLmdvKHJlZi5zdGF0ZSwgcGFyYW1zLCBvcHRpb25zKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAvLyBpZiB0aGUgc3RhdGUgaGFzIG5vIFVSTCwgaWdub3JlIG9uZSBwcmV2ZW50RGVmYXVsdCBmcm9tIHRoZSA8YT4gZGlyZWN0aXZlLlxuICAgICAgICAgIHZhciBpZ25vcmVQcmV2ZW50RGVmYXVsdENvdW50ID0gaXNBbmNob3IgJiYgIW5ld0hyZWYgPyAxOiAwO1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChpZ25vcmVQcmV2ZW50RGVmYXVsdENvdW50LS0gPD0gMClcbiAgICAgICAgICAgICAgJHRpbWVvdXQuY2FuY2VsKHRyYW5zaXRpb24pO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGUuZGlyZWN0aXZlOnVpLXNyZWYtYWN0aXZlXG4gKlxuICogQHJlcXVpcmVzIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVcbiAqIEByZXF1aXJlcyB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlUGFyYW1zXG4gKiBAcmVxdWlyZXMgJGludGVycG9sYXRlXG4gKlxuICogQHJlc3RyaWN0IEFcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgZGlyZWN0aXZlIHdvcmtpbmcgYWxvbmdzaWRlIHVpLXNyZWYgdG8gYWRkIGNsYXNzZXMgdG8gYW4gZWxlbWVudCB3aGVuIHRoZVxuICogcmVsYXRlZCB1aS1zcmVmIGRpcmVjdGl2ZSdzIHN0YXRlIGlzIGFjdGl2ZSwgYW5kIHJlbW92aW5nIHRoZW0gd2hlbiBpdCBpcyBpbmFjdGl2ZS5cbiAqIFRoZSBwcmltYXJ5IHVzZS1jYXNlIGlzIHRvIHNpbXBsaWZ5IHRoZSBzcGVjaWFsIGFwcGVhcmFuY2Ugb2YgbmF2aWdhdGlvbiBtZW51c1xuICogcmVseWluZyBvbiBgdWktc3JlZmAsIGJ5IGhhdmluZyB0aGUgXCJhY3RpdmVcIiBzdGF0ZSdzIG1lbnUgYnV0dG9uIGFwcGVhciBkaWZmZXJlbnQsXG4gKiBkaXN0aW5ndWlzaGluZyBpdCBmcm9tIHRoZSBpbmFjdGl2ZSBtZW51IGl0ZW1zLlxuICpcbiAqIHVpLXNyZWYtYWN0aXZlIGNhbiBsaXZlIG9uIHRoZSBzYW1lIGVsZW1lbnQgYXMgdWktc3JlZiBvciBvbiBhIHBhcmVudCBlbGVtZW50LiBUaGUgZmlyc3RcbiAqIHVpLXNyZWYtYWN0aXZlIGZvdW5kIGF0IHRoZSBzYW1lIGxldmVsIG9yIGFib3ZlIHRoZSB1aS1zcmVmIHdpbGwgYmUgdXNlZC5cbiAqXG4gKiBXaWxsIGFjdGl2YXRlIHdoZW4gdGhlIHVpLXNyZWYncyB0YXJnZXQgc3RhdGUgb3IgYW55IGNoaWxkIHN0YXRlIGlzIGFjdGl2ZS4gSWYgeW91XG4gKiBuZWVkIHRvIGFjdGl2YXRlIG9ubHkgd2hlbiB0aGUgdWktc3JlZiB0YXJnZXQgc3RhdGUgaXMgYWN0aXZlIGFuZCAqbm90KiBhbnkgb2ZcbiAqIGl0J3MgY2hpbGRyZW4sIHRoZW4geW91IHdpbGwgdXNlXG4gKiB7QGxpbmsgdWkucm91dGVyLnN0YXRlLmRpcmVjdGl2ZTp1aS1zcmVmLWFjdGl2ZS1lcSB1aS1zcmVmLWFjdGl2ZS1lcX1cbiAqXG4gKiBAZXhhbXBsZVxuICogR2l2ZW4gdGhlIGZvbGxvd2luZyB0ZW1wbGF0ZTpcbiAqIDxwcmU+XG4gKiA8dWw+XG4gKiAgIDxsaSB1aS1zcmVmLWFjdGl2ZT1cImFjdGl2ZVwiIGNsYXNzPVwiaXRlbVwiPlxuICogICAgIDxhIGhyZWYgdWktc3JlZj1cImFwcC51c2VyKHt1c2VyOiAnYmlsYm9iYWdnaW5zJ30pXCI+QGJpbGJvYmFnZ2luczwvYT5cbiAqICAgPC9saT5cbiAqIDwvdWw+XG4gKiA8L3ByZT5cbiAqXG4gKlxuICogV2hlbiB0aGUgYXBwIHN0YXRlIGlzIFwiYXBwLnVzZXJcIiAob3IgYW55IGNoaWxkcmVuIHN0YXRlcyksIGFuZCBjb250YWlucyB0aGUgc3RhdGUgcGFyYW1ldGVyIFwidXNlclwiIHdpdGggdmFsdWUgXCJiaWxib2JhZ2dpbnNcIixcbiAqIHRoZSByZXN1bHRpbmcgSFRNTCB3aWxsIGFwcGVhciBhcyAobm90ZSB0aGUgJ2FjdGl2ZScgY2xhc3MpOlxuICogPHByZT5cbiAqIDx1bD5cbiAqICAgPGxpIHVpLXNyZWYtYWN0aXZlPVwiYWN0aXZlXCIgY2xhc3M9XCJpdGVtIGFjdGl2ZVwiPlxuICogICAgIDxhIHVpLXNyZWY9XCJhcHAudXNlcih7dXNlcjogJ2JpbGJvYmFnZ2lucyd9KVwiIGhyZWY9XCIvdXNlcnMvYmlsYm9iYWdnaW5zXCI+QGJpbGJvYmFnZ2luczwvYT5cbiAqICAgPC9saT5cbiAqIDwvdWw+XG4gKiA8L3ByZT5cbiAqXG4gKiBUaGUgY2xhc3MgbmFtZSBpcyBpbnRlcnBvbGF0ZWQgKipvbmNlKiogZHVyaW5nIHRoZSBkaXJlY3RpdmVzIGxpbmsgdGltZSAoYW55IGZ1cnRoZXIgY2hhbmdlcyB0byB0aGVcbiAqIGludGVycG9sYXRlZCB2YWx1ZSBhcmUgaWdub3JlZCkuXG4gKlxuICogTXVsdGlwbGUgY2xhc3NlcyBtYXkgYmUgc3BlY2lmaWVkIGluIGEgc3BhY2Utc2VwYXJhdGVkIGZvcm1hdDpcbiAqIDxwcmU+XG4gKiA8dWw+XG4gKiAgIDxsaSB1aS1zcmVmLWFjdGl2ZT0nY2xhc3MxIGNsYXNzMiBjbGFzczMnPlxuICogICAgIDxhIHVpLXNyZWY9XCJhcHAudXNlclwiPmxpbms8L2E+XG4gKiAgIDwvbGk+XG4gKiA8L3VsPlxuICogPC9wcmU+XG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGUuZGlyZWN0aXZlOnVpLXNyZWYtYWN0aXZlLWVxXG4gKlxuICogQHJlcXVpcmVzIHVpLnJvdXRlci5zdGF0ZS4kc3RhdGVcbiAqIEByZXF1aXJlcyB1aS5yb3V0ZXIuc3RhdGUuJHN0YXRlUGFyYW1zXG4gKiBAcmVxdWlyZXMgJGludGVycG9sYXRlXG4gKlxuICogQHJlc3RyaWN0IEFcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBzYW1lIGFzIHtAbGluayB1aS5yb3V0ZXIuc3RhdGUuZGlyZWN0aXZlOnVpLXNyZWYtYWN0aXZlIHVpLXNyZWYtYWN0aXZlfSBidXQgd2lsbCBvbmx5IGFjdGl2YXRlXG4gKiB3aGVuIHRoZSBleGFjdCB0YXJnZXQgc3RhdGUgdXNlZCBpbiB0aGUgYHVpLXNyZWZgIGlzIGFjdGl2ZTsgbm8gY2hpbGQgc3RhdGVzLlxuICpcbiAqL1xuJFN0YXRlUmVmQWN0aXZlRGlyZWN0aXZlLiRpbmplY3QgPSBbJyRzdGF0ZScsICckc3RhdGVQYXJhbXMnLCAnJGludGVycG9sYXRlJ107XG5mdW5jdGlvbiAkU3RhdGVSZWZBY3RpdmVEaXJlY3RpdmUoJHN0YXRlLCAkc3RhdGVQYXJhbXMsICRpbnRlcnBvbGF0ZSkge1xuICByZXR1cm4gIHtcbiAgICByZXN0cmljdDogXCJBXCIsXG4gICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJGVsZW1lbnQnLCAnJGF0dHJzJywgZnVuY3Rpb24gKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycykge1xuICAgICAgdmFyIHN0YXRlLCBwYXJhbXMsIGFjdGl2ZUNsYXNzO1xuXG4gICAgICAvLyBUaGVyZSBwcm9iYWJseSBpc24ndCBtdWNoIHBvaW50IGluICRvYnNlcnZpbmcgdGhpc1xuICAgICAgLy8gdWlTcmVmQWN0aXZlIGFuZCB1aVNyZWZBY3RpdmVFcSBzaGFyZSB0aGUgc2FtZSBkaXJlY3RpdmUgb2JqZWN0IHdpdGggc29tZVxuICAgICAgLy8gc2xpZ2h0IGRpZmZlcmVuY2UgaW4gbG9naWMgcm91dGluZ1xuICAgICAgYWN0aXZlQ2xhc3MgPSAkaW50ZXJwb2xhdGUoJGF0dHJzLnVpU3JlZkFjdGl2ZUVxIHx8ICRhdHRycy51aVNyZWZBY3RpdmUgfHwgJycsIGZhbHNlKSgkc2NvcGUpO1xuXG4gICAgICAvLyBBbGxvdyB1aVNyZWYgdG8gY29tbXVuaWNhdGUgd2l0aCB1aVNyZWZBY3RpdmVbRXF1YWxzXVxuICAgICAgdGhpcy4kJHNldFN0YXRlSW5mbyA9IGZ1bmN0aW9uIChuZXdTdGF0ZSwgbmV3UGFyYW1zKSB7XG4gICAgICAgIHN0YXRlID0gJHN0YXRlLmdldChuZXdTdGF0ZSwgc3RhdGVDb250ZXh0KCRlbGVtZW50KSk7XG4gICAgICAgIHBhcmFtcyA9IG5ld1BhcmFtcztcbiAgICAgICAgdXBkYXRlKCk7XG4gICAgICB9O1xuXG4gICAgICAkc2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VTdWNjZXNzJywgdXBkYXRlKTtcblxuICAgICAgLy8gVXBkYXRlIHJvdXRlIHN0YXRlXG4gICAgICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICAgIGlmIChpc01hdGNoKCkpIHtcbiAgICAgICAgICAkZWxlbWVudC5hZGRDbGFzcyhhY3RpdmVDbGFzcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJGVsZW1lbnQucmVtb3ZlQ2xhc3MoYWN0aXZlQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGlzTWF0Y2goKSB7XG4gICAgICAgIGlmICh0eXBlb2YgJGF0dHJzLnVpU3JlZkFjdGl2ZUVxICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHJldHVybiBzdGF0ZSAmJiAkc3RhdGUuaXMoc3RhdGUubmFtZSwgcGFyYW1zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gc3RhdGUgJiYgJHN0YXRlLmluY2x1ZGVzKHN0YXRlLm5hbWUsIHBhcmFtcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XVxuICB9O1xufVxuXG5hbmd1bGFyLm1vZHVsZSgndWkucm91dGVyLnN0YXRlJylcbiAgLmRpcmVjdGl2ZSgndWlTcmVmJywgJFN0YXRlUmVmRGlyZWN0aXZlKVxuICAuZGlyZWN0aXZlKCd1aVNyZWZBY3RpdmUnLCAkU3RhdGVSZWZBY3RpdmVEaXJlY3RpdmUpXG4gIC5kaXJlY3RpdmUoJ3VpU3JlZkFjdGl2ZUVxJywgJFN0YXRlUmVmQWN0aXZlRGlyZWN0aXZlKTtcblxuLyoqXG4gKiBAbmdkb2MgZmlsdGVyXG4gKiBAbmFtZSB1aS5yb3V0ZXIuc3RhdGUuZmlsdGVyOmlzU3RhdGVcbiAqXG4gKiBAcmVxdWlyZXMgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVHJhbnNsYXRlcyB0byB7QGxpbmsgdWkucm91dGVyLnN0YXRlLiRzdGF0ZSNtZXRob2RzX2lzICRzdGF0ZS5pcyhcInN0YXRlTmFtZVwiKX0uXG4gKi9cbiRJc1N0YXRlRmlsdGVyLiRpbmplY3QgPSBbJyRzdGF0ZSddO1xuZnVuY3Rpb24gJElzU3RhdGVGaWx0ZXIoJHN0YXRlKSB7XG4gIHZhciBpc0ZpbHRlciA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgIHJldHVybiAkc3RhdGUuaXMoc3RhdGUpO1xuICB9O1xuICBpc0ZpbHRlci4kc3RhdGVmdWwgPSB0cnVlO1xuICByZXR1cm4gaXNGaWx0ZXI7XG59XG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUgdWkucm91dGVyLnN0YXRlLmZpbHRlcjppbmNsdWRlZEJ5U3RhdGVcbiAqXG4gKiBAcmVxdWlyZXMgdWkucm91dGVyLnN0YXRlLiRzdGF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVHJhbnNsYXRlcyB0byB7QGxpbmsgdWkucm91dGVyLnN0YXRlLiRzdGF0ZSNtZXRob2RzX2luY2x1ZGVzICRzdGF0ZS5pbmNsdWRlcygnZnVsbE9yUGFydGlhbFN0YXRlTmFtZScpfS5cbiAqL1xuJEluY2x1ZGVkQnlTdGF0ZUZpbHRlci4kaW5qZWN0ID0gWyckc3RhdGUnXTtcbmZ1bmN0aW9uICRJbmNsdWRlZEJ5U3RhdGVGaWx0ZXIoJHN0YXRlKSB7XG4gIHZhciBpbmNsdWRlc0ZpbHRlciA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgIHJldHVybiAkc3RhdGUuaW5jbHVkZXMoc3RhdGUpO1xuICB9O1xuICBpbmNsdWRlc0ZpbHRlci4kc3RhdGVmdWwgPSB0cnVlO1xuICByZXR1cm4gIGluY2x1ZGVzRmlsdGVyO1xufVxuXG5hbmd1bGFyLm1vZHVsZSgndWkucm91dGVyLnN0YXRlJylcbiAgLmZpbHRlcignaXNTdGF0ZScsICRJc1N0YXRlRmlsdGVyKVxuICAuZmlsdGVyKCdpbmNsdWRlZEJ5U3RhdGUnLCAkSW5jbHVkZWRCeVN0YXRlRmlsdGVyKTtcbn0pKHdpbmRvdywgd2luZG93LmFuZ3VsYXIpO1xuJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBwcm92aWRlclxuICAgICAqIEBuYW1lICR3ZWJzb2NrZXRQcm92aWRlclxuICAgICAqIEBtb2R1bGUgbmdXZWJzb2NrZXRcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBIVE1MNSBXZWJTb2NrZXQgcHJvdmlkZXIgZm9yIEFuZ3VsYXJKU1xuICAgICAqL1xuICAgIGZ1bmN0aW9uICR3ZWJzb2NrZXRQcm92aWRlciAoKSB7XG4gICAgICAgIHZhciB3c3AgPSB0aGlzO1xuXG4gICAgICAgIHdzcC4kJGNvbmZpZyA9IHtcbiAgICAgICAgICAgIGxhenk6IGZhbHNlLFxuICAgICAgICAgICAgcmVjb25uZWN0OiB0cnVlLFxuICAgICAgICAgICAgcmVjb25uZWN0SW50ZXJ2YWw6IDIwMDAsXG4gICAgICAgICAgICBtb2NrOiBmYWxzZSxcbiAgICAgICAgICAgIGVucXVldWU6IGZhbHNlLFxuICAgICAgICAgICAgcHJvdG9jb2xzOiBudWxsXG4gICAgICAgIH07XG5cbiAgICAgICAgd3NwLiRzZXR1cCA9IGZ1bmN0aW9uIChjZmcpIHtcbiAgICAgICAgICAgIGNmZyA9IGNmZyB8fCB7fTtcbiAgICAgICAgICAgIHdzcC4kJGNvbmZpZyA9IGFuZ3VsYXIuZXh0ZW5kKHt9LCB3c3AuJCRjb25maWcsIGNmZyk7XG5cbiAgICAgICAgICAgIHJldHVybiB3c3A7XG4gICAgICAgIH07XG5cbiAgICAgICAgd3NwLiRnZXQgPSBbJyRodHRwJywgZnVuY3Rpb24gKCRodHRwKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3ICR3ZWJzb2NrZXRTZXJ2aWNlKHdzcC4kJGNvbmZpZywgJGh0dHApO1xuICAgICAgICB9XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2Mgc2VydmljZVxuICAgICAqIEBuYW1lICR3ZWJzb2NrZXRTZXJ2aWNlXG4gICAgICogQG1vZHVsZSBuZ1dlYnNvY2tldFNlcnZpY2VcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBIVE1MNSBXZWJzb2NrZXQgc2VydmljZSBmb3IgQW5ndWxhckpTXG4gICAgICovXG4gICAgZnVuY3Rpb24gJHdlYnNvY2tldFNlcnZpY2UgKGNmZywgJGh0dHApIHtcbiAgICAgICAgdmFyIHdzcyA9IHRoaXM7XG5cbiAgICAgICAgd3NzLiQkd2Vic29ja2V0TGlzdCA9IHt9O1xuICAgICAgICB3c3MuJCRjb25maWcgPSBjZmcgfHwge307XG5cbiAgICAgICAgd3NzLiRnZXQgPSBmdW5jdGlvbiAodXJsKSB7XG4gICAgICAgICAgICByZXR1cm4gd3NzLiQkd2Vic29ja2V0TGlzdFt1cmxdO1xuICAgICAgICB9O1xuXG4gICAgICAgIHdzcy4kbmV3ID0gZnVuY3Rpb24gKGNmZykge1xuICAgICAgICAgICAgY2ZnID0gY2ZnIHx8IHt9O1xuXG4gICAgICAgICAgICAvLyBVcmwgb3IgdXJsICsgcHJvdG9jb2xzIGluaXRpYWxpemF0aW9uXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNmZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBjZmcgPSB7dXJsOiBjZmd9O1xuXG4gICAgICAgICAgICAgICAgLy8gdXJsICsgcHJvdG9jb2xzXG4gICAgICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzWzFdID09PSAnc3RyaW5nJyAmJiBhcmd1bWVudHNbMV0ubGVuZ3RoID4gMCkgY2ZnLnByb3RvY29scyA9IFthcmd1bWVudHNbMV1dO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgYXJndW1lbnRzWzFdID09PSAnb2JqZWN0JyAmJiBhcmd1bWVudHNbMV0ubGVuZ3RoID4gMCkgY2ZnLnByb3RvY29scyA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSB3ZWJzb2NrZXQgYWxyZWFkeSBleGlzdHMsIHJldHVybiB0aGF0IGluc3RhbmNlXG4gICAgICAgICAgICB2YXIgd3MgPSB3c3MuJGdldChjZmcudXJsKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygd3MgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgdmFyIHdzQ2ZnID0gYW5ndWxhci5leHRlbmQoe30sIHdzcy4kJGNvbmZpZywgY2ZnKTtcblxuICAgICAgICAgICAgICAgIHdzID0gbmV3ICR3ZWJzb2NrZXQod3NDZmcsICRodHRwKTtcbiAgICAgICAgICAgICAgICB3c3MuJCR3ZWJzb2NrZXRMaXN0W3dzQ2ZnLnVybF0gPSB3cztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHdzO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBjbGFzc1xuICAgICAqIEBuYW1lICR3ZWJzb2NrZXRcbiAgICAgKiBAbW9kdWxlIG5nV2Vic29ja2V0XG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogSFRNTDUgV2Vic29ja2V0IHdyYXBwZXIgY2xhc3MgZm9yIEFuZ3VsYXJKU1xuICAgICAqL1xuICAgIGZ1bmN0aW9uICR3ZWJzb2NrZXQgKGNmZywgJGh0dHApIHtcbiAgICAgICAgdmFyIG1lID0gdGhpcztcblxuICAgICAgICBpZiAodHlwZW9mIGNmZyA9PT0gJ3VuZGVmaW5lZCcgfHwgKHR5cGVvZiBjZmcgPT09ICdvYmplY3QnICYmIHR5cGVvZiBjZmcudXJsID09PSAndW5kZWZpbmVkJykpIHRocm93IG5ldyBFcnJvcignQW4gdXJsIG11c3QgYmUgc3BlY2lmaWVkIGZvciBXZWJTb2NrZXQnKTtcblxuICAgICAgICBtZS4kJGV2ZW50TWFwID0ge307XG4gICAgICAgIG1lLiQkd3MgPSB1bmRlZmluZWQ7XG4gICAgICAgIG1lLiQkcmVjb25uZWN0VGFzayA9IHVuZGVmaW5lZDtcbiAgICAgICAgbWUuJCRyZWNvbm5lY3RDb3B5ID0gdHJ1ZTtcbiAgICAgICAgbWUuJCRxdWV1ZSA9IFtdO1xuICAgICAgICBtZS4kJGNvbmZpZyA9IHtcbiAgICAgICAgICAgIHVybDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgbGF6eTogZmFsc2UsXG4gICAgICAgICAgICByZWNvbm5lY3Q6IHRydWUsXG4gICAgICAgICAgICByZWNvbm5lY3RJbnRlcnZhbDogMjAwMCxcbiAgICAgICAgICAgIGVucXVldWU6IGZhbHNlLFxuICAgICAgICAgICAgbW9jazogZmFsc2UsXG4gICAgICAgICAgICBwcm90b2NvbHM6IG51bGxcbiAgICAgICAgfTtcblxuICAgICAgICBtZS4kJGZpcmVFdmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gW107XG5cbiAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGFyZ3MsIGFyZ3VtZW50cyk7XG5cbiAgICAgICAgICAgIHZhciBldmVudCA9IGFyZ3Muc2hpZnQoKSxcbiAgICAgICAgICAgICAgICBoYW5kbGVycyA9IG1lLiQkZXZlbnRNYXBbZXZlbnRdO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGhhbmRsZXJzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGFuZGxlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyc1tpXSA9PT0gJ2Z1bmN0aW9uJykgaGFuZGxlcnNbaV0uYXBwbHkobWUsIGFyZ3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBtZS4kJGluaXQgPSBmdW5jdGlvbiAoY2ZnKSB7XG4gICAgICAgICAgICBtZS4kJHdzID0gY2ZnLm1vY2sgPyBuZXcgJCRtb2NrV2Vic29ja2V0KGNmZy5tb2NrLCAkaHR0cCkgOiBuZXcgV2ViU29ja2V0KGNmZy51cmwsIGNmZy5wcm90b2NvbHMpO1xuXG4gICAgICAgICAgICBtZS4kJHdzLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlY29kZWQgPSBKU09OLnBhcnNlKG1lc3NhZ2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIG1lLiQkZmlyZUV2ZW50KGRlY29kZWQuZXZlbnQsIGRlY29kZWQuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIG1lLiQkZmlyZUV2ZW50KCckbWVzc2FnZScsIGRlY29kZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lLiQkZmlyZUV2ZW50KCckbWVzc2FnZScsIG1lc3NhZ2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgbWUuJCR3cy5vbmVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgbWUuJCRmaXJlRXZlbnQoJyRlcnJvcicsIGVycm9yKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIG1lLiQkd3Mub25vcGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8vIENsZWFyIHRoZSByZWNvbm5lY3QgdGFzayBpZiBleGlzdHNcbiAgICAgICAgICAgICAgICBpZiAobWUuJCRyZWNvbm5lY3RUYXNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwobWUuJCRyZWNvbm5lY3RUYXNrKTtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG1lLiQkcmVjb25uZWN0VGFzaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBGbHVzaCB0aGUgbWVzc2FnZSBxdWV1ZVxuICAgICAgICAgICAgICAgIGlmIChtZS4kJGNvbmZpZy5lbnF1ZXVlICYmIG1lLiQkcXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAobWUuJCRxdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWUuJHJlYWR5KCkpIG1lLiQkc2VuZChtZS4kJHF1ZXVlLnNoaWZ0KCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIG1lLiQkZmlyZUV2ZW50KCckb3BlbicpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgbWUuJCR3cy5vbmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8vIEFjdGl2YXRlIHRoZSByZWNvbm5lY3QgdGFza1xuICAgICAgICAgICAgICAgIGlmIChtZS4kJGNvbmZpZy5yZWNvbm5lY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgbWUuJCRyZWNvbm5lY3RUYXNrID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1lLiRzdGF0dXMoKSA9PT0gbWUuJENMT1NFRCkgbWUuJG9wZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgbWUuJCRjb25maWcucmVjb25uZWN0SW50ZXJ2YWwpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIG1lLiQkZmlyZUV2ZW50KCckY2xvc2UnKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiBtZTtcbiAgICAgICAgfTtcblxuICAgICAgICBtZS4kQ09OTkVDVElORyA9IDA7XG4gICAgICAgIG1lLiRPUEVOID0gMTtcbiAgICAgICAgbWUuJENMT1NJTkcgPSAyO1xuICAgICAgICBtZS4kQ0xPU0VEID0gMztcblxuICAgICAgICAvLyBUT0RPOiBpdCBkb2Vzbid0IHJlZnJlc2ggdGhlIHZpZXcgKG1heWJlICRhcHBseSBvbiBzb21ldGhpbmc/KVxuICAgICAgICAvKm1lLiRiaW5kID0gZnVuY3Rpb24gKGV2ZW50LCBzY29wZSwgbW9kZWwpIHtcbiAgICAgICAgIG1lLiRvbihldmVudCwgZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgIG1vZGVsID0gbWVzc2FnZTtcbiAgICAgICAgIHNjb3BlLiRhcHBseSgpO1xuICAgICAgICAgfSk7XG4gICAgICAgICB9OyovXG5cbiAgICAgICAgbWUuJG9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZXJzID0gW107XG5cbiAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGhhbmRsZXJzLCBhcmd1bWVudHMpO1xuXG4gICAgICAgICAgICB2YXIgZXZlbnQgPSBoYW5kbGVycy5zaGlmdCgpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBldmVudCAhPT0gJ3N0cmluZycgfHwgaGFuZGxlcnMubGVuZ3RoID09PSAwKSB0aHJvdyBuZXcgRXJyb3IoJyRvbiBhY2NlcHQgdHdvIHBhcmFtZXRlcnMgYXQgbGVhc3Q6IGEgU3RyaW5nIGFuZCBhIEZ1bmN0aW9uIG9yIGFuIGFycmF5IG9mIEZ1bmN0aW9ucycpO1xuXG4gICAgICAgICAgICBtZS4kJGV2ZW50TWFwW2V2ZW50XSA9IG1lLiQkZXZlbnRNYXBbZXZlbnRdIHx8IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoYW5kbGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIG1lLiQkZXZlbnRNYXBbZXZlbnRdLnB1c2goaGFuZGxlcnNbaV0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbWU7XG4gICAgICAgIH07XG5cbiAgICAgICAgbWUuJHVuID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGV2ZW50ICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IEVycm9yKCckdW4gbmVlZHMgYSBTdHJpbmcgcmVwcmVzZW50aW5nIGFuIGV2ZW50LicpO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIG1lLiQkZXZlbnRNYXBbZXZlbnRdICE9PSAndW5kZWZpbmVkJykgZGVsZXRlIG1lLiQkZXZlbnRNYXBbZXZlbnRdO1xuXG4gICAgICAgICAgICByZXR1cm4gbWU7XG4gICAgICAgIH07XG5cbiAgICAgICAgbWUuJCRzZW5kID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIGlmIChtZS4kcmVhZHkoKSkgbWUuJCR3cy5zZW5kKEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UpKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKG1lLiQkY29uZmlnLmVucXVldWUpIG1lLiQkcXVldWUucHVzaChtZXNzYWdlKTtcbiAgICAgICAgfTtcblxuICAgICAgICBtZS4kZW1pdCA9IGZ1bmN0aW9uIChldmVudCwgZGF0YSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBldmVudCAhPT0gJ3N0cmluZycpIHRocm93IG5ldyBFcnJvcignJGVtaXQgbmVlZHMgdHdvIHBhcmFtZXRlcjogYSBTdHJpbmcgYW5kIGEgT2JqZWN0IG9yIGEgU3RyaW5nJyk7XG5cbiAgICAgICAgICAgIHZhciBtZXNzYWdlID0ge1xuICAgICAgICAgICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgICAgICAgICBkYXRhOiBkYXRhXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBtZS4kJHNlbmQobWVzc2FnZSk7XG5cbiAgICAgICAgICAgIHJldHVybiBtZTtcbiAgICAgICAgfTtcblxuICAgICAgICBtZS4kb3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG1lLiQkY29uZmlnLnJlY29ubmVjdCA9IG1lLiQkcmVjb25uZWN0Q29weTtcblxuICAgICAgICAgICAgaWYgKG1lLiRzdGF0dXMoKSAhPT0gbWUuJE9QRU4pIG1lLiQkaW5pdChtZS4kJGNvbmZpZyk7XG4gICAgICAgICAgICByZXR1cm4gbWU7XG4gICAgICAgIH07XG5cbiAgICAgICAgbWUuJGNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKG1lLiRzdGF0dXMoKSAhPT0gbWUuJENMT1NFRCkgbWUuJCR3cy5jbG9zZSgpO1xuXG4gICAgICAgICAgICBpZiAobWUuJCRyZWNvbm5lY3RUYXNrKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChtZS4kJHJlY29ubmVjdFRhc2spO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBtZS4kJHJlY29ubmVjdFRhc2s7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1lLiQkY29uZmlnLnJlY29ubmVjdCA9IGZhbHNlO1xuXG4gICAgICAgICAgICByZXR1cm4gbWU7XG4gICAgICAgIH07XG5cbiAgICAgICAgbWUuJHN0YXR1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbWUuJCR3cyA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiBtZS4kQ0xPU0VEO1xuICAgICAgICAgICAgZWxzZSByZXR1cm4gbWUuJCR3cy5yZWFkeVN0YXRlO1xuICAgICAgICB9O1xuXG4gICAgICAgIG1lLiRyZWFkeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBtZS4kc3RhdHVzKCkgPT09IG1lLiRPUEVOO1xuICAgICAgICB9O1xuXG4gICAgICAgIG1lLiRtb2NrdXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gbWUuJCRjb25maWcubW9jaztcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBzZXR1cFxuICAgICAgICBtZS4kJGNvbmZpZyA9IGFuZ3VsYXIuZXh0ZW5kKHt9LCBtZS4kJGNvbmZpZywgY2ZnKTtcbiAgICAgICAgbWUuJCRyZWNvbm5lY3RDb3B5ID0gbWUuJCRjb25maWcucmVjb25uZWN0O1xuXG4gICAgICAgIGlmICghbWUuJCRjb25maWcubGF6eSkgbWUuJCRpbml0KG1lLiQkY29uZmlnKTtcblxuICAgICAgICByZXR1cm4gbWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gJCRtb2NrV2Vic29ja2V0IChjZmcsICRodHRwKSB7XG4gICAgICAgIGNmZyA9IGNmZyB8fCB7fTtcblxuICAgICAgICB2YXIgbWUgPSB0aGlzLFxuICAgICAgICAgICAgb3BlblRpbWVvdXQgPSBjZmcub3BlblRpbWVvdXQgfHwgNTAwLFxuICAgICAgICAgICAgY2xvc2VUaW1lb3V0ID0gY2ZnLmNsb3NlVGltZW91dCB8fCAxMDAwLFxuICAgICAgICAgICAgbWVzc2FnZUludGVydmFsID0gY2ZnLm1lc3NhZ2VJbnRlcnZhbCB8fCAyMDAwLFxuICAgICAgICAgICAgZml4dHVyZXMgPSBjZmcuZml4dHVyZXMgfHwge30sXG4gICAgICAgICAgICBtZXNzYWdlUXVldWUgPSBbXTtcblxuICAgICAgICBtZS5DT05ORUNUSU5HID0gMDtcbiAgICAgICAgbWUuT1BFTiA9IDE7XG4gICAgICAgIG1lLkNMT1NJTkcgPSAyO1xuICAgICAgICBtZS5DTE9TRUQgPSAzO1xuXG4gICAgICAgIG1lLnJlYWR5U3RhdGUgPSBtZS5DT05ORUNUSU5HO1xuXG4gICAgICAgIG1lLnNlbmQgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICAgICAgaWYgKG1lLnJlYWR5U3RhdGUgPT09IG1lLk9QRU4pIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlUXVldWUucHVzaChtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHRocm93IG5ldyBFcnJvcignV2ViU29ja2V0IGlzIGFscmVhZHkgaW4gQ0xPU0lORyBvciBDTE9TRUQgc3RhdGUuJyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgbWUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAobWUucmVhZHlTdGF0ZSA9PT0gbWUuT1BFTikge1xuICAgICAgICAgICAgICAgIG1lLnJlYWR5U3RhdGUgPSBtZS5DTE9TSU5HO1xuXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lLnJlYWR5U3RhdGUgPSBtZS5DTE9TRUQ7XG5cbiAgICAgICAgICAgICAgICAgICAgbWUub25jbG9zZSgpO1xuICAgICAgICAgICAgICAgIH0sIGNsb3NlVGltZW91dCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBtZTtcbiAgICAgICAgfTtcblxuICAgICAgICBtZS5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICAgICAgbWUub25lcnJvciA9IGZ1bmN0aW9uICgpIHt9O1xuICAgICAgICBtZS5vbm9wZW4gPSBmdW5jdGlvbiAoKSB7fTtcbiAgICAgICAgbWUub25jbG9zZSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgICAgIHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlUXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gbWVzc2FnZVF1ZXVlLnNoaWZ0KCksXG4gICAgICAgICAgICAgICAgICAgIG1zZ09iaiA9IEpTT04ucGFyc2UobWVzc2FnZSk7XG5cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG1zZ09iai5ldmVudCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICckY2xvc2UnOlxuICAgICAgICAgICAgICAgICAgICAgICAgbWUuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIGEgY3VzdG9tIHJlc3BvbnNlXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZpeHR1cmVzW21zZ09iai5ldmVudF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbXNnT2JqLmRhdGEgPSBmaXh0dXJlc1ttc2dPYmouZXZlbnRdLmRhdGEgfHwgbXNnT2JqLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbXNnT2JqLmV2ZW50ID0gZml4dHVyZXNbbXNnT2JqLmV2ZW50XS5ldmVudCB8fCBtc2dPYmouZXZlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBKU09OLnN0cmluZ2lmeShtc2dPYmopO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBtZS5vbm1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IG1lc3NhZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgbWVzc2FnZUludGVydmFsKTtcblxuICAgICAgICB2YXIgc3RhcnQgPSBmdW5jdGlvbiAoZml4cykge1xuICAgICAgICAgICAgZml4cyA9IGZpeHMgfHwge307XG4gICAgICAgICAgICBmaXhzID0gZml4cyBpbnN0YW5jZW9mIEVycm9yID8ge30gOiBmaXhzO1xuXG4gICAgICAgICAgICBmaXh0dXJlcyA9IGZpeHM7XG5cbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIG1lLnJlYWR5U3RhdGUgPSBtZS5PUEVOO1xuICAgICAgICAgICAgICAgIG1lLm9ub3BlbigpO1xuICAgICAgICAgICAgfSwgb3BlblRpbWVvdXQpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEdldCBmaXh0dXJlcyBmcm9tIGEgc2VydmVyIG9yIGEgZmlsZSBpZiBpdCdzIGEgc3RyaW5nXG4gICAgICAgIGlmICh0eXBlb2YgZml4dHVyZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAkaHR0cC5nZXQoZml4dHVyZXMpXG4gICAgICAgICAgICAgICAgLnN1Y2Nlc3Moc3RhcnQpXG4gICAgICAgICAgICAgICAgLmVycm9yKHN0YXJ0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHN0YXJ0KGZpeHR1cmVzKTtcblxuICAgICAgICByZXR1cm4gbWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1vZHVsZVxuICAgICAqIEBuYW1lICR3ZWJzb2NrZXRcbiAgICAgKiBAbW9kdWxlIG5nV2Vic29ja2V0XG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogSFRNTDUgV2ViU29ja2V0IG1vZHVsZSBmb3IgQW5ndWxhckpTXG4gICAgICovXG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCduZ1dlYnNvY2tldCcsIFtdKVxuICAgICAgICAucHJvdmlkZXIoJyR3ZWJzb2NrZXQnLCAkd2Vic29ja2V0UHJvdmlkZXIpO1xufSkoKTtcbi8qKlxuICogQGxpY2Vuc2UgQW5ndWxhckpTIHYxLjMuMTNcbiAqIChjKSAyMDEwLTIwMTQgR29vZ2xlLCBJbmMuIGh0dHA6Ly9hbmd1bGFyanMub3JnXG4gKiBMaWNlbnNlOiBNSVRcbiAqL1xuKGZ1bmN0aW9uKHdpbmRvdywgYW5ndWxhciwgdW5kZWZpbmVkKSB7J3VzZSBzdHJpY3QnO1xuXG4vKiBqc2hpbnQgbWF4bGVuOiBmYWxzZSAqL1xuXG4vKipcbiAqIEBuZ2RvYyBtb2R1bGVcbiAqIEBuYW1lIG5nQW5pbWF0ZVxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVGhlIGBuZ0FuaW1hdGVgIG1vZHVsZSBwcm92aWRlcyBzdXBwb3J0IGZvciBKYXZhU2NyaXB0LCBDU1MzIHRyYW5zaXRpb24gYW5kIENTUzMga2V5ZnJhbWUgYW5pbWF0aW9uIGhvb2tzIHdpdGhpbiBleGlzdGluZyBjb3JlIGFuZCBjdXN0b20gZGlyZWN0aXZlcy5cbiAqXG4gKiA8ZGl2IGRvYy1tb2R1bGUtY29tcG9uZW50cz1cIm5nQW5pbWF0ZVwiPjwvZGl2PlxuICpcbiAqICMgVXNhZ2VcbiAqXG4gKiBUbyBzZWUgYW5pbWF0aW9ucyBpbiBhY3Rpb24sIGFsbCB0aGF0IGlzIHJlcXVpcmVkIGlzIHRvIGRlZmluZSB0aGUgYXBwcm9wcmlhdGUgQ1NTIGNsYXNzZXNcbiAqIG9yIHRvIHJlZ2lzdGVyIGEgSmF2YVNjcmlwdCBhbmltYXRpb24gdmlhIHRoZSBgbXlNb2R1bGUuYW5pbWF0aW9uKClgIGZ1bmN0aW9uLiBUaGUgZGlyZWN0aXZlcyB0aGF0IHN1cHBvcnQgYW5pbWF0aW9uIGF1dG9tYXRpY2FsbHkgYXJlOlxuICogYG5nUmVwZWF0YCwgYG5nSW5jbHVkZWAsIGBuZ0lmYCwgYG5nU3dpdGNoYCwgYG5nU2hvd2AsIGBuZ0hpZGVgLCBgbmdWaWV3YCBhbmQgYG5nQ2xhc3NgLiBDdXN0b20gZGlyZWN0aXZlcyBjYW4gdGFrZSBhZHZhbnRhZ2Ugb2YgYW5pbWF0aW9uXG4gKiBieSB1c2luZyB0aGUgYCRhbmltYXRlYCBzZXJ2aWNlLlxuICpcbiAqIEJlbG93IGlzIGEgbW9yZSBkZXRhaWxlZCBicmVha2Rvd24gb2YgdGhlIHN1cHBvcnRlZCBhbmltYXRpb24gZXZlbnRzIHByb3ZpZGVkIGJ5IHByZS1leGlzdGluZyBuZyBkaXJlY3RpdmVzOlxuICpcbiAqIHwgRGlyZWN0aXZlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTdXBwb3J0ZWQgQW5pbWF0aW9ucyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8IHtAbGluayBuZy5kaXJlY3RpdmU6bmdSZXBlYXQjYW5pbWF0aW9ucyBuZ1JlcGVhdH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZW50ZXIsIGxlYXZlIGFuZCBtb3ZlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwge0BsaW5rIG5nUm91dGUuZGlyZWN0aXZlOm5nVmlldyNhbmltYXRpb25zIG5nVmlld30gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlbnRlciBhbmQgbGVhdmUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nSW5jbHVkZSNhbmltYXRpb25zIG5nSW5jbHVkZX0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVudGVyIGFuZCBsZWF2ZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IHtAbGluayBuZy5kaXJlY3RpdmU6bmdTd2l0Y2gjYW5pbWF0aW9ucyBuZ1N3aXRjaH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZW50ZXIgYW5kIGxlYXZlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0lmI2FuaW1hdGlvbnMgbmdJZn0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlbnRlciBhbmQgbGVhdmUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xhc3MjYW5pbWF0aW9ucyBuZ0NsYXNzfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFkZCBhbmQgcmVtb3ZlICh0aGUgQ1NTIGNsYXNzKGVzKSBwcmVzZW50KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IHtAbGluayBuZy5kaXJlY3RpdmU6bmdTaG93I2FuaW1hdGlvbnMgbmdTaG93fSAmIHtAbGluayBuZy5kaXJlY3RpdmU6bmdIaWRlI2FuaW1hdGlvbnMgbmdIaWRlfSAgICAgICAgICAgIHwgYWRkIGFuZCByZW1vdmUgKHRoZSBuZy1oaWRlIGNsYXNzIHZhbHVlKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwge0BsaW5rIG5nLmRpcmVjdGl2ZTpmb3JtI2FuaW1hdGlvbi1ob29rcyBmb3JtfSAmIHtAbGluayBuZy5kaXJlY3RpdmU6bmdNb2RlbCNhbmltYXRpb24taG9va3MgbmdNb2RlbH0gICAgfCBhZGQgYW5kIHJlbW92ZSAoZGlydHksIHByaXN0aW5lLCB2YWxpZCwgaW52YWxpZCAmIGFsbCBvdGhlciB2YWxpZGF0aW9ucykgfFxuICogfCB7QGxpbmsgbW9kdWxlOm5nTWVzc2FnZXMjYW5pbWF0aW9ucyBuZ01lc3NhZ2VzfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFkZCBhbmQgcmVtb3ZlIChuZy1hY3RpdmUgJiBuZy1pbmFjdGl2ZSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IHtAbGluayBtb2R1bGU6bmdNZXNzYWdlcyNhbmltYXRpb25zIG5nTWVzc2FnZX0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZW50ZXIgYW5kIGxlYXZlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqXG4gKiBZb3UgY2FuIGZpbmQgb3V0IG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgYW5pbWF0aW9ucyB1cG9uIHZpc2l0aW5nIGVhY2ggZGlyZWN0aXZlIHBhZ2UuXG4gKlxuICogQmVsb3cgaXMgYW4gZXhhbXBsZSBvZiBob3cgdG8gYXBwbHkgYW5pbWF0aW9ucyB0byBhIGRpcmVjdGl2ZSB0aGF0IHN1cHBvcnRzIGFuaW1hdGlvbiBob29rczpcbiAqXG4gKiBgYGBodG1sXG4gKiA8c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+XG4gKiAuc2xpZGUubmctZW50ZXIsIC5zbGlkZS5uZy1sZWF2ZSB7XG4gKiAgIC13ZWJraXQtdHJhbnNpdGlvbjowLjVzIGxpbmVhciBhbGw7XG4gKiAgIHRyYW5zaXRpb246MC41cyBsaW5lYXIgYWxsO1xuICogfVxuICpcbiAqIC5zbGlkZS5uZy1lbnRlciB7IH0gICAgICAgIC8mIzQyOyBzdGFydGluZyBhbmltYXRpb25zIGZvciBlbnRlciAmIzQyOy9cbiAqIC5zbGlkZS5uZy1lbnRlci5uZy1lbnRlci1hY3RpdmUgeyB9IC8mIzQyOyB0ZXJtaW5hbCBhbmltYXRpb25zIGZvciBlbnRlciAmIzQyOy9cbiAqIC5zbGlkZS5uZy1sZWF2ZSB7IH0gICAgICAgIC8mIzQyOyBzdGFydGluZyBhbmltYXRpb25zIGZvciBsZWF2ZSAmIzQyOy9cbiAqIC5zbGlkZS5uZy1sZWF2ZS5uZy1sZWF2ZS1hY3RpdmUgeyB9IC8mIzQyOyB0ZXJtaW5hbCBhbmltYXRpb25zIGZvciBsZWF2ZSAmIzQyOy9cbiAqIDwvc3R5bGU+XG4gKlxuICogPCEtLVxuICogdGhlIGFuaW1hdGUgc2VydmljZSB3aWxsIGF1dG9tYXRpY2FsbHkgYWRkIC5uZy1lbnRlciBhbmQgLm5nLWxlYXZlIHRvIHRoZSBlbGVtZW50XG4gKiB0byB0cmlnZ2VyIHRoZSBDU1MgdHJhbnNpdGlvbi9hbmltYXRpb25zXG4gKiAtLT5cbiAqIDxBTlkgY2xhc3M9XCJzbGlkZVwiIG5nLWluY2x1ZGU9XCIuLi5cIj48L0FOWT5cbiAqIGBgYFxuICpcbiAqIEtlZXAgaW4gbWluZCB0aGF0LCBieSBkZWZhdWx0LCBpZiBhbiBhbmltYXRpb24gaXMgcnVubmluZywgYW55IGNoaWxkIGVsZW1lbnRzIGNhbm5vdCBiZSBhbmltYXRlZFxuICogdW50aWwgdGhlIHBhcmVudCBlbGVtZW50J3MgYW5pbWF0aW9uIGhhcyBjb21wbGV0ZWQuIFRoaXMgYmxvY2tpbmcgZmVhdHVyZSBjYW4gYmUgb3ZlcnJpZGRlbiBieVxuICogcGxhY2luZyB0aGUgYG5nLWFuaW1hdGUtY2hpbGRyZW5gIGF0dHJpYnV0ZSBvbiBhIHBhcmVudCBjb250YWluZXIgdGFnLlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgY2xhc3M9XCJzbGlkZS1hbmltYXRpb25cIiBuZy1pZj1cIm9uXCIgbmctYW5pbWF0ZS1jaGlsZHJlbj5cbiAqICAgPGRpdiBjbGFzcz1cImZhZGUtYW5pbWF0aW9uXCIgbmctaWY9XCJvblwiPlxuICogICAgIDxkaXYgY2xhc3M9XCJleHBsb2RlLWFuaW1hdGlvblwiIG5nLWlmPVwib25cIj5cbiAqICAgICAgICAuLi5cbiAqICAgICA8L2Rpdj5cbiAqICAgPC9kaXY+XG4gKiA8L2Rpdj5cbiAqIGBgYFxuICpcbiAqIFdoZW4gdGhlIGBvbmAgZXhwcmVzc2lvbiB2YWx1ZSBjaGFuZ2VzIGFuZCBhbiBhbmltYXRpb24gaXMgdHJpZ2dlcmVkIHRoZW4gZWFjaCBvZiB0aGUgZWxlbWVudHMgd2l0aGluXG4gKiB3aWxsIGFsbCBhbmltYXRlIHdpdGhvdXQgdGhlIGJsb2NrIGJlaW5nIGFwcGxpZWQgdG8gY2hpbGQgZWxlbWVudHMuXG4gKlxuICogIyMgQXJlIGFuaW1hdGlvbnMgcnVuIHdoZW4gdGhlIGFwcGxpY2F0aW9uIHN0YXJ0cz9cbiAqIE5vIHRoZXkgYXJlIG5vdC4gV2hlbiBhbiBhcHBsaWNhdGlvbiBpcyBib290c3RyYXBwZWQgQW5ndWxhciB3aWxsIGRpc2FibGUgYW5pbWF0aW9ucyBmcm9tIHJ1bm5pbmcgdG8gYXZvaWRcbiAqIGEgZnJlbnp5IG9mIGFuaW1hdGlvbnMgZnJvbSBiZWluZyB0cmlnZ2VyZWQgYXMgc29vbiBhcyB0aGUgYnJvd3NlciBoYXMgcmVuZGVyZWQgdGhlIHNjcmVlbi4gRm9yIHRoaXMgdG8gd29yayxcbiAqIEFuZ3VsYXIgd2lsbCB3YWl0IGZvciB0d28gZGlnZXN0IGN5Y2xlcyB1bnRpbCBlbmFibGluZyBhbmltYXRpb25zLiBGcm9tIHRoZXJlIG9uLCBhbnkgYW5pbWF0aW9uLXRyaWdnZXJpbmdcbiAqIGxheW91dCBjaGFuZ2VzIGluIHRoZSBhcHBsaWNhdGlvbiB3aWxsIHRyaWdnZXIgYW5pbWF0aW9ucyBhcyBub3JtYWwuXG4gKlxuICogSW4gYWRkaXRpb24sIHVwb24gYm9vdHN0cmFwLCBpZiB0aGUgcm91dGluZyBzeXN0ZW0gb3IgYW55IGRpcmVjdGl2ZXMgb3IgbG9hZCByZW1vdGUgZGF0YSAodmlhICRodHRwKSB0aGVuIEFuZ3VsYXJcbiAqIHdpbGwgYXV0b21hdGljYWxseSBleHRlbmQgdGhlIHdhaXQgdGltZSB0byBlbmFibGUgYW5pbWF0aW9ucyBvbmNlICoqYWxsKiogb2YgdGhlIG91dGJvdW5kIEhUVFAgcmVxdWVzdHNcbiAqIGFyZSBjb21wbGV0ZS5cbiAqXG4gKiAjIyBDU1MtZGVmaW5lZCBBbmltYXRpb25zXG4gKiBUaGUgYW5pbWF0ZSBzZXJ2aWNlIHdpbGwgYXV0b21hdGljYWxseSBhcHBseSB0d28gQ1NTIGNsYXNzZXMgdG8gdGhlIGFuaW1hdGVkIGVsZW1lbnQgYW5kIHRoZXNlIHR3byBDU1MgY2xhc3Nlc1xuICogYXJlIGRlc2lnbmVkIHRvIGNvbnRhaW4gdGhlIHN0YXJ0IGFuZCBlbmQgQ1NTIHN0eWxpbmcuIEJvdGggQ1NTIHRyYW5zaXRpb25zIGFuZCBrZXlmcmFtZSBhbmltYXRpb25zIGFyZSBzdXBwb3J0ZWRcbiAqIGFuZCBjYW4gYmUgdXNlZCB0byBwbGF5IGFsb25nIHdpdGggdGhpcyBuYW1pbmcgc3RydWN0dXJlLlxuICpcbiAqIFRoZSBmb2xsb3dpbmcgY29kZSBiZWxvdyBkZW1vbnN0cmF0ZXMgaG93IHRvIHBlcmZvcm0gYW5pbWF0aW9ucyB1c2luZyAqKkNTUyB0cmFuc2l0aW9ucyoqIHdpdGggQW5ndWxhcjpcbiAqXG4gKiBgYGBodG1sXG4gKiA8c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+XG4gKiAvJiM0MjtcbiAqICBUaGUgYW5pbWF0ZSBjbGFzcyBpcyBhcGFydCBvZiB0aGUgZWxlbWVudCBhbmQgdGhlIG5nLWVudGVyIGNsYXNzXG4gKiAgaXMgYXR0YWNoZWQgdG8gdGhlIGVsZW1lbnQgb25jZSB0aGUgZW50ZXIgYW5pbWF0aW9uIGV2ZW50IGlzIHRyaWdnZXJlZFxuICogJiM0MjsvXG4gKiAucmV2ZWFsLWFuaW1hdGlvbi5uZy1lbnRlciB7XG4gKiAgLXdlYmtpdC10cmFuc2l0aW9uOiAxcyBsaW5lYXIgYWxsOyAvJiM0MjsgU2FmYXJpL0Nocm9tZSAmIzQyOy9cbiAqICB0cmFuc2l0aW9uOiAxcyBsaW5lYXIgYWxsOyAvJiM0MjsgQWxsIG90aGVyIG1vZGVybiBicm93c2VycyBhbmQgSUUxMCsgJiM0MjsvXG4gKlxuICogIC8mIzQyOyBUaGUgYW5pbWF0aW9uIHByZXBhcmF0aW9uIGNvZGUgJiM0MjsvXG4gKiAgb3BhY2l0eTogMDtcbiAqIH1cbiAqXG4gKiAvJiM0MjtcbiAqICBLZWVwIGluIG1pbmQgdGhhdCB5b3Ugd2FudCB0byBjb21iaW5lIGJvdGggQ1NTXG4gKiAgY2xhc3NlcyB0b2dldGhlciB0byBhdm9pZCBhbnkgQ1NTLXNwZWNpZmljaXR5XG4gKiAgY29uZmxpY3RzXG4gKiAmIzQyOy9cbiAqIC5yZXZlYWwtYW5pbWF0aW9uLm5nLWVudGVyLm5nLWVudGVyLWFjdGl2ZSB7XG4gKiAgLyYjNDI7IFRoZSBhbmltYXRpb24gY29kZSBpdHNlbGYgJiM0MjsvXG4gKiAgb3BhY2l0eTogMTtcbiAqIH1cbiAqIDwvc3R5bGU+XG4gKlxuICogPGRpdiBjbGFzcz1cInZpZXctY29udGFpbmVyXCI+XG4gKiAgIDxkaXYgbmctdmlldyBjbGFzcz1cInJldmVhbC1hbmltYXRpb25cIj48L2Rpdj5cbiAqIDwvZGl2PlxuICogYGBgXG4gKlxuICogVGhlIGZvbGxvd2luZyBjb2RlIGJlbG93IGRlbW9uc3RyYXRlcyBob3cgdG8gcGVyZm9ybSBhbmltYXRpb25zIHVzaW5nICoqQ1NTIGFuaW1hdGlvbnMqKiB3aXRoIEFuZ3VsYXI6XG4gKlxuICogYGBgaHRtbFxuICogPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPlxuICogLnJldmVhbC1hbmltYXRpb24ubmctZW50ZXIge1xuICogICAtd2Via2l0LWFuaW1hdGlvbjogZW50ZXJfc2VxdWVuY2UgMXMgbGluZWFyOyAvJiM0MjsgU2FmYXJpL0Nocm9tZSAmIzQyOy9cbiAqICAgYW5pbWF0aW9uOiBlbnRlcl9zZXF1ZW5jZSAxcyBsaW5lYXI7IC8mIzQyOyBJRTEwKyBhbmQgRnV0dXJlIEJyb3dzZXJzICYjNDI7L1xuICogfVxuICogQC13ZWJraXQta2V5ZnJhbWVzIGVudGVyX3NlcXVlbmNlIHtcbiAqICAgZnJvbSB7IG9wYWNpdHk6MDsgfVxuICogICB0byB7IG9wYWNpdHk6MTsgfVxuICogfVxuICogQGtleWZyYW1lcyBlbnRlcl9zZXF1ZW5jZSB7XG4gKiAgIGZyb20geyBvcGFjaXR5OjA7IH1cbiAqICAgdG8geyBvcGFjaXR5OjE7IH1cbiAqIH1cbiAqIDwvc3R5bGU+XG4gKlxuICogPGRpdiBjbGFzcz1cInZpZXctY29udGFpbmVyXCI+XG4gKiAgIDxkaXYgbmctdmlldyBjbGFzcz1cInJldmVhbC1hbmltYXRpb25cIj48L2Rpdj5cbiAqIDwvZGl2PlxuICogYGBgXG4gKlxuICogQm90aCBDU1MzIGFuaW1hdGlvbnMgYW5kIHRyYW5zaXRpb25zIGNhbiBiZSB1c2VkIHRvZ2V0aGVyIGFuZCB0aGUgYW5pbWF0ZSBzZXJ2aWNlIHdpbGwgZmlndXJlIG91dCB0aGUgY29ycmVjdCBkdXJhdGlvbiBhbmQgZGVsYXkgdGltaW5nLlxuICpcbiAqIFVwb24gRE9NIG11dGF0aW9uLCB0aGUgZXZlbnQgY2xhc3MgaXMgYWRkZWQgZmlyc3QgKHNvbWV0aGluZyBsaWtlIGBuZy1lbnRlcmApLCB0aGVuIHRoZSBicm93c2VyIHByZXBhcmVzIGl0c2VsZiB0byBhZGRcbiAqIHRoZSBhY3RpdmUgY2xhc3MgKGluIHRoaXMgY2FzZSBgbmctZW50ZXItYWN0aXZlYCkgd2hpY2ggdGhlbiB0cmlnZ2VycyB0aGUgYW5pbWF0aW9uLiBUaGUgYW5pbWF0aW9uIG1vZHVsZSB3aWxsIGF1dG9tYXRpY2FsbHlcbiAqIGRldGVjdCB0aGUgQ1NTIGNvZGUgdG8gZGV0ZXJtaW5lIHdoZW4gdGhlIGFuaW1hdGlvbiBlbmRzLiBPbmNlIHRoZSBhbmltYXRpb24gaXMgb3ZlciB0aGVuIGJvdGggQ1NTIGNsYXNzZXMgd2lsbCBiZVxuICogcmVtb3ZlZCBmcm9tIHRoZSBET00uIElmIGEgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IENTUyB0cmFuc2l0aW9ucyBvciBDU1MgYW5pbWF0aW9ucyB0aGVuIHRoZSBhbmltYXRpb24gd2lsbCBzdGFydCBhbmQgZW5kXG4gKiBpbW1lZGlhdGVseSByZXN1bHRpbmcgaW4gYSBET00gZWxlbWVudCB0aGF0IGlzIGF0IGl0cyBmaW5hbCBzdGF0ZS4gVGhpcyBmaW5hbCBzdGF0ZSBpcyB3aGVuIHRoZSBET00gZWxlbWVudFxuICogaGFzIG5vIENTUyB0cmFuc2l0aW9uL2FuaW1hdGlvbiBjbGFzc2VzIGFwcGxpZWQgdG8gaXQuXG4gKlxuICogIyMjIFN0cnVjdHVyYWwgdHJhbnNpdGlvbiBhbmltYXRpb25zXG4gKlxuICogU3RydWN0dXJhbCB0cmFuc2l0aW9ucyAoc3VjaCBhcyBlbnRlciwgbGVhdmUgYW5kIG1vdmUpIHdpbGwgYWx3YXlzIGFwcGx5IGEgYDBzIG5vbmVgIHRyYW5zaXRpb25cbiAqIHZhbHVlIHRvIGZvcmNlIHRoZSBicm93c2VyIGludG8gcmVuZGVyaW5nIHRoZSBzdHlsZXMgZGVmaW5lZCBpbiB0aGUgc2V0dXAgKGAubmctZW50ZXJgLCBgLm5nLWxlYXZlYFxuICogb3IgYC5uZy1tb3ZlYCkgY2xhc3MuIFRoaXMgbWVhbnMgdGhhdCBhbnkgYWN0aXZlIHRyYW5zaXRpb24gYW5pbWF0aW9ucyBvcGVyYXRpbmcgb24gdGhlIGVsZW1lbnRcbiAqIHdpbGwgYmUgY3V0IG9mZiB0byBtYWtlIHdheSBmb3IgdGhlIGVudGVyLCBsZWF2ZSBvciBtb3ZlIGFuaW1hdGlvbi5cbiAqXG4gKiAjIyMgQ2xhc3MtYmFzZWQgdHJhbnNpdGlvbiBhbmltYXRpb25zXG4gKlxuICogQ2xhc3MtYmFzZWQgdHJhbnNpdGlvbnMgcmVmZXIgdG8gdHJhbnNpdGlvbiBhbmltYXRpb25zIHRoYXQgYXJlIHRyaWdnZXJlZCB3aGVuIGEgQ1NTIGNsYXNzIGlzXG4gKiBhZGRlZCB0byBvciByZW1vdmVkIGZyb20gdGhlIGVsZW1lbnQgKHZpYSBgJGFuaW1hdGUuYWRkQ2xhc3NgLCBgJGFuaW1hdGUucmVtb3ZlQ2xhc3NgLFxuICogYCRhbmltYXRlLnNldENsYXNzYCwgb3IgYnkgZGlyZWN0aXZlcyBzdWNoIGFzIGBuZ0NsYXNzYCwgYG5nTW9kZWxgIGFuZCBgZm9ybWApLlxuICogVGhleSBhcmUgZGlmZmVyZW50IHdoZW4gY29tcGFyZWQgdG8gc3RydWN0dXJhbCBhbmltYXRpb25zIHNpbmNlIHRoZXkgKipkbyBub3QgY2FuY2VsIGV4aXN0aW5nXG4gKiBhbmltYXRpb25zKiogbm9yIGRvIHRoZXkgKipibG9jayBzdWNjZXNzaXZlIHRyYW5zaXRpb25zKiogZnJvbSByZW5kZXJpbmcgb24gdGhlIHNhbWUgZWxlbWVudC5cbiAqIFRoaXMgZGlzdGluY3Rpb24gYWxsb3dzIGZvciAqKm11bHRpcGxlIGNsYXNzLWJhc2VkIHRyYW5zaXRpb25zKiogdG8gYmUgcGVyZm9ybWVkIG9uIHRoZSBzYW1lIGVsZW1lbnQuXG4gKlxuICogSW4gYWRkaXRpb24gdG8gbmdBbmltYXRlIHN1cHBvcnRpbmcgdGhlIGRlZmF1bHQgKG5hdHVyYWwpIGZ1bmN0aW9uYWxpdHkgb2YgY2xhc3MtYmFzZWQgdHJhbnNpdGlvblxuICogYW5pbWF0aW9ucywgbmdBbmltYXRlIGFsc28gZGVjb3JhdGVzIHRoZSBlbGVtZW50IHdpdGggc3RhcnRpbmcgYW5kIGVuZGluZyBDU1MgY2xhc3NlcyB0byBhaWQgdGhlXG4gKiBkZXZlbG9wZXIgaW4gZnVydGhlciBzdHlsaW5nIHRoZSBlbGVtZW50IHRocm91Z2hvdXQgdGhlIHRyYW5zaXRpb24gYW5pbWF0aW9uLiBFYXJsaWVyIHZlcnNpb25zXG4gKiBvZiBuZ0FuaW1hdGUgbWF5IGhhdmUgY2F1c2VkIG5hdHVyYWwgQ1NTIHRyYW5zaXRpb25zIHRvIGJyZWFrIGFuZCBub3QgcmVuZGVyIHByb3Blcmx5IGR1ZSB0b1xuICogJGFuaW1hdGUgdGVtcG9yYXJpbHkgYmxvY2tpbmcgdHJhbnNpdGlvbnMgdXNpbmcgYDBzIG5vbmVgIGluIG9yZGVyIHRvIGFsbG93IHRoZSBzZXR1cCBDU1MgY2xhc3NcbiAqICh0aGUgYC1hZGRgIG9yIGAtcmVtb3ZlYCBjbGFzcykgdG8gYmUgYXBwbGllZCB3aXRob3V0IHRyaWdnZXJpbmcgYW4gYW5pbWF0aW9uLiBIb3dldmVyLCBhcyBvZlxuICogKip2ZXJzaW9uIDEuMyoqLCB0aGlzIHdvcmthcm91bmQgaGFzIGJlZW4gcmVtb3ZlZCB3aXRoIG5nQW5pbWF0ZSBhbmQgYWxsIG5vbi1uZ0FuaW1hdGUgQ1NTXG4gKiBjbGFzcyB0cmFuc2l0aW9ucyBhcmUgY29tcGF0aWJsZSB3aXRoIG5nQW5pbWF0ZS5cbiAqXG4gKiBUaGVyZSBpcywgaG93ZXZlciwgb25lIHNwZWNpYWwgY2FzZSB3aGVuIGRlYWxpbmcgd2l0aCBjbGFzcy1iYXNlZCB0cmFuc2l0aW9ucyBpbiBuZ0FuaW1hdGUuXG4gKiBXaGVuIHJlbmRlcmluZyBjbGFzcy1iYXNlZCB0cmFuc2l0aW9ucyB0aGF0IG1ha2UgdXNlIG9mIHRoZSBzZXR1cCBhbmQgYWN0aXZlIENTUyBjbGFzc2VzXG4gKiAoZS5nLiBgLmZhZGUtYWRkYCBhbmQgYC5mYWRlLWFkZC1hY3RpdmVgIGZvciB3aGVuIGAuZmFkZWAgaXMgYWRkZWQpIGJlIHN1cmUgdG8gZGVmaW5lXG4gKiB0aGUgdHJhbnNpdGlvbiB2YWx1ZSAqKm9uIHRoZSBhY3RpdmUgQ1NTIGNsYXNzKiogYW5kIG5vdCB0aGUgc2V0dXAgY2xhc3MuXG4gKlxuICogYGBgY3NzXG4gKiAuZmFkZS1hZGQge1xuICogICAvJiM0MjsgcmVtZW1iZXIgdG8gcGxhY2UgYSAwcyB0cmFuc2l0aW9uIGhlcmVcbiAqICAgICAgdG8gZW5zdXJlIHRoYXQgdGhlIHN0eWxlcyBhcmUgYXBwbGllZCBpbnN0YW50bHlcbiAqICAgICAgZXZlbiBpZiB0aGUgZWxlbWVudCBhbHJlYWR5IGhhcyBhIHRyYW5zaXRpb24gc3R5bGUgJiM0MjsvXG4gKiAgIHRyYW5zaXRpb246MHMgbGluZWFyIGFsbDtcbiAqXG4gKiAgIC8mIzQyOyBzdGFydGluZyBDU1Mgc3R5bGVzICYjNDI7L1xuICogICBvcGFjaXR5OjE7XG4gKiB9XG4gKiAuZmFkZS1hZGQuZmFkZS1hZGQtYWN0aXZlIHtcbiAqICAgLyYjNDI7IHRoaXMgd2lsbCBiZSB0aGUgbGVuZ3RoIG9mIHRoZSBhbmltYXRpb24gJiM0MjsvXG4gKiAgIHRyYW5zaXRpb246MXMgbGluZWFyIGFsbDtcbiAqICAgb3BhY2l0eTowO1xuICogfVxuICogYGBgXG4gKlxuICogVGhlIHNldHVwIENTUyBjbGFzcyAoaW4gdGhpcyBjYXNlIGAuZmFkZS1hZGRgKSBhbHNvIGhhcyBhIHRyYW5zaXRpb24gc3R5bGUgcHJvcGVydHksIGhvd2V2ZXIsIGl0XG4gKiBoYXMgYSBkdXJhdGlvbiBvZiB6ZXJvLiBUaGlzIG1heSBub3QgYmUgcmVxdWlyZWQsIGhvd2V2ZXIsIGluY2FzZSB0aGUgYnJvd3NlciBpcyB1bmFibGUgdG8gcmVuZGVyXG4gKiB0aGUgc3R5bGluZyBwcmVzZW50IGluIHRoaXMgQ1NTIGNsYXNzIGluc3RhbnRseSB0aGVuIGl0IGNvdWxkIGJlIHRoYXQgdGhlIGJyb3dzZXIgaXMgYXR0ZW1wdGluZ1xuICogdG8gcGVyZm9ybSBhbiB1bm5lY2Vzc2FyeSB0cmFuc2l0aW9uLlxuICpcbiAqIFRoaXMgd29ya2Fyb3VuZCwgaG93ZXZlciwgZG9lcyBub3QgYXBwbHkgdG8gIHN0YW5kYXJkIGNsYXNzLWJhc2VkIHRyYW5zaXRpb25zIHRoYXQgYXJlIHJlbmRlcmVkXG4gKiB3aGVuIGEgQ1NTIGNsYXNzIGNvbnRhaW5pbmcgYSB0cmFuc2l0aW9uIGlzIGFwcGxpZWQgdG8gYW4gZWxlbWVudDpcbiAqXG4gKiBgYGBjc3NcbiAqIC8mIzQyOyB0aGlzIHdvcmtzIGFzIGV4cGVjdGVkICYjNDI7L1xuICogLmZhZGUge1xuICogICB0cmFuc2l0aW9uOjFzIGxpbmVhciBhbGw7XG4gKiAgIG9wYWNpdHk6MDtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIFBsZWFzZSBrZWVwIHRoaXMgaW4gbWluZCB3aGVuIGNvZGluZyB0aGUgQ1NTIG1hcmt1cCB0aGF0IHdpbGwgYmUgdXNlZCB3aXRoaW4gY2xhc3MtYmFzZWQgdHJhbnNpdGlvbnMuXG4gKiBBbHNvLCB0cnkgbm90IHRvIG1peCB0aGUgdHdvIGNsYXNzLWJhc2VkIGFuaW1hdGlvbiBmbGF2b3JzIHRvZ2V0aGVyIHNpbmNlIHRoZSBDU1MgY29kZSBtYXkgYmVjb21lXG4gKiBvdmVybHkgY29tcGxleC5cbiAqXG4gKlxuICogIyMjIFByZXZlbnRpbmcgQ29sbGlzaW9ucyBXaXRoIFRoaXJkIFBhcnR5IExpYnJhcmllc1xuICpcbiAqIFNvbWUgdGhpcmQtcGFydHkgZnJhbWV3b3JrcyBwbGFjZSBhbmltYXRpb24gZHVyYXRpb24gZGVmYXVsdHMgYWNyb3NzIG1hbnkgZWxlbWVudCBvciBjbGFzc05hbWVcbiAqIHNlbGVjdG9ycyBpbiBvcmRlciB0byBtYWtlIHRoZWlyIGNvZGUgc21hbGwgYW5kIHJldXNlYWJsZS4gVGhpcyBjYW4gbGVhZCB0byBpc3N1ZXMgd2l0aCBuZ0FuaW1hdGUsIHdoaWNoXG4gKiBpcyBleHBlY3RpbmcgYWN0dWFsIGFuaW1hdGlvbnMgb24gdGhlc2UgZWxlbWVudHMgYW5kIGhhcyB0byB3YWl0IGZvciB0aGVpciBjb21wbGV0aW9uLlxuICpcbiAqIFlvdSBjYW4gcHJldmVudCB0aGlzIHVud2FudGVkIGJlaGF2aW9yIGJ5IHVzaW5nIGEgcHJlZml4IG9uIGFsbCB5b3VyIGFuaW1hdGlvbiBjbGFzc2VzOlxuICpcbiAqIGBgYGNzc1xuICogLyYjNDI7IHByZWZpeGVkIHdpdGggYW5pbWF0ZS0gJiM0MjsvXG4gKiAuYW5pbWF0ZS1mYWRlLWFkZC5hbmltYXRlLWZhZGUtYWRkLWFjdGl2ZSB7XG4gKiAgIHRyYW5zaXRpb246MXMgbGluZWFyIGFsbDtcbiAqICAgb3BhY2l0eTowO1xuICogfVxuICogYGBgXG4gKlxuICogWW91IHRoZW4gY29uZmlndXJlIGAkYW5pbWF0ZWAgdG8gZW5mb3JjZSB0aGlzIHByZWZpeDpcbiAqXG4gKiBgYGBqc1xuICogJGFuaW1hdGVQcm92aWRlci5jbGFzc05hbWVGaWx0ZXIoL2FuaW1hdGUtLyk7XG4gKiBgYGBcbiAqIDwvZGl2PlxuICpcbiAqICMjIyBDU1MgU3RhZ2dlcmluZyBBbmltYXRpb25zXG4gKiBBIFN0YWdnZXJpbmcgYW5pbWF0aW9uIGlzIGEgY29sbGVjdGlvbiBvZiBhbmltYXRpb25zIHRoYXQgYXJlIGlzc3VlZCB3aXRoIGEgc2xpZ2h0IGRlbGF5IGluIGJldHdlZW4gZWFjaCBzdWNjZXNzaXZlIG9wZXJhdGlvbiByZXN1bHRpbmcgaW4gYVxuICogY3VydGFpbi1saWtlIGVmZmVjdC4gVGhlIG5nQW5pbWF0ZSBtb2R1bGUgKHZlcnNpb25zID49MS4yKSBzdXBwb3J0cyBzdGFnZ2VyaW5nIGFuaW1hdGlvbnMgYW5kIHRoZSBzdGFnZ2VyIGVmZmVjdCBjYW4gYmVcbiAqIHBlcmZvcm1lZCBieSBjcmVhdGluZyBhICoqbmctRVZFTlQtc3RhZ2dlcioqIENTUyBjbGFzcyBhbmQgYXR0YWNoaW5nIHRoYXQgY2xhc3MgdG8gdGhlIGJhc2UgQ1NTIGNsYXNzIHVzZWQgZm9yXG4gKiB0aGUgYW5pbWF0aW9uLiBUaGUgc3R5bGUgcHJvcGVydHkgZXhwZWN0ZWQgd2l0aGluIHRoZSBzdGFnZ2VyIGNsYXNzIGNhbiBlaXRoZXIgYmUgYSAqKnRyYW5zaXRpb24tZGVsYXkqKiBvciBhblxuICogKiphbmltYXRpb24tZGVsYXkqKiBwcm9wZXJ0eSAob3IgYm90aCBpZiB5b3VyIGFuaW1hdGlvbiBjb250YWlucyBib3RoIHRyYW5zaXRpb25zIGFuZCBrZXlmcmFtZSBhbmltYXRpb25zKS5cbiAqXG4gKiBgYGBjc3NcbiAqIC5teS1hbmltYXRpb24ubmctZW50ZXIge1xuICogICAvJiM0Mjsgc3RhbmRhcmQgdHJhbnNpdGlvbiBjb2RlICYjNDI7L1xuICogICAtd2Via2l0LXRyYW5zaXRpb246IDFzIGxpbmVhciBhbGw7XG4gKiAgIHRyYW5zaXRpb246IDFzIGxpbmVhciBhbGw7XG4gKiAgIG9wYWNpdHk6MDtcbiAqIH1cbiAqIC5teS1hbmltYXRpb24ubmctZW50ZXItc3RhZ2dlciB7XG4gKiAgIC8mIzQyOyB0aGlzIHdpbGwgaGF2ZSBhIDEwMG1zIGRlbGF5IGJldHdlZW4gZWFjaCBzdWNjZXNzaXZlIGxlYXZlIGFuaW1hdGlvbiAmIzQyOy9cbiAqICAgLXdlYmtpdC10cmFuc2l0aW9uLWRlbGF5OiAwLjFzO1xuICogICB0cmFuc2l0aW9uLWRlbGF5OiAwLjFzO1xuICpcbiAqICAgLyYjNDI7IGluIGNhc2UgdGhlIHN0YWdnZXIgZG9lc24ndCB3b3JrIHRoZW4gdGhlc2UgdHdvIHZhbHVlc1xuICogICAgbXVzdCBiZSBzZXQgdG8gMCB0byBhdm9pZCBhbiBhY2NpZGVudGFsIENTUyBpbmhlcml0YW5jZSAmIzQyOy9cbiAqICAgLXdlYmtpdC10cmFuc2l0aW9uLWR1cmF0aW9uOiAwcztcbiAqICAgdHJhbnNpdGlvbi1kdXJhdGlvbjogMHM7XG4gKiB9XG4gKiAubXktYW5pbWF0aW9uLm5nLWVudGVyLm5nLWVudGVyLWFjdGl2ZSB7XG4gKiAgIC8mIzQyOyBzdGFuZGFyZCB0cmFuc2l0aW9uIHN0eWxlcyAmIzQyOy9cbiAqICAgb3BhY2l0eToxO1xuICogfVxuICogYGBgXG4gKlxuICogU3RhZ2dlcmluZyBhbmltYXRpb25zIHdvcmsgYnkgZGVmYXVsdCBpbiBuZ1JlcGVhdCAoc28gbG9uZyBhcyB0aGUgQ1NTIGNsYXNzIGlzIGRlZmluZWQpLiBPdXRzaWRlIG9mIG5nUmVwZWF0LCB0byB1c2Ugc3RhZ2dlcmluZyBhbmltYXRpb25zXG4gKiBvbiB5b3VyIG93biwgdGhleSBjYW4gYmUgdHJpZ2dlcmVkIGJ5IGZpcmluZyBtdWx0aXBsZSBjYWxscyB0byB0aGUgc2FtZSBldmVudCBvbiAkYW5pbWF0ZS4gSG93ZXZlciwgdGhlIHJlc3RyaWN0aW9ucyBzdXJyb3VuZGluZyB0aGlzXG4gKiBhcmUgdGhhdCBlYWNoIG9mIHRoZSBlbGVtZW50cyBtdXN0IGhhdmUgdGhlIHNhbWUgQ1NTIGNsYXNzTmFtZSB2YWx1ZSBhcyB3ZWxsIGFzIHRoZSBzYW1lIHBhcmVudCBlbGVtZW50LiBBIHN0YWdnZXIgb3BlcmF0aW9uXG4gKiB3aWxsIGFsc28gYmUgcmVzZXQgaWYgbW9yZSB0aGFuIDEwbXMgaGFzIHBhc3NlZCBhZnRlciB0aGUgbGFzdCBhbmltYXRpb24gaGFzIGJlZW4gZmlyZWQuXG4gKlxuICogVGhlIGZvbGxvd2luZyBjb2RlIHdpbGwgaXNzdWUgdGhlICoqbmctbGVhdmUtc3RhZ2dlcioqIGV2ZW50IG9uIHRoZSBlbGVtZW50IHByb3ZpZGVkOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIga2lkcyA9IHBhcmVudC5jaGlsZHJlbigpO1xuICpcbiAqICRhbmltYXRlLmxlYXZlKGtpZHNbMF0pOyAvL3N0YWdnZXIgaW5kZXg9MFxuICogJGFuaW1hdGUubGVhdmUoa2lkc1sxXSk7IC8vc3RhZ2dlciBpbmRleD0xXG4gKiAkYW5pbWF0ZS5sZWF2ZShraWRzWzJdKTsgLy9zdGFnZ2VyIGluZGV4PTJcbiAqICRhbmltYXRlLmxlYXZlKGtpZHNbM10pOyAvL3N0YWdnZXIgaW5kZXg9M1xuICogJGFuaW1hdGUubGVhdmUoa2lkc1s0XSk7IC8vc3RhZ2dlciBpbmRleD00XG4gKlxuICogJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gKiAgIC8vc3RhZ2dlciBoYXMgcmVzZXQgaXRzZWxmXG4gKiAgICRhbmltYXRlLmxlYXZlKGtpZHNbNV0pOyAvL3N0YWdnZXIgaW5kZXg9MFxuICogICAkYW5pbWF0ZS5sZWF2ZShraWRzWzZdKTsgLy9zdGFnZ2VyIGluZGV4PTFcbiAqIH0sIDEwMCwgZmFsc2UpO1xuICogYGBgXG4gKlxuICogU3RhZ2dlciBhbmltYXRpb25zIGFyZSBjdXJyZW50bHkgb25seSBzdXBwb3J0ZWQgd2l0aGluIENTUy1kZWZpbmVkIGFuaW1hdGlvbnMuXG4gKlxuICogIyMgSmF2YVNjcmlwdC1kZWZpbmVkIEFuaW1hdGlvbnNcbiAqIEluIHRoZSBldmVudCB0aGF0IHlvdSBkbyBub3Qgd2FudCB0byB1c2UgQ1NTMyB0cmFuc2l0aW9ucyBvciBDU1MzIGFuaW1hdGlvbnMgb3IgaWYgeW91IHdpc2ggdG8gb2ZmZXIgYW5pbWF0aW9ucyBvbiBicm93c2VycyB0aGF0IGRvIG5vdFxuICogeWV0IHN1cHBvcnQgQ1NTIHRyYW5zaXRpb25zL2FuaW1hdGlvbnMsIHRoZW4geW91IGNhbiBtYWtlIHVzZSBvZiBKYXZhU2NyaXB0IGFuaW1hdGlvbnMgZGVmaW5lZCBpbnNpZGUgb2YgeW91ciBBbmd1bGFySlMgbW9kdWxlLlxuICpcbiAqIGBgYGpzXG4gKiAvLyFhbm5vdGF0ZT1cIllvdXJBcHBcIiBZb3VyIEFuZ3VsYXJKUyBNb2R1bGV8UmVwbGFjZSB0aGlzIG9yIG5nTW9kdWxlIHdpdGggdGhlIG1vZHVsZSB0aGF0IHlvdSB1c2VkIHRvIGRlZmluZSB5b3VyIGFwcGxpY2F0aW9uLlxuICogdmFyIG5nTW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ1lvdXJBcHAnLCBbJ25nQW5pbWF0ZSddKTtcbiAqIG5nTW9kdWxlLmFuaW1hdGlvbignLm15LWNyYXp5LWFuaW1hdGlvbicsIGZ1bmN0aW9uKCkge1xuICogICByZXR1cm4ge1xuICogICAgIGVudGVyOiBmdW5jdGlvbihlbGVtZW50LCBkb25lKSB7XG4gKiAgICAgICAvL3J1biB0aGUgYW5pbWF0aW9uIGhlcmUgYW5kIGNhbGwgZG9uZSB3aGVuIHRoZSBhbmltYXRpb24gaXMgY29tcGxldGVcbiAqICAgICAgIHJldHVybiBmdW5jdGlvbihjYW5jZWxsZWQpIHtcbiAqICAgICAgICAgLy90aGlzIChvcHRpb25hbCkgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgd2hlbiB0aGUgYW5pbWF0aW9uXG4gKiAgICAgICAgIC8vY29tcGxldGVzIG9yIHdoZW4gdGhlIGFuaW1hdGlvbiBpcyBjYW5jZWxsZWQgKHRoZSBjYW5jZWxsZWRcbiAqICAgICAgICAgLy9mbGFnIHdpbGwgYmUgc2V0IHRvIHRydWUgaWYgY2FuY2VsbGVkKS5cbiAqICAgICAgIH07XG4gKiAgICAgfSxcbiAqICAgICBsZWF2ZTogZnVuY3Rpb24oZWxlbWVudCwgZG9uZSkgeyB9LFxuICogICAgIG1vdmU6IGZ1bmN0aW9uKGVsZW1lbnQsIGRvbmUpIHsgfSxcbiAqXG4gKiAgICAgLy9hbmltYXRpb24gdGhhdCBjYW4gYmUgdHJpZ2dlcmVkIGJlZm9yZSB0aGUgY2xhc3MgaXMgYWRkZWRcbiAqICAgICBiZWZvcmVBZGRDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgY2xhc3NOYW1lLCBkb25lKSB7IH0sXG4gKlxuICogICAgIC8vYW5pbWF0aW9uIHRoYXQgY2FuIGJlIHRyaWdnZXJlZCBhZnRlciB0aGUgY2xhc3MgaXMgYWRkZWRcbiAqICAgICBhZGRDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgY2xhc3NOYW1lLCBkb25lKSB7IH0sXG4gKlxuICogICAgIC8vYW5pbWF0aW9uIHRoYXQgY2FuIGJlIHRyaWdnZXJlZCBiZWZvcmUgdGhlIGNsYXNzIGlzIHJlbW92ZWRcbiAqICAgICBiZWZvcmVSZW1vdmVDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgY2xhc3NOYW1lLCBkb25lKSB7IH0sXG4gKlxuICogICAgIC8vYW5pbWF0aW9uIHRoYXQgY2FuIGJlIHRyaWdnZXJlZCBhZnRlciB0aGUgY2xhc3MgaXMgcmVtb3ZlZFxuICogICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUsIGRvbmUpIHsgfVxuICogICB9O1xuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBKYXZhU2NyaXB0LWRlZmluZWQgYW5pbWF0aW9ucyBhcmUgY3JlYXRlZCB3aXRoIGEgQ1NTLWxpa2UgY2xhc3Mgc2VsZWN0b3IgYW5kIGEgY29sbGVjdGlvbiBvZiBldmVudHMgd2hpY2ggYXJlIHNldCB0byBydW5cbiAqIGEgamF2YXNjcmlwdCBjYWxsYmFjayBmdW5jdGlvbi4gV2hlbiBhbiBhbmltYXRpb24gaXMgdHJpZ2dlcmVkLCAkYW5pbWF0ZSB3aWxsIGxvb2sgZm9yIGEgbWF0Y2hpbmcgYW5pbWF0aW9uIHdoaWNoIGZpdHNcbiAqIHRoZSBlbGVtZW50J3MgQ1NTIGNsYXNzIGF0dHJpYnV0ZSB2YWx1ZSBhbmQgdGhlbiBydW4gdGhlIG1hdGNoaW5nIGFuaW1hdGlvbiBldmVudCBmdW5jdGlvbiAoaWYgZm91bmQpLlxuICogSW4gb3RoZXIgd29yZHMsIGlmIHRoZSBDU1MgY2xhc3NlcyBwcmVzZW50IG9uIHRoZSBhbmltYXRlZCBlbGVtZW50IG1hdGNoIGFueSBvZiB0aGUgSmF2YVNjcmlwdCBhbmltYXRpb25zIHRoZW4gdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHdpbGxcbiAqIGJlIGV4ZWN1dGVkLiBJdCBzaG91bGQgYmUgYWxzbyBub3RlZCB0aGF0IG9ubHkgc2ltcGxlLCBzaW5nbGUgY2xhc3Mgc2VsZWN0b3JzIGFyZSBhbGxvd2VkIChjb21wb3VuZCBjbGFzcyBzZWxlY3RvcnMgYXJlIG5vdCBzdXBwb3J0ZWQpLlxuICpcbiAqIFdpdGhpbiBhIEphdmFTY3JpcHQgYW5pbWF0aW9uLCBhbiBvYmplY3QgY29udGFpbmluZyB2YXJpb3VzIGV2ZW50IGNhbGxiYWNrIGFuaW1hdGlvbiBmdW5jdGlvbnMgaXMgZXhwZWN0ZWQgdG8gYmUgcmV0dXJuZWQuXG4gKiBBcyBleHBsYWluZWQgYWJvdmUsIHRoZXNlIGNhbGxiYWNrcyBhcmUgdHJpZ2dlcmVkIGJhc2VkIG9uIHRoZSBhbmltYXRpb24gZXZlbnQuIFRoZXJlZm9yZSBpZiBhbiBlbnRlciBhbmltYXRpb24gaXMgcnVuLFxuICogYW5kIHRoZSBKYXZhU2NyaXB0IGFuaW1hdGlvbiBpcyBmb3VuZCwgdGhlbiB0aGUgZW50ZXIgY2FsbGJhY2sgd2lsbCBoYW5kbGUgdGhhdCBhbmltYXRpb24gKGluIGFkZGl0aW9uIHRvIHRoZSBDU1Mga2V5ZnJhbWUgYW5pbWF0aW9uXG4gKiBvciB0cmFuc2l0aW9uIGNvZGUgdGhhdCBpcyBkZWZpbmVkIHZpYSBhIHN0eWxlc2hlZXQpLlxuICpcbiAqXG4gKiAjIyMgQXBwbHlpbmcgRGlyZWN0aXZlLXNwZWNpZmljIFN0eWxlcyB0byBhbiBBbmltYXRpb25cbiAqIEluIHNvbWUgY2FzZXMgYSBkaXJlY3RpdmUgb3Igc2VydmljZSBtYXkgd2FudCB0byBwcm92aWRlIGAkYW5pbWF0ZWAgd2l0aCBleHRyYSBkZXRhaWxzIHRoYXQgdGhlIGFuaW1hdGlvbiB3aWxsXG4gKiBpbmNsdWRlIGludG8gaXRzIGFuaW1hdGlvbi4gTGV0J3Mgc2F5IGZvciBleGFtcGxlIHdlIHdhbnRlZCB0byByZW5kZXIgYW4gYW5pbWF0aW9uIHRoYXQgYW5pbWF0ZXMgYW4gZWxlbWVudFxuICogdG93YXJkcyB0aGUgbW91c2UgY29vcmRpbmF0ZXMgYXMgdG8gd2hlcmUgdGhlIHVzZXIgY2xpY2tlZCBsYXN0LiBCeSBjb2xsZWN0aW5nIHRoZSBYL1kgY29vcmRpbmF0ZXMgb2YgdGhlIGNsaWNrXG4gKiAodmlhIHRoZSBldmVudCBwYXJhbWV0ZXIpIHdlIGNhbiBzZXQgdGhlIGB0b3BgIGFuZCBgbGVmdGAgc3R5bGVzIGludG8gYW4gb2JqZWN0IGFuZCBwYXNzIHRoYXQgaW50byBvdXIgZnVuY3Rpb25cbiAqIGNhbGwgdG8gYCRhbmltYXRlLmFkZENsYXNzYC5cbiAqXG4gKiBgYGBqc1xuICogY2FudmFzLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAqICAgJGFuaW1hdGUuYWRkQ2xhc3MoZWxlbWVudCwgJ29uJywge1xuICogICAgIHRvOiB7XG4gKiAgICAgICBsZWZ0IDogZS5jbGllbnQueCArICdweCcsXG4gKiAgICAgICB0b3AgOiBlLmNsaWVudC55ICsgJ3B4J1xuICogICAgIH1cbiAqICAgfSk6XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIE5vdyB3aGVuIHRoZSBhbmltYXRpb24gcnVucywgYW5kIGEgdHJhbnNpdGlvbiBvciBrZXlmcmFtZSBhbmltYXRpb24gaXMgcGlja2VkIHVwLCB0aGVuIHRoZSBhbmltYXRpb24gaXRzZWxmIHdpbGxcbiAqIGFsc28gaW5jbHVkZSBhbmQgdHJhbnNpdGlvbiB0aGUgc3R5bGluZyBvZiB0aGUgYGxlZnRgIGFuZCBgdG9wYCBwcm9wZXJ0aWVzIGludG8gaXRzIHJ1bm5pbmcgYW5pbWF0aW9uLiBJZiB3ZSB3YW50XG4gKiB0byBwcm92aWRlIHNvbWUgc3RhcnRpbmcgYW5pbWF0aW9uIHZhbHVlcyB0aGVuIHdlIGNhbiBkbyBzbyBieSBwbGFjaW5nIHRoZSBzdGFydGluZyBhbmltYXRpb25zIHN0eWxlcyBpbnRvIGFuIG9iamVjdFxuICogY2FsbGVkIGBmcm9tYCBpbiB0aGUgc2FtZSBvYmplY3QgYXMgdGhlIGB0b2AgYW5pbWF0aW9ucy5cbiAqXG4gKiBgYGBqc1xuICogY2FudmFzLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAqICAgJGFuaW1hdGUuYWRkQ2xhc3MoZWxlbWVudCwgJ29uJywge1xuICogICAgIGZyb206IHtcbiAqICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAqICAgICAgICBsZWZ0OiAnMHB4JyxcbiAqICAgICAgICB0b3A6ICcwcHgnXG4gKiAgICAgfSxcbiAqICAgICB0bzoge1xuICogICAgICAgbGVmdCA6IGUuY2xpZW50LnggKyAncHgnLFxuICogICAgICAgdG9wIDogZS5jbGllbnQueSArICdweCdcbiAqICAgICB9XG4gKiAgIH0pOlxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBPbmNlIHRoZSBhbmltYXRpb24gaXMgY29tcGxldGUgb3IgY2FuY2VsbGVkIHRoZW4gdGhlIHVuaW9uIG9mIGJvdGggdGhlIGJlZm9yZSBhbmQgYWZ0ZXIgc3R5bGVzIGFyZSBhcHBsaWVkIHRvIHRoZVxuICogZWxlbWVudC4gSWYgYG5nQW5pbWF0ZWAgaXMgbm90IHByZXNlbnQgdGhlbiB0aGUgc3R5bGVzIHdpbGwgYmUgYXBwbGllZCBpbW1lZGlhdGVseS5cbiAqXG4gKi9cblxuYW5ndWxhci5tb2R1bGUoJ25nQW5pbWF0ZScsIFsnbmcnXSlcblxuICAvKipcbiAgICogQG5nZG9jIHByb3ZpZGVyXG4gICAqIEBuYW1lICRhbmltYXRlUHJvdmlkZXJcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIFRoZSBgJGFuaW1hdGVQcm92aWRlcmAgYWxsb3dzIGRldmVsb3BlcnMgdG8gcmVnaXN0ZXIgSmF2YVNjcmlwdCBhbmltYXRpb24gZXZlbnQgaGFuZGxlcnMgZGlyZWN0bHkgaW5zaWRlIG9mIGEgbW9kdWxlLlxuICAgKiBXaGVuIGFuIGFuaW1hdGlvbiBpcyB0cmlnZ2VyZWQsIHRoZSAkYW5pbWF0ZSBzZXJ2aWNlIHdpbGwgcXVlcnkgdGhlICRhbmltYXRlIHNlcnZpY2UgdG8gZmluZCBhbnkgYW5pbWF0aW9ucyB0aGF0IG1hdGNoXG4gICAqIHRoZSBwcm92aWRlZCBuYW1lIHZhbHVlLlxuICAgKlxuICAgKiBSZXF1aXJlcyB0aGUge0BsaW5rIG5nQW5pbWF0ZSBgbmdBbmltYXRlYH0gbW9kdWxlIHRvIGJlIGluc3RhbGxlZC5cbiAgICpcbiAgICogUGxlYXNlIHZpc2l0IHRoZSB7QGxpbmsgbmdBbmltYXRlIGBuZ0FuaW1hdGVgfSBtb2R1bGUgb3ZlcnZpZXcgcGFnZSBsZWFybiBtb3JlIGFib3V0IGhvdyB0byB1c2UgYW5pbWF0aW9ucyBpbiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgKlxuICAgKi9cbiAgLmRpcmVjdGl2ZSgnbmdBbmltYXRlQ2hpbGRyZW4nLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgTkdfQU5JTUFURV9DSElMRFJFTiA9ICckJG5nQW5pbWF0ZUNoaWxkcmVuJztcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICB2YXIgdmFsID0gYXR0cnMubmdBbmltYXRlQ2hpbGRyZW47XG4gICAgICBpZiAoYW5ndWxhci5pc1N0cmluZyh2YWwpICYmIHZhbC5sZW5ndGggPT09IDApIHsgLy9lbXB0eSBhdHRyaWJ1dGVcbiAgICAgICAgZWxlbWVudC5kYXRhKE5HX0FOSU1BVEVfQ0hJTERSRU4sIHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2NvcGUuJHdhdGNoKHZhbCwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICBlbGVtZW50LmRhdGEoTkdfQU5JTUFURV9DSElMRFJFTiwgISF2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH0pXG5cbiAgLy90aGlzIHByaXZhdGUgc2VydmljZSBpcyBvbmx5IHVzZWQgd2l0aGluIENTUy1lbmFibGVkIGFuaW1hdGlvbnNcbiAgLy9JRTggKyBJRTkgZG8gbm90IHN1cHBvcnQgckFGIG5hdGl2ZWx5LCBidXQgdGhhdCBpcyBmaW5lIHNpbmNlIHRoZXlcbiAgLy9hbHNvIGRvbid0IHN1cHBvcnQgdHJhbnNpdGlvbnMgYW5kIGtleWZyYW1lcyB3aGljaCBtZWFucyB0aGF0IHRoZSBjb2RlXG4gIC8vYmVsb3cgd2lsbCBuZXZlciBiZSB1c2VkIGJ5IHRoZSB0d28gYnJvd3NlcnMuXG4gIC5mYWN0b3J5KCckJGFuaW1hdGVSZWZsb3cnLCBbJyQkckFGJywgJyRkb2N1bWVudCcsIGZ1bmN0aW9uKCQkckFGLCAkZG9jdW1lbnQpIHtcbiAgICB2YXIgYm9kID0gJGRvY3VtZW50WzBdLmJvZHk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGZuKSB7XG4gICAgICAvL3RoZSByZXR1cm5lZCBmdW5jdGlvbiBhY3RzIGFzIHRoZSBjYW5jZWxsYXRpb24gZnVuY3Rpb25cbiAgICAgIHJldHVybiAkJHJBRihmdW5jdGlvbigpIHtcbiAgICAgICAgLy90aGUgbGluZSBiZWxvdyB3aWxsIGZvcmNlIHRoZSBicm93c2VyIHRvIHBlcmZvcm0gYSByZXBhaW50XG4gICAgICAgIC8vc28gdGhhdCBhbGwgdGhlIGFuaW1hdGVkIGVsZW1lbnRzIHdpdGhpbiB0aGUgYW5pbWF0aW9uIGZyYW1lXG4gICAgICAgIC8vd2lsbCBiZSBwcm9wZXJseSB1cGRhdGVkIGFuZCBkcmF3biBvbiBzY3JlZW4uIFRoaXMgaXNcbiAgICAgICAgLy9yZXF1aXJlZCB0byBwZXJmb3JtIG11bHRpLWNsYXNzIENTUyBiYXNlZCBhbmltYXRpb25zIHdpdGhcbiAgICAgICAgLy9GaXJlZm94LiBETyBOT1QgUkVNT1ZFIFRISVMgTElORS5cbiAgICAgICAgdmFyIGEgPSBib2Qub2Zmc2V0V2lkdGggKyAxO1xuICAgICAgICBmbigpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfV0pXG5cbiAgLmNvbmZpZyhbJyRwcm92aWRlJywgJyRhbmltYXRlUHJvdmlkZXInLCBmdW5jdGlvbigkcHJvdmlkZSwgJGFuaW1hdGVQcm92aWRlcikge1xuICAgIHZhciBub29wID0gYW5ndWxhci5ub29wO1xuICAgIHZhciBmb3JFYWNoID0gYW5ndWxhci5mb3JFYWNoO1xuICAgIHZhciBzZWxlY3RvcnMgPSAkYW5pbWF0ZVByb3ZpZGVyLiQkc2VsZWN0b3JzO1xuICAgIHZhciBpc0FycmF5ID0gYW5ndWxhci5pc0FycmF5O1xuICAgIHZhciBpc1N0cmluZyA9IGFuZ3VsYXIuaXNTdHJpbmc7XG4gICAgdmFyIGlzT2JqZWN0ID0gYW5ndWxhci5pc09iamVjdDtcblxuICAgIHZhciBFTEVNRU5UX05PREUgPSAxO1xuICAgIHZhciBOR19BTklNQVRFX1NUQVRFID0gJyQkbmdBbmltYXRlU3RhdGUnO1xuICAgIHZhciBOR19BTklNQVRFX0NISUxEUkVOID0gJyQkbmdBbmltYXRlQ2hpbGRyZW4nO1xuICAgIHZhciBOR19BTklNQVRFX0NMQVNTX05BTUUgPSAnbmctYW5pbWF0ZSc7XG4gICAgdmFyIHJvb3RBbmltYXRlU3RhdGUgPSB7cnVubmluZzogdHJ1ZX07XG5cbiAgICBmdW5jdGlvbiBleHRyYWN0RWxlbWVudE5vZGUoZWxlbWVudCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBlbG0gPSBlbGVtZW50W2ldO1xuICAgICAgICBpZiAoZWxtLm5vZGVUeXBlID09IEVMRU1FTlRfTk9ERSkge1xuICAgICAgICAgIHJldHVybiBlbG07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcmVwYXJlRWxlbWVudChlbGVtZW50KSB7XG4gICAgICByZXR1cm4gZWxlbWVudCAmJiBhbmd1bGFyLmVsZW1lbnQoZWxlbWVudCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3RyaXBDb21tZW50c0Zyb21FbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBhbmd1bGFyLmVsZW1lbnQoZXh0cmFjdEVsZW1lbnROb2RlKGVsZW1lbnQpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc01hdGNoaW5nRWxlbWVudChlbG0xLCBlbG0yKSB7XG4gICAgICByZXR1cm4gZXh0cmFjdEVsZW1lbnROb2RlKGVsbTEpID09IGV4dHJhY3RFbGVtZW50Tm9kZShlbG0yKTtcbiAgICB9XG4gICAgdmFyICQkanFMaXRlO1xuICAgICRwcm92aWRlLmRlY29yYXRvcignJGFuaW1hdGUnLFxuICAgICAgICBbJyRkZWxlZ2F0ZScsICckJHEnLCAnJGluamVjdG9yJywgJyRzbmlmZmVyJywgJyRyb290RWxlbWVudCcsICckJGFzeW5jQ2FsbGJhY2snLCAnJHJvb3RTY29wZScsICckZG9jdW1lbnQnLCAnJHRlbXBsYXRlUmVxdWVzdCcsICckJGpxTGl0ZScsXG4gZnVuY3Rpb24oJGRlbGVnYXRlLCAgICQkcSwgICAkaW5qZWN0b3IsICAgJHNuaWZmZXIsICAgJHJvb3RFbGVtZW50LCAgICQkYXN5bmNDYWxsYmFjaywgICAkcm9vdFNjb3BlLCAgICRkb2N1bWVudCwgICAkdGVtcGxhdGVSZXF1ZXN0LCAgICQkJGpxTGl0ZSkge1xuXG4gICAgICAkJGpxTGl0ZSA9ICQkJGpxTGl0ZTtcbiAgICAgICRyb290RWxlbWVudC5kYXRhKE5HX0FOSU1BVEVfU1RBVEUsIHJvb3RBbmltYXRlU3RhdGUpO1xuXG4gICAgICAvLyBXYWl0IHVudGlsIGFsbCBkaXJlY3RpdmUgYW5kIHJvdXRlLXJlbGF0ZWQgdGVtcGxhdGVzIGFyZSBkb3dubG9hZGVkIGFuZFxuICAgICAgLy8gY29tcGlsZWQuIFRoZSAkdGVtcGxhdGVSZXF1ZXN0LnRvdGFsUGVuZGluZ1JlcXVlc3RzIHZhcmlhYmxlIGtlZXBzIHRyYWNrIG9mXG4gICAgICAvLyBhbGwgb2YgdGhlIHJlbW90ZSB0ZW1wbGF0ZXMgYmVpbmcgY3VycmVudGx5IGRvd25sb2FkZWQuIElmIHRoZXJlIGFyZSBub1xuICAgICAgLy8gdGVtcGxhdGVzIGN1cnJlbnRseSBkb3dubG9hZGluZyB0aGVuIHRoZSB3YXRjaGVyIHdpbGwgc3RpbGwgZmlyZSBhbnl3YXkuXG4gICAgICB2YXIgZGVyZWdpc3RlcldhdGNoID0gJHJvb3RTY29wZS4kd2F0Y2goXG4gICAgICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gJHRlbXBsYXRlUmVxdWVzdC50b3RhbFBlbmRpbmdSZXF1ZXN0czsgfSxcbiAgICAgICAgZnVuY3Rpb24odmFsLCBvbGRWYWwpIHtcbiAgICAgICAgICBpZiAodmFsICE9PSAwKSByZXR1cm47XG4gICAgICAgICAgZGVyZWdpc3RlcldhdGNoKCk7XG5cbiAgICAgICAgICAvLyBOb3cgdGhhdCBhbGwgdGVtcGxhdGVzIGhhdmUgYmVlbiBkb3dubG9hZGVkLCAkYW5pbWF0ZSB3aWxsIHdhaXQgdW50aWxcbiAgICAgICAgICAvLyB0aGUgcG9zdCBkaWdlc3QgcXVldWUgaXMgZW1wdHkgYmVmb3JlIGVuYWJsaW5nIGFuaW1hdGlvbnMuIEJ5IGhhdmluZyB0d29cbiAgICAgICAgICAvLyBjYWxscyB0byAkcG9zdERpZ2VzdCBjYWxscyB3ZSBjYW4gZW5zdXJlIHRoYXQgdGhlIGZsYWcgaXMgZW5hYmxlZCBhdCB0aGVcbiAgICAgICAgICAvLyB2ZXJ5IGVuZCBvZiB0aGUgcG9zdCBkaWdlc3QgcXVldWUuIFNpbmNlIGFsbCBvZiB0aGUgYW5pbWF0aW9ucyBpbiAkYW5pbWF0ZVxuICAgICAgICAgIC8vIHVzZSAkcG9zdERpZ2VzdCwgaXQncyBpbXBvcnRhbnQgdGhhdCB0aGUgY29kZSBiZWxvdyBleGVjdXRlcyBhdCB0aGUgZW5kLlxuICAgICAgICAgIC8vIFRoaXMgYmFzaWNhbGx5IG1lYW5zIHRoYXQgdGhlIHBhZ2UgaXMgZnVsbHkgZG93bmxvYWRlZCBhbmQgY29tcGlsZWQgYmVmb3JlXG4gICAgICAgICAgLy8gYW55IGFuaW1hdGlvbnMgYXJlIHRyaWdnZXJlZC5cbiAgICAgICAgICAkcm9vdFNjb3BlLiQkcG9zdERpZ2VzdChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRyb290U2NvcGUuJCRwb3N0RGlnZXN0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICByb290QW5pbWF0ZVN0YXRlLnJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICApO1xuXG4gICAgICB2YXIgZ2xvYmFsQW5pbWF0aW9uQ291bnRlciA9IDA7XG4gICAgICB2YXIgY2xhc3NOYW1lRmlsdGVyID0gJGFuaW1hdGVQcm92aWRlci5jbGFzc05hbWVGaWx0ZXIoKTtcbiAgICAgIHZhciBpc0FuaW1hdGFibGVDbGFzc05hbWUgPSAhY2xhc3NOYW1lRmlsdGVyXG4gICAgICAgICAgICAgID8gZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9XG4gICAgICAgICAgICAgIDogZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsYXNzTmFtZUZpbHRlci50ZXN0KGNsYXNzTmFtZSk7XG4gICAgICAgICAgICAgIH07XG5cbiAgICAgIGZ1bmN0aW9uIGNsYXNzQmFzZWRBbmltYXRpb25zQmxvY2tlZChlbGVtZW50LCBzZXR0ZXIpIHtcbiAgICAgICAgdmFyIGRhdGEgPSBlbGVtZW50LmRhdGEoTkdfQU5JTUFURV9TVEFURSkgfHwge307XG4gICAgICAgIGlmIChzZXR0ZXIpIHtcbiAgICAgICAgICBkYXRhLnJ1bm5pbmcgPSB0cnVlO1xuICAgICAgICAgIGRhdGEuc3RydWN0dXJhbCA9IHRydWU7XG4gICAgICAgICAgZWxlbWVudC5kYXRhKE5HX0FOSU1BVEVfU1RBVEUsIGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRhLmRpc2FibGVkIHx8IChkYXRhLnJ1bm5pbmcgJiYgZGF0YS5zdHJ1Y3R1cmFsKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcnVuQW5pbWF0aW9uUG9zdERpZ2VzdChmbikge1xuICAgICAgICB2YXIgY2FuY2VsRm4sIGRlZmVyID0gJCRxLmRlZmVyKCk7XG4gICAgICAgIGRlZmVyLnByb21pc2UuJCRjYW5jZWxGbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGNhbmNlbEZuICYmIGNhbmNlbEZuKCk7XG4gICAgICAgIH07XG4gICAgICAgICRyb290U2NvcGUuJCRwb3N0RGlnZXN0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGNhbmNlbEZuID0gZm4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBkZWZlci5yZXNvbHZlKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZGVmZXIucHJvbWlzZTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcGFyc2VBbmltYXRlT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIC8vIHNvbWUgcGx1Z2luIGNvZGUgbWF5IHN0aWxsIGJlIHBhc3NpbmcgaW4gdGhlIGNhbGxiYWNrXG4gICAgICAgIC8vIGZ1bmN0aW9uIGFzIHRoZSBsYXN0IHBhcmFtIGZvciB0aGUgJGFuaW1hdGUgbWV0aG9kcyBzb1xuICAgICAgICAvLyBpdCdzIGJlc3QgdG8gb25seSBhbGxvdyBzdHJpbmcgb3IgYXJyYXkgdmFsdWVzIGZvciBub3dcbiAgICAgICAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgICAgaWYgKG9wdGlvbnMudGVtcENsYXNzZXMgJiYgaXNTdHJpbmcob3B0aW9ucy50ZW1wQ2xhc3NlcykpIHtcbiAgICAgICAgICAgIG9wdGlvbnMudGVtcENsYXNzZXMgPSBvcHRpb25zLnRlbXBDbGFzc2VzLnNwbGl0KC9cXHMrLyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVFbGVtZW50Q2xhc3NlcyhlbGVtZW50LCBjYWNoZSwgcnVubmluZ0FuaW1hdGlvbnMpIHtcbiAgICAgICAgcnVubmluZ0FuaW1hdGlvbnMgPSBydW5uaW5nQW5pbWF0aW9ucyB8fCB7fTtcblxuICAgICAgICB2YXIgbG9va3VwID0ge307XG4gICAgICAgIGZvckVhY2gocnVubmluZ0FuaW1hdGlvbnMsIGZ1bmN0aW9uKGRhdGEsIHNlbGVjdG9yKSB7XG4gICAgICAgICAgZm9yRWFjaChzZWxlY3Rvci5zcGxpdCgnICcpLCBmdW5jdGlvbihzKSB7XG4gICAgICAgICAgICBsb29rdXBbc109ZGF0YTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIGhhc0NsYXNzZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBmb3JFYWNoKChlbGVtZW50LmF0dHIoJ2NsYXNzJykgfHwgJycpLnNwbGl0KC9cXHMrLyksIGZ1bmN0aW9uKGNsYXNzTmFtZSkge1xuICAgICAgICAgIGhhc0NsYXNzZXNbY2xhc3NOYW1lXSA9IHRydWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciB0b0FkZCA9IFtdLCB0b1JlbW92ZSA9IFtdO1xuICAgICAgICBmb3JFYWNoKChjYWNoZSAmJiBjYWNoZS5jbGFzc2VzKSB8fCBbXSwgZnVuY3Rpb24oc3RhdHVzLCBjbGFzc05hbWUpIHtcbiAgICAgICAgICB2YXIgaGFzQ2xhc3MgPSBoYXNDbGFzc2VzW2NsYXNzTmFtZV07XG4gICAgICAgICAgdmFyIG1hdGNoaW5nQW5pbWF0aW9uID0gbG9va3VwW2NsYXNzTmFtZV0gfHwge307XG5cbiAgICAgICAgICAvLyBXaGVuIGFkZENsYXNzIGFuZCByZW1vdmVDbGFzcyBpcyBjYWxsZWQgdGhlbiAkYW5pbWF0ZSB3aWxsIGNoZWNrIHRvXG4gICAgICAgICAgLy8gc2VlIGlmIGFkZENsYXNzIGFuZCByZW1vdmVDbGFzcyBjYW5jZWwgZWFjaCBvdGhlciBvdXQuIFdoZW4gdGhlcmUgYXJlXG4gICAgICAgICAgLy8gbW9yZSBjYWxscyB0byByZW1vdmVDbGFzcyB0aGFuIGFkZENsYXNzIHRoZW4gdGhlIGNvdW50IGZhbGxzIGJlbG93IDBcbiAgICAgICAgICAvLyBhbmQgdGhlbiB0aGUgcmVtb3ZlQ2xhc3MgYW5pbWF0aW9uIHdpbGwgYmUgYWxsb3dlZC4gT3RoZXJ3aXNlIGlmIHRoZVxuICAgICAgICAgIC8vIGNvdW50IGlzIGFib3ZlIDAgdGhlbiB0aGF0IG1lYW5zIGFuIGFkZENsYXNzIGFuaW1hdGlvbiB3aWxsIGNvbW1lbmNlLlxuICAgICAgICAgIC8vIE9uY2UgYW4gYW5pbWF0aW9uIGlzIGFsbG93ZWQgdGhlbiB0aGUgY29kZSB3aWxsIGFsc28gY2hlY2sgdG8gc2VlIGlmXG4gICAgICAgICAgLy8gdGhlcmUgZXhpc3RzIGFueSBvbi1nb2luZyBhbmltYXRpb24gdGhhdCBpcyBhbHJlYWR5IGFkZGluZyBvciByZW12b2luZ1xuICAgICAgICAgIC8vIHRoZSBtYXRjaGluZyBDU1MgY2xhc3MuXG4gICAgICAgICAgaWYgKHN0YXR1cyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIC8vZG9lcyBpdCBoYXZlIHRoZSBjbGFzcyBvciB3aWxsIGl0IGhhdmUgdGhlIGNsYXNzXG4gICAgICAgICAgICBpZiAoaGFzQ2xhc3MgfHwgbWF0Y2hpbmdBbmltYXRpb24uZXZlbnQgPT0gJ2FkZENsYXNzJykge1xuICAgICAgICAgICAgICB0b1JlbW92ZS5wdXNoKGNsYXNzTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChzdGF0dXMgPT09IHRydWUpIHtcbiAgICAgICAgICAgIC8vaXMgdGhlIGNsYXNzIG1pc3Npbmcgb3Igd2lsbCBpdCBiZSByZW1vdmVkP1xuICAgICAgICAgICAgaWYgKCFoYXNDbGFzcyB8fCBtYXRjaGluZ0FuaW1hdGlvbi5ldmVudCA9PSAncmVtb3ZlQ2xhc3MnKSB7XG4gICAgICAgICAgICAgIHRvQWRkLnB1c2goY2xhc3NOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiAodG9BZGQubGVuZ3RoICsgdG9SZW1vdmUubGVuZ3RoKSA+IDAgJiYgW3RvQWRkLmpvaW4oJyAnKSwgdG9SZW1vdmUuam9pbignICcpXTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbG9va3VwKG5hbWUpIHtcbiAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICB2YXIgbWF0Y2hlcyA9IFtdLFxuICAgICAgICAgICAgICBmbGFnTWFwID0ge30sXG4gICAgICAgICAgICAgIGNsYXNzZXMgPSBuYW1lLnN1YnN0cigxKS5zcGxpdCgnLicpO1xuXG4gICAgICAgICAgLy90aGUgZW1wdHkgc3RyaW5nIHZhbHVlIGlzIHRoZSBkZWZhdWx0IGFuaW1hdGlvblxuICAgICAgICAgIC8vb3BlcmF0aW9uIHdoaWNoIHBlcmZvcm1zIENTUyB0cmFuc2l0aW9uIGFuZCBrZXlmcmFtZVxuICAgICAgICAgIC8vYW5pbWF0aW9ucyBzbmlmZmluZy4gVGhpcyBpcyBhbHdheXMgaW5jbHVkZWQgZm9yIGVhY2hcbiAgICAgICAgICAvL2VsZW1lbnQgYW5pbWF0aW9uIHByb2NlZHVyZSBpZiB0aGUgYnJvd3NlciBzdXBwb3J0c1xuICAgICAgICAgIC8vdHJhbnNpdGlvbnMgYW5kL29yIGtleWZyYW1lIGFuaW1hdGlvbnMuIFRoZSBkZWZhdWx0XG4gICAgICAgICAgLy9hbmltYXRpb24gaXMgYWRkZWQgdG8gdGhlIHRvcCBvZiB0aGUgbGlzdCB0byBwcmV2ZW50XG4gICAgICAgICAgLy9hbnkgcHJldmlvdXMgYW5pbWF0aW9ucyBmcm9tIGFmZmVjdGluZyB0aGUgZWxlbWVudCBzdHlsaW5nXG4gICAgICAgICAgLy9wcmlvciB0byB0aGUgZWxlbWVudCBiZWluZyBhbmltYXRlZC5cbiAgICAgICAgICBpZiAoJHNuaWZmZXIudHJhbnNpdGlvbnMgfHwgJHNuaWZmZXIuYW5pbWF0aW9ucykge1xuICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKCRpbmplY3Rvci5nZXQoc2VsZWN0b3JzWycnXSkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZvciAodmFyIGk9MDsgaSA8IGNsYXNzZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBrbGFzcyA9IGNsYXNzZXNbaV0sXG4gICAgICAgICAgICAgICAgc2VsZWN0b3JGYWN0b3J5TmFtZSA9IHNlbGVjdG9yc1trbGFzc107XG4gICAgICAgICAgICBpZiAoc2VsZWN0b3JGYWN0b3J5TmFtZSAmJiAhZmxhZ01hcFtrbGFzc10pIHtcbiAgICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKCRpbmplY3Rvci5nZXQoc2VsZWN0b3JGYWN0b3J5TmFtZSkpO1xuICAgICAgICAgICAgICBmbGFnTWFwW2tsYXNzXSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBtYXRjaGVzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGFuaW1hdGlvblJ1bm5lcihlbGVtZW50LCBhbmltYXRpb25FdmVudCwgY2xhc3NOYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIC8vdHJhbnNjbHVkZWQgZGlyZWN0aXZlcyBtYXkgc29tZXRpbWVzIGZpcmUgYW4gYW5pbWF0aW9uIHVzaW5nIG9ubHkgY29tbWVudCBub2Rlc1xuICAgICAgICAvL2Jlc3QgdG8gY2F0Y2ggdGhpcyBlYXJseSBvbiB0byBwcmV2ZW50IGFueSBhbmltYXRpb24gb3BlcmF0aW9ucyBmcm9tIG9jY3VycmluZ1xuICAgICAgICB2YXIgbm9kZSA9IGVsZW1lbnRbMF07XG4gICAgICAgIGlmICghbm9kZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgICAgb3B0aW9ucy50byA9IG9wdGlvbnMudG8gfHwge307XG4gICAgICAgICAgb3B0aW9ucy5mcm9tID0gb3B0aW9ucy5mcm9tIHx8IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNsYXNzTmFtZUFkZDtcbiAgICAgICAgdmFyIGNsYXNzTmFtZVJlbW92ZTtcbiAgICAgICAgaWYgKGlzQXJyYXkoY2xhc3NOYW1lKSkge1xuICAgICAgICAgIGNsYXNzTmFtZUFkZCA9IGNsYXNzTmFtZVswXTtcbiAgICAgICAgICBjbGFzc05hbWVSZW1vdmUgPSBjbGFzc05hbWVbMV07XG4gICAgICAgICAgaWYgKCFjbGFzc05hbWVBZGQpIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZVJlbW92ZTtcbiAgICAgICAgICAgIGFuaW1hdGlvbkV2ZW50ID0gJ3JlbW92ZUNsYXNzJztcbiAgICAgICAgICB9IGVsc2UgaWYgKCFjbGFzc05hbWVSZW1vdmUpIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZUFkZDtcbiAgICAgICAgICAgIGFuaW1hdGlvbkV2ZW50ID0gJ2FkZENsYXNzJztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lQWRkICsgJyAnICsgY2xhc3NOYW1lUmVtb3ZlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpc1NldENsYXNzT3BlcmF0aW9uID0gYW5pbWF0aW9uRXZlbnQgPT0gJ3NldENsYXNzJztcbiAgICAgICAgdmFyIGlzQ2xhc3NCYXNlZCA9IGlzU2V0Q2xhc3NPcGVyYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IGFuaW1hdGlvbkV2ZW50ID09ICdhZGRDbGFzcydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IGFuaW1hdGlvbkV2ZW50ID09ICdyZW1vdmVDbGFzcydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IGFuaW1hdGlvbkV2ZW50ID09ICdhbmltYXRlJztcblxuICAgICAgICB2YXIgY3VycmVudENsYXNzTmFtZSA9IGVsZW1lbnQuYXR0cignY2xhc3MnKTtcbiAgICAgICAgdmFyIGNsYXNzZXMgPSBjdXJyZW50Q2xhc3NOYW1lICsgJyAnICsgY2xhc3NOYW1lO1xuICAgICAgICBpZiAoIWlzQW5pbWF0YWJsZUNsYXNzTmFtZShjbGFzc2VzKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBiZWZvcmVDb21wbGV0ZSA9IG5vb3AsXG4gICAgICAgICAgICBiZWZvcmVDYW5jZWwgPSBbXSxcbiAgICAgICAgICAgIGJlZm9yZSA9IFtdLFxuICAgICAgICAgICAgYWZ0ZXJDb21wbGV0ZSA9IG5vb3AsXG4gICAgICAgICAgICBhZnRlckNhbmNlbCA9IFtdLFxuICAgICAgICAgICAgYWZ0ZXIgPSBbXTtcblxuICAgICAgICB2YXIgYW5pbWF0aW9uTG9va3VwID0gKCcgJyArIGNsYXNzZXMpLnJlcGxhY2UoL1xccysvZywnLicpO1xuICAgICAgICBmb3JFYWNoKGxvb2t1cChhbmltYXRpb25Mb29rdXApLCBmdW5jdGlvbihhbmltYXRpb25GYWN0b3J5KSB7XG4gICAgICAgICAgdmFyIGNyZWF0ZWQgPSByZWdpc3RlckFuaW1hdGlvbihhbmltYXRpb25GYWN0b3J5LCBhbmltYXRpb25FdmVudCk7XG4gICAgICAgICAgaWYgKCFjcmVhdGVkICYmIGlzU2V0Q2xhc3NPcGVyYXRpb24pIHtcbiAgICAgICAgICAgIHJlZ2lzdGVyQW5pbWF0aW9uKGFuaW1hdGlvbkZhY3RvcnksICdhZGRDbGFzcycpO1xuICAgICAgICAgICAgcmVnaXN0ZXJBbmltYXRpb24oYW5pbWF0aW9uRmFjdG9yeSwgJ3JlbW92ZUNsYXNzJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBmdW5jdGlvbiByZWdpc3RlckFuaW1hdGlvbihhbmltYXRpb25GYWN0b3J5LCBldmVudCkge1xuICAgICAgICAgIHZhciBhZnRlckZuID0gYW5pbWF0aW9uRmFjdG9yeVtldmVudF07XG4gICAgICAgICAgdmFyIGJlZm9yZUZuID0gYW5pbWF0aW9uRmFjdG9yeVsnYmVmb3JlJyArIGV2ZW50LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgZXZlbnQuc3Vic3RyKDEpXTtcbiAgICAgICAgICBpZiAoYWZ0ZXJGbiB8fCBiZWZvcmVGbikge1xuICAgICAgICAgICAgaWYgKGV2ZW50ID09ICdsZWF2ZScpIHtcbiAgICAgICAgICAgICAgYmVmb3JlRm4gPSBhZnRlckZuO1xuICAgICAgICAgICAgICAvL3doZW4gc2V0IGFzIG51bGwgdGhlbiBhbmltYXRpb24ga25vd3MgdG8gc2tpcCB0aGlzIHBoYXNlXG4gICAgICAgICAgICAgIGFmdGVyRm4gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWZ0ZXIucHVzaCh7XG4gICAgICAgICAgICAgIGV2ZW50OiBldmVudCwgZm46IGFmdGVyRm5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYmVmb3JlLnB1c2goe1xuICAgICAgICAgICAgICBldmVudDogZXZlbnQsIGZuOiBiZWZvcmVGblxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBydW4oZm5zLCBjYW5jZWxsYXRpb25zLCBhbGxDb21wbGV0ZUZuKSB7XG4gICAgICAgICAgdmFyIGFuaW1hdGlvbnMgPSBbXTtcbiAgICAgICAgICBmb3JFYWNoKGZucywgZnVuY3Rpb24oYW5pbWF0aW9uKSB7XG4gICAgICAgICAgICBhbmltYXRpb24uZm4gJiYgYW5pbWF0aW9ucy5wdXNoKGFuaW1hdGlvbik7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICB2YXIgY291bnQgPSAwO1xuICAgICAgICAgIGZ1bmN0aW9uIGFmdGVyQW5pbWF0aW9uQ29tcGxldGUoaW5kZXgpIHtcbiAgICAgICAgICAgIGlmIChjYW5jZWxsYXRpb25zKSB7XG4gICAgICAgICAgICAgIChjYW5jZWxsYXRpb25zW2luZGV4XSB8fCBub29wKSgpO1xuICAgICAgICAgICAgICBpZiAoKytjb3VudCA8IGFuaW1hdGlvbnMubGVuZ3RoKSByZXR1cm47XG4gICAgICAgICAgICAgIGNhbmNlbGxhdGlvbnMgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWxsQ29tcGxldGVGbigpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vVGhlIGNvZGUgYmVsb3cgYWRkcyBkaXJlY3RseSB0byB0aGUgYXJyYXkgaW4gb3JkZXIgdG8gd29yayB3aXRoXG4gICAgICAgICAgLy9ib3RoIHN5bmMgYW5kIGFzeW5jIGFuaW1hdGlvbnMuIFN5bmMgYW5pbWF0aW9ucyBhcmUgd2hlbiB0aGUgZG9uZSgpXG4gICAgICAgICAgLy9vcGVyYXRpb24gaXMgY2FsbGVkIHJpZ2h0IGF3YXkuIERPIE5PVCBSRUZBQ1RPUiFcbiAgICAgICAgICBmb3JFYWNoKGFuaW1hdGlvbnMsIGZ1bmN0aW9uKGFuaW1hdGlvbiwgaW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBwcm9ncmVzcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBhZnRlckFuaW1hdGlvbkNvbXBsZXRlKGluZGV4KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzd2l0Y2ggKGFuaW1hdGlvbi5ldmVudCkge1xuICAgICAgICAgICAgICBjYXNlICdzZXRDbGFzcyc6XG4gICAgICAgICAgICAgICAgY2FuY2VsbGF0aW9ucy5wdXNoKGFuaW1hdGlvbi5mbihlbGVtZW50LCBjbGFzc05hbWVBZGQsIGNsYXNzTmFtZVJlbW92ZSwgcHJvZ3Jlc3MsIG9wdGlvbnMpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnYW5pbWF0ZSc6XG4gICAgICAgICAgICAgICAgY2FuY2VsbGF0aW9ucy5wdXNoKGFuaW1hdGlvbi5mbihlbGVtZW50LCBjbGFzc05hbWUsIG9wdGlvbnMuZnJvbSwgb3B0aW9ucy50bywgcHJvZ3Jlc3MpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnYWRkQ2xhc3MnOlxuICAgICAgICAgICAgICAgIGNhbmNlbGxhdGlvbnMucHVzaChhbmltYXRpb24uZm4oZWxlbWVudCwgY2xhc3NOYW1lQWRkIHx8IGNsYXNzTmFtZSwgICAgIHByb2dyZXNzLCBvcHRpb25zKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJ3JlbW92ZUNsYXNzJzpcbiAgICAgICAgICAgICAgICBjYW5jZWxsYXRpb25zLnB1c2goYW5pbWF0aW9uLmZuKGVsZW1lbnQsIGNsYXNzTmFtZVJlbW92ZSB8fCBjbGFzc05hbWUsICBwcm9ncmVzcywgb3B0aW9ucykpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNhbmNlbGxhdGlvbnMucHVzaChhbmltYXRpb24uZm4oZWxlbWVudCwgcHJvZ3Jlc3MsIG9wdGlvbnMpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmIChjYW5jZWxsYXRpb25zICYmIGNhbmNlbGxhdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBhbGxDb21wbGV0ZUZuKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBub2RlOiBub2RlLFxuICAgICAgICAgIGV2ZW50OiBhbmltYXRpb25FdmVudCxcbiAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgICBpc0NsYXNzQmFzZWQ6IGlzQ2xhc3NCYXNlZCxcbiAgICAgICAgICBpc1NldENsYXNzT3BlcmF0aW9uOiBpc1NldENsYXNzT3BlcmF0aW9uLFxuICAgICAgICAgIGFwcGx5U3R5bGVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgICAgICAgIGVsZW1lbnQuY3NzKGFuZ3VsYXIuZXh0ZW5kKG9wdGlvbnMuZnJvbSB8fCB7fSwgb3B0aW9ucy50byB8fCB7fSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgYmVmb3JlOiBmdW5jdGlvbihhbGxDb21wbGV0ZUZuKSB7XG4gICAgICAgICAgICBiZWZvcmVDb21wbGV0ZSA9IGFsbENvbXBsZXRlRm47XG4gICAgICAgICAgICBydW4oYmVmb3JlLCBiZWZvcmVDYW5jZWwsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBiZWZvcmVDb21wbGV0ZSA9IG5vb3A7XG4gICAgICAgICAgICAgIGFsbENvbXBsZXRlRm4oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgYWZ0ZXI6IGZ1bmN0aW9uKGFsbENvbXBsZXRlRm4pIHtcbiAgICAgICAgICAgIGFmdGVyQ29tcGxldGUgPSBhbGxDb21wbGV0ZUZuO1xuICAgICAgICAgICAgcnVuKGFmdGVyLCBhZnRlckNhbmNlbCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGFmdGVyQ29tcGxldGUgPSBub29wO1xuICAgICAgICAgICAgICBhbGxDb21wbGV0ZUZuKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNhbmNlbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoYmVmb3JlQ2FuY2VsKSB7XG4gICAgICAgICAgICAgIGZvckVhY2goYmVmb3JlQ2FuY2VsLCBmdW5jdGlvbihjYW5jZWxGbikge1xuICAgICAgICAgICAgICAgIChjYW5jZWxGbiB8fCBub29wKSh0cnVlKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGJlZm9yZUNvbXBsZXRlKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFmdGVyQ2FuY2VsKSB7XG4gICAgICAgICAgICAgIGZvckVhY2goYWZ0ZXJDYW5jZWwsIGZ1bmN0aW9uKGNhbmNlbEZuKSB7XG4gICAgICAgICAgICAgICAgKGNhbmNlbEZuIHx8IG5vb3ApKHRydWUpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgYWZ0ZXJDb21wbGV0ZSh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIHNlcnZpY2VcbiAgICAgICAqIEBuYW1lICRhbmltYXRlXG4gICAgICAgKiBAa2luZCBvYmplY3RcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFRoZSBgJGFuaW1hdGVgIHNlcnZpY2UgcHJvdmlkZXMgYW5pbWF0aW9uIGRldGVjdGlvbiBzdXBwb3J0IHdoaWxlIHBlcmZvcm1pbmcgRE9NIG9wZXJhdGlvbnMgKGVudGVyLCBsZWF2ZSBhbmQgbW92ZSkgYXMgd2VsbCBhcyBkdXJpbmcgYWRkQ2xhc3MgYW5kIHJlbW92ZUNsYXNzIG9wZXJhdGlvbnMuXG4gICAgICAgKiBXaGVuIGFueSBvZiB0aGVzZSBvcGVyYXRpb25zIGFyZSBydW4sIHRoZSAkYW5pbWF0ZSBzZXJ2aWNlXG4gICAgICAgKiB3aWxsIGV4YW1pbmUgYW55IEphdmFTY3JpcHQtZGVmaW5lZCBhbmltYXRpb25zICh3aGljaCBhcmUgZGVmaW5lZCBieSB1c2luZyB0aGUgJGFuaW1hdGVQcm92aWRlciBwcm92aWRlciBvYmplY3QpXG4gICAgICAgKiBhcyB3ZWxsIGFzIGFueSBDU1MtZGVmaW5lZCBhbmltYXRpb25zIGFnYWluc3QgdGhlIENTUyBjbGFzc2VzIHByZXNlbnQgb24gdGhlIGVsZW1lbnQgb25jZSB0aGUgRE9NIG9wZXJhdGlvbiBpcyBydW4uXG4gICAgICAgKlxuICAgICAgICogVGhlIGAkYW5pbWF0ZWAgc2VydmljZSBpcyB1c2VkIGJlaGluZCB0aGUgc2NlbmVzIHdpdGggcHJlLWV4aXN0aW5nIGRpcmVjdGl2ZXMgYW5kIGFuaW1hdGlvbiB3aXRoIHRoZXNlIGRpcmVjdGl2ZXNcbiAgICAgICAqIHdpbGwgd29yayBvdXQgb2YgdGhlIGJveCB3aXRob3V0IGFueSBleHRyYSBjb25maWd1cmF0aW9uLlxuICAgICAgICpcbiAgICAgICAqIFJlcXVpcmVzIHRoZSB7QGxpbmsgbmdBbmltYXRlIGBuZ0FuaW1hdGVgfSBtb2R1bGUgdG8gYmUgaW5zdGFsbGVkLlxuICAgICAgICpcbiAgICAgICAqIFBsZWFzZSB2aXNpdCB0aGUge0BsaW5rIG5nQW5pbWF0ZSBgbmdBbmltYXRlYH0gbW9kdWxlIG92ZXJ2aWV3IHBhZ2UgbGVhcm4gbW9yZSBhYm91dCBob3cgdG8gdXNlIGFuaW1hdGlvbnMgaW4geW91ciBhcHBsaWNhdGlvbi5cbiAgICAgICAqICMjIENhbGxiYWNrIFByb21pc2VzXG4gICAgICAgKiBXaXRoIEFuZ3VsYXJKUyAxLjMsIGVhY2ggb2YgdGhlIGFuaW1hdGlvbiBtZXRob2RzLCBvbiB0aGUgYCRhbmltYXRlYCBzZXJ2aWNlLCByZXR1cm4gYSBwcm9taXNlIHdoZW4gY2FsbGVkLiBUaGVcbiAgICAgICAqIHByb21pc2UgaXRzZWxmIGlzIHRoZW4gcmVzb2x2ZWQgb25jZSB0aGUgYW5pbWF0aW9uIGhhcyBjb21wbGV0ZWQgaXRzZWxmLCBoYXMgYmVlbiBjYW5jZWxsZWQgb3IgaGFzIGJlZW5cbiAgICAgICAqIHNraXBwZWQgZHVlIHRvIGFuaW1hdGlvbnMgYmVpbmcgZGlzYWJsZWQuIChOb3RlIHRoYXQgZXZlbiBpZiB0aGUgYW5pbWF0aW9uIGlzIGNhbmNlbGxlZCBpdCB3aWxsIHN0aWxsXG4gICAgICAgKiBjYWxsIHRoZSByZXNvbHZlIGZ1bmN0aW9uIG9mIHRoZSBhbmltYXRpb24uKVxuICAgICAgICpcbiAgICAgICAqIGBgYGpzXG4gICAgICAgKiAkYW5pbWF0ZS5lbnRlcihlbGVtZW50LCBjb250YWluZXIpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgKiAgIC8vLi4udGhpcyBpcyBjYWxsZWQgb25jZSB0aGUgYW5pbWF0aW9uIGlzIGNvbXBsZXRlLi4uXG4gICAgICAgKiB9KTtcbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqIEFsc28gbm90ZSB0aGF0LCBkdWUgdG8gdGhlIG5hdHVyZSBvZiB0aGUgY2FsbGJhY2sgcHJvbWlzZSwgaWYgYW55IEFuZ3VsYXItc3BlY2lmaWMgY29kZSAobGlrZSBjaGFuZ2luZyB0aGUgc2NvcGUsXG4gICAgICAgKiBsb2NhdGlvbiBvZiB0aGUgcGFnZSwgZXRjLi4uKSBpcyBleGVjdXRlZCB3aXRoaW4gdGhlIGNhbGxiYWNrIHByb21pc2UgdGhlbiBiZSBzdXJlIHRvIHdyYXAgdGhlIGNvZGUgdXNpbmdcbiAgICAgICAqIGAkc2NvcGUuJGFwcGx5KC4uLilgO1xuICAgICAgICpcbiAgICAgICAqIGBgYGpzXG4gICAgICAgKiAkYW5pbWF0ZS5sZWF2ZShlbGVtZW50KS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICogICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICogICAgICRsb2NhdGlvbi5wYXRoKCcvbmV3LXBhZ2UnKTtcbiAgICAgICAqICAgfSk7XG4gICAgICAgKiB9KTtcbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqIEFuIGFuaW1hdGlvbiBjYW4gYWxzbyBiZSBjYW5jZWxsZWQgYnkgY2FsbGluZyB0aGUgYCRhbmltYXRlLmNhbmNlbChwcm9taXNlKWAgbWV0aG9kIHdpdGggdGhlIHByb3ZpZGVkXG4gICAgICAgKiBwcm9taXNlIHRoYXQgd2FzIHJldHVybmVkIHdoZW4gdGhlIGFuaW1hdGlvbiB3YXMgc3RhcnRlZC5cbiAgICAgICAqXG4gICAgICAgKiBgYGBqc1xuICAgICAgICogdmFyIHByb21pc2UgPSAkYW5pbWF0ZS5hZGRDbGFzcyhlbGVtZW50LCAnc3VwZXItbG9uZy1hbmltYXRpb24nKTtcbiAgICAgICAqIHByb21pc2UudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAqICAgLy90aGlzIHdpbGwgc3RpbGwgYmUgY2FsbGVkIGV2ZW4gaWYgY2FuY2VsbGVkXG4gICAgICAgKiB9KTtcbiAgICAgICAqXG4gICAgICAgKiBlbGVtZW50Lm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICogICAvL3Rvb28gbGF6eSB0byB3YWl0IGZvciB0aGUgYW5pbWF0aW9uIHRvIGVuZFxuICAgICAgICogICAkYW5pbWF0ZS5jYW5jZWwocHJvbWlzZSk7XG4gICAgICAgKiB9KTtcbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqIChLZWVwIGluIG1pbmQgdGhhdCB0aGUgcHJvbWlzZSBjYW5jZWxsYXRpb24gaXMgdW5pcXVlIHRvIGAkYW5pbWF0ZWAgc2luY2UgcHJvbWlzZXMgaW5cbiAgICAgICAqIGdlbmVyYWwgY2Fubm90IGJlIGNhbmNlbGxlZC4pXG4gICAgICAgKlxuICAgICAgICovXG4gICAgICByZXR1cm4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNhbmltYXRlXG4gICAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiBQZXJmb3JtcyBhbiBpbmxpbmUgYW5pbWF0aW9uIG9uIHRoZSBlbGVtZW50IHdoaWNoIGFwcGxpZXMgdGhlIHByb3ZpZGVkIGB0b2AgYW5kIGBmcm9tYCBDU1Mgc3R5bGVzIHRvIHRoZSBlbGVtZW50LlxuICAgICAgICAgKiBJZiBhbnkgZGV0ZWN0ZWQgQ1NTIHRyYW5zaXRpb24sIGtleWZyYW1lIG9yIEphdmFTY3JpcHQgbWF0Y2hlcyB0aGUgcHJvdmlkZWQgYGNsYXNzTmFtZWAgdmFsdWUgdGhlbiB0aGUgYW5pbWF0aW9uXG4gICAgICAgICAqIHdpbGwgdGFrZSBvbiB0aGUgcHJvdmlkZWQgc3R5bGVzLiBGb3IgZXhhbXBsZSwgaWYgYSB0cmFuc2l0aW9uIGFuaW1hdGlvbiBpcyBzZXQgZm9yIHRoZSBnaXZlbiBjbGFzc05hbWUgdGhlbiB0aGVcbiAgICAgICAgICogcHJvdmlkZWQgYGZyb21gIGFuZCBgdG9gIHN0eWxlcyB3aWxsIGJlIGFwcGxpZWQgYWxvbmdzaWRlIHRoZSBnaXZlbiB0cmFuc2l0aW9uLiBJZiBhIEphdmFTY3JpcHQgYW5pbWF0aW9uIGlzXG4gICAgICAgICAqIGRldGVjdGVkIHRoZW4gdGhlIHByb3ZpZGVkIHN0eWxlcyB3aWxsIGJlIGdpdmVuIGluIGFzIGZ1bmN0aW9uIHBhcmFtdGVycy5cbiAgICAgICAgICpcbiAgICAgICAgICogYGBganNcbiAgICAgICAgICogbmdNb2R1bGUuYW5pbWF0aW9uKCcubXktaW5saW5lLWFuaW1hdGlvbicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgKiAgIHJldHVybiB7XG4gICAgICAgICAqICAgICBhbmltYXRlIDogZnVuY3Rpb24oZWxlbWVudCwgY2xhc3NOYW1lLCBmcm9tLCB0bywgZG9uZSkge1xuICAgICAgICAgKiAgICAgICAvL3N0eWxlc1xuICAgICAgICAgKiAgICAgfVxuICAgICAgICAgKiAgIH1cbiAgICAgICAgICogfSk7XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKlxuICAgICAgICAgKiBCZWxvdyBpcyBhIGJyZWFrZG93biBvZiBlYWNoIHN0ZXAgdGhhdCBvY2N1cnMgZHVyaW5nIHRoZSBgYW5pbWF0ZWAgYW5pbWF0aW9uOlxuICAgICAgICAgKlxuICAgICAgICAgKiB8IEFuaW1hdGlvbiBTdGVwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFdoYXQgdGhlIGVsZW1lbnQgY2xhc3MgYXR0cmlidXRlIGxvb2tzIGxpa2UgICAgICAgICAgICAgICAgICB8XG4gICAgICAgICAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAgICAgICAgICogfCAxLiBgJGFuaW1hdGUuYW5pbWF0ZSguLi4pYCBpcyBjYWxsZWQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBgY2xhc3M9XCJteS1hbmltYXRpb25cImAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICAgICAqIHwgMi4gYCRhbmltYXRlYCB3YWl0cyBmb3IgdGhlIG5leHQgZGlnZXN0IHRvIHN0YXJ0IHRoZSBhbmltYXRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYGNsYXNzPVwibXktYW5pbWF0aW9uIG5nLWFuaW1hdGVcImAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAgICAgKiB8IDMuIGAkYW5pbWF0ZWAgcnVucyB0aGUgSmF2YVNjcmlwdC1kZWZpbmVkIGFuaW1hdGlvbnMgZGV0ZWN0ZWQgb24gdGhlIGVsZW1lbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGBjbGFzcz1cIm15LWFuaW1hdGlvbiBuZy1hbmltYXRlXCJgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgICAgICogfCA0LiB0aGUgYGNsYXNzTmFtZWAgY2xhc3MgdmFsdWUgaXMgYWRkZWQgdG8gdGhlIGVsZW1lbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBgY2xhc3M9XCJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBjbGFzc05hbWVcImAgICAgICAgICAgICAgICAgICB8XG4gICAgICAgICAqIHwgNS4gYCRhbmltYXRlYCBzY2FucyB0aGUgZWxlbWVudCBzdHlsZXMgdG8gZ2V0IHRoZSBDU1MgdHJhbnNpdGlvbi9hbmltYXRpb24gZHVyYXRpb24gYW5kIGRlbGF5ICAgICAgICAgICAgICAgICAgICAgICAgIHwgYGNsYXNzPVwibXktYW5pbWF0aW9uIG5nLWFuaW1hdGUgY2xhc3NOYW1lXCJgICAgICAgICAgICAgICAgICAgfFxuICAgICAgICAgKiB8IDYuIGAkYW5pbWF0ZWAgYmxvY2tzIGFsbCBDU1MgdHJhbnNpdGlvbnMgb24gdGhlIGVsZW1lbnQgdG8gZW5zdXJlIHRoZSBgLmNsYXNzTmFtZWAgY2xhc3Mgc3R5bGluZyBpcyBhcHBsaWVkIHJpZ2h0IGF3YXl8IGBjbGFzcz1cIm15LWFuaW1hdGlvbiBuZy1hbmltYXRlIGNsYXNzTmFtZVwiYCAgICAgICAgICAgICAgICAgIHxcbiAgICAgICAgICogfCA3LiBgJGFuaW1hdGVgIGFwcGxpZXMgdGhlIHByb3ZpZGVkIGNvbGxlY3Rpb24gb2YgYGZyb21gIENTUyBzdHlsZXMgdG8gdGhlIGVsZW1lbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBgY2xhc3M9XCJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBjbGFzc05hbWVcImAgICAgICAgICAgICAgICAgICB8XG4gICAgICAgICAqIHwgOC4gYCRhbmltYXRlYCB3YWl0cyBmb3IgYSBzaW5nbGUgYW5pbWF0aW9uIGZyYW1lICh0aGlzIHBlcmZvcm1zIGEgcmVmbG93KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYGNsYXNzPVwibXktYW5pbWF0aW9uIG5nLWFuaW1hdGUgY2xhc3NOYW1lXCJgICAgICAgICAgICAgICAgICAgfFxuICAgICAgICAgKiB8IDkuIGAkYW5pbWF0ZWAgcmVtb3ZlcyB0aGUgQ1NTIHRyYW5zaXRpb24gYmxvY2sgcGxhY2VkIG9uIHRoZSBlbGVtZW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGBjbGFzcz1cIm15LWFuaW1hdGlvbiBuZy1hbmltYXRlIGNsYXNzTmFtZVwiYCAgICAgICAgICAgICAgICAgIHxcbiAgICAgICAgICogfCAxMC4gdGhlIGBjbGFzc05hbWUtYWN0aXZlYCBjbGFzcyBpcyBhZGRlZCAodGhpcyB0cmlnZ2VycyB0aGUgQ1NTIHRyYW5zaXRpb24vYW5pbWF0aW9uKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBgY2xhc3M9XCJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBjbGFzc05hbWUgY2xhc3NOYW1lLWFjdGl2ZVwiYCB8XG4gICAgICAgICAqIHwgMTEuIGAkYW5pbWF0ZWAgYXBwbGllcyB0aGUgY29sbGVjdGlvbiBvZiBgdG9gIENTUyBzdHlsZXMgdG8gdGhlIGVsZW1lbnQgd2hpY2ggYXJlIHRoZW4gaGFuZGxlZCBieSB0aGUgdHJhbnNpdGlvbiAgICAgIHwgYGNsYXNzPVwibXktYW5pbWF0aW9uIG5nLWFuaW1hdGUgY2xhc3NOYW1lIGNsYXNzTmFtZS1hY3RpdmVcImAgfFxuICAgICAgICAgKiB8IDEyLiBgJGFuaW1hdGVgIHdhaXRzIGZvciB0aGUgYW5pbWF0aW9uIHRvIGNvbXBsZXRlICh2aWEgZXZlbnRzIGFuZCB0aW1lb3V0KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGBjbGFzcz1cIm15LWFuaW1hdGlvbiBuZy1hbmltYXRlIGNsYXNzTmFtZSBjbGFzc05hbWUtYWN0aXZlXCJgIHxcbiAgICAgICAgICogfCAxMy4gVGhlIGFuaW1hdGlvbiBlbmRzIGFuZCBhbGwgZ2VuZXJhdGVkIENTUyBjbGFzc2VzIGFyZSByZW1vdmVkIGZyb20gdGhlIGVsZW1lbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBgY2xhc3M9XCJteS1hbmltYXRpb25cImAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICAgICAqIHwgMTQuIFRoZSByZXR1cm5lZCBwcm9taXNlIGlzIHJlc29sdmVkLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYGNsYXNzPVwibXktYW5pbWF0aW9uXCJgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgdGhhdCB3aWxsIGJlIHRoZSBmb2N1cyBvZiB0aGUgZW50ZXIgYW5pbWF0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBmcm9tIGEgY29sbGVjdGlvbiBvZiBDU1Mgc3R5bGVzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50IGF0IHRoZSBzdGFydCBvZiB0aGUgYW5pbWF0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSB0byBhIGNvbGxlY3Rpb24gb2YgQ1NTIHN0eWxlcyB0aGF0IHRoZSBlbGVtZW50IHdpbGwgYW5pbWF0ZSB0b3dhcmRzXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gY2xhc3NOYW1lIGFuIG9wdGlvbmFsIENTUyBjbGFzcyB0aGF0IHdpbGwgYmUgYWRkZWQgdG8gdGhlIGVsZW1lbnQgZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGUgYW5pbWF0aW9uICh0aGUgZGVmYXVsdCBjbGFzcyBpcyBgbmctaW5saW5lLWFuaW1hdGVgKVxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgYW4gb3B0aW9uYWwgY29sbGVjdGlvbiBvZiBvcHRpb25zIHRoYXQgd2lsbCBiZSBwaWNrZWQgdXAgYnkgdGhlIENTUyB0cmFuc2l0aW9uL2FuaW1hdGlvblxuICAgICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSB0aGUgYW5pbWF0aW9uIGNhbGxiYWNrIHByb21pc2VcbiAgICAgICAgKi9cbiAgICAgICAgYW5pbWF0ZTogZnVuY3Rpb24oZWxlbWVudCwgZnJvbSwgdG8sIGNsYXNzTmFtZSwgb3B0aW9ucykge1xuICAgICAgICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZSB8fCAnbmctaW5saW5lLWFuaW1hdGUnO1xuICAgICAgICAgIG9wdGlvbnMgPSBwYXJzZUFuaW1hdGVPcHRpb25zKG9wdGlvbnMpIHx8IHt9O1xuICAgICAgICAgIG9wdGlvbnMuZnJvbSA9IHRvID8gZnJvbSA6IG51bGw7XG4gICAgICAgICAgb3B0aW9ucy50byAgID0gdG8gPyB0byA6IGZyb207XG5cbiAgICAgICAgICByZXR1cm4gcnVuQW5pbWF0aW9uUG9zdERpZ2VzdChmdW5jdGlvbihkb25lKSB7XG4gICAgICAgICAgICByZXR1cm4gcGVyZm9ybUFuaW1hdGlvbignYW5pbWF0ZScsIGNsYXNzTmFtZSwgc3RyaXBDb21tZW50c0Zyb21FbGVtZW50KGVsZW1lbnQpLCBudWxsLCBudWxsLCBub29wLCBvcHRpb25zLCBkb25lKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNlbnRlclxuICAgICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogQXBwZW5kcyB0aGUgZWxlbWVudCB0byB0aGUgcGFyZW50RWxlbWVudCBlbGVtZW50IHRoYXQgcmVzaWRlcyBpbiB0aGUgZG9jdW1lbnQgYW5kIHRoZW4gcnVucyB0aGUgZW50ZXIgYW5pbWF0aW9uLiBPbmNlXG4gICAgICAgICAqIHRoZSBhbmltYXRpb24gaXMgc3RhcnRlZCwgdGhlIGZvbGxvd2luZyBDU1MgY2xhc3NlcyB3aWxsIGJlIHByZXNlbnQgb24gdGhlIGVsZW1lbnQgZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGUgYW5pbWF0aW9uOlxuICAgICAgICAgKlxuICAgICAgICAgKiBCZWxvdyBpcyBhIGJyZWFrZG93biBvZiBlYWNoIHN0ZXAgdGhhdCBvY2N1cnMgZHVyaW5nIGVudGVyIGFuaW1hdGlvbjpcbiAgICAgICAgICpcbiAgICAgICAgICogfCBBbmltYXRpb24gU3RlcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBXaGF0IHRoZSBlbGVtZW50IGNsYXNzIGF0dHJpYnV0ZSBsb29rcyBsaWtlICAgICAgICAgICAgICAgIHxcbiAgICAgICAgICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAgICAgICAgICogfCAxLiBgJGFuaW1hdGUuZW50ZXIoLi4uKWAgaXMgY2FsbGVkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBgY2xhc3M9XCJteS1hbmltYXRpb25cImAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAgICAgKiB8IDIuIGVsZW1lbnQgaXMgaW5zZXJ0ZWQgaW50byB0aGUgYHBhcmVudEVsZW1lbnRgIGVsZW1lbnQgb3IgYmVzaWRlIHRoZSBgYWZ0ZXJFbGVtZW50YCBlbGVtZW50ICAgICAgICAgICAgICAgICAgICAgICAgICB8IGBjbGFzcz1cIm15LWFuaW1hdGlvblwiYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICAgICAqIHwgMy4gYCRhbmltYXRlYCB3YWl0cyBmb3IgdGhlIG5leHQgZGlnZXN0IHRvIHN0YXJ0IHRoZSBhbmltYXRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYGNsYXNzPVwibXktYW5pbWF0aW9uIG5nLWFuaW1hdGVcImAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgICAgICogfCA0LiBgJGFuaW1hdGVgIHJ1bnMgdGhlIEphdmFTY3JpcHQtZGVmaW5lZCBhbmltYXRpb25zIGRldGVjdGVkIG9uIHRoZSBlbGVtZW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBgY2xhc3M9XCJteS1hbmltYXRpb24gbmctYW5pbWF0ZVwiYCAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAgICAgKiB8IDUuIHRoZSBgLm5nLWVudGVyYCBjbGFzcyBpcyBhZGRlZCB0byB0aGUgZWxlbWVudCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGBjbGFzcz1cIm15LWFuaW1hdGlvbiBuZy1hbmltYXRlIG5nLWVudGVyXCJgICAgICAgICAgICAgICAgICB8XG4gICAgICAgICAqIHwgNi4gYCRhbmltYXRlYCBzY2FucyB0aGUgZWxlbWVudCBzdHlsZXMgdG8gZ2V0IHRoZSBDU1MgdHJhbnNpdGlvbi9hbmltYXRpb24gZHVyYXRpb24gYW5kIGRlbGF5ICAgICAgICAgICAgICAgICAgICAgICAgIHwgYGNsYXNzPVwibXktYW5pbWF0aW9uIG5nLWFuaW1hdGUgbmctZW50ZXJcImAgICAgICAgICAgICAgICAgIHxcbiAgICAgICAgICogfCA3LiBgJGFuaW1hdGVgIGJsb2NrcyBhbGwgQ1NTIHRyYW5zaXRpb25zIG9uIHRoZSBlbGVtZW50IHRvIGVuc3VyZSB0aGUgYC5uZy1lbnRlcmAgY2xhc3Mgc3R5bGluZyBpcyBhcHBsaWVkIHJpZ2h0IGF3YXkgfCBgY2xhc3M9XCJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBuZy1lbnRlclwiYCAgICAgICAgICAgICAgICAgfFxuICAgICAgICAgKiB8IDguIGAkYW5pbWF0ZWAgd2FpdHMgZm9yIGEgc2luZ2xlIGFuaW1hdGlvbiBmcmFtZSAodGhpcyBwZXJmb3JtcyBhIHJlZmxvdykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGBjbGFzcz1cIm15LWFuaW1hdGlvbiBuZy1hbmltYXRlIG5nLWVudGVyXCJgICAgICAgICAgICAgICAgICB8XG4gICAgICAgICAqIHwgOS4gYCRhbmltYXRlYCByZW1vdmVzIHRoZSBDU1MgdHJhbnNpdGlvbiBibG9jayBwbGFjZWQgb24gdGhlIGVsZW1lbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYGNsYXNzPVwibXktYW5pbWF0aW9uIG5nLWFuaW1hdGUgbmctZW50ZXJcImAgICAgICAgICAgICAgICAgIHxcbiAgICAgICAgICogfCAxMC4gdGhlIGAubmctZW50ZXItYWN0aXZlYCBjbGFzcyBpcyBhZGRlZCAodGhpcyB0cmlnZ2VycyB0aGUgQ1NTIHRyYW5zaXRpb24vYW5pbWF0aW9uKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBgY2xhc3M9XCJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBuZy1lbnRlciBuZy1lbnRlci1hY3RpdmVcImAgfFxuICAgICAgICAgKiB8IDExLiBgJGFuaW1hdGVgIHdhaXRzIGZvciB0aGUgYW5pbWF0aW9uIHRvIGNvbXBsZXRlICh2aWEgZXZlbnRzIGFuZCB0aW1lb3V0KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGBjbGFzcz1cIm15LWFuaW1hdGlvbiBuZy1hbmltYXRlIG5nLWVudGVyIG5nLWVudGVyLWFjdGl2ZVwiYCB8XG4gICAgICAgICAqIHwgMTIuIFRoZSBhbmltYXRpb24gZW5kcyBhbmQgYWxsIGdlbmVyYXRlZCBDU1MgY2xhc3NlcyBhcmUgcmVtb3ZlZCBmcm9tIHRoZSBlbGVtZW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYGNsYXNzPVwibXktYW5pbWF0aW9uXCJgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgICAgICogfCAxMy4gVGhlIHJldHVybmVkIHByb21pc2UgaXMgcmVzb2x2ZWQuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBgY2xhc3M9XCJteS1hbmltYXRpb25cImAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgdGhhdCB3aWxsIGJlIHRoZSBmb2N1cyBvZiB0aGUgZW50ZXIgYW5pbWF0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gcGFyZW50RWxlbWVudCB0aGUgcGFyZW50IGVsZW1lbnQgb2YgdGhlIGVsZW1lbnQgdGhhdCB3aWxsIGJlIHRoZSBmb2N1cyBvZiB0aGUgZW50ZXIgYW5pbWF0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gYWZ0ZXJFbGVtZW50IHRoZSBzaWJsaW5nIGVsZW1lbnQgKHdoaWNoIGlzIHRoZSBwcmV2aW91cyBlbGVtZW50KSBvZiB0aGUgZWxlbWVudCB0aGF0IHdpbGwgYmUgdGhlIGZvY3VzIG9mIHRoZSBlbnRlciBhbmltYXRpb25cbiAgICAgICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIGFuIG9wdGlvbmFsIGNvbGxlY3Rpb24gb2Ygb3B0aW9ucyB0aGF0IHdpbGwgYmUgcGlja2VkIHVwIGJ5IHRoZSBDU1MgdHJhbnNpdGlvbi9hbmltYXRpb25cbiAgICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlXG4gICAgICAgICovXG4gICAgICAgIGVudGVyOiBmdW5jdGlvbihlbGVtZW50LCBwYXJlbnRFbGVtZW50LCBhZnRlckVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgICBvcHRpb25zID0gcGFyc2VBbmltYXRlT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgICBlbGVtZW50ID0gYW5ndWxhci5lbGVtZW50KGVsZW1lbnQpO1xuICAgICAgICAgIHBhcmVudEVsZW1lbnQgPSBwcmVwYXJlRWxlbWVudChwYXJlbnRFbGVtZW50KTtcbiAgICAgICAgICBhZnRlckVsZW1lbnQgPSBwcmVwYXJlRWxlbWVudChhZnRlckVsZW1lbnQpO1xuXG4gICAgICAgICAgY2xhc3NCYXNlZEFuaW1hdGlvbnNCbG9ja2VkKGVsZW1lbnQsIHRydWUpO1xuICAgICAgICAgICRkZWxlZ2F0ZS5lbnRlcihlbGVtZW50LCBwYXJlbnRFbGVtZW50LCBhZnRlckVsZW1lbnQpO1xuICAgICAgICAgIHJldHVybiBydW5BbmltYXRpb25Qb3N0RGlnZXN0KGZ1bmN0aW9uKGRvbmUpIHtcbiAgICAgICAgICAgIHJldHVybiBwZXJmb3JtQW5pbWF0aW9uKCdlbnRlcicsICduZy1lbnRlcicsIHN0cmlwQ29tbWVudHNGcm9tRWxlbWVudChlbGVtZW50KSwgcGFyZW50RWxlbWVudCwgYWZ0ZXJFbGVtZW50LCBub29wLCBvcHRpb25zLCBkb25lKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNsZWF2ZVxuICAgICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogUnVucyB0aGUgbGVhdmUgYW5pbWF0aW9uIG9wZXJhdGlvbiBhbmQsIHVwb24gY29tcGxldGlvbiwgcmVtb3ZlcyB0aGUgZWxlbWVudCBmcm9tIHRoZSBET00uIE9uY2VcbiAgICAgICAgICogdGhlIGFuaW1hdGlvbiBpcyBzdGFydGVkLCB0aGUgZm9sbG93aW5nIENTUyBjbGFzc2VzIHdpbGwgYmUgYWRkZWQgZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGUgYW5pbWF0aW9uOlxuICAgICAgICAgKlxuICAgICAgICAgKiBCZWxvdyBpcyBhIGJyZWFrZG93biBvZiBlYWNoIHN0ZXAgdGhhdCBvY2N1cnMgZHVyaW5nIGxlYXZlIGFuaW1hdGlvbjpcbiAgICAgICAgICpcbiAgICAgICAgICogfCBBbmltYXRpb24gU3RlcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBXaGF0IHRoZSBlbGVtZW50IGNsYXNzIGF0dHJpYnV0ZSBsb29rcyBsaWtlICAgICAgICAgICAgICAgIHxcbiAgICAgICAgICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAgICAgICAgICogfCAxLiBgJGFuaW1hdGUubGVhdmUoLi4uKWAgaXMgY2FsbGVkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBgY2xhc3M9XCJteS1hbmltYXRpb25cImAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAgICAgKiB8IDIuIGAkYW5pbWF0ZWAgcnVucyB0aGUgSmF2YVNjcmlwdC1kZWZpbmVkIGFuaW1hdGlvbnMgZGV0ZWN0ZWQgb24gdGhlIGVsZW1lbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGBjbGFzcz1cIm15LWFuaW1hdGlvbiBuZy1hbmltYXRlXCJgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICAgICAqIHwgMy4gYCRhbmltYXRlYCB3YWl0cyBmb3IgdGhlIG5leHQgZGlnZXN0IHRvIHN0YXJ0IHRoZSBhbmltYXRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYGNsYXNzPVwibXktYW5pbWF0aW9uIG5nLWFuaW1hdGVcImAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgICAgICogfCA0LiB0aGUgYC5uZy1sZWF2ZWAgY2xhc3MgaXMgYWRkZWQgdG8gdGhlIGVsZW1lbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBgY2xhc3M9XCJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBuZy1sZWF2ZVwiYCAgICAgICAgICAgICAgICAgfFxuICAgICAgICAgKiB8IDUuIGAkYW5pbWF0ZWAgc2NhbnMgdGhlIGVsZW1lbnQgc3R5bGVzIHRvIGdldCB0aGUgQ1NTIHRyYW5zaXRpb24vYW5pbWF0aW9uIGR1cmF0aW9uIGFuZCBkZWxheSAgICAgICAgICAgICAgICAgICAgICAgICB8IGBjbGFzcz1cIm15LWFuaW1hdGlvbiBuZy1hbmltYXRlIG5nLWxlYXZlXCJgICAgICAgICAgICAgICAgICB8XG4gICAgICAgICAqIHwgNi4gYCRhbmltYXRlYCBibG9ja3MgYWxsIENTUyB0cmFuc2l0aW9ucyBvbiB0aGUgZWxlbWVudCB0byBlbnN1cmUgdGhlIGAubmctbGVhdmVgIGNsYXNzIHN0eWxpbmcgaXMgYXBwbGllZCByaWdodCBhd2F5IHwgYGNsYXNzPVwibXktYW5pbWF0aW9uIG5nLWFuaW1hdGUgbmctbGVhdmVcImAgICAgICAgICAgICAgICAgIHxcbiAgICAgICAgICogfCA3LiBgJGFuaW1hdGVgIHdhaXRzIGZvciBhIHNpbmdsZSBhbmltYXRpb24gZnJhbWUgKHRoaXMgcGVyZm9ybXMgYSByZWZsb3cpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBgY2xhc3M9XCJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBuZy1sZWF2ZVwiYCAgICAgICAgICAgICAgICAgfFxuICAgICAgICAgKiB8IDguIGAkYW5pbWF0ZWAgcmVtb3ZlcyB0aGUgQ1NTIHRyYW5zaXRpb24gYmxvY2sgcGxhY2VkIG9uIHRoZSBlbGVtZW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGBjbGFzcz1cIm15LWFuaW1hdGlvbiBuZy1hbmltYXRlIG5nLWxlYXZlXCJgICAgICAgICAgICAgICAgICB8XG4gICAgICAgICAqIHwgOS4gdGhlIGAubmctbGVhdmUtYWN0aXZlYCBjbGFzcyBpcyBhZGRlZCAodGhpcyB0cmlnZ2VycyB0aGUgQ1NTIHRyYW5zaXRpb24vYW5pbWF0aW9uKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYGNsYXNzPVwibXktYW5pbWF0aW9uIG5nLWFuaW1hdGUgbmctbGVhdmUgbmctbGVhdmUtYWN0aXZlXCJgIHxcbiAgICAgICAgICogfCAxMC4gYCRhbmltYXRlYCB3YWl0cyBmb3IgdGhlIGFuaW1hdGlvbiB0byBjb21wbGV0ZSAodmlhIGV2ZW50cyBhbmQgdGltZW91dCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBgY2xhc3M9XCJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBuZy1sZWF2ZSBuZy1sZWF2ZS1hY3RpdmVcImAgfFxuICAgICAgICAgKiB8IDExLiBUaGUgYW5pbWF0aW9uIGVuZHMgYW5kIGFsbCBnZW5lcmF0ZWQgQ1NTIGNsYXNzZXMgYXJlIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGBjbGFzcz1cIm15LWFuaW1hdGlvblwiYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICAgICAqIHwgMTIuIFRoZSBlbGVtZW50IGlzIHJlbW92ZWQgZnJvbSB0aGUgRE9NICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICAgICAqIHwgMTMuIFRoZSByZXR1cm5lZCBwcm9taXNlIGlzIHJlc29sdmVkLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB0aGF0IHdpbGwgYmUgdGhlIGZvY3VzIG9mIHRoZSBsZWF2ZSBhbmltYXRpb25cbiAgICAgICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIGFuIG9wdGlvbmFsIGNvbGxlY3Rpb24gb2Ygc3R5bGVzIHRoYXQgd2lsbCBiZSBwaWNrZWQgdXAgYnkgdGhlIENTUyB0cmFuc2l0aW9uL2FuaW1hdGlvblxuICAgICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSB0aGUgYW5pbWF0aW9uIGNhbGxiYWNrIHByb21pc2VcbiAgICAgICAgKi9cbiAgICAgICAgbGVhdmU6IGZ1bmN0aW9uKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgICBvcHRpb25zID0gcGFyc2VBbmltYXRlT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgICBlbGVtZW50ID0gYW5ndWxhci5lbGVtZW50KGVsZW1lbnQpO1xuXG4gICAgICAgICAgY2FuY2VsQ2hpbGRBbmltYXRpb25zKGVsZW1lbnQpO1xuICAgICAgICAgIGNsYXNzQmFzZWRBbmltYXRpb25zQmxvY2tlZChlbGVtZW50LCB0cnVlKTtcbiAgICAgICAgICByZXR1cm4gcnVuQW5pbWF0aW9uUG9zdERpZ2VzdChmdW5jdGlvbihkb25lKSB7XG4gICAgICAgICAgICByZXR1cm4gcGVyZm9ybUFuaW1hdGlvbignbGVhdmUnLCAnbmctbGVhdmUnLCBzdHJpcENvbW1lbnRzRnJvbUVsZW1lbnQoZWxlbWVudCksIG51bGwsIG51bGwsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAkZGVsZWdhdGUubGVhdmUoZWxlbWVudCk7XG4gICAgICAgICAgICB9LCBvcHRpb25zLCBkb25lKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNtb3ZlXG4gICAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiBGaXJlcyB0aGUgbW92ZSBET00gb3BlcmF0aW9uLiBKdXN0IGJlZm9yZSB0aGUgYW5pbWF0aW9uIHN0YXJ0cywgdGhlIGFuaW1hdGUgc2VydmljZSB3aWxsIGVpdGhlciBhcHBlbmQgaXQgaW50byB0aGUgcGFyZW50RWxlbWVudCBjb250YWluZXIgb3JcbiAgICAgICAgICogYWRkIHRoZSBlbGVtZW50IGRpcmVjdGx5IGFmdGVyIHRoZSBhZnRlckVsZW1lbnQgZWxlbWVudCBpZiBwcmVzZW50LiBUaGVuIHRoZSBtb3ZlIGFuaW1hdGlvbiB3aWxsIGJlIHJ1bi4gT25jZVxuICAgICAgICAgKiB0aGUgYW5pbWF0aW9uIGlzIHN0YXJ0ZWQsIHRoZSBmb2xsb3dpbmcgQ1NTIGNsYXNzZXMgd2lsbCBiZSBhZGRlZCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZSBhbmltYXRpb246XG4gICAgICAgICAqXG4gICAgICAgICAqIEJlbG93IGlzIGEgYnJlYWtkb3duIG9mIGVhY2ggc3RlcCB0aGF0IG9jY3VycyBkdXJpbmcgbW92ZSBhbmltYXRpb246XG4gICAgICAgICAqXG4gICAgICAgICAqIHwgQW5pbWF0aW9uIFN0ZXAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBXaGF0IHRoZSBlbGVtZW50IGNsYXNzIGF0dHJpYnV0ZSBsb29rcyBsaWtlICAgICAgICAgICAgICB8XG4gICAgICAgICAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gICAgICAgICAqIHwgMS4gYCRhbmltYXRlLm1vdmUoLi4uKWAgaXMgY2FsbGVkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBgY2xhc3M9XCJteS1hbmltYXRpb25cImAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgICAgICogfCAyLiBlbGVtZW50IGlzIG1vdmVkIGludG8gdGhlIHBhcmVudEVsZW1lbnQgZWxlbWVudCBvciBiZXNpZGUgdGhlIGFmdGVyRWxlbWVudCBlbGVtZW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGBjbGFzcz1cIm15LWFuaW1hdGlvblwiYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAgICAgKiB8IDMuIGAkYW5pbWF0ZWAgd2FpdHMgZm9yIHRoZSBuZXh0IGRpZ2VzdCB0byBzdGFydCB0aGUgYW5pbWF0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYGNsYXNzPVwibXktYW5pbWF0aW9uIG5nLWFuaW1hdGVcImAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICAgICAqIHwgNC4gYCRhbmltYXRlYCBydW5zIHRoZSBKYXZhU2NyaXB0LWRlZmluZWQgYW5pbWF0aW9ucyBkZXRlY3RlZCBvbiB0aGUgZWxlbWVudCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBgY2xhc3M9XCJteS1hbmltYXRpb24gbmctYW5pbWF0ZVwiYCAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgICAgICogfCA1LiB0aGUgYC5uZy1tb3ZlYCBjbGFzcyBpcyBhZGRlZCB0byB0aGUgZWxlbWVudCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGBjbGFzcz1cIm15LWFuaW1hdGlvbiBuZy1hbmltYXRlIG5nLW1vdmVcImAgICAgICAgICAgICAgICAgfFxuICAgICAgICAgKiB8IDYuIGAkYW5pbWF0ZWAgc2NhbnMgdGhlIGVsZW1lbnQgc3R5bGVzIHRvIGdldCB0aGUgQ1NTIHRyYW5zaXRpb24vYW5pbWF0aW9uIGR1cmF0aW9uIGFuZCBkZWxheSAgICAgICAgICAgICAgICAgICAgICAgIHwgYGNsYXNzPVwibXktYW5pbWF0aW9uIG5nLWFuaW1hdGUgbmctbW92ZVwiYCAgICAgICAgICAgICAgICB8XG4gICAgICAgICAqIHwgNy4gYCRhbmltYXRlYCBibG9ja3MgYWxsIENTUyB0cmFuc2l0aW9ucyBvbiB0aGUgZWxlbWVudCB0byBlbnN1cmUgdGhlIGAubmctbW92ZWAgY2xhc3Mgc3R5bGluZyBpcyBhcHBsaWVkIHJpZ2h0IGF3YXkgfCBgY2xhc3M9XCJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBuZy1tb3ZlXCJgICAgICAgICAgICAgICAgIHxcbiAgICAgICAgICogfCA4LiBgJGFuaW1hdGVgIHdhaXRzIGZvciBhIHNpbmdsZSBhbmltYXRpb24gZnJhbWUgKHRoaXMgcGVyZm9ybXMgYSByZWZsb3cpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGBjbGFzcz1cIm15LWFuaW1hdGlvbiBuZy1hbmltYXRlIG5nLW1vdmVcImAgICAgICAgICAgICAgICAgfFxuICAgICAgICAgKiB8IDkuIGAkYW5pbWF0ZWAgcmVtb3ZlcyB0aGUgQ1NTIHRyYW5zaXRpb24gYmxvY2sgcGxhY2VkIG9uIHRoZSBlbGVtZW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYGNsYXNzPVwibXktYW5pbWF0aW9uIG5nLWFuaW1hdGUgbmctbW92ZVwiYCAgICAgICAgICAgICAgICB8XG4gICAgICAgICAqIHwgMTAuIHRoZSBgLm5nLW1vdmUtYWN0aXZlYCBjbGFzcyBpcyBhZGRlZCAodGhpcyB0cmlnZ2VycyB0aGUgQ1NTIHRyYW5zaXRpb24vYW5pbWF0aW9uKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBgY2xhc3M9XCJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBuZy1tb3ZlIG5nLW1vdmUtYWN0aXZlXCJgIHxcbiAgICAgICAgICogfCAxMS4gYCRhbmltYXRlYCB3YWl0cyBmb3IgdGhlIGFuaW1hdGlvbiB0byBjb21wbGV0ZSAodmlhIGV2ZW50cyBhbmQgdGltZW91dCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGBjbGFzcz1cIm15LWFuaW1hdGlvbiBuZy1hbmltYXRlIG5nLW1vdmUgbmctbW92ZS1hY3RpdmVcImAgfFxuICAgICAgICAgKiB8IDEyLiBUaGUgYW5pbWF0aW9uIGVuZHMgYW5kIGFsbCBnZW5lcmF0ZWQgQ1NTIGNsYXNzZXMgYXJlIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYGNsYXNzPVwibXktYW5pbWF0aW9uXCJgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICAgICAqIHwgMTMuIFRoZSByZXR1cm5lZCBwcm9taXNlIGlzIHJlc29sdmVkLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBgY2xhc3M9XCJteS1hbmltYXRpb25cImAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHRoYXQgd2lsbCBiZSB0aGUgZm9jdXMgb2YgdGhlIG1vdmUgYW5pbWF0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gcGFyZW50RWxlbWVudCB0aGUgcGFyZW50RWxlbWVudCBlbGVtZW50IG9mIHRoZSBlbGVtZW50IHRoYXQgd2lsbCBiZSB0aGUgZm9jdXMgb2YgdGhlIG1vdmUgYW5pbWF0aW9uXG4gICAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gYWZ0ZXJFbGVtZW50IHRoZSBzaWJsaW5nIGVsZW1lbnQgKHdoaWNoIGlzIHRoZSBwcmV2aW91cyBlbGVtZW50KSBvZiB0aGUgZWxlbWVudCB0aGF0IHdpbGwgYmUgdGhlIGZvY3VzIG9mIHRoZSBtb3ZlIGFuaW1hdGlvblxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgYW4gb3B0aW9uYWwgY29sbGVjdGlvbiBvZiBzdHlsZXMgdGhhdCB3aWxsIGJlIHBpY2tlZCB1cCBieSB0aGUgQ1NTIHRyYW5zaXRpb24vYW5pbWF0aW9uXG4gICAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IHRoZSBhbmltYXRpb24gY2FsbGJhY2sgcHJvbWlzZVxuICAgICAgICAqL1xuICAgICAgICBtb3ZlOiBmdW5jdGlvbihlbGVtZW50LCBwYXJlbnRFbGVtZW50LCBhZnRlckVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgICBvcHRpb25zID0gcGFyc2VBbmltYXRlT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgICBlbGVtZW50ID0gYW5ndWxhci5lbGVtZW50KGVsZW1lbnQpO1xuICAgICAgICAgIHBhcmVudEVsZW1lbnQgPSBwcmVwYXJlRWxlbWVudChwYXJlbnRFbGVtZW50KTtcbiAgICAgICAgICBhZnRlckVsZW1lbnQgPSBwcmVwYXJlRWxlbWVudChhZnRlckVsZW1lbnQpO1xuXG4gICAgICAgICAgY2FuY2VsQ2hpbGRBbmltYXRpb25zKGVsZW1lbnQpO1xuICAgICAgICAgIGNsYXNzQmFzZWRBbmltYXRpb25zQmxvY2tlZChlbGVtZW50LCB0cnVlKTtcbiAgICAgICAgICAkZGVsZWdhdGUubW92ZShlbGVtZW50LCBwYXJlbnRFbGVtZW50LCBhZnRlckVsZW1lbnQpO1xuICAgICAgICAgIHJldHVybiBydW5BbmltYXRpb25Qb3N0RGlnZXN0KGZ1bmN0aW9uKGRvbmUpIHtcbiAgICAgICAgICAgIHJldHVybiBwZXJmb3JtQW5pbWF0aW9uKCdtb3ZlJywgJ25nLW1vdmUnLCBzdHJpcENvbW1lbnRzRnJvbUVsZW1lbnQoZWxlbWVudCksIHBhcmVudEVsZW1lbnQsIGFmdGVyRWxlbWVudCwgbm9vcCwgb3B0aW9ucywgZG9uZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGFuaW1hdGUjYWRkQ2xhc3NcbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIFRyaWdnZXJzIGEgY3VzdG9tIGFuaW1hdGlvbiBldmVudCBiYXNlZCBvZmYgdGhlIGNsYXNzTmFtZSB2YXJpYWJsZSBhbmQgdGhlbiBhdHRhY2hlcyB0aGUgY2xhc3NOYW1lIHZhbHVlIHRvIHRoZSBlbGVtZW50IGFzIGEgQ1NTIGNsYXNzLlxuICAgICAgICAgKiBVbmxpa2UgdGhlIG90aGVyIGFuaW1hdGlvbiBtZXRob2RzLCB0aGUgYW5pbWF0ZSBzZXJ2aWNlIHdpbGwgc3VmZml4IHRoZSBjbGFzc05hbWUgdmFsdWUgd2l0aCB7QHR5cGUgLWFkZH0gaW4gb3JkZXIgdG8gcHJvdmlkZVxuICAgICAgICAgKiB0aGUgYW5pbWF0ZSBzZXJ2aWNlIHRoZSBzZXR1cCBhbmQgYWN0aXZlIENTUyBjbGFzc2VzIGluIG9yZGVyIHRvIHRyaWdnZXIgdGhlIGFuaW1hdGlvbiAodGhpcyB3aWxsIGJlIHNraXBwZWQgaWYgbm8gQ1NTIHRyYW5zaXRpb25zXG4gICAgICAgICAqIG9yIGtleWZyYW1lcyBhcmUgZGVmaW5lZCBvbiB0aGUgLWFkZC1hY3RpdmUgb3IgYmFzZSBDU1MgY2xhc3MpLlxuICAgICAgICAgKlxuICAgICAgICAgKiBCZWxvdyBpcyBhIGJyZWFrZG93biBvZiBlYWNoIHN0ZXAgdGhhdCBvY2N1cnMgZHVyaW5nIGFkZENsYXNzIGFuaW1hdGlvbjpcbiAgICAgICAgICpcbiAgICAgICAgICogfCBBbmltYXRpb24gU3RlcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBXaGF0IHRoZSBlbGVtZW50IGNsYXNzIGF0dHJpYnV0ZSBsb29rcyBsaWtlICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAgICAgKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gICAgICAgICAqIHwgMS4gYCRhbmltYXRlLmFkZENsYXNzKGVsZW1lbnQsICdzdXBlcicpYCBpcyBjYWxsZWQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYGNsYXNzPVwibXktYW5pbWF0aW9uXCJgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAgICAgKiB8IDIuIGAkYW5pbWF0ZWAgcnVucyB0aGUgSmF2YVNjcmlwdC1kZWZpbmVkIGFuaW1hdGlvbnMgZGV0ZWN0ZWQgb24gdGhlIGVsZW1lbnQgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGBjbGFzcz1cIm15LWFuaW1hdGlvbiBuZy1hbmltYXRlXCJgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgICAgICogfCAzLiB0aGUgYC5zdXBlci1hZGRgIGNsYXNzIGlzIGFkZGVkIHRvIHRoZSBlbGVtZW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBgY2xhc3M9XCJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBzdXBlci1hZGRcImAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICAgICAqIHwgNC4gYCRhbmltYXRlYCB3YWl0cyBmb3IgYSBzaW5nbGUgYW5pbWF0aW9uIGZyYW1lICh0aGlzIHBlcmZvcm1zIGEgcmVmbG93KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYGNsYXNzPVwibXktYW5pbWF0aW9uIG5nLWFuaW1hdGUgc3VwZXItYWRkXCJgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAgICAgKiB8IDUuIHRoZSBgLnN1cGVyYCBhbmQgYC5zdXBlci1hZGQtYWN0aXZlYCBjbGFzc2VzIGFyZSBhZGRlZCAodGhpcyB0cmlnZ2VycyB0aGUgQ1NTIHRyYW5zaXRpb24vYW5pbWF0aW9uKSB8IGBjbGFzcz1cIm15LWFuaW1hdGlvbiBuZy1hbmltYXRlIHN1cGVyIHN1cGVyLWFkZCBzdXBlci1hZGQtYWN0aXZlXCJgIHxcbiAgICAgICAgICogfCA2LiBgJGFuaW1hdGVgIHNjYW5zIHRoZSBlbGVtZW50IHN0eWxlcyB0byBnZXQgdGhlIENTUyB0cmFuc2l0aW9uL2FuaW1hdGlvbiBkdXJhdGlvbiBhbmQgZGVsYXkgICAgICAgICAgfCBgY2xhc3M9XCJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBzdXBlciBzdXBlci1hZGQgc3VwZXItYWRkLWFjdGl2ZVwiYCB8XG4gICAgICAgICAqIHwgNy4gYCRhbmltYXRlYCB3YWl0cyBmb3IgdGhlIGFuaW1hdGlvbiB0byBjb21wbGV0ZSAodmlhIGV2ZW50cyBhbmQgdGltZW91dCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYGNsYXNzPVwibXktYW5pbWF0aW9uIG5nLWFuaW1hdGUgc3VwZXIgc3VwZXItYWRkIHN1cGVyLWFkZC1hY3RpdmVcImAgfFxuICAgICAgICAgKiB8IDguIFRoZSBhbmltYXRpb24gZW5kcyBhbmQgYWxsIGdlbmVyYXRlZCBDU1MgY2xhc3NlcyBhcmUgcmVtb3ZlZCBmcm9tIHRoZSBlbGVtZW50ICAgICAgICAgICAgICAgICAgICAgICB8IGBjbGFzcz1cIm15LWFuaW1hdGlvbiBzdXBlclwiYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgICAgICogfCA5LiBUaGUgc3VwZXIgY2xhc3MgaXMga2VwdCBvbiB0aGUgZWxlbWVudCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBgY2xhc3M9XCJteS1hbmltYXRpb24gc3VwZXJcImAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICAgICAqIHwgMTAuIFRoZSByZXR1cm5lZCBwcm9taXNlIGlzIHJlc29sdmVkLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYGNsYXNzPVwibXktYW5pbWF0aW9uIHN1cGVyXCJgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgdGhhdCB3aWxsIGJlIGFuaW1hdGVkXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWUgdGhlIENTUyBjbGFzcyB0aGF0IHdpbGwgYmUgYWRkZWQgdG8gdGhlIGVsZW1lbnQgYW5kIHRoZW4gYW5pbWF0ZWRcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIGFuIG9wdGlvbmFsIGNvbGxlY3Rpb24gb2Ygc3R5bGVzIHRoYXQgd2lsbCBiZSBwaWNrZWQgdXAgYnkgdGhlIENTUyB0cmFuc2l0aW9uL2FuaW1hdGlvblxuICAgICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSB0aGUgYW5pbWF0aW9uIGNhbGxiYWNrIHByb21pc2VcbiAgICAgICAgKi9cbiAgICAgICAgYWRkQ2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIGNsYXNzTmFtZSwgb3B0aW9ucykge1xuICAgICAgICAgIHJldHVybiB0aGlzLnNldENsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSwgW10sIG9wdGlvbnMpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAqIEBuYW1lICRhbmltYXRlI3JlbW92ZUNsYXNzXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiBUcmlnZ2VycyBhIGN1c3RvbSBhbmltYXRpb24gZXZlbnQgYmFzZWQgb2ZmIHRoZSBjbGFzc05hbWUgdmFyaWFibGUgYW5kIHRoZW4gcmVtb3ZlcyB0aGUgQ1NTIGNsYXNzIHByb3ZpZGVkIGJ5IHRoZSBjbGFzc05hbWUgdmFsdWVcbiAgICAgICAgICogZnJvbSB0aGUgZWxlbWVudC4gVW5saWtlIHRoZSBvdGhlciBhbmltYXRpb24gbWV0aG9kcywgdGhlIGFuaW1hdGUgc2VydmljZSB3aWxsIHN1ZmZpeCB0aGUgY2xhc3NOYW1lIHZhbHVlIHdpdGgge0B0eXBlIC1yZW1vdmV9IGluXG4gICAgICAgICAqIG9yZGVyIHRvIHByb3ZpZGUgdGhlIGFuaW1hdGUgc2VydmljZSB0aGUgc2V0dXAgYW5kIGFjdGl2ZSBDU1MgY2xhc3NlcyBpbiBvcmRlciB0byB0cmlnZ2VyIHRoZSBhbmltYXRpb24gKHRoaXMgd2lsbCBiZSBza2lwcGVkIGlmXG4gICAgICAgICAqIG5vIENTUyB0cmFuc2l0aW9ucyBvciBrZXlmcmFtZXMgYXJlIGRlZmluZWQgb24gdGhlIC1yZW1vdmUgb3IgYmFzZSBDU1MgY2xhc3NlcykuXG4gICAgICAgICAqXG4gICAgICAgICAqIEJlbG93IGlzIGEgYnJlYWtkb3duIG9mIGVhY2ggc3RlcCB0aGF0IG9jY3VycyBkdXJpbmcgcmVtb3ZlQ2xhc3MgYW5pbWF0aW9uOlxuICAgICAgICAgKlxuICAgICAgICAgKiB8IEFuaW1hdGlvbiBTdGVwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgV2hhdCB0aGUgZWxlbWVudCBjbGFzcyBhdHRyaWJ1dGUgbG9va3MgbGlrZSAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgICAgICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gICAgICAgICAqIHwgMS4gYCRhbmltYXRlLnJlbW92ZUNsYXNzKGVsZW1lbnQsICdzdXBlcicpYCBpcyBjYWxsZWQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBgY2xhc3M9XCJteS1hbmltYXRpb24gc3VwZXJcImAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICAgICAqIHwgMi4gYCRhbmltYXRlYCBydW5zIHRoZSBKYXZhU2NyaXB0LWRlZmluZWQgYW5pbWF0aW9ucyBkZXRlY3RlZCBvbiB0aGUgZWxlbWVudCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBgY2xhc3M9XCJteS1hbmltYXRpb24gc3VwZXIgbmctYW5pbWF0ZVwiYCAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICAgICAqIHwgMy4gdGhlIGAuc3VwZXItcmVtb3ZlYCBjbGFzcyBpcyBhZGRlZCB0byB0aGUgZWxlbWVudCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBgY2xhc3M9XCJteS1hbmltYXRpb24gc3VwZXIgbmctYW5pbWF0ZSBzdXBlci1yZW1vdmVcImAgICAgICAgICAgICAgICB8XG4gICAgICAgICAqIHwgNC4gYCRhbmltYXRlYCB3YWl0cyBmb3IgYSBzaW5nbGUgYW5pbWF0aW9uIGZyYW1lICh0aGlzIHBlcmZvcm1zIGEgcmVmbG93KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBgY2xhc3M9XCJteS1hbmltYXRpb24gc3VwZXIgbmctYW5pbWF0ZSBzdXBlci1yZW1vdmVcImAgICAgICAgICAgICAgICB8XG4gICAgICAgICAqIHwgNS4gdGhlIGAuc3VwZXItcmVtb3ZlLWFjdGl2ZWAgY2xhc3NlcyBhcmUgYWRkZWQgYW5kIGAuc3VwZXJgIGlzIHJlbW92ZWQgKHRoaXMgdHJpZ2dlcnMgdGhlIENTUyB0cmFuc2l0aW9uL2FuaW1hdGlvbikgfCBgY2xhc3M9XCJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBzdXBlci1yZW1vdmUgc3VwZXItcmVtb3ZlLWFjdGl2ZVwiYCB8XG4gICAgICAgICAqIHwgNi4gYCRhbmltYXRlYCBzY2FucyB0aGUgZWxlbWVudCBzdHlsZXMgdG8gZ2V0IHRoZSBDU1MgdHJhbnNpdGlvbi9hbmltYXRpb24gZHVyYXRpb24gYW5kIGRlbGF5ICAgICAgICAgICAgICAgICAgICAgICAgfCBgY2xhc3M9XCJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBzdXBlci1yZW1vdmUgc3VwZXItcmVtb3ZlLWFjdGl2ZVwiYCB8XG4gICAgICAgICAqIHwgNy4gYCRhbmltYXRlYCB3YWl0cyBmb3IgdGhlIGFuaW1hdGlvbiB0byBjb21wbGV0ZSAodmlhIGV2ZW50cyBhbmQgdGltZW91dCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBgY2xhc3M9XCJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBzdXBlci1yZW1vdmUgc3VwZXItcmVtb3ZlLWFjdGl2ZVwiYCB8XG4gICAgICAgICAqIHwgOC4gVGhlIGFuaW1hdGlvbiBlbmRzIGFuZCBhbGwgZ2VuZXJhdGVkIENTUyBjbGFzc2VzIGFyZSByZW1vdmVkIGZyb20gdGhlIGVsZW1lbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBgY2xhc3M9XCJteS1hbmltYXRpb25cImAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICAgICAqIHwgOS4gVGhlIHJldHVybmVkIHByb21pc2UgaXMgcmVzb2x2ZWQuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBgY2xhc3M9XCJteS1hbmltYXRpb25cImAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICAgICAqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB0aGF0IHdpbGwgYmUgYW5pbWF0ZWRcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZSB0aGUgQ1NTIGNsYXNzIHRoYXQgd2lsbCBiZSBhbmltYXRlZCBhbmQgdGhlbiByZW1vdmVkIGZyb20gdGhlIGVsZW1lbnRcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIGFuIG9wdGlvbmFsIGNvbGxlY3Rpb24gb2Ygc3R5bGVzIHRoYXQgd2lsbCBiZSBwaWNrZWQgdXAgYnkgdGhlIENTUyB0cmFuc2l0aW9uL2FuaW1hdGlvblxuICAgICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSB0aGUgYW5pbWF0aW9uIGNhbGxiYWNrIHByb21pc2VcbiAgICAgICAgKi9cbiAgICAgICAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIGNsYXNzTmFtZSwgb3B0aW9ucykge1xuICAgICAgICAgIHJldHVybiB0aGlzLnNldENsYXNzKGVsZW1lbnQsIFtdLCBjbGFzc05hbWUsIG9wdGlvbnMpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAqIEBuYW1lICRhbmltYXRlI3NldENsYXNzXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBBZGRzIGFuZC9vciByZW1vdmVzIHRoZSBnaXZlbiBDU1MgY2xhc3NlcyB0byBhbmQgZnJvbSB0aGUgZWxlbWVudC5cbiAgICAgICAgICogT25jZSBjb21wbGV0ZSwgdGhlIGBkb25lKClgIGNhbGxiYWNrIHdpbGwgYmUgZmlyZWQgKGlmIHByb3ZpZGVkKS5cbiAgICAgICAgICpcbiAgICAgICAgICogfCBBbmltYXRpb24gU3RlcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFdoYXQgdGhlIGVsZW1lbnQgY2xhc3MgYXR0cmlidXRlIGxvb2tzIGxpa2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgICAgICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAgICAgICAgICogfCAxLiBgJGFuaW1hdGUuc2V0Q2xhc3MoZWxlbWVudCwgJ29uJywgJ29mZicpYCBpcyBjYWxsZWQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGBjbGFzcz1cIm15LWFuaW1hdGlvbiBvZmZcImAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAgICAgKiB8IDIuIGAkYW5pbWF0ZWAgcnVucyB0aGUgSmF2YVNjcmlwdC1kZWZpbmVkIGFuaW1hdGlvbnMgZGV0ZWN0ZWQgb24gdGhlIGVsZW1lbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYGNsYXNzPVwibXktYW5pbWF0aW9uIG5nLWFuaW1hdGUgb2ZmXCJgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICAgICAqIHwgMy4gdGhlIGAub24tYWRkYCBhbmQgYC5vZmYtcmVtb3ZlYCBjbGFzc2VzIGFyZSBhZGRlZCB0byB0aGUgZWxlbWVudCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBgY2xhc3M9XCJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBvbi1hZGQgb2ZmLXJlbW92ZSBvZmZcImAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgICAgICogfCA0LiBgJGFuaW1hdGVgIHdhaXRzIGZvciBhIHNpbmdsZSBhbmltYXRpb24gZnJhbWUgKHRoaXMgcGVyZm9ybXMgYSByZWZsb3cpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGBjbGFzcz1cIm15LWFuaW1hdGlvbiBuZy1hbmltYXRlIG9uLWFkZCBvZmYtcmVtb3ZlIG9mZlwiYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAgICAgKiB8IDUuIHRoZSBgLm9uYCwgYC5vbi1hZGQtYWN0aXZlYCBhbmQgYC5vZmYtcmVtb3ZlLWFjdGl2ZWAgY2xhc3NlcyBhcmUgYWRkZWQgYW5kIGAub2ZmYCBpcyByZW1vdmVkICh0aGlzIHRyaWdnZXJzIHRoZSBDU1MgdHJhbnNpdGlvbi9hbmltYXRpb24pIHwgYGNsYXNzPVwibXktYW5pbWF0aW9uIG5nLWFuaW1hdGUgb24gb24tYWRkIG9uLWFkZC1hY3RpdmUgb2ZmLXJlbW92ZSBvZmYtcmVtb3ZlLWFjdGl2ZVwiYCB8XG4gICAgICAgICAqIHwgNi4gYCRhbmltYXRlYCBzY2FucyB0aGUgZWxlbWVudCBzdHlsZXMgdG8gZ2V0IHRoZSBDU1MgdHJhbnNpdGlvbi9hbmltYXRpb24gZHVyYXRpb24gYW5kIGRlbGF5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBgY2xhc3M9XCJteS1hbmltYXRpb24gbmctYW5pbWF0ZSBvbiBvbi1hZGQgb24tYWRkLWFjdGl2ZSBvZmYtcmVtb3ZlIG9mZi1yZW1vdmUtYWN0aXZlXCJgIHxcbiAgICAgICAgICogfCA3LiBgJGFuaW1hdGVgIHdhaXRzIGZvciB0aGUgYW5pbWF0aW9uIHRvIGNvbXBsZXRlICh2aWEgZXZlbnRzIGFuZCB0aW1lb3V0KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGBjbGFzcz1cIm15LWFuaW1hdGlvbiBuZy1hbmltYXRlIG9uIG9uLWFkZCBvbi1hZGQtYWN0aXZlIG9mZi1yZW1vdmUgb2ZmLXJlbW92ZS1hY3RpdmVcImAgfFxuICAgICAgICAgKiB8IDguIFRoZSBhbmltYXRpb24gZW5kcyBhbmQgYWxsIGdlbmVyYXRlZCBDU1MgY2xhc3NlcyBhcmUgcmVtb3ZlZCBmcm9tIHRoZSBlbGVtZW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYGNsYXNzPVwibXktYW5pbWF0aW9uIG9uXCJgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICAgICAqIHwgOS4gVGhlIHJldHVybmVkIHByb21pc2UgaXMgcmVzb2x2ZWQuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBgY2xhc3M9XCJteS1hbmltYXRpb24gb25cImAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHdoaWNoIHdpbGwgaGF2ZSBpdHMgQ1NTIGNsYXNzZXMgY2hhbmdlZFxuICAgICAgICAgKiAgIHJlbW92ZWQgZnJvbSBpdFxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gYWRkIHRoZSBDU1MgY2xhc3NlcyB3aGljaCB3aWxsIGJlIGFkZGVkIHRvIHRoZSBlbGVtZW50XG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZW1vdmUgdGhlIENTUyBjbGFzcyB3aGljaCB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudFxuICAgICAgICAgKiAgIENTUyBjbGFzc2VzIGhhdmUgYmVlbiBzZXQgb24gdGhlIGVsZW1lbnRcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIGFuIG9wdGlvbmFsIGNvbGxlY3Rpb24gb2Ygc3R5bGVzIHRoYXQgd2lsbCBiZSBwaWNrZWQgdXAgYnkgdGhlIENTUyB0cmFuc2l0aW9uL2FuaW1hdGlvblxuICAgICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSB0aGUgYW5pbWF0aW9uIGNhbGxiYWNrIHByb21pc2VcbiAgICAgICAgICovXG4gICAgICAgIHNldENsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBhZGQsIHJlbW92ZSwgb3B0aW9ucykge1xuICAgICAgICAgIG9wdGlvbnMgPSBwYXJzZUFuaW1hdGVPcHRpb25zKG9wdGlvbnMpO1xuXG4gICAgICAgICAgdmFyIFNUT1JBR0VfS0VZID0gJyQkYW5pbWF0ZUNsYXNzZXMnO1xuICAgICAgICAgIGVsZW1lbnQgPSBhbmd1bGFyLmVsZW1lbnQoZWxlbWVudCk7XG4gICAgICAgICAgZWxlbWVudCA9IHN0cmlwQ29tbWVudHNGcm9tRWxlbWVudChlbGVtZW50KTtcblxuICAgICAgICAgIGlmIChjbGFzc0Jhc2VkQW5pbWF0aW9uc0Jsb2NrZWQoZWxlbWVudCkpIHtcbiAgICAgICAgICAgIHJldHVybiAkZGVsZWdhdGUuJCRzZXRDbGFzc0ltbWVkaWF0ZWx5KGVsZW1lbnQsIGFkZCwgcmVtb3ZlLCBvcHRpb25zKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyB3ZSdyZSB1c2luZyBhIGNvbWJpbmVkIGFycmF5IGZvciBib3RoIHRoZSBhZGQgYW5kIHJlbW92ZVxuICAgICAgICAgIC8vIG9wZXJhdGlvbnMgc2luY2UgdGhlIE9SREVSIE9GIGFkZENsYXNzIGFuZCByZW1vdmVDbGFzcyBtYXR0ZXJzXG4gICAgICAgICAgdmFyIGNsYXNzZXMsIGNhY2hlID0gZWxlbWVudC5kYXRhKFNUT1JBR0VfS0VZKTtcbiAgICAgICAgICB2YXIgaGFzQ2FjaGUgPSAhIWNhY2hlO1xuICAgICAgICAgIGlmICghY2FjaGUpIHtcbiAgICAgICAgICAgIGNhY2hlID0ge307XG4gICAgICAgICAgICBjYWNoZS5jbGFzc2VzID0ge307XG4gICAgICAgICAgfVxuICAgICAgICAgIGNsYXNzZXMgPSBjYWNoZS5jbGFzc2VzO1xuXG4gICAgICAgICAgYWRkID0gaXNBcnJheShhZGQpID8gYWRkIDogYWRkLnNwbGl0KCcgJyk7XG4gICAgICAgICAgZm9yRWFjaChhZGQsIGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICAgIGlmIChjICYmIGMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGNsYXNzZXNbY10gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmVtb3ZlID0gaXNBcnJheShyZW1vdmUpID8gcmVtb3ZlIDogcmVtb3ZlLnNwbGl0KCcgJyk7XG4gICAgICAgICAgZm9yRWFjaChyZW1vdmUsIGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICAgIGlmIChjICYmIGMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGNsYXNzZXNbY10gPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmIChoYXNDYWNoZSkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMgJiYgY2FjaGUub3B0aW9ucykge1xuICAgICAgICAgICAgICBjYWNoZS5vcHRpb25zID0gYW5ndWxhci5leHRlbmQoY2FjaGUub3B0aW9ucyB8fCB7fSwgb3B0aW9ucyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vdGhlIGRpZ2VzdCBjeWNsZSB3aWxsIGNvbWJpbmUgYWxsIHRoZSBhbmltYXRpb25zIGludG8gb25lIGZ1bmN0aW9uXG4gICAgICAgICAgICByZXR1cm4gY2FjaGUucHJvbWlzZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWxlbWVudC5kYXRhKFNUT1JBR0VfS0VZLCBjYWNoZSA9IHtcbiAgICAgICAgICAgICAgY2xhc3NlczogY2xhc3NlcyxcbiAgICAgICAgICAgICAgb3B0aW9uczogb3B0aW9uc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGNhY2hlLnByb21pc2UgPSBydW5BbmltYXRpb25Qb3N0RGlnZXN0KGZ1bmN0aW9uKGRvbmUpIHtcbiAgICAgICAgICAgIHZhciBwYXJlbnRFbGVtZW50ID0gZWxlbWVudC5wYXJlbnQoKTtcbiAgICAgICAgICAgIHZhciBlbGVtZW50Tm9kZSA9IGV4dHJhY3RFbGVtZW50Tm9kZShlbGVtZW50KTtcbiAgICAgICAgICAgIHZhciBwYXJlbnROb2RlID0gZWxlbWVudE5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICAgIC8vIFRPRE8obWF0c2tvKTogbW92ZSB0aGlzIGNvZGUgaW50byB0aGUgYW5pbWF0aW9uc0Rpc2FibGVkKCkgZnVuY3Rpb24gb25jZSAjODA5MiBpcyBmaXhlZFxuICAgICAgICAgICAgaWYgKCFwYXJlbnROb2RlIHx8IHBhcmVudE5vZGVbJyQkTkdfUkVNT1ZFRCddIHx8IGVsZW1lbnROb2RlWyckJE5HX1JFTU9WRUQnXSkge1xuICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGNhY2hlID0gZWxlbWVudC5kYXRhKFNUT1JBR0VfS0VZKTtcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlRGF0YShTVE9SQUdFX0tFWSk7XG5cbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IGVsZW1lbnQuZGF0YShOR19BTklNQVRFX1NUQVRFKSB8fCB7fTtcbiAgICAgICAgICAgIHZhciBjbGFzc2VzID0gcmVzb2x2ZUVsZW1lbnRDbGFzc2VzKGVsZW1lbnQsIGNhY2hlLCBzdGF0ZS5hY3RpdmUpO1xuICAgICAgICAgICAgcmV0dXJuICFjbGFzc2VzXG4gICAgICAgICAgICAgID8gZG9uZSgpXG4gICAgICAgICAgICAgIDogcGVyZm9ybUFuaW1hdGlvbignc2V0Q2xhc3MnLCBjbGFzc2VzLCBlbGVtZW50LCBwYXJlbnRFbGVtZW50LCBudWxsLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChjbGFzc2VzWzBdKSAkZGVsZWdhdGUuJCRhZGRDbGFzc0ltbWVkaWF0ZWx5KGVsZW1lbnQsIGNsYXNzZXNbMF0pO1xuICAgICAgICAgICAgICAgICAgaWYgKGNsYXNzZXNbMV0pICRkZWxlZ2F0ZS4kJHJlbW92ZUNsYXNzSW1tZWRpYXRlbHkoZWxlbWVudCwgY2xhc3Nlc1sxXSk7XG4gICAgICAgICAgICAgICAgfSwgY2FjaGUub3B0aW9ucywgZG9uZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGFuaW1hdGUjY2FuY2VsXG4gICAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7UHJvbWlzZX0gYW5pbWF0aW9uUHJvbWlzZSBUaGUgYW5pbWF0aW9uIHByb21pc2UgdGhhdCBpcyByZXR1cm5lZCB3aGVuIGFuIGFuaW1hdGlvbiBpcyBzdGFydGVkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogQ2FuY2VscyB0aGUgcHJvdmlkZWQgYW5pbWF0aW9uLlxuICAgICAgICAqL1xuICAgICAgICBjYW5jZWw6IGZ1bmN0aW9uKHByb21pc2UpIHtcbiAgICAgICAgICBwcm9taXNlLiQkY2FuY2VsRm4oKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNlbmFibGVkXG4gICAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IHZhbHVlIElmIHByb3ZpZGVkIHRoZW4gc2V0IHRoZSBhbmltYXRpb24gb24gb3Igb2ZmLlxuICAgICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnQ9fSBlbGVtZW50IElmIHByb3ZpZGVkIHRoZW4gdGhlIGVsZW1lbnQgd2lsbCBiZSB1c2VkIHRvIHJlcHJlc2VudCB0aGUgZW5hYmxlL2Rpc2FibGUgb3BlcmF0aW9uXG4gICAgICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IEN1cnJlbnQgYW5pbWF0aW9uIHN0YXRlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogR2xvYmFsbHkgZW5hYmxlcy9kaXNhYmxlcyBhbmltYXRpb25zLlxuICAgICAgICAgKlxuICAgICAgICAqL1xuICAgICAgICBlbmFibGVkOiBmdW5jdGlvbih2YWx1ZSwgZWxlbWVudCkge1xuICAgICAgICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBjbGVhbnVwKGVsZW1lbnQpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gZWxlbWVudC5kYXRhKE5HX0FOSU1BVEVfU1RBVEUpIHx8IHt9O1xuICAgICAgICAgICAgICAgIGRhdGEuZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuZGF0YShOR19BTklNQVRFX1NUQVRFLCBkYXRhKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgcm9vdEFuaW1hdGVTdGF0ZS5kaXNhYmxlZCA9ICF2YWx1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICB2YWx1ZSA9ICFyb290QW5pbWF0ZVN0YXRlLmRpc2FibGVkO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiAhIXZhbHVlO1xuICAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgLypcbiAgICAgICAgYWxsIGFuaW1hdGlvbnMgY2FsbCB0aGlzIHNoYXJlZCBhbmltYXRpb24gdHJpZ2dlcmluZyBmdW5jdGlvbiBpbnRlcm5hbGx5LlxuICAgICAgICBUaGUgYW5pbWF0aW9uRXZlbnQgdmFyaWFibGUgcmVmZXJzIHRvIHRoZSBKYXZhU2NyaXB0IGFuaW1hdGlvbiBldmVudCB0aGF0IHdpbGwgYmUgdHJpZ2dlcmVkXG4gICAgICAgIGFuZCB0aGUgY2xhc3NOYW1lIHZhbHVlIGlzIHRoZSBuYW1lIG9mIHRoZSBhbmltYXRpb24gdGhhdCB3aWxsIGJlIGFwcGxpZWQgd2l0aGluIHRoZVxuICAgICAgICBDU1MgY29kZS4gRWxlbWVudCwgYHBhcmVudEVsZW1lbnRgIGFuZCBgYWZ0ZXJFbGVtZW50YCBhcmUgcHJvdmlkZWQgRE9NIGVsZW1lbnRzIGZvciB0aGUgYW5pbWF0aW9uXG4gICAgICAgIGFuZCB0aGUgb25Db21wbGV0ZSBjYWxsYmFjayB3aWxsIGJlIGZpcmVkIG9uY2UgdGhlIGFuaW1hdGlvbiBpcyBmdWxseSBjb21wbGV0ZS5cbiAgICAgICovXG4gICAgICBmdW5jdGlvbiBwZXJmb3JtQW5pbWF0aW9uKGFuaW1hdGlvbkV2ZW50LCBjbGFzc05hbWUsIGVsZW1lbnQsIHBhcmVudEVsZW1lbnQsIGFmdGVyRWxlbWVudCwgZG9tT3BlcmF0aW9uLCBvcHRpb25zLCBkb25lQ2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG5vb3BDYW5jZWwgPSBub29wO1xuICAgICAgICB2YXIgcnVubmVyID0gYW5pbWF0aW9uUnVubmVyKGVsZW1lbnQsIGFuaW1hdGlvbkV2ZW50LCBjbGFzc05hbWUsIG9wdGlvbnMpO1xuICAgICAgICBpZiAoIXJ1bm5lcikge1xuICAgICAgICAgIGZpcmVET01PcGVyYXRpb24oKTtcbiAgICAgICAgICBmaXJlQmVmb3JlQ2FsbGJhY2tBc3luYygpO1xuICAgICAgICAgIGZpcmVBZnRlckNhbGxiYWNrQXN5bmMoKTtcbiAgICAgICAgICBjbG9zZUFuaW1hdGlvbigpO1xuICAgICAgICAgIHJldHVybiBub29wQ2FuY2VsO1xuICAgICAgICB9XG5cbiAgICAgICAgYW5pbWF0aW9uRXZlbnQgPSBydW5uZXIuZXZlbnQ7XG4gICAgICAgIGNsYXNzTmFtZSA9IHJ1bm5lci5jbGFzc05hbWU7XG4gICAgICAgIHZhciBlbGVtZW50RXZlbnRzID0gYW5ndWxhci5lbGVtZW50Ll9kYXRhKHJ1bm5lci5ub2RlKTtcbiAgICAgICAgZWxlbWVudEV2ZW50cyA9IGVsZW1lbnRFdmVudHMgJiYgZWxlbWVudEV2ZW50cy5ldmVudHM7XG5cbiAgICAgICAgaWYgKCFwYXJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgcGFyZW50RWxlbWVudCA9IGFmdGVyRWxlbWVudCA/IGFmdGVyRWxlbWVudC5wYXJlbnQoKSA6IGVsZW1lbnQucGFyZW50KCk7XG4gICAgICAgIH1cblxuICAgICAgICAvL3NraXAgdGhlIGFuaW1hdGlvbiBpZiBhbmltYXRpb25zIGFyZSBkaXNhYmxlZCwgYSBwYXJlbnQgaXMgYWxyZWFkeSBiZWluZyBhbmltYXRlZCxcbiAgICAgICAgLy90aGUgZWxlbWVudCBpcyBub3QgY3VycmVudGx5IGF0dGFjaGVkIHRvIHRoZSBkb2N1bWVudCBib2R5IG9yIHRoZW4gY29tcGxldGVseSBjbG9zZVxuICAgICAgICAvL3RoZSBhbmltYXRpb24gaWYgYW55IG1hdGNoaW5nIGFuaW1hdGlvbnMgYXJlIG5vdCBmb3VuZCBhdCBhbGwuXG4gICAgICAgIC8vTk9URTogSUU4ICsgSUU5IHNob3VsZCBjbG9zZSBwcm9wZXJseSAocnVuIGNsb3NlQW5pbWF0aW9uKCkpIGluIGNhc2UgYW4gYW5pbWF0aW9uIHdhcyBmb3VuZC5cbiAgICAgICAgaWYgKGFuaW1hdGlvbnNEaXNhYmxlZChlbGVtZW50LCBwYXJlbnRFbGVtZW50KSkge1xuICAgICAgICAgIGZpcmVET01PcGVyYXRpb24oKTtcbiAgICAgICAgICBmaXJlQmVmb3JlQ2FsbGJhY2tBc3luYygpO1xuICAgICAgICAgIGZpcmVBZnRlckNhbGxiYWNrQXN5bmMoKTtcbiAgICAgICAgICBjbG9zZUFuaW1hdGlvbigpO1xuICAgICAgICAgIHJldHVybiBub29wQ2FuY2VsO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG5nQW5pbWF0ZVN0YXRlICA9IGVsZW1lbnQuZGF0YShOR19BTklNQVRFX1NUQVRFKSB8fCB7fTtcbiAgICAgICAgdmFyIHJ1bm5pbmdBbmltYXRpb25zICAgICA9IG5nQW5pbWF0ZVN0YXRlLmFjdGl2ZSB8fCB7fTtcbiAgICAgICAgdmFyIHRvdGFsQWN0aXZlQW5pbWF0aW9ucyA9IG5nQW5pbWF0ZVN0YXRlLnRvdGFsQWN0aXZlIHx8IDA7XG4gICAgICAgIHZhciBsYXN0QW5pbWF0aW9uICAgICAgICAgPSBuZ0FuaW1hdGVTdGF0ZS5sYXN0O1xuICAgICAgICB2YXIgc2tpcEFuaW1hdGlvbiA9IGZhbHNlO1xuXG4gICAgICAgIGlmICh0b3RhbEFjdGl2ZUFuaW1hdGlvbnMgPiAwKSB7XG4gICAgICAgICAgdmFyIGFuaW1hdGlvbnNUb0NhbmNlbCA9IFtdO1xuICAgICAgICAgIGlmICghcnVubmVyLmlzQ2xhc3NCYXNlZCkge1xuICAgICAgICAgICAgaWYgKGFuaW1hdGlvbkV2ZW50ID09ICdsZWF2ZScgJiYgcnVubmluZ0FuaW1hdGlvbnNbJ25nLWxlYXZlJ10pIHtcbiAgICAgICAgICAgICAgc2tpcEFuaW1hdGlvbiA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvL2NhbmNlbCBhbGwgYW5pbWF0aW9ucyB3aGVuIGEgc3RydWN0dXJhbCBhbmltYXRpb24gdGFrZXMgcGxhY2VcbiAgICAgICAgICAgICAgZm9yICh2YXIga2xhc3MgaW4gcnVubmluZ0FuaW1hdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb25zVG9DYW5jZWwucHVzaChydW5uaW5nQW5pbWF0aW9uc1trbGFzc10pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIG5nQW5pbWF0ZVN0YXRlID0ge307XG4gICAgICAgICAgICAgIGNsZWFudXAoZWxlbWVudCwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChsYXN0QW5pbWF0aW9uLmV2ZW50ID09ICdzZXRDbGFzcycpIHtcbiAgICAgICAgICAgIGFuaW1hdGlvbnNUb0NhbmNlbC5wdXNoKGxhc3RBbmltYXRpb24pO1xuICAgICAgICAgICAgY2xlYW51cChlbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgICAgIH0gZWxzZSBpZiAocnVubmluZ0FuaW1hdGlvbnNbY2xhc3NOYW1lXSkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSBydW5uaW5nQW5pbWF0aW9uc1tjbGFzc05hbWVdO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnQuZXZlbnQgPT0gYW5pbWF0aW9uRXZlbnQpIHtcbiAgICAgICAgICAgICAgc2tpcEFuaW1hdGlvbiA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBhbmltYXRpb25zVG9DYW5jZWwucHVzaChjdXJyZW50KTtcbiAgICAgICAgICAgICAgY2xlYW51cChlbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChhbmltYXRpb25zVG9DYW5jZWwubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9yRWFjaChhbmltYXRpb25zVG9DYW5jZWwsIGZ1bmN0aW9uKG9wZXJhdGlvbikge1xuICAgICAgICAgICAgICBvcGVyYXRpb24uY2FuY2VsKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocnVubmVyLmlzQ2xhc3NCYXNlZFxuICAgICAgICAgICAgJiYgIXJ1bm5lci5pc1NldENsYXNzT3BlcmF0aW9uXG4gICAgICAgICAgICAmJiBhbmltYXRpb25FdmVudCAhPSAnYW5pbWF0ZSdcbiAgICAgICAgICAgICYmICFza2lwQW5pbWF0aW9uKSB7XG4gICAgICAgICAgc2tpcEFuaW1hdGlvbiA9IChhbmltYXRpb25FdmVudCA9PSAnYWRkQ2xhc3MnKSA9PSBlbGVtZW50Lmhhc0NsYXNzKGNsYXNzTmFtZSk7IC8vb3Bwb3NpdGUgb2YgWE9SXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2tpcEFuaW1hdGlvbikge1xuICAgICAgICAgIGZpcmVET01PcGVyYXRpb24oKTtcbiAgICAgICAgICBmaXJlQmVmb3JlQ2FsbGJhY2tBc3luYygpO1xuICAgICAgICAgIGZpcmVBZnRlckNhbGxiYWNrQXN5bmMoKTtcbiAgICAgICAgICBmaXJlRG9uZUNhbGxiYWNrQXN5bmMoKTtcbiAgICAgICAgICByZXR1cm4gbm9vcENhbmNlbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJ1bm5pbmdBbmltYXRpb25zICAgICA9IG5nQW5pbWF0ZVN0YXRlLmFjdGl2ZSB8fCB7fTtcbiAgICAgICAgdG90YWxBY3RpdmVBbmltYXRpb25zID0gbmdBbmltYXRlU3RhdGUudG90YWxBY3RpdmUgfHwgMDtcblxuICAgICAgICBpZiAoYW5pbWF0aW9uRXZlbnQgPT0gJ2xlYXZlJykge1xuICAgICAgICAgIC8vdGhlcmUncyBubyBuZWVkIHRvIGV2ZXIgcmVtb3ZlIHRoZSBsaXN0ZW5lciBzaW5jZSB0aGUgZWxlbWVudFxuICAgICAgICAgIC8vd2lsbCBiZSByZW1vdmVkIChkZXN0cm95ZWQpIGFmdGVyIHRoZSBsZWF2ZSBhbmltYXRpb24gZW5kcyBvclxuICAgICAgICAgIC8vaXMgY2FuY2VsbGVkIG1pZHdheVxuICAgICAgICAgIGVsZW1lbnQub25lKCckZGVzdHJveScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0gYW5ndWxhci5lbGVtZW50KHRoaXMpO1xuICAgICAgICAgICAgdmFyIHN0YXRlID0gZWxlbWVudC5kYXRhKE5HX0FOSU1BVEVfU1RBVEUpO1xuICAgICAgICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgICAgICAgIHZhciBhY3RpdmVMZWF2ZUFuaW1hdGlvbiA9IHN0YXRlLmFjdGl2ZVsnbmctbGVhdmUnXTtcbiAgICAgICAgICAgICAgaWYgKGFjdGl2ZUxlYXZlQW5pbWF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlTGVhdmVBbmltYXRpb24uY2FuY2VsKCk7XG4gICAgICAgICAgICAgICAgY2xlYW51cChlbGVtZW50LCAnbmctbGVhdmUnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy90aGUgbmctYW5pbWF0ZSBjbGFzcyBkb2VzIG5vdGhpbmcsIGJ1dCBpdCdzIGhlcmUgdG8gYWxsb3cgZm9yXG4gICAgICAgIC8vcGFyZW50IGFuaW1hdGlvbnMgdG8gZmluZCBhbmQgY2FuY2VsIGNoaWxkIGFuaW1hdGlvbnMgd2hlbiBuZWVkZWRcbiAgICAgICAgJCRqcUxpdGUuYWRkQ2xhc3MoZWxlbWVudCwgTkdfQU5JTUFURV9DTEFTU19OQU1FKTtcbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy50ZW1wQ2xhc3Nlcykge1xuICAgICAgICAgIGZvckVhY2gob3B0aW9ucy50ZW1wQ2xhc3NlcywgZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAkJGpxTGl0ZS5hZGRDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGxvY2FsQW5pbWF0aW9uQ291bnQgPSBnbG9iYWxBbmltYXRpb25Db3VudGVyKys7XG4gICAgICAgIHRvdGFsQWN0aXZlQW5pbWF0aW9ucysrO1xuICAgICAgICBydW5uaW5nQW5pbWF0aW9uc1tjbGFzc05hbWVdID0gcnVubmVyO1xuXG4gICAgICAgIGVsZW1lbnQuZGF0YShOR19BTklNQVRFX1NUQVRFLCB7XG4gICAgICAgICAgbGFzdDogcnVubmVyLFxuICAgICAgICAgIGFjdGl2ZTogcnVubmluZ0FuaW1hdGlvbnMsXG4gICAgICAgICAgaW5kZXg6IGxvY2FsQW5pbWF0aW9uQ291bnQsXG4gICAgICAgICAgdG90YWxBY3RpdmU6IHRvdGFsQWN0aXZlQW5pbWF0aW9uc1xuICAgICAgICB9KTtcblxuICAgICAgICAvL2ZpcnN0IHdlIHJ1biB0aGUgYmVmb3JlIGFuaW1hdGlvbnMgYW5kIHdoZW4gYWxsIG9mIHRob3NlIGFyZSBjb21wbGV0ZVxuICAgICAgICAvL3RoZW4gd2UgcGVyZm9ybSB0aGUgRE9NIG9wZXJhdGlvbiBhbmQgcnVuIHRoZSBuZXh0IHNldCBvZiBhbmltYXRpb25zXG4gICAgICAgIGZpcmVCZWZvcmVDYWxsYmFja0FzeW5jKCk7XG4gICAgICAgIHJ1bm5lci5iZWZvcmUoZnVuY3Rpb24oY2FuY2VsbGVkKSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSBlbGVtZW50LmRhdGEoTkdfQU5JTUFURV9TVEFURSk7XG4gICAgICAgICAgY2FuY2VsbGVkID0gY2FuY2VsbGVkIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAhZGF0YSB8fCAhZGF0YS5hY3RpdmVbY2xhc3NOYW1lXSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKHJ1bm5lci5pc0NsYXNzQmFzZWQgJiYgZGF0YS5hY3RpdmVbY2xhc3NOYW1lXS5ldmVudCAhPSBhbmltYXRpb25FdmVudCk7XG5cbiAgICAgICAgICBmaXJlRE9NT3BlcmF0aW9uKCk7XG4gICAgICAgICAgaWYgKGNhbmNlbGxlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY2xvc2VBbmltYXRpb24oKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZmlyZUFmdGVyQ2FsbGJhY2tBc3luYygpO1xuICAgICAgICAgICAgcnVubmVyLmFmdGVyKGNsb3NlQW5pbWF0aW9uKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBydW5uZXIuY2FuY2VsO1xuXG4gICAgICAgIGZ1bmN0aW9uIGZpcmVET01DYWxsYmFjayhhbmltYXRpb25QaGFzZSkge1xuICAgICAgICAgIHZhciBldmVudE5hbWUgPSAnJGFuaW1hdGU6JyArIGFuaW1hdGlvblBoYXNlO1xuICAgICAgICAgIGlmIChlbGVtZW50RXZlbnRzICYmIGVsZW1lbnRFdmVudHNbZXZlbnROYW1lXSAmJiBlbGVtZW50RXZlbnRzW2V2ZW50TmFtZV0ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgJCRhc3luY0NhbGxiYWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBlbGVtZW50LnRyaWdnZXJIYW5kbGVyKGV2ZW50TmFtZSwge1xuICAgICAgICAgICAgICAgIGV2ZW50OiBhbmltYXRpb25FdmVudCxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGZpcmVCZWZvcmVDYWxsYmFja0FzeW5jKCkge1xuICAgICAgICAgIGZpcmVET01DYWxsYmFjaygnYmVmb3JlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBmaXJlQWZ0ZXJDYWxsYmFja0FzeW5jKCkge1xuICAgICAgICAgIGZpcmVET01DYWxsYmFjaygnYWZ0ZXInKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGZpcmVEb25lQ2FsbGJhY2tBc3luYygpIHtcbiAgICAgICAgICBmaXJlRE9NQ2FsbGJhY2soJ2Nsb3NlJyk7XG4gICAgICAgICAgZG9uZUNhbGxiYWNrKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvL2l0IGlzIGxlc3MgY29tcGxpY2F0ZWQgdG8gdXNlIGEgZmxhZyB0aGFuIG1hbmFnaW5nIGFuZCBjYW5jZWxpbmdcbiAgICAgICAgLy90aW1lb3V0cyBjb250YWluaW5nIG11bHRpcGxlIGNhbGxiYWNrcy5cbiAgICAgICAgZnVuY3Rpb24gZmlyZURPTU9wZXJhdGlvbigpIHtcbiAgICAgICAgICBpZiAoIWZpcmVET01PcGVyYXRpb24uaGFzQmVlblJ1bikge1xuICAgICAgICAgICAgZmlyZURPTU9wZXJhdGlvbi5oYXNCZWVuUnVuID0gdHJ1ZTtcbiAgICAgICAgICAgIGRvbU9wZXJhdGlvbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNsb3NlQW5pbWF0aW9uKCkge1xuICAgICAgICAgIGlmICghY2xvc2VBbmltYXRpb24uaGFzQmVlblJ1bikge1xuICAgICAgICAgICAgaWYgKHJ1bm5lcikgeyAvL3RoZSBydW5uZXIgZG9lc24ndCBleGlzdCBpZiBpdCBmYWlscyB0byBpbnN0YW50aWF0ZVxuICAgICAgICAgICAgICBydW5uZXIuYXBwbHlTdHlsZXMoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2xvc2VBbmltYXRpb24uaGFzQmVlblJ1biA9IHRydWU7XG4gICAgICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnRlbXBDbGFzc2VzKSB7XG4gICAgICAgICAgICAgIGZvckVhY2gob3B0aW9ucy50ZW1wQ2xhc3NlcywgZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgICAgJCRqcUxpdGUucmVtb3ZlQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBkYXRhID0gZWxlbWVudC5kYXRhKE5HX0FOSU1BVEVfU1RBVEUpO1xuICAgICAgICAgICAgaWYgKGRhdGEpIHtcblxuICAgICAgICAgICAgICAvKiBvbmx5IHN0cnVjdHVyYWwgYW5pbWF0aW9ucyB3YWl0IGZvciByZWZsb3cgYmVmb3JlIHJlbW92aW5nIGFuXG4gICAgICAgICAgICAgICAgIGFuaW1hdGlvbiwgYnV0IGNsYXNzLWJhc2VkIGFuaW1hdGlvbnMgZG9uJ3QuIEFuIGV4YW1wbGUgb2YgdGhpc1xuICAgICAgICAgICAgICAgICBmYWlsaW5nIHdvdWxkIGJlIHdoZW4gYSBwYXJlbnQgSFRNTCB0YWcgaGFzIGEgbmctY2xhc3MgYXR0cmlidXRlXG4gICAgICAgICAgICAgICAgIGNhdXNpbmcgQUxMIGRpcmVjdGl2ZXMgYmVsb3cgdG8gc2tpcCBhbmltYXRpb25zIGR1cmluZyB0aGUgZGlnZXN0ICovXG4gICAgICAgICAgICAgIGlmIChydW5uZXIgJiYgcnVubmVyLmlzQ2xhc3NCYXNlZCkge1xuICAgICAgICAgICAgICAgIGNsZWFudXAoZWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkJGFzeW5jQ2FsbGJhY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IGVsZW1lbnQuZGF0YShOR19BTklNQVRFX1NUQVRFKSB8fCB7fTtcbiAgICAgICAgICAgICAgICAgIGlmIChsb2NhbEFuaW1hdGlvbkNvdW50ID09IGRhdGEuaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYW51cChlbGVtZW50LCBjbGFzc05hbWUsIGFuaW1hdGlvbkV2ZW50KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmRhdGEoTkdfQU5JTUFURV9TVEFURSwgZGF0YSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpcmVEb25lQ2FsbGJhY2tBc3luYygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjYW5jZWxDaGlsZEFuaW1hdGlvbnMoZWxlbWVudCkge1xuICAgICAgICB2YXIgbm9kZSA9IGV4dHJhY3RFbGVtZW50Tm9kZShlbGVtZW50KTtcbiAgICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgICB2YXIgbm9kZXMgPSBhbmd1bGFyLmlzRnVuY3Rpb24obm9kZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKSA/XG4gICAgICAgICAgICBub2RlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoTkdfQU5JTUFURV9DTEFTU19OQU1FKSA6XG4gICAgICAgICAgICBub2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgTkdfQU5JTUFURV9DTEFTU19OQU1FKTtcbiAgICAgICAgICBmb3JFYWNoKG5vZGVzLCBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICBlbGVtZW50ID0gYW5ndWxhci5lbGVtZW50KGVsZW1lbnQpO1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBlbGVtZW50LmRhdGEoTkdfQU5JTUFURV9TVEFURSk7XG4gICAgICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLmFjdGl2ZSkge1xuICAgICAgICAgICAgICBmb3JFYWNoKGRhdGEuYWN0aXZlLCBmdW5jdGlvbihydW5uZXIpIHtcbiAgICAgICAgICAgICAgICBydW5uZXIuY2FuY2VsKCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNsZWFudXAoZWxlbWVudCwgY2xhc3NOYW1lKSB7XG4gICAgICAgIGlmIChpc01hdGNoaW5nRWxlbWVudChlbGVtZW50LCAkcm9vdEVsZW1lbnQpKSB7XG4gICAgICAgICAgaWYgKCFyb290QW5pbWF0ZVN0YXRlLmRpc2FibGVkKSB7XG4gICAgICAgICAgICByb290QW5pbWF0ZVN0YXRlLnJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHJvb3RBbmltYXRlU3RhdGUuc3RydWN0dXJhbCA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChjbGFzc05hbWUpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IGVsZW1lbnQuZGF0YShOR19BTklNQVRFX1NUQVRFKSB8fCB7fTtcblxuICAgICAgICAgIHZhciByZW1vdmVBbmltYXRpb25zID0gY2xhc3NOYW1lID09PSB0cnVlO1xuICAgICAgICAgIGlmICghcmVtb3ZlQW5pbWF0aW9ucyAmJiBkYXRhLmFjdGl2ZSAmJiBkYXRhLmFjdGl2ZVtjbGFzc05hbWVdKSB7XG4gICAgICAgICAgICBkYXRhLnRvdGFsQWN0aXZlLS07XG4gICAgICAgICAgICBkZWxldGUgZGF0YS5hY3RpdmVbY2xhc3NOYW1lXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocmVtb3ZlQW5pbWF0aW9ucyB8fCAhZGF0YS50b3RhbEFjdGl2ZSkge1xuICAgICAgICAgICAgJCRqcUxpdGUucmVtb3ZlQ2xhc3MoZWxlbWVudCwgTkdfQU5JTUFURV9DTEFTU19OQU1FKTtcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlRGF0YShOR19BTklNQVRFX1NUQVRFKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYW5pbWF0aW9uc0Rpc2FibGVkKGVsZW1lbnQsIHBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgaWYgKHJvb3RBbmltYXRlU3RhdGUuZGlzYWJsZWQpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc01hdGNoaW5nRWxlbWVudChlbGVtZW50LCAkcm9vdEVsZW1lbnQpKSB7XG4gICAgICAgICAgcmV0dXJuIHJvb3RBbmltYXRlU3RhdGUucnVubmluZztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhbGxvd0NoaWxkQW5pbWF0aW9ucywgcGFyZW50UnVubmluZ0FuaW1hdGlvbiwgaGFzUGFyZW50O1xuICAgICAgICBkbyB7XG4gICAgICAgICAgLy90aGUgZWxlbWVudCBkaWQgbm90IHJlYWNoIHRoZSByb290IGVsZW1lbnQgd2hpY2ggbWVhbnMgdGhhdCBpdFxuICAgICAgICAgIC8vaXMgbm90IGFwYXJ0IG9mIHRoZSBET00uIFRoZXJlZm9yZSB0aGVyZSBpcyBubyByZWFzb24gdG8gZG9cbiAgICAgICAgICAvL2FueSBhbmltYXRpb25zIG9uIGl0XG4gICAgICAgICAgaWYgKHBhcmVudEVsZW1lbnQubGVuZ3RoID09PSAwKSBicmVhaztcblxuICAgICAgICAgIHZhciBpc1Jvb3QgPSBpc01hdGNoaW5nRWxlbWVudChwYXJlbnRFbGVtZW50LCAkcm9vdEVsZW1lbnQpO1xuICAgICAgICAgIHZhciBzdGF0ZSA9IGlzUm9vdCA/IHJvb3RBbmltYXRlU3RhdGUgOiAocGFyZW50RWxlbWVudC5kYXRhKE5HX0FOSU1BVEVfU1RBVEUpIHx8IHt9KTtcbiAgICAgICAgICBpZiAoc3RhdGUuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vbm8gbWF0dGVyIHdoYXQsIGZvciBhbiBhbmltYXRpb24gdG8gd29yayBpdCBtdXN0IHJlYWNoIHRoZSByb290IGVsZW1lbnRcbiAgICAgICAgICAvL3RoaXMgaW1wbGllcyB0aGF0IHRoZSBlbGVtZW50IGlzIGF0dGFjaGVkIHRvIHRoZSBET00gd2hlbiB0aGUgYW5pbWF0aW9uIGlzIHJ1blxuICAgICAgICAgIGlmIChpc1Jvb3QpIHtcbiAgICAgICAgICAgIGhhc1BhcmVudCA9IHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy9vbmNlIGEgZmxhZyBpcyBmb3VuZCB0aGF0IGlzIHN0cmljdGx5IGZhbHNlIHRoZW4gZXZlcnl0aGluZyBiZWZvcmVcbiAgICAgICAgICAvL2l0IHdpbGwgYmUgZGlzY2FyZGVkIGFuZCBhbGwgY2hpbGQgYW5pbWF0aW9ucyB3aWxsIGJlIHJlc3RyaWN0ZWRcbiAgICAgICAgICBpZiAoYWxsb3dDaGlsZEFuaW1hdGlvbnMgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICB2YXIgYW5pbWF0ZUNoaWxkcmVuRmxhZyA9IHBhcmVudEVsZW1lbnQuZGF0YShOR19BTklNQVRFX0NISUxEUkVOKTtcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChhbmltYXRlQ2hpbGRyZW5GbGFnKSkge1xuICAgICAgICAgICAgICBhbGxvd0NoaWxkQW5pbWF0aW9ucyA9IGFuaW1hdGVDaGlsZHJlbkZsYWc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGFyZW50UnVubmluZ0FuaW1hdGlvbiA9IHBhcmVudFJ1bm5pbmdBbmltYXRpb24gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUucnVubmluZyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoc3RhdGUubGFzdCAmJiAhc3RhdGUubGFzdC5pc0NsYXNzQmFzZWQpO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChwYXJlbnRFbGVtZW50ID0gcGFyZW50RWxlbWVudC5wYXJlbnQoKSk7XG5cbiAgICAgICAgcmV0dXJuICFoYXNQYXJlbnQgfHwgKCFhbGxvd0NoaWxkQW5pbWF0aW9ucyAmJiBwYXJlbnRSdW5uaW5nQW5pbWF0aW9uKTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICAkYW5pbWF0ZVByb3ZpZGVyLnJlZ2lzdGVyKCcnLCBbJyR3aW5kb3cnLCAnJHNuaWZmZXInLCAnJHRpbWVvdXQnLCAnJCRhbmltYXRlUmVmbG93JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCR3aW5kb3csICAgJHNuaWZmZXIsICAgJHRpbWVvdXQsICAgJCRhbmltYXRlUmVmbG93KSB7XG4gICAgICAvLyBEZXRlY3QgcHJvcGVyIHRyYW5zaXRpb25lbmQvYW5pbWF0aW9uZW5kIGV2ZW50IG5hbWVzLlxuICAgICAgdmFyIENTU19QUkVGSVggPSAnJywgVFJBTlNJVElPTl9QUk9QLCBUUkFOU0lUSU9ORU5EX0VWRU5ULCBBTklNQVRJT05fUFJPUCwgQU5JTUFUSU9ORU5EX0VWRU5UO1xuXG4gICAgICAvLyBJZiB1bnByZWZpeGVkIGV2ZW50cyBhcmUgbm90IHN1cHBvcnRlZCBidXQgd2Via2l0LXByZWZpeGVkIGFyZSwgdXNlIHRoZSBsYXR0ZXIuXG4gICAgICAvLyBPdGhlcndpc2UsIGp1c3QgdXNlIFczQyBuYW1lcywgYnJvd3NlcnMgbm90IHN1cHBvcnRpbmcgdGhlbSBhdCBhbGwgd2lsbCBqdXN0IGlnbm9yZSB0aGVtLlxuICAgICAgLy8gTm90ZTogQ2hyb21lIGltcGxlbWVudHMgYHdpbmRvdy5vbndlYmtpdGFuaW1hdGlvbmVuZGAgYW5kIGRvZXNuJ3QgaW1wbGVtZW50IGB3aW5kb3cub25hbmltYXRpb25lbmRgXG4gICAgICAvLyBidXQgYXQgdGhlIHNhbWUgdGltZSBkaXNwYXRjaGVzIHRoZSBgYW5pbWF0aW9uZW5kYCBldmVudCBhbmQgbm90IGB3ZWJraXRBbmltYXRpb25FbmRgLlxuICAgICAgLy8gUmVnaXN0ZXIgYm90aCBldmVudHMgaW4gY2FzZSBgd2luZG93Lm9uYW5pbWF0aW9uZW5kYCBpcyBub3Qgc3VwcG9ydGVkIGJlY2F1c2Ugb2YgdGhhdCxcbiAgICAgIC8vIGRvIHRoZSBzYW1lIGZvciBgdHJhbnNpdGlvbmVuZGAgYXMgU2FmYXJpIGlzIGxpa2VseSB0byBleGhpYml0IHNpbWlsYXIgYmVoYXZpb3IuXG4gICAgICAvLyBBbHNvLCB0aGUgb25seSBtb2Rlcm4gYnJvd3NlciB0aGF0IHVzZXMgdmVuZG9yIHByZWZpeGVzIGZvciB0cmFuc2l0aW9ucy9rZXlmcmFtZXMgaXMgd2Via2l0XG4gICAgICAvLyB0aGVyZWZvcmUgdGhlcmUgaXMgbm8gcmVhc29uIHRvIHRlc3QgYW55bW9yZSBmb3Igb3RoZXIgdmVuZG9yIHByZWZpeGVzOiBodHRwOi8vY2FuaXVzZS5jb20vI3NlYXJjaD10cmFuc2l0aW9uXG4gICAgICBpZiAod2luZG93Lm9udHJhbnNpdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmIHdpbmRvdy5vbndlYmtpdHRyYW5zaXRpb25lbmQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBDU1NfUFJFRklYID0gJy13ZWJraXQtJztcbiAgICAgICAgVFJBTlNJVElPTl9QUk9QID0gJ1dlYmtpdFRyYW5zaXRpb24nO1xuICAgICAgICBUUkFOU0lUSU9ORU5EX0VWRU5UID0gJ3dlYmtpdFRyYW5zaXRpb25FbmQgdHJhbnNpdGlvbmVuZCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBUUkFOU0lUSU9OX1BST1AgPSAndHJhbnNpdGlvbic7XG4gICAgICAgIFRSQU5TSVRJT05FTkRfRVZFTlQgPSAndHJhbnNpdGlvbmVuZCc7XG4gICAgICB9XG5cbiAgICAgIGlmICh3aW5kb3cub25hbmltYXRpb25lbmQgPT09IHVuZGVmaW5lZCAmJiB3aW5kb3cub253ZWJraXRhbmltYXRpb25lbmQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBDU1NfUFJFRklYID0gJy13ZWJraXQtJztcbiAgICAgICAgQU5JTUFUSU9OX1BST1AgPSAnV2Via2l0QW5pbWF0aW9uJztcbiAgICAgICAgQU5JTUFUSU9ORU5EX0VWRU5UID0gJ3dlYmtpdEFuaW1hdGlvbkVuZCBhbmltYXRpb25lbmQnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgQU5JTUFUSU9OX1BST1AgPSAnYW5pbWF0aW9uJztcbiAgICAgICAgQU5JTUFUSU9ORU5EX0VWRU5UID0gJ2FuaW1hdGlvbmVuZCc7XG4gICAgICB9XG5cbiAgICAgIHZhciBEVVJBVElPTl9LRVkgPSAnRHVyYXRpb24nO1xuICAgICAgdmFyIFBST1BFUlRZX0tFWSA9ICdQcm9wZXJ0eSc7XG4gICAgICB2YXIgREVMQVlfS0VZID0gJ0RlbGF5JztcbiAgICAgIHZhciBBTklNQVRJT05fSVRFUkFUSU9OX0NPVU5UX0tFWSA9ICdJdGVyYXRpb25Db3VudCc7XG4gICAgICB2YXIgQU5JTUFUSU9OX1BMQVlTVEFURV9LRVkgPSAnUGxheVN0YXRlJztcbiAgICAgIHZhciBOR19BTklNQVRFX1BBUkVOVF9LRVkgPSAnJCRuZ0FuaW1hdGVLZXknO1xuICAgICAgdmFyIE5HX0FOSU1BVEVfQ1NTX0RBVEFfS0VZID0gJyQkbmdBbmltYXRlQ1NTM0RhdGEnO1xuICAgICAgdmFyIEVMQVBTRURfVElNRV9NQVhfREVDSU1BTF9QTEFDRVMgPSAzO1xuICAgICAgdmFyIENMT1NJTkdfVElNRV9CVUZGRVIgPSAxLjU7XG4gICAgICB2YXIgT05FX1NFQ09ORCA9IDEwMDA7XG5cbiAgICAgIHZhciBsb29rdXBDYWNoZSA9IHt9O1xuICAgICAgdmFyIHBhcmVudENvdW50ZXIgPSAwO1xuICAgICAgdmFyIGFuaW1hdGlvblJlZmxvd1F1ZXVlID0gW107XG4gICAgICB2YXIgY2FuY2VsQW5pbWF0aW9uUmVmbG93O1xuICAgICAgZnVuY3Rpb24gY2xlYXJDYWNoZUFmdGVyUmVmbG93KCkge1xuICAgICAgICBpZiAoIWNhbmNlbEFuaW1hdGlvblJlZmxvdykge1xuICAgICAgICAgIGNhbmNlbEFuaW1hdGlvblJlZmxvdyA9ICQkYW5pbWF0ZVJlZmxvdyhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGFuaW1hdGlvblJlZmxvd1F1ZXVlID0gW107XG4gICAgICAgICAgICBjYW5jZWxBbmltYXRpb25SZWZsb3cgPSBudWxsO1xuICAgICAgICAgICAgbG9va3VwQ2FjaGUgPSB7fTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBhZnRlclJlZmxvdyhlbGVtZW50LCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoY2FuY2VsQW5pbWF0aW9uUmVmbG93KSB7XG4gICAgICAgICAgY2FuY2VsQW5pbWF0aW9uUmVmbG93KCk7XG4gICAgICAgIH1cbiAgICAgICAgYW5pbWF0aW9uUmVmbG93UXVldWUucHVzaChjYWxsYmFjayk7XG4gICAgICAgIGNhbmNlbEFuaW1hdGlvblJlZmxvdyA9ICQkYW5pbWF0ZVJlZmxvdyhmdW5jdGlvbigpIHtcbiAgICAgICAgICBmb3JFYWNoKGFuaW1hdGlvblJlZmxvd1F1ZXVlLCBmdW5jdGlvbihmbikge1xuICAgICAgICAgICAgZm4oKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGFuaW1hdGlvblJlZmxvd1F1ZXVlID0gW107XG4gICAgICAgICAgY2FuY2VsQW5pbWF0aW9uUmVmbG93ID0gbnVsbDtcbiAgICAgICAgICBsb29rdXBDYWNoZSA9IHt9O1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNsb3NpbmdUaW1lciA9IG51bGw7XG4gICAgICB2YXIgY2xvc2luZ1RpbWVzdGFtcCA9IDA7XG4gICAgICB2YXIgYW5pbWF0aW9uRWxlbWVudFF1ZXVlID0gW107XG4gICAgICBmdW5jdGlvbiBhbmltYXRpb25DbG9zZUhhbmRsZXIoZWxlbWVudCwgdG90YWxUaW1lKSB7XG4gICAgICAgIHZhciBub2RlID0gZXh0cmFjdEVsZW1lbnROb2RlKGVsZW1lbnQpO1xuICAgICAgICBlbGVtZW50ID0gYW5ndWxhci5lbGVtZW50KG5vZGUpO1xuXG4gICAgICAgIC8vdGhpcyBpdGVtIHdpbGwgYmUgZ2FyYmFnZSBjb2xsZWN0ZWQgYnkgdGhlIGNsb3NpbmdcbiAgICAgICAgLy9hbmltYXRpb24gdGltZW91dFxuICAgICAgICBhbmltYXRpb25FbGVtZW50UXVldWUucHVzaChlbGVtZW50KTtcblxuICAgICAgICAvL2J1dCBpdCBtYXkgbm90IG5lZWQgdG8gY2FuY2VsIG91dCB0aGUgZXhpc3RpbmcgdGltZW91dFxuICAgICAgICAvL2lmIHRoZSB0aW1lc3RhbXAgaXMgbGVzcyB0aGFuIHRoZSBwcmV2aW91cyBvbmVcbiAgICAgICAgdmFyIGZ1dHVyZVRpbWVzdGFtcCA9IERhdGUubm93KCkgKyB0b3RhbFRpbWU7XG4gICAgICAgIGlmIChmdXR1cmVUaW1lc3RhbXAgPD0gY2xvc2luZ1RpbWVzdGFtcCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgICR0aW1lb3V0LmNhbmNlbChjbG9zaW5nVGltZXIpO1xuXG4gICAgICAgIGNsb3NpbmdUaW1lc3RhbXAgPSBmdXR1cmVUaW1lc3RhbXA7XG4gICAgICAgIGNsb3NpbmdUaW1lciA9ICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGNsb3NlQWxsQW5pbWF0aW9ucyhhbmltYXRpb25FbGVtZW50UXVldWUpO1xuICAgICAgICAgIGFuaW1hdGlvbkVsZW1lbnRRdWV1ZSA9IFtdO1xuICAgICAgICB9LCB0b3RhbFRpbWUsIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY2xvc2VBbGxBbmltYXRpb25zKGVsZW1lbnRzKSB7XG4gICAgICAgIGZvckVhY2goZWxlbWVudHMsIGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICB2YXIgZWxlbWVudERhdGEgPSBlbGVtZW50LmRhdGEoTkdfQU5JTUFURV9DU1NfREFUQV9LRVkpO1xuICAgICAgICAgIGlmIChlbGVtZW50RGF0YSkge1xuICAgICAgICAgICAgZm9yRWFjaChlbGVtZW50RGF0YS5jbG9zZUFuaW1hdGlvbkZucywgZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICAgICAgZm4oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGdldEVsZW1lbnRBbmltYXRpb25EZXRhaWxzKGVsZW1lbnQsIGNhY2hlS2V5KSB7XG4gICAgICAgIHZhciBkYXRhID0gY2FjaGVLZXkgPyBsb29rdXBDYWNoZVtjYWNoZUtleV0gOiBudWxsO1xuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gMDtcbiAgICAgICAgICB2YXIgdHJhbnNpdGlvbkRlbGF5ID0gMDtcbiAgICAgICAgICB2YXIgYW5pbWF0aW9uRHVyYXRpb24gPSAwO1xuICAgICAgICAgIHZhciBhbmltYXRpb25EZWxheSA9IDA7XG5cbiAgICAgICAgICAvL3dlIHdhbnQgYWxsIHRoZSBzdHlsZXMgZGVmaW5lZCBiZWZvcmUgYW5kIGFmdGVyXG4gICAgICAgICAgZm9yRWFjaChlbGVtZW50LCBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAoZWxlbWVudC5ub2RlVHlwZSA9PSBFTEVNRU5UX05PREUpIHtcbiAgICAgICAgICAgICAgdmFyIGVsZW1lbnRTdHlsZXMgPSAkd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkgfHwge307XG5cbiAgICAgICAgICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvblN0eWxlID0gZWxlbWVudFN0eWxlc1tUUkFOU0lUSU9OX1BST1AgKyBEVVJBVElPTl9LRVldO1xuICAgICAgICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSBNYXRoLm1heChwYXJzZU1heFRpbWUodHJhbnNpdGlvbkR1cmF0aW9uU3R5bGUpLCB0cmFuc2l0aW9uRHVyYXRpb24pO1xuXG4gICAgICAgICAgICAgIHZhciB0cmFuc2l0aW9uRGVsYXlTdHlsZSA9IGVsZW1lbnRTdHlsZXNbVFJBTlNJVElPTl9QUk9QICsgREVMQVlfS0VZXTtcbiAgICAgICAgICAgICAgdHJhbnNpdGlvbkRlbGF5ICA9IE1hdGgubWF4KHBhcnNlTWF4VGltZSh0cmFuc2l0aW9uRGVsYXlTdHlsZSksIHRyYW5zaXRpb25EZWxheSk7XG5cbiAgICAgICAgICAgICAgdmFyIGFuaW1hdGlvbkRlbGF5U3R5bGUgPSBlbGVtZW50U3R5bGVzW0FOSU1BVElPTl9QUk9QICsgREVMQVlfS0VZXTtcbiAgICAgICAgICAgICAgYW5pbWF0aW9uRGVsYXkgICA9IE1hdGgubWF4KHBhcnNlTWF4VGltZShlbGVtZW50U3R5bGVzW0FOSU1BVElPTl9QUk9QICsgREVMQVlfS0VZXSksIGFuaW1hdGlvbkRlbGF5KTtcblxuICAgICAgICAgICAgICB2YXIgYUR1cmF0aW9uICA9IHBhcnNlTWF4VGltZShlbGVtZW50U3R5bGVzW0FOSU1BVElPTl9QUk9QICsgRFVSQVRJT05fS0VZXSk7XG5cbiAgICAgICAgICAgICAgaWYgKGFEdXJhdGlvbiA+IDApIHtcbiAgICAgICAgICAgICAgICBhRHVyYXRpb24gKj0gcGFyc2VJbnQoZWxlbWVudFN0eWxlc1tBTklNQVRJT05fUFJPUCArIEFOSU1BVElPTl9JVEVSQVRJT05fQ09VTlRfS0VZXSwgMTApIHx8IDE7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYW5pbWF0aW9uRHVyYXRpb24gPSBNYXRoLm1heChhRHVyYXRpb24sIGFuaW1hdGlvbkR1cmF0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBkYXRhID0ge1xuICAgICAgICAgICAgdG90YWw6IDAsXG4gICAgICAgICAgICB0cmFuc2l0aW9uRGVsYXk6IHRyYW5zaXRpb25EZWxheSxcbiAgICAgICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbjogdHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgICAgICAgICAgYW5pbWF0aW9uRGVsYXk6IGFuaW1hdGlvbkRlbGF5LFxuICAgICAgICAgICAgYW5pbWF0aW9uRHVyYXRpb246IGFuaW1hdGlvbkR1cmF0aW9uXG4gICAgICAgICAgfTtcbiAgICAgICAgICBpZiAoY2FjaGVLZXkpIHtcbiAgICAgICAgICAgIGxvb2t1cENhY2hlW2NhY2hlS2V5XSA9IGRhdGE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBwYXJzZU1heFRpbWUoc3RyKSB7XG4gICAgICAgIHZhciBtYXhWYWx1ZSA9IDA7XG4gICAgICAgIHZhciB2YWx1ZXMgPSBpc1N0cmluZyhzdHIpID9cbiAgICAgICAgICBzdHIuc3BsaXQoL1xccyosXFxzKi8pIDpcbiAgICAgICAgICBbXTtcbiAgICAgICAgZm9yRWFjaCh2YWx1ZXMsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgbWF4VmFsdWUgPSBNYXRoLm1heChwYXJzZUZsb2F0KHZhbHVlKSB8fCAwLCBtYXhWYWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbWF4VmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGdldENhY2hlS2V5KGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHBhcmVudEVsZW1lbnQgPSBlbGVtZW50LnBhcmVudCgpO1xuICAgICAgICB2YXIgcGFyZW50SUQgPSBwYXJlbnRFbGVtZW50LmRhdGEoTkdfQU5JTUFURV9QQVJFTlRfS0VZKTtcbiAgICAgICAgaWYgKCFwYXJlbnRJRCkge1xuICAgICAgICAgIHBhcmVudEVsZW1lbnQuZGF0YShOR19BTklNQVRFX1BBUkVOVF9LRVksICsrcGFyZW50Q291bnRlcik7XG4gICAgICAgICAgcGFyZW50SUQgPSBwYXJlbnRDb3VudGVyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJlbnRJRCArICctJyArIGV4dHJhY3RFbGVtZW50Tm9kZShlbGVtZW50KS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGFuaW1hdGVTZXR1cChhbmltYXRpb25FdmVudCwgZWxlbWVudCwgY2xhc3NOYW1lLCBzdHlsZXMpIHtcbiAgICAgICAgdmFyIHN0cnVjdHVyYWwgPSBbJ25nLWVudGVyJywnbmctbGVhdmUnLCduZy1tb3ZlJ10uaW5kZXhPZihjbGFzc05hbWUpID49IDA7XG5cbiAgICAgICAgdmFyIGNhY2hlS2V5ID0gZ2V0Q2FjaGVLZXkoZWxlbWVudCk7XG4gICAgICAgIHZhciBldmVudENhY2hlS2V5ID0gY2FjaGVLZXkgKyAnICcgKyBjbGFzc05hbWU7XG4gICAgICAgIHZhciBpdGVtSW5kZXggPSBsb29rdXBDYWNoZVtldmVudENhY2hlS2V5XSA/ICsrbG9va3VwQ2FjaGVbZXZlbnRDYWNoZUtleV0udG90YWwgOiAwO1xuXG4gICAgICAgIHZhciBzdGFnZ2VyID0ge307XG4gICAgICAgIGlmIChpdGVtSW5kZXggPiAwKSB7XG4gICAgICAgICAgdmFyIHN0YWdnZXJDbGFzc05hbWUgPSBjbGFzc05hbWUgKyAnLXN0YWdnZXInO1xuICAgICAgICAgIHZhciBzdGFnZ2VyQ2FjaGVLZXkgPSBjYWNoZUtleSArICcgJyArIHN0YWdnZXJDbGFzc05hbWU7XG4gICAgICAgICAgdmFyIGFwcGx5Q2xhc3NlcyA9ICFsb29rdXBDYWNoZVtzdGFnZ2VyQ2FjaGVLZXldO1xuXG4gICAgICAgICAgYXBwbHlDbGFzc2VzICYmICQkanFMaXRlLmFkZENsYXNzKGVsZW1lbnQsIHN0YWdnZXJDbGFzc05hbWUpO1xuXG4gICAgICAgICAgc3RhZ2dlciA9IGdldEVsZW1lbnRBbmltYXRpb25EZXRhaWxzKGVsZW1lbnQsIHN0YWdnZXJDYWNoZUtleSk7XG5cbiAgICAgICAgICBhcHBseUNsYXNzZXMgJiYgJCRqcUxpdGUucmVtb3ZlQ2xhc3MoZWxlbWVudCwgc3RhZ2dlckNsYXNzTmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICAkJGpxTGl0ZS5hZGRDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpO1xuXG4gICAgICAgIHZhciBmb3JtZXJEYXRhID0gZWxlbWVudC5kYXRhKE5HX0FOSU1BVEVfQ1NTX0RBVEFfS0VZKSB8fCB7fTtcbiAgICAgICAgdmFyIHRpbWluZ3MgPSBnZXRFbGVtZW50QW5pbWF0aW9uRGV0YWlscyhlbGVtZW50LCBldmVudENhY2hlS2V5KTtcbiAgICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IHRpbWluZ3MudHJhbnNpdGlvbkR1cmF0aW9uO1xuICAgICAgICB2YXIgYW5pbWF0aW9uRHVyYXRpb24gPSB0aW1pbmdzLmFuaW1hdGlvbkR1cmF0aW9uO1xuXG4gICAgICAgIGlmIChzdHJ1Y3R1cmFsICYmIHRyYW5zaXRpb25EdXJhdGlvbiA9PT0gMCAmJiBhbmltYXRpb25EdXJhdGlvbiA9PT0gMCkge1xuICAgICAgICAgICQkanFMaXRlLnJlbW92ZUNsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGJsb2NrVHJhbnNpdGlvbiA9IHN0eWxlcyB8fCAoc3RydWN0dXJhbCAmJiB0cmFuc2l0aW9uRHVyYXRpb24gPiAwKTtcbiAgICAgICAgdmFyIGJsb2NrQW5pbWF0aW9uID0gYW5pbWF0aW9uRHVyYXRpb24gPiAwICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWdnZXIuYW5pbWF0aW9uRGVsYXkgPiAwICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YWdnZXIuYW5pbWF0aW9uRHVyYXRpb24gPT09IDA7XG5cbiAgICAgICAgdmFyIGNsb3NlQW5pbWF0aW9uRm5zID0gZm9ybWVyRGF0YS5jbG9zZUFuaW1hdGlvbkZucyB8fCBbXTtcbiAgICAgICAgZWxlbWVudC5kYXRhKE5HX0FOSU1BVEVfQ1NTX0RBVEFfS0VZLCB7XG4gICAgICAgICAgc3RhZ2dlcjogc3RhZ2dlcixcbiAgICAgICAgICBjYWNoZUtleTogZXZlbnRDYWNoZUtleSxcbiAgICAgICAgICBydW5uaW5nOiBmb3JtZXJEYXRhLnJ1bm5pbmcgfHwgMCxcbiAgICAgICAgICBpdGVtSW5kZXg6IGl0ZW1JbmRleCxcbiAgICAgICAgICBibG9ja1RyYW5zaXRpb246IGJsb2NrVHJhbnNpdGlvbixcbiAgICAgICAgICBjbG9zZUFuaW1hdGlvbkZuczogY2xvc2VBbmltYXRpb25GbnNcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIG5vZGUgPSBleHRyYWN0RWxlbWVudE5vZGUoZWxlbWVudCk7XG5cbiAgICAgICAgaWYgKGJsb2NrVHJhbnNpdGlvbikge1xuICAgICAgICAgIGJsb2NrVHJhbnNpdGlvbnMobm9kZSwgdHJ1ZSk7XG4gICAgICAgICAgaWYgKHN0eWxlcykge1xuICAgICAgICAgICAgZWxlbWVudC5jc3Moc3R5bGVzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYmxvY2tBbmltYXRpb24pIHtcbiAgICAgICAgICBibG9ja0FuaW1hdGlvbnMobm9kZSwgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYW5pbWF0ZVJ1bihhbmltYXRpb25FdmVudCwgZWxlbWVudCwgY2xhc3NOYW1lLCBhY3RpdmVBbmltYXRpb25Db21wbGV0ZSwgc3R5bGVzKSB7XG4gICAgICAgIHZhciBub2RlID0gZXh0cmFjdEVsZW1lbnROb2RlKGVsZW1lbnQpO1xuICAgICAgICB2YXIgZWxlbWVudERhdGEgPSBlbGVtZW50LmRhdGEoTkdfQU5JTUFURV9DU1NfREFUQV9LRVkpO1xuICAgICAgICBpZiAobm9kZS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykuaW5kZXhPZihjbGFzc05hbWUpID09IC0xIHx8ICFlbGVtZW50RGF0YSkge1xuICAgICAgICAgIGFjdGl2ZUFuaW1hdGlvbkNvbXBsZXRlKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGFjdGl2ZUNsYXNzTmFtZSA9ICcnO1xuICAgICAgICB2YXIgcGVuZGluZ0NsYXNzTmFtZSA9ICcnO1xuICAgICAgICBmb3JFYWNoKGNsYXNzTmFtZS5zcGxpdCgnICcpLCBmdW5jdGlvbihrbGFzcywgaSkge1xuICAgICAgICAgIHZhciBwcmVmaXggPSAoaSA+IDAgPyAnICcgOiAnJykgKyBrbGFzcztcbiAgICAgICAgICBhY3RpdmVDbGFzc05hbWUgKz0gcHJlZml4ICsgJy1hY3RpdmUnO1xuICAgICAgICAgIHBlbmRpbmdDbGFzc05hbWUgKz0gcHJlZml4ICsgJy1wZW5kaW5nJztcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIHN0eWxlID0gJyc7XG4gICAgICAgIHZhciBhcHBsaWVkU3R5bGVzID0gW107XG4gICAgICAgIHZhciBpdGVtSW5kZXggPSBlbGVtZW50RGF0YS5pdGVtSW5kZXg7XG4gICAgICAgIHZhciBzdGFnZ2VyID0gZWxlbWVudERhdGEuc3RhZ2dlcjtcbiAgICAgICAgdmFyIHN0YWdnZXJUaW1lID0gMDtcbiAgICAgICAgaWYgKGl0ZW1JbmRleCA+IDApIHtcbiAgICAgICAgICB2YXIgdHJhbnNpdGlvblN0YWdnZXJEZWxheSA9IDA7XG4gICAgICAgICAgaWYgKHN0YWdnZXIudHJhbnNpdGlvbkRlbGF5ID4gMCAmJiBzdGFnZ2VyLnRyYW5zaXRpb25EdXJhdGlvbiA9PT0gMCkge1xuICAgICAgICAgICAgdHJhbnNpdGlvblN0YWdnZXJEZWxheSA9IHN0YWdnZXIudHJhbnNpdGlvbkRlbGF5ICogaXRlbUluZGV4O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBhbmltYXRpb25TdGFnZ2VyRGVsYXkgPSAwO1xuICAgICAgICAgIGlmIChzdGFnZ2VyLmFuaW1hdGlvbkRlbGF5ID4gMCAmJiBzdGFnZ2VyLmFuaW1hdGlvbkR1cmF0aW9uID09PSAwKSB7XG4gICAgICAgICAgICBhbmltYXRpb25TdGFnZ2VyRGVsYXkgPSBzdGFnZ2VyLmFuaW1hdGlvbkRlbGF5ICogaXRlbUluZGV4O1xuICAgICAgICAgICAgYXBwbGllZFN0eWxlcy5wdXNoKENTU19QUkVGSVggKyAnYW5pbWF0aW9uLXBsYXktc3RhdGUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzdGFnZ2VyVGltZSA9IE1hdGgucm91bmQoTWF0aC5tYXgodHJhbnNpdGlvblN0YWdnZXJEZWxheSwgYW5pbWF0aW9uU3RhZ2dlckRlbGF5KSAqIDEwMCkgLyAxMDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXN0YWdnZXJUaW1lKSB7XG4gICAgICAgICAgJCRqcUxpdGUuYWRkQ2xhc3MoZWxlbWVudCwgYWN0aXZlQ2xhc3NOYW1lKTtcbiAgICAgICAgICBpZiAoZWxlbWVudERhdGEuYmxvY2tUcmFuc2l0aW9uKSB7XG4gICAgICAgICAgICBibG9ja1RyYW5zaXRpb25zKG5vZGUsIGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZXZlbnRDYWNoZUtleSA9IGVsZW1lbnREYXRhLmNhY2hlS2V5ICsgJyAnICsgYWN0aXZlQ2xhc3NOYW1lO1xuICAgICAgICB2YXIgdGltaW5ncyA9IGdldEVsZW1lbnRBbmltYXRpb25EZXRhaWxzKGVsZW1lbnQsIGV2ZW50Q2FjaGVLZXkpO1xuICAgICAgICB2YXIgbWF4RHVyYXRpb24gPSBNYXRoLm1heCh0aW1pbmdzLnRyYW5zaXRpb25EdXJhdGlvbiwgdGltaW5ncy5hbmltYXRpb25EdXJhdGlvbik7XG4gICAgICAgIGlmIChtYXhEdXJhdGlvbiA9PT0gMCkge1xuICAgICAgICAgICQkanFMaXRlLnJlbW92ZUNsYXNzKGVsZW1lbnQsIGFjdGl2ZUNsYXNzTmFtZSk7XG4gICAgICAgICAgYW5pbWF0ZUNsb3NlKGVsZW1lbnQsIGNsYXNzTmFtZSk7XG4gICAgICAgICAgYWN0aXZlQW5pbWF0aW9uQ29tcGxldGUoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXN0YWdnZXJUaW1lICYmIHN0eWxlcyAmJiBPYmplY3Qua2V5cyhzdHlsZXMpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBpZiAoIXRpbWluZ3MudHJhbnNpdGlvbkR1cmF0aW9uKSB7XG4gICAgICAgICAgICBlbGVtZW50LmNzcygndHJhbnNpdGlvbicsIHRpbWluZ3MuYW5pbWF0aW9uRHVyYXRpb24gKyAncyBsaW5lYXIgYWxsJyk7XG4gICAgICAgICAgICBhcHBsaWVkU3R5bGVzLnB1c2goJ3RyYW5zaXRpb24nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxlbWVudC5jc3Moc3R5bGVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtYXhEZWxheSA9IE1hdGgubWF4KHRpbWluZ3MudHJhbnNpdGlvbkRlbGF5LCB0aW1pbmdzLmFuaW1hdGlvbkRlbGF5KTtcbiAgICAgICAgdmFyIG1heERlbGF5VGltZSA9IG1heERlbGF5ICogT05FX1NFQ09ORDtcblxuICAgICAgICBpZiAoYXBwbGllZFN0eWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgLy90aGUgZWxlbWVudCBiZWluZyBhbmltYXRlZCBtYXkgc29tZXRpbWVzIGNvbnRhaW4gY29tbWVudCBub2RlcyBpblxuICAgICAgICAgIC8vdGhlIGpxTGl0ZSBvYmplY3QsIHNvIHdlJ3JlIHNhZmUgdG8gdXNlIGEgc2luZ2xlIHZhcmlhYmxlIHRvIGhvdXNlXG4gICAgICAgICAgLy90aGUgc3R5bGVzIHNpbmNlIHRoZXJlIGlzIGFsd2F5cyBvbmx5IG9uZSBlbGVtZW50IGJlaW5nIGFuaW1hdGVkXG4gICAgICAgICAgdmFyIG9sZFN0eWxlID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ3N0eWxlJykgfHwgJyc7XG4gICAgICAgICAgaWYgKG9sZFN0eWxlLmNoYXJBdChvbGRTdHlsZS5sZW5ndGggLSAxKSAhPT0gJzsnKSB7XG4gICAgICAgICAgICBvbGRTdHlsZSArPSAnOyc7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCdzdHlsZScsIG9sZFN0eWxlICsgJyAnICsgc3R5bGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgICAgIHZhciBjc3MzQW5pbWF0aW9uRXZlbnRzID0gQU5JTUFUSU9ORU5EX0VWRU5UICsgJyAnICsgVFJBTlNJVElPTkVORF9FVkVOVDtcbiAgICAgICAgdmFyIGFuaW1hdGlvblRpbWUgICAgID0gKG1heERlbGF5ICsgbWF4RHVyYXRpb24pICogQ0xPU0lOR19USU1FX0JVRkZFUjtcbiAgICAgICAgdmFyIHRvdGFsVGltZSAgICAgICAgID0gKHN0YWdnZXJUaW1lICsgYW5pbWF0aW9uVGltZSkgKiBPTkVfU0VDT05EO1xuXG4gICAgICAgIHZhciBzdGFnZ2VyVGltZW91dDtcbiAgICAgICAgaWYgKHN0YWdnZXJUaW1lID4gMCkge1xuICAgICAgICAgICQkanFMaXRlLmFkZENsYXNzKGVsZW1lbnQsIHBlbmRpbmdDbGFzc05hbWUpO1xuICAgICAgICAgIHN0YWdnZXJUaW1lb3V0ID0gJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzdGFnZ2VyVGltZW91dCA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmICh0aW1pbmdzLnRyYW5zaXRpb25EdXJhdGlvbiA+IDApIHtcbiAgICAgICAgICAgICAgYmxvY2tUcmFuc2l0aW9ucyhub2RlLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGltaW5ncy5hbmltYXRpb25EdXJhdGlvbiA+IDApIHtcbiAgICAgICAgICAgICAgYmxvY2tBbmltYXRpb25zKG5vZGUsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJCRqcUxpdGUuYWRkQ2xhc3MoZWxlbWVudCwgYWN0aXZlQ2xhc3NOYW1lKTtcbiAgICAgICAgICAgICQkanFMaXRlLnJlbW92ZUNsYXNzKGVsZW1lbnQsIHBlbmRpbmdDbGFzc05hbWUpO1xuXG4gICAgICAgICAgICBpZiAoc3R5bGVzKSB7XG4gICAgICAgICAgICAgIGlmICh0aW1pbmdzLnRyYW5zaXRpb25EdXJhdGlvbiA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuY3NzKCd0cmFuc2l0aW9uJywgdGltaW5ncy5hbmltYXRpb25EdXJhdGlvbiArICdzIGxpbmVhciBhbGwnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbGVtZW50LmNzcyhzdHlsZXMpO1xuICAgICAgICAgICAgICBhcHBsaWVkU3R5bGVzLnB1c2goJ3RyYW5zaXRpb24nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCBzdGFnZ2VyVGltZSAqIE9ORV9TRUNPTkQsIGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsZW1lbnQub24oY3NzM0FuaW1hdGlvbkV2ZW50cywgb25BbmltYXRpb25Qcm9ncmVzcyk7XG4gICAgICAgIGVsZW1lbnREYXRhLmNsb3NlQW5pbWF0aW9uRm5zLnB1c2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgb25FbmQoKTtcbiAgICAgICAgICBhY3RpdmVBbmltYXRpb25Db21wbGV0ZSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBlbGVtZW50RGF0YS5ydW5uaW5nKys7XG4gICAgICAgIGFuaW1hdGlvbkNsb3NlSGFuZGxlcihlbGVtZW50LCB0b3RhbFRpbWUpO1xuICAgICAgICByZXR1cm4gb25FbmQ7XG5cbiAgICAgICAgLy8gVGhpcyB3aWxsIGF1dG9tYXRpY2FsbHkgYmUgY2FsbGVkIGJ5ICRhbmltYXRlIHNvXG4gICAgICAgIC8vIHRoZXJlIGlzIG5vIG5lZWQgdG8gYXR0YWNoIHRoaXMgaW50ZXJuYWxseSB0byB0aGVcbiAgICAgICAgLy8gdGltZW91dCBkb25lIG1ldGhvZC5cbiAgICAgICAgZnVuY3Rpb24gb25FbmQoKSB7XG4gICAgICAgICAgZWxlbWVudC5vZmYoY3NzM0FuaW1hdGlvbkV2ZW50cywgb25BbmltYXRpb25Qcm9ncmVzcyk7XG4gICAgICAgICAgJCRqcUxpdGUucmVtb3ZlQ2xhc3MoZWxlbWVudCwgYWN0aXZlQ2xhc3NOYW1lKTtcbiAgICAgICAgICAkJGpxTGl0ZS5yZW1vdmVDbGFzcyhlbGVtZW50LCBwZW5kaW5nQ2xhc3NOYW1lKTtcbiAgICAgICAgICBpZiAoc3RhZ2dlclRpbWVvdXQpIHtcbiAgICAgICAgICAgICR0aW1lb3V0LmNhbmNlbChzdGFnZ2VyVGltZW91dCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFuaW1hdGVDbG9zZShlbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgICAgIHZhciBub2RlID0gZXh0cmFjdEVsZW1lbnROb2RlKGVsZW1lbnQpO1xuICAgICAgICAgIGZvciAodmFyIGkgaW4gYXBwbGllZFN0eWxlcykge1xuICAgICAgICAgICAgbm9kZS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShhcHBsaWVkU3R5bGVzW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvbkFuaW1hdGlvblByb2dyZXNzKGV2ZW50KSB7XG4gICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgdmFyIGV2ID0gZXZlbnQub3JpZ2luYWxFdmVudCB8fCBldmVudDtcbiAgICAgICAgICB2YXIgdGltZVN0YW1wID0gZXYuJG1hbnVhbFRpbWVTdGFtcCB8fCBldi50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcblxuICAgICAgICAgIC8qIEZpcmVmb3ggKG9yIHBvc3NpYmx5IGp1c3QgR2Vja28pIGxpa2VzIHRvIG5vdCByb3VuZCB2YWx1ZXMgdXBcbiAgICAgICAgICAgKiB3aGVuIGEgbXMgbWVhc3VyZW1lbnQgaXMgdXNlZCBmb3IgdGhlIGFuaW1hdGlvbiAqL1xuICAgICAgICAgIHZhciBlbGFwc2VkVGltZSA9IHBhcnNlRmxvYXQoZXYuZWxhcHNlZFRpbWUudG9GaXhlZChFTEFQU0VEX1RJTUVfTUFYX0RFQ0lNQUxfUExBQ0VTKSk7XG5cbiAgICAgICAgICAvKiAkbWFudWFsVGltZVN0YW1wIGlzIGEgbW9ja2VkIHRpbWVTdGFtcCB2YWx1ZSB3aGljaCBpcyBzZXRcbiAgICAgICAgICAgKiB3aXRoaW4gYnJvd3NlclRyaWdnZXIoKS4gVGhpcyBpcyBvbmx5IGhlcmUgc28gdGhhdCB0ZXN0cyBjYW5cbiAgICAgICAgICAgKiBtb2NrIGFuaW1hdGlvbnMgcHJvcGVybHkuIFJlYWwgZXZlbnRzIGZhbGxiYWNrIHRvIGV2ZW50LnRpbWVTdGFtcCxcbiAgICAgICAgICAgKiBvciwgaWYgdGhleSBkb24ndCwgdGhlbiBhIHRpbWVTdGFtcCBpcyBhdXRvbWF0aWNhbGx5IGNyZWF0ZWQgZm9yIHRoZW0uXG4gICAgICAgICAgICogV2UncmUgY2hlY2tpbmcgdG8gc2VlIGlmIHRoZSB0aW1lU3RhbXAgc3VycGFzc2VzIHRoZSBleHBlY3RlZCBkZWxheSxcbiAgICAgICAgICAgKiBidXQgd2UncmUgdXNpbmcgZWxhcHNlZFRpbWUgaW5zdGVhZCBvZiB0aGUgdGltZVN0YW1wIG9uIHRoZSAybmRcbiAgICAgICAgICAgKiBwcmUtY29uZGl0aW9uIHNpbmNlIGFuaW1hdGlvbnMgc29tZXRpbWVzIGNsb3NlIG9mZiBlYXJseSAqL1xuICAgICAgICAgIGlmIChNYXRoLm1heCh0aW1lU3RhbXAgLSBzdGFydFRpbWUsIDApID49IG1heERlbGF5VGltZSAmJiBlbGFwc2VkVGltZSA+PSBtYXhEdXJhdGlvbikge1xuICAgICAgICAgICAgYWN0aXZlQW5pbWF0aW9uQ29tcGxldGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYmxvY2tUcmFuc2l0aW9ucyhub2RlLCBib29sKSB7XG4gICAgICAgIG5vZGUuc3R5bGVbVFJBTlNJVElPTl9QUk9QICsgUFJPUEVSVFlfS0VZXSA9IGJvb2wgPyAnbm9uZScgOiAnJztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYmxvY2tBbmltYXRpb25zKG5vZGUsIGJvb2wpIHtcbiAgICAgICAgbm9kZS5zdHlsZVtBTklNQVRJT05fUFJPUCArIEFOSU1BVElPTl9QTEFZU1RBVEVfS0VZXSA9IGJvb2wgPyAncGF1c2VkJyA6ICcnO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBhbmltYXRlQmVmb3JlKGFuaW1hdGlvbkV2ZW50LCBlbGVtZW50LCBjbGFzc05hbWUsIHN0eWxlcykge1xuICAgICAgICBpZiAoYW5pbWF0ZVNldHVwKGFuaW1hdGlvbkV2ZW50LCBlbGVtZW50LCBjbGFzc05hbWUsIHN0eWxlcykpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oY2FuY2VsbGVkKSB7XG4gICAgICAgICAgICBjYW5jZWxsZWQgJiYgYW5pbWF0ZUNsb3NlKGVsZW1lbnQsIGNsYXNzTmFtZSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBhbmltYXRlQWZ0ZXIoYW5pbWF0aW9uRXZlbnQsIGVsZW1lbnQsIGNsYXNzTmFtZSwgYWZ0ZXJBbmltYXRpb25Db21wbGV0ZSwgc3R5bGVzKSB7XG4gICAgICAgIGlmIChlbGVtZW50LmRhdGEoTkdfQU5JTUFURV9DU1NfREFUQV9LRVkpKSB7XG4gICAgICAgICAgcmV0dXJuIGFuaW1hdGVSdW4oYW5pbWF0aW9uRXZlbnQsIGVsZW1lbnQsIGNsYXNzTmFtZSwgYWZ0ZXJBbmltYXRpb25Db21wbGV0ZSwgc3R5bGVzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhbmltYXRlQ2xvc2UoZWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgICAgICAgICBhZnRlckFuaW1hdGlvbkNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYW5pbWF0ZShhbmltYXRpb25FdmVudCwgZWxlbWVudCwgY2xhc3NOYW1lLCBhbmltYXRpb25Db21wbGV0ZSwgb3B0aW9ucykge1xuICAgICAgICAvL0lmIHRoZSBhbmltYXRlU2V0dXAgZnVuY3Rpb24gZG9lc24ndCBib3RoZXIgcmV0dXJuaW5nIGFcbiAgICAgICAgLy9jYW5jZWxsYXRpb24gZnVuY3Rpb24gdGhlbiBpdCBtZWFucyB0aGF0IHRoZXJlIGlzIG5vIGFuaW1hdGlvblxuICAgICAgICAvL3RvIHBlcmZvcm0gYXQgYWxsXG4gICAgICAgIHZhciBwcmVSZWZsb3dDYW5jZWxsYXRpb24gPSBhbmltYXRlQmVmb3JlKGFuaW1hdGlvbkV2ZW50LCBlbGVtZW50LCBjbGFzc05hbWUsIG9wdGlvbnMuZnJvbSk7XG4gICAgICAgIGlmICghcHJlUmVmbG93Q2FuY2VsbGF0aW9uKSB7XG4gICAgICAgICAgY2xlYXJDYWNoZUFmdGVyUmVmbG93KCk7XG4gICAgICAgICAgYW5pbWF0aW9uQ29tcGxldGUoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvL1RoZXJlIGFyZSB0d28gY2FuY2VsbGF0aW9uIGZ1bmN0aW9uczogb25lIGlzIGJlZm9yZSB0aGUgZmlyc3RcbiAgICAgICAgLy9yZWZsb3cgYW5pbWF0aW9uIGFuZCB0aGUgc2Vjb25kIGlzIGR1cmluZyB0aGUgYWN0aXZlIHN0YXRlXG4gICAgICAgIC8vYW5pbWF0aW9uLiBUaGUgZmlyc3QgZnVuY3Rpb24gd2lsbCB0YWtlIGNhcmUgb2YgcmVtb3ZpbmcgdGhlXG4gICAgICAgIC8vZGF0YSBmcm9tIHRoZSBlbGVtZW50IHdoaWNoIHdpbGwgbm90IG1ha2UgdGhlIDJuZCBhbmltYXRpb25cbiAgICAgICAgLy9oYXBwZW4gaW4gdGhlIGZpcnN0IHBsYWNlXG4gICAgICAgIHZhciBjYW5jZWwgPSBwcmVSZWZsb3dDYW5jZWxsYXRpb247XG4gICAgICAgIGFmdGVyUmVmbG93KGVsZW1lbnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIC8vb25jZSB0aGUgcmVmbG93IGlzIGNvbXBsZXRlIHRoZW4gd2UgcG9pbnQgY2FuY2VsIHRvXG4gICAgICAgICAgLy90aGUgbmV3IGNhbmNlbGxhdGlvbiBmdW5jdGlvbiB3aGljaCB3aWxsIHJlbW92ZSBhbGwgb2YgdGhlXG4gICAgICAgICAgLy9hbmltYXRpb24gcHJvcGVydGllcyBmcm9tIHRoZSBhY3RpdmUgYW5pbWF0aW9uXG4gICAgICAgICAgY2FuY2VsID0gYW5pbWF0ZUFmdGVyKGFuaW1hdGlvbkV2ZW50LCBlbGVtZW50LCBjbGFzc05hbWUsIGFuaW1hdGlvbkNvbXBsZXRlLCBvcHRpb25zLnRvKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNhbmNlbGxlZCkge1xuICAgICAgICAgIChjYW5jZWwgfHwgbm9vcCkoY2FuY2VsbGVkKTtcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYW5pbWF0ZUNsb3NlKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICAgICAgICAkJGpxTGl0ZS5yZW1vdmVDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgICB2YXIgZGF0YSA9IGVsZW1lbnQuZGF0YShOR19BTklNQVRFX0NTU19EQVRBX0tFWSk7XG4gICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgaWYgKGRhdGEucnVubmluZykge1xuICAgICAgICAgICAgZGF0YS5ydW5uaW5nLS07XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghZGF0YS5ydW5uaW5nIHx8IGRhdGEucnVubmluZyA9PT0gMCkge1xuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVEYXRhKE5HX0FOSU1BVEVfQ1NTX0RBVEFfS0VZKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYW5pbWF0ZTogZnVuY3Rpb24oZWxlbWVudCwgY2xhc3NOYW1lLCBmcm9tLCB0bywgYW5pbWF0aW9uQ29tcGxldGVkLCBvcHRpb25zKSB7XG4gICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgICAgb3B0aW9ucy5mcm9tID0gZnJvbTtcbiAgICAgICAgICBvcHRpb25zLnRvID0gdG87XG4gICAgICAgICAgcmV0dXJuIGFuaW1hdGUoJ2FuaW1hdGUnLCBlbGVtZW50LCBjbGFzc05hbWUsIGFuaW1hdGlvbkNvbXBsZXRlZCwgb3B0aW9ucyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZW50ZXI6IGZ1bmN0aW9uKGVsZW1lbnQsIGFuaW1hdGlvbkNvbXBsZXRlZCwgb3B0aW9ucykge1xuICAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICAgIHJldHVybiBhbmltYXRlKCdlbnRlcicsIGVsZW1lbnQsICduZy1lbnRlcicsIGFuaW1hdGlvbkNvbXBsZXRlZCwgb3B0aW9ucyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgbGVhdmU6IGZ1bmN0aW9uKGVsZW1lbnQsIGFuaW1hdGlvbkNvbXBsZXRlZCwgb3B0aW9ucykge1xuICAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICAgIHJldHVybiBhbmltYXRlKCdsZWF2ZScsIGVsZW1lbnQsICduZy1sZWF2ZScsIGFuaW1hdGlvbkNvbXBsZXRlZCwgb3B0aW9ucyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgbW92ZTogZnVuY3Rpb24oZWxlbWVudCwgYW5pbWF0aW9uQ29tcGxldGVkLCBvcHRpb25zKSB7XG4gICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgICAgcmV0dXJuIGFuaW1hdGUoJ21vdmUnLCBlbGVtZW50LCAnbmctbW92ZScsIGFuaW1hdGlvbkNvbXBsZXRlZCwgb3B0aW9ucyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYmVmb3JlU2V0Q2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIGFkZCwgcmVtb3ZlLCBhbmltYXRpb25Db21wbGV0ZWQsIG9wdGlvbnMpIHtcbiAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgICB2YXIgY2xhc3NOYW1lID0gc3VmZml4Q2xhc3NlcyhyZW1vdmUsICctcmVtb3ZlJykgKyAnICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzdWZmaXhDbGFzc2VzKGFkZCwgJy1hZGQnKTtcbiAgICAgICAgICB2YXIgY2FuY2VsbGF0aW9uTWV0aG9kID0gYW5pbWF0ZUJlZm9yZSgnc2V0Q2xhc3MnLCBlbGVtZW50LCBjbGFzc05hbWUsIG9wdGlvbnMuZnJvbSk7XG4gICAgICAgICAgaWYgKGNhbmNlbGxhdGlvbk1ldGhvZCkge1xuICAgICAgICAgICAgYWZ0ZXJSZWZsb3coZWxlbWVudCwgYW5pbWF0aW9uQ29tcGxldGVkKTtcbiAgICAgICAgICAgIHJldHVybiBjYW5jZWxsYXRpb25NZXRob2Q7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNsZWFyQ2FjaGVBZnRlclJlZmxvdygpO1xuICAgICAgICAgIGFuaW1hdGlvbkNvbXBsZXRlZCgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGJlZm9yZUFkZENsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUsIGFuaW1hdGlvbkNvbXBsZXRlZCwgb3B0aW9ucykge1xuICAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICAgIHZhciBjYW5jZWxsYXRpb25NZXRob2QgPSBhbmltYXRlQmVmb3JlKCdhZGRDbGFzcycsIGVsZW1lbnQsIHN1ZmZpeENsYXNzZXMoY2xhc3NOYW1lLCAnLWFkZCcpLCBvcHRpb25zLmZyb20pO1xuICAgICAgICAgIGlmIChjYW5jZWxsYXRpb25NZXRob2QpIHtcbiAgICAgICAgICAgIGFmdGVyUmVmbG93KGVsZW1lbnQsIGFuaW1hdGlvbkNvbXBsZXRlZCk7XG4gICAgICAgICAgICByZXR1cm4gY2FuY2VsbGF0aW9uTWV0aG9kO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjbGVhckNhY2hlQWZ0ZXJSZWZsb3coKTtcbiAgICAgICAgICBhbmltYXRpb25Db21wbGV0ZWQoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBiZWZvcmVSZW1vdmVDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgY2xhc3NOYW1lLCBhbmltYXRpb25Db21wbGV0ZWQsIG9wdGlvbnMpIHtcbiAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgICB2YXIgY2FuY2VsbGF0aW9uTWV0aG9kID0gYW5pbWF0ZUJlZm9yZSgncmVtb3ZlQ2xhc3MnLCBlbGVtZW50LCBzdWZmaXhDbGFzc2VzKGNsYXNzTmFtZSwgJy1yZW1vdmUnKSwgb3B0aW9ucy5mcm9tKTtcbiAgICAgICAgICBpZiAoY2FuY2VsbGF0aW9uTWV0aG9kKSB7XG4gICAgICAgICAgICBhZnRlclJlZmxvdyhlbGVtZW50LCBhbmltYXRpb25Db21wbGV0ZWQpO1xuICAgICAgICAgICAgcmV0dXJuIGNhbmNlbGxhdGlvbk1ldGhvZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2xlYXJDYWNoZUFmdGVyUmVmbG93KCk7XG4gICAgICAgICAgYW5pbWF0aW9uQ29tcGxldGVkKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2V0Q2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIGFkZCwgcmVtb3ZlLCBhbmltYXRpb25Db21wbGV0ZWQsIG9wdGlvbnMpIHtcbiAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgICByZW1vdmUgPSBzdWZmaXhDbGFzc2VzKHJlbW92ZSwgJy1yZW1vdmUnKTtcbiAgICAgICAgICBhZGQgPSBzdWZmaXhDbGFzc2VzKGFkZCwgJy1hZGQnKTtcbiAgICAgICAgICB2YXIgY2xhc3NOYW1lID0gcmVtb3ZlICsgJyAnICsgYWRkO1xuICAgICAgICAgIHJldHVybiBhbmltYXRlQWZ0ZXIoJ3NldENsYXNzJywgZWxlbWVudCwgY2xhc3NOYW1lLCBhbmltYXRpb25Db21wbGV0ZWQsIG9wdGlvbnMudG8pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGFkZENsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUsIGFuaW1hdGlvbkNvbXBsZXRlZCwgb3B0aW9ucykge1xuICAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICAgIHJldHVybiBhbmltYXRlQWZ0ZXIoJ2FkZENsYXNzJywgZWxlbWVudCwgc3VmZml4Q2xhc3NlcyhjbGFzc05hbWUsICctYWRkJyksIGFuaW1hdGlvbkNvbXBsZXRlZCwgb3B0aW9ucy50byk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIGNsYXNzTmFtZSwgYW5pbWF0aW9uQ29tcGxldGVkLCBvcHRpb25zKSB7XG4gICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgICAgcmV0dXJuIGFuaW1hdGVBZnRlcigncmVtb3ZlQ2xhc3MnLCBlbGVtZW50LCBzdWZmaXhDbGFzc2VzKGNsYXNzTmFtZSwgJy1yZW1vdmUnKSwgYW5pbWF0aW9uQ29tcGxldGVkLCBvcHRpb25zLnRvKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZnVuY3Rpb24gc3VmZml4Q2xhc3NlcyhjbGFzc2VzLCBzdWZmaXgpIHtcbiAgICAgICAgdmFyIGNsYXNzTmFtZSA9ICcnO1xuICAgICAgICBjbGFzc2VzID0gaXNBcnJheShjbGFzc2VzKSA/IGNsYXNzZXMgOiBjbGFzc2VzLnNwbGl0KC9cXHMrLyk7XG4gICAgICAgIGZvckVhY2goY2xhc3NlcywgZnVuY3Rpb24oa2xhc3MsIGkpIHtcbiAgICAgICAgICBpZiAoa2xhc3MgJiYga2xhc3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY2xhc3NOYW1lICs9IChpID4gMCA/ICcgJyA6ICcnKSArIGtsYXNzICsgc3VmZml4O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjbGFzc05hbWU7XG4gICAgICB9XG4gICAgfV0pO1xuICB9XSk7XG5cblxufSkod2luZG93LCB3aW5kb3cuYW5ndWxhcik7XG5cbi8qKlxuICogQGxpY2Vuc2UgQW5ndWxhckpTIHYxLjMuMTNcbiAqIChjKSAyMDEwLTIwMTQgR29vZ2xlLCBJbmMuIGh0dHA6Ly9hbmd1bGFyanMub3JnXG4gKiBMaWNlbnNlOiBNSVRcbiAqL1xuKGZ1bmN0aW9uKHdpbmRvdywgYW5ndWxhciwgdW5kZWZpbmVkKSB7J3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBuZ2RvYyBtb2R1bGVcbiAqIEBuYW1lIG5nQXJpYVxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVGhlIGBuZ0FyaWFgIG1vZHVsZSBwcm92aWRlcyBzdXBwb3J0IGZvciBjb21tb25cbiAqIFs8YWJiciB0aXRsZT1cIkFjY2Vzc2libGUgUmljaCBJbnRlcm5ldCBBcHBsaWNhdGlvbnNcIj5BUklBPC9hYmJyPl0oaHR0cDovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEvKVxuICogYXR0cmlidXRlcyB0aGF0IGNvbnZleSBzdGF0ZSBvciBzZW1hbnRpYyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgYXBwbGljYXRpb24gZm9yIHVzZXJzXG4gKiBvZiBhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCBzdWNoIGFzIHNjcmVlbiByZWFkZXJzLlxuICpcbiAqIDxkaXYgZG9jLW1vZHVsZS1jb21wb25lbnRzPVwibmdBcmlhXCI+PC9kaXY+XG4gKlxuICogIyMgVXNhZ2VcbiAqXG4gKiBGb3IgbmdBcmlhIHRvIGRvIGl0cyBtYWdpYywgc2ltcGx5IGluY2x1ZGUgdGhlIG1vZHVsZSBhcyBhIGRlcGVuZGVuY3kuIFRoZSBkaXJlY3RpdmVzIHN1cHBvcnRlZFxuICogYnkgbmdBcmlhIGFyZTpcbiAqIGBuZ01vZGVsYCwgYG5nRGlzYWJsZWRgLCBgbmdTaG93YCwgYG5nSGlkZWAsIGBuZ0NsaWNrYCwgYG5nRGJsQ2xpY2tgLCBhbmQgYG5nTWVzc2FnZXNgLlxuICpcbiAqIEJlbG93IGlzIGEgbW9yZSBkZXRhaWxlZCBicmVha2Rvd24gb2YgdGhlIGF0dHJpYnV0ZXMgaGFuZGxlZCBieSBuZ0FyaWE6XG4gKlxuICogfCBEaXJlY3RpdmUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU3VwcG9ydGVkIEF0dHJpYnV0ZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTW9kZWwgbmdNb2RlbH0gICAgICAgIHwgYXJpYS1jaGVja2VkLCBhcmlhLXZhbHVlbWluLCBhcmlhLXZhbHVlbWF4LCBhcmlhLXZhbHVlbm93LCBhcmlhLWludmFsaWQsIGFyaWEtcmVxdWlyZWQgfFxuICogfCB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nRGlzYWJsZWQgbmdEaXNhYmxlZH0gIHwgYXJpYS1kaXNhYmxlZCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nU2hvdyBuZ1Nob3d9ICAgICAgICAgIHwgYXJpYS1oaWRkZW4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nSGlkZSBuZ0hpZGV9ICAgICAgICAgIHwgYXJpYS1oaWRkZW4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xpY2sgbmdDbGlja30gICAgICAgIHwgdGFiaW5kZXgsIGtleXByZXNzIGV2ZW50ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nRGJsY2xpY2sgbmdEYmxjbGlja30gIHwgdGFiaW5kZXggICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCB7QGxpbmsgbW9kdWxlOm5nTWVzc2FnZXMgbmdNZXNzYWdlc30gICAgICAgIHwgYXJpYS1saXZlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICpcbiAqIEZpbmQgb3V0IG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgZWFjaCBkaXJlY3RpdmUgYnkgcmVhZGluZyB0aGVcbiAqIHtAbGluayBndWlkZS9hY2Nlc3NpYmlsaXR5IG5nQXJpYSBEZXZlbG9wZXIgR3VpZGV9LlxuICpcbiAqICMjRXhhbXBsZVxuICogVXNpbmcgbmdEaXNhYmxlZCB3aXRoIG5nQXJpYTpcbiAqIGBgYGh0bWxcbiAqIDxtZC1jaGVja2JveCBuZy1kaXNhYmxlZD1cImRpc2FibGVkXCI+XG4gKiBgYGBcbiAqIEJlY29tZXM6XG4gKiBgYGBodG1sXG4gKiA8bWQtY2hlY2tib3ggbmctZGlzYWJsZWQ9XCJkaXNhYmxlZFwiIGFyaWEtZGlzYWJsZWQ9XCJ0cnVlXCI+XG4gKiBgYGBcbiAqXG4gKiAjI0Rpc2FibGluZyBBdHRyaWJ1dGVzXG4gKiBJdCdzIHBvc3NpYmxlIHRvIGRpc2FibGUgaW5kaXZpZHVhbCBhdHRyaWJ1dGVzIGFkZGVkIGJ5IG5nQXJpYSB3aXRoIHRoZVxuICoge0BsaW5rIG5nQXJpYS4kYXJpYVByb3ZpZGVyI2NvbmZpZyBjb25maWd9IG1ldGhvZC4gRm9yIG1vcmUgZGV0YWlscywgc2VlIHRoZVxuICoge0BsaW5rIGd1aWRlL2FjY2Vzc2liaWxpdHkgRGV2ZWxvcGVyIEd1aWRlfS5cbiAqL1xuIC8qIGdsb2JhbCAtbmdBcmlhTW9kdWxlICovXG52YXIgbmdBcmlhTW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ25nQXJpYScsIFsnbmcnXSkuXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlcignJGFyaWEnLCAkQXJpYVByb3ZpZGVyKTtcblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRhcmlhUHJvdmlkZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBVc2VkIGZvciBjb25maWd1cmluZyB0aGUgQVJJQSBhdHRyaWJ1dGVzIGluamVjdGVkIGFuZCBtYW5hZ2VkIGJ5IG5nQXJpYS5cbiAqXG4gKiBgYGBqc1xuICogYW5ndWxhci5tb2R1bGUoJ215QXBwJywgWyduZ0FyaWEnXSwgZnVuY3Rpb24gY29uZmlnKCRhcmlhUHJvdmlkZXIpIHtcbiAqICAgJGFyaWFQcm92aWRlci5jb25maWcoe1xuICogICAgIGFyaWFWYWx1ZTogdHJ1ZSxcbiAqICAgICB0YWJpbmRleDogZmFsc2VcbiAqICAgfSk7XG4gKiB9KTtcbiAqYGBgXG4gKlxuICogIyMgRGVwZW5kZW5jaWVzXG4gKiBSZXF1aXJlcyB0aGUge0BsaW5rIG5nQXJpYX0gbW9kdWxlIHRvIGJlIGluc3RhbGxlZC5cbiAqXG4gKi9cbmZ1bmN0aW9uICRBcmlhUHJvdmlkZXIoKSB7XG4gIHZhciBjb25maWcgPSB7XG4gICAgYXJpYUhpZGRlbjogdHJ1ZSxcbiAgICBhcmlhQ2hlY2tlZDogdHJ1ZSxcbiAgICBhcmlhRGlzYWJsZWQ6IHRydWUsXG4gICAgYXJpYVJlcXVpcmVkOiB0cnVlLFxuICAgIGFyaWFJbnZhbGlkOiB0cnVlLFxuICAgIGFyaWFNdWx0aWxpbmU6IHRydWUsXG4gICAgYXJpYVZhbHVlOiB0cnVlLFxuICAgIHRhYmluZGV4OiB0cnVlLFxuICAgIGJpbmRLZXlwcmVzczogdHJ1ZVxuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRhcmlhUHJvdmlkZXIjY29uZmlnXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgb2JqZWN0IHRvIGVuYWJsZS9kaXNhYmxlIHNwZWNpZmljIEFSSUEgYXR0cmlidXRlc1xuICAgKlxuICAgKiAgLSAqKmFyaWFIaWRkZW4qKiDigJMgYHtib29sZWFufWAg4oCTIEVuYWJsZXMvZGlzYWJsZXMgYXJpYS1oaWRkZW4gdGFnc1xuICAgKiAgLSAqKmFyaWFDaGVja2VkKiog4oCTIGB7Ym9vbGVhbn1gIOKAkyBFbmFibGVzL2Rpc2FibGVzIGFyaWEtY2hlY2tlZCB0YWdzXG4gICAqICAtICoqYXJpYURpc2FibGVkKiog4oCTIGB7Ym9vbGVhbn1gIOKAkyBFbmFibGVzL2Rpc2FibGVzIGFyaWEtZGlzYWJsZWQgdGFnc1xuICAgKiAgLSAqKmFyaWFSZXF1aXJlZCoqIOKAkyBge2Jvb2xlYW59YCDigJMgRW5hYmxlcy9kaXNhYmxlcyBhcmlhLXJlcXVpcmVkIHRhZ3NcbiAgICogIC0gKiphcmlhSW52YWxpZCoqIOKAkyBge2Jvb2xlYW59YCDigJMgRW5hYmxlcy9kaXNhYmxlcyBhcmlhLWludmFsaWQgdGFnc1xuICAgKiAgLSAqKmFyaWFNdWx0aWxpbmUqKiDigJMgYHtib29sZWFufWAg4oCTIEVuYWJsZXMvZGlzYWJsZXMgYXJpYS1tdWx0aWxpbmUgdGFnc1xuICAgKiAgLSAqKmFyaWFWYWx1ZSoqIOKAkyBge2Jvb2xlYW59YCDigJMgRW5hYmxlcy9kaXNhYmxlcyBhcmlhLXZhbHVlbWluLCBhcmlhLXZhbHVlbWF4IGFuZCBhcmlhLXZhbHVlbm93IHRhZ3NcbiAgICogIC0gKip0YWJpbmRleCoqIOKAkyBge2Jvb2xlYW59YCDigJMgRW5hYmxlcy9kaXNhYmxlcyB0YWJpbmRleCB0YWdzXG4gICAqICAtICoqYmluZEtleXByZXNzKiog4oCTIGB7Ym9vbGVhbn1gIOKAkyBFbmFibGVzL2Rpc2FibGVzIGtleXByZXNzIGV2ZW50IGJpbmRpbmcgb24gYCZsdDtkaXYmZ3Q7YCBhbmRcbiAgICogICAgYCZsdDtsaSZndDtgIGVsZW1lbnRzIHdpdGggbmctY2xpY2tcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEVuYWJsZXMvZGlzYWJsZXMgdmFyaW91cyBBUklBIGF0dHJpYnV0ZXNcbiAgICovXG4gIHRoaXMuY29uZmlnID0gZnVuY3Rpb24obmV3Q29uZmlnKSB7XG4gICAgY29uZmlnID0gYW5ndWxhci5leHRlbmQoY29uZmlnLCBuZXdDb25maWcpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHdhdGNoRXhwcihhdHRyTmFtZSwgYXJpYUF0dHIsIG5lZ2F0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbSwgYXR0cikge1xuICAgICAgdmFyIGFyaWFDYW1lbE5hbWUgPSBhdHRyLiRub3JtYWxpemUoYXJpYUF0dHIpO1xuICAgICAgaWYgKGNvbmZpZ1thcmlhQ2FtZWxOYW1lXSAmJiAhYXR0clthcmlhQ2FtZWxOYW1lXSkge1xuICAgICAgICBzY29wZS4kd2F0Y2goYXR0clthdHRyTmFtZV0sIGZ1bmN0aW9uKGJvb2xWYWwpIHtcbiAgICAgICAgICBpZiAobmVnYXRlKSB7XG4gICAgICAgICAgICBib29sVmFsID0gIWJvb2xWYWw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsZW0uYXR0cihhcmlhQXR0ciwgYm9vbFZhbCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQG5nZG9jIHNlcnZpY2VcbiAgICogQG5hbWUgJGFyaWFcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIFRoZSAkYXJpYSBzZXJ2aWNlIGNvbnRhaW5zIGhlbHBlciBtZXRob2RzIGZvciBhcHBseWluZyBjb21tb25cbiAgICogW0FSSUFdKGh0dHA6Ly93d3cudzMub3JnL1RSL3dhaS1hcmlhLykgYXR0cmlidXRlcyB0byBIVE1MIGRpcmVjdGl2ZXMuXG4gICAqXG4gICAqIG5nQXJpYSBpbmplY3RzIGNvbW1vbiBhY2Nlc3NpYmlsaXR5IGF0dHJpYnV0ZXMgdGhhdCB0ZWxsIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMgd2hlbiBIVE1MXG4gICAqIGVsZW1lbnRzIGFyZSBlbmFibGVkLCBzZWxlY3RlZCwgaGlkZGVuLCBhbmQgbW9yZS4gVG8gc2VlIGhvdyB0aGlzIGlzIHBlcmZvcm1lZCB3aXRoIG5nQXJpYSxcbiAgICogbGV0J3MgcmV2aWV3IGEgY29kZSBzbmlwcGV0IGZyb20gbmdBcmlhIGl0c2VsZjpcbiAgICpcbiAgICpgYGBqc1xuICAgKiBuZ0FyaWFNb2R1bGUuZGlyZWN0aXZlKCduZ0Rpc2FibGVkJywgWyckYXJpYScsIGZ1bmN0aW9uKCRhcmlhKSB7XG4gICAqICAgcmV0dXJuICRhcmlhLiQkd2F0Y2hFeHByKCduZ0Rpc2FibGVkJywgJ2FyaWEtZGlzYWJsZWQnKTtcbiAgICogfV0pXG4gICAqYGBgXG4gICAqIFNob3duIGFib3ZlLCB0aGUgbmdBcmlhIG1vZHVsZSBjcmVhdGVzIGEgZGlyZWN0aXZlIHdpdGggdGhlIHNhbWUgc2lnbmF0dXJlIGFzIHRoZVxuICAgKiB0cmFkaXRpb25hbCBgbmctZGlzYWJsZWRgIGRpcmVjdGl2ZS4gQnV0IHRoaXMgbmdBcmlhIHZlcnNpb24gaXMgZGVkaWNhdGVkIHRvXG4gICAqIHNvbGVseSBtYW5hZ2luZyBhY2Nlc3NpYmlsaXR5IGF0dHJpYnV0ZXMuIFRoZSBpbnRlcm5hbCBgJGFyaWFgIHNlcnZpY2UgaXMgdXNlZCB0byB3YXRjaCB0aGVcbiAgICogYm9vbGVhbiBhdHRyaWJ1dGUgYG5nRGlzYWJsZWRgLiBJZiBpdCBoYXMgbm90IGJlZW4gZXhwbGljaXRseSBzZXQgYnkgdGhlIGRldmVsb3BlcixcbiAgICogYGFyaWEtZGlzYWJsZWRgIGlzIGluamVjdGVkIGFzIGFuIGF0dHJpYnV0ZSB3aXRoIGl0cyB2YWx1ZSBzeW5jaHJvbml6ZWQgdG8gdGhlIHZhbHVlIGluXG4gICAqIGBuZ0Rpc2FibGVkYC5cbiAgICpcbiAgICogQmVjYXVzZSBuZ0FyaWEgaG9va3MgaW50byB0aGUgYG5nLWRpc2FibGVkYCBkaXJlY3RpdmUsIGRldmVsb3BlcnMgZG8gbm90IGhhdmUgdG8gZG9cbiAgICogYW55dGhpbmcgdG8gZW5hYmxlIHRoaXMgZmVhdHVyZS4gVGhlIGBhcmlhLWRpc2FibGVkYCBhdHRyaWJ1dGUgaXMgYXV0b21hdGljYWxseSBtYW5hZ2VkXG4gICAqIHNpbXBseSBhcyBhIHNpbGVudCBzaWRlLWVmZmVjdCBvZiB1c2luZyBgbmctZGlzYWJsZWRgIHdpdGggdGhlIG5nQXJpYSBtb2R1bGUuXG4gICAqXG4gICAqIFRoZSBmdWxsIGxpc3Qgb2YgZGlyZWN0aXZlcyB0aGF0IGludGVyZmFjZSB3aXRoIG5nQXJpYTpcbiAgICogKiAqKm5nTW9kZWwqKlxuICAgKiAqICoqbmdTaG93KipcbiAgICogKiAqKm5nSGlkZSoqXG4gICAqICogKipuZ0NsaWNrKipcbiAgICogKiAqKm5nRGJsY2xpY2sqKlxuICAgKiAqICoqbmdNZXNzYWdlcyoqXG4gICAqICogKipuZ0Rpc2FibGVkKipcbiAgICpcbiAgICogUmVhZCB0aGUge0BsaW5rIGd1aWRlL2FjY2Vzc2liaWxpdHkgbmdBcmlhIERldmVsb3BlciBHdWlkZX0gZm9yIGEgdGhvcm91Z2ggZXhwbGFuYXRpb24gb2YgZWFjaFxuICAgKiBkaXJlY3RpdmUuXG4gICAqXG4gICAqXG4gICAqICMjIERlcGVuZGVuY2llc1xuICAgKiBSZXF1aXJlcyB0aGUge0BsaW5rIG5nQXJpYX0gbW9kdWxlIHRvIGJlIGluc3RhbGxlZC5cbiAgICovXG4gIHRoaXMuJGdldCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjb25maWc6IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICByZXR1cm4gY29uZmlnW2tleV07XG4gICAgICB9LFxuICAgICAgJCR3YXRjaEV4cHI6IHdhdGNoRXhwclxuICAgIH07XG4gIH07XG59XG5cblxubmdBcmlhTW9kdWxlLmRpcmVjdGl2ZSgnbmdTaG93JywgWyckYXJpYScsIGZ1bmN0aW9uKCRhcmlhKSB7XG4gIHJldHVybiAkYXJpYS4kJHdhdGNoRXhwcignbmdTaG93JywgJ2FyaWEtaGlkZGVuJywgdHJ1ZSk7XG59XSlcbi5kaXJlY3RpdmUoJ25nSGlkZScsIFsnJGFyaWEnLCBmdW5jdGlvbigkYXJpYSkge1xuICByZXR1cm4gJGFyaWEuJCR3YXRjaEV4cHIoJ25nSGlkZScsICdhcmlhLWhpZGRlbicsIGZhbHNlKTtcbn1dKVxuLmRpcmVjdGl2ZSgnbmdNb2RlbCcsIFsnJGFyaWEnLCBmdW5jdGlvbigkYXJpYSkge1xuXG4gIGZ1bmN0aW9uIHNob3VsZEF0dGFjaEF0dHIoYXR0ciwgbm9ybWFsaXplZEF0dHIsIGVsZW0pIHtcbiAgICByZXR1cm4gJGFyaWEuY29uZmlnKG5vcm1hbGl6ZWRBdHRyKSAmJiAhZWxlbS5hdHRyKGF0dHIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0U2hhcGUoYXR0ciwgZWxlbSkge1xuICAgIHZhciB0eXBlID0gYXR0ci50eXBlLFxuICAgICAgICByb2xlID0gYXR0ci5yb2xlO1xuXG4gICAgcmV0dXJuICgodHlwZSB8fCByb2xlKSA9PT0gJ2NoZWNrYm94JyB8fCByb2xlID09PSAnbWVudWl0ZW1jaGVja2JveCcpID8gJ2NoZWNrYm94JyA6XG4gICAgICAgICAgICgodHlwZSB8fCByb2xlKSA9PT0gJ3JhZGlvJyAgICB8fCByb2xlID09PSAnbWVudWl0ZW1yYWRpbycpID8gJ3JhZGlvJyA6XG4gICAgICAgICAgICh0eXBlID09PSAncmFuZ2UnICAgICAgICAgICAgICB8fCByb2xlID09PSAncHJvZ3Jlc3NiYXInIHx8IHJvbGUgPT09ICdzbGlkZXInKSA/ICdyYW5nZScgOlxuICAgICAgICAgICAodHlwZSB8fCByb2xlKSA9PT0gJ3RleHRib3gnICAgfHwgZWxlbVswXS5ub2RlTmFtZSA9PT0gJ1RFWFRBUkVBJyA/ICdtdWx0aWxpbmUnIDogJyc7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcmVxdWlyZTogJz9uZ01vZGVsJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbSwgYXR0ciwgbmdNb2RlbCkge1xuICAgICAgdmFyIHNoYXBlID0gZ2V0U2hhcGUoYXR0ciwgZWxlbSk7XG4gICAgICB2YXIgbmVlZHNUYWJJbmRleCA9IHNob3VsZEF0dGFjaEF0dHIoJ3RhYmluZGV4JywgJ3RhYmluZGV4JywgZWxlbSk7XG5cbiAgICAgIGZ1bmN0aW9uIG5nQXJpYVdhdGNoTW9kZWxWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIG5nTW9kZWwuJG1vZGVsVmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGdldFJhZGlvUmVhY3Rpb24oKSB7XG4gICAgICAgIGlmIChuZWVkc1RhYkluZGV4KSB7XG4gICAgICAgICAgbmVlZHNUYWJJbmRleCA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBuZ0FyaWFSYWRpb1JlYWN0aW9uKG5ld1ZhbCkge1xuICAgICAgICAgICAgdmFyIGJvb2xWYWwgPSBuZXdWYWwgPT09IGF0dHIudmFsdWU7XG4gICAgICAgICAgICBlbGVtLmF0dHIoJ2FyaWEtY2hlY2tlZCcsIGJvb2xWYWwpO1xuICAgICAgICAgICAgZWxlbS5hdHRyKCd0YWJpbmRleCcsIDAgLSAhYm9vbFZhbCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gbmdBcmlhUmFkaW9SZWFjdGlvbihuZXdWYWwpIHtcbiAgICAgICAgICAgIGVsZW0uYXR0cignYXJpYS1jaGVja2VkJywgbmV3VmFsID09PSBhdHRyLnZhbHVlKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG5nQXJpYUNoZWNrYm94UmVhY3Rpb24obmV3VmFsKSB7XG4gICAgICAgIGVsZW0uYXR0cignYXJpYS1jaGVja2VkJywgISFuZXdWYWwpO1xuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKHNoYXBlKSB7XG4gICAgICAgIGNhc2UgJ3JhZGlvJzpcbiAgICAgICAgY2FzZSAnY2hlY2tib3gnOlxuICAgICAgICAgIGlmIChzaG91bGRBdHRhY2hBdHRyKCdhcmlhLWNoZWNrZWQnLCAnYXJpYUNoZWNrZWQnLCBlbGVtKSkge1xuICAgICAgICAgICAgc2NvcGUuJHdhdGNoKG5nQXJpYVdhdGNoTW9kZWxWYWx1ZSwgc2hhcGUgPT09ICdyYWRpbycgP1xuICAgICAgICAgICAgICAgIGdldFJhZGlvUmVhY3Rpb24oKSA6IG5nQXJpYUNoZWNrYm94UmVhY3Rpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAncmFuZ2UnOlxuICAgICAgICAgIGlmICgkYXJpYS5jb25maWcoJ2FyaWFWYWx1ZScpKSB7XG4gICAgICAgICAgICBpZiAoYXR0ci5taW4gJiYgIWVsZW0uYXR0cignYXJpYS12YWx1ZW1pbicpKSB7XG4gICAgICAgICAgICAgIGVsZW0uYXR0cignYXJpYS12YWx1ZW1pbicsIGF0dHIubWluKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhdHRyLm1heCAmJiAhZWxlbS5hdHRyKCdhcmlhLXZhbHVlbWF4JykpIHtcbiAgICAgICAgICAgICAgZWxlbS5hdHRyKCdhcmlhLXZhbHVlbWF4JywgYXR0ci5tYXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFlbGVtLmF0dHIoJ2FyaWEtdmFsdWVub3cnKSkge1xuICAgICAgICAgICAgICBzY29wZS4kd2F0Y2gobmdBcmlhV2F0Y2hNb2RlbFZhbHVlLCBmdW5jdGlvbiBuZ0FyaWFWYWx1ZU5vd1JlYWN0aW9uKG5ld1ZhbCkge1xuICAgICAgICAgICAgICAgIGVsZW0uYXR0cignYXJpYS12YWx1ZW5vdycsIG5ld1ZhbCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbXVsdGlsaW5lJzpcbiAgICAgICAgICBpZiAoc2hvdWxkQXR0YWNoQXR0cignYXJpYS1tdWx0aWxpbmUnLCAnYXJpYU11bHRpbGluZScsIGVsZW0pKSB7XG4gICAgICAgICAgICBlbGVtLmF0dHIoJ2FyaWEtbXVsdGlsaW5lJywgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAobmVlZHNUYWJJbmRleCkge1xuICAgICAgICBlbGVtLmF0dHIoJ3RhYmluZGV4JywgMCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZ01vZGVsLiR2YWxpZGF0b3JzLnJlcXVpcmVkICYmIHNob3VsZEF0dGFjaEF0dHIoJ2FyaWEtcmVxdWlyZWQnLCAnYXJpYVJlcXVpcmVkJywgZWxlbSkpIHtcbiAgICAgICAgc2NvcGUuJHdhdGNoKGZ1bmN0aW9uIG5nQXJpYVJlcXVpcmVkV2F0Y2goKSB7XG4gICAgICAgICAgcmV0dXJuIG5nTW9kZWwuJGVycm9yLnJlcXVpcmVkO1xuICAgICAgICB9LCBmdW5jdGlvbiBuZ0FyaWFSZXF1aXJlZFJlYWN0aW9uKG5ld1ZhbCkge1xuICAgICAgICAgIGVsZW0uYXR0cignYXJpYS1yZXF1aXJlZCcsICEhbmV3VmFsKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzaG91bGRBdHRhY2hBdHRyKCdhcmlhLWludmFsaWQnLCAnYXJpYUludmFsaWQnLCBlbGVtKSkge1xuICAgICAgICBzY29wZS4kd2F0Y2goZnVuY3Rpb24gbmdBcmlhSW52YWxpZFdhdGNoKCkge1xuICAgICAgICAgIHJldHVybiBuZ01vZGVsLiRpbnZhbGlkO1xuICAgICAgICB9LCBmdW5jdGlvbiBuZ0FyaWFJbnZhbGlkUmVhY3Rpb24obmV3VmFsKSB7XG4gICAgICAgICAgZWxlbS5hdHRyKCdhcmlhLWludmFsaWQnLCAhIW5ld1ZhbCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1dKVxuLmRpcmVjdGl2ZSgnbmdEaXNhYmxlZCcsIFsnJGFyaWEnLCBmdW5jdGlvbigkYXJpYSkge1xuICByZXR1cm4gJGFyaWEuJCR3YXRjaEV4cHIoJ25nRGlzYWJsZWQnLCAnYXJpYS1kaXNhYmxlZCcpO1xufV0pXG4uZGlyZWN0aXZlKCduZ01lc3NhZ2VzJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiAnP25nTWVzc2FnZXMnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtLCBhdHRyLCBuZ01lc3NhZ2VzKSB7XG4gICAgICBpZiAoIWVsZW0uYXR0cignYXJpYS1saXZlJykpIHtcbiAgICAgICAgZWxlbS5hdHRyKCdhcmlhLWxpdmUnLCAnYXNzZXJ0aXZlJyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufSlcbi5kaXJlY3RpdmUoJ25nQ2xpY2snLFsnJGFyaWEnLCAnJHBhcnNlJywgZnVuY3Rpb24oJGFyaWEsICRwYXJzZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgY29tcGlsZTogZnVuY3Rpb24oZWxlbSwgYXR0cikge1xuICAgICAgdmFyIGZuID0gJHBhcnNlKGF0dHIubmdDbGljaywgLyogaW50ZXJjZXB0b3JGbiAqLyBudWxsLCAvKiBleHBlbnNpdmVDaGVja3MgKi8gdHJ1ZSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW0sIGF0dHIpIHtcblxuICAgICAgICBmdW5jdGlvbiBpc05vZGVPbmVPZihlbGVtLCBub2RlVHlwZUFycmF5KSB7XG4gICAgICAgICAgaWYgKG5vZGVUeXBlQXJyYXkuaW5kZXhPZihlbGVtWzBdLm5vZGVOYW1lKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkYXJpYS5jb25maWcoJ3RhYmluZGV4JykgJiYgIWVsZW0uYXR0cigndGFiaW5kZXgnKSkge1xuICAgICAgICAgIGVsZW0uYXR0cigndGFiaW5kZXgnLCAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkYXJpYS5jb25maWcoJ2JpbmRLZXlwcmVzcycpICYmICFhdHRyLm5nS2V5cHJlc3MgJiYgaXNOb2RlT25lT2YoZWxlbSwgWydESVYnLCAnTEknXSkpIHtcbiAgICAgICAgICBlbGVtLm9uKCdrZXlwcmVzcycsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gMzIgfHwgZXZlbnQua2V5Q29kZSA9PT0gMTMpIHtcbiAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY2FsbGJhY2soKSB7XG4gICAgICAgICAgICAgIGZuKHNjb3BlLCB7ICRldmVudDogZXZlbnQgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9O1xufV0pXG4uZGlyZWN0aXZlKCduZ0RibGNsaWNrJywgWyckYXJpYScsIGZ1bmN0aW9uKCRhcmlhKSB7XG4gIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbSwgYXR0cikge1xuICAgIGlmICgkYXJpYS5jb25maWcoJ3RhYmluZGV4JykgJiYgIWVsZW0uYXR0cigndGFiaW5kZXgnKSkge1xuICAgICAgZWxlbS5hdHRyKCd0YWJpbmRleCcsIDApO1xuICAgIH1cbiAgfTtcbn1dKTtcblxuXG59KSh3aW5kb3csIHdpbmRvdy5hbmd1bGFyKTtcblxuLyohXG4gKiBBbmd1bGFyIE1hdGVyaWFsIERlc2lnblxuICogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvbWF0ZXJpYWxcbiAqIEBsaWNlbnNlIE1JVFxuICogdjAuNy4xXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCduZ01hdGVyaWFsJywgW1wibmdcIixcIm5nQW5pbWF0ZVwiLFwibmdBcmlhXCIsXCJtYXRlcmlhbC5jb3JlXCIsXCJtYXRlcmlhbC5jb3JlLnRoZW1pbmcucGFsZXR0ZVwiLFwibWF0ZXJpYWwuY29yZS50aGVtaW5nXCIsXCJtYXRlcmlhbC5jb21wb25lbnRzLmJhY2tkcm9wXCIsXCJtYXRlcmlhbC5jb21wb25lbnRzLmJvdHRvbVNoZWV0XCIsXCJtYXRlcmlhbC5jb21wb25lbnRzLmJ1dHRvblwiLFwibWF0ZXJpYWwuY29tcG9uZW50cy5jYXJkXCIsXCJtYXRlcmlhbC5jb21wb25lbnRzLmNoZWNrYm94XCIsXCJtYXRlcmlhbC5jb21wb25lbnRzLmNvbnRlbnRcIixcIm1hdGVyaWFsLmNvbXBvbmVudHMuZGlhbG9nXCIsXCJtYXRlcmlhbC5jb21wb25lbnRzLmRpdmlkZXJcIixcIm1hdGVyaWFsLmNvbXBvbmVudHMuaWNvblwiLFwibWF0ZXJpYWwuY29tcG9uZW50cy5pbnB1dFwiLFwibWF0ZXJpYWwuY29tcG9uZW50cy5saXN0XCIsXCJtYXRlcmlhbC5jb21wb25lbnRzLnByb2dyZXNzQ2lyY3VsYXJcIixcIm1hdGVyaWFsLmNvbXBvbmVudHMucHJvZ3Jlc3NMaW5lYXJcIixcIm1hdGVyaWFsLmNvbXBvbmVudHMucmFkaW9CdXR0b25cIixcIm1hdGVyaWFsLmNvbXBvbmVudHMuc2lkZW5hdlwiLFwibWF0ZXJpYWwuY29tcG9uZW50cy5zbGlkZXJcIixcIm1hdGVyaWFsLmNvbXBvbmVudHMuc3RpY2t5XCIsXCJtYXRlcmlhbC5jb21wb25lbnRzLnN1YmhlYWRlclwiLFwibWF0ZXJpYWwuY29tcG9uZW50cy5zd2lwZVwiLFwibWF0ZXJpYWwuY29tcG9uZW50cy5zd2l0Y2hcIixcIm1hdGVyaWFsLmNvbXBvbmVudHMudGFic1wiLFwibWF0ZXJpYWwuY29tcG9uZW50cy50ZXh0RmllbGRcIixcIm1hdGVyaWFsLmNvbXBvbmVudHMudG9hc3RcIixcIm1hdGVyaWFsLmNvbXBvbmVudHMudG9vbGJhclwiLFwibWF0ZXJpYWwuY29tcG9uZW50cy50b29sdGlwXCIsXCJtYXRlcmlhbC5jb21wb25lbnRzLndoaXRlZnJhbWVcIl0pO1xuLyohXG4gKiBBbmd1bGFyIE1hdGVyaWFsIERlc2lnblxuICogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvbWF0ZXJpYWxcbiAqIEBsaWNlbnNlIE1JVFxuICogdjAuNy4xXG4gKi9cbihmdW5jdGlvbigpIHtcbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBJbml0aWFsaXphdGlvbiBmdW5jdGlvbiB0aGF0IHZhbGlkYXRlcyBlbnZpcm9ubWVudFxuICogcmVxdWlyZW1lbnRzLlxuICovXG5hbmd1bGFyXG4gIC5tb2R1bGUoJ21hdGVyaWFsLmNvcmUnLCBbJ21hdGVyaWFsLmNvcmUudGhlbWluZyddKVxuICAuY29uZmlnKE1kQ29yZUNvbmZpZ3VyZSk7XG5cblxuZnVuY3Rpb24gTWRDb3JlQ29uZmlndXJlKCRwcm92aWRlLCAkbWRUaGVtaW5nUHJvdmlkZXIpIHtcbiAgJHByb3ZpZGUuZGVjb3JhdG9yKCckJHJBRicsIFtcIiRkZWxlZ2F0ZVwiLCByQUZEZWNvcmF0b3JdKTtcblxuICAkbWRUaGVtaW5nUHJvdmlkZXIudGhlbWUoJ2RlZmF1bHQnKVxuICAgIC5wcmltYXJ5UGFsZXR0ZSgnaW5kaWdvJylcbiAgICAuYWNjZW50UGFsZXR0ZSgncGluaycpXG4gICAgLndhcm5QYWxldHRlKCdyZWQnKVxuICAgIC5iYWNrZ3JvdW5kUGFsZXR0ZSgnZ3JleScpO1xufVxuTWRDb3JlQ29uZmlndXJlLiRpbmplY3QgPSBbXCIkcHJvdmlkZVwiLCBcIiRtZFRoZW1pbmdQcm92aWRlclwiXTtcblxuZnVuY3Rpb24gckFGRGVjb3JhdG9yKCAkZGVsZWdhdGUgKSB7XG4gIC8qKlxuICAgKiBVc2UgdGhpcyB0byB0aHJvdHRsZSBldmVudHMgdGhhdCBjb21lIGluIG9mdGVuLlxuICAgKiBUaGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHdpbGwgYWx3YXlzIHVzZSB0aGUgKmxhc3QqIGludm9jYXRpb24gYmVmb3JlIHRoZVxuICAgKiBjb21pbmcgZnJhbWUuXG4gICAqXG4gICAqIEZvciBleGFtcGxlLCB3aW5kb3cgcmVzaXplIGV2ZW50cyB0aGF0IGZpcmUgbWFueSB0aW1lcyBhIHNlY29uZDpcbiAgICogSWYgd2Ugc2V0IHRvIHVzZSBhbiByYWYtdGhyb3R0bGVkIGNhbGxiYWNrIG9uIHdpbmRvdyByZXNpemUsIHRoZW5cbiAgICogb3VyIGNhbGxiYWNrIHdpbGwgb25seSBiZSBmaXJlZCBvbmNlIHBlciBmcmFtZSwgd2l0aCB0aGUgbGFzdCByZXNpemVcbiAgICogZXZlbnQgdGhhdCBoYXBwZW5lZCBiZWZvcmUgdGhhdCBmcmFtZS5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgZnVuY3Rpb24gdG8gZGVib3VuY2VcbiAgICovXG4gICRkZWxlZ2F0ZS50aHJvdHRsZSA9IGZ1bmN0aW9uKGNiKSB7XG4gICAgdmFyIHF1ZXVlQXJncywgYWxyZWFkeVF1ZXVlZCwgcXVldWVDYiwgY29udGV4dDtcbiAgICByZXR1cm4gZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgICAgcXVldWVBcmdzID0gYXJndW1lbnRzO1xuICAgICAgY29udGV4dCA9IHRoaXM7XG4gICAgICBxdWV1ZUNiID0gY2I7XG4gICAgICBpZiAoIWFscmVhZHlRdWV1ZWQpIHtcbiAgICAgICAgYWxyZWFkeVF1ZXVlZCA9IHRydWU7XG4gICAgICAgICRkZWxlZ2F0ZShmdW5jdGlvbigpIHtcbiAgICAgICAgICBxdWV1ZUNiLmFwcGx5KGNvbnRleHQsIHF1ZXVlQXJncyk7XG4gICAgICAgICAgYWxyZWFkeVF1ZXVlZCA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuICByZXR1cm4gJGRlbGVnYXRlO1xufVxuXG59KSgpO1xuXG4vKiFcbiAqIEFuZ3VsYXIgTWF0ZXJpYWwgRGVzaWduXG4gKiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9tYXRlcmlhbFxuICogQGxpY2Vuc2UgTUlUXG4gKiB2MC43LjFcbiAqL1xuKGZ1bmN0aW9uKCkge1xuJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgnbWF0ZXJpYWwuY29yZScpXG4uZmFjdG9yeSgnJG1kQ29uc3RhbnQnLCBNZENvbnN0YW50RmFjdG9yeSk7XG5cbmZ1bmN0aW9uIE1kQ29uc3RhbnRGYWN0b3J5KCQkckFGLCAkc25pZmZlcikge1xuXG4gIHZhciB3ZWJraXQgPSAvd2Via2l0L2kudGVzdCgkc25pZmZlci52ZW5kb3JQcmVmaXgpO1xuICBmdW5jdGlvbiB2ZW5kb3JQcm9wZXJ0eShuYW1lKSB7XG4gICAgcmV0dXJuIHdlYmtpdCA/ICAoJ3dlYmtpdCcgKyBuYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zdWJzdHJpbmcoMSkpIDogbmFtZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgS0VZX0NPREU6IHtcbiAgICAgIEVOVEVSOiAxMyxcbiAgICAgIEVTQ0FQRTogMjcsXG4gICAgICBTUEFDRTogMzIsXG4gICAgICBMRUZUX0FSUk9XIDogMzcsXG4gICAgICBVUF9BUlJPVyA6IDM4LFxuICAgICAgUklHSFRfQVJST1cgOiAzOSxcbiAgICAgIERPV05fQVJST1cgOiA0MFxuICAgIH0sXG4gICAgQ1NTOiB7XG4gICAgICAvKiBDb25zdGFudHMgKi9cbiAgICAgIFRSQU5TSVRJT05FTkQ6ICd0cmFuc2l0aW9uZW5kJyArICh3ZWJraXQgPyAnIHdlYmtpdFRyYW5zaXRpb25FbmQnIDogJycpLFxuICAgICAgQU5JTUFUSU9ORU5EOiAnYW5pbWF0aW9uZW5kJyArICh3ZWJraXQgPyAnIHdlYmtpdEFuaW1hdGlvbkVuZCcgOiAnJyksXG5cbiAgICAgIFRSQU5TRk9STTogdmVuZG9yUHJvcGVydHkoJ3RyYW5zZm9ybScpLFxuICAgICAgVFJBTlNJVElPTjogdmVuZG9yUHJvcGVydHkoJ3RyYW5zaXRpb24nKSxcbiAgICAgIFRSQU5TSVRJT05fRFVSQVRJT046IHZlbmRvclByb3BlcnR5KCd0cmFuc2l0aW9uRHVyYXRpb24nKSxcbiAgICAgIEFOSU1BVElPTl9QTEFZX1NUQVRFOiB2ZW5kb3JQcm9wZXJ0eSgnYW5pbWF0aW9uUGxheVN0YXRlJyksXG4gICAgICBBTklNQVRJT05fRFVSQVRJT046IHZlbmRvclByb3BlcnR5KCdhbmltYXRpb25EdXJhdGlvbicpLFxuICAgICAgQU5JTUFUSU9OX05BTUU6IHZlbmRvclByb3BlcnR5KCdhbmltYXRpb25OYW1lJyksXG4gICAgICBBTklNQVRJT05fVElNSU5HOiB2ZW5kb3JQcm9wZXJ0eSgnYW5pbWF0aW9uVGltaW5nRnVuY3Rpb24nKSxcbiAgICAgIEFOSU1BVElPTl9ESVJFQ1RJT046IHZlbmRvclByb3BlcnR5KCdhbmltYXRpb25EaXJlY3Rpb24nKVxuICAgIH0sXG4gICAgTUVESUE6IHtcbiAgICAgICdzbSc6ICcobWF4LXdpZHRoOiA2MDBweCknLFxuICAgICAgJ2d0LXNtJzogJyhtaW4td2lkdGg6IDYwMHB4KScsXG4gICAgICAnbWQnOiAnKG1pbi13aWR0aDogNjAwcHgpIGFuZCAobWF4LXdpZHRoOiA5NjBweCknLFxuICAgICAgJ2d0LW1kJzogJyhtaW4td2lkdGg6IDk2MHB4KScsXG4gICAgICAnbGcnOiAnKG1pbi13aWR0aDogOTYwcHgpIGFuZCAobWF4LXdpZHRoOiAxMjAwcHgpJyxcbiAgICAgICdndC1sZyc6ICcobWluLXdpZHRoOiAxMjAwcHgpJ1xuICAgIH1cbiAgfTtcbn1cbk1kQ29uc3RhbnRGYWN0b3J5LiRpbmplY3QgPSBbXCIkJHJBRlwiLCBcIiRzbmlmZmVyXCJdO1xuXG59KSgpO1xuXG4vKiFcbiAqIEFuZ3VsYXIgTWF0ZXJpYWwgRGVzaWduXG4gKiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9tYXRlcmlhbFxuICogQGxpY2Vuc2UgTUlUXG4gKiB2MC43LjFcbiAqL1xuKGZ1bmN0aW9uKCl7XG5cbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ21hdGVyaWFsLmNvcmUnKVxuICAgIC5jb25maWcoIFtcIiRwcm92aWRlXCIsIGZ1bmN0aW9uKCRwcm92aWRlKXtcbiAgICAgICAkcHJvdmlkZS5kZWNvcmF0b3IoJyRtZFV0aWwnLCBbJyRkZWxlZ2F0ZScsIGZ1bmN0aW9uICgkZGVsZWdhdGUpe1xuICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogSW5qZWN0IHRoZSBpdGVyYXRvciBmYWNhZGUgdG8gZWFzaWx5IHN1cHBvcnQgaXRlcmF0aW9uIGFuZCBhY2Nlc3NvcnNcbiAgICAgICAgICAgICogQHNlZSBpdGVyYXRvciBiZWxvd1xuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgJGRlbGVnYXRlLml0ZXJhdG9yID0gSXRlcmF0b3I7XG5cbiAgICAgICAgICAgcmV0dXJuICRkZWxlZ2F0ZTtcbiAgICAgICAgIH1cbiAgICAgICBdKTtcbiAgICAgfV0pO1xuXG4gIC8qKlxuICAgKiBpdGVyYXRvciBpcyBhIGxpc3QgZmFjYWRlIHRvIGVhc2lseSBzdXBwb3J0IGl0ZXJhdGlvbiBhbmQgYWNjZXNzb3JzXG4gICAqXG4gICAqIEBwYXJhbSBpdGVtcyBBcnJheSBsaXN0IHdoaWNoIHRoaXMgaXRlcmF0b3Igd2lsbCBlbnVtZXJhdGVcbiAgICogQHBhcmFtIHJlbG9vcCBCb29sZWFuIGVuYWJsZXMgaXRlcmF0b3IgdG8gY29uc2lkZXIgdGhlIGxpc3QgYXMgYW4gZW5kbGVzcyByZWxvb3BcbiAgICovXG4gIGZ1bmN0aW9uIEl0ZXJhdG9yKGl0ZW1zLCByZWxvb3ApIHtcbiAgICB2YXIgdHJ1ZUZuID0gZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9O1xuXG4gICAgcmVsb29wID0gISFyZWxvb3A7XG4gICAgdmFyIF9pdGVtcyA9IGl0ZW1zIHx8IFsgXTtcblxuICAgIC8vIFB1Ymxpc2hlZCBBUElcbiAgICByZXR1cm4ge1xuICAgICAgaXRlbXM6IGdldEl0ZW1zLFxuICAgICAgY291bnQ6IGNvdW50LFxuXG4gICAgICBpblJhbmdlOiBpblJhbmdlLFxuICAgICAgY29udGFpbnM6IGNvbnRhaW5zLFxuICAgICAgaW5kZXhPZjogaW5kZXhPZixcbiAgICAgIGl0ZW1BdDogaXRlbUF0LFxuXG4gICAgICBmaW5kQnk6IGZpbmRCeSxcblxuICAgICAgYWRkOiBhZGQsXG4gICAgICByZW1vdmU6IHJlbW92ZSxcblxuICAgICAgZmlyc3Q6IGZpcnN0LFxuICAgICAgbGFzdDogbGFzdCxcbiAgICAgIG5leHQ6IGFuZ3VsYXIuYmluZChudWxsLCBmaW5kU3Vic2VxdWVudEl0ZW0sIGZhbHNlKSxcbiAgICAgIHByZXZpb3VzOiBhbmd1bGFyLmJpbmQobnVsbCwgZmluZFN1YnNlcXVlbnRJdGVtLCB0cnVlKSxcblxuICAgICAgaGFzUHJldmlvdXM6IGhhc1ByZXZpb3VzLFxuICAgICAgaGFzTmV4dDogaGFzTmV4dFxuXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFB1Ymxpc2ggY29weSBvZiB0aGUgZW51bWVyYWJsZSBzZXRcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8Kn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRJdGVtcygpIHtcbiAgICAgIHJldHVybiBbXS5jb25jYXQoX2l0ZW1zKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmUgbGVuZ3RoIG9mIHRoZSBsaXN0XG4gICAgICogQHJldHVybnMge0FycmF5Lmxlbmd0aHwqfG51bWJlcn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3VudCgpIHtcbiAgICAgIHJldHVybiBfaXRlbXMubGVuZ3RoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIElzIHRoZSBpbmRleCBzcGVjaWZpZWQgdmFsaWRcbiAgICAgKiBAcGFyYW0gaW5kZXhcbiAgICAgKiBAcmV0dXJucyB7QXJyYXkubGVuZ3RofCp8bnVtYmVyfGJvb2xlYW59XG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5SYW5nZShpbmRleCkge1xuICAgICAgcmV0dXJuIF9pdGVtcy5sZW5ndGggJiYgKCBpbmRleCA+IC0xICkgJiYgKGluZGV4IDwgX2l0ZW1zLmxlbmd0aCApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbiB0aGUgaXRlcmF0b3IgcHJvY2VlZCB0byB0aGUgbmV4dCBpdGVtIGluIHRoZSBsaXN0OyByZWxhdGl2ZSB0b1xuICAgICAqIHRoZSBzcGVjaWZpZWQgaXRlbS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBpdGVtXG4gICAgICogQHJldHVybnMge0FycmF5Lmxlbmd0aHwqfG51bWJlcnxib29sZWFufVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc05leHQoaXRlbSkge1xuICAgICAgcmV0dXJuIGl0ZW0gPyBpblJhbmdlKGluZGV4T2YoaXRlbSkgKyAxKSA6IGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbiB0aGUgaXRlcmF0b3IgcHJvY2VlZCB0byB0aGUgcHJldmlvdXMgaXRlbSBpbiB0aGUgbGlzdDsgcmVsYXRpdmUgdG9cbiAgICAgKiB0aGUgc3BlY2lmaWVkIGl0ZW0uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaXRlbVxuICAgICAqIEByZXR1cm5zIHtBcnJheS5sZW5ndGh8KnxudW1iZXJ8Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNQcmV2aW91cyhpdGVtKSB7XG4gICAgICByZXR1cm4gaXRlbSA/IGluUmFuZ2UoaW5kZXhPZihpdGVtKSAtIDEpIDogZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGl0ZW0gYXQgc3BlY2lmaWVkIGluZGV4L3Bvc2l0aW9uXG4gICAgICogQHBhcmFtIGluZGV4XG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG4gICAgZnVuY3Rpb24gaXRlbUF0KGluZGV4KSB7XG4gICAgICByZXR1cm4gaW5SYW5nZShpbmRleCkgPyBfaXRlbXNbaW5kZXhdIDogbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaW5kIGFsbCBlbGVtZW50cyBtYXRjaGluZyB0aGUga2V5L3ZhbHVlIHBhaXJcbiAgICAgKiBvdGhlcndpc2UgcmV0dXJuIG51bGxcbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWxcbiAgICAgKiBAcGFyYW0ga2V5XG4gICAgICpcbiAgICAgKiBAcmV0dXJuIGFycmF5XG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZEJ5KGtleSwgdmFsKSB7XG4gICAgICByZXR1cm4gX2l0ZW1zLmZpbHRlcihmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtW2tleV0gPT09IHZhbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBpdGVtIHRvIGxpc3RcbiAgICAgKiBAcGFyYW0gaXRlbVxuICAgICAqIEBwYXJhbSBpbmRleFxuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZChpdGVtLCBpbmRleCkge1xuICAgICAgaWYgKCAhaXRlbSApIHJldHVybiAtMTtcblxuICAgICAgaWYgKCFhbmd1bGFyLmlzTnVtYmVyKGluZGV4KSkge1xuICAgICAgICBpbmRleCA9IF9pdGVtcy5sZW5ndGg7XG4gICAgICB9XG5cbiAgICAgIF9pdGVtcy5zcGxpY2UoaW5kZXgsIDAsIGl0ZW0pO1xuXG4gICAgICByZXR1cm4gaW5kZXhPZihpdGVtKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgaXRlbSBmcm9tIGxpc3QuLi5cbiAgICAgKiBAcGFyYW0gaXRlbVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlbW92ZShpdGVtKSB7XG4gICAgICBpZiAoIGNvbnRhaW5zKGl0ZW0pICl7XG4gICAgICAgIF9pdGVtcy5zcGxpY2UoaW5kZXhPZihpdGVtKSwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSB6ZXJvLWJhc2VkIGluZGV4IG9mIHRoZSB0YXJnZXQgaXRlbVxuICAgICAqIEBwYXJhbSBpdGVtXG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5kZXhPZihpdGVtKSB7XG4gICAgICByZXR1cm4gX2l0ZW1zLmluZGV4T2YoaXRlbSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQm9vbGVhbiBleGlzdGVuY2UgY2hlY2tcbiAgICAgKiBAcGFyYW0gaXRlbVxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbnRhaW5zKGl0ZW0pIHtcbiAgICAgIHJldHVybiBpdGVtICYmIChpbmRleE9mKGl0ZW0pID4gLTEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiBmaXJzdCBpdGVtIGluIHRoZSBsaXN0XG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG4gICAgZnVuY3Rpb24gZmlyc3QoKSB7XG4gICAgICByZXR1cm4gX2l0ZW1zLmxlbmd0aCA/IF9pdGVtc1swXSA6IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIGxhc3QgaXRlbSBpbiB0aGUgbGlzdC4uLlxuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhc3QoKSB7XG4gICAgICByZXR1cm4gX2l0ZW1zLmxlbmd0aCA/IF9pdGVtc1tfaXRlbXMubGVuZ3RoIC0gMV0gOiBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbmQgdGhlIG5leHQgaXRlbS4gSWYgcmVsb29wIGlzIHRydWUgYW5kIGF0IHRoZSBlbmQgb2YgdGhlIGxpc3QsIGl0IHdpbGxcbiAgICAgKiBnbyBiYWNrIHRvIHRoZSBmaXJzdCBpdGVtLiBJZiBnaXZlbiAsdGhlIGB2YWxpZGF0ZWAgY2FsbGJhY2sgd2lsbCBiZSB1c2VkXG4gICAgICogZGV0ZXJtaW5lIHdoZXRoZXIgdGhlIG5leHQgaXRlbSBpcyB2YWxpZC4gSWYgbm90IHZhbGlkLCBpdCB3aWxsIHRyeSB0byBmaW5kIHRoZVxuICAgICAqIG5leHQgaXRlbSBhZ2Fpbi5cbiAgICAgKiBAcGFyYW0gaXRlbVxuICAgICAqIEBwYXJhbSB7b3B0aW9uYWx9IHZhbGlkYXRlIFZhbGlkYXRlIGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtvcHRpb25hbH0gbGltaXQgUmVjdXJzaW9uIGxpbWl0XG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZFN1YnNlcXVlbnRJdGVtKGJhY2t3YXJkcywgaXRlbSwgdmFsaWRhdGUsIGxpbWl0KSB7XG4gICAgICB2YWxpZGF0ZSA9IHZhbGlkYXRlIHx8IHRydWVGbjtcblxuICAgICAgdmFyIGN1ckluZGV4ID0gaW5kZXhPZihpdGVtKTtcbiAgICAgIGlmICghaW5SYW5nZShjdXJJbmRleCkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBuZXh0SW5kZXggPSBjdXJJbmRleCArIChiYWNrd2FyZHMgPyAtMSA6IDEpO1xuICAgICAgdmFyIGZvdW5kSXRlbSA9IG51bGw7XG4gICAgICBpZiAoaW5SYW5nZShuZXh0SW5kZXgpKSB7XG4gICAgICAgIGZvdW5kSXRlbSA9IF9pdGVtc1tuZXh0SW5kZXhdO1xuICAgICAgfSBlbHNlIGlmIChyZWxvb3ApIHtcbiAgICAgICAgZm91bmRJdGVtID0gYmFja3dhcmRzID8gbGFzdCgpIDogZmlyc3QoKTtcbiAgICAgICAgbmV4dEluZGV4ID0gaW5kZXhPZihmb3VuZEl0ZW0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoKGZvdW5kSXRlbSA9PT0gbnVsbCkgfHwgKG5leHRJbmRleCA9PT0gbGltaXQpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAoYW5ndWxhci5pc1VuZGVmaW5lZChsaW1pdCkpIHtcbiAgICAgICAgbGltaXQgPSBuZXh0SW5kZXg7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2YWxpZGF0ZShmb3VuZEl0ZW0pID8gZm91bmRJdGVtIDogZmluZFN1YnNlcXVlbnRJdGVtKGJhY2t3YXJkcywgZm91bmRJdGVtLCB2YWxpZGF0ZSwgbGltaXQpO1xuICAgIH1cbiAgfVxuXG59KSgpO1xuXG4vKiFcbiAqIEFuZ3VsYXIgTWF0ZXJpYWwgRGVzaWduXG4gKiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9tYXRlcmlhbFxuICogQGxpY2Vuc2UgTUlUXG4gKiB2MC43LjFcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ21hdGVyaWFsLmNvcmUnKVxuLmZhY3RvcnkoJyRtZE1lZGlhJywgbWRNZWRpYUZhY3RvcnkpO1xuXG4vKipcbiAqIEV4cG9zZXMgYSBmdW5jdGlvbiBvbiB0aGUgJyRtZE1lZGlhJyBzZXJ2aWNlIHdoaWNoIHdpbGwgcmV0dXJuIHRydWUgb3IgZmFsc2UsXG4gKiB3aGV0aGVyIHRoZSBnaXZlbiBtZWRpYSBxdWVyeSBtYXRjaGVzLiBSZS1ldmFsdWF0ZXMgb24gcmVzaXplLiBBbGxvd3MgcHJlc2V0c1xuICogZm9yICdzbScsICdtZCcsICdsZycuXG4gKlxuICogQGV4YW1wbGUgJG1kTWVkaWEoJ3NtJykgPT0gdHJ1ZSBpZiBkZXZpY2Utd2lkdGggPD0gc21cbiAqIEBleGFtcGxlICRtZE1lZGlhKCcobWluLXdpZHRoOiAxMjAwcHgpJykgPT0gdHJ1ZSBpZiBkZXZpY2Utd2lkdGggPj0gMTIwMHB4XG4gKiBAZXhhbXBsZSAkbWRNZWRpYSgnbWF4LXdpZHRoOiAzMDBweCcpID09IHRydWUgaWYgZGV2aWNlLXdpZHRoIDw9IDMwMHB4IChzYW5pdGl6ZXMgaW5wdXQsIGFkZGluZyBwYXJlbnMpXG4gKi9cbmZ1bmN0aW9uIG1kTWVkaWFGYWN0b3J5KCRtZENvbnN0YW50LCAkcm9vdFNjb3BlLCAkd2luZG93KSB7XG4gIHZhciBxdWVyaWVzID0ge307XG4gIHZhciByZXN1bHRzID0ge307XG5cbiAgcmV0dXJuICRtZE1lZGlhO1xuXG4gIGZ1bmN0aW9uICRtZE1lZGlhKHF1ZXJ5KSB7XG4gICAgdmFyIHZhbGlkYXRlZCA9IHF1ZXJpZXNbcXVlcnldO1xuICAgIGlmIChhbmd1bGFyLmlzVW5kZWZpbmVkKHZhbGlkYXRlZCkpIHtcbiAgICAgIHZhbGlkYXRlZCA9IHF1ZXJpZXNbcXVlcnldID0gdmFsaWRhdGUocXVlcnkpO1xuICAgIH1cblxuICAgIHZhciByZXN1bHQgPSByZXN1bHRzW3ZhbGlkYXRlZF07XG4gICAgaWYgKGFuZ3VsYXIuaXNVbmRlZmluZWQocmVzdWx0KSkge1xuICAgICAgcmVzdWx0ID0gYWRkKHZhbGlkYXRlZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHZhbGlkYXRlKHF1ZXJ5KSB7XG4gICAgcmV0dXJuICRtZENvbnN0YW50Lk1FRElBW3F1ZXJ5XSB8fFxuICAgICAgICAgICAoKHF1ZXJ5LmNoYXJBdCgwKSAhPT0gJygnKSA/ICgnKCcgKyBxdWVyeSArICcpJykgOiBxdWVyeSk7XG4gIH1cblxuICBmdW5jdGlvbiBhZGQocXVlcnkpIHtcbiAgICB2YXIgcmVzdWx0ID0gJHdpbmRvdy5tYXRjaE1lZGlhKHF1ZXJ5KTtcbiAgICByZXN1bHQuYWRkTGlzdGVuZXIob25RdWVyeUNoYW5nZSk7XG4gICAgcmV0dXJuIChyZXN1bHRzW3Jlc3VsdC5tZWRpYV0gPSAhIXJlc3VsdC5tYXRjaGVzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUXVlcnlDaGFuZ2UoKSB7XG4gICAgdmFyIHF1ZXJ5ID0gdGhpcztcbiAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmMoZnVuY3Rpb24oKSB7XG4gICAgICByZXN1bHRzW3F1ZXJ5Lm1lZGlhXSA9ICEhcXVlcnkubWF0Y2hlcztcbiAgICB9KTtcbiAgfVxuXG59XG5tZE1lZGlhRmFjdG9yeS4kaW5qZWN0ID0gW1wiJG1kQ29uc3RhbnRcIiwgXCIkcm9vdFNjb3BlXCIsIFwiJHdpbmRvd1wiXTtcblxuLyohXG4gKiBBbmd1bGFyIE1hdGVyaWFsIERlc2lnblxuICogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvbWF0ZXJpYWxcbiAqIEBsaWNlbnNlIE1JVFxuICogdjAuNy4xXG4gKi9cbihmdW5jdGlvbigpIHtcbid1c2Ugc3RyaWN0JztcblxuLypcbiAqIFRoaXMgdmFyIGhhcyB0byBiZSBvdXRzaWRlIHRoZSBhbmd1bGFyIGZhY3RvcnksIG90aGVyd2lzZSB3aGVuXG4gKiB0aGVyZSBhcmUgbXVsdGlwbGUgbWF0ZXJpYWwgYXBwcyBvbiB0aGUgc2FtZSBwYWdlLCBlYWNoIGFwcFxuICogd2lsbCBjcmVhdGUgaXRzIG93biBpbnN0YW5jZSBvZiB0aGlzIGFycmF5IGFuZCB0aGUgYXBwJ3MgSURzXG4gKiB3aWxsIG5vdCBiZSB1bmlxdWUuXG4gKi9cbnZhciBuZXh0VW5pcXVlSWQgPSBbJzAnLCcwJywnMCddO1xuXG5hbmd1bGFyLm1vZHVsZSgnbWF0ZXJpYWwuY29yZScpXG4uZmFjdG9yeSgnJG1kVXRpbCcsIFtcIiRkb2N1bWVudFwiLCBcIiR0aW1lb3V0XCIsIGZ1bmN0aW9uKCRkb2N1bWVudCwgJHRpbWVvdXQpIHtcbiAgdmFyIFV0aWw7XG5cbiAgcmV0dXJuIFV0aWwgPSB7XG4gICAgbm93OiB3aW5kb3cucGVyZm9ybWFuY2UgPyBhbmd1bGFyLmJpbmQod2luZG93LnBlcmZvcm1hbmNlLCB3aW5kb3cucGVyZm9ybWFuY2Uubm93KSA6IERhdGUubm93LFxuXG4gICAgZWxlbWVudFJlY3Q6IGZ1bmN0aW9uKGVsZW1lbnQsIG9mZnNldFBhcmVudCkge1xuICAgICAgdmFyIG5vZGUgPSBlbGVtZW50WzBdO1xuICAgICAgb2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50IHx8IG5vZGUub2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50LmJvZHk7XG4gICAgICBvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnRbMF0gfHwgb2Zmc2V0UGFyZW50O1xuICAgICAgdmFyIG5vZGVSZWN0ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHZhciBwYXJlbnRSZWN0ID0gb2Zmc2V0UGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogbm9kZVJlY3QubGVmdCAtIHBhcmVudFJlY3QubGVmdCArIG9mZnNldFBhcmVudC5zY3JvbGxMZWZ0LFxuICAgICAgICB0b3A6IG5vZGVSZWN0LnRvcCAtIHBhcmVudFJlY3QudG9wICsgb2Zmc2V0UGFyZW50LnNjcm9sbFRvcCxcbiAgICAgICAgd2lkdGg6IG5vZGVSZWN0LndpZHRoLFxuICAgICAgICBoZWlnaHQ6IG5vZGVSZWN0LmhlaWdodFxuICAgICAgfTtcbiAgICB9LFxuXG4gICAgZmFrZU5nTW9kZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgJGZha2U6IHRydWUsXG4gICAgICAgICRzZXRWaWV3VmFsdWU6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgdGhpcy4kdmlld1ZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgdGhpcy4kcmVuZGVyKHZhbHVlKTtcbiAgICAgICAgICB0aGlzLiR2aWV3Q2hhbmdlTGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24oY2IpIHsgY2IoKTsgfSk7XG4gICAgICAgIH0sXG4gICAgICAgICRpc0VtcHR5OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiAoJycrdmFsdWUpLmxlbmd0aCA9PT0gMDtcbiAgICAgICAgfSxcbiAgICAgICAgJHBhcnNlcnM6IFtdLFxuICAgICAgICAkZm9ybWF0dGVyczogW10sXG4gICAgICAgICR2aWV3Q2hhbmdlTGlzdGVuZXJzOiBbXSxcbiAgICAgICAgJHJlbmRlcjogYW5ndWxhci5ub29wXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24sIHRoYXQsIGFzIGxvbmcgYXMgaXQgY29udGludWVzIHRvIGJlIGludm9rZWQsIHdpbGwgbm90XG4gICAgLy8gYmUgdHJpZ2dlcmVkLiBUaGUgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgYWZ0ZXIgaXQgc3RvcHMgYmVpbmcgY2FsbGVkIGZvclxuICAgIC8vIE4gbWlsbGlzZWNvbmRzLlxuICAgIC8vIEBwYXJhbSB3YWl0IEludGVnZXIgdmFsdWUgb2YgbXNlY3MgdG8gZGVsYXkgKHNpbmNlIGxhc3QgZGVib3VuY2UgcmVzZXQpOyBkZWZhdWx0IHZhbHVlIDEwIG1zZWNzXG4gICAgLy8gQHBhcmFtIGludm9rZUFwcGx5IHNob3VsZCB0aGUgJHRpbWVvdXQgdHJpZ2dlciAkZGlnZXN0KCkgZGlydHkgY2hlY2tpbmdcbiAgICBkZWJvdW5jZTogZnVuY3Rpb24gKGZ1bmMsIHdhaXQsIHNjb3BlLCBpbnZva2VBcHBseSkge1xuICAgICAgdmFyIHRpbWVyO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgICAgICB2YXIgY29udGV4dCA9IHNjb3BlLFxuICAgICAgICAgIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXG4gICAgICAgICR0aW1lb3V0LmNhbmNlbCh0aW1lcik7XG4gICAgICAgIHRpbWVyID0gJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICB0aW1lciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuXG4gICAgICAgIH0sIHdhaXQgfHwgMTAsIGludm9rZUFwcGx5ICk7XG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBjYW4gb25seSBiZSB0cmlnZ2VyZWQgZXZlcnkgYGRlbGF5YCBtaWxsaXNlY29uZHMuXG4gICAgLy8gSW4gb3RoZXIgd29yZHMsIHRoZSBmdW5jdGlvbiB3aWxsIG5vdCBiZSBjYWxsZWQgdW5sZXNzIGl0IGhhcyBiZWVuIG1vcmVcbiAgICAvLyB0aGFuIGBkZWxheWAgbWlsbGlzZWNvbmRzIHNpbmNlIHRoZSBsYXN0IGNhbGwuXG4gICAgdGhyb3R0bGU6IGZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIGRlbGF5KSB7XG4gICAgICB2YXIgcmVjZW50O1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHRocm90dGxlZCgpIHtcbiAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgdmFyIG5vdyA9IFV0aWwubm93KCk7XG5cbiAgICAgICAgaWYgKCFyZWNlbnQgfHwgKG5vdyAtIHJlY2VudCA+IGRlbGF5KSkge1xuICAgICAgICAgIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgICAgcmVjZW50ID0gbm93O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBuZXh0VWlkLCBmcm9tIGFuZ3VsYXIuanMuXG4gICAgICogQSBjb25zaXN0ZW50IHdheSBvZiBjcmVhdGluZyB1bmlxdWUgSURzIGluIGFuZ3VsYXIuIFRoZSBJRCBpcyBhIHNlcXVlbmNlIG9mIGFscGhhIG51bWVyaWNcbiAgICAgKiBjaGFyYWN0ZXJzIHN1Y2ggYXMgJzAxMkFCQycuIFRoZSByZWFzb24gd2h5IHdlIGFyZSBub3QgdXNpbmcgc2ltcGx5IGEgbnVtYmVyIGNvdW50ZXIgaXMgdGhhdFxuICAgICAqIHRoZSBudW1iZXIgc3RyaW5nIGdldHMgbG9uZ2VyIG92ZXIgdGltZSwgYW5kIGl0IGNhbiBhbHNvIG92ZXJmbG93LCB3aGVyZSBhcyB0aGUgbmV4dElkXG4gICAgICogd2lsbCBncm93IG11Y2ggc2xvd2VyLCBpdCBpcyBhIHN0cmluZywgYW5kIGl0IHdpbGwgbmV2ZXIgb3ZlcmZsb3cuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBhbiB1bmlxdWUgYWxwaGEtbnVtZXJpYyBzdHJpbmdcbiAgICAgKi9cbiAgICBuZXh0VWlkOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpbmRleCA9IG5leHRVbmlxdWVJZC5sZW5ndGg7XG4gICAgICB2YXIgZGlnaXQ7XG5cbiAgICAgIHdoaWxlKGluZGV4KSB7XG4gICAgICAgIGluZGV4LS07XG4gICAgICAgIGRpZ2l0ID0gbmV4dFVuaXF1ZUlkW2luZGV4XS5jaGFyQ29kZUF0KDApO1xuICAgICAgICBpZiAoZGlnaXQgPT0gNTcgLyonOScqLykge1xuICAgICAgICAgIG5leHRVbmlxdWVJZFtpbmRleF0gPSAnQSc7XG4gICAgICAgICAgcmV0dXJuIG5leHRVbmlxdWVJZC5qb2luKCcnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGlnaXQgPT0gOTAgIC8qJ1onKi8pIHtcbiAgICAgICAgICBuZXh0VW5pcXVlSWRbaW5kZXhdID0gJzAnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5leHRVbmlxdWVJZFtpbmRleF0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGRpZ2l0ICsgMSk7XG4gICAgICAgICAgcmV0dXJuIG5leHRVbmlxdWVJZC5qb2luKCcnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbmV4dFVuaXF1ZUlkLnVuc2hpZnQoJzAnKTtcbiAgICAgIHJldHVybiBuZXh0VW5pcXVlSWQuam9pbignJyk7XG4gICAgfSxcblxuICAgIC8vIFN0b3Agd2F0Y2hlcnMgYW5kIGV2ZW50cyBmcm9tIGZpcmluZyBvbiBhIHNjb3BlIHdpdGhvdXQgZGVzdHJveWluZyBpdCxcbiAgICAvLyBieSBkaXNjb25uZWN0aW5nIGl0IGZyb20gaXRzIHBhcmVudCBhbmQgaXRzIHNpYmxpbmdzJyBsaW5rZWQgbGlzdHMuXG4gICAgZGlzY29ubmVjdFNjb3BlOiBmdW5jdGlvbiBkaXNjb25uZWN0U2NvcGUoc2NvcGUpIHtcbiAgICAgIGlmICghc2NvcGUpIHJldHVybjtcblxuICAgICAgLy8gd2UgY2FuJ3QgZGVzdHJveSB0aGUgcm9vdCBzY29wZSBvciBhIHNjb3BlIHRoYXQgaGFzIGJlZW4gYWxyZWFkeSBkZXN0cm95ZWRcbiAgICAgIGlmIChzY29wZS4kcm9vdCA9PT0gc2NvcGUpIHJldHVybjtcbiAgICAgIGlmIChzY29wZS4kJGRlc3Ryb3llZCApIHJldHVybjtcblxuICAgICAgdmFyIHBhcmVudCA9IHNjb3BlLiRwYXJlbnQ7XG4gICAgICBzY29wZS4kJGRpc2Nvbm5lY3RlZCA9IHRydWU7XG5cbiAgICAgIC8vIFNlZSBTY29wZS4kZGVzdHJveVxuICAgICAgaWYgKHBhcmVudC4kJGNoaWxkSGVhZCA9PT0gc2NvcGUpIHBhcmVudC4kJGNoaWxkSGVhZCA9IHNjb3BlLiQkbmV4dFNpYmxpbmc7XG4gICAgICBpZiAocGFyZW50LiQkY2hpbGRUYWlsID09PSBzY29wZSkgcGFyZW50LiQkY2hpbGRUYWlsID0gc2NvcGUuJCRwcmV2U2libGluZztcbiAgICAgIGlmIChzY29wZS4kJHByZXZTaWJsaW5nKSBzY29wZS4kJHByZXZTaWJsaW5nLiQkbmV4dFNpYmxpbmcgPSBzY29wZS4kJG5leHRTaWJsaW5nO1xuICAgICAgaWYgKHNjb3BlLiQkbmV4dFNpYmxpbmcpIHNjb3BlLiQkbmV4dFNpYmxpbmcuJCRwcmV2U2libGluZyA9IHNjb3BlLiQkcHJldlNpYmxpbmc7XG5cbiAgICAgIHNjb3BlLiQkbmV4dFNpYmxpbmcgPSBzY29wZS4kJHByZXZTaWJsaW5nID0gbnVsbDtcblxuICAgIH0sXG5cbiAgICAvLyBVbmRvIHRoZSBlZmZlY3RzIG9mIGRpc2Nvbm5lY3RTY29wZSBhYm92ZS5cbiAgICByZWNvbm5lY3RTY29wZTogZnVuY3Rpb24gcmVjb25uZWN0U2NvcGUoc2NvcGUpIHtcbiAgICAgIGlmICghc2NvcGUpIHJldHVybjtcblxuICAgICAgLy8gd2UgY2FuJ3QgZGlzY29ubmVjdCB0aGUgcm9vdCBub2RlIG9yIHNjb3BlIGFscmVhZHkgZGlzY29ubmVjdGVkXG4gICAgICBpZiAoc2NvcGUuJHJvb3QgPT09IHNjb3BlKSByZXR1cm47XG4gICAgICBpZiAoIXNjb3BlLiQkZGlzY29ubmVjdGVkKSByZXR1cm47XG5cbiAgICAgIHZhciBjaGlsZCA9IHNjb3BlO1xuXG4gICAgICB2YXIgcGFyZW50ID0gY2hpbGQuJHBhcmVudDtcbiAgICAgIGNoaWxkLiQkZGlzY29ubmVjdGVkID0gZmFsc2U7XG4gICAgICAvLyBTZWUgU2NvcGUuJG5ldyBmb3IgdGhpcyBsb2dpYy4uLlxuICAgICAgY2hpbGQuJCRwcmV2U2libGluZyA9IHBhcmVudC4kJGNoaWxkVGFpbDtcbiAgICAgIGlmIChwYXJlbnQuJCRjaGlsZEhlYWQpIHtcbiAgICAgICAgcGFyZW50LiQkY2hpbGRUYWlsLiQkbmV4dFNpYmxpbmcgPSBjaGlsZDtcbiAgICAgICAgcGFyZW50LiQkY2hpbGRUYWlsID0gY2hpbGQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJlbnQuJCRjaGlsZEhlYWQgPSBwYXJlbnQuJCRjaGlsZFRhaWwgPSBjaGlsZDtcbiAgICAgIH1cbiAgICB9LFxuICAvKlxuICAgKiBnZXRDbG9zZXN0IHJlcGxpY2F0ZXMgalF1ZXJ5LmNsb3Nlc3QoKSB0byB3YWxrIHVwIHRoZSBET00gdHJlZSB1bnRpbCBpdCBmaW5kcyBhIG1hdGNoaW5nIG5vZGVOYW1lXG4gICAqXG4gICAqIEBwYXJhbSBlbCBFbGVtZW50IHRvIHN0YXJ0IHdhbGtpbmcgdGhlIERPTSBmcm9tXG4gICAqIEBwYXJhbSB0YWdOYW1lIFRhZyBuYW1lIHRvIGZpbmQgY2xvc2VzdCB0byBlbCwgc3VjaCBhcyAnZm9ybSdcbiAgICovXG4gICAgZ2V0Q2xvc2VzdDogZnVuY3Rpb24gZ2V0Q2xvc2VzdChlbCwgdGFnTmFtZSkge1xuICAgICAgdGFnTmFtZSA9IHRhZ05hbWUudG9VcHBlckNhc2UoKTtcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKGVsLm5vZGVOYW1lID09PSB0YWdOYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIGVsO1xuICAgICAgICB9XG4gICAgICB9IHdoaWxlIChlbCA9IGVsLnBhcmVudE5vZGUpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9O1xuXG59XSk7XG5cbi8qXG4gKiBTaW5jZSByZW1vdmluZyBqUXVlcnkgZnJvbSB0aGUgZGVtb3MsIHNvbWUgY29kZSB0aGF0IHVzZXMgYGVsZW1lbnQuZm9jdXMoKWAgaXMgYnJva2VuLlxuICpcbiAqIFdlIG5lZWQgdG8gYWRkIGBlbGVtZW50LmZvY3VzKClgLCBiZWNhdXNlIGl0J3MgdGVzdGFibGUgdW5saWtlIGBlbGVtZW50WzBdLmZvY3VzYC5cbiAqXG4gKiBUT0RPKGFqb3NsaW4pOiBUaGlzIHNob3VsZCBiZSBhZGRlZCBpbiBhIGJldHRlciBwbGFjZSBsYXRlci5cbiAqL1xuXG5hbmd1bGFyLmVsZW1lbnQucHJvdG90eXBlLmZvY3VzID0gYW5ndWxhci5lbGVtZW50LnByb3RvdHlwZS5mb2N1cyB8fCBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMubGVuZ3RoKSB7XG4gICAgdGhpc1swXS5mb2N1cygpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcbmFuZ3VsYXIuZWxlbWVudC5wcm90b3R5cGUuYmx1ciA9IGFuZ3VsYXIuZWxlbWVudC5wcm90b3R5cGUuYmx1ciB8fCBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMubGVuZ3RoKSB7XG4gICAgdGhpc1swXS5ibHVyKCk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG59KSgpO1xuXG4vKiFcbiAqIEFuZ3VsYXIgTWF0ZXJpYWwgRGVzaWduXG4gKiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9tYXRlcmlhbFxuICogQGxpY2Vuc2UgTUlUXG4gKiB2MC43LjFcbiAqL1xuKGZ1bmN0aW9uKCkge1xuJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgnbWF0ZXJpYWwuY29yZScpXG4gIC5zZXJ2aWNlKCckbWRBcmlhJywgQXJpYVNlcnZpY2UpO1xuXG5mdW5jdGlvbiBBcmlhU2VydmljZSgkJHJBRiwgJGxvZywgJHdpbmRvdykge1xuXG4gIHJldHVybiB7XG4gICAgZXhwZWN0OiBleHBlY3QsXG4gICAgZXhwZWN0QXN5bmM6IGV4cGVjdEFzeW5jLFxuICAgIGV4cGVjdFdpdGhUZXh0OiBleHBlY3RXaXRoVGV4dFxuICB9O1xuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBleHBlY3RlZCBhdHRyaWJ1dGUgaGFzIGJlZW4gc3BlY2lmaWVkIG9uIHRoZSB0YXJnZXQgZWxlbWVudCBvciBjaGlsZFxuICAgKiBAcGFyYW0gZWxlbWVudFxuICAgKiBAcGFyYW0gYXR0ck5hbWVcbiAgICogQHBhcmFtIHtvcHRpb25hbH0gZGVmYXVsdFZhbHVlIFdoYXQgdG8gc2V0IHRoZSBhdHRyIHRvIGlmIG5vIHZhbHVlIGlzIGZvdW5kXG4gICAqL1xuICBmdW5jdGlvbiBleHBlY3QoZWxlbWVudCwgYXR0ck5hbWUsIGRlZmF1bHRWYWx1ZSkge1xuICAgIHZhciBub2RlID0gZWxlbWVudFswXTtcblxuICAgIGlmICghbm9kZS5oYXNBdHRyaWJ1dGUoYXR0ck5hbWUpICYmICFjaGlsZEhhc0F0dHJpYnV0ZShub2RlLCBhdHRyTmFtZSkpIHtcblxuICAgICAgZGVmYXVsdFZhbHVlID0gYW5ndWxhci5pc1N0cmluZyhkZWZhdWx0VmFsdWUpICYmIGRlZmF1bHRWYWx1ZS50cmltKCkgfHwgJyc7XG4gICAgICBpZiAoZGVmYXVsdFZhbHVlLmxlbmd0aCkge1xuICAgICAgICBlbGVtZW50LmF0dHIoYXR0ck5hbWUsIGRlZmF1bHRWYWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkbG9nLndhcm4oJ0FSSUE6IEF0dHJpYnV0ZSBcIicsIGF0dHJOYW1lLCAnXCIsIHJlcXVpcmVkIGZvciBhY2Nlc3NpYmlsaXR5LCBpcyBtaXNzaW5nIG9uIG5vZGU6Jywgbm9kZSk7XG4gICAgICB9XG5cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBleHBlY3RBc3luYyhlbGVtZW50LCBhdHRyTmFtZSwgZGVmYXVsdFZhbHVlR2V0dGVyKSB7XG4gICAgLy8gUHJvYmxlbTogd2hlbiByZXRyaWV2aW5nIHRoZSBlbGVtZW50J3MgY29udGVudHMgc3luY2hyb25vdXNseSB0byBmaW5kIHRoZSBsYWJlbCxcbiAgICAvLyB0aGUgdGV4dCBtYXkgbm90IGJlIGRlZmluZWQgeWV0IGluIHRoZSBjYXNlIG9mIGEgYmluZGluZy5cbiAgICAvLyBUaGVyZSBpcyBhIGhpZ2hlciBjaGFuY2UgdGhhdCBhIGJpbmRpbmcgd2lsbCBiZSBkZWZpbmVkIGlmIHdlIHdhaXQgb25lIGZyYW1lLlxuICAgICQkckFGKGZ1bmN0aW9uKCkge1xuICAgICAgZXhwZWN0KGVsZW1lbnQsIGF0dHJOYW1lLCBkZWZhdWx0VmFsdWVHZXR0ZXIoKSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBleHBlY3RXaXRoVGV4dChlbGVtZW50LCBhdHRyTmFtZSkge1xuICAgIGV4cGVjdEFzeW5jKGVsZW1lbnQsIGF0dHJOYW1lLCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBlbGVtZW50LnRleHQoKS50cmltKCk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBjaGlsZEhhc0F0dHJpYnV0ZShub2RlLCBhdHRyTmFtZSkge1xuICAgIHZhciBoYXNDaGlsZHJlbiA9IG5vZGUuaGFzQ2hpbGROb2RlcygpLFxuICAgICAgICBoYXNBdHRyID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiBpc0hpZGRlbihlbCkge1xuICAgICAgdmFyIHN0eWxlID0gZWwuY3VycmVudFN0eWxlID8gZWwuY3VycmVudFN0eWxlIDogJHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgICAgIHJldHVybiAoc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnKTtcbiAgICB9XG5cbiAgICBpZihoYXNDaGlsZHJlbikge1xuICAgICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZE5vZGVzO1xuICAgICAgZm9yKHZhciBpPTA7IGk8Y2hpbGRyZW4ubGVuZ3RoOyBpKyspe1xuICAgICAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgICAgaWYoY2hpbGQubm9kZVR5cGUgPT09IDEgJiYgY2hpbGQuaGFzQXR0cmlidXRlKGF0dHJOYW1lKSkge1xuICAgICAgICAgIGlmKCFpc0hpZGRlbihjaGlsZCkpe1xuICAgICAgICAgICAgaGFzQXR0ciA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBoYXNBdHRyO1xuICB9XG59XG5BcmlhU2VydmljZS4kaW5qZWN0ID0gW1wiJCRyQUZcIiwgXCIkbG9nXCIsIFwiJHdpbmRvd1wiXTtcbn0pKCk7XG5cbi8qIVxuICogQW5ndWxhciBNYXRlcmlhbCBEZXNpZ25cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL21hdGVyaWFsXG4gKiBAbGljZW5zZSBNSVRcbiAqIHYwLjcuMVxuICovXG4oZnVuY3Rpb24oKSB7XG4ndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXIubW9kdWxlKCdtYXRlcmlhbC5jb3JlJylcbiAgLnNlcnZpY2UoJyRtZENvbXBpbGVyJywgbWRDb21waWxlclNlcnZpY2UpO1xuXG5mdW5jdGlvbiBtZENvbXBpbGVyU2VydmljZSgkcSwgJGh0dHAsICRpbmplY3RvciwgJGNvbXBpbGUsICRjb250cm9sbGVyLCAkdGVtcGxhdGVDYWNoZSkge1xuICAvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG5cbiAgLypcbiAgICogQG5nZG9jIHNlcnZpY2VcbiAgICogQG5hbWUgJG1kQ29tcGlsZXJcbiAgICogQG1vZHVsZSBtYXRlcmlhbC5jb3JlXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGUgJG1kQ29tcGlsZXIgc2VydmljZSBpcyBhbiBhYnN0cmFjdGlvbiBvZiBhbmd1bGFyJ3MgY29tcGlsZXIsIHRoYXQgYWxsb3dzIHRoZSBkZXZlbG9wZXJcbiAgICogdG8gZWFzaWx5IGNvbXBpbGUgYW4gZWxlbWVudCB3aXRoIGEgdGVtcGxhdGVVcmwsIGNvbnRyb2xsZXIsIGFuZCBsb2NhbHMuXG4gICAqXG4gICAqIEB1c2FnZVxuICAgKiA8aGxqcyBsYW5nPVwianNcIj5cbiAgICogJG1kQ29tcGlsZXIuY29tcGlsZSh7XG4gICAqICAgdGVtcGxhdGVVcmw6ICdtb2RhbC5odG1sJyxcbiAgICogICBjb250cm9sbGVyOiAnTW9kYWxDdHJsJyxcbiAgICogICBsb2NhbHM6IHtcbiAgICogICAgIG1vZGFsOiBteU1vZGFsSW5zdGFuY2U7XG4gICAqICAgfVxuICAgKiB9KS50aGVuKGZ1bmN0aW9uKGNvbXBpbGVEYXRhKSB7XG4gICAqICAgY29tcGlsZURhdGEuZWxlbWVudDsgLy8gbW9kYWwuaHRtbCdzIHRlbXBsYXRlIGluIGFuIGVsZW1lbnRcbiAgICogICBjb21waWxlRGF0YS5saW5rKG15U2NvcGUpOyAvL2F0dGFjaCBjb250cm9sbGVyICYgc2NvcGUgdG8gZWxlbWVudFxuICAgKiB9KTtcbiAgICogPC9obGpzPlxuICAgKi9cblxuICAgLypcbiAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAqIEBuYW1lICRtZENvbXBpbGVyI2NvbXBpbGVcbiAgICAqIEBkZXNjcmlwdGlvbiBBIGhlbHBlciB0byBjb21waWxlIGFuIEhUTUwgdGVtcGxhdGUvdGVtcGxhdGVVcmwgd2l0aCBhIGdpdmVuIGNvbnRyb2xsZXIsXG4gICAgKiBsb2NhbHMsIGFuZCBzY29wZS5cbiAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIEFuIG9wdGlvbnMgb2JqZWN0LCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICAqXG4gICAgKiAgICAtIGBjb250cm9sbGVyYCAtIGB7KHN0cmluZz18ZnVuY3Rpb24oKT19YCBDb250cm9sbGVyIGZuIHRoYXQgc2hvdWxkIGJlIGFzc29jaWF0ZWQgd2l0aFxuICAgICogICAgICBuZXdseSBjcmVhdGVkIHNjb3BlIG9yIHRoZSBuYW1lIG9mIGEgcmVnaXN0ZXJlZCBjb250cm9sbGVyIGlmIHBhc3NlZCBhcyBhIHN0cmluZy5cbiAgICAqICAgIC0gYGNvbnRyb2xsZXJBc2AgLSBge3N0cmluZz19YCBBIGNvbnRyb2xsZXIgYWxpYXMgbmFtZS4gSWYgcHJlc2VudCB0aGUgY29udHJvbGxlciB3aWxsIGJlXG4gICAgKiAgICAgIHB1Ymxpc2hlZCB0byBzY29wZSB1bmRlciB0aGUgYGNvbnRyb2xsZXJBc2AgbmFtZS5cbiAgICAqICAgIC0gYHRlbXBsYXRlYCAtIGB7c3RyaW5nPX1gIEFuIGh0bWwgdGVtcGxhdGUgYXMgYSBzdHJpbmcuXG4gICAgKiAgICAtIGB0ZW1wbGF0ZVVybGAgLSBge3N0cmluZz19YCBBIHBhdGggdG8gYW4gaHRtbCB0ZW1wbGF0ZS5cbiAgICAqICAgIC0gYHRyYW5zZm9ybVRlbXBsYXRlYCAtIGB7ZnVuY3Rpb24odGVtcGxhdGUpPX1gIEEgZnVuY3Rpb24gd2hpY2ggdHJhbnNmb3JtcyB0aGUgdGVtcGxhdGUgYWZ0ZXJcbiAgICAqICAgICAgaXQgaXMgbG9hZGVkLiBJdCB3aWxsIGJlIGdpdmVuIHRoZSB0ZW1wbGF0ZSBzdHJpbmcgYXMgYSBwYXJhbWV0ZXIsIGFuZCBzaG91bGRcbiAgICAqICAgICAgcmV0dXJuIGEgYSBuZXcgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgdHJhbnNmb3JtZWQgdGVtcGxhdGUuXG4gICAgKiAgICAtIGByZXNvbHZlYCAtIGB7T2JqZWN0LjxzdHJpbmcsIGZ1bmN0aW9uPj19YCAtIEFuIG9wdGlvbmFsIG1hcCBvZiBkZXBlbmRlbmNpZXMgd2hpY2ggc2hvdWxkXG4gICAgKiAgICAgIGJlIGluamVjdGVkIGludG8gdGhlIGNvbnRyb2xsZXIuIElmIGFueSBvZiB0aGVzZSBkZXBlbmRlbmNpZXMgYXJlIHByb21pc2VzLCB0aGUgY29tcGlsZXJcbiAgICAqICAgICAgd2lsbCB3YWl0IGZvciB0aGVtIGFsbCB0byBiZSByZXNvbHZlZCwgb3IgaWYgb25lIGlzIHJlamVjdGVkIGJlZm9yZSB0aGUgY29udHJvbGxlciBpc1xuICAgICogICAgICBpbnN0YW50aWF0ZWQgYGNvbXBpbGUoKWAgd2lsbCBmYWlsLi5cbiAgICAqICAgICAgKiBga2V5YCAtIGB7c3RyaW5nfWA6IGEgbmFtZSBvZiBhIGRlcGVuZGVuY3kgdG8gYmUgaW5qZWN0ZWQgaW50byB0aGUgY29udHJvbGxlci5cbiAgICAqICAgICAgKiBgZmFjdG9yeWAgLSBge3N0cmluZ3xmdW5jdGlvbn1gOiBJZiBgc3RyaW5nYCB0aGVuIGl0IGlzIGFuIGFsaWFzIGZvciBhIHNlcnZpY2UuXG4gICAgKiAgICAgICAgT3RoZXJ3aXNlIGlmIGZ1bmN0aW9uLCB0aGVuIGl0IGlzIGluamVjdGVkIGFuZCB0aGUgcmV0dXJuIHZhbHVlIGlzIHRyZWF0ZWQgYXMgdGhlXG4gICAgKiAgICAgICAgZGVwZW5kZW5jeS4gSWYgdGhlIHJlc3VsdCBpcyBhIHByb21pc2UsIGl0IGlzIHJlc29sdmVkIGJlZm9yZSBpdHMgdmFsdWUgaXMgXG4gICAgKiAgICAgICAgaW5qZWN0ZWQgaW50byB0aGUgY29udHJvbGxlci5cbiAgICAqXG4gICAgKiBAcmV0dXJucyB7b2JqZWN0PX0gcHJvbWlzZSBBIHByb21pc2UsIHdoaWNoIHdpbGwgYmUgcmVzb2x2ZWQgd2l0aCBhIGBjb21waWxlRGF0YWAgb2JqZWN0LlxuICAgICogYGNvbXBpbGVEYXRhYCBoYXMgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOiBcbiAgICAqXG4gICAgKiAgIC0gYGVsZW1lbnRgIC0gYHtlbGVtZW50fWA6IGFuIHVuY29tcGlsZWQgZWxlbWVudCBtYXRjaGluZyB0aGUgcHJvdmlkZWQgdGVtcGxhdGUuXG4gICAgKiAgIC0gYGxpbmtgIC0gYHtmdW5jdGlvbihzY29wZSl9YDogQSBsaW5rIGZ1bmN0aW9uLCB3aGljaCwgd2hlbiBjYWxsZWQsIHdpbGwgY29tcGlsZVxuICAgICogICAgIHRoZSBlbGVtZW50IGFuZCBpbnN0YW50aWF0ZSB0aGUgcHJvdmlkZWQgY29udHJvbGxlciAoaWYgZ2l2ZW4pLlxuICAgICogICAtIGBsb2NhbHNgIC0gYHtvYmplY3R9YDogVGhlIGxvY2FscyB3aGljaCB3aWxsIGJlIHBhc3NlZCBpbnRvIHRoZSBjb250cm9sbGVyIG9uY2UgYGxpbmtgIGlzXG4gICAgKiAgICAgY2FsbGVkLiBJZiBgYmluZFRvQ29udHJvbGxlcmAgaXMgdHJ1ZSwgdGhleSB3aWxsIGJlIGNvcHBpZWQgdG8gdGhlIGN0cmwgaW5zdGVhZFxuICAgICogICAtIGBiaW5kVG9Db250cm9sbGVyYCAtIGBib29sYDogYmluZCB0aGUgbG9jYWxzIHRvIHRoZSBjb250cm9sbGVyLCBpbnN0ZWFkIG9mIHBhc3NpbmcgdGhlbSBpblxuICAgICovXG4gIHRoaXMuY29tcGlsZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB2YXIgdGVtcGxhdGVVcmwgPSBvcHRpb25zLnRlbXBsYXRlVXJsO1xuICAgIHZhciB0ZW1wbGF0ZSA9IG9wdGlvbnMudGVtcGxhdGUgfHwgJyc7XG4gICAgdmFyIGNvbnRyb2xsZXIgPSBvcHRpb25zLmNvbnRyb2xsZXI7XG4gICAgdmFyIGNvbnRyb2xsZXJBcyA9IG9wdGlvbnMuY29udHJvbGxlckFzO1xuICAgIHZhciByZXNvbHZlID0gb3B0aW9ucy5yZXNvbHZlIHx8IHt9O1xuICAgIHZhciBsb2NhbHMgPSBvcHRpb25zLmxvY2FscyB8fCB7fTtcbiAgICB2YXIgdHJhbnNmb3JtVGVtcGxhdGUgPSBvcHRpb25zLnRyYW5zZm9ybVRlbXBsYXRlIHx8IGFuZ3VsYXIuaWRlbnRpdHk7XG4gICAgdmFyIGJpbmRUb0NvbnRyb2xsZXIgPSBvcHRpb25zLmJpbmRUb0NvbnRyb2xsZXI7XG5cbiAgICAvLyBUYWtlIHJlc29sdmUgdmFsdWVzIGFuZCBpbnZva2UgdGhlbS4gIFxuICAgIC8vIFJlc29sdmVzIGNhbiBlaXRoZXIgYmUgYSBzdHJpbmcgKHZhbHVlOiAnTXlSZWdpc3RlcmVkQW5ndWxhckNvbnN0JyksXG4gICAgLy8gb3IgYW4gaW52b2thYmxlICdmYWN0b3J5JyBvZiBzb3J0czogKHZhbHVlOiBmdW5jdGlvbiBWYWx1ZUdldHRlcigkZGVwZW5kZW5jeSkge30pXG4gICAgYW5ndWxhci5mb3JFYWNoKHJlc29sdmUsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmIChhbmd1bGFyLmlzU3RyaW5nKHZhbHVlKSkge1xuICAgICAgICByZXNvbHZlW2tleV0gPSAkaW5qZWN0b3IuZ2V0KHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc29sdmVba2V5XSA9ICRpbmplY3Rvci5pbnZva2UodmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIC8vQWRkIHRoZSBsb2NhbHMsIHdoaWNoIGFyZSBqdXN0IHN0cmFpZ2h0IHZhbHVlcyB0byBpbmplY3RcbiAgICAvL2VnIGxvY2FsczogeyB0aHJlZTogMyB9LCB3aWxsIGluamVjdCB0aHJlZSBpbnRvIHRoZSBjb250cm9sbGVyXG4gICAgYW5ndWxhci5leHRlbmQocmVzb2x2ZSwgbG9jYWxzKTtcblxuICAgIGlmICh0ZW1wbGF0ZVVybCkge1xuICAgICAgcmVzb2x2ZS4kdGVtcGxhdGUgPSAkaHR0cC5nZXQodGVtcGxhdGVVcmwsIHtjYWNoZTogJHRlbXBsYXRlQ2FjaGV9KVxuICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzb2x2ZS4kdGVtcGxhdGUgPSAkcS53aGVuKHRlbXBsYXRlKTtcbiAgICB9XG5cbiAgICAvLyBXYWl0IGZvciBhbGwgdGhlIHJlc29sdmVzIHRvIGZpbmlzaCBpZiB0aGV5IGFyZSBwcm9taXNlc1xuICAgIHJldHVybiAkcS5hbGwocmVzb2x2ZSkudGhlbihmdW5jdGlvbihsb2NhbHMpIHtcblxuICAgICAgdmFyIHRlbXBsYXRlID0gdHJhbnNmb3JtVGVtcGxhdGUobG9jYWxzLiR0ZW1wbGF0ZSk7XG4gICAgICB2YXIgZWxlbWVudCA9IGFuZ3VsYXIuZWxlbWVudCgnPGRpdj4nKS5odG1sKHRlbXBsYXRlLnRyaW0oKSkuY29udGVudHMoKTtcbiAgICAgIHZhciBsaW5rRm4gPSAkY29tcGlsZShlbGVtZW50KTtcblxuICAgICAgLy9SZXR1cm4gYSBsaW5raW5nIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgbGF0ZXIgd2hlbiB0aGUgZWxlbWVudCBpcyByZWFkeVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbG9jYWxzOiBsb2NhbHMsXG4gICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICAgIGxpbms6IGZ1bmN0aW9uIGxpbmsoc2NvcGUpIHtcbiAgICAgICAgICBsb2NhbHMuJHNjb3BlID0gc2NvcGU7XG5cbiAgICAgICAgICAvL0luc3RhbnRpYXRlIGNvbnRyb2xsZXIgaWYgaXQgZXhpc3RzLCBiZWNhdXNlIHdlIGhhdmUgc2NvcGVcbiAgICAgICAgICBpZiAoY29udHJvbGxlcikge1xuICAgICAgICAgICAgdmFyIGN0cmwgPSAkY29udHJvbGxlcihjb250cm9sbGVyLCBsb2NhbHMpO1xuICAgICAgICAgICAgaWYgKGJpbmRUb0NvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgICAgYW5ndWxhci5leHRlbmQoY3RybCwgbG9jYWxzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vU2VlIGFuZ3VsYXItcm91dGUgc291cmNlIGZvciB0aGlzIGxvZ2ljXG4gICAgICAgICAgICBlbGVtZW50LmRhdGEoJyRuZ0NvbnRyb2xsZXJDb250cm9sbGVyJywgY3RybCk7XG4gICAgICAgICAgICBlbGVtZW50LmNoaWxkcmVuKCkuZGF0YSgnJG5nQ29udHJvbGxlckNvbnRyb2xsZXInLCBjdHJsKTtcblxuICAgICAgICAgICAgaWYgKGNvbnRyb2xsZXJBcykge1xuICAgICAgICAgICAgICBzY29wZVtjb250cm9sbGVyQXNdID0gY3RybDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gbGlua0ZuKHNjb3BlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcblxuICB9O1xufVxubWRDb21waWxlclNlcnZpY2UuJGluamVjdCA9IFtcIiRxXCIsIFwiJGh0dHBcIiwgXCIkaW5qZWN0b3JcIiwgXCIkY29tcGlsZVwiLCBcIiRjb250cm9sbGVyXCIsIFwiJHRlbXBsYXRlQ2FjaGVcIl07XG59KSgpO1xuXG4vKiFcbiAqIEFuZ3VsYXIgTWF0ZXJpYWwgRGVzaWduXG4gKiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9tYXRlcmlhbFxuICogQGxpY2Vuc2UgTUlUXG4gKiB2MC43LjFcbiAqL1xuKGZ1bmN0aW9uKCkge1xuJ3VzZSBzdHJpY3QnO1xuXG4vKlxuICogVE9ETzogQWRkIHN1cHBvcnQgZm9yIG11bHRpcGxlIGZpbmdlcnMgb24gdGhlIGBwb2ludGVyYCBvYmplY3QgKGVuYWJsZXMgcGluY2ggZ2VzdHVyZSlcbiAqL1xuXG52YXIgU1RBUlRfRVZFTlRTID0gJ21vdXNlZG93biB0b3VjaHN0YXJ0IHBvaW50ZXJkb3duJztcbnZhciBNT1ZFX0VWRU5UUyA9ICdtb3VzZW1vdmUgdG91Y2htb3ZlIHBvaW50ZXJtb3ZlJztcbnZhciBFTkRfRVZFTlRTID0gJ21vdXNldXAgbW91c2VsZWF2ZSB0b3VjaGVuZCB0b3VjaGNhbmNlbCBwb2ludGVydXAgcG9pbnRlcmNhbmNlbCc7XG52YXIgSEFORExFUlM7XG5cbmRvY3VtZW50LmNvbnRhaW5zIHx8IChkb2N1bWVudC5jb250YWlucyA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmJvZHkuY29udGFpbnMobm9kZSk7XG59KTtcblxuLy8gVE9ETyBhZGQgd2luZG93cyBwaG9uZSB0byB0aGlzXG52YXIgdXNlckFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCBuYXZpZ2F0b3IudmVuZG9yIHx8IHdpbmRvdy5vcGVyYTtcbnZhciBpc0lvcyA9IHVzZXJBZ2VudC5tYXRjaCgvaVBhZC9pKSB8fCB1c2VyQWdlbnQubWF0Y2goL2lQaG9uZS9pKSB8fCB1c2VyQWdlbnQubWF0Y2goL2lQb2QvaSk7XG52YXIgaXNBbmRyb2lkID0gdXNlckFnZW50Lm1hdGNoKC9BbmRyb2lkL2kpO1xudmFyIHNob3VsZEhpamFja0NsaWNrcyA9IGlzSW9zIHx8IGlzQW5kcm9pZDtcblxuaWYgKHNob3VsZEhpamFja0NsaWNrcykge1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGV2KSB7XG4gICAgLy8gU3BhY2UvZW50ZXIgb24gYSBidXR0b24sIGFuZCBzdWJtaXQgZXZlbnRzLCBjYW4gc2VuZCBjbGlja3NcbiAgICB2YXIgaXNLZXlDbGljayA9IGV2LmNsaWVudFggPT09IDAgJiYgZXYuY2xpZW50WSA9PT0gMDtcbiAgICBpZiAoaXNLZXlDbGljayB8fCBldi4kbWF0ZXJpYWwpIHJldHVybjtcblxuICAgIC8vIFByZXZlbnQgY2xpY2tzIHVubGVzcyB0aGV5J3JlIHNlbnQgYnkgbWF0ZXJpYWxcbiAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICB9LCB0cnVlKTtcbn1cblxuYW5ndWxhci5lbGVtZW50KGRvY3VtZW50KVxuICAub24oU1RBUlRfRVZFTlRTLCBnZXN0dXJlU3RhcnQpXG4gIC5vbihNT1ZFX0VWRU5UUywgZ2VzdHVyZU1vdmUpXG4gIC5vbihFTkRfRVZFTlRTLCBnZXN0dXJlRW5kKVxuICAvLyBGb3IgdGVzdGluZ1xuICAub24oJyQkbWRHZXN0dXJlUmVzZXQnLCBmdW5jdGlvbigpIHtcbiAgICBsYXN0UG9pbnRlciA9IHBvaW50ZXIgPSBudWxsO1xuICB9KTtcblxuLy8gVGhlIHN0YXRlIG9mIHRoZSBjdXJyZW50IGFuZCBwcmV2aW91cyAncG9pbnRlcicgKHVzZXIncyBoYW5kKVxudmFyIHBvaW50ZXIsIGxhc3RQb2ludGVyO1xuXG5mdW5jdGlvbiBydW5IYW5kbGVycyhoYW5kbGVyRXZlbnQsIGV2ZW50KSB7XG4gIHZhciBoYW5kbGVyO1xuICBmb3IgKHZhciBoYW5kbGVyTmFtZSBpbiBIQU5ETEVSUykge1xuICAgIGhhbmRsZXIgPSBIQU5ETEVSU1toYW5kbGVyTmFtZV07XG4gICAgaWYgKGhhbmRsZXJFdmVudCA9PT0gJ3N0YXJ0Jykge1xuICAgICAgLy8gUnVuIGNhbmNlbCB0byByZXNldCBhbnkgaGFuZGxlcnMnIHN0YXRlXG4gICAgICBoYW5kbGVyLmNhbmNlbCgpO1xuICAgIH1cbiAgICBoYW5kbGVyW2hhbmRsZXJFdmVudF0oZXZlbnQsIHBvaW50ZXIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlc3R1cmVTdGFydChldikge1xuICAvLyBJZiB3ZSdyZSBhbHJlYWR5IHRvdWNoZWQgZG93biwgYWJvcnRcbiAgaWYgKHBvaW50ZXIpIHJldHVybjtcblxuICB2YXIgbm93ID0gK0RhdGUubm93KCk7XG5cbiAgLy8gaU9TICYgb2xkIGFuZHJvaWQgYnVnOiBhZnRlciBhIHRvdWNoIGV2ZW50LCBhIGNsaWNrIGV2ZW50IGlzIHNlbnQgMzUwIG1zIGxhdGVyLlxuICAvLyBJZiA8NDAwbXMgaGF2ZSBwYXNzZWQsIGRvbid0IGFsbG93IGFuIGV2ZW50IG9mIGEgZGlmZmVyZW50IHR5cGUgdGhhbiB0aGUgcHJldmlvdXMgZXZlbnRcbiAgaWYgKGxhc3RQb2ludGVyICYmICF0eXBlc01hdGNoKGV2LCBsYXN0UG9pbnRlcikgJiYgKG5vdyAtIGxhc3RQb2ludGVyLmVuZFRpbWUgPCAxNTAwKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHBvaW50ZXIgPSBtYWtlU3RhcnRQb2ludGVyKGV2KTtcblxuICBydW5IYW5kbGVycygnc3RhcnQnLCBldik7XG59XG5cbmZ1bmN0aW9uIGdlc3R1cmVNb3ZlKGV2KSB7XG4gIGlmICghcG9pbnRlciB8fCAhdHlwZXNNYXRjaChldiwgcG9pbnRlcikpIHJldHVybjtcblxuICB1cGRhdGVQb2ludGVyU3RhdGUoZXYsIHBvaW50ZXIpO1xuICBydW5IYW5kbGVycygnbW92ZScsIGV2KTtcbn1cblxuZnVuY3Rpb24gZ2VzdHVyZUVuZChldikge1xuICBpZiAoIXBvaW50ZXIgfHwgIXR5cGVzTWF0Y2goZXYsIHBvaW50ZXIpKSByZXR1cm47XG5cbiAgdXBkYXRlUG9pbnRlclN0YXRlKGV2LCBwb2ludGVyKTtcbiAgcG9pbnRlci5lbmRUaW1lID0gK0RhdGUubm93KCk7XG5cbiAgcnVuSGFuZGxlcnMoJ2VuZCcsIGV2KTtcblxuICBsYXN0UG9pbnRlciA9IHBvaW50ZXI7XG4gIHBvaW50ZXIgPSBudWxsO1xufVxuXG4vKioqKioqKiogSGVscGVycyAqKioqKioqKiovXG5mdW5jdGlvbiB0eXBlc01hdGNoKGV2LCBwb2ludGVyKSB7XG4gIHJldHVybiBldiAmJiBwb2ludGVyICYmIGV2LnR5cGUuY2hhckF0KDApID09PSBwb2ludGVyLnR5cGU7XG59XG5cbmZ1bmN0aW9uIGdldEV2ZW50UG9pbnQoZXYpIHtcbiAgZXYgPSBldi5vcmlnaW5hbEV2ZW50IHx8IGV2OyAvLyBzdXBwb3J0IGpRdWVyeSBldmVudHNcbiAgcmV0dXJuIChldi50b3VjaGVzICYmIGV2LnRvdWNoZXNbMF0pIHx8XG4gICAgKGV2LmNoYW5nZWRUb3VjaGVzICYmIGV2LmNoYW5nZWRUb3VjaGVzWzBdKSB8fFxuICAgIGV2O1xufVxuXG5mdW5jdGlvbiB1cGRhdGVQb2ludGVyU3RhdGUoZXYsIHBvaW50ZXIpIHtcbiAgdmFyIHBvaW50ID0gZ2V0RXZlbnRQb2ludChldik7XG4gIHZhciB4ID0gcG9pbnRlci54ID0gcG9pbnQucGFnZVg7XG4gIHZhciB5ID0gcG9pbnRlci55ID0gcG9pbnQucGFnZVk7XG5cbiAgcG9pbnRlci5kaXN0YW5jZVggPSB4IC0gcG9pbnRlci5zdGFydFg7XG4gIHBvaW50ZXIuZGlzdGFuY2VZID0geSAtIHBvaW50ZXIuc3RhcnRZO1xuICBwb2ludGVyLmRpc3RhbmNlID0gTWF0aC5zcXJ0KFxuICAgIHBvaW50ZXIuZGlzdGFuY2VYICogcG9pbnRlci5kaXN0YW5jZVggKyBwb2ludGVyLmRpc3RhbmNlWSAqIHBvaW50ZXIuZGlzdGFuY2VZXG4gICk7XG5cbiAgcG9pbnRlci5kaXJlY3Rpb25YID0gcG9pbnRlci5kaXN0YW5jZVggPiAwID8gJ3JpZ2h0JyA6IHBvaW50ZXIuZGlzdGFuY2VYIDwgMCA/ICdsZWZ0JyA6ICcnO1xuICBwb2ludGVyLmRpcmVjdGlvblkgPSBwb2ludGVyLmRpc3RhbmNlWSA+IDAgPyAndXAnIDogcG9pbnRlci5kaXN0YW5jZVkgPCAwID8gJ2Rvd24nIDogJyc7XG5cbiAgcG9pbnRlci5kdXJhdGlvbiA9ICtEYXRlLm5vdygpIC0gcG9pbnRlci5zdGFydFRpbWU7XG4gIHBvaW50ZXIudmVsb2NpdHlYID0gcG9pbnRlci5kaXN0YW5jZVggLyBwb2ludGVyLmR1cmF0aW9uO1xuICBwb2ludGVyLnZlbG9jaXR5WSA9IHBvaW50ZXIuZGlzdGFuY2VZIC8gcG9pbnRlci5kdXJhdGlvbjtcbn1cblxuXG5mdW5jdGlvbiBtYWtlU3RhcnRQb2ludGVyKGV2KSB7XG4gIHZhciBwb2ludCA9IGdldEV2ZW50UG9pbnQoZXYpO1xuICB2YXIgc3RhcnRQb2ludGVyID0ge1xuICAgIHN0YXJ0VGltZTogK0RhdGUubm93KCksXG4gICAgdGFyZ2V0OiBldi50YXJnZXQsXG4gICAgLy8gJ3AnIGZvciBwb2ludGVyLCAnbScgZm9yIG1vdXNlLCAndCcgZm9yIHRvdWNoXG4gICAgdHlwZTogZXYudHlwZS5jaGFyQXQoMClcbiAgfTtcbiAgc3RhcnRQb2ludGVyLnN0YXJ0WCA9IHN0YXJ0UG9pbnRlci54ID0gcG9pbnQucGFnZVg7XG4gIHN0YXJ0UG9pbnRlci5zdGFydFkgPSBzdGFydFBvaW50ZXIueSA9IHBvaW50LnBhZ2VZO1xuICByZXR1cm4gc3RhcnRQb2ludGVyO1xufVxuXG5hbmd1bGFyLm1vZHVsZSgnbWF0ZXJpYWwuY29yZScpXG4ucnVuKFtcIiRtZEdlc3R1cmVcIiwgZnVuY3Rpb24oJG1kR2VzdHVyZSkge31dKSAvLyBtYWtlIHN1cmUgJG1kR2VzdHVyZSBpcyBhbHdheXMgaW5zdGFudGlhdGVkXG4uZmFjdG9yeSgnJG1kR2VzdHVyZScsIFtcIiQkTWRHZXN0dXJlSGFuZGxlclwiLCBcIiQkckFGXCIsIFwiJHRpbWVvdXRcIiwgZnVuY3Rpb24oJCRNZEdlc3R1cmVIYW5kbGVyLCAkJHJBRiwgJHRpbWVvdXQpIHtcbiAgSEFORExFUlMgPSB7fTtcblxuICBpZiAoc2hvdWxkSGlqYWNrQ2xpY2tzKSB7XG4gICAgYWRkSGFuZGxlcignY2xpY2snLCB7XG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIG1heERpc3RhbmNlOiA2XG4gICAgICB9LFxuICAgICAgb25FbmQ6IGZ1bmN0aW9uKGV2LCBwb2ludGVyKSB7XG4gICAgICAgIGlmIChwb2ludGVyLmRpc3RhbmNlIDwgdGhpcy5zdGF0ZS5vcHRpb25zLm1heERpc3RhbmNlKSB7XG4gICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2LCAnY2xpY2snLCBudWxsLCBldik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGFkZEhhbmRsZXIoJ3ByZXNzJywge1xuICAgIG9uU3RhcnQ6IGZ1bmN0aW9uKGV2LCBwb2ludGVyKSB7XG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZXYsICckbWQucHJlc3Nkb3duJyk7XG4gICAgfSxcbiAgICBvbkVuZDogZnVuY3Rpb24oZXYsIHBvaW50ZXIpIHtcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChldiwgJyRtZC5wcmVzc3VwJyk7XG4gICAgfVxuICB9KTtcblxuXG4gIGFkZEhhbmRsZXIoJ2hvbGQnLCB7XG4gICAgb3B0aW9uczoge1xuICAgICAgLy8gSWYgdGhlIHVzZXIga2VlcHMgaGlzIGZpbmdlciB3aXRoaW4gdGhlIHNhbWUgPG1heERpc3RhbmNlPiBhcmVhIGZvclxuICAgICAgLy8gPGRlbGF5PiBtcywgZGlzcGF0Y2ggYSBob2xkIGV2ZW50LlxuICAgICAgbWF4RGlzdGFuY2U6IDYsXG4gICAgICBkZWxheTogNTAwLFxuICAgIH0sXG4gICAgb25DYW5jZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgJHRpbWVvdXQuY2FuY2VsKHRoaXMuc3RhdGUudGltZW91dCk7XG4gICAgfSxcbiAgICBvblN0YXJ0OiBmdW5jdGlvbihldiwgcG9pbnRlcikge1xuICAgICAgLy8gRm9yIGhvbGQsIHJlcXVpcmUgYSBwYXJlbnQgdG8gYmUgcmVnaXN0ZXJlZCB3aXRoICRtZEdlc3R1cmUucmVnaXN0ZXIoKVxuICAgICAgLy8gQmVjYXVzZSB3ZSBwcmV2ZW50IHNjcm9sbCBldmVudHMsIHRoaXMgaXMgbmVjZXNzYXJ5LlxuICAgICAgaWYgKCF0aGlzLnN0YXRlLnJlZ2lzdGVyZWRQYXJlbnQpIHJldHVybiB0aGlzLmNhbmNlbCgpO1xuXG4gICAgICB0aGlzLnN0YXRlLnBvcyA9IHt4OiBwb2ludGVyLngsIHk6IHBvaW50ZXIueX07XG4gICAgICB0aGlzLnN0YXRlLnRpbWVvdXQgPSAkdGltZW91dChhbmd1bGFyLmJpbmQodGhpcywgZnVuY3Rpb24gaG9sZERlbGF5Rm4oKSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChldiwgJyRtZC5ob2xkJyk7XG4gICAgICAgIHRoaXMuY2FuY2VsKCk7IC8vd2UncmUgZG9uZSFcbiAgICAgIH0pLCB0aGlzLnN0YXRlLm9wdGlvbnMuZGVsYXksIGZhbHNlKTtcbiAgICB9LFxuICAgIG9uTW92ZTogZnVuY3Rpb24oZXYsIHBvaW50ZXIpIHtcbiAgICAgIC8vIERvbid0IHNjcm9sbCB3aGlsZSB3YWl0aW5nIGZvciBob2xkXG4gICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdmFyIGR4ID0gdGhpcy5zdGF0ZS5wb3MueCAtIHBvaW50ZXIueDtcbiAgICAgIHZhciBkeSA9IHRoaXMuc3RhdGUucG9zLnkgLSBwb2ludGVyLnk7XG4gICAgICBpZiAoTWF0aC5zcXJ0KGR4KmR4ICsgZHkqZHkpID4gdGhpcy5vcHRpb25zLm1heERpc3RhbmNlKSB7XG4gICAgICAgIHRoaXMuY2FuY2VsKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBvbkVuZDogZnVuY3Rpb24oZXYsIHBvaW50ZXIpIHtcbiAgICAgIHRoaXMub25DYW5jZWwoKTtcbiAgICB9LFxuICB9KTtcblxuICBhZGRIYW5kbGVyKCdkcmFnJywge1xuICAgIG9wdGlvbnM6IHtcbiAgICAgIG1pbkRpc3RhbmNlOiA2LFxuICAgICAgaG9yaXpvbnRhbDogdHJ1ZSxcbiAgICB9LFxuICAgIG9uU3RhcnQ6IGZ1bmN0aW9uKGV2KSB7XG4gICAgICAvLyBGb3IgZHJhZywgcmVxdWlyZSBhIHBhcmVudCB0byBiZSByZWdpc3RlcmVkIHdpdGggJG1kR2VzdHVyZS5yZWdpc3RlcigpXG4gICAgICBpZiAoIXRoaXMuc3RhdGUucmVnaXN0ZXJlZFBhcmVudCkgdGhpcy5jYW5jZWwoKTtcbiAgICB9LFxuICAgIG9uTW92ZTogZnVuY3Rpb24oZXYsIHBvaW50ZXIpIHtcbiAgICAgIHZhciBzaG91bGRTdGFydERyYWcsIHNob3VsZENhbmNlbDtcbiAgICAgIC8vIERvbid0IGFsbG93IHRvdWNoIGV2ZW50cyB0byBzY3JvbGwgd2hpbGUgd2UncmUgZHJhZ2dpbmcgb3JcbiAgICAgIC8vIGRlY2lkaW5nIGlmIHRoaXMgdG91Y2htb3ZlIGlzIGEgcHJvcGVyIGRyYWdcbiAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIGlmICghdGhpcy5zdGF0ZS5kcmFnUG9pbnRlcikge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5vcHRpb25zLmhvcml6b250YWwpIHtcbiAgICAgICAgICBzaG91bGRTdGFydERyYWcgPSBNYXRoLmFicyhwb2ludGVyLmRpc3RhbmNlWCkgPiB0aGlzLnN0YXRlLm9wdGlvbnMubWluRGlzdGFuY2U7XG4gICAgICAgICAgc2hvdWxkQ2FuY2VsID0gTWF0aC5hYnMocG9pbnRlci5kaXN0YW5jZVkpID4gdGhpcy5zdGF0ZS5vcHRpb25zLm1pbkRpc3RhbmNlICogMS41O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNob3VsZFN0YXJ0RHJhZyA9IE1hdGguYWJzKHBvaW50ZXIuZGlzdGFuY2VZKSA+IHRoaXMuc3RhdGUub3B0aW9ucy5taW5EaXN0YW5jZTtcbiAgICAgICAgICBzaG91bGRDYW5jZWwgPSBNYXRoLmFicyhwb2ludGVyLmRpc3RhbmNlWCkgPiB0aGlzLnN0YXRlLm9wdGlvbnMubWluRGlzdGFuY2UgKiAxLjU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hvdWxkU3RhcnREcmFnKSB7XG4gICAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IHBvaW50ZXIsIHN0YXJ0aW5nIGF0IHRoaXMgcG9pbnQgd2hlcmUgdGhlIGRyYWcgc3RhcnRlZC5cbiAgICAgICAgICB0aGlzLnN0YXRlLmRyYWdQb2ludGVyID0gbWFrZVN0YXJ0UG9pbnRlcihldik7XG4gICAgICAgICAgdXBkYXRlUG9pbnRlclN0YXRlKGV2LCB0aGlzLnN0YXRlLmRyYWdQb2ludGVyKTtcbiAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZXYsICckbWQuZHJhZ3N0YXJ0JywgdGhpcy5zdGF0ZS5kcmFnUG9pbnRlcik7XG5cbiAgICAgICAgfSBlbHNlIGlmIChzaG91bGRDYW5jZWwpIHtcbiAgICAgICAgICB0aGlzLmNhbmNlbCgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmRpc3BhdGNoRHJhZ01vdmUoZXYpO1xuICAgICAgfVxuICAgIH0sXG4gICAgLy8gT25seSBkaXNwYXRjaCB0aGVzZSBldmVyeSBmcmFtZTsgYW55IG1vcmUgaXMgdW5uZWNlc3NyYXlcbiAgICBkaXNwYXRjaERyYWdNb3ZlOiAkJHJBRi50aHJvdHRsZShmdW5jdGlvbihldikge1xuICAgICAgLy8gTWFrZSBzdXJlIHRoZSBkcmFnIGRpZG4ndCBzdG9wIHdoaWxlIHdhaXRpbmcgZm9yIHRoZSBuZXh0IGZyYW1lXG4gICAgICBpZiAodGhpcy5zdGF0ZS5pc1J1bm5pbmcpIHtcbiAgICAgICAgdXBkYXRlUG9pbnRlclN0YXRlKGV2LCB0aGlzLnN0YXRlLmRyYWdQb2ludGVyKTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2LCAnJG1kLmRyYWcnLCB0aGlzLnN0YXRlLmRyYWdQb2ludGVyKTtcbiAgICAgIH1cbiAgICB9KSxcbiAgICBvbkVuZDogZnVuY3Rpb24oZXYsIHBvaW50ZXIpIHtcbiAgICAgIGlmICh0aGlzLnN0YXRlLmRyYWdQb2ludGVyKSB7XG4gICAgICAgIHVwZGF0ZVBvaW50ZXJTdGF0ZShldiwgdGhpcy5zdGF0ZS5kcmFnUG9pbnRlcik7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChldiwgJyRtZC5kcmFnZW5kJywgdGhpcy5zdGF0ZS5kcmFnUG9pbnRlcik7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBhZGRIYW5kbGVyKCdzd2lwZScsIHtcbiAgICBvcHRpb25zOiB7XG4gICAgICBtaW5WZWxvY2l0eTogMC42NSxcbiAgICAgIG1pbkRpc3RhbmNlOiAxMCxcbiAgICB9LFxuICAgIG9uRW5kOiBmdW5jdGlvbihldiwgcG9pbnRlcikge1xuICAgICAgaWYgKE1hdGguYWJzKHBvaW50ZXIudmVsb2NpdHlYKSA+IHRoaXMuc3RhdGUub3B0aW9ucy5taW5WZWxvY2l0eSAmJlxuICAgICAgICAgIE1hdGguYWJzKHBvaW50ZXIuZGlzdGFuY2VYKSA+IHRoaXMuc3RhdGUub3B0aW9ucy5taW5EaXN0YW5jZSkge1xuICAgICAgICB2YXIgZXZlbnRUeXBlID0gcG9pbnRlci5kaXJlY3Rpb25YID09ICdsZWZ0JyA/ICckbWQuc3dpcGVsZWZ0JyA6ICckbWQuc3dpcGVyaWdodCc7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChldiwgZXZlbnRUeXBlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHZhciBzZWxmO1xuICByZXR1cm4gc2VsZiA9IHtcbiAgICBoYW5kbGVyOiBhZGRIYW5kbGVyLFxuICAgIHJlZ2lzdGVyOiByZWdpc3RlclxuICB9O1xuXG4gIGZ1bmN0aW9uIGFkZEhhbmRsZXIobmFtZSwgZGVmaW5pdGlvbikge1xuICAgIHZhciBoYW5kbGVyID0gbmV3ICQkTWRHZXN0dXJlSGFuZGxlcihuYW1lKTtcbiAgICBhbmd1bGFyLmV4dGVuZChoYW5kbGVyLCBkZWZpbml0aW9uKTtcbiAgICBIQU5ETEVSU1tuYW1lXSA9IGhhbmRsZXI7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH1cblxuICBmdW5jdGlvbiByZWdpc3RlcihlbGVtZW50LCBoYW5kbGVyTmFtZSwgb3B0aW9ucykge1xuICAgIHZhciBoYW5kbGVyID0gSEFORExFUlNbIGhhbmRsZXJOYW1lLnJlcGxhY2UoL15cXCRtZC4vLCAnJykgXTtcbiAgICBpZiAoIWhhbmRsZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIHJlZ2lzdGVyIGVsZW1lbnQgd2l0aCBoYW5kbGVyICcgKyBoYW5kbGVyTmFtZSArICcuICcgK1xuICAgICAgICAgICAgICAgICAgICAgICdBdmFpbGFibGUgaGFuZGxlcnM6ICcgKyBPYmplY3Qua2V5cyhIQU5ETEVSUykuam9pbignLCAnKSk7XG4gICAgfVxuICAgIHJldHVybiBoYW5kbGVyLnJlZ2lzdGVyRWxlbWVudChlbGVtZW50LCBvcHRpb25zKTtcbiAgfVxufV0pXG4uZmFjdG9yeSgnJCRNZEdlc3R1cmVIYW5kbGVyJywgW1wiJCRyQUZcIiwgZnVuY3Rpb24oJCRyQUYpIHtcblxuICBmdW5jdGlvbiBHZXN0dXJlSGFuZGxlcihuYW1lKSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLnN0YXRlID0ge307XG4gIH1cbiAgR2VzdHVyZUhhbmRsZXIucHJvdG90eXBlID0ge1xuICAgIG9uU3RhcnQ6IGFuZ3VsYXIubm9vcCxcbiAgICBvbk1vdmU6IGFuZ3VsYXIubm9vcCxcbiAgICBvbkVuZDogYW5ndWxhci5ub29wLFxuICAgIG9uQ2FuY2VsOiBhbmd1bGFyLm5vb3AsXG4gICAgb3B0aW9uczoge30sXG5cbiAgICBkaXNwYXRjaEV2ZW50OiBkaXNwYXRjaEV2ZW50LFxuXG4gICAgc3RhcnQ6IGZ1bmN0aW9uKGV2LCBwb2ludGVyKSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZS5pc1J1bm5pbmcpIHJldHVybjtcbiAgICAgIHZhciBwYXJlbnRUYXJnZXQgPSB0aGlzLmdldE5lYXJlc3RQYXJlbnQoZXYudGFyZ2V0KTtcbiAgICAgIHZhciBwYXJlbnRUYXJnZXRPcHRpb25zID0gcGFyZW50VGFyZ2V0ICYmIHBhcmVudFRhcmdldC4kbWRHZXN0dXJlW3RoaXMubmFtZV0gfHwge307XG5cbiAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgIGlzUnVubmluZzogdHJ1ZSxcbiAgICAgICAgb3B0aW9uczogYW5ndWxhci5leHRlbmQoe30sIHRoaXMub3B0aW9ucywgcGFyZW50VGFyZ2V0T3B0aW9ucyksXG4gICAgICAgIHJlZ2lzdGVyZWRQYXJlbnQ6IHBhcmVudFRhcmdldFxuICAgICAgfTtcbiAgICAgIHRoaXMub25TdGFydChldiwgcG9pbnRlcik7XG4gICAgfSxcbiAgICBtb3ZlOiBmdW5jdGlvbihldiwgcG9pbnRlcikge1xuICAgICAgaWYgKCF0aGlzLnN0YXRlLmlzUnVubmluZykgcmV0dXJuO1xuICAgICAgdGhpcy5vbk1vdmUoZXYsIHBvaW50ZXIpO1xuICAgIH0sXG4gICAgZW5kOiBmdW5jdGlvbihldiwgcG9pbnRlcikge1xuICAgICAgaWYgKCF0aGlzLnN0YXRlLmlzUnVubmluZykgcmV0dXJuO1xuICAgICAgdGhpcy5vbkVuZChldiwgcG9pbnRlcik7XG4gICAgICB0aGlzLnN0YXRlLmlzUnVubmluZyA9IGZhbHNlO1xuICAgIH0sXG4gICAgY2FuY2VsOiBmdW5jdGlvbihldiwgcG9pbnRlcikge1xuICAgICAgdGhpcy5vbkNhbmNlbChldiwgcG9pbnRlcik7XG4gICAgICB0aGlzLnN0YXRlID0ge307XG4gICAgfSxcblxuICAgIC8vIEZpbmQgYW5kIHJldHVybiB0aGUgbmVhcmVzdCBwYXJlbnQgZWxlbWVudCB0aGF0IGhhcyBiZWVuIHJlZ2lzdGVyZWQgdmlhXG4gICAgLy8gJG1kR2VzdHVyZS5yZWdpc3RlcihlbGVtZW50LCAnaGFuZGxlck5hbWUnKS5cbiAgICBnZXROZWFyZXN0UGFyZW50OiBmdW5jdGlvbihub2RlKSB7XG4gICAgICB2YXIgY3VycmVudCA9IG5vZGU7XG4gICAgICB3aGlsZSAoY3VycmVudCkge1xuICAgICAgICBpZiAoIChjdXJyZW50LiRtZEdlc3R1cmUgfHwge30pW3RoaXMubmFtZV0gKSB7XG4gICAgICAgICAgcmV0dXJuIGN1cnJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucGFyZW50Tm9kZTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVnaXN0ZXJFbGVtZW50OiBmdW5jdGlvbihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICBlbGVtZW50WzBdLiRtZEdlc3R1cmUgPSBlbGVtZW50WzBdLiRtZEdlc3R1cmUgfHwge307XG4gICAgICBlbGVtZW50WzBdLiRtZEdlc3R1cmVbdGhpcy5uYW1lXSA9IG9wdGlvbnMgfHwge307XG4gICAgICBlbGVtZW50Lm9uKCckZGVzdHJveScsIG9uRGVzdHJveSk7XG5cbiAgICAgIHJldHVybiBvbkRlc3Ryb3k7XG4gICAgICBcbiAgICAgIGZ1bmN0aW9uIG9uRGVzdHJveSgpIHtcbiAgICAgICAgZGVsZXRlIGVsZW1lbnRbMF0uJG1kR2VzdHVyZVtzZWxmLm5hbWVdO1xuICAgICAgICBlbGVtZW50Lm9mZignJGRlc3Ryb3knLCBvbkRlc3Ryb3kpO1xuICAgICAgfVxuICAgIH0sXG4gIH07XG5cbiAgdmFyIGN1c3RvbUV2ZW50T3B0aW9ucyA9IHtcbiAgICBidWJibGVzOiB0cnVlLFxuICAgIGNhbmNlbGFibGU6IHRydWVcbiAgfTtcbiAgLypcbiAgICogTk9URTogZGlzcGF0Y2hFdmVudCBpcyB2ZXJ5IHBlcmZvcm1hbmNlIHNlbnNpdGl2ZS4gXG4gICAqL1xuICBmdW5jdGlvbiBkaXNwYXRjaEV2ZW50KHNyY0V2ZW50LCBldmVudFR5cGUsIGV2ZW50UG9pbnRlciwgLypvcmlnaW5hbCBET01FdmVudCAqL2V2KSB7XG4gICAgZXZlbnRQb2ludGVyID0gZXZlbnRQb2ludGVyIHx8IHBvaW50ZXI7XG4gICAgdmFyIGV2ZW50T2JqO1xuXG4gICAgaWYgKGV2ZW50VHlwZSA9PT0gJ2NsaWNrJykge1xuICAgICAgZXZlbnRPYmogPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnTW91c2VFdmVudHMnKTtcbiAgICAgIGV2ZW50T2JqLmluaXRNb3VzZUV2ZW50KFxuICAgICAgICAnY2xpY2snLCB0cnVlLCB0cnVlLCB3aW5kb3csIGV2LmRldGFpbCxcbiAgICAgICAgZXYuc2NyZWVuWCwgZXYuc2NyZWVuWSwgZXYuY2xpZW50WCwgZXYuY2xpZW50WSwgXG4gICAgICAgIGV2LmN0cmxLZXksIGV2LmFsdEtleSwgZXYuc2hpZnRLZXksIGV2Lm1ldGFLZXksXG4gICAgICAgIGV2LmJ1dHRvbiwgZXYucmVsYXRlZFRhcmdldCB8fCBudWxsXG4gICAgICApO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIGV2ZW50T2JqID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0N1c3RvbUV2ZW50Jyk7XG4gICAgICBldmVudE9iai5pbml0Q3VzdG9tRXZlbnQoZXZlbnRUeXBlLCB0cnVlLCB0cnVlLCB7fSk7XG4gICAgfVxuICAgIGV2ZW50T2JqLiRtYXRlcmlhbCA9IHRydWU7XG4gICAgZXZlbnRPYmoucG9pbnRlciA9IGV2ZW50UG9pbnRlcjtcbiAgICBldmVudE9iai5zcmNFdmVudCA9IHNyY0V2ZW50O1xuICAgIGV2ZW50UG9pbnRlci50YXJnZXQuZGlzcGF0Y2hFdmVudChldmVudE9iaik7XG4gIH1cblxuICByZXR1cm4gR2VzdHVyZUhhbmRsZXI7XG59XSk7XG5cbn0pKCk7XG5cbi8qIVxuICogQW5ndWxhciBNYXRlcmlhbCBEZXNpZ25cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL21hdGVyaWFsXG4gKiBAbGljZW5zZSBNSVRcbiAqIHYwLjcuMVxuICovXG4oZnVuY3Rpb24oKSB7XG4ndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXIubW9kdWxlKCdtYXRlcmlhbC5jb3JlJylcbiAgLnByb3ZpZGVyKCckJGludGVyaW1FbGVtZW50JywgSW50ZXJpbUVsZW1lbnRQcm92aWRlcik7XG5cbi8qXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJCRpbnRlcmltRWxlbWVudFxuICogQG1vZHVsZSBtYXRlcmlhbC5jb3JlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogRmFjdG9yeSB0aGF0IGNvbnRydWN0cyBgJCRpbnRlcmltRWxlbWVudC4kc2VydmljZWAgc2VydmljZXMuXG4gKiBVc2VkIGludGVybmFsbHkgaW4gbWF0ZXJpYWwgZGVzaWduIGZvciBlbGVtZW50cyB0aGF0IGFwcGVhciBvbiBzY3JlZW4gdGVtcG9yYXJpbHkuXG4gKiBUaGUgc2VydmljZSBwcm92aWRlcyBhIHByb21pc2UtbGlrZSBBUEkgZm9yIGludGVyYWN0aW5nIHdpdGggdGhlIHRlbXBvcmFyeVxuICogZWxlbWVudHMuXG4gKlxuICogYGBganNcbiAqIGFwcC5zZXJ2aWNlKCckbWRUb2FzdCcsIGZ1bmN0aW9uKCQkaW50ZXJpbUVsZW1lbnQpIHtcbiAqICAgdmFyICRtZFRvYXN0ID0gJCRpbnRlcmltRWxlbWVudCh0b2FzdERlZmF1bHRPcHRpb25zKTtcbiAqICAgcmV0dXJuICRtZFRvYXN0O1xuICogfSk7XG4gKiBgYGBcbiAqIEBwYXJhbSB7b2JqZWN0PX0gZGVmYXVsdE9wdGlvbnMgT3B0aW9ucyB1c2VkIGJ5IGRlZmF1bHQgZm9yIHRoZSBgc2hvd2AgbWV0aG9kIG9uIHRoZSBzZXJ2aWNlLlxuICpcbiAqIEByZXR1cm5zIHskJGludGVyaW1FbGVtZW50LiRzZXJ2aWNlfVxuICpcbiAqL1xuXG5mdW5jdGlvbiBJbnRlcmltRWxlbWVudFByb3ZpZGVyKCkge1xuICBjcmVhdGVJbnRlcmltRWxlbWVudFByb3ZpZGVyLiRnZXQgPSBJbnRlcmltRWxlbWVudEZhY3Rvcnk7XG4gIEludGVyaW1FbGVtZW50RmFjdG9yeS4kaW5qZWN0ID0gW1wiJGRvY3VtZW50XCIsIFwiJHFcIiwgXCIkcm9vdFNjb3BlXCIsIFwiJHRpbWVvdXRcIiwgXCIkcm9vdEVsZW1lbnRcIiwgXCIkYW5pbWF0ZVwiLCBcIiRpbnRlcnBvbGF0ZVwiLCBcIiRtZENvbXBpbGVyXCIsIFwiJG1kVGhlbWluZ1wiXTtcbiAgcmV0dXJuIGNyZWF0ZUludGVyaW1FbGVtZW50UHJvdmlkZXI7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBuZXcgcHJvdmlkZXIgd2hpY2ggYWxsb3dzIGNvbmZpZ3VyYXRpb24gb2YgYSBuZXcgaW50ZXJpbUVsZW1lbnRcbiAgICogc2VydmljZS4gQWxsb3dzIGNvbmZpZ3VyYXRpb24gb2YgZGVmYXVsdCBvcHRpb25zICYgbWV0aG9kcyBmb3Igb3B0aW9ucyxcbiAgICogYXMgd2VsbCBhcyBjb25maWd1cmF0aW9uIG9mICdwcmVzZXQnIG1ldGhvZHMgKGVnIGRpYWxvZy5iYXNpYygpOiBiYXNpYyBpcyBhIHByZXNldCBtZXRob2QpXG4gICAqL1xuICBmdW5jdGlvbiBjcmVhdGVJbnRlcmltRWxlbWVudFByb3ZpZGVyKGludGVyaW1GYWN0b3J5TmFtZSkge1xuICAgIHZhciBFWFBPU0VEX01FVEhPRFMgPSBbJ29uSGlkZScsICdvblNob3cnLCAnb25SZW1vdmUnXTtcbiAgICB2YXIgcHJvdmlkZXJDb25maWcgPSB7XG4gICAgICBwcmVzZXRzOiB7fVxuICAgIH07XG4gICAgdmFyIHByb3ZpZGVyID0ge1xuICAgICAgc2V0RGVmYXVsdHM6IHNldERlZmF1bHRzLFxuICAgICAgYWRkUHJlc2V0OiBhZGRQcmVzZXQsXG4gICAgICAkZ2V0OiBmYWN0b3J5XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIGFsbCBpbnRlcmltIGVsZW1lbnRzIHdpbGwgY29tZSB3aXRoIHRoZSAnYnVpbGQnIHByZXNldFxuICAgICAqL1xuICAgIHByb3ZpZGVyLmFkZFByZXNldCgnYnVpbGQnLCB7XG4gICAgICBtZXRob2RzOiBbJ2NvbnRyb2xsZXInLCAnY29udHJvbGxlckFzJywgJ3Jlc29sdmUnLFxuICAgICAgICAndGVtcGxhdGUnLCAndGVtcGxhdGVVcmwnLCAndGhlbWFibGUnLCAndHJhbnNmb3JtVGVtcGxhdGUnLCAncGFyZW50J11cbiAgICB9KTtcblxuICAgIGZhY3RvcnkuJGluamVjdCA9IFtcIiQkaW50ZXJpbUVsZW1lbnRcIiwgXCIkYW5pbWF0ZVwiLCBcIiRpbmplY3RvclwiXTtcbiAgICByZXR1cm4gcHJvdmlkZXI7XG5cbiAgICAvKipcbiAgICAgKiBTYXZlIHRoZSBjb25maWd1cmVkIGRlZmF1bHRzIHRvIGJlIHVzZWQgd2hlbiB0aGUgZmFjdG9yeSBpcyBpbnN0YW50aWF0ZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXREZWZhdWx0cyhkZWZpbml0aW9uKSB7XG4gICAgICBwcm92aWRlckNvbmZpZy5vcHRpb25zRmFjdG9yeSA9IGRlZmluaXRpb24ub3B0aW9ucztcbiAgICAgIHByb3ZpZGVyQ29uZmlnLm1ldGhvZHMgPSAoZGVmaW5pdGlvbi5tZXRob2RzIHx8IFtdKS5jb25jYXQoRVhQT1NFRF9NRVRIT0RTKTtcbiAgICAgIHJldHVybiBwcm92aWRlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTYXZlIHRoZSBjb25maWd1cmVkIHByZXNldCB0byBiZSB1c2VkIHdoZW4gdGhlIGZhY3RvcnkgaXMgaW5zdGFudGlhdGVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWRkUHJlc2V0KG5hbWUsIGRlZmluaXRpb24pIHtcbiAgICAgIGRlZmluaXRpb24gPSBkZWZpbml0aW9uIHx8IHt9O1xuICAgICAgZGVmaW5pdGlvbi5tZXRob2RzID0gZGVmaW5pdGlvbi5tZXRob2RzIHx8IFtdO1xuICAgICAgZGVmaW5pdGlvbi5vcHRpb25zID0gZGVmaW5pdGlvbi5vcHRpb25zIHx8IGZ1bmN0aW9uKCkgeyByZXR1cm4ge307IH07XG5cbiAgICAgIGlmICgvXmNhbmNlbHxoaWRlfHNob3ckLy50ZXN0KG5hbWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlByZXNldCAnXCIgKyBuYW1lICsgXCInIGluIFwiICsgaW50ZXJpbUZhY3RvcnlOYW1lICsgXCIgaXMgcmVzZXJ2ZWQhXCIpO1xuICAgICAgfVxuICAgICAgaWYgKGRlZmluaXRpb24ubWV0aG9kcy5pbmRleE9mKCdfb3B0aW9ucycpID4gLTEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kICdfb3B0aW9ucycgaW4gXCIgKyBpbnRlcmltRmFjdG9yeU5hbWUgKyBcIiBpcyByZXNlcnZlZCFcIik7XG4gICAgICB9XG4gICAgICBwcm92aWRlckNvbmZpZy5wcmVzZXRzW25hbWVdID0ge1xuICAgICAgICBtZXRob2RzOiBkZWZpbml0aW9uLm1ldGhvZHMuY29uY2F0KEVYUE9TRURfTUVUSE9EUyksXG4gICAgICAgIG9wdGlvbnNGYWN0b3J5OiBkZWZpbml0aW9uLm9wdGlvbnMsXG4gICAgICAgIGFyZ09wdGlvbjogZGVmaW5pdGlvbi5hcmdPcHRpb25cbiAgICAgIH07XG4gICAgICByZXR1cm4gcHJvdmlkZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgZmFjdG9yeSB0aGF0IGhhcyB0aGUgZ2l2ZW4gbWV0aG9kcyAmIGRlZmF1bHRzIGltcGxlbWVudGluZyBpbnRlcmltRWxlbWVudFxuICAgICAqL1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGZhY3RvcnkoJCRpbnRlcmltRWxlbWVudCwgJGFuaW1hdGUsICRpbmplY3Rvcikge1xuICAgICAgdmFyIGRlZmF1bHRNZXRob2RzO1xuICAgICAgdmFyIGRlZmF1bHRPcHRpb25zO1xuICAgICAgdmFyIGludGVyaW1FbGVtZW50U2VydmljZSA9ICQkaW50ZXJpbUVsZW1lbnQoKTtcblxuICAgICAgLypcbiAgICAgICAqIHB1YmxpY1NlcnZpY2UgaXMgd2hhdCB0aGUgZGV2ZWxvcGVyIHdpbGwgYmUgdXNpbmcuXG4gICAgICAgKiBJdCBoYXMgbWV0aG9kcyBoaWRlKCksIGNhbmNlbCgpLCBzaG93KCksIGJ1aWxkKCksIGFuZCBhbnkgb3RoZXJcbiAgICAgICAqIHByZXNldHMgd2hpY2ggd2VyZSBzZXQgZHVyaW5nIHRoZSBjb25maWcgcGhhc2UuXG4gICAgICAgKi9cbiAgICAgIHZhciBwdWJsaWNTZXJ2aWNlID0ge1xuICAgICAgICBoaWRlOiBpbnRlcmltRWxlbWVudFNlcnZpY2UuaGlkZSxcbiAgICAgICAgY2FuY2VsOiBpbnRlcmltRWxlbWVudFNlcnZpY2UuY2FuY2VsLFxuICAgICAgICBzaG93OiBzaG93SW50ZXJpbUVsZW1lbnRcbiAgICAgIH07XG5cbiAgICAgIGRlZmF1bHRNZXRob2RzID0gcHJvdmlkZXJDb25maWcubWV0aG9kcyB8fCBbXTtcbiAgICAgIC8vIFRoaXMgbXVzdCBiZSBpbnZva2VkIGFmdGVyIHRoZSBwdWJsaWNTZXJ2aWNlIGlzIGluaXRpYWxpemVkXG4gICAgICBkZWZhdWx0T3B0aW9ucyA9IGludm9rZUZhY3RvcnkocHJvdmlkZXJDb25maWcub3B0aW9uc0ZhY3RvcnksIHt9KTtcblxuICAgICAgYW5ndWxhci5mb3JFYWNoKHByb3ZpZGVyQ29uZmlnLnByZXNldHMsIGZ1bmN0aW9uKGRlZmluaXRpb24sIG5hbWUpIHtcbiAgICAgICAgdmFyIHByZXNldERlZmF1bHRzID0gaW52b2tlRmFjdG9yeShkZWZpbml0aW9uLm9wdGlvbnNGYWN0b3J5LCB7fSk7XG4gICAgICAgIHZhciBwcmVzZXRNZXRob2RzID0gKGRlZmluaXRpb24ubWV0aG9kcyB8fCBbXSkuY29uY2F0KGRlZmF1bHRNZXRob2RzKTtcblxuICAgICAgICAvLyBFdmVyeSBpbnRlcmltRWxlbWVudCBidWlsdCB3aXRoIGEgcHJlc2V0IGhhcyBhIGZpZWxkIGNhbGxlZCBgJHR5cGVgLFxuICAgICAgICAvLyB3aGljaCBtYXRjaGVzIHRoZSBuYW1lIG9mIHRoZSBwcmVzZXQuXG4gICAgICAgIC8vIEVnIGluIHByZXNldCAnY29uZmlybScsIG9wdGlvbnMuJHR5cGUgPT09ICdjb25maXJtJ1xuICAgICAgICBhbmd1bGFyLmV4dGVuZChwcmVzZXREZWZhdWx0cywgeyAkdHlwZTogbmFtZSB9KTtcblxuICAgICAgICAvLyBUaGlzIGNyZWF0ZXMgYSBwcmVzZXQgY2xhc3Mgd2hpY2ggaGFzIHNldHRlciBtZXRob2RzIGZvciBldmVyeVxuICAgICAgICAvLyBtZXRob2QgZ2l2ZW4gaW4gdGhlIGAuYWRkUHJlc2V0KClgIGZ1bmN0aW9uLCBhcyB3ZWxsIGFzIGV2ZXJ5XG4gICAgICAgIC8vIG1ldGhvZCBnaXZlbiBpbiB0aGUgYC5zZXREZWZhdWx0cygpYCBmdW5jdGlvbi5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gQGV4YW1wbGVcbiAgICAgICAgLy8gLnNldERlZmF1bHRzKHtcbiAgICAgICAgLy8gICBtZXRob2RzOiBbJ2hhc0JhY2tkcm9wJywgJ2NsaWNrT3V0c2lkZVRvQ2xvc2UnLCAnZXNjYXBlVG9DbG9zZScsICd0YXJnZXRFdmVudCddLFxuICAgICAgICAvLyAgIG9wdGlvbnM6IGRpYWxvZ0RlZmF1bHRPcHRpb25zXG4gICAgICAgIC8vIH0pXG4gICAgICAgIC8vIC5hZGRQcmVzZXQoJ2FsZXJ0Jywge1xuICAgICAgICAvLyAgIG1ldGhvZHM6IFsndGl0bGUnLCAnb2snXSxcbiAgICAgICAgLy8gICBvcHRpb25zOiBhbGVydERpYWxvZ09wdGlvbnNcbiAgICAgICAgLy8gfSlcbiAgICAgICAgLy9cbiAgICAgICAgLy8gU2V0IHZhbHVlcyB3aWxsIGJlIHBhc3NlZCB0byB0aGUgb3B0aW9ucyB3aGVuIGludGVyaW1FbGVtbnQuc2hvdygpIGlzIGNhbGxlZC5cbiAgICAgICAgZnVuY3Rpb24gUHJlc2V0KG9wdHMpIHtcbiAgICAgICAgICB0aGlzLl9vcHRpb25zID0gYW5ndWxhci5leHRlbmQoe30sIHByZXNldERlZmF1bHRzLCBvcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBhbmd1bGFyLmZvckVhY2gocHJlc2V0TWV0aG9kcywgZnVuY3Rpb24obmFtZSkge1xuICAgICAgICAgIFByZXNldC5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fb3B0aW9uc1tuYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQ3JlYXRlIHNob3J0Y3V0IG1ldGhvZCBmb3Igb25lLWxpbmVhciBtZXRob2RzXG4gICAgICAgIGlmIChkZWZpbml0aW9uLmFyZ09wdGlvbikge1xuICAgICAgICAgIHZhciBtZXRob2ROYW1lID0gJ3Nob3cnICsgbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoMSk7XG4gICAgICAgICAgcHVibGljU2VydmljZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgICAgICAgdmFyIGNvbmZpZyA9IHB1YmxpY1NlcnZpY2VbbmFtZV0oYXJnKTtcbiAgICAgICAgICAgIHJldHVybiBwdWJsaWNTZXJ2aWNlLnNob3coY29uZmlnKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZWcgJG1kRGlhbG9nLmFsZXJ0KCkgd2lsbCByZXR1cm4gYSBuZXcgYWxlcnQgcHJlc2V0XG4gICAgICAgIHB1YmxpY1NlcnZpY2VbbmFtZV0gPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgICAvLyBJZiBhcmdPcHRpb24gaXMgc3VwcGxpZWQsIGVnIGBhcmdPcHRpb246ICdjb250ZW50J2AsIHRoZW4gd2UgYXNzdW1lXG4gICAgICAgICAgLy8gaWYgdGhlIGFyZ3VtZW50IGlzIG5vdCBhbiBvcHRpb25zIG9iamVjdCB0aGVuIGl0IGlzIHRoZSBgYXJnT3B0aW9uYCBvcHRpb24uXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyBAZXhhbXBsZSBgJG1kVG9hc3Quc2ltcGxlKCdoZWxsbycpYCAvLyBzZXRzIG9wdGlvbnMuY29udGVudCB0byBoZWxsb1xuICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJlY2F1c2UgYXJnT3B0aW9uID09PSAnY29udGVudCdcbiAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCAmJiBkZWZpbml0aW9uLmFyZ09wdGlvbiAmJiAhYW5ndWxhci5pc09iamVjdChhcmcpICYmXG4gICAgICAgICAgICAgICFhbmd1bGFyLmlzQXJyYXkoYXJnKSkge1xuICAgICAgICAgICAgcmV0dXJuIChuZXcgUHJlc2V0KCkpW2RlZmluaXRpb24uYXJnT3B0aW9uXShhcmcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByZXNldChhcmcpO1xuICAgICAgICAgIH1cblxuICAgICAgICB9O1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBwdWJsaWNTZXJ2aWNlO1xuXG4gICAgICBmdW5jdGlvbiBzaG93SW50ZXJpbUVsZW1lbnQob3B0cykge1xuICAgICAgICAvLyBvcHRzIGlzIGVpdGhlciBhIHByZXNldCB3aGljaCBzdG9yZXMgaXRzIG9wdGlvbnMgb24gYW4gX29wdGlvbnMgZmllbGQsXG4gICAgICAgIC8vIG9yIGp1c3QgYW4gb2JqZWN0IG1hZGUgdXAgb2Ygb3B0aW9uc1xuICAgICAgICBpZiAob3B0cyAmJiBvcHRzLl9vcHRpb25zKSBvcHRzID0gb3B0cy5fb3B0aW9ucztcbiAgICAgICAgcmV0dXJuIGludGVyaW1FbGVtZW50U2VydmljZS5zaG93KFxuICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0cylcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBIZWxwZXIgdG8gY2FsbCAkaW5qZWN0b3IuaW52b2tlIHdpdGggYSBsb2NhbCBvZiB0aGUgZmFjdG9yeSBuYW1lIGZvclxuICAgICAgICogdGhpcyBwcm92aWRlci5cbiAgICAgICAqIElmIGFuICRtZERpYWxvZyBpcyBwcm92aWRpbmcgb3B0aW9ucyBmb3IgYSBkaWFsb2cgYW5kIHRyaWVzIHRvIGluamVjdFxuICAgICAgICogJG1kRGlhbG9nLCBhIGNpcmN1bGFyIGRlcGVuZGVuY3kgZXJyb3Igd2lsbCBoYXBwZW4uXG4gICAgICAgKiBXZSBnZXQgYXJvdW5kIHRoYXQgYnkgbWFudWFsbHkgaW5qZWN0aW5nICRtZERpYWxvZyBhcyBhIGxvY2FsLlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBpbnZva2VGYWN0b3J5KGZhY3RvcnksIGRlZmF1bHRWYWwpIHtcbiAgICAgICAgdmFyIGxvY2FscyA9IHt9O1xuICAgICAgICBsb2NhbHNbaW50ZXJpbUZhY3RvcnlOYW1lXSA9IHB1YmxpY1NlcnZpY2U7XG4gICAgICAgIHJldHVybiAkaW5qZWN0b3IuaW52b2tlKGZhY3RvcnkgfHwgZnVuY3Rpb24oKSB7IHJldHVybiBkZWZhdWx0VmFsOyB9LCB7fSwgbG9jYWxzKTtcbiAgICAgIH1cblxuICAgIH1cblxuICB9XG5cbiAgLyogQG5nSW5qZWN0ICovXG4gIGZ1bmN0aW9uIEludGVyaW1FbGVtZW50RmFjdG9yeSgkZG9jdW1lbnQsICRxLCAkcm9vdFNjb3BlLCAkdGltZW91dCwgJHJvb3RFbGVtZW50LCAkYW5pbWF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpbnRlcnBvbGF0ZSwgJG1kQ29tcGlsZXIsICRtZFRoZW1pbmcgKSB7XG4gICAgdmFyIHN0YXJ0U3ltYm9sID0gJGludGVycG9sYXRlLnN0YXJ0U3ltYm9sKCksXG4gICAgICAgIGVuZFN5bWJvbCA9ICRpbnRlcnBvbGF0ZS5lbmRTeW1ib2woKSxcbiAgICAgICAgdXNlc1N0YW5kYXJkU3ltYm9scyA9ICgoc3RhcnRTeW1ib2wgPT09ICd7eycpICYmIChlbmRTeW1ib2wgPT09ICd9fScpKSxcbiAgICAgICAgcHJvY2Vzc1RlbXBsYXRlICA9IHVzZXNTdGFuZGFyZFN5bWJvbHMgPyBhbmd1bGFyLmlkZW50aXR5IDogcmVwbGFjZUludGVycG9sYXRpb25TeW1ib2xzO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZUludGVyaW1FbGVtZW50U2VydmljZSgpIHtcbiAgICAgIC8qXG4gICAgICAgKiBAbmdkb2Mgc2VydmljZVxuICAgICAgICogQG5hbWUgJCRpbnRlcmltRWxlbWVudC4kc2VydmljZVxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogQSBzZXJ2aWNlIHVzZWQgdG8gY29udHJvbCBpbnNlcnRpbmcgYW5kIHJlbW92aW5nIGFuIGVsZW1lbnQgaW50byB0aGUgRE9NLlxuICAgICAgICpcbiAgICAgICAqL1xuICAgICAgdmFyIHN0YWNrID0gW107XG4gICAgICB2YXIgc2VydmljZTtcbiAgICAgIHJldHVybiBzZXJ2aWNlID0ge1xuICAgICAgICBzaG93OiBzaG93LFxuICAgICAgICBoaWRlOiBoaWRlLFxuICAgICAgICBjYW5jZWw6IGNhbmNlbFxuICAgICAgfTtcblxuICAgICAgLypcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICQkaW50ZXJpbUVsZW1lbnQuJHNlcnZpY2Ujc2hvd1xuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIEFkZHMgdGhlIGAkaW50ZXJpbUVsZW1lbnRgIHRvIHRoZSBET00gYW5kIHJldHVybnMgYSBwcm9taXNlIHRoYXQgd2lsbCBiZSByZXNvbHZlZCBvciByZWplY3RlZFxuICAgICAgICogd2l0aCBoaWRlIG9yIGNhbmNlbCwgcmVzcGVjdGl2ZWx5LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7Kn0gb3B0aW9ucyBpcyBoYXNoTWFwIG9mIHNldHRpbmdzXG4gICAgICAgKiBAcmV0dXJucyBhIFByb21pc2VcbiAgICAgICAqXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIHNob3cob3B0aW9ucykge1xuICAgICAgICBpZiAoc3RhY2subGVuZ3RoKSB7XG4gICAgICAgICAgc2VydmljZS5jYW5jZWwoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpbnRlcmltRWxlbWVudCA9IG5ldyBJbnRlcmltRWxlbWVudChvcHRpb25zKTtcblxuICAgICAgICBzdGFjay5wdXNoKGludGVyaW1FbGVtZW50KTtcbiAgICAgICAgcmV0dXJuIGludGVyaW1FbGVtZW50LnNob3coKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBpbnRlcmltRWxlbWVudC5kZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLypcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICQkaW50ZXJpbUVsZW1lbnQuJHNlcnZpY2UjaGlkZVxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFJlbW92ZXMgdGhlIGAkaW50ZXJpbUVsZW1lbnRgIGZyb20gdGhlIERPTSBhbmQgcmVzb2x2ZXMgdGhlIHByb21pc2UgcmV0dXJuZWQgZnJvbSBgc2hvd2BcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyp9IHJlc29sdmVQYXJhbSBEYXRhIHRvIHJlc29sdmUgdGhlIHByb21pc2Ugd2l0aFxuICAgICAgICogQHJldHVybnMgYSBQcm9taXNlIHRoYXQgd2lsbCBiZSByZXNvbHZlZCBhZnRlciB0aGUgZWxlbWVudCBoYXMgYmVlbiByZW1vdmVkLlxuICAgICAgICpcbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gaGlkZShyZXNwb25zZSkge1xuICAgICAgICB2YXIgaW50ZXJpbUVsZW1lbnQgPSBzdGFjay5zaGlmdCgpO1xuICAgICAgICBpbnRlcmltRWxlbWVudCAmJiBpbnRlcmltRWxlbWVudC5yZW1vdmUoKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGludGVyaW1FbGVtZW50LmRlZmVycmVkLnJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gaW50ZXJpbUVsZW1lbnQgPyBpbnRlcmltRWxlbWVudC5kZWZlcnJlZC5wcm9taXNlIDogJHEud2hlbihyZXNwb25zZSk7XG4gICAgICB9XG5cbiAgICAgIC8qXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkJGludGVyaW1FbGVtZW50LiRzZXJ2aWNlI2NhbmNlbFxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFJlbW92ZXMgdGhlIGAkaW50ZXJpbUVsZW1lbnRgIGZyb20gdGhlIERPTSBhbmQgcmVqZWN0cyB0aGUgcHJvbWlzZSByZXR1cm5lZCBmcm9tIGBzaG93YFxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7Kn0gcmVhc29uIERhdGEgdG8gcmVqZWN0IHRoZSBwcm9taXNlIHdpdGhcbiAgICAgICAqIEByZXR1cm5zIFByb21pc2UgdGhhdCB3aWxsIGJlIHJlamVjdGVkIGFmdGVyIHRoZSBlbGVtZW50IGhhcyBiZWVuIHJlbW92ZWQuXG4gICAgICAgKlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBjYW5jZWwocmVhc29uKSB7XG4gICAgICAgIHZhciBpbnRlcmltRWxlbWVudCA9IHN0YWNrLnNoaWZ0KCk7XG4gICAgICAgIGludGVyaW1FbGVtZW50ICYmIGludGVyaW1FbGVtZW50LnJlbW92ZSgpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaW50ZXJpbUVsZW1lbnQuZGVmZXJyZWQucmVqZWN0KHJlYXNvbik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBpbnRlcmltRWxlbWVudCA/IGludGVyaW1FbGVtZW50LmRlZmVycmVkLnByb21pc2UgOiAkcS5yZWplY3QocmVhc29uKTtcbiAgICAgIH1cblxuXG4gICAgICAvKlxuICAgICAgICogSW50ZXJuYWwgSW50ZXJpbSBFbGVtZW50IE9iamVjdFxuICAgICAgICogVXNlZCBpbnRlcm5hbGx5IHRvIG1hbmFnZSB0aGUgRE9NIGVsZW1lbnQgYW5kIHJlbGF0ZWQgZGF0YVxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBJbnRlcmltRWxlbWVudChvcHRpb25zKSB7XG4gICAgICAgIHZhciBzZWxmO1xuICAgICAgICB2YXIgaGlkZVRpbWVvdXQsIGVsZW1lbnQ7XG5cbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIG9wdGlvbnMgPSBhbmd1bGFyLmV4dGVuZCh7XG4gICAgICAgICAgc2NvcGU6IG9wdGlvbnMuc2NvcGUgfHwgJHJvb3RTY29wZS4kbmV3KG9wdGlvbnMuaXNvbGF0ZVNjb3BlKSxcbiAgICAgICAgICBvblNob3c6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gJGFuaW1hdGUuZW50ZXIoZWxlbWVudCwgb3B0aW9ucy5wYXJlbnQpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgb25SZW1vdmU6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICAgICAgICAvLyBFbGVtZW50IGNvdWxkIGJlIHVuZGVmaW5lZCBpZiBhIG5ldyBlbGVtZW50IGlzIHNob3duIGJlZm9yZVxuICAgICAgICAgICAgLy8gdGhlIG9sZCBvbmUgZmluaXNoZXMgY29tcGlsaW5nLlxuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQgJiYgJGFuaW1hdGUubGVhdmUoZWxlbWVudCkgfHwgJHEud2hlbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgb3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMudGVtcGxhdGUpIHtcbiAgICAgICAgICBvcHRpb25zLnRlbXBsYXRlID0gcHJvY2Vzc1RlbXBsYXRlKG9wdGlvbnMudGVtcGxhdGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNlbGYgPSB7XG4gICAgICAgICAgb3B0aW9uczogb3B0aW9ucyxcbiAgICAgICAgICBkZWZlcnJlZDogJHEuZGVmZXIoKSxcbiAgICAgICAgICBzaG93OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAkbWRDb21waWxlci5jb21waWxlKG9wdGlvbnMpLnRoZW4oZnVuY3Rpb24oY29tcGlsZURhdGEpIHtcbiAgICAgICAgICAgICAgYW5ndWxhci5leHRlbmQoY29tcGlsZURhdGEubG9jYWxzLCBzZWxmLm9wdGlvbnMpO1xuXG4gICAgICAgICAgICAgIC8vIFNlYXJjaCBmb3IgcGFyZW50IGF0IGluc2VydGlvbiB0aW1lLCBpZiBub3Qgc3BlY2lmaWVkXG4gICAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzU3RyaW5nKG9wdGlvbnMucGFyZW50KSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMucGFyZW50ID0gYW5ndWxhci5lbGVtZW50KCRkb2N1bWVudFswXS5xdWVyeVNlbGVjdG9yKG9wdGlvbnMucGFyZW50KSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoIW9wdGlvbnMucGFyZW50KSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5wYXJlbnQgPSAkcm9vdEVsZW1lbnQuZmluZCgnYm9keScpO1xuICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucy5wYXJlbnQubGVuZ3RoKSBvcHRpb25zLnBhcmVudCA9ICRyb290RWxlbWVudDtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGVsZW1lbnQgPSBjb21waWxlRGF0YS5saW5rKG9wdGlvbnMuc2NvcGUpO1xuICAgICAgICAgICAgICBpZiAob3B0aW9ucy50aGVtYWJsZSkgJG1kVGhlbWluZyhlbGVtZW50KTtcbiAgICAgICAgICAgICAgdmFyIHJldCA9IG9wdGlvbnMub25TaG93KG9wdGlvbnMuc2NvcGUsIGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICByZXR1cm4gJHEud2hlbihyZXQpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgIC8vIElzc3VlIG9uQ29tcGxldGUgY2FsbGJhY2sgd2hlbiB0aGUgYHNob3coKWAgZmluaXNoZXNcbiAgICAgICAgICAgICAgICAgIChvcHRpb25zLm9uQ29tcGxldGUgfHwgYW5ndWxhci5ub29wKShvcHRpb25zLnNjb3BlLCBlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgIHN0YXJ0SGlkZVRpbWVvdXQoKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICBmdW5jdGlvbiBzdGFydEhpZGVUaW1lb3V0KCkge1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmhpZGVEZWxheSkge1xuICAgICAgICAgICAgICAgICAgaGlkZVRpbWVvdXQgPSAkdGltZW91dChzZXJ2aWNlLmNhbmNlbCwgb3B0aW9ucy5oaWRlRGVsYXkpIDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY2FuY2VsVGltZW91dDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoaGlkZVRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgJHRpbWVvdXQuY2FuY2VsKGhpZGVUaW1lb3V0KTtcbiAgICAgICAgICAgICAgaGlkZVRpbWVvdXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc2VsZi5jYW5jZWxUaW1lb3V0KCk7XG4gICAgICAgICAgICB2YXIgcmV0ID0gb3B0aW9ucy5vblJlbW92ZShvcHRpb25zLnNjb3BlLCBlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiAkcS53aGVuKHJldCkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgb3B0aW9ucy5zY29wZS4kZGVzdHJveSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG5cbiAgICAvKlxuICAgICAqIFJlcGxhY2UgYHt7YCBhbmQgYH19YCBpbiBhIHN0cmluZyAodXN1YWxseSBhIHRlbXBsYXRlKSB3aXRoIHRoZSBhY3R1YWwgc3RhcnQtL2VuZFN5bWJvbHMgdXNlZFxuICAgICAqIGZvciBpbnRlcnBvbGF0aW9uLiBUaGlzIGFsbG93cyBwcmUtZGVmaW5lZCB0ZW1wbGF0ZXMgKGZvciBjb21wb25lbnRzIHN1Y2ggYXMgZGlhbG9nLCB0b2FzdCBldGMpXG4gICAgICogdG8gY29udGludWUgdG8gd29yayBpbiBhcHBzIHRoYXQgdXNlIGN1c3RvbSBpbnRlcnBvbGF0aW9uIHN0YXJ0LS9lbmRTeW1ib2xzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgVGhlIHRleHQgaW4gd2hpY2ggdG8gcmVwbGFjZSBge3tgIC8gYH19YFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBtb2RpZmllZCBzdHJpbmcgdXNpbmcgdGhlIGFjdHVhbCBpbnRlcnBvbGF0aW9uIHN0YXJ0LS9lbmRTeW1ib2xzXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVwbGFjZUludGVycG9sYXRpb25TeW1ib2xzKHRleHQpIHtcbiAgICAgIGlmICghdGV4dCB8fCAhYW5ndWxhci5pc1N0cmluZyh0ZXh0KSkgcmV0dXJuIHRleHQ7XG4gICAgICByZXR1cm4gdGV4dC5yZXBsYWNlKC9cXHtcXHsvZywgc3RhcnRTeW1ib2wpLnJlcGxhY2UoL319L2csIGVuZFN5bWJvbCk7XG4gICAgfVxuICB9XG5cbn1cblxufSkoKTtcblxuLyohXG4gKiBBbmd1bGFyIE1hdGVyaWFsIERlc2lnblxuICogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvbWF0ZXJpYWxcbiAqIEBsaWNlbnNlIE1JVFxuICogdjAuNy4xXG4gKi9cbihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbW9kdWxlXG4gICAqIEBuYW1lIG1hdGVyaWFsLmNvcmUuY29tcG9uZW50UmVnaXN0cnlcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEEgY29tcG9uZW50IGluc3RhbmNlIHJlZ2lzdHJhdGlvbiBzZXJ2aWNlLlxuICAgKiBOb3RlOiBjdXJyZW50bHkgdGhpcyBhcyBhIHByaXZhdGUgc2VydmljZSBpbiB0aGUgU2lkZU5hdiBjb21wb25lbnQuXG4gICAqL1xuICBhbmd1bGFyLm1vZHVsZSgnbWF0ZXJpYWwuY29yZScpXG4gICAgLmZhY3RvcnkoJyRtZENvbXBvbmVudFJlZ2lzdHJ5JywgQ29tcG9uZW50UmVnaXN0cnkpO1xuXG4gIC8qXG4gICAqIEBwcml2YXRlXG4gICAqIEBuZ2RvYyBmYWN0b3J5XG4gICAqIEBuYW1lIENvbXBvbmVudFJlZ2lzdHJ5XG4gICAqIEBtb2R1bGUgbWF0ZXJpYWwuY29yZS5jb21wb25lbnRSZWdpc3RyeVxuICAgKlxuICAgKi9cbiAgZnVuY3Rpb24gQ29tcG9uZW50UmVnaXN0cnkoJGxvZywgJHEpIHtcblxuICAgIHZhciBzZWxmO1xuICAgIHZhciBpbnN0YW5jZXMgPSBbIF07XG4gICAgdmFyIHBlbmRpbmdzID0geyB9O1xuXG4gICAgcmV0dXJuIHNlbGYgPSB7XG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gcHJpbnQgYW4gZXJyb3Igd2hlbiBhbiBpbnN0YW5jZSBmb3IgYSBoYW5kbGUgaXNuJ3QgZm91bmQuXG4gICAgICAgKi9cbiAgICAgIG5vdEZvdW5kRXJyb3I6IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAkbG9nLmVycm9yKCdObyBpbnN0YW5jZSBmb3VuZCBmb3IgaGFuZGxlJywgaGFuZGxlKTtcbiAgICAgIH0sXG4gICAgICAvKipcbiAgICAgICAqIFJldHVybiBhbGwgcmVnaXN0ZXJlZCBpbnN0YW5jZXMgYXMgYW4gYXJyYXkuXG4gICAgICAgKi9cbiAgICAgIGdldEluc3RhbmNlczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBpbnN0YW5jZXM7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEdldCBhIHJlZ2lzdGVyZWQgaW5zdGFuY2UuXG4gICAgICAgKiBAcGFyYW0gaGFuZGxlIHRoZSBTdHJpbmcgaGFuZGxlIHRvIGxvb2sgdXAgZm9yIGEgcmVnaXN0ZXJlZCBpbnN0YW5jZS5cbiAgICAgICAqL1xuICAgICAgZ2V0OiBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgaWYgKCAhaXNWYWxpZElEKGhhbmRsZSkgKSByZXR1cm4gbnVsbDtcblxuICAgICAgICB2YXIgaSwgaiwgaW5zdGFuY2U7XG4gICAgICAgIGZvcihpID0gMCwgaiA9IGluc3RhbmNlcy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgICBpbnN0YW5jZSA9IGluc3RhbmNlc1tpXTtcbiAgICAgICAgICBpZihpbnN0YW5jZS4kJG1kSGFuZGxlID09PSBoYW5kbGUpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFJlZ2lzdGVyIGFuIGluc3RhbmNlLlxuICAgICAgICogQHBhcmFtIGluc3RhbmNlIHRoZSBpbnN0YW5jZSB0byByZWdpc3RlclxuICAgICAgICogQHBhcmFtIGhhbmRsZSB0aGUgaGFuZGxlIHRvIGlkZW50aWZ5IHRoZSBpbnN0YW5jZSB1bmRlci5cbiAgICAgICAqL1xuICAgICAgcmVnaXN0ZXI6IGZ1bmN0aW9uKGluc3RhbmNlLCBoYW5kbGUpIHtcbiAgICAgICAgaWYgKCAhaGFuZGxlICkgcmV0dXJuIGFuZ3VsYXIubm9vcDtcblxuICAgICAgICBpbnN0YW5jZS4kJG1kSGFuZGxlID0gaGFuZGxlO1xuICAgICAgICBpbnN0YW5jZXMucHVzaChpbnN0YW5jZSk7XG4gICAgICAgIHJlc29sdmVXaGVuKCk7XG5cbiAgICAgICAgcmV0dXJuIGRlcmVnaXN0ZXI7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlbW92ZSByZWdpc3RyYXRpb24gZm9yIGFuIGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBkZXJlZ2lzdGVyKCkge1xuICAgICAgICAgIHZhciBpbmRleCA9IGluc3RhbmNlcy5pbmRleE9mKGluc3RhbmNlKTtcbiAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICBpbnN0YW5jZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVzb2x2ZSBhbnkgcGVuZGluZyBwcm9taXNlcyBmb3IgdGhpcyBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gcmVzb2x2ZVdoZW4oKSB7XG4gICAgICAgICAgdmFyIGRmZCA9IHBlbmRpbmdzW2hhbmRsZV07XG4gICAgICAgICAgaWYgKCBkZmQgKSB7XG4gICAgICAgICAgICBkZmQucmVzb2x2ZSggaW5zdGFuY2UgKTtcbiAgICAgICAgICAgIGRlbGV0ZSBwZW5kaW5nc1toYW5kbGVdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBBc3luYyBhY2Nlc3NvciB0byByZWdpc3RlcmVkIGNvbXBvbmVudCBpbnN0YW5jZVxuICAgICAgICogSWYgbm90IGF2YWlsYWJsZSB0aGVuIGEgcHJvbWlzZSBpcyBjcmVhdGVkIHRvIG5vdGlmeVxuICAgICAgICogYWxsIGxpc3RlbmVycyB3aGVuIHRoZSBpbnN0YW5jZSBpcyByZWdpc3RlcmVkLlxuICAgICAgICovXG4gICAgICB3aGVuIDogZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgIGlmICggaXNWYWxpZElEKGhhbmRsZSkgKSB7XG4gICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBzZWxmLmdldChoYW5kbGUpO1xuXG4gICAgICAgICAgaWYgKCBpbnN0YW5jZSApICB7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCBpbnN0YW5jZSApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZW5kaW5nc1toYW5kbGVdID0gZGVmZXJyZWQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICRxLnJlamVjdChcIkludmFsaWQgYG1kLWNvbXBvbmVudC1pZGAgdmFsdWUuXCIpO1xuICAgICAgfVxuXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGlzVmFsaWRJRChoYW5kbGUpe1xuICAgICAgcmV0dXJuIGhhbmRsZSAmJiAoaGFuZGxlICE9PSBcIlwiKTtcbiAgICB9XG5cbiAgfVxuICBDb21wb25lbnRSZWdpc3RyeS4kaW5qZWN0ID0gW1wiJGxvZ1wiLCBcIiRxXCJdO1xuXG5cbn0pKCk7XG5cbi8qIVxuICogQW5ndWxhciBNYXRlcmlhbCBEZXNpZ25cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL21hdGVyaWFsXG4gKiBAbGljZW5zZSBNSVRcbiAqIHYwLjcuMVxuICovXG4oZnVuY3Rpb24oKSB7XG4ndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXIubW9kdWxlKCdtYXRlcmlhbC5jb3JlJylcbiAgLmZhY3RvcnkoJyRtZElua1JpcHBsZScsIElua1JpcHBsZVNlcnZpY2UpXG4gIC5kaXJlY3RpdmUoJ21kSW5rUmlwcGxlJywgSW5rUmlwcGxlRGlyZWN0aXZlKVxuICAuZGlyZWN0aXZlKCdtZE5vSW5rJywgYXR0ck5vRGlyZWN0aXZlKCkpXG4gIC5kaXJlY3RpdmUoJ21kTm9CYXInLCBhdHRyTm9EaXJlY3RpdmUoKSlcbiAgLmRpcmVjdGl2ZSgnbWROb1N0cmV0Y2gnLCBhdHRyTm9EaXJlY3RpdmUoKSk7XG5cbmZ1bmN0aW9uIElua1JpcHBsZURpcmVjdGl2ZSgkbWRJbmtSaXBwbGUpIHtcbiAgcmV0dXJuIHtcbiAgICBjb250cm9sbGVyOiBhbmd1bGFyLm5vb3AsXG4gICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICBpZiAoYXR0ci5oYXNPd25Qcm9wZXJ0eSgnbWRJbmtSaXBwbGVDaGVja2JveCcpKSB7XG4gICAgICAgICRtZElua1JpcHBsZS5hdHRhY2hDaGVja2JveEJlaGF2aW9yKHNjb3BlLCBlbGVtZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRtZElua1JpcHBsZS5hdHRhY2hCdXR0b25CZWhhdmlvcihzY29wZSwgZWxlbWVudCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuSW5rUmlwcGxlRGlyZWN0aXZlLiRpbmplY3QgPSBbXCIkbWRJbmtSaXBwbGVcIl07XG5cbmZ1bmN0aW9uIElua1JpcHBsZVNlcnZpY2UoJHdpbmRvdywgJHRpbWVvdXQpIHtcblxuICByZXR1cm4ge1xuICAgIGF0dGFjaEJ1dHRvbkJlaGF2aW9yOiBhdHRhY2hCdXR0b25CZWhhdmlvcixcbiAgICBhdHRhY2hDaGVja2JveEJlaGF2aW9yOiBhdHRhY2hDaGVja2JveEJlaGF2aW9yLFxuICAgIGF0dGFjaFRhYkJlaGF2aW9yOiBhdHRhY2hUYWJCZWhhdmlvcixcbiAgICBhdHRhY2g6IGF0dGFjaFxuICB9O1xuXG4gIGZ1bmN0aW9uIGF0dGFjaEJ1dHRvbkJlaGF2aW9yKHNjb3BlLCBlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGF0dGFjaChzY29wZSwgZWxlbWVudCwgYW5ndWxhci5leHRlbmQoe1xuICAgICAgaXNGQUI6IGVsZW1lbnQuaGFzQ2xhc3MoJ21kLWZhYicpLFxuICAgICAgaXNNZW51SXRlbTogZWxlbWVudC5oYXNDbGFzcygnbWQtbWVudS1pdGVtJyksXG4gICAgICBjZW50ZXI6IGZhbHNlLFxuICAgICAgZGltQmFja2dyb3VuZDogdHJ1ZVxuICAgIH0sIG9wdGlvbnMpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGF0dGFjaENoZWNrYm94QmVoYXZpb3Ioc2NvcGUsIGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gYXR0YWNoKHNjb3BlLCBlbGVtZW50LCBhbmd1bGFyLmV4dGVuZCh7XG4gICAgICBjZW50ZXI6IHRydWUsXG4gICAgICBkaW1CYWNrZ3JvdW5kOiBmYWxzZSxcbiAgICAgIGZpdFJpcHBsZTogdHJ1ZVxuICAgIH0sIG9wdGlvbnMpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGF0dGFjaFRhYkJlaGF2aW9yKHNjb3BlLCBlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGF0dGFjaChzY29wZSwgZWxlbWVudCwgYW5ndWxhci5leHRlbmQoe1xuICAgICAgY2VudGVyOiBmYWxzZSxcbiAgICAgIGRpbUJhY2tncm91bmQ6IHRydWUsXG4gICAgICBvdXRsaW5lOiB0cnVlXG4gICAgfSwgb3B0aW9ucykpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXR0YWNoKHNjb3BlLCBlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgaWYgKGVsZW1lbnQuY29udHJvbGxlcignbWROb0luaycpKSByZXR1cm4gYW5ndWxhci5ub29wO1xuXG4gICAgb3B0aW9ucyA9IGFuZ3VsYXIuZXh0ZW5kKHtcbiAgICAgIGNvbG9yRWxlbWVudDogZWxlbWVudCxcbiAgICAgIG1vdXNlZG93bjogdHJ1ZSxcbiAgICAgIGhvdmVyOiB0cnVlLFxuICAgICAgZm9jdXM6IHRydWUsXG4gICAgICBjZW50ZXI6IGZhbHNlLFxuICAgICAgbW91c2Vkb3duUGF1c2VUaW1lOiAxNTAsXG4gICAgICBkaW1CYWNrZ3JvdW5kOiBmYWxzZSxcbiAgICAgIG91dGxpbmU6IGZhbHNlLFxuICAgICAgaXNGQUI6IGZhbHNlLFxuICAgICAgaXNNZW51SXRlbTogZmFsc2UsXG4gICAgICBmaXRSaXBwbGU6IGZhbHNlXG4gICAgfSwgb3B0aW9ucyk7XG5cbiAgICB2YXIgcmlwcGxlU2l6ZSxcbiAgICAgICAgY29udHJvbGxlciA9IGVsZW1lbnQuY29udHJvbGxlcignbWRJbmtSaXBwbGUnKSB8fCB7fSxcbiAgICAgICAgY291bnRlciA9IDAsXG4gICAgICAgIHJpcHBsZXMgPSBbXSxcbiAgICAgICAgc3RhdGVzID0gW10sXG4gICAgICAgIGlzQWN0aXZlRXhwciA9IGVsZW1lbnQuYXR0cignbWQtaGlnaGxpZ2h0JyksXG4gICAgICAgIGlzQWN0aXZlID0gZmFsc2UsXG4gICAgICAgIGlzSGVsZCA9IGZhbHNlLFxuICAgICAgICBub2RlID0gZWxlbWVudFswXSxcbiAgICAgICAgcmlwcGxlU2l6ZVNldHRpbmcgPSBlbGVtZW50LmF0dHIoJ21kLXJpcHBsZS1zaXplJyksXG4gICAgICAgIGNvbG9yID0gcGFyc2VDb2xvcihlbGVtZW50LmF0dHIoJ21kLWluay1yaXBwbGUnKSkgfHwgcGFyc2VDb2xvcigkd2luZG93LmdldENvbXB1dGVkU3R5bGUob3B0aW9ucy5jb2xvckVsZW1lbnRbMF0pLmNvbG9yIHx8ICdyZ2IoMCwgMCwgMCknKTtcblxuICAgIHN3aXRjaCAocmlwcGxlU2l6ZVNldHRpbmcpIHtcbiAgICAgIGNhc2UgJ2Z1bGwnOlxuICAgICAgICBvcHRpb25zLmlzRkFCID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdwYXJ0aWFsJzpcbiAgICAgICAgb3B0aW9ucy5pc0ZBQiA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvLyBleHBvc2Ugb25JbnB1dCBmb3IgcmlwcGxlIHRlc3RpbmdcbiAgICBpZiAob3B0aW9ucy5tb3VzZWRvd24pIHtcbiAgICAgIGVsZW1lbnQub24oJyRtZC5wcmVzc2Rvd24nLCBvblByZXNzRG93bilcbiAgICAgICAgLm9uKCckbWQucHJlc3N1cCcsIG9uUHJlc3NVcCk7XG4gICAgfVxuXG4gICAgY29udHJvbGxlci5jcmVhdGVSaXBwbGUgPSBjcmVhdGVSaXBwbGU7XG5cbiAgICBpZiAoaXNBY3RpdmVFeHByKSB7XG4gICAgICBzY29wZS4kd2F0Y2goaXNBY3RpdmVFeHByLCBmdW5jdGlvbiB3YXRjaEFjdGl2ZShuZXdWYWx1ZSkge1xuICAgICAgICBpc0FjdGl2ZSA9IG5ld1ZhbHVlO1xuICAgICAgICBpZiAoaXNBY3RpdmUgJiYgIXJpcHBsZXMubGVuZ3RoKSB7XG4gICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkgeyBjcmVhdGVSaXBwbGUoMCwgMCk7IH0sIDAsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBhbmd1bGFyLmZvckVhY2gocmlwcGxlcywgdXBkYXRlRWxlbWVudCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBQdWJsaXNoIHNlbGYtZGV0YWNoIG1ldGhvZCBpZiBkZXNpcmVkLi4uXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGRldGFjaCgpIHtcbiAgICAgIGVsZW1lbnQub2ZmKCckbWQucHJlc3Nkb3duJywgb25QcmVzc0Rvd24pXG4gICAgICAgIC5vZmYoJyRtZC5wcmVzc3VwJywgb25QcmVzc1VwKTtcbiAgICAgIGdldFJpcHBsZUNvbnRhaW5lcigpLnJlbW92ZSgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBjdXJyZW50IHJpcHBsZSBjb250YWluZXJcbiAgICAgKiBJZiB0aGVyZSBpcyBubyByaXBwbGUgY29udGFpbmVyLCBpdCBjcmVhdGVzIG9uZSBhbmQgcmV0dXJucyBpdFxuICAgICAqXG4gICAgICogQHJldHVybnMge2FuZ3VsYXIuZWxlbWVudH0gcmlwcGxlIGNvbnRhaW5lciBlbGVtZW50XG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0UmlwcGxlQ29udGFpbmVyKCkge1xuICAgICAgdmFyIGNvbnRhaW5lciA9IGVsZW1lbnQuZGF0YSgnJG1kUmlwcGxlQ29udGFpbmVyJyk7XG4gICAgICBpZiAoY29udGFpbmVyKSByZXR1cm4gY29udGFpbmVyO1xuICAgICAgY29udGFpbmVyID0gYW5ndWxhci5lbGVtZW50KCc8ZGl2IGNsYXNzPVwibWQtcmlwcGxlLWNvbnRhaW5lclwiPicpO1xuICAgICAgZWxlbWVudC5hcHBlbmQoY29udGFpbmVyKTtcbiAgICAgIGVsZW1lbnQuZGF0YSgnJG1kUmlwcGxlQ29udGFpbmVyJywgY29udGFpbmVyKTtcbiAgICAgIHJldHVybiBjb250YWluZXI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VDb2xvcihjb2xvcikge1xuICAgICAgaWYgKCFjb2xvcikgcmV0dXJuO1xuICAgICAgaWYgKGNvbG9yLmluZGV4T2YoJ3JnYmEnKSA9PT0gMCkgcmV0dXJuIGNvbG9yLnJlcGxhY2UoL1xcZD9cXC4/XFxkKlxccypcXClcXHMqJC8sICcwLjEpJyk7XG4gICAgICBpZiAoY29sb3IuaW5kZXhPZigncmdiJykgID09PSAwKSByZXR1cm4gcmdiVG9SR0JBKGNvbG9yKTtcbiAgICAgIGlmIChjb2xvci5pbmRleE9mKCcjJykgICAgPT09IDApIHJldHVybiBoZXhUb1JHQkEoY29sb3IpO1xuXG4gICAgICAvKipcbiAgICAgICAqIENvbnZlcnRzIGEgaGV4IHZhbHVlIHRvIGFuIHJnYmEgc3RyaW5nXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGhleCB2YWx1ZSAoMyBvciA2IGRpZ2l0cykgdG8gYmUgY29udmVydGVkXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge3N0cmluZ30gcmdiYSBjb2xvciB3aXRoIDAuMSBhbHBoYVxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBoZXhUb1JHQkEoY29sb3IpIHtcbiAgICAgICAgdmFyIGhleCA9IGNvbG9yLmNoYXJBdCgwKSA9PT0gJyMnID8gY29sb3Iuc3Vic3RyKDEpIDogY29sb3IsXG4gICAgICAgICAgZGlnID0gaGV4Lmxlbmd0aCAvIDMsXG4gICAgICAgICAgcmVkID0gaGV4LnN1YnN0cigwLCBkaWcpLFxuICAgICAgICAgIGdybiA9IGhleC5zdWJzdHIoZGlnLCBkaWcpLFxuICAgICAgICAgIGJsdSA9IGhleC5zdWJzdHIoZGlnICogMik7XG4gICAgICAgIGlmIChkaWcgPT09IDEpIHtcbiAgICAgICAgICByZWQgKz0gcmVkO1xuICAgICAgICAgIGdybiArPSBncm47XG4gICAgICAgICAgYmx1ICs9IGJsdTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ3JnYmEoJyArIHBhcnNlSW50KHJlZCwgMTYpICsgJywnICsgcGFyc2VJbnQoZ3JuLCAxNikgKyAnLCcgKyBwYXJzZUludChibHUsIDE2KSArICcsMC4xKSc7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ29udmVydHMgcmdiIHZhbHVlIHRvIHJnYmEgc3RyaW5nXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHJnYiBjb2xvciBzdHJpbmdcbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSByZ2JhIGNvbG9yIHdpdGggMC4xIGFscGhhXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJnYlRvUkdCQShjb2xvcikge1xuICAgICAgICByZXR1cm4gY29sb3IucmVwbGFjZSgnKScsICcsIDAuMSknKS5yZXBsYWNlKCcoJywgJ2EoJyk7XG4gICAgICB9XG5cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVFbGVtZW50KGVsZW0sIHdhaXQpIHtcbiAgICAgIHJpcHBsZXMuc3BsaWNlKHJpcHBsZXMuaW5kZXhPZihlbGVtKSwgMSk7XG4gICAgICBpZiAocmlwcGxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgZ2V0UmlwcGxlQ29udGFpbmVyKCkuY3NzKHsgYmFja2dyb3VuZENvbG9yOiAnJyB9KTtcbiAgICAgIH1cbiAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHsgZWxlbS5yZW1vdmUoKTsgfSwgd2FpdCwgZmFsc2UpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVwZGF0ZUVsZW1lbnQoZWxlbSkge1xuICAgICAgdmFyIGluZGV4ID0gcmlwcGxlcy5pbmRleE9mKGVsZW0pLFxuICAgICAgICAgIHN0YXRlID0gc3RhdGVzW2luZGV4XSB8fCB7fSxcbiAgICAgICAgICBlbGVtSXNBY3RpdmUgPSByaXBwbGVzLmxlbmd0aCA+IDEgPyBmYWxzZSA6IGlzQWN0aXZlLFxuICAgICAgICAgIGVsZW1Jc0hlbGQgICA9IHJpcHBsZXMubGVuZ3RoID4gMSA/IGZhbHNlIDogaXNIZWxkO1xuICAgICAgaWYgKGVsZW1Jc0FjdGl2ZSB8fCBzdGF0ZS5hbmltYXRpbmcgfHwgZWxlbUlzSGVsZCkge1xuICAgICAgICBlbGVtLmFkZENsYXNzKCdtZC1yaXBwbGUtdmlzaWJsZScpO1xuICAgICAgfSBlbHNlIGlmIChlbGVtKSB7XG4gICAgICAgIGVsZW0ucmVtb3ZlQ2xhc3MoJ21kLXJpcHBsZS12aXNpYmxlJyk7XG4gICAgICAgIGlmIChvcHRpb25zLm91dGxpbmUpIHtcbiAgICAgICAgICBlbGVtLmNzcyh7XG4gICAgICAgICAgICB3aWR0aDogcmlwcGxlU2l6ZSArICdweCcsXG4gICAgICAgICAgICBoZWlnaHQ6IHJpcHBsZVNpemUgKyAncHgnLFxuICAgICAgICAgICAgbWFyZ2luTGVmdDogKHJpcHBsZVNpemUgKiAtMSkgKyAncHgnLFxuICAgICAgICAgICAgbWFyZ2luVG9wOiAocmlwcGxlU2l6ZSAqIC0xKSArICdweCdcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZW1vdmVFbGVtZW50KGVsZW0sIG9wdGlvbnMub3V0bGluZSA/IDQ1MCA6IDY1MCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHJpcHBsZSBhdCB0aGUgcHJvdmlkZWQgY29vcmRpbmF0ZXNcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZWZ0IGN1cnNvciBwb3NpdGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0b3AgY3Vyc29yIHBvc2l0aW9uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7YW5ndWxhci5lbGVtZW50fSB0aGUgZ2VuZXJhdGVkIHJpcHBsZSBlbGVtZW50XG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmlwcGxlKGxlZnQsIHRvcCkge1xuXG4gICAgICBjb2xvciA9IHBhcnNlQ29sb3IoZWxlbWVudC5hdHRyKCdtZC1pbmstcmlwcGxlJykpIHx8IHBhcnNlQ29sb3IoJHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG9wdGlvbnMuY29sb3JFbGVtZW50WzBdKS5jb2xvciB8fCAncmdiKDAsIDAsIDApJyk7XG5cbiAgICAgIHZhciBjb250YWluZXIgPSBnZXRSaXBwbGVDb250YWluZXIoKSxcbiAgICAgICAgICBzaXplID0gZ2V0UmlwcGxlU2l6ZShsZWZ0LCB0b3ApLFxuICAgICAgICAgIGNzcyA9IGdldFJpcHBsZUNzcyhzaXplLCBsZWZ0LCB0b3ApLFxuICAgICAgICAgIGVsZW0gPSBnZXRSaXBwbGVFbGVtZW50KGNzcyksXG4gICAgICAgICAgaW5kZXggPSByaXBwbGVzLmluZGV4T2YoZWxlbSksXG4gICAgICAgICAgc3RhdGUgPSBzdGF0ZXNbaW5kZXhdIHx8IHt9O1xuXG4gICAgICByaXBwbGVTaXplID0gc2l6ZTtcblxuICAgICAgc3RhdGUuYW5pbWF0aW5nID0gdHJ1ZTtcblxuICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAob3B0aW9ucy5kaW1CYWNrZ3JvdW5kKSB7XG4gICAgICAgICAgY29udGFpbmVyLmNzcyh7IGJhY2tncm91bmRDb2xvcjogY29sb3IgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxlbS5hZGRDbGFzcygnbWQtcmlwcGxlLXBsYWNlZCBtZC1yaXBwbGUtc2NhbGVkJyk7XG4gICAgICAgIGlmIChvcHRpb25zLm91dGxpbmUpIHtcbiAgICAgICAgICBlbGVtLmNzcyh7XG4gICAgICAgICAgICBib3JkZXJXaWR0aDogKHNpemUgKiAwLjUpICsgJ3B4JyxcbiAgICAgICAgICAgIG1hcmdpbkxlZnQ6IChzaXplICogLTAuNSkgKyAncHgnLFxuICAgICAgICAgICAgbWFyZ2luVG9wOiAoc2l6ZSAqIC0wLjUpICsgJ3B4J1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVsZW0uY3NzKHsgbGVmdDogJzUwJScsIHRvcDogJzUwJScgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlRWxlbWVudChlbGVtKTtcbiAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHN0YXRlLmFuaW1hdGluZyA9IGZhbHNlO1xuICAgICAgICAgIHVwZGF0ZUVsZW1lbnQoZWxlbSk7XG4gICAgICAgIH0sIChvcHRpb25zLm91dGxpbmUgPyA0NTAgOiAyMjUpLCBmYWxzZSk7XG4gICAgICB9LCAwLCBmYWxzZSk7XG5cbiAgICAgIHJldHVybiBlbGVtO1xuXG4gICAgICAvKipcbiAgICAgICAqIENyZWF0ZXMgdGhlIHJpcHBsZSBlbGVtZW50IHdpdGggdGhlIHByb3ZpZGVkIGNzc1xuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBjc3MgcHJvcGVydGllcyB0byBiZSBhcHBsaWVkXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge2FuZ3VsYXIuZWxlbWVudH0gdGhlIGdlbmVyYXRlZCByaXBwbGUgZWxlbWVudFxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBnZXRSaXBwbGVFbGVtZW50KGNzcykge1xuICAgICAgICB2YXIgZWxlbSA9IGFuZ3VsYXIuZWxlbWVudCgnPGRpdiBjbGFzcz1cIm1kLXJpcHBsZVwiIGRhdGEtY291bnRlcj1cIicgKyBjb3VudGVyKysgKyAnXCI+Jyk7XG4gICAgICAgIHJpcHBsZXMudW5zaGlmdChlbGVtKTtcbiAgICAgICAgc3RhdGVzLnVuc2hpZnQoeyBhbmltYXRpbmc6IHRydWUgfSk7XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmQoZWxlbSk7XG4gICAgICAgIGNzcyAmJiBlbGVtLmNzcyhjc3MpO1xuICAgICAgICByZXR1cm4gZWxlbTtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBDYWxjdWxhdGUgdGhlIHJpcHBsZSBzaXplXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMge251bWJlcn0gY2FsY3VsYXRlZCByaXBwbGUgZGlhbWV0ZXJcbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gZ2V0UmlwcGxlU2l6ZShsZWZ0LCB0b3ApIHtcbiAgICAgICAgdmFyIHdpZHRoID0gY29udGFpbmVyLnByb3AoJ29mZnNldFdpZHRoJyksXG4gICAgICAgICAgICBoZWlnaHQgPSBjb250YWluZXIucHJvcCgnb2Zmc2V0SGVpZ2h0JyksXG4gICAgICAgICAgICBtdWx0aXBsaWVyLCBzaXplLCByZWN0O1xuICAgICAgICBpZiAob3B0aW9ucy5pc01lbnVJdGVtKSB7XG4gICAgICAgICAgc2l6ZSA9IE1hdGguc3FydChNYXRoLnBvdyh3aWR0aCwgMikgKyBNYXRoLnBvdyhoZWlnaHQsIDIpKTtcbiAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLm91dGxpbmUpIHtcbiAgICAgICAgICByZWN0ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICBsZWZ0IC09IHJlY3QubGVmdDtcbiAgICAgICAgICB0b3AgLT0gcmVjdC50b3A7XG4gICAgICAgICAgd2lkdGggPSBNYXRoLm1heChsZWZ0LCB3aWR0aCAtIGxlZnQpO1xuICAgICAgICAgIGhlaWdodCA9IE1hdGgubWF4KHRvcCwgaGVpZ2h0IC0gdG9wKTtcbiAgICAgICAgICBzaXplID0gMiAqIE1hdGguc3FydChNYXRoLnBvdyh3aWR0aCwgMikgKyBNYXRoLnBvdyhoZWlnaHQsIDIpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtdWx0aXBsaWVyID0gb3B0aW9ucy5pc0ZBQiA/IDEuMSA6IDAuODtcbiAgICAgICAgICBzaXplID0gTWF0aC5zcXJ0KE1hdGgucG93KHdpZHRoLCAyKSArIE1hdGgucG93KGhlaWdodCwgMikpICogbXVsdGlwbGllcjtcbiAgICAgICAgICBpZiAob3B0aW9ucy5maXRSaXBwbGUpIHtcbiAgICAgICAgICAgIHNpemUgPSBNYXRoLm1pbihoZWlnaHQsIHdpZHRoLCBzaXplKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogR2VuZXJhdGVzIHRoZSByaXBwbGUgY3NzXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHRoZSBkaWFtZXRlciBvZiB0aGUgcmlwcGxlXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gdGhlIGxlZnQgY3Vyc29yIG9mZnNldFxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHRoZSB0b3AgY3Vyc29yIG9mZnNldFxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHt7YmFja2dyb3VuZENvbG9yOiAqLCB3aWR0aDogc3RyaW5nLCBoZWlnaHQ6IHN0cmluZywgbWFyZ2luTGVmdDogc3RyaW5nLCBtYXJnaW5Ub3A6IHN0cmluZ319XG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGdldFJpcHBsZUNzcyhzaXplLCBsZWZ0LCB0b3ApIHtcbiAgICAgICAgdmFyIHJlY3QsXG4gICAgICAgICAgICBjc3MgPSB7XG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogcmdiYVRvUkdCKGNvbG9yKSxcbiAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IHJnYmFUb1JHQihjb2xvciksXG4gICAgICAgICAgICAgIHdpZHRoOiBzaXplICsgJ3B4JyxcbiAgICAgICAgICAgICAgaGVpZ2h0OiBzaXplICsgJ3B4J1xuICAgICAgICAgICAgfTtcblxuICAgICAgICBpZiAob3B0aW9ucy5vdXRsaW5lKSB7XG4gICAgICAgICAgY3NzLndpZHRoID0gMDtcbiAgICAgICAgICBjc3MuaGVpZ2h0ID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjc3MubWFyZ2luTGVmdCA9IGNzcy5tYXJnaW5Ub3AgPSAoc2l6ZSAqIC0wLjUpICsgJ3B4JztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLmNlbnRlcikge1xuICAgICAgICAgIGNzcy5sZWZ0ID0gY3NzLnRvcCA9ICc1MCUnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlY3QgPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgIGNzcy5sZWZ0ID0gTWF0aC5yb3VuZCgobGVmdCAtIHJlY3QubGVmdCkgLyBjb250YWluZXIucHJvcCgnb2Zmc2V0V2lkdGgnKSAqIDEwMCkgKyAnJSc7XG4gICAgICAgICAgY3NzLnRvcCA9IE1hdGgucm91bmQoKHRvcCAtIHJlY3QudG9wKSAvIGNvbnRhaW5lci5wcm9wKCdvZmZzZXRIZWlnaHQnKSAqIDEwMCkgKyAnJSc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY3NzO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyByZ2JhIHN0cmluZyB0byByZ2IsIHJlbW92aW5nIHRoZSBhbHBoYSB2YWx1ZVxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcmdiYSBjb2xvclxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSByZ2IgY29sb3JcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIHJnYmFUb1JHQihjb2xvcikge1xuICAgICAgICAgIHJldHVybiBjb2xvci5yZXBsYWNlKCdyZ2JhJywgJ3JnYicpLnJlcGxhY2UoLyxbXlxcKVxcLF0rXFwpLywgJyknKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgdXNlciBpbnB1dCBzdGFydCBhbmQgc3RvcCBldmVudHNcbiAgICAgKlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uUHJlc3NEb3duKGV2KSB7XG4gICAgICBpZiAoIWlzUmlwcGxlQWxsb3dlZCgpKSByZXR1cm47XG5cbiAgICAgIHZhciByaXBwbGUgPSBjcmVhdGVSaXBwbGUoZXYucG9pbnRlci54LCBldi5wb2ludGVyLnkpO1xuICAgICAgaXNIZWxkID0gdHJ1ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25QcmVzc1VwKGV2KSB7XG4gICAgICBpc0hlbGQgPSBmYWxzZTtcbiAgICAgIHZhciByaXBwbGUgPSByaXBwbGVzWyByaXBwbGVzLmxlbmd0aCAtIDEgXTtcbiAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHsgdXBkYXRlRWxlbWVudChyaXBwbGUpOyB9LCAwLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBpZiB0aGUgcmlwcGxlIGlzIGFsbG93ZWRcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHRoZSByaXBwbGUgaXMgYWxsb3dlZCwgZmFsc2UgaWYgbm90XG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNSaXBwbGVBbGxvd2VkKCkge1xuICAgICAgdmFyIHBhcmVudCA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgIHZhciBncmFuZHBhcmVudCA9IHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZTtcbiAgICAgIHZhciBhbmNlc3RvciA9IGdyYW5kcGFyZW50ICYmIGdyYW5kcGFyZW50LnBhcmVudE5vZGU7XG4gICAgICByZXR1cm4gIWlzRGlzYWJsZWQobm9kZSkgJiYgIWlzRGlzYWJsZWQocGFyZW50KSAmJiAhaXNEaXNhYmxlZChncmFuZHBhcmVudCkgJiYgIWlzRGlzYWJsZWQoYW5jZXN0b3IpO1xuICAgICAgZnVuY3Rpb24gaXNEaXNhYmxlZCAoZWxlbSkge1xuICAgICAgICByZXR1cm4gZWxlbSAmJiBlbGVtLmhhc0F0dHJpYnV0ZSAmJiBlbGVtLmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgfVxufVxuSW5rUmlwcGxlU2VydmljZS4kaW5qZWN0ID0gW1wiJHdpbmRvd1wiLCBcIiR0aW1lb3V0XCJdO1xuXG4vKipcbiAqIG5vaW5rL25vYmFyL25vc3RyZXRjaCBkaXJlY3RpdmU6IG1ha2UgYW55IGVsZW1lbnQgdGhhdCBoYXMgb25lIG9mXG4gKiB0aGVzZSBhdHRyaWJ1dGVzIGJlIGdpdmVuIGEgY29udHJvbGxlciwgc28gdGhhdCBvdGhlciBkaXJlY3RpdmVzIGNhblxuICogYHJlcXVpcmU6YCB0aGVzZSBhbmQgc2VlIGlmIHRoZXJlIGlzIGEgYG5vPHh4eD5gIHBhcmVudCBhdHRyaWJ1dGUuXG4gKlxuICogQHVzYWdlXG4gKiA8aGxqcyBsYW5nPVwiaHRtbFwiPlxuICogPHBhcmVudCBtZC1uby1pbms+XG4gKiAgIDxjaGlsZCBkZXRlY3Qtbm8+XG4gKiAgIDwvY2hpbGQ+XG4gKiA8L3BhcmVudD5cbiAqIDwvaGxqcz5cbiAqXG4gKiA8aGxqcyBsYW5nPVwianNcIj5cbiAqIG15QXBwLmRpcmVjdGl2ZSgnZGV0ZWN0Tm8nLCBmdW5jdGlvbigpIHtcbiAqICAgcmV0dXJuIHtcbiAqICAgICByZXF1aXJlOiBbJ14/bWROb0luaycsIF4/bWROb0JhciddLFxuICogICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJscykge1xuICogICAgICAgdmFyIG5vaW5rQ3RybCA9IGN0cmxzWzBdO1xuICogICAgICAgdmFyIG5vYmFyQ3RybCA9IGN0cmxzWzFdO1xuICogICAgICAgaWYgKG5vSW5rQ3RybCkge1xuICogICAgICAgICBhbGVydChcInRoZSBtZC1uby1pbmsgZmxhZyBoYXMgYmVlbiBzcGVjaWZpZWQgb24gYW4gYW5jZXN0b3IhXCIpO1xuICogICAgICAgfVxuICogICAgICAgaWYgKG5vYmFyQ3RybCkge1xuICogICAgICAgICBhbGVydChcInRoZSBtZC1uby1iYXIgZmxhZyBoYXMgYmVlbiBzcGVjaWZpZWQgb24gYW4gYW5jZXN0b3IhXCIpO1xuICogICAgICAgfVxuICogICAgIH1cbiAqICAgfTtcbiAqIH0pO1xuICogPC9obGpzPlxuICovXG5mdW5jdGlvbiBhdHRyTm9EaXJlY3RpdmUoKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY29udHJvbGxlcjogYW5ndWxhci5ub29wXG4gICAgfTtcbiAgfTtcbn1cbn0pKCk7XG5cbi8qIVxuICogQW5ndWxhciBNYXRlcmlhbCBEZXNpZ25cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL21hdGVyaWFsXG4gKiBAbGljZW5zZSBNSVRcbiAqIHYwLjcuMVxuICovXG4oZnVuY3Rpb24oKSB7XG4ndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXIubW9kdWxlKCdtYXRlcmlhbC5jb3JlLnRoZW1pbmcucGFsZXR0ZScsIFtdKVxuLmNvbnN0YW50KCckbWRDb2xvclBhbGV0dGUnLCB7XG4gICdyZWQnOiB7XG4gICAgJzUwJzogJyNmZmViZWUnLFxuICAgICcxMDAnOiAnI2ZmY2RkMicsXG4gICAgJzIwMCc6ICcjZWY5YTlhJyxcbiAgICAnMzAwJzogJyNlNTczNzMnLFxuICAgICc0MDAnOiAnI2VmNTM1MCcsXG4gICAgJzUwMCc6ICcjZjQ0MzM2JyxcbiAgICAnNjAwJzogJyNlNTM5MzUnLFxuICAgICc3MDAnOiAnI2QzMmYyZicsXG4gICAgJzgwMCc6ICcjYzYyODI4JyxcbiAgICAnOTAwJzogJyNiNzFjMWMnLFxuICAgICdBMTAwJzogJyNmZjhhODAnLFxuICAgICdBMjAwJzogJyNmZjUyNTInLFxuICAgICdBNDAwJzogJyNmZjE3NDQnLFxuICAgICdBNzAwJzogJyNkNTAwMDAnLFxuICAgICdjb250cmFzdERlZmF1bHRDb2xvcic6ICdsaWdodCcsXG4gICAgJ2NvbnRyYXN0RGFya0NvbG9ycyc6ICc1MCAxMDAgMjAwIDMwMCA0MDAgQTEwMCcsXG4gICAgJ2NvbnRyYXN0U3Ryb25nTGlnaHRDb2xvcnMnOiAnNTAwIDYwMCA3MDAgQTIwMCBBNDAwIEE3MDAnXG4gIH0sXG4gICdwaW5rJzoge1xuICAgICc1MCc6ICcjZmNlNGVjJyxcbiAgICAnMTAwJzogJyNmOGJiZDAnLFxuICAgICcyMDAnOiAnI2Y0OGZiMScsXG4gICAgJzMwMCc6ICcjZjA2MjkyJyxcbiAgICAnNDAwJzogJyNlYzQwN2EnLFxuICAgICc1MDAnOiAnI2U5MWU2MycsXG4gICAgJzYwMCc6ICcjZDgxYjYwJyxcbiAgICAnNzAwJzogJyNjMjE4NWInLFxuICAgICc4MDAnOiAnI2FkMTQ1NycsXG4gICAgJzkwMCc6ICcjODgwZTRmJyxcbiAgICAnQTEwMCc6ICcjZmY4MGFiJyxcbiAgICAnQTIwMCc6ICcjZmY0MDgxJyxcbiAgICAnQTQwMCc6ICcjZjUwMDU3JyxcbiAgICAnQTcwMCc6ICcjYzUxMTYyJyxcbiAgICAnY29udHJhc3REZWZhdWx0Q29sb3InOiAnbGlnaHQnLFxuICAgICdjb250cmFzdERhcmtDb2xvcnMnOiAnNTAgMTAwIDIwMCAzMDAgNDAwIEExMDAnLFxuICAgICdjb250cmFzdFN0cm9uZ0xpZ2h0Q29sb3JzJzogJzUwMCA2MDAgQTIwMCBBNDAwIEE3MDAnXG4gIH0sXG4gICdwdXJwbGUnOiB7XG4gICAgJzUwJzogJyNmM2U1ZjUnLFxuICAgICcxMDAnOiAnI2UxYmVlNycsXG4gICAgJzIwMCc6ICcjY2U5M2Q4JyxcbiAgICAnMzAwJzogJyNiYTY4YzgnLFxuICAgICc0MDAnOiAnI2FiNDdiYycsXG4gICAgJzUwMCc6ICcjOWMyN2IwJyxcbiAgICAnNjAwJzogJyM4ZTI0YWEnLFxuICAgICc3MDAnOiAnIzdiMWZhMicsXG4gICAgJzgwMCc6ICcjNmExYjlhJyxcbiAgICAnOTAwJzogJyM0YTE0OGMnLFxuICAgICdBMTAwJzogJyNlYTgwZmMnLFxuICAgICdBMjAwJzogJyNlMDQwZmInLFxuICAgICdBNDAwJzogJyNkNTAwZjknLFxuICAgICdBNzAwJzogJyNhYTAwZmYnLFxuICAgICdjb250cmFzdERlZmF1bHRDb2xvcic6ICdsaWdodCcsXG4gICAgJ2NvbnRyYXN0RGFya0NvbG9ycyc6ICc1MCAxMDAgMjAwIEExMDAnLFxuICAgICdjb250cmFzdFN0cm9uZ0xpZ2h0Q29sb3JzJzogJzMwMCA0MDAgQTIwMCBBNDAwIEE3MDAnXG4gIH0sXG4gICdkZWVwLXB1cnBsZSc6IHtcbiAgICAnNTAnOiAnI2VkZTdmNicsXG4gICAgJzEwMCc6ICcjZDFjNGU5JyxcbiAgICAnMjAwJzogJyNiMzlkZGInLFxuICAgICczMDAnOiAnIzk1NzVjZCcsXG4gICAgJzQwMCc6ICcjN2U1N2MyJyxcbiAgICAnNTAwJzogJyM2NzNhYjcnLFxuICAgICc2MDAnOiAnIzVlMzViMScsXG4gICAgJzcwMCc6ICcjNTEyZGE4JyxcbiAgICAnODAwJzogJyM0NTI3YTAnLFxuICAgICc5MDAnOiAnIzMxMWI5MicsXG4gICAgJ0ExMDAnOiAnI2IzODhmZicsXG4gICAgJ0EyMDAnOiAnIzdjNGRmZicsXG4gICAgJ0E0MDAnOiAnIzY1MWZmZicsXG4gICAgJ0E3MDAnOiAnIzYyMDBlYScsXG4gICAgJ2NvbnRyYXN0RGVmYXVsdENvbG9yJzogJ2xpZ2h0JyxcbiAgICAnY29udHJhc3REYXJrQ29sb3JzJzogJzUwIDEwMCAyMDAgQTEwMCcsXG4gICAgJ2NvbnRyYXN0U3Ryb25nTGlnaHRDb2xvcnMnOiAnMzAwIDQwMCBBMjAwJ1xuICB9LFxuICAnaW5kaWdvJzoge1xuICAgICc1MCc6ICcjZThlYWY2JyxcbiAgICAnMTAwJzogJyNjNWNhZTknLFxuICAgICcyMDAnOiAnIzlmYThkYScsXG4gICAgJzMwMCc6ICcjNzk4NmNiJyxcbiAgICAnNDAwJzogJyM1YzZiYzAnLFxuICAgICc1MDAnOiAnIzNmNTFiNScsXG4gICAgJzYwMCc6ICcjMzk0OWFiJyxcbiAgICAnNzAwJzogJyMzMDNmOWYnLFxuICAgICc4MDAnOiAnIzI4MzU5MycsXG4gICAgJzkwMCc6ICcjMWEyMzdlJyxcbiAgICAnQTEwMCc6ICcjOGM5ZWZmJyxcbiAgICAnQTIwMCc6ICcjNTM2ZGZlJyxcbiAgICAnQTQwMCc6ICcjM2Q1YWZlJyxcbiAgICAnQTcwMCc6ICcjMzA0ZmZlJyxcbiAgICAnY29udHJhc3REZWZhdWx0Q29sb3InOiAnbGlnaHQnLFxuICAgICdjb250cmFzdERhcmtDb2xvcnMnOiAnNTAgMTAwIDIwMCBBMTAwJyxcbiAgICAnY29udHJhc3RTdHJvbmdMaWdodENvbG9ycyc6ICczMDAgNDAwIEEyMDAgQTQwMCdcbiAgfSxcbiAgJ2JsdWUnOiB7XG4gICAgJzUwJzogJyNlM2YyZmQnLFxuICAgICcxMDAnOiAnI2JiZGVmYicsXG4gICAgJzIwMCc6ICcjOTBjYWY5JyxcbiAgICAnMzAwJzogJyM2NGI1ZjYnLFxuICAgICc0MDAnOiAnIzQyYTVmNScsXG4gICAgJzUwMCc6ICcjMjE5NmYzJyxcbiAgICAnNjAwJzogJyMxZTg4ZTUnLFxuICAgICc3MDAnOiAnIzE5NzZkMicsXG4gICAgJzgwMCc6ICcjMTU2NWMwJyxcbiAgICAnOTAwJzogJyMwZDQ3YTEnLFxuICAgICdBMTAwJzogJyM4MmIxZmYnLFxuICAgICdBMjAwJzogJyM0NDhhZmYnLFxuICAgICdBNDAwJzogJyMyOTc5ZmYnLFxuICAgICdBNzAwJzogJyMyOTYyZmYnLFxuICAgICdjb250cmFzdERlZmF1bHRDb2xvcic6ICdsaWdodCcsXG4gICAgJ2NvbnRyYXN0RGFya0NvbG9ycyc6ICcxMDAgMjAwIDMwMCA0MDAgQTEwMCcsXG4gICAgJ2NvbnRyYXN0U3Ryb25nTGlnaHRDb2xvcnMnOiAnNTAwIDYwMCA3MDAgQTIwMCBBNDAwIEE3MDAnXG4gIH0sXG4gICdsaWdodC1ibHVlJzoge1xuICAgICc1MCc6ICcjZTFmNWZlJyxcbiAgICAnMTAwJzogJyNiM2U1ZmMnLFxuICAgICcyMDAnOiAnIzgxZDRmYScsXG4gICAgJzMwMCc6ICcjNGZjM2Y3JyxcbiAgICAnNDAwJzogJyMyOWI2ZjYnLFxuICAgICc1MDAnOiAnIzAzYTlmNCcsXG4gICAgJzYwMCc6ICcjMDM5YmU1JyxcbiAgICAnNzAwJzogJyMwMjg4ZDEnLFxuICAgICc4MDAnOiAnIzAyNzdiZCcsXG4gICAgJzkwMCc6ICcjMDE1NzliJyxcbiAgICAnQTEwMCc6ICcjODBkOGZmJyxcbiAgICAnQTIwMCc6ICcjNDBjNGZmJyxcbiAgICAnQTQwMCc6ICcjMDBiMGZmJyxcbiAgICAnQTcwMCc6ICcjMDA5MWVhJyxcbiAgICAnY29udHJhc3REZWZhdWx0Q29sb3InOiAnZGFyaycsXG4gICAgJ2NvbnRyYXN0TGlnaHRDb2xvcnMnOiAnNTAwIDYwMCA3MDAgODAwIDkwMCBBNzAwJyxcbiAgICAnY29udHJhc3RTdHJvbmdMaWdodENvbG9ycyc6ICc1MDAgNjAwIDcwMCA4MDAgQTcwMCdcbiAgfSxcbiAgJ2N5YW4nOiB7XG4gICAgJzUwJzogJyNlMGY3ZmEnLFxuICAgICcxMDAnOiAnI2IyZWJmMicsXG4gICAgJzIwMCc6ICcjODBkZWVhJyxcbiAgICAnMzAwJzogJyM0ZGQwZTEnLFxuICAgICc0MDAnOiAnIzI2YzZkYScsXG4gICAgJzUwMCc6ICcjMDBiY2Q0JyxcbiAgICAnNjAwJzogJyMwMGFjYzEnLFxuICAgICc3MDAnOiAnIzAwOTdhNycsXG4gICAgJzgwMCc6ICcjMDA4MzhmJyxcbiAgICAnOTAwJzogJyMwMDYwNjQnLFxuICAgICdBMTAwJzogJyM4NGZmZmYnLFxuICAgICdBMjAwJzogJyMxOGZmZmYnLFxuICAgICdBNDAwJzogJyMwMGU1ZmYnLFxuICAgICdBNzAwJzogJyMwMGI4ZDQnLFxuICAgICdjb250cmFzdERlZmF1bHRDb2xvcic6ICdkYXJrJyxcbiAgICAnY29udHJhc3RMaWdodENvbG9ycyc6ICc1MDAgNjAwIDcwMCA4MDAgOTAwJyxcbiAgICAnY29udHJhc3RTdHJvbmdMaWdodENvbG9ycyc6ICc1MDAgNjAwIDcwMCA4MDAnXG4gIH0sXG4gICd0ZWFsJzoge1xuICAgICc1MCc6ICcjZTBmMmYxJyxcbiAgICAnMTAwJzogJyNiMmRmZGInLFxuICAgICcyMDAnOiAnIzgwY2JjNCcsXG4gICAgJzMwMCc6ICcjNGRiNmFjJyxcbiAgICAnNDAwJzogJyMyNmE2OWEnLFxuICAgICc1MDAnOiAnIzAwOTY4OCcsXG4gICAgJzYwMCc6ICcjMDA4OTdiJyxcbiAgICAnNzAwJzogJyMwMDc5NmInLFxuICAgICc4MDAnOiAnIzAwNjk1YycsXG4gICAgJzkwMCc6ICcjMDA0ZDQwJyxcbiAgICAnQTEwMCc6ICcjYTdmZmViJyxcbiAgICAnQTIwMCc6ICcjNjRmZmRhJyxcbiAgICAnQTQwMCc6ICcjMWRlOWI2JyxcbiAgICAnQTcwMCc6ICcjMDBiZmE1JyxcbiAgICAnY29udHJhc3REZWZhdWx0Q29sb3InOiAnZGFyaycsXG4gICAgJ2NvbnRyYXN0TGlnaHRDb2xvcnMnOiAnNTAwIDYwMCA3MDAgODAwIDkwMCcsXG4gICAgJ2NvbnRyYXN0U3Ryb25nTGlnaHRDb2xvcnMnOiAnNTAwIDYwMCA3MDAnXG4gIH0sXG4gICdncmVlbic6IHtcbiAgICAnNTAnOiAnI2U4ZjVlOScsXG4gICAgJzEwMCc6ICcjYzhlNmM5JyxcbiAgICAnMjAwJzogJyNhNWQ2YTcnLFxuICAgICczMDAnOiAnIzgxYzc4NCcsXG4gICAgJzQwMCc6ICcjNjZiYjZhJyxcbiAgICAnNTAwJzogJyM0Y2FmNTAnLFxuICAgICc2MDAnOiAnIzQzYTA0NycsXG4gICAgJzcwMCc6ICcjMzg4ZTNjJyxcbiAgICAnODAwJzogJyMyZTdkMzInLFxuICAgICc5MDAnOiAnIzFiNWUyMCcsXG4gICAgJ0ExMDAnOiAnI2I5ZjZjYScsXG4gICAgJ0EyMDAnOiAnIzY5ZjBhZScsXG4gICAgJ0E0MDAnOiAnIzAwZTY3NicsXG4gICAgJ0E3MDAnOiAnIzAwYzg1MycsXG4gICAgJ2NvbnRyYXN0RGVmYXVsdENvbG9yJzogJ2RhcmsnLFxuICAgICdjb250cmFzdExpZ2h0Q29sb3JzJzogJzUwMCA2MDAgNzAwIDgwMCA5MDAnLFxuICAgICdjb250cmFzdFN0cm9uZ0xpZ2h0Q29sb3JzJzogJzUwMCA2MDAgNzAwJ1xuICB9LFxuICAnbGlnaHQtZ3JlZW4nOiB7XG4gICAgJzUwJzogJyNmMWY4ZTknLFxuICAgICcxMDAnOiAnI2RjZWRjOCcsXG4gICAgJzIwMCc6ICcjYzVlMWE1JyxcbiAgICAnMzAwJzogJyNhZWQ1ODEnLFxuICAgICc0MDAnOiAnIzljY2M2NScsXG4gICAgJzUwMCc6ICcjOGJjMzRhJyxcbiAgICAnNjAwJzogJyM3Y2IzNDInLFxuICAgICc3MDAnOiAnIzY4OWYzOCcsXG4gICAgJzgwMCc6ICcjNTU4YjJmJyxcbiAgICAnOTAwJzogJyMzMzY5MWUnLFxuICAgICdBMTAwJzogJyNjY2ZmOTAnLFxuICAgICdBMjAwJzogJyNiMmZmNTknLFxuICAgICdBNDAwJzogJyM3NmZmMDMnLFxuICAgICdBNzAwJzogJyM2NGRkMTcnLFxuICAgICdjb250cmFzdERlZmF1bHRDb2xvcic6ICdkYXJrJyxcbiAgICAnY29udHJhc3RMaWdodENvbG9ycyc6ICc4MDAgOTAwJyxcbiAgICAnY29udHJhc3RTdHJvbmdMaWdodENvbG9ycyc6ICc4MDAgOTAwJ1xuICB9LFxuICAnbGltZSc6IHtcbiAgICAnNTAnOiAnI2Y5ZmJlNycsXG4gICAgJzEwMCc6ICcjZjBmNGMzJyxcbiAgICAnMjAwJzogJyNlNmVlOWMnLFxuICAgICczMDAnOiAnI2RjZTc3NScsXG4gICAgJzQwMCc6ICcjZDRlMTU3JyxcbiAgICAnNTAwJzogJyNjZGRjMzknLFxuICAgICc2MDAnOiAnI2MwY2EzMycsXG4gICAgJzcwMCc6ICcjYWZiNDJiJyxcbiAgICAnODAwJzogJyM5ZTlkMjQnLFxuICAgICc5MDAnOiAnIzgyNzcxNycsXG4gICAgJ0ExMDAnOiAnI2Y0ZmY4MScsXG4gICAgJ0EyMDAnOiAnI2VlZmY0MScsXG4gICAgJ0E0MDAnOiAnI2M2ZmYwMCcsXG4gICAgJ0E3MDAnOiAnI2FlZWEwMCcsXG4gICAgJ2NvbnRyYXN0RGVmYXVsdENvbG9yJzogJ2RhcmsnLFxuICAgICdjb250cmFzdExpZ2h0Q29sb3JzJzogJzkwMCcsXG4gICAgJ2NvbnRyYXN0U3Ryb25nTGlnaHRDb2xvcnMnOiAnOTAwJ1xuICB9LFxuICAneWVsbG93Jzoge1xuICAgICc1MCc6ICcjZmZmZGU3JyxcbiAgICAnMTAwJzogJyNmZmY5YzQnLFxuICAgICcyMDAnOiAnI2ZmZjU5ZCcsXG4gICAgJzMwMCc6ICcjZmZmMTc2JyxcbiAgICAnNDAwJzogJyNmZmVlNTgnLFxuICAgICc1MDAnOiAnI2ZmZWIzYicsXG4gICAgJzYwMCc6ICcjZmRkODM1JyxcbiAgICAnNzAwJzogJyNmYmMwMmQnLFxuICAgICc4MDAnOiAnI2Y5YTgyNScsXG4gICAgJzkwMCc6ICcjZjU3ZjE3JyxcbiAgICAnQTEwMCc6ICcjZmZmZjhkJyxcbiAgICAnQTIwMCc6ICcjZmZmZjAwJyxcbiAgICAnQTQwMCc6ICcjZmZlYTAwJyxcbiAgICAnQTcwMCc6ICcjZmZkNjAwJyxcbiAgICAnY29udHJhc3REZWZhdWx0Q29sb3InOiAnZGFyaydcbiAgfSxcbiAgJ2FtYmVyJzoge1xuICAgICc1MCc6ICcjZmZmOGUxJyxcbiAgICAnMTAwJzogJyNmZmVjYjMnLFxuICAgICcyMDAnOiAnI2ZmZTA4MicsXG4gICAgJzMwMCc6ICcjZmZkNTRmJyxcbiAgICAnNDAwJzogJyNmZmNhMjgnLFxuICAgICc1MDAnOiAnI2ZmYzEwNycsXG4gICAgJzYwMCc6ICcjZmZiMzAwJyxcbiAgICAnNzAwJzogJyNmZmEwMDAnLFxuICAgICc4MDAnOiAnI2ZmOGYwMCcsXG4gICAgJzkwMCc6ICcjZmY2ZjAwJyxcbiAgICAnQTEwMCc6ICcjZmZlNTdmJyxcbiAgICAnQTIwMCc6ICcjZmZkNzQwJyxcbiAgICAnQTQwMCc6ICcjZmZjNDAwJyxcbiAgICAnQTcwMCc6ICcjZmZhYjAwJyxcbiAgICAnY29udHJhc3REZWZhdWx0Q29sb3InOiAnZGFyaydcbiAgfSxcbiAgJ29yYW5nZSc6IHtcbiAgICAnNTAnOiAnI2ZmZjNlMCcsXG4gICAgJzEwMCc6ICcjZmZlMGIyJyxcbiAgICAnMjAwJzogJyNmZmNjODAnLFxuICAgICczMDAnOiAnI2ZmYjc0ZCcsXG4gICAgJzQwMCc6ICcjZmZhNzI2JyxcbiAgICAnNTAwJzogJyNmZjk4MDAnLFxuICAgICc2MDAnOiAnI2ZiOGMwMCcsXG4gICAgJzcwMCc6ICcjZjU3YzAwJyxcbiAgICAnODAwJzogJyNlZjZjMDAnLFxuICAgICc5MDAnOiAnI2U2NTEwMCcsXG4gICAgJ0ExMDAnOiAnI2ZmZDE4MCcsXG4gICAgJ0EyMDAnOiAnI2ZmYWI0MCcsXG4gICAgJ0E0MDAnOiAnI2ZmOTEwMCcsXG4gICAgJ0E3MDAnOiAnI2ZmNmQwMCcsXG4gICAgJ2NvbnRyYXN0RGVmYXVsdENvbG9yJzogJ2RhcmsnLFxuICAgICdjb250cmFzdExpZ2h0Q29sb3JzJzogJzgwMCA5MDAnLFxuICAgICdjb250cmFzdFN0cm9uZ0xpZ2h0Q29sb3JzJzogJzgwMCA5MDAnXG4gIH0sXG4gICdkZWVwLW9yYW5nZSc6IHtcbiAgICAnNTAnOiAnI2ZiZTllNycsXG4gICAgJzEwMCc6ICcjZmZjY2JjJyxcbiAgICAnMjAwJzogJyNmZmFiOTEnLFxuICAgICczMDAnOiAnI2ZmOGE2NScsXG4gICAgJzQwMCc6ICcjZmY3MDQzJyxcbiAgICAnNTAwJzogJyNmZjU3MjInLFxuICAgICc2MDAnOiAnI2Y0NTExZScsXG4gICAgJzcwMCc6ICcjZTY0YTE5JyxcbiAgICAnODAwJzogJyNkODQzMTUnLFxuICAgICc5MDAnOiAnI2JmMzYwYycsXG4gICAgJ0ExMDAnOiAnI2ZmOWU4MCcsXG4gICAgJ0EyMDAnOiAnI2ZmNmU0MCcsXG4gICAgJ0E0MDAnOiAnI2ZmM2QwMCcsXG4gICAgJ0E3MDAnOiAnI2RkMmMwMCcsXG4gICAgJ2NvbnRyYXN0RGVmYXVsdENvbG9yJzogJ2xpZ2h0JyxcbiAgICAnY29udHJhc3REYXJrQ29sb3JzJzogJzUwIDEwMCAyMDAgMzAwIDQwMCBBMTAwIEEyMDAnLFxuICAgICdjb250cmFzdFN0cm9uZ0xpZ2h0Q29sb3JzJzogJzUwMCA2MDAgNzAwIDgwMCA5MDAgQTQwMCBBNzAwJ1xuICB9LFxuICAnYnJvd24nOiB7XG4gICAgJzUwJzogJyNlZmViZTknLFxuICAgICcxMDAnOiAnI2Q3Y2NjOCcsXG4gICAgJzIwMCc6ICcjYmNhYWE0JyxcbiAgICAnMzAwJzogJyNhMTg4N2YnLFxuICAgICc0MDAnOiAnIzhkNmU2MycsXG4gICAgJzUwMCc6ICcjNzk1NTQ4JyxcbiAgICAnNjAwJzogJyM2ZDRjNDEnLFxuICAgICc3MDAnOiAnIzVkNDAzNycsXG4gICAgJzgwMCc6ICcjNGUzNDJlJyxcbiAgICAnOTAwJzogJyMzZTI3MjMnLFxuICAgICdBMTAwJzogJyNkN2NjYzgnLFxuICAgICdBMjAwJzogJyNiY2FhYTQnLFxuICAgICdBNDAwJzogJyM4ZDZlNjMnLFxuICAgICdBNzAwJzogJyM1ZDQwMzcnLFxuICAgICdjb250cmFzdERlZmF1bHRDb2xvcic6ICdsaWdodCcsXG4gICAgJ2NvbnRyYXN0RGFya0NvbG9ycyc6ICc1MCAxMDAgMjAwJyxcbiAgICAnY29udHJhc3RTdHJvbmdMaWdodENvbG9ycyc6ICczMDAgNDAwJ1xuICB9LFxuICAnZ3JleSc6IHtcbiAgICAnMCc6ICcjZmZmZmZmJyxcbiAgICAnNTAnOiAnI2ZhZmFmYScsXG4gICAgJzEwMCc6ICcjZjVmNWY1JyxcbiAgICAnMjAwJzogJyNlZWVlZWUnLFxuICAgICczMDAnOiAnI2UwZTBlMCcsXG4gICAgJzQwMCc6ICcjYmRiZGJkJyxcbiAgICAnNTAwJzogJyM5ZTllOWUnLFxuICAgICc2MDAnOiAnIzc1NzU3NScsXG4gICAgJzcwMCc6ICcjNjE2MTYxJyxcbiAgICAnODAwJzogJyM0MjQyNDInLFxuICAgICc5MDAnOiAnIzIxMjEyMScsXG4gICAgJzEwMDAnOiAnIzAwMDAwMCcsXG4gICAgJ0ExMDAnOiAnI2ZmZmZmZicsXG4gICAgJ0EyMDAnOiAnI2VlZWVlZScsXG4gICAgJ0E0MDAnOiAnI2JkYmRiZCcsXG4gICAgJ0E3MDAnOiAnIzYxNjE2MScsXG4gICAgJ2NvbnRyYXN0RGVmYXVsdENvbG9yJzogJ2RhcmsnLFxuICAgICdjb250cmFzdExpZ2h0Q29sb3JzJzogJzYwMCA3MDAgODAwIDkwMCdcbiAgfSxcbiAgJ2JsdWUtZ3JleSc6IHtcbiAgICAnNTAnOiAnI2VjZWZmMScsXG4gICAgJzEwMCc6ICcjY2ZkOGRjJyxcbiAgICAnMjAwJzogJyNiMGJlYzUnLFxuICAgICczMDAnOiAnIzkwYTRhZScsXG4gICAgJzQwMCc6ICcjNzg5MDljJyxcbiAgICAnNTAwJzogJyM2MDdkOGInLFxuICAgICc2MDAnOiAnIzU0NmU3YScsXG4gICAgJzcwMCc6ICcjNDU1YTY0JyxcbiAgICAnODAwJzogJyMzNzQ3NGYnLFxuICAgICc5MDAnOiAnIzI2MzIzOCcsXG4gICAgJ0ExMDAnOiAnI2NmZDhkYycsXG4gICAgJ0EyMDAnOiAnI2IwYmVjNScsXG4gICAgJ0E0MDAnOiAnIzc4OTA5YycsXG4gICAgJ0E3MDAnOiAnIzQ1NWE2NCcsXG4gICAgJ2NvbnRyYXN0RGVmYXVsdENvbG9yJzogJ2xpZ2h0JyxcbiAgICAnY29udHJhc3REYXJrQ29sb3JzJzogJzUwIDEwMCAyMDAgMzAwJyxcbiAgICAnY29udHJhc3RTdHJvbmdMaWdodENvbG9ycyc6ICc0MDAgNTAwJ1xuICB9XG59KTtcbn0pKCk7XG5cbi8qIVxuICogQW5ndWxhciBNYXRlcmlhbCBEZXNpZ25cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL21hdGVyaWFsXG4gKiBAbGljZW5zZSBNSVRcbiAqIHYwLjcuMVxuICovXG4oZnVuY3Rpb24oKSB7XG4ndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXIubW9kdWxlKCdtYXRlcmlhbC5jb3JlLnRoZW1pbmcnLCBbJ21hdGVyaWFsLmNvcmUudGhlbWluZy5wYWxldHRlJ10pXG4gIC5kaXJlY3RpdmUoJ21kVGhlbWUnLCBUaGVtaW5nRGlyZWN0aXZlKVxuICAuZGlyZWN0aXZlKCdtZFRoZW1hYmxlJywgVGhlbWFibGVEaXJlY3RpdmUpXG4gIC5wcm92aWRlcignJG1kVGhlbWluZycsIFRoZW1pbmdQcm92aWRlcilcbiAgLnJ1bihnZW5lcmF0ZVRoZW1lcyk7XG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkbWRUaGVtaW5nUHJvdmlkZXJcbiAqIEBtb2R1bGUgbWF0ZXJpYWwuY29yZVxuICpcbiAqIEBkZXNjcmlwdGlvbiBQcm92aWRlciB0byBjb25maWd1cmUgdGhlIGAkbWRUaGVtaW5nYCBzZXJ2aWNlLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJG1kVGhlbWluZ1Byb3ZpZGVyI3NldERlZmF1bHRUaGVtZVxuICogQHBhcmFtIHtzdHJpbmd9IHRoZW1lTmFtZSBEZWZhdWx0IHRoZW1lIG5hbWUgdG8gYmUgYXBwbGllZCB0byBlbGVtZW50cy4gRGVmYXVsdCB2YWx1ZSBpcyBgZGVmYXVsdGAuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkbWRUaGVtaW5nUHJvdmlkZXIjYWx3YXlzV2F0Y2hUaGVtZVxuICogQHBhcmFtIHtib29sZWFufSB3YXRjaCBXaGV0aGVyIG9yIG5vdCB0byBhbHdheXMgd2F0Y2ggdGhlbWVzIGZvciBjaGFuZ2VzIGFuZCByZS1hcHBseVxuICogY2xhc3NlcyB3aGVuIHRoZXkgY2hhbmdlLiBEZWZhdWx0IGlzIGBmYWxzZWAuIEVuYWJsaW5nIGNhbiByZWR1Y2UgcGVyZm9ybWFuY2UuXG4gKi9cblxuLy8gSW4gbWVtb3J5IHN0b3JhZ2Ugb2YgZGVmaW5lZCB0aGVtZXMgYW5kIGNvbG9yIHBhbGV0dGVzIChib3RoIGxvYWRlZCBieSBDU1MsIGFuZCB1c2VyIHNwZWNpZmllZClcbnZhciBQQUxFVFRFUztcbnZhciBUSEVNRVM7XG52YXIgdGhlbWluZ1Byb3ZpZGVyO1xudmFyIGdlbmVyYXRpb25Jc0RvbmU7XG5cbnZhciBEQVJLX0ZPUkVHUk9VTkQgPSB7XG4gIG5hbWU6ICdkYXJrJyxcbiAgJzEnOiAncmdiYSgwLDAsMCwwLjg3KScsXG4gICcyJzogJ3JnYmEoMCwwLDAsMC41NCknLFxuICAnMyc6ICdyZ2JhKDAsMCwwLDAuMjYpJyxcbiAgJzQnOiAncmdiYSgwLDAsMCwwLjEyKSdcbn07XG52YXIgTElHSFRfRk9SRUdST1VORCA9IHtcbiAgbmFtZTogJ2xpZ2h0JyxcbiAgJzEnOiAncmdiYSgyNTUsMjU1LDI1NSwxLjApJyxcbiAgJzInOiAncmdiYSgyNTUsMjU1LDI1NSwwLjcpJyxcbiAgJzMnOiAncmdiYSgyNTUsMjU1LDI1NSwwLjMpJyxcbiAgJzQnOiAncmdiYSgyNTUsMjU1LDI1NSwwLjEyKSdcbn07XG5cbnZhciBEQVJLX1NIQURPVyA9ICcxcHggMXB4IDBweCByZ2JhKDAsMCwwLDAuNCksIC0xcHggLTFweCAwcHggcmdiYSgwLDAsMCwwLjQpJztcbnZhciBMSUdIVF9TSEFET1cgPSAnJztcblxudmFyIERBUktfQ09OVFJBU1RfQ09MT1IgPSBjb2xvclRvUmdiYUFycmF5KCdyZ2JhKDAsMCwwLDAuODcpJyk7XG52YXIgTElHSFRfQ09OVFJBU1RfQ09MT1IgPSBjb2xvclRvUmdiYUFycmF5KCdyZ2JhKDI1NSwyNTUsMjU1LDAuODcnKTtcbnZhciBTVFJPTkdfTElHSFRfQ09OVFJBU1RfQ09MT1IgPSBjb2xvclRvUmdiYUFycmF5KCdyZ2IoMjU1LDI1NSwyNTUpJyk7XG5cbnZhciBUSEVNRV9DT0xPUl9UWVBFUyA9IFsncHJpbWFyeScsICdhY2NlbnQnLCAnd2FybicsICdiYWNrZ3JvdW5kJ107XG52YXIgREVGQVVMVF9DT0xPUl9UWVBFID0gJ3ByaW1hcnknO1xuXG4vLyBBIGNvbG9yIGluIGEgdGhlbWUgd2lsbCB1c2UgdGhlc2UgaHVlcyBieSBkZWZhdWx0LCBpZiBub3Qgc3BlY2lmaWVkIGJ5IHVzZXIuXG52YXIgTElHSFRfREVGQVVMVF9IVUVTID0ge1xuICAnYWNjZW50Jzoge1xuICAgICdkZWZhdWx0JzogJ0EyMDAnLFxuICAgICdodWUtMSc6ICdBMTAwJyxcbiAgICAnaHVlLTInOiAnQTQwMCcsXG4gICAgJ2h1ZS0zJzogJ0E3MDAnXG4gIH1cbn07XG52YXIgREFSS19ERUZBVUxUX0hVRVMgPSB7XG4gICdiYWNrZ3JvdW5kJzoge1xuICAgICdkZWZhdWx0JzogJzUwMCcsXG4gICAgJ2h1ZS0xJzogJzMwMCcsXG4gICAgJ2h1ZS0yJzogJzYwMCcsXG4gICAgJ2h1ZS0zJzogJzgwMCdcbiAgfVxufTtcblRIRU1FX0NPTE9SX1RZUEVTLmZvckVhY2goZnVuY3Rpb24oY29sb3JUeXBlKSB7XG4gIC8vIENvbG9yIHR5cGVzIHdpdGggdW5zcGVjaWZpZWQgZGVmYXVsdCBodWVzIHdpbGwgdXNlIHRoZXNlIGRlZmF1bHQgaHVlIHZhbHVlc1xuICB2YXIgZGVmYXVsdERlZmF1bHRIdWVzID0ge1xuICAgICdkZWZhdWx0JzogJzUwMCcsXG4gICAgJ2h1ZS0xJzogJzMwMCcsXG4gICAgJ2h1ZS0yJzogJzgwMCcsXG4gICAgJ2h1ZS0zJzogJ0ExMDAnXG4gIH07XG4gIGlmICghTElHSFRfREVGQVVMVF9IVUVTW2NvbG9yVHlwZV0pIExJR0hUX0RFRkFVTFRfSFVFU1tjb2xvclR5cGVdID0gZGVmYXVsdERlZmF1bHRIdWVzO1xuICBpZiAoIURBUktfREVGQVVMVF9IVUVTW2NvbG9yVHlwZV0pIERBUktfREVGQVVMVF9IVUVTW2NvbG9yVHlwZV0gPSBkZWZhdWx0RGVmYXVsdEh1ZXM7XG59KTtcblxudmFyIFZBTElEX0hVRV9WQUxVRVMgPSBbXG4gICc1MCcsICcxMDAnLCAnMjAwJywgJzMwMCcsICc0MDAnLCAnNTAwJywgJzYwMCcsXG4gICc3MDAnLCAnODAwJywgJzkwMCcsICdBMTAwJywgJ0EyMDAnLCAnQTQwMCcsICdBNzAwJ1xuXTtcblxuZnVuY3Rpb24gVGhlbWluZ1Byb3ZpZGVyKCRtZENvbG9yUGFsZXR0ZSkge1xuICBQQUxFVFRFUyA9IHt9O1xuICBUSEVNRVMgPSB7fTtcbiAgdmFyIGRlZmF1bHRUaGVtZSA9ICdkZWZhdWx0JztcbiAgdmFyIGFsd2F5c1dhdGNoVGhlbWUgPSBmYWxzZTtcblxuICAvLyBMb2FkIEpTIERlZmluZWQgUGFsZXR0ZXNcbiAgYW5ndWxhci5leHRlbmQoUEFMRVRURVMsICRtZENvbG9yUGFsZXR0ZSk7XG5cbiAgLy8gRGVmYXVsdCB0aGVtZSBkZWZpbmVkIGluIGNvcmUuanNcblxuICBUaGVtaW5nU2VydmljZS4kaW5qZWN0ID0gW1wiJHJvb3RTY29wZVwiLCBcIiRsb2dcIl07XG4gIHJldHVybiB0aGVtaW5nUHJvdmlkZXIgPSB7XG4gICAgZGVmaW5lUGFsZXR0ZTogZGVmaW5lUGFsZXR0ZSxcbiAgICBleHRlbmRQYWxldHRlOiBleHRlbmRQYWxldHRlLFxuICAgIHRoZW1lOiByZWdpc3RlclRoZW1lLFxuXG4gICAgc2V0RGVmYXVsdFRoZW1lOiBmdW5jdGlvbih0aGVtZSkge1xuICAgICAgZGVmYXVsdFRoZW1lID0gdGhlbWU7XG4gICAgfSxcbiAgICBhbHdheXNXYXRjaFRoZW1lOiBmdW5jdGlvbihhbHdheXNXYXRjaCkge1xuICAgICAgYWx3YXlzV2F0Y2hUaGVtZSA9IGFsd2F5c1dhdGNoO1xuICAgIH0sXG4gICAgJGdldDogVGhlbWluZ1NlcnZpY2UsXG4gICAgX0xJR0hUX0RFRkFVTFRfSFVFUzogTElHSFRfREVGQVVMVF9IVUVTLFxuICAgIF9EQVJLX0RFRkFVTFRfSFVFUzogREFSS19ERUZBVUxUX0hVRVMsXG4gICAgX1BBTEVUVEVTOiBQQUxFVFRFUyxcbiAgICBfVEhFTUVTOiBUSEVNRVMsXG4gICAgX3BhcnNlUnVsZXM6IHBhcnNlUnVsZXMsXG4gICAgX3JnYmE6IHJnYmFcbiAgfTtcblxuICAvLyBFeGFtcGxlOiAkbWRUaGVtaW5nUHJvdmlkZXIuZGVmaW5lUGFsZXR0ZSgnbmVvblJlZCcsIHsgNTA6ICcjZjVmYWZhJywgLi4uIH0pO1xuICBmdW5jdGlvbiBkZWZpbmVQYWxldHRlKG5hbWUsIG1hcCkge1xuICAgIG1hcCA9IG1hcCB8fCB7fTtcbiAgICBQQUxFVFRFU1tuYW1lXSA9IGNoZWNrUGFsZXR0ZVZhbGlkKG5hbWUsIG1hcCk7XG4gICAgcmV0dXJuIHRoZW1pbmdQcm92aWRlcjtcbiAgfVxuXG4gIC8vIFJldHVybnMgYW4gbmV3IG9iamVjdCB3aGljaCBpcyBhIGNvcHkgb2YgYSBnaXZlbiBwYWxldHRlIGBuYW1lYCB3aXRoIHZhcmlhYmxlcyBmcm9tXG4gIC8vIGBtYXBgIG92ZXJ3cml0dGVuXG4gIC8vIEV4YW1wbGU6IHZhciBuZW9uUmVkTWFwID0gJG1kVGhlbWluZ1Byb3ZpZGVyLmV4dGVuZFBhbGV0dGUoJ3JlZCcsIHsgNTA6ICcjZjVmYWZhZmEnIH0pO1xuICBmdW5jdGlvbiBleHRlbmRQYWxldHRlKG5hbWUsIG1hcCkge1xuICAgIHJldHVybiBjaGVja1BhbGV0dGVWYWxpZChuYW1lLCAgYW5ndWxhci5leHRlbmQoe30sIFBBTEVUVEVTW25hbWVdIHx8IHt9LCBtYXApICk7XG4gIH1cblxuICAvLyBNYWtlIHN1cmUgdGhhdCBwYWxldHRlIGhhcyBhbGwgcmVxdWlyZWQgaHVlc1xuICBmdW5jdGlvbiBjaGVja1BhbGV0dGVWYWxpZChuYW1lLCBtYXApIHtcbiAgICB2YXIgbWlzc2luZ0NvbG9ycyA9IFZBTElEX0hVRV9WQUxVRVMuZmlsdGVyKGZ1bmN0aW9uKGZpZWxkKSB7XG4gICAgICByZXR1cm4gIW1hcFtmaWVsZF07XG4gICAgfSk7XG4gICAgaWYgKG1pc3NpbmdDb2xvcnMubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIGNvbG9ycyAlMSBpbiBwYWxldHRlICUyIVwiXG4gICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoJyUxJywgbWlzc2luZ0NvbG9ycy5qb2luKCcsICcpKVxuICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCclMicsIG5hbWUpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWFwO1xuICB9XG5cbiAgLy8gUmVnaXN0ZXIgYSB0aGVtZSAod2hpY2ggaXMgYSBjb2xsZWN0aW9uIG9mIGNvbG9yIHBhbGV0dGVzIHRvIHVzZSB3aXRoIHZhcmlvdXMgc3RhdGVzXG4gIC8vIGllLiB3YXJuLCBhY2NlbnQsIHByaW1hcnkgKVxuICAvLyBPcHRpb25hbGx5IGluaGVyaXQgZnJvbSBhbiBleGlzdGluZyB0aGVtZVxuICAvLyAkbWRUaGVtaW5nUHJvdmlkZXIudGhlbWUoJ2N1c3RvbS10aGVtZScpLnByaW1hcnlQYWxldHRlKCdyZWQnKTtcbiAgZnVuY3Rpb24gcmVnaXN0ZXJUaGVtZShuYW1lLCBpbmhlcml0RnJvbSkge1xuICAgIGluaGVyaXRGcm9tID0gaW5oZXJpdEZyb20gfHwgJ2RlZmF1bHQnO1xuICAgIGlmIChUSEVNRVNbbmFtZV0pIHJldHVybiBUSEVNRVNbbmFtZV07XG5cbiAgICB2YXIgcGFyZW50VGhlbWUgPSB0eXBlb2YgaW5oZXJpdEZyb20gPT09ICdzdHJpbmcnID8gVEhFTUVTW2luaGVyaXRGcm9tXSA6IGluaGVyaXRGcm9tO1xuICAgIHZhciB0aGVtZSA9IG5ldyBUaGVtZShuYW1lKTtcblxuICAgIGlmIChwYXJlbnRUaGVtZSkge1xuICAgICAgYW5ndWxhci5mb3JFYWNoKHBhcmVudFRoZW1lLmNvbG9ycywgZnVuY3Rpb24oY29sb3IsIGNvbG9yVHlwZSkge1xuICAgICAgICB0aGVtZS5jb2xvcnNbY29sb3JUeXBlXSA9IHtcbiAgICAgICAgICBuYW1lOiBjb2xvci5uYW1lLFxuICAgICAgICAgIC8vIE1ha2Ugc3VyZSBhIENPUFkgb2YgdGhlIGh1ZXMgaXMgZ2l2ZW4gdG8gdGhlIGNoaWxkIGNvbG9yLFxuICAgICAgICAgIC8vIG5vdCB0aGUgc2FtZSByZWZlcmVuY2UuXG4gICAgICAgICAgaHVlczogYW5ndWxhci5leHRlbmQoe30sIGNvbG9yLmh1ZXMpXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG4gICAgVEhFTUVTW25hbWVdID0gdGhlbWU7XG5cbiAgICByZXR1cm4gdGhlbWU7XG4gIH1cblxuICBmdW5jdGlvbiBUaGVtZShuYW1lKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHNlbGYubmFtZSA9IG5hbWU7XG4gICAgc2VsZi5jb2xvcnMgPSB7fTtcblxuICAgIHNlbGYuZGFyayA9IHNldERhcms7XG4gICAgc2V0RGFyayhmYWxzZSk7XG5cbiAgICBmdW5jdGlvbiBzZXREYXJrKGlzRGFyaykge1xuICAgICAgaXNEYXJrID0gYXJndW1lbnRzLmxlbmd0aCA9PT0gMCA/IHRydWUgOiAhIWlzRGFyaztcblxuICAgICAgLy8gSWYgbm8gY2hhbmdlLCBhYm9ydFxuICAgICAgaWYgKGlzRGFyayA9PT0gc2VsZi5pc0RhcmspIHJldHVybjtcblxuICAgICAgc2VsZi5pc0RhcmsgPSBpc0Rhcms7XG5cbiAgICAgIHNlbGYuZm9yZWdyb3VuZFBhbGV0dGUgPSBzZWxmLmlzRGFyayA/IExJR0hUX0ZPUkVHUk9VTkQgOiBEQVJLX0ZPUkVHUk9VTkQ7XG4gICAgICBzZWxmLmZvcmVncm91bmRTaGFkb3cgPSBzZWxmLmlzRGFyayA/IERBUktfU0hBRE9XIDogTElHSFRfU0hBRE9XO1xuICAgICAgXG4gICAgICAvLyBMaWdodCBhbmQgZGFyayB0aGVtZXMgaGF2ZSBkaWZmZXJlbnQgZGVmYXVsdCBodWVzLlxuICAgICAgLy8gR28gdGhyb3VnaCBlYWNoIGV4aXN0aW5nIGNvbG9yIHR5cGUgZm9yIHRoaXMgdGhlbWUsIGFuZCBmb3IgZXZlcnlcbiAgICAgIC8vIGh1ZSB2YWx1ZSB0aGF0IGlzIHN0aWxsIHRoZSBkZWZhdWx0IGh1ZSB2YWx1ZSBmcm9tIHRoZSBwcmV2aW91cyBsaWdodC9kYXJrIHNldHRpbmcsXG4gICAgICAvLyBzZXQgaXQgdG8gdGhlIGRlZmF1bHQgaHVlIHZhbHVlIGZyb20gdGhlIG5ldyBsaWdodC9kYXJrIHNldHRpbmcuXG4gICAgICB2YXIgbmV3RGVmYXVsdEh1ZXMgPSBzZWxmLmlzRGFyayA/IERBUktfREVGQVVMVF9IVUVTIDogTElHSFRfREVGQVVMVF9IVUVTO1xuICAgICAgdmFyIG9sZERlZmF1bHRIdWVzID0gc2VsZi5pc0RhcmsgPyBMSUdIVF9ERUZBVUxUX0hVRVMgOiBEQVJLX0RFRkFVTFRfSFVFUztcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaChuZXdEZWZhdWx0SHVlcywgZnVuY3Rpb24obmV3RGVmYXVsdHMsIGNvbG9yVHlwZSkge1xuICAgICAgICB2YXIgY29sb3IgPSBzZWxmLmNvbG9yc1tjb2xvclR5cGVdO1xuICAgICAgICB2YXIgb2xkRGVmYXVsdHMgPSBvbGREZWZhdWx0SHVlc1tjb2xvclR5cGVdO1xuICAgICAgICBpZiAoY29sb3IpIHtcbiAgICAgICAgICBmb3IgKHZhciBodWVOYW1lIGluIGNvbG9yLmh1ZXMpIHtcbiAgICAgICAgICAgIGlmIChjb2xvci5odWVzW2h1ZU5hbWVdID09PSBvbGREZWZhdWx0c1todWVOYW1lXSkge1xuICAgICAgICAgICAgICBjb2xvci5odWVzW2h1ZU5hbWVdID0gbmV3RGVmYXVsdHNbaHVlTmFtZV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfVxuXG4gICAgVEhFTUVfQ09MT1JfVFlQRVMuZm9yRWFjaChmdW5jdGlvbihjb2xvclR5cGUpIHtcbiAgICAgIHZhciBkZWZhdWx0SHVlcyA9IChzZWxmLmlzRGFyayA/IERBUktfREVGQVVMVF9IVUVTIDogTElHSFRfREVGQVVMVF9IVUVTKVtjb2xvclR5cGVdO1xuICAgICAgc2VsZltjb2xvclR5cGUgKyAnUGFsZXR0ZSddID0gZnVuY3Rpb24gc2V0UGFsZXR0ZVR5cGUocGFsZXR0ZU5hbWUsIGh1ZXMpIHtcbiAgICAgICAgdmFyIGNvbG9yID0gc2VsZi5jb2xvcnNbY29sb3JUeXBlXSA9IHtcbiAgICAgICAgICBuYW1lOiBwYWxldHRlTmFtZSxcbiAgICAgICAgICBodWVzOiBhbmd1bGFyLmV4dGVuZCh7fSwgZGVmYXVsdEh1ZXMsIGh1ZXMpXG4gICAgICAgIH07XG5cbiAgICAgICAgT2JqZWN0LmtleXMoY29sb3IuaHVlcykuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgICAgaWYgKCFkZWZhdWx0SHVlc1tuYW1lXSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBodWUgbmFtZSAnJTEnIGluIHRoZW1lICUyJ3MgJTMgY29sb3IgJTQuIEF2YWlsYWJsZSBodWUgbmFtZXM6ICU0XCJcbiAgICAgICAgICAgICAgLnJlcGxhY2UoJyUxJywgbmFtZSlcbiAgICAgICAgICAgICAgLnJlcGxhY2UoJyUyJywgc2VsZi5uYW1lKVxuICAgICAgICAgICAgICAucmVwbGFjZSgnJTMnLCBwYWxldHRlTmFtZSlcbiAgICAgICAgICAgICAgLnJlcGxhY2UoJyU0JywgT2JqZWN0LmtleXMoZGVmYXVsdEh1ZXMpLmpvaW4oJywgJykpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5rZXlzKGNvbG9yLmh1ZXMpLm1hcChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICByZXR1cm4gY29sb3IuaHVlc1trZXldO1xuICAgICAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uKGh1ZVZhbHVlKSB7XG4gICAgICAgICAgaWYgKFZBTElEX0hVRV9WQUxVRVMuaW5kZXhPZihodWVWYWx1ZSkgPT0gLTEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgaHVlIHZhbHVlICclMScgaW4gdGhlbWUgJTIncyAlMyBjb2xvciAlNC4gQXZhaWxhYmxlIGh1ZSB2YWx1ZXM6ICU1XCJcbiAgICAgICAgICAgICAgLnJlcGxhY2UoJyUxJywgaHVlVmFsdWUpXG4gICAgICAgICAgICAgIC5yZXBsYWNlKCclMicsIHNlbGYubmFtZSlcbiAgICAgICAgICAgICAgLnJlcGxhY2UoJyUzJywgY29sb3JUeXBlKVxuICAgICAgICAgICAgICAucmVwbGFjZSgnJTQnLCBwYWxldHRlTmFtZSlcbiAgICAgICAgICAgICAgLnJlcGxhY2UoJyU1JywgVkFMSURfSFVFX1ZBTFVFUy5qb2luKCcsICcpKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgIH07XG5cbiAgICAgIHNlbGZbY29sb3JUeXBlICsgJ0NvbG9yJ10gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgICBjb25zb2xlLndhcm4oJyRtZFRoZW1pbmdQcm92aWRlclRoZW1lLicgKyBjb2xvclR5cGUgKyAnQ29sb3IoKSBoYXMgYmVlbiBkZXByaWNhdGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICdVc2UgJG1kVGhlbWluZ1Byb3ZpZGVyVGhlbWUuJyArIGNvbG9yVHlwZSArICdQYWxldHRlKCkgaW5zdGVhZC4nKTtcbiAgICAgICAgcmV0dXJuIHNlbGZbY29sb3JUeXBlICsgJ1BhbGV0dGUnXS5hcHBseShzZWxmLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQG5nZG9jIHNlcnZpY2VcbiAgICogQG5hbWUgJG1kVGhlbWluZ1xuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogU2VydmljZSB0aGF0IG1ha2VzIGFuIGVsZW1lbnQgYXBwbHkgdGhlbWluZyByZWxhdGVkIGNsYXNzZXMgdG8gaXRzZWxmLlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiBhcHAuZGlyZWN0aXZlKCdteUZhbmN5RGlyZWN0aXZlJywgZnVuY3Rpb24oJG1kVGhlbWluZykge1xuICAgKiAgIHJldHVybiB7XG4gICAqICAgICByZXN0cmljdDogJ2UnLFxuICAgKiAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsLCBhdHRycykge1xuICAgKiAgICAgICAkbWRUaGVtaW5nKGVsKTtcbiAgICogICAgIH1cbiAgICogICB9O1xuICAgKiB9KTtcbiAgICogYGBgXG4gICAqIEBwYXJhbSB7ZWw9fSBlbGVtZW50IHRvIGFwcGx5IHRoZW1pbmcgdG9cbiAgICovXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBUaGVtaW5nU2VydmljZSgkcm9vdFNjb3BlLCAkbG9nKSB7XG4gICAgYXBwbHlUaGVtZS5pbmhlcml0ID0gZnVuY3Rpb24oZWwsIHBhcmVudCkge1xuICAgICAgdmFyIGN0cmwgPSBwYXJlbnQuY29udHJvbGxlcignbWRUaGVtZScpO1xuXG4gICAgICB2YXIgYXR0clRoZW1lVmFsdWUgPSBlbC5hdHRyKCdtZC10aGVtZS13YXRjaCcpO1xuICAgICAgaWYgKCAoYWx3YXlzV2F0Y2hUaGVtZSB8fCBhbmd1bGFyLmlzRGVmaW5lZChhdHRyVGhlbWVWYWx1ZSkpICYmIGF0dHJUaGVtZVZhbHVlICE9ICdmYWxzZScpIHtcbiAgICAgICAgdmFyIGRlcmVnaXN0ZXJXYXRjaCA9ICRyb290U2NvcGUuJHdhdGNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBjdHJsICYmIGN0cmwuJG1kVGhlbWUgfHwgZGVmYXVsdFRoZW1lO1xuICAgICAgICB9LCBjaGFuZ2VUaGVtZSk7XG4gICAgICAgIGVsLm9uKCckZGVzdHJveScsIGRlcmVnaXN0ZXJXYXRjaCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgdGhlbWUgPSBjdHJsICYmIGN0cmwuJG1kVGhlbWUgfHwgZGVmYXVsdFRoZW1lO1xuICAgICAgICBjaGFuZ2VUaGVtZSh0aGVtZSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNoYW5nZVRoZW1lKHRoZW1lKSB7XG4gICAgICAgIGlmICghcmVnaXN0ZXJlZCh0aGVtZSkpIHtcbiAgICAgICAgICAkbG9nLndhcm4oJ0F0dGVtcHRlZCB0byB1c2UgdW5yZWdpc3RlcmVkIHRoZW1lIFxcJycgKyB0aGVtZSArICdcXCcuICcgK1xuICAgICAgICAgICAgICAgICAgICAnUmVnaXN0ZXIgaXQgd2l0aCAkbWRUaGVtaW5nUHJvdmlkZXIudGhlbWUoKS4nKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb2xkVGhlbWUgPSBlbC5kYXRhKCckbWRUaGVtZU5hbWUnKTtcbiAgICAgICAgaWYgKG9sZFRoZW1lKSBlbC5yZW1vdmVDbGFzcygnbWQtJyArIG9sZFRoZW1lICsnLXRoZW1lJyk7XG4gICAgICAgIGVsLmFkZENsYXNzKCdtZC0nICsgdGhlbWUgKyAnLXRoZW1lJyk7XG4gICAgICAgIGVsLmRhdGEoJyRtZFRoZW1lTmFtZScsIHRoZW1lKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgYXBwbHlUaGVtZS5yZWdpc3RlcmVkID0gcmVnaXN0ZXJlZDtcblxuICAgIHJldHVybiBhcHBseVRoZW1lO1xuXG4gICAgZnVuY3Rpb24gcmVnaXN0ZXJlZCh0aGVtZSkge1xuICAgICAgaWYgKHRoZW1lID09PSB1bmRlZmluZWQgfHwgdGhlbWUgPT09ICcnKSByZXR1cm4gdHJ1ZTtcbiAgICAgIHJldHVybiBUSEVNRVNbdGhlbWVdICE9PSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwbHlUaGVtZShzY29wZSwgZWwpIHtcbiAgICAgIC8vIEFsbG93IHVzIHRvIGJlIGludm9rZWQgdmlhIGEgbGlua2luZyBmdW5jdGlvbiBzaWduYXR1cmUuXG4gICAgICBpZiAoZWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbCA9IHNjb3BlO1xuICAgICAgICBzY29wZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmIChzY29wZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHNjb3BlID0gJHJvb3RTY29wZTtcbiAgICAgIH1cbiAgICAgIGFwcGx5VGhlbWUuaW5oZXJpdChlbCwgZWwpO1xuICAgIH1cbiAgfVxufVxuVGhlbWluZ1Byb3ZpZGVyLiRpbmplY3QgPSBbXCIkbWRDb2xvclBhbGV0dGVcIl07XG5cbmZ1bmN0aW9uIFRoZW1pbmdEaXJlY3RpdmUoJG1kVGhlbWluZywgJGludGVycG9sYXRlLCAkbG9nKSB7XG4gIHJldHVybiB7XG4gICAgcHJpb3JpdHk6IDEwMCxcbiAgICBsaW5rOiB7XG4gICAgICBwcmU6IGZ1bmN0aW9uKHNjb3BlLCBlbCwgYXR0cnMpIHtcbiAgICAgICAgdmFyIGN0cmwgPSB7XG4gICAgICAgICAgJHNldFRoZW1lOiBmdW5jdGlvbih0aGVtZSkge1xuICAgICAgICAgICAgaWYgKCEkbWRUaGVtaW5nLnJlZ2lzdGVyZWQodGhlbWUpKSB7XG4gICAgICAgICAgICAgICRsb2cud2FybignYXR0ZW1wdGVkIHRvIHVzZSB1bnJlZ2lzdGVyZWQgdGhlbWUgXFwnJyArIHRoZW1lICsgJ1xcJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3RybC4kbWRUaGVtZSA9IHRoZW1lO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZWwuZGF0YSgnJG1kVGhlbWVDb250cm9sbGVyJywgY3RybCk7XG4gICAgICAgIGN0cmwuJHNldFRoZW1lKCRpbnRlcnBvbGF0ZShhdHRycy5tZFRoZW1lKShzY29wZSkpO1xuICAgICAgICBhdHRycy4kb2JzZXJ2ZSgnbWRUaGVtZScsIGN0cmwuJHNldFRoZW1lKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5UaGVtaW5nRGlyZWN0aXZlLiRpbmplY3QgPSBbXCIkbWRUaGVtaW5nXCIsIFwiJGludGVycG9sYXRlXCIsIFwiJGxvZ1wiXTtcblxuZnVuY3Rpb24gVGhlbWFibGVEaXJlY3RpdmUoJG1kVGhlbWluZykge1xuICByZXR1cm4gJG1kVGhlbWluZztcbn1cblRoZW1hYmxlRGlyZWN0aXZlLiRpbmplY3QgPSBbXCIkbWRUaGVtaW5nXCJdO1xuXG5mdW5jdGlvbiBwYXJzZVJ1bGVzKHRoZW1lLCBjb2xvclR5cGUsIHJ1bGVzKSB7XG4gIGNoZWNrVmFsaWRQYWxldHRlKHRoZW1lLCBjb2xvclR5cGUpO1xuXG4gIHJ1bGVzID0gcnVsZXMucmVwbGFjZSgvVEhFTUVfTkFNRS9nLCB0aGVtZS5uYW1lKTtcbiAgdmFyIGdlbmVyYXRlZFJ1bGVzID0gW107XG4gIHZhciBjb2xvciA9IHRoZW1lLmNvbG9yc1tjb2xvclR5cGVdO1xuXG4gIHZhciB0aGVtZU5hbWVSZWdleCA9IG5ldyBSZWdFeHAoJy5tZC0nICsgdGhlbWUubmFtZSArICctdGhlbWUnLCAnZycpO1xuICAvLyBNYXRjaGVzICd7eyBwcmltYXJ5LWNvbG9yIH19JywgZXRjXG4gIHZhciBodWVSZWdleCA9IG5ldyBSZWdFeHAoJyhcXCd8XCIpP3t7XFxcXHMqKCcgKyBjb2xvclR5cGUgKyAnKS0oY29sb3J8Y29udHJhc3QpLT8oXFxcXGRcXFxcLj9cXFxcZCopP1xcXFxzKn19KFxcXCJ8XFwnKT8nLCdnJyk7XG4gIHZhciBzaW1wbGVWYXJpYWJsZVJlZ2V4ID0gLyc/XCI/XFx7XFx7XFxzKihbYS16QS1aXSspLShBP1xcZCt8aHVlXFwtWzAtM118c2hhZG93KS0/KFxcZFxcLj9cXGQqKT9cXHMqXFx9XFx9Jz9cIj8vZztcbiAgdmFyIHBhbGV0dGUgPSBQQUxFVFRFU1tjb2xvci5uYW1lXTtcblxuICAvLyBmaW5kIGFuZCByZXBsYWNlIHNpbXBsZSB2YXJpYWJsZXMgd2hlcmUgd2UgdXNlIGEgc3BlY2lmaWMgaHVlLCBub3QgYW5nZW50aXJlIHBhbGV0dGVcbiAgLy8gZWcuIFwie3twcmltYXJ5LTEwMH19XCJcbiAgLy9cXCgnICsgVEhFTUVfQ09MT1JfVFlQRVMuam9pbignXFx8JykgKyAnXFwpJ1xuICBydWxlcyA9IHJ1bGVzLnJlcGxhY2Uoc2ltcGxlVmFyaWFibGVSZWdleCwgZnVuY3Rpb24obWF0Y2gsIGNvbG9yVHlwZSwgaHVlLCBvcGFjaXR5KSB7XG4gICAgaWYgKGNvbG9yVHlwZSA9PT0gJ2ZvcmVncm91bmQnKSB7XG4gICAgICBpZiAoaHVlID09ICdzaGFkb3cnKSB7XG4gICAgICAgIHJldHVybiB0aGVtZS5mb3JlZ3JvdW5kU2hhZG93O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoZW1lLmZvcmVncm91bmRQYWxldHRlW2h1ZV0gfHwgdGhlbWUuZm9yZWdyb3VuZFBhbGV0dGVbJzEnXTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGh1ZS5pbmRleE9mKCdodWUnKSA9PT0gMCkge1xuICAgICAgaHVlID0gdGhlbWUuY29sb3JzW2NvbG9yVHlwZV0uaHVlc1todWVdO1xuICAgIH1cbiAgICByZXR1cm4gcmdiYSggKFBBTEVUVEVTWyB0aGVtZS5jb2xvcnNbY29sb3JUeXBlXS5uYW1lIF1baHVlXSB8fCAnJykudmFsdWUsIG9wYWNpdHkgKTtcbiAgfSk7XG5cbiAgLy8gRm9yIGVhY2ggdHlwZSwgZ2VuZXJhdGUgcnVsZXMgZm9yIGVhY2ggaHVlIChpZS4gZGVmYXVsdCwgbWQtaHVlLTEsIG1kLWh1ZS0yLCBtZC1odWUtMylcbiAgYW5ndWxhci5mb3JFYWNoKGNvbG9yLmh1ZXMsIGZ1bmN0aW9uKGh1ZVZhbHVlLCBodWVOYW1lKSB7XG4gICAgdmFyIG5ld1J1bGUgPSBydWxlc1xuICAgICAgLnJlcGxhY2UoaHVlUmVnZXgsIGZ1bmN0aW9uKG1hdGNoLCBfLCBjb2xvclR5cGUsIGh1ZVR5cGUsIG9wYWNpdHkpIHtcbiAgICAgICAgcmV0dXJuIHJnYmEocGFsZXR0ZVtodWVWYWx1ZV1baHVlVHlwZSA9PT0gJ2NvbG9yJyA/ICd2YWx1ZScgOiAnY29udHJhc3QnXSwgb3BhY2l0eSk7XG4gICAgICB9KTtcbiAgICBpZiAoaHVlTmFtZSAhPT0gJ2RlZmF1bHQnKSB7XG4gICAgICBuZXdSdWxlID0gbmV3UnVsZS5yZXBsYWNlKHRoZW1lTmFtZVJlZ2V4LCAnLm1kLScgKyB0aGVtZS5uYW1lICsgJy10aGVtZS5tZC0nICsgaHVlTmFtZSk7XG4gICAgfVxuICAgIGdlbmVyYXRlZFJ1bGVzLnB1c2gobmV3UnVsZSk7XG4gIH0pO1xuXG4gIHJldHVybiBnZW5lcmF0ZWRSdWxlcy5qb2luKCcnKTtcbn1cblxuLy8gR2VuZXJhdGUgb3VyIHRoZW1lcyBhdCBydW4gdGltZSBnaXZlbiB0aGUgc3RhdGUgb2YgVEhFTUVTIGFuZCBQQUxFVFRFU1xuZnVuY3Rpb24gZ2VuZXJhdGVUaGVtZXMoJGluamVjdG9yKSB7XG4gIHZhciB0aGVtZUNzcyA9ICRpbmplY3Rvci5oYXMoJyRNRF9USEVNRV9DU1MnKSA/ICRpbmplY3Rvci5nZXQoJyRNRF9USEVNRV9DU1MnKSA6ICcnO1xuXG4gIC8vIE1EX1RIRU1FX0NTUyBpcyBhIHN0cmluZyBnZW5lcmF0ZWQgYnkgdGhlIGJ1aWxkIHByb2Nlc3MgdGhhdCBpbmNsdWRlcyBhbGwgdGhlIHRoZW1hYmxlXG4gIC8vIGNvbXBvbmVudHMgYXMgdGVtcGxhdGVzXG5cbiAgLy8gRXhwb3NlIGNvbnRyYXN0IGNvbG9ycyBmb3IgcGFsZXR0ZXMgdG8gZW5zdXJlIHRoYXQgdGV4dCBpcyBhbHdheXMgcmVhZGFibGVcbiAgYW5ndWxhci5mb3JFYWNoKFBBTEVUVEVTLCBzYW5pdGl6ZVBhbGV0dGUpO1xuXG4gIC8vIEJyZWFrIHRoZSBDU1MgaW50byBpbmRpdmlkdWFsIHJ1bGVzXG4gIHZhciBydWxlcyA9IHRoZW1lQ3NzLnNwbGl0KC9cXH0oPyEoXFx9fCd8XCJ8OykpLylcbiAgICAuZmlsdGVyKGZ1bmN0aW9uKHJ1bGUpIHsgcmV0dXJuIHJ1bGUgJiYgcnVsZS5sZW5ndGg7IH0pXG4gICAgLm1hcChmdW5jdGlvbihydWxlKSB7IHJldHVybiBydWxlLnRyaW0oKSArICd9JzsgfSk7XG5cbiAgdmFyIHJ1bGVzQnlUeXBlID0ge307XG4gIFRIRU1FX0NPTE9SX1RZUEVTLmZvckVhY2goZnVuY3Rpb24odHlwZSkge1xuICAgIHJ1bGVzQnlUeXBlW3R5cGVdID0gJyc7XG4gIH0pO1xuICB2YXIgcnVsZU1hdGNoUmVnZXggPSBuZXcgUmVnRXhwKCdtZC0oJyArIFRIRU1FX0NPTE9SX1RZUEVTLmpvaW4oJ3wnKSArICcpJywgJ2cnKTtcblxuICAvLyBTb3J0IHRoZSBydWxlcyBiYXNlZCBvbiB0eXBlLCBhbGxvd2luZyB1cyB0byBkbyBjb2xvciBzdWJzdGl0dXRpb24gb24gYSBwZXItdHlwZSBiYXNpc1xuICBydWxlcy5mb3JFYWNoKGZ1bmN0aW9uKHJ1bGUpIHtcbiAgICB2YXIgbWF0Y2ggPSBydWxlLm1hdGNoKHJ1bGVNYXRjaFJlZ2V4KTtcbiAgICAvLyBGaXJzdDogdGVzdCB0aGF0IGlmIHRoZSBydWxlIGhhcyAnLm1kLWFjY2VudCcsIGl0IGdvZXMgaW50byB0aGUgYWNjZW50IHNldCBvZiBydWxlc1xuICAgIGZvciAodmFyIGkgPSAwLCB0eXBlOyB0eXBlID0gVEhFTUVfQ09MT1JfVFlQRVNbaV07IGkrKykge1xuICAgICAgaWYgKHJ1bGUuaW5kZXhPZignLm1kLScgKyB0eXBlKSA+IC0xKSB7XG4gICAgICAgIHJldHVybiBydWxlc0J5VHlwZVt0eXBlXSArPSBydWxlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIElmIG5vIGVnICdtZC1hY2NlbnQnIGNsYXNzIGlzIGZvdW5kLCB0cnkgdG8ganVzdCBmaW5kICdhY2NlbnQnIGluIHRoZSBydWxlIGFuZCBndWVzcyBmcm9tXG4gICAgLy8gdGhlcmVcbiAgICBmb3IgKGkgPSAwOyB0eXBlID0gVEhFTUVfQ09MT1JfVFlQRVNbaV07IGkrKykge1xuICAgICAgaWYgKHJ1bGUuaW5kZXhPZih0eXBlKSA+IC0xKSB7XG4gICAgICAgIHJldHVybiBydWxlc0J5VHlwZVt0eXBlXSArPSBydWxlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIERlZmF1bHQgdG8gdGhlIHByaW1hcnkgYXJyYXlcbiAgICByZXR1cm4gcnVsZXNCeVR5cGVbREVGQVVMVF9DT0xPUl9UWVBFXSArPSBydWxlO1xuICB9KTtcblxuICB2YXIgc3R5bGVTdHJpbmcgPSAnJztcblxuICAvLyBGb3IgZWFjaCB0aGVtZSwgdXNlIHRoZSBjb2xvciBwYWxldHRlcyBzcGVjaWZpZWQgZm9yIGBwcmltYXJ5YCwgYHdhcm5gIGFuZCBgYWNjZW50YFxuICAvLyB0byBnZW5lcmF0ZSBDU1MgcnVsZXMuXG4gIGFuZ3VsYXIuZm9yRWFjaChUSEVNRVMsIGZ1bmN0aW9uKHRoZW1lKSB7XG4gICAgVEhFTUVfQ09MT1JfVFlQRVMuZm9yRWFjaChmdW5jdGlvbihjb2xvclR5cGUpIHtcbiAgICAgIHN0eWxlU3RyaW5nICs9IHBhcnNlUnVsZXModGhlbWUsIGNvbG9yVHlwZSwgcnVsZXNCeVR5cGVbY29sb3JUeXBlXSArICcnKTtcbiAgICB9KTtcbiAgICBpZiAodGhlbWUuY29sb3JzLnByaW1hcnkubmFtZSA9PSB0aGVtZS5jb2xvcnMuYWNjZW50Lm5hbWUpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIiRtZFRoZW1pbmdQcm92aWRlcjogVXNpbmcgdGhlIHNhbWUgcGFsZXR0ZSBmb3IgcHJpbWFyeSBhbmRcIiArXG4gICAgICAgICAgICAgICAgICAgXCJhY2NlbnQuIFRoaXMgdmlvbGF0ZXMgdGhlIG1hdGVyaWFsIGRlc2lnbiBzcGVjLlwiKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIEluc2VydCBvdXIgbmV3bHkgbWludGVkIHN0eWxlcyBpbnRvIHRoZSBET01cbiAgaWYgKCFnZW5lcmF0aW9uSXNEb25lKSB7XG4gICAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICBzdHlsZS5pbm5lckhUTUwgPSBzdHlsZVN0cmluZztcbiAgICB2YXIgaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07XG4gICAgaGVhZC5pbnNlcnRCZWZvcmUoc3R5bGUsIGhlYWQuZmlyc3RFbGVtZW50Q2hpbGQpO1xuICAgIGdlbmVyYXRpb25Jc0RvbmUgPSB0cnVlO1xuICB9XG5cbiAgLy8gVGhlIHVzZXIgc3BlY2lmaWVzIGEgJ2RlZmF1bHQnIGNvbnRyYXN0IGNvbG9yIGFzIGVpdGhlciBsaWdodCBvciBkYXJrLFxuICAvLyB0aGVuIGV4cGxpY2l0bHkgbGlzdHMgd2hpY2ggaHVlcyBhcmUgdGhlIG9wcG9zaXRlIGNvbnRyYXN0IChlZy4gQTEwMCBoYXMgZGFyaywgQTIwMCBoYXMgbGlnaHQpXG4gIGZ1bmN0aW9uIHNhbml0aXplUGFsZXR0ZShwYWxldHRlKSB7XG4gICAgdmFyIGRlZmF1bHRDb250cmFzdCA9IHBhbGV0dGUuY29udHJhc3REZWZhdWx0Q29sb3I7XG4gICAgdmFyIGxpZ2h0Q29sb3JzID0gcGFsZXR0ZS5jb250cmFzdExpZ2h0Q29sb3JzIHx8IFtdO1xuICAgIHZhciBzdHJvbmdMaWdodENvbG9ycyA9IHBhbGV0dGUuY29udHJhc3RTdHJvbmdMaWdodENvbG9ycyB8fCBbXTtcbiAgICB2YXIgZGFya0NvbG9ycyA9IHBhbGV0dGUuY29udHJhc3REYXJrQ29sb3JzIHx8IFtdO1xuXG4gICAgLy8gVGhlc2UgY29sb3JzIGFyZSBwcm92aWRlZCBhcyBzcGFjZS1zZXBhcmF0ZWQgbGlzdHNcbiAgICBpZiAodHlwZW9mIGxpZ2h0Q29sb3JzID09PSAnc3RyaW5nJykgbGlnaHRDb2xvcnMgPSBsaWdodENvbG9ycy5zcGxpdCgnICcpO1xuICAgIGlmICh0eXBlb2Ygc3Ryb25nTGlnaHRDb2xvcnMgPT09ICdzdHJpbmcnKSBzdHJvbmdMaWdodENvbG9ycyA9IHN0cm9uZ0xpZ2h0Q29sb3JzLnNwbGl0KCcgJyk7XG4gICAgaWYgKHR5cGVvZiBkYXJrQ29sb3JzID09PSAnc3RyaW5nJykgZGFya0NvbG9ycyA9IGRhcmtDb2xvcnMuc3BsaXQoJyAnKTtcblxuICAgIC8vIENsZWFudXAgYWZ0ZXIgb3Vyc2VsdmVzXG4gICAgZGVsZXRlIHBhbGV0dGUuY29udHJhc3REZWZhdWx0Q29sb3I7XG4gICAgZGVsZXRlIHBhbGV0dGUuY29udHJhc3RMaWdodENvbG9ycztcbiAgICBkZWxldGUgcGFsZXR0ZS5jb250cmFzdFN0cm9uZ0xpZ2h0Q29sb3JzO1xuICAgIGRlbGV0ZSBwYWxldHRlLmNvbnRyYXN0RGFya0NvbG9ycztcblxuICAgIC8vIENoYW5nZSB7ICdBMTAwJzogJyNmZmZlZWUnIH0gdG8geyAnQTEwMCc6IHsgdmFsdWU6ICcjZmZmZWVlJywgY29udHJhc3Q6REFSS19DT05UUkFTVF9DT0xPUiB9XG4gICAgYW5ndWxhci5mb3JFYWNoKHBhbGV0dGUsIGZ1bmN0aW9uKGh1ZVZhbHVlLCBodWVOYW1lKSB7XG4gICAgICBpZiAoYW5ndWxhci5pc09iamVjdChodWVWYWx1ZSkpIHJldHVybjsgLy8gQWxyZWFkeSBjb252ZXJ0ZWRcbiAgICAgIC8vIE1hcCBldmVyeXRoaW5nIHRvIHJnYiBjb2xvcnNcbiAgICAgIHZhciByZ2JWYWx1ZSA9IGNvbG9yVG9SZ2JhQXJyYXkoaHVlVmFsdWUpO1xuICAgICAgaWYgKCFyZ2JWYWx1ZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb2xvciAlMSwgaW4gcGFsZXR0ZSAlMidzIGh1ZSAlMywgaXMgaW52YWxpZC4gSGV4IG9yIHJnYihhKSBjb2xvciBleHBlY3RlZC5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoJyUxJywgaHVlVmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgnJTInLCBwYWxldHRlLm5hbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgnJTMnLCBodWVOYW1lKSk7XG4gICAgICB9XG5cbiAgICAgIHBhbGV0dGVbaHVlTmFtZV0gPSB7XG4gICAgICAgIHZhbHVlOiByZ2JWYWx1ZSxcbiAgICAgICAgY29udHJhc3Q6IGdldENvbnRyYXN0Q29sb3IoKVxuICAgICAgfTtcbiAgICAgIGZ1bmN0aW9uIGdldENvbnRyYXN0Q29sb3IoKSB7XG4gICAgICAgIGlmIChkZWZhdWx0Q29udHJhc3QgPT09ICdsaWdodCcpIHtcbiAgICAgICAgICBpZiAoZGFya0NvbG9ycy5pbmRleE9mKGh1ZU5hbWUpID4gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiBEQVJLX0NPTlRSQVNUX0NPTE9SO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gc3Ryb25nTGlnaHRDb2xvcnMuaW5kZXhPZihodWVOYW1lKSA+IC0xID8gU1RST05HX0xJR0hUX0NPTlRSQVNUX0NPTE9SIFxuICAgICAgICAgICAgICA6IExJR0hUX0NPTlRSQVNUX0NPTE9SO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAobGlnaHRDb2xvcnMuaW5kZXhPZihodWVOYW1lKSA+IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gc3Ryb25nTGlnaHRDb2xvcnMuaW5kZXhPZihodWVOYW1lKSA+IC0xID8gU1RST05HX0xJR0hUX0NPTlRSQVNUX0NPTE9SIFxuICAgICAgICAgICAgICA6IExJR0hUX0NPTlRSQVNUX0NPTE9SO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gREFSS19DT05UUkFTVF9DT0xPUjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG59XG5nZW5lcmF0ZVRoZW1lcy4kaW5qZWN0ID0gW1wiJGluamVjdG9yXCJdO1xuXG5mdW5jdGlvbiBjaGVja1ZhbGlkUGFsZXR0ZSh0aGVtZSwgY29sb3JUeXBlKSB7XG4gIC8vIElmIHRoZW1lIGF0dGVtcHRzIHRvIHVzZSBhIHBhbGV0dGUgdGhhdCBkb2VzbnQgZXhpc3QsIHRocm93IGVycm9yXG4gIGlmICghUEFMRVRURVNbICh0aGVtZS5jb2xvcnNbY29sb3JUeXBlXSB8fCB7fSkubmFtZSBdKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJZb3Ugc3VwcGxpZWQgYW4gaW52YWxpZCBjb2xvciBwYWxldHRlIGZvciB0aGVtZSAlMSdzICUyIHBhbGV0dGUuIEF2YWlsYWJsZSBwYWxldHRlczogJTNcIlxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgnJTEnLCB0aGVtZS5uYW1lKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgnJTInLCBjb2xvclR5cGUpXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCclMycsIE9iamVjdC5rZXlzKFBBTEVUVEVTKS5qb2luKCcsICcpKVxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29sb3JUb1JnYmFBcnJheShjbHIpIHtcbiAgaWYgKGFuZ3VsYXIuaXNBcnJheShjbHIpICYmIGNsci5sZW5ndGggPT0gMykgcmV0dXJuIGNscjtcbiAgaWYgKC9ecmdiLy50ZXN0KGNscikpIHtcbiAgICByZXR1cm4gY2xyLnJlcGxhY2UoLyheXFxzKnJnYmE/XFwofFxcKVxccyokKS9nLCAnJykuc3BsaXQoJywnKS5tYXAoZnVuY3Rpb24odmFsdWUsIGkpIHtcbiAgICAgIHJldHVybiBpID09IDMgPyBwYXJzZUZsb2F0KHZhbHVlLCAxMCkgOiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgIH0pO1xuICB9XG4gIGlmIChjbHIuY2hhckF0KDApID09ICcjJykgY2xyID0gY2xyLnN1YnN0cmluZygxKTtcbiAgaWYgKCEvXihbYS1mQS1GMC05XXszfSl7MSwyfSQvZy50ZXN0KGNscikpIHJldHVybjtcblxuICB2YXIgZGlnID0gY2xyLmxlbmd0aCAvIDM7XG4gIHZhciByZWQgPSBjbHIuc3Vic3RyKDAsIGRpZyk7XG4gIHZhciBncm4gPSBjbHIuc3Vic3RyKGRpZywgZGlnKTtcbiAgdmFyIGJsdSA9IGNsci5zdWJzdHIoZGlnICogMik7XG4gIGlmIChkaWcgPT09IDEpIHtcbiAgICByZWQgKz0gcmVkO1xuICAgIGdybiArPSBncm47XG4gICAgYmx1ICs9IGJsdTtcbiAgfVxuICByZXR1cm4gW3BhcnNlSW50KHJlZCwgMTYpLCBwYXJzZUludChncm4sIDE2KSwgcGFyc2VJbnQoYmx1LCAxNildO1xufVxuXG5mdW5jdGlvbiByZ2JhKHJnYkFycmF5LCBvcGFjaXR5KSB7XG4gIGlmIChyZ2JBcnJheS5sZW5ndGggPT0gNCkge1xuICAgIHJnYkFycmF5ID0gYW5ndWxhci5jb3B5KHJnYkFycmF5KTtcbiAgICBvcGFjaXR5ID8gcmdiQXJyYXkucG9wKCkgOiBvcGFjaXR5ID0gcmdiQXJyYXkucG9wKCk7XG4gIH1cbiAgcmV0dXJuIG9wYWNpdHkgJiYgKHR5cGVvZiBvcGFjaXR5ID09ICdudW1iZXInIHx8ICh0eXBlb2Ygb3BhY2l0eSA9PSAnc3RyaW5nJyAmJiBvcGFjaXR5Lmxlbmd0aCkpID9cbiAgICAncmdiYSgnICsgcmdiQXJyYXkuam9pbignLCcpICsgJywnICsgb3BhY2l0eSArICcpJyA6XG4gICAgJ3JnYignICsgcmdiQXJyYXkuam9pbignLCcpICsgJyknO1xufVxuXG59KSgpO1xuXG4vKiFcbiAqIEFuZ3VsYXIgTWF0ZXJpYWwgRGVzaWduXG4gKiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9tYXRlcmlhbFxuICogQGxpY2Vuc2UgTUlUXG4gKiB2MC43LjFcbiAqL1xuKGZ1bmN0aW9uKCkge1xuJ3VzZSBzdHJpY3QnO1xuXG4vKlxuICogQG5nZG9jIG1vZHVsZVxuICogQG5hbWUgbWF0ZXJpYWwuY29tcG9uZW50cy5iYWNrZHJvcFxuICogQGRlc2NyaXB0aW9uIEJhY2tkcm9wXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBtZEJhY2tkcm9wXG4gKiBAbW9kdWxlIG1hdGVyaWFsLmNvbXBvbmVudHMuYmFja2Ryb3BcbiAqXG4gKiBAcmVzdHJpY3QgRVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogYDxtZC1iYWNrZHJvcD5gIGlzIGEgYmFja2Ryb3AgZWxlbWVudCB1c2VkIGJ5IG90aGVyIGNvcG9uZW50cywgc3VjaCBhcyBkaWFsb2cgYW5kIGJvdHRvbSBzaGVldC5cbiAqIEFwcGx5IGNsYXNzIGBvcGFxdWVgIHRvIG1ha2UgdGhlIGJhY2tkcm9wIHVzZSB0aGUgdGhlbWUgYmFja2Ryb3AgY29sb3IuXG4gKlxuICovXG5cbmFuZ3VsYXIubW9kdWxlKCdtYXRlcmlhbC5jb21wb25lbnRzLmJhY2tkcm9wJywgW1xuICAnbWF0ZXJpYWwuY29yZSdcbl0pXG4gIC5kaXJlY3RpdmUoJ21kQmFja2Ryb3AnLCBCYWNrZHJvcERpcmVjdGl2ZSk7XG5cbmZ1bmN0aW9uIEJhY2tkcm9wRGlyZWN0aXZlKCRtZFRoZW1pbmcpIHtcbiAgcmV0dXJuICRtZFRoZW1pbmc7XG59XG5CYWNrZHJvcERpcmVjdGl2ZS4kaW5qZWN0ID0gW1wiJG1kVGhlbWluZ1wiXTtcbn0pKCk7XG5cbi8qIVxuICogQW5ndWxhciBNYXRlcmlhbCBEZXNpZ25cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL21hdGVyaWFsXG4gKiBAbGljZW5zZSBNSVRcbiAqIHYwLjcuMVxuICovXG4oZnVuY3Rpb24oKSB7XG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQG5nZG9jIG1vZHVsZVxuICogQG5hbWUgbWF0ZXJpYWwuY29tcG9uZW50cy5ib3R0b21TaGVldFxuICogQGRlc2NyaXB0aW9uXG4gKiBCb3R0b21TaGVldFxuICovXG5hbmd1bGFyLm1vZHVsZSgnbWF0ZXJpYWwuY29tcG9uZW50cy5ib3R0b21TaGVldCcsIFtcbiAgJ21hdGVyaWFsLmNvcmUnLFxuICAnbWF0ZXJpYWwuY29tcG9uZW50cy5iYWNrZHJvcCdcbl0pXG4gIC5kaXJlY3RpdmUoJ21kQm90dG9tU2hlZXQnLCBNZEJvdHRvbVNoZWV0RGlyZWN0aXZlKVxuICAucHJvdmlkZXIoJyRtZEJvdHRvbVNoZWV0JywgTWRCb3R0b21TaGVldFByb3ZpZGVyKTtcblxuZnVuY3Rpb24gTWRCb3R0b21TaGVldERpcmVjdGl2ZSgpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnXG4gIH07XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRtZEJvdHRvbVNoZWV0XG4gKiBAbW9kdWxlIG1hdGVyaWFsLmNvbXBvbmVudHMuYm90dG9tU2hlZXRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIGAkbWRCb3R0b21TaGVldGAgb3BlbnMgYSBib3R0b20gc2hlZXQgb3ZlciB0aGUgYXBwIGFuZCBwcm92aWRlcyBhIHNpbXBsZSBwcm9taXNlIEFQSS5cbiAqXG4gKiAjIyMgUmVzdHJpY3Rpb25zXG4gKlxuICogLSBUaGUgYm90dG9tIHNoZWV0J3MgdGVtcGxhdGUgbXVzdCBoYXZlIGFuIG91dGVyIGA8bWQtYm90dG9tLXNoZWV0PmAgZWxlbWVudC5cbiAqIC0gQWRkIHRoZSBgbWQtZ3JpZGAgY2xhc3MgdG8gdGhlIGJvdHRvbSBzaGVldCBmb3IgYSBncmlkIGxheW91dC5cbiAqIC0gQWRkIHRoZSBgbWQtbGlzdGAgY2xhc3MgdG8gdGhlIGJvdHRvbSBzaGVldCBmb3IgYSBsaXN0IGxheW91dC5cbiAqXG4gKiBAdXNhZ2VcbiAqIDxobGpzIGxhbmc9XCJodG1sXCI+XG4gKiA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJNeUNvbnRyb2xsZXJcIj5cbiAqICAgPG1kLWJ1dHRvbiBuZy1jbGljaz1cIm9wZW5Cb3R0b21TaGVldCgpXCI+XG4gKiAgICAgT3BlbiBhIEJvdHRvbSBTaGVldCFcbiAqICAgPC9tZC1idXR0b24+XG4gKiA8L2Rpdj5cbiAqIDwvaGxqcz5cbiAqIDxobGpzIGxhbmc9XCJqc1wiPlxuICogdmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbJ25nTWF0ZXJpYWwnXSk7XG4gKiBhcHAuY29udHJvbGxlcignTXlDb250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlLCAkbWRCb3R0b21TaGVldCkge1xuICogICAkc2NvcGUub3BlbkJvdHRvbVNoZWV0ID0gZnVuY3Rpb24oKSB7XG4gKiAgICAgJG1kQm90dG9tU2hlZXQuc2hvdyh7XG4gKiAgICAgICB0ZW1wbGF0ZTogJzxtZC1ib3R0b20tc2hlZXQ+SGVsbG8hPC9tZC1ib3R0b20tc2hlZXQ+J1xuICogICAgIH0pO1xuICogICB9O1xuICogfSk7XG4gKiA8L2hsanM+XG4gKi9cblxuIC8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJG1kQm90dG9tU2hlZXQjc2hvd1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU2hvdyBhIGJvdHRvbSBzaGVldCB3aXRoIHRoZSBzcGVjaWZpZWQgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBBbiBvcHRpb25zIG9iamVjdCwgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIGB0ZW1wbGF0ZVVybGAgLSBge3N0cmluZz19YDogVGhlIHVybCBvZiBhbiBodG1sIHRlbXBsYXRlIGZpbGUgdGhhdCB3aWxsXG4gKiAgIGJlIHVzZWQgYXMgdGhlIGNvbnRlbnQgb2YgdGhlIGJvdHRvbSBzaGVldC4gUmVzdHJpY3Rpb25zOiB0aGUgdGVtcGxhdGUgbXVzdFxuICogICBoYXZlIGFuIG91dGVyIGBtZC1ib3R0b20tc2hlZXRgIGVsZW1lbnQuXG4gKiAgIC0gYHRlbXBsYXRlYCAtIGB7c3RyaW5nPX1gOiBTYW1lIGFzIHRlbXBsYXRlVXJsLCBleGNlcHQgdGhpcyBpcyBhbiBhY3R1YWxcbiAqICAgdGVtcGxhdGUgc3RyaW5nLlxuICogICAtIGBjb250cm9sbGVyYCAtIGB7c3RyaW5nPX1gOiBUaGUgY29udHJvbGxlciB0byBhc3NvY2lhdGUgd2l0aCB0aGlzIGJvdHRvbSBzaGVldC5cbiAqICAgLSBgbG9jYWxzYCAtIGB7c3RyaW5nPX1gOiBBbiBvYmplY3QgY29udGFpbmluZyBrZXkvdmFsdWUgcGFpcnMuIFRoZSBrZXlzIHdpbGxcbiAqICAgYmUgdXNlZCBhcyBuYW1lcyBvZiB2YWx1ZXMgdG8gaW5qZWN0IGludG8gdGhlIGNvbnRyb2xsZXIuIEZvciBleGFtcGxlLFxuICogICBgbG9jYWxzOiB7dGhyZWU6IDN9YCB3b3VsZCBpbmplY3QgYHRocmVlYCBpbnRvIHRoZSBjb250cm9sbGVyIHdpdGggdGhlIHZhbHVlXG4gKiAgIG9mIDMuXG4gKiAgIC0gYHRhcmdldEV2ZW50YCAtIGB7RE9NQ2xpY2tFdmVudD19YDogQSBjbGljaydzIGV2ZW50IG9iamVjdC4gV2hlbiBwYXNzZWQgaW4gYXMgYW4gb3B0aW9uLFxuICogICB0aGUgbG9jYXRpb24gb2YgdGhlIGNsaWNrIHdpbGwgYmUgdXNlZCBhcyB0aGUgc3RhcnRpbmcgcG9pbnQgZm9yIHRoZSBvcGVuaW5nIGFuaW1hdGlvblxuICogICBvZiB0aGUgdGhlIGRpYWxvZy5cbiAqICAgLSBgcmVzb2x2ZWAgLSBge29iamVjdD19YDogU2ltaWxhciB0byBsb2NhbHMsIGV4Y2VwdCBpdCB0YWtlcyBwcm9taXNlcyBhcyB2YWx1ZXNcbiAqICAgYW5kIHRoZSBib3R0b20gc2hlZXQgd2lsbCBub3Qgb3BlbiB1bnRpbCB0aGUgcHJvbWlzZXMgcmVzb2x2ZS5cbiAqICAgLSBgY29udHJvbGxlckFzYCAtIGB7c3RyaW5nPX1gOiBBbiBhbGlhcyB0byBhc3NpZ24gdGhlIGNvbnRyb2xsZXIgdG8gb24gdGhlIHNjb3BlLlxuICogICAtIGBwYXJlbnRgIC0gYHtlbGVtZW50PX1gOiBUaGUgZWxlbWVudCB0byBhcHBlbmQgdGhlIGJvdHRvbSBzaGVldCB0by4gRGVmYXVsdHMgdG8gYXBwZW5kaW5nXG4gKiAgICAgdG8gdGhlIHJvb3QgZWxlbWVudCBvZiB0aGUgYXBwbGljYXRpb24uXG4gKiAgIC0gYGRpc2FibGVQYXJlbnRTY3JvbGxgIC0gYHtib29sZWFuPX1gOiBXaGV0aGVyIHRvIGRpc2FibGUgc2Nyb2xsaW5nIHdoaWxlIHRoZSBib3R0b20gc2hlZXQgaXMgb3Blbi5cbiAqICAgICBEZWZhdWx0IHRydWUuXG4gKlxuICogQHJldHVybnMge3Byb21pc2V9IEEgcHJvbWlzZSB0aGF0IGNhbiBiZSByZXNvbHZlZCB3aXRoIGAkbWRCb3R0b21TaGVldC5oaWRlKClgIG9yXG4gKiByZWplY3RlZCB3aXRoIGAkbWRCb3R0b21TaGVldC5jYW5jZWwoKWAuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkbWRCb3R0b21TaGVldCNoaWRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBIaWRlIHRoZSBleGlzdGluZyBib3R0b20gc2hlZXQgYW5kIHJlc29sdmUgdGhlIHByb21pc2UgcmV0dXJuZWQgZnJvbVxuICogYCRtZEJvdHRvbVNoZWV0LnNob3coKWAuXG4gKlxuICogQHBhcmFtIHsqPX0gcmVzcG9uc2UgQW4gYXJndW1lbnQgZm9yIHRoZSByZXNvbHZlZCBwcm9taXNlLlxuICpcbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRtZEJvdHRvbVNoZWV0I2NhbmNlbFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSGlkZSB0aGUgZXhpc3RpbmcgYm90dG9tIHNoZWV0IGFuZCByZWplY3QgdGhlIHByb21pc2UgcmV0dXJuZWQgZnJvbVxuICogYCRtZEJvdHRvbVNoZWV0LnNob3coKWAuXG4gKlxuICogQHBhcmFtIHsqPX0gcmVzcG9uc2UgQW4gYXJndW1lbnQgZm9yIHRoZSByZWplY3RlZCBwcm9taXNlLlxuICpcbiAqL1xuXG5mdW5jdGlvbiBNZEJvdHRvbVNoZWV0UHJvdmlkZXIoJCRpbnRlcmltRWxlbWVudFByb3ZpZGVyKSB7XG4gIC8vIGhvdyBmYXN0IHdlIG5lZWQgdG8gZmxpY2sgZG93biB0byBjbG9zZSB0aGUgc2hlZXQsIHBpeGVscy9tc1xuICB2YXIgQ0xPU0lOR19WRUxPQ0lUWSA9IDAuNTtcbiAgdmFyIFBBRERJTkcgPSA4MDsgLy8gc2FtZSBhcyBjc3NcblxuICBib3R0b21TaGVldERlZmF1bHRzLiRpbmplY3QgPSBbXCIkYW5pbWF0ZVwiLCBcIiRtZENvbnN0YW50XCIsIFwiJHRpbWVvdXRcIiwgXCIkJHJBRlwiLCBcIiRjb21waWxlXCIsIFwiJG1kVGhlbWluZ1wiLCBcIiRtZEJvdHRvbVNoZWV0XCIsIFwiJHJvb3RFbGVtZW50XCIsIFwiJHJvb3RTY29wZVwiLCBcIiRtZEdlc3R1cmVcIl07XG4gIHJldHVybiAkJGludGVyaW1FbGVtZW50UHJvdmlkZXIoJyRtZEJvdHRvbVNoZWV0JylcbiAgICAuc2V0RGVmYXVsdHMoe1xuICAgICAgbWV0aG9kczogWydkaXNhYmxlUGFyZW50U2Nyb2xsJywgJ2VzY2FwZVRvQ2xvc2UnLCAndGFyZ2V0RXZlbnQnXSxcbiAgICAgIG9wdGlvbnM6IGJvdHRvbVNoZWV0RGVmYXVsdHNcbiAgICB9KTtcblxuICAvKiBAbmdJbmplY3QgKi9cbiAgZnVuY3Rpb24gYm90dG9tU2hlZXREZWZhdWx0cygkYW5pbWF0ZSwgJG1kQ29uc3RhbnQsICR0aW1lb3V0LCAkJHJBRiwgJGNvbXBpbGUsICRtZFRoZW1pbmcsICRtZEJvdHRvbVNoZWV0LCAkcm9vdEVsZW1lbnQsICRyb290U2NvcGUsICRtZEdlc3R1cmUpIHtcbiAgICB2YXIgYmFja2Ryb3A7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdGhlbWFibGU6IHRydWUsXG4gICAgICB0YXJnZXRFdmVudDogbnVsbCxcbiAgICAgIG9uU2hvdzogb25TaG93LFxuICAgICAgb25SZW1vdmU6IG9uUmVtb3ZlLFxuICAgICAgZXNjYXBlVG9DbG9zZTogdHJ1ZSxcbiAgICAgIGRpc2FibGVQYXJlbnRTY3JvbGw6IHRydWVcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gb25TaG93KHNjb3BlLCBlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICAvLyBBZGQgYSBiYWNrZHJvcCB0aGF0IHdpbGwgY2xvc2Ugb24gY2xpY2tcbiAgICAgIGJhY2tkcm9wID0gJGNvbXBpbGUoJzxtZC1iYWNrZHJvcCBjbGFzcz1cIm1kLW9wYXF1ZSBtZC1ib3R0b20tc2hlZXQtYmFja2Ryb3BcIj4nKShzY29wZSk7XG4gICAgICBiYWNrZHJvcC5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgJHRpbWVvdXQoJG1kQm90dG9tU2hlZXQuY2FuY2VsKTtcbiAgICAgIH0pO1xuXG4gICAgICAkbWRUaGVtaW5nLmluaGVyaXQoYmFja2Ryb3AsIG9wdGlvbnMucGFyZW50KTtcblxuICAgICAgJGFuaW1hdGUuZW50ZXIoYmFja2Ryb3AsIG9wdGlvbnMucGFyZW50LCBudWxsKTtcblxuICAgICAgdmFyIGJvdHRvbVNoZWV0ID0gbmV3IEJvdHRvbVNoZWV0KGVsZW1lbnQsIG9wdGlvbnMucGFyZW50KTtcbiAgICAgIG9wdGlvbnMuYm90dG9tU2hlZXQgPSBib3R0b21TaGVldDtcblxuICAgICAgLy8gR2l2ZSB1cCBmb2N1cyBvbiBjYWxsaW5nIGl0ZW1cbiAgICAgIG9wdGlvbnMudGFyZ2V0RXZlbnQgJiYgYW5ndWxhci5lbGVtZW50KG9wdGlvbnMudGFyZ2V0RXZlbnQudGFyZ2V0KS5ibHVyKCk7XG4gICAgICAkbWRUaGVtaW5nLmluaGVyaXQoYm90dG9tU2hlZXQuZWxlbWVudCwgb3B0aW9ucy5wYXJlbnQpO1xuXG4gICAgICBpZiAob3B0aW9ucy5kaXNhYmxlUGFyZW50U2Nyb2xsKSB7XG4gICAgICAgIG9wdGlvbnMubGFzdE92ZXJmbG93ID0gb3B0aW9ucy5wYXJlbnQuY3NzKCdvdmVyZmxvdycpO1xuICAgICAgICBvcHRpb25zLnBhcmVudC5jc3MoJ292ZXJmbG93JywgJ2hpZGRlbicpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJGFuaW1hdGUuZW50ZXIoYm90dG9tU2hlZXQuZWxlbWVudCwgb3B0aW9ucy5wYXJlbnQpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBmb2N1c2FibGUgPSBhbmd1bGFyLmVsZW1lbnQoXG4gICAgICAgICAgICBlbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoJ2J1dHRvbicpIHx8XG4gICAgICAgICAgICBlbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoJ2EnKSB8fFxuICAgICAgICAgICAgZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKCdbbmctY2xpY2tdJylcbiAgICAgICAgICApO1xuICAgICAgICAgIGZvY3VzYWJsZS5mb2N1cygpO1xuXG4gICAgICAgICAgaWYgKG9wdGlvbnMuZXNjYXBlVG9DbG9zZSkge1xuICAgICAgICAgICAgb3B0aW9ucy5yb290RWxlbWVudEtleXVwQ2FsbGJhY2sgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT09ICRtZENvbnN0YW50LktFWV9DT0RFLkVTQ0FQRSkge1xuICAgICAgICAgICAgICAgICR0aW1lb3V0KCRtZEJvdHRvbVNoZWV0LmNhbmNlbCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAkcm9vdEVsZW1lbnQub24oJ2tleXVwJywgb3B0aW9ucy5yb290RWxlbWVudEtleXVwQ2FsbGJhY2spO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvblJlbW92ZShzY29wZSwgZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgdmFyIGJvdHRvbVNoZWV0ID0gb3B0aW9ucy5ib3R0b21TaGVldDtcblxuXG4gICAgICAkYW5pbWF0ZS5sZWF2ZShiYWNrZHJvcCk7XG4gICAgICByZXR1cm4gJGFuaW1hdGUubGVhdmUoYm90dG9tU2hlZXQuZWxlbWVudCkudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuZGlzYWJsZVBhcmVudFNjcm9sbCkge1xuICAgICAgICAgIG9wdGlvbnMucGFyZW50LmNzcygnb3ZlcmZsb3cnLCBvcHRpb25zLmxhc3RPdmVyZmxvdyk7XG4gICAgICAgICAgZGVsZXRlIG9wdGlvbnMubGFzdE92ZXJmbG93O1xuICAgICAgICB9XG5cbiAgICAgICAgYm90dG9tU2hlZXQuY2xlYW51cCgpO1xuXG4gICAgICAgIC8vIFJlc3RvcmUgZm9jdXNcbiAgICAgICAgb3B0aW9ucy50YXJnZXRFdmVudCAmJiBhbmd1bGFyLmVsZW1lbnQob3B0aW9ucy50YXJnZXRFdmVudC50YXJnZXQpLmZvY3VzKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCb3R0b21TaGVldCBjbGFzcyB0byBhcHBseSBib3R0b20tc2hlZXQgYmVoYXZpb3IgdG8gYW4gZWxlbWVudFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEJvdHRvbVNoZWV0KGVsZW1lbnQsIHBhcmVudCkge1xuICAgICAgdmFyIGRlcmVnaXN0ZXIgPSAkbWRHZXN0dXJlLnJlZ2lzdGVyKHBhcmVudCwgJ2RyYWcnLCB7IGhvcml6b250YWw6IGZhbHNlIH0pO1xuICAgICAgcGFyZW50Lm9uKCckbWQuZHJhZ3N0YXJ0Jywgb25EcmFnU3RhcnQpXG4gICAgICAgIC5vbignJG1kLmRyYWcnLCBvbkRyYWcpXG4gICAgICAgIC5vbignJG1kLmRyYWdlbmQnLCBvbkRyYWdFbmQpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgICBjbGVhbnVwOiBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgICAgICAgIGRlcmVnaXN0ZXIoKTtcbiAgICAgICAgICBwYXJlbnQub2ZmKCckbWQuZHJhZ3N0YXJ0Jywgb25EcmFnU3RhcnQpXG4gICAgICAgICAgICAub2ZmKCckbWQuZHJhZycsIG9uRHJhZylcbiAgICAgICAgICAgIC5vZmYoJyRtZC5kcmFnZW5kJywgb25EcmFnRW5kKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZnVuY3Rpb24gb25EcmFnU3RhcnQoZXYpIHtcbiAgICAgICAgLy8gRGlzYWJsZSB0cmFuc2l0aW9ucyBvbiB0cmFuc2Zvcm0gc28gdGhhdCBpdCBmZWVscyBmYXN0XG4gICAgICAgIGVsZW1lbnQuY3NzKCRtZENvbnN0YW50LkNTUy5UUkFOU0lUSU9OX0RVUkFUSU9OLCAnMG1zJyk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG9uRHJhZyhldikge1xuICAgICAgICB2YXIgdHJhbnNmb3JtID0gZXYucG9pbnRlci5kaXN0YW5jZVk7XG4gICAgICAgIGlmICh0cmFuc2Zvcm0gPCA1KSB7XG4gICAgICAgICAgLy8gU2xvdyBkb3duIGRyYWcgd2hlbiB0cnlpbmcgdG8gZHJhZyB1cCwgYW5kIHN0b3AgYWZ0ZXIgUEFERElOR1xuICAgICAgICAgIHRyYW5zZm9ybSA9IE1hdGgubWF4KC1QQURESU5HLCB0cmFuc2Zvcm0gLyAyKTtcbiAgICAgICAgfVxuICAgICAgICBlbGVtZW50LmNzcygkbWRDb25zdGFudC5DU1MuVFJBTlNGT1JNLCAndHJhbnNsYXRlM2QoMCwnICsgKFBBRERJTkcgKyB0cmFuc2Zvcm0pICsgJ3B4LDApJyk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG9uRHJhZ0VuZChldikge1xuICAgICAgICBpZiAoZXYucG9pbnRlci5kaXN0YW5jZVkgPiAwICYmXG4gICAgICAgICAgICAoZXYucG9pbnRlci5kaXN0YW5jZVkgPiAyMCB8fCBNYXRoLmFicyhldi5wb2ludGVyLnZlbG9jaXR5WSkgPiBDTE9TSU5HX1ZFTE9DSVRZKSkge1xuICAgICAgICAgIHZhciBkaXN0YW5jZVJlbWFpbmluZyA9IGVsZW1lbnQucHJvcCgnb2Zmc2V0SGVpZ2h0JykgLSBldi5wb2ludGVyLmRpc3RhbmNlWTtcbiAgICAgICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gTWF0aC5taW4oZGlzdGFuY2VSZW1haW5pbmcgLyBldi5wb2ludGVyLnZlbG9jaXR5WSAqIDAuNzUsIDUwMCk7XG4gICAgICAgICAgZWxlbWVudC5jc3MoJG1kQ29uc3RhbnQuQ1NTLlRSQU5TSVRJT05fRFVSQVRJT04sIHRyYW5zaXRpb25EdXJhdGlvbiArICdtcycpO1xuICAgICAgICAgICR0aW1lb3V0KCRtZEJvdHRvbVNoZWV0LmNhbmNlbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZWxlbWVudC5jc3MoJG1kQ29uc3RhbnQuQ1NTLlRSQU5TSVRJT05fRFVSQVRJT04sICcnKTtcbiAgICAgICAgICBlbGVtZW50LmNzcygkbWRDb25zdGFudC5DU1MuVFJBTlNGT1JNLCAnJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgfVxuXG59XG5NZEJvdHRvbVNoZWV0UHJvdmlkZXIuJGluamVjdCA9IFtcIiQkaW50ZXJpbUVsZW1lbnRQcm92aWRlclwiXTtcblxufSkoKTtcblxuLyohXG4gKiBBbmd1bGFyIE1hdGVyaWFsIERlc2lnblxuICogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvbWF0ZXJpYWxcbiAqIEBsaWNlbnNlIE1JVFxuICogdjAuNy4xXG4gKi9cbihmdW5jdGlvbigpIHtcbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAbmdkb2MgbW9kdWxlXG4gKiBAbmFtZSBtYXRlcmlhbC5jb21wb25lbnRzLmJ1dHRvblxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogQnV0dG9uXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdtYXRlcmlhbC5jb21wb25lbnRzLmJ1dHRvbicsIFtcbiAgJ21hdGVyaWFsLmNvcmUnXG5dKVxuICAuZGlyZWN0aXZlKCdtZEJ1dHRvbicsIE1kQnV0dG9uRGlyZWN0aXZlKTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBtZEJ1dHRvblxuICogQG1vZHVsZSBtYXRlcmlhbC5jb21wb25lbnRzLmJ1dHRvblxuICpcbiAqIEByZXN0cmljdCBFXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBgPG1kLWJ1dHRvbj5gIGlzIGEgYnV0dG9uIGRpcmVjdGl2ZSB3aXRoIG9wdGlvbmFsIGluayByaXBwbGVzIChkZWZhdWx0IGVuYWJsZWQpLlxuICpcbiAqIElmIHlvdSBzdXBwbHkgYSBgaHJlZmAgb3IgYG5nLWhyZWZgIGF0dHJpYnV0ZSwgaXQgd2lsbCBiZWNvbWUgYW4gYDxhPmAgZWxlbWVudC4gT3RoZXJ3aXNlLCBpdCB3aWxsXG4gKiBiZWNvbWUgYSBgPGJ1dHRvbj5gIGVsZW1lbnQuXG4gKlxuICogQXMgcGVyIHRoZSBbbWF0ZXJpYWwgZGVzaWduIHNwZWNdKGh0dHA6Ly93d3cuZ29vZ2xlLmNvbS9kZXNpZ24vc3BlYy9zdHlsZS9jb2xvci5odG1sI2NvbG9yLXVpLWNvbG9yLWFwcGxpY2F0aW9uKVxuICogdGhlIEZBQiBidXR0b24gaXMgaW4gdGhlIGFjY2VudCBjb2xvciBieSBkZWZhdWx0LiBUaGUgcHJpbWFyeSBjb2xvciBwYWxldHRlIG1heSBiZSB1c2VkIHdpdGhcbiAqIHRoZSBgbWQtcHJpbWFyeWAgY2xhc3MuXG4gKlxuICogQHBhcmFtIHtib29sZWFuPX0gbWQtbm8taW5rIElmIHByZXNlbnQsIGRpc2FibGUgcmlwcGxlIGluayBlZmZlY3RzLlxuICogQHBhcmFtIHtleHByZXNzaW9uPX0gbmctZGlzYWJsZWQgRW4vRGlzYWJsZSBiYXNlZCBvbiB0aGUgZXhwcmVzc2lvblxuICogQHBhcmFtIHtzdHJpbmc9fSBtZC1yaXBwbGUtc2l6ZSBPdmVycmlkZXMgdGhlIGRlZmF1bHQgcmlwcGxlIHNpemUgbG9naWMuIE9wdGlvbnM6IGBmdWxsYCwgYHBhcnRpYWxgLCBgYXV0b2BcbiAqIEBwYXJhbSB7c3RyaW5nPX0gYXJpYS1sYWJlbCBBZGRzIGFsdGVybmF0aXZlIHRleHQgdG8gYnV0dG9uIGZvciBhY2Nlc3NpYmlsaXR5LCB1c2VmdWwgZm9yIGljb24gYnV0dG9ucy5cbiAqIElmIG5vIGRlZmF1bHQgdGV4dCBpcyBmb3VuZCwgYSB3YXJuaW5nIHdpbGwgYmUgbG9nZ2VkLlxuICpcbiAqIEB1c2FnZVxuICogPGhsanMgbGFuZz1cImh0bWxcIj5cbiAqICA8bWQtYnV0dG9uPlxuICogICAgQnV0dG9uXG4gKiAgPC9tZC1idXR0b24+XG4gKiAgPG1kLWJ1dHRvbiBocmVmPVwiaHR0cDovL2dvb2dsZS5jb21cIiBjbGFzcz1cIm1kLWJ1dHRvbi1jb2xvcmVkXCI+XG4gKiAgICBJJ20gYSBsaW5rXG4gKiAgPC9tZC1idXR0b24+XG4gKiAgPG1kLWJ1dHRvbiBuZy1kaXNhYmxlZD1cInRydWVcIiBjbGFzcz1cIm1kLWNvbG9yZWRcIj5cbiAqICAgIEknbSBhIGRpc2FibGVkIGJ1dHRvblxuICogIDwvbWQtYnV0dG9uPlxuICogPC9obGpzPlxuICovXG5mdW5jdGlvbiBNZEJ1dHRvbkRpcmVjdGl2ZSgkbWRJbmtSaXBwbGUsICRtZFRoZW1pbmcsICRtZEFyaWEpIHtcblxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRScsXG4gICAgcmVwbGFjZTogdHJ1ZSxcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgIHRlbXBsYXRlOiBnZXRUZW1wbGF0ZSxcbiAgICBsaW5rOiBwb3N0TGlua1xuICB9O1xuXG4gIGZ1bmN0aW9uIGlzQW5jaG9yKGF0dHIpIHtcbiAgICByZXR1cm4gYW5ndWxhci5pc0RlZmluZWQoYXR0ci5ocmVmKSB8fCBhbmd1bGFyLmlzRGVmaW5lZChhdHRyLm5nSHJlZik7XG4gIH1cbiAgXG4gIGZ1bmN0aW9uIGdldFRlbXBsYXRlKGVsZW1lbnQsIGF0dHIpIHtcbiAgICByZXR1cm4gaXNBbmNob3IoYXR0cikgP1xuICAgICAgICAgICAnPGEgY2xhc3M9XCJtZC1idXR0b25cIiBuZy10cmFuc2NsdWRlPjwvYT4nIDpcbiAgICAgICAgICAgJzxidXR0b24gY2xhc3M9XCJtZC1idXR0b25cIiBuZy10cmFuc2NsdWRlPjwvYnV0dG9uPic7XG4gIH1cblxuICBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgIHZhciBub2RlID0gZWxlbWVudFswXTtcbiAgICAkbWRUaGVtaW5nKGVsZW1lbnQpO1xuICAgICRtZElua1JpcHBsZS5hdHRhY2hCdXR0b25CZWhhdmlvcihzY29wZSwgZWxlbWVudCk7XG5cbiAgICB2YXIgZWxlbWVudEhhc1RleHQgPSBub2RlLnRleHRDb250ZW50LnRyaW0oKTtcbiAgICBpZiAoIWVsZW1lbnRIYXNUZXh0KSB7XG4gICAgICAkbWRBcmlhLmV4cGVjdChlbGVtZW50LCAnYXJpYS1sYWJlbCcpO1xuICAgIH1cblxuICAgIC8vIEZvciBhbmNob3IgZWxlbWVudHMsIHdlIGhhdmUgdG8gc2V0IHRhYmluZGV4IG1hbnVhbGx5IHdoZW4gdGhlIFxuICAgIC8vIGVsZW1lbnQgaXMgZGlzYWJsZWRcbiAgICBpZiAoaXNBbmNob3IoYXR0cikgJiYgYW5ndWxhci5pc0RlZmluZWQoYXR0ci5uZ0Rpc2FibGVkKSApIHtcbiAgICAgIHNjb3BlLiR3YXRjaChhdHRyLm5nRGlzYWJsZWQsIGZ1bmN0aW9uKGlzRGlzYWJsZWQpIHtcbiAgICAgICAgZWxlbWVudC5hdHRyKCd0YWJpbmRleCcsIGlzRGlzYWJsZWQgPyAtMSA6IDApO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbn1cbk1kQnV0dG9uRGlyZWN0aXZlLiRpbmplY3QgPSBbXCIkbWRJbmtSaXBwbGVcIiwgXCIkbWRUaGVtaW5nXCIsIFwiJG1kQXJpYVwiXTtcbn0pKCk7XG5cbi8qIVxuICogQW5ndWxhciBNYXRlcmlhbCBEZXNpZ25cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL21hdGVyaWFsXG4gKiBAbGljZW5zZSBNSVRcbiAqIHYwLjcuMVxuICovXG4oZnVuY3Rpb24oKSB7XG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQG5nZG9jIG1vZHVsZVxuICogQG5hbWUgbWF0ZXJpYWwuY29tcG9uZW50cy5jYXJkXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDYXJkIGNvbXBvbmVudHMuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdtYXRlcmlhbC5jb21wb25lbnRzLmNhcmQnLCBbXG4gICdtYXRlcmlhbC5jb3JlJ1xuXSlcbiAgLmRpcmVjdGl2ZSgnbWRDYXJkJywgbWRDYXJkRGlyZWN0aXZlKTtcblxuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbWRDYXJkXG4gKiBAbW9kdWxlIG1hdGVyaWFsLmNvbXBvbmVudHMuY2FyZFxuICpcbiAqIEByZXN0cmljdCBFXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYDxtZC1jYXJkPmAgZGlyZWN0aXZlIGlzIGEgY29udGFpbmVyIGVsZW1lbnQgdXNlZCB3aXRoaW4gYDxtZC1jb250ZW50PmAgY29udGFpbmVycy5cbiAqXG4gKiBDYXJkcyBoYXZlIGNvbnN0YW50IHdpZHRoIGFuZCB2YXJpYWJsZSBoZWlnaHRzOyB3aGVyZSB0aGUgbWF4aW11bSBoZWlnaHQgaXMgbGltaXRlZCB0byB3aGF0IGNhblxuICogZml0IHdpdGhpbiBhIHNpbmdsZSB2aWV3IG9uIGEgcGxhdGZvcm0sIGJ1dCBpdCBjYW4gdGVtcG9yYXJpbHkgZXhwYW5kIGFzIG5lZWRlZFxuICpcbiAqIEB1c2FnZVxuICogPGhsanMgbGFuZz1cImh0bWxcIj5cbiAqIDxtZC1jYXJkPlxuICogIDxpbWcgc3JjPVwiaW1nL3dhc2hlZG91dC5wbmdcIiBjbGFzcz1cIm1kLWNhcmQtaW1hZ2VcIj5cbiAqICA8aDI+UGFyYWNvc208L2gyPlxuICogIDxwPlxuICogICAgVGhlIHRpdGxlcyBvZiBXYXNoZWQgT3V0J3MgYnJlYWt0aHJvdWdoIHNvbmcgYW5kIHRoZSBmaXJzdCBzaW5nbGUgZnJvbSBQYXJhY29zbSBzaGFyZSB0aGUgKiB0d28gbW9zdCBpbXBvcnRhbnQgd29yZHMgaW4gRXJuZXN0IEdyZWVuZSdzIG11c2ljYWwgbGFuZ3VhZ2U6IGZlZWwgaXQuIEl0J3MgYSBzaW1wbGUgcmVxdWVzdCwgYXMgd2VsbC4uLlxuICogIDwvcD5cbiAqIDwvbWQtY2FyZD5cbiAqIDwvaGxqcz5cbiAqXG4gKi9cbmZ1bmN0aW9uIG1kQ2FyZERpcmVjdGl2ZSgkbWRUaGVtaW5nKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICBsaW5rOiBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50LCAkYXR0cikge1xuICAgICAgJG1kVGhlbWluZygkZWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxubWRDYXJkRGlyZWN0aXZlLiRpbmplY3QgPSBbXCIkbWRUaGVtaW5nXCJdO1xufSkoKTtcblxuLyohXG4gKiBBbmd1bGFyIE1hdGVyaWFsIERlc2lnblxuICogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvbWF0ZXJpYWxcbiAqIEBsaWNlbnNlIE1JVFxuICogdjAuNy4xXG4gKi9cbihmdW5jdGlvbigpIHtcbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAbmdkb2MgbW9kdWxlXG4gKiBAbmFtZSBtYXRlcmlhbC5jb21wb25lbnRzLmNoZWNrYm94XG4gKiBAZGVzY3JpcHRpb24gQ2hlY2tib3ggbW9kdWxlIVxuICovXG5hbmd1bGFyLm1vZHVsZSgnbWF0ZXJpYWwuY29tcG9uZW50cy5jaGVja2JveCcsIFtcbiAgJ21hdGVyaWFsLmNvcmUnXG5dKVxuICAuZGlyZWN0aXZlKCdtZENoZWNrYm94JywgTWRDaGVja2JveERpcmVjdGl2ZSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbWRDaGVja2JveFxuICogQG1vZHVsZSBtYXRlcmlhbC5jb21wb25lbnRzLmNoZWNrYm94XG4gKiBAcmVzdHJpY3QgRVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGNoZWNrYm94IGRpcmVjdGl2ZSBpcyB1c2VkIGxpa2UgdGhlIG5vcm1hbCBbYW5ndWxhciBjaGVja2JveF0oaHR0cHM6Ly9kb2NzLmFuZ3VsYXJqcy5vcmcvYXBpL25nL2lucHV0L2lucHV0JTVCY2hlY2tib3glNUQpLlxuICpcbiAqIEFzIHBlciB0aGUgW21hdGVyaWFsIGRlc2lnbiBzcGVjXShodHRwOi8vd3d3Lmdvb2dsZS5jb20vZGVzaWduL3NwZWMvc3R5bGUvY29sb3IuaHRtbCNjb2xvci11aS1jb2xvci1hcHBsaWNhdGlvbilcbiAqIHRoZSBjaGVja2JveCBpcyBpbiB0aGUgYWNjZW50IGNvbG9yIGJ5IGRlZmF1bHQuIFRoZSBwcmltYXJ5IGNvbG9yIHBhbGV0dGUgbWF5IGJlIHVzZWQgd2l0aFxuICogdGhlIGBtZC1wcmltYXJ5YCBjbGFzcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmctbW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICogQHBhcmFtIHtleHByZXNzaW9uPX0gbmctdHJ1ZS12YWx1ZSBUaGUgdmFsdWUgdG8gd2hpY2ggdGhlIGV4cHJlc3Npb24gc2hvdWxkIGJlIHNldCB3aGVuIHNlbGVjdGVkLlxuICogQHBhcmFtIHtleHByZXNzaW9uPX0gbmctZmFsc2UtdmFsdWUgVGhlIHZhbHVlIHRvIHdoaWNoIHRoZSBleHByZXNzaW9uIHNob3VsZCBiZSBzZXQgd2hlbiBub3Qgc2VsZWN0ZWQuXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nLWNoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBtZC1uby1pbmsgVXNlIG9mIGF0dHJpYnV0ZSBpbmRpY2F0ZXMgdXNlIG9mIHJpcHBsZSBpbmsgZWZmZWN0c1xuICogQHBhcmFtIHtzdHJpbmc9fSBhcmlhLWxhYmVsIEFkZHMgbGFiZWwgdG8gY2hlY2tib3ggZm9yIGFjY2Vzc2liaWxpdHkuXG4gKiBEZWZhdWx0cyB0byBjaGVja2JveCdzIHRleHQuIElmIG5vIGRlZmF1bHQgdGV4dCBpcyBmb3VuZCwgYSB3YXJuaW5nIHdpbGwgYmUgbG9nZ2VkLlxuICpcbiAqIEB1c2FnZVxuICogPGhsanMgbGFuZz1cImh0bWxcIj5cbiAqIDxtZC1jaGVja2JveCBuZy1tb2RlbD1cImlzQ2hlY2tlZFwiIGFyaWEtbGFiZWw9XCJGaW5pc2hlZD9cIj5cbiAqICAgRmluaXNoZWQgP1xuICogPC9tZC1jaGVja2JveD5cbiAqXG4gKiA8bWQtY2hlY2tib3ggbWQtbm8taW5rIG5nLW1vZGVsPVwiaGFzSW5rXCIgYXJpYS1sYWJlbD1cIk5vIEluayBFZmZlY3RzXCI+XG4gKiAgIE5vIEluayBFZmZlY3RzXG4gKiA8L21kLWNoZWNrYm94PlxuICpcbiAqIDxtZC1jaGVja2JveCBuZy1kaXNhYmxlZD1cInRydWVcIiBuZy1tb2RlbD1cImlzRGlzYWJsZWRcIiBhcmlhLWxhYmVsPVwiRGlzYWJsZWRcIj5cbiAqICAgRGlzYWJsZWRcbiAqIDwvbWQtY2hlY2tib3g+XG4gKlxuICogPC9obGpzPlxuICpcbiAqL1xuZnVuY3Rpb24gTWRDaGVja2JveERpcmVjdGl2ZShpbnB1dERpcmVjdGl2ZSwgJG1kSW5rUmlwcGxlLCAkbWRBcmlhLCAkbWRDb25zdGFudCwgJG1kVGhlbWluZywgJG1kVXRpbCkge1xuICBpbnB1dERpcmVjdGl2ZSA9IGlucHV0RGlyZWN0aXZlWzBdO1xuICB2YXIgQ0hFQ0tFRF9DU1MgPSAnbWQtY2hlY2tlZCc7XG5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgcmVxdWlyZTogJz9uZ01vZGVsJyxcbiAgICB0ZW1wbGF0ZTogXG4gICAgICAnPGRpdiBjbGFzcz1cIm1kLWNvbnRhaW5lclwiIG1kLWluay1yaXBwbGUgbWQtaW5rLXJpcHBsZS1jaGVja2JveD4nICtcbiAgICAgICAgJzxkaXYgY2xhc3M9XCJtZC1pY29uXCI+PC9kaXY+JyArXG4gICAgICAnPC9kaXY+JyArXG4gICAgICAnPGRpdiBuZy10cmFuc2NsdWRlIGNsYXNzPVwibWQtbGFiZWxcIj48L2Rpdj4nLFxuICAgIGNvbXBpbGU6IGNvbXBpbGVcbiAgfTtcblxuICAvLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gIC8vIFByaXZhdGUgTWV0aG9kc1xuICAvLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbiAgZnVuY3Rpb24gY29tcGlsZSAodEVsZW1lbnQsIHRBdHRycykge1xuXG4gICAgdEF0dHJzLnR5cGUgPSAnY2hlY2tib3gnO1xuICAgIHRBdHRycy50YWJJbmRleCA9IDA7XG4gICAgdEVsZW1lbnQuYXR0cigncm9sZScsIHRBdHRycy50eXBlKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgZWxlbWVudCwgYXR0ciwgbmdNb2RlbEN0cmwpIHtcbiAgICAgIG5nTW9kZWxDdHJsID0gbmdNb2RlbEN0cmwgfHwgJG1kVXRpbC5mYWtlTmdNb2RlbCgpO1xuICAgICAgdmFyIGNoZWNrZWQgPSBmYWxzZTtcbiAgICAgICRtZFRoZW1pbmcoZWxlbWVudCk7XG5cbiAgICAgICRtZEFyaWEuZXhwZWN0V2l0aFRleHQoZWxlbWVudCwgJ2FyaWEtbGFiZWwnKTtcblxuICAgICAgLy8gUmV1c2UgdGhlIG9yaWdpbmFsIGlucHV0W3R5cGU9Y2hlY2tib3hdIGRpcmVjdGl2ZSBmcm9tIEFuZ3VsYXIgY29yZS5cbiAgICAgIC8vIFRoaXMgaXMgYSBiaXQgaGFja3kgYXMgd2UgbmVlZCBvdXIgb3duIGV2ZW50IGxpc3RlbmVyIGFuZCBvd24gcmVuZGVyXG4gICAgICAvLyBmdW5jdGlvbi5cbiAgICAgIGlucHV0RGlyZWN0aXZlLmxpbmsucHJlKHNjb3BlLCB7XG4gICAgICAgIG9uOiBhbmd1bGFyLm5vb3AsXG4gICAgICAgIDA6IHt9XG4gICAgICB9LCBhdHRyLCBbbmdNb2RlbEN0cmxdKTtcblxuICAgICAgZWxlbWVudC5vbignY2xpY2snLCBsaXN0ZW5lcilcbiAgICAgICAgLm9uKCdrZXlwcmVzcycsIGtleXByZXNzSGFuZGxlcik7XG4gICAgICBuZ01vZGVsQ3RybC4kcmVuZGVyID0gcmVuZGVyO1xuXG4gICAgICBmdW5jdGlvbiBrZXlwcmVzc0hhbmRsZXIoZXYpIHtcbiAgICAgICAgaWYoZXYud2hpY2ggPT09ICRtZENvbnN0YW50LktFWV9DT0RFLlNQQUNFKSB7XG4gICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBsaXN0ZW5lcihldik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGxpc3RlbmVyKGV2KSB7XG4gICAgICAgIGlmIChlbGVtZW50WzBdLmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSkgcmV0dXJuO1xuXG4gICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICBjaGVja2VkID0gIWNoZWNrZWQ7XG4gICAgICAgICAgbmdNb2RlbEN0cmwuJHNldFZpZXdWYWx1ZShjaGVja2VkLCBldiAmJiBldi50eXBlKTtcbiAgICAgICAgICBuZ01vZGVsQ3RybC4kcmVuZGVyKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIGNoZWNrZWQgPSBuZ01vZGVsQ3RybC4kdmlld1ZhbHVlO1xuICAgICAgICBpZihjaGVja2VkKSB7XG4gICAgICAgICAgZWxlbWVudC5hZGRDbGFzcyhDSEVDS0VEX0NTUyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcyhDSEVDS0VEX0NTUyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG59XG5NZENoZWNrYm94RGlyZWN0aXZlLiRpbmplY3QgPSBbXCJpbnB1dERpcmVjdGl2ZVwiLCBcIiRtZElua1JpcHBsZVwiLCBcIiRtZEFyaWFcIiwgXCIkbWRDb25zdGFudFwiLCBcIiRtZFRoZW1pbmdcIiwgXCIkbWRVdGlsXCJdO1xuXG59KSgpO1xuXG4vKiFcbiAqIEFuZ3VsYXIgTWF0ZXJpYWwgRGVzaWduXG4gKiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9tYXRlcmlhbFxuICogQGxpY2Vuc2UgTUlUXG4gKiB2MC43LjFcbiAqL1xuKGZ1bmN0aW9uKCkge1xuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBuZ2RvYyBtb2R1bGVcbiAqIEBuYW1lIG1hdGVyaWFsLmNvbXBvbmVudHMuY29udGVudFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU2Nyb2xsYWJsZSBjb250ZW50XG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdtYXRlcmlhbC5jb21wb25lbnRzLmNvbnRlbnQnLCBbXG4gICdtYXRlcmlhbC5jb3JlJ1xuXSlcbiAgLmRpcmVjdGl2ZSgnbWRDb250ZW50JywgbWRDb250ZW50RGlyZWN0aXZlKTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBtZENvbnRlbnRcbiAqIEBtb2R1bGUgbWF0ZXJpYWwuY29tcG9uZW50cy5jb250ZW50XG4gKlxuICogQHJlc3RyaWN0IEVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgPG1kLWNvbnRlbnQ+YCBkaXJlY3RpdmUgaXMgYSBjb250YWluZXIgZWxlbWVudCB1c2VmdWwgZm9yIHNjcm9sbGFibGUgY29udGVudFxuICpcbiAqICMjIyBSZXN0cmljdGlvbnNcbiAqXG4gKiAtIEFkZCB0aGUgYG1kLXBhZGRpbmdgIGNsYXNzIHRvIG1ha2UgdGhlIGNvbnRlbnQgcGFkZGVkLlxuICpcbiAqIEB1c2FnZVxuICogPGhsanMgbGFuZz1cImh0bWxcIj5cbiAqICA8bWQtY29udGVudCBjbGFzcz1cIm1kLXBhZGRpbmdcIj5cbiAqICAgICAgTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIG5lIHF1b2Qgbm92dW0gbWVpLlxuICogIDwvbWQtY29udGVudD5cbiAqIDwvaGxqcz5cbiAqXG4gKi9cblxuZnVuY3Rpb24gbWRDb250ZW50RGlyZWN0aXZlKCRtZFRoZW1pbmcpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyRlbGVtZW50JywgQ29udGVudENvbnRyb2xsZXJdLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICB2YXIgbm9kZSA9IGVsZW1lbnRbMF07XG5cbiAgICAgICRtZFRoZW1pbmcoZWxlbWVudCk7XG4gICAgICBzY29wZS4kYnJvYWRjYXN0KCckbWRDb250ZW50TG9hZGVkJywgZWxlbWVudCk7XG5cbiAgICAgIGlvc1Njcm9sbEZpeChlbGVtZW50WzBdKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gQ29udGVudENvbnRyb2xsZXIoJHNjb3BlLCAkZWxlbWVudCkge1xuICAgIHRoaXMuJHNjb3BlID0gJHNjb3BlO1xuICAgIHRoaXMuJGVsZW1lbnQgPSAkZWxlbWVudDtcbiAgfVxufVxubWRDb250ZW50RGlyZWN0aXZlLiRpbmplY3QgPSBbXCIkbWRUaGVtaW5nXCJdO1xuXG5mdW5jdGlvbiBpb3NTY3JvbGxGaXgobm9kZSkge1xuICAvLyBJT1MgRklYOlxuICAvLyBJZiB3ZSBzY3JvbGwgd2hlcmUgdGhlcmUgaXMgbm8gbW9yZSByb29tIGZvciB0aGUgd2VidmlldyB0byBzY3JvbGwsXG4gIC8vIGJ5IGRlZmF1bHQgdGhlIHdlYnZpZXcgaXRzZWxmIHdpbGwgc2Nyb2xsIHVwIGFuZCBkb3duLCB0aGlzIGxvb2tzIHJlYWxseVxuICAvLyBiYWQuICBTbyBpZiB3ZSBhcmUgc2Nyb2xsaW5nIHRvIHRoZSB2ZXJ5IHRvcCBvciBib3R0b20sIGFkZC9zdWJ0cmFjdCBvbmVcbiAgYW5ndWxhci5lbGVtZW50KG5vZGUpLm9uKCckbWQucHJlc3Nkb3duJywgZnVuY3Rpb24oZXYpIHtcbiAgICAvLyBPbmx5IHRvdWNoIGV2ZW50c1xuICAgIGlmIChldi5wb2ludGVyLnR5cGUgIT09ICd0JykgcmV0dXJuO1xuICAgIC8vIERvbid0IGxldCBhIGNoaWxkIGNvbnRlbnQncyB0b3VjaHN0YXJ0IHJ1aW4gaXQgZm9yIHVzLlxuICAgIGlmIChldi4kbWF0ZXJpYWxTY3JvbGxGaXhlZCkgcmV0dXJuO1xuICAgIGV2LiRtYXRlcmlhbFNjcm9sbEZpeGVkID0gdHJ1ZTtcblxuICAgIGlmIChub2RlLnNjcm9sbFRvcCA9PT0gMCkge1xuICAgICAgbm9kZS5zY3JvbGxUb3AgPSAxO1xuICAgIH0gZWxzZSBpZiAobm9kZS5zY3JvbGxIZWlnaHQgPT09IG5vZGUuc2Nyb2xsVG9wICsgbm9kZS5vZmZzZXRIZWlnaHQpIHtcbiAgICAgIG5vZGUuc2Nyb2xsVG9wIC09IDE7XG4gICAgfVxuICB9KTtcbn1cbn0pKCk7XG5cbi8qIVxuICogQW5ndWxhciBNYXRlcmlhbCBEZXNpZ25cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL21hdGVyaWFsXG4gKiBAbGljZW5zZSBNSVRcbiAqIHYwLjcuMVxuICovXG4oZnVuY3Rpb24oKSB7XG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQG5nZG9jIG1vZHVsZVxuICogQG5hbWUgbWF0ZXJpYWwuY29tcG9uZW50cy5kaWFsb2dcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ21hdGVyaWFsLmNvbXBvbmVudHMuZGlhbG9nJywgW1xuICAnbWF0ZXJpYWwuY29yZScsXG4gICdtYXRlcmlhbC5jb21wb25lbnRzLmJhY2tkcm9wJ1xuXSlcbiAgLmRpcmVjdGl2ZSgnbWREaWFsb2cnLCBNZERpYWxvZ0RpcmVjdGl2ZSlcbiAgLnByb3ZpZGVyKCckbWREaWFsb2cnLCBNZERpYWxvZ1Byb3ZpZGVyKTtcblxuZnVuY3Rpb24gTWREaWFsb2dEaXJlY3RpdmUoJCRyQUYsICRtZFRoZW1pbmcpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAkbWRUaGVtaW5nKGVsZW1lbnQpO1xuICAgICAgJCRyQUYoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjb250ZW50ID0gZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKCdtZC1jb250ZW50Jyk7XG4gICAgICAgIGlmIChjb250ZW50ICYmIGNvbnRlbnQuc2Nyb2xsSGVpZ2h0ID4gY29udGVudC5jbGllbnRIZWlnaHQpIHtcbiAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKCdtZC1jb250ZW50LW92ZXJmbG93Jyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cbk1kRGlhbG9nRGlyZWN0aXZlLiRpbmplY3QgPSBbXCIkJHJBRlwiLCBcIiRtZFRoZW1pbmdcIl07XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRtZERpYWxvZ1xuICogQG1vZHVsZSBtYXRlcmlhbC5jb21wb25lbnRzLmRpYWxvZ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogYCRtZERpYWxvZ2Agb3BlbnMgYSBkaWFsb2cgb3ZlciB0aGUgYXBwIGFuZCBwcm92aWRlcyBhIHNpbXBsZSBwcm9taXNlIEFQSS5cbiAqXG4gKiAjIyMgUmVzdHJpY3Rpb25zXG4gKlxuICogLSBUaGUgZGlhbG9nIGlzIGFsd2F5cyBnaXZlbiBhbiBpc29sYXRlIHNjb3BlLlxuICogLSBUaGUgZGlhbG9nJ3MgdGVtcGxhdGUgbXVzdCBoYXZlIGFuIG91dGVyIGA8bWQtZGlhbG9nPmAgZWxlbWVudC5cbiAqICAgSW5zaWRlLCB1c2UgYW4gYDxtZC1jb250ZW50PmAgZWxlbWVudCBmb3IgdGhlIGRpYWxvZydzIGNvbnRlbnQsIGFuZCB1c2VcbiAqICAgYW4gZWxlbWVudCB3aXRoIGNsYXNzIGBtZC1hY3Rpb25zYCBmb3IgdGhlIGRpYWxvZydzIGFjdGlvbnMuXG4gKlxuICogQHVzYWdlXG4gKiAjIyMjIEhUTUxcbiAqXG4gKiA8aGxqcyBsYW5nPVwiaHRtbFwiPlxuICogPGRpdiAgbmctYXBwPVwiZGVtb0FwcFwiIG5nLWNvbnRyb2xsZXI9XCJFbXBsb3llZUNvbnRyb2xsZXJcIj5cbiAqICAgPG1kLWJ1dHRvbiBuZy1jbGljaz1cInNob3dBbGVydCgpXCIgY2xhc3M9XCJtZC1yYWlzZWQgbWQtd2FyblwiPlxuICogICAgIEVtcGxveWVlIEFsZXJ0IVxuICogICA8L21kLWJ1dHRvbj5cbiAqICAgPG1kLWJ1dHRvbiBuZy1jbGljaz1cImNsb3NlQWxlcnQoKVwiIG5nLWRpc2FibGVkPVwiIWhhc0FsZXJ0KClcIiBjbGFzcz1cIm1kLXJhaXNlZFwiPlxuICogICAgIENsb3NlIEFsZXJ0XG4gKiAgIDwvbWQtYnV0dG9uPlxuICogICA8bWQtYnV0dG9uIG5nLWNsaWNrPVwic2hvd0dyZWV0aW5nKCRldmVudClcIiBjbGFzcz1cIm1kLXJhaXNlZCBtZC1wcmltYXJ5XCIgPlxuICogICAgIEdyZWV0IEVtcGxveWVlXG4gKiAgIDwvbWQtYnV0dG9uPlxuICogPC9kaXY+XG4gKiA8L2hsanM+XG4gKlxuICogIyMjIyBKYXZhU2NyaXB0XG4gKlxuICogPGhsanMgbGFuZz1cImpzXCI+XG4gKiAoZnVuY3Rpb24oYW5ndWxhciwgdW5kZWZpbmVkKXtcbiAqICAgXCJ1c2Ugc3RyaWN0XCI7XG4gKlxuICogICBhbmd1bGFyXG4gKiAgICAgLm1vZHVsZSgnZGVtb0FwcCcsIFsnbmdNYXRlcmlhbCddKVxuICogICAgIC5jb250cm9sbGVyKCdFbXBsb3llZUNvbnRyb2xsZXInLCBFbXBsb3llZUVkaXRvcilcbiAqICAgICAuY29udHJvbGxlcignR3JlZXRpbmdDb250cm9sbGVyJywgR3JlZXRpbmdDb250cm9sbGVyKTtcbiAqXG4gKiAgIC8vIEZpY3RpdGlvdXMgRW1wbG95ZWUgRWRpdG9yIHRvIHNob3cgaG93IHRvIHVzZSBzaW1wbGUgYW5kIGNvbXBsZXggZGlhbG9ncy5cbiAqXG4gKiAgIGZ1bmN0aW9uIEVtcGxveWVlRWRpdG9yKCRzY29wZSwgJG1kRGlhbG9nKSB7XG4gKiAgICAgdmFyIGFsZXJ0O1xuICpcbiAqICAgICAkc2NvcGUuc2hvd0FsZXJ0ID0gc2hvd0FsZXJ0O1xuICogICAgICRzY29wZS5jbG9zZUFsZXJ0ID0gY2xvc2VBbGVydDtcbiAqICAgICAkc2NvcGUuc2hvd0dyZWV0aW5nID0gc2hvd0N1c3RvbUdyZWV0aW5nO1xuICpcbiAqICAgICAkc2NvcGUuaGFzQWxlcnQgPSBmdW5jdGlvbigpIHsgcmV0dXJuICEhYWxlcnQgfTtcbiAqICAgICAkc2NvcGUudXNlck5hbWUgPSAkc2NvcGUudXNlck5hbWUgfHwgJ0JvYmJ5JztcbiAqXG4gKiAgICAgLy8gRGlhbG9nICMxIC0gU2hvdyBzaW1wbGUgYWxlcnQgZGlhbG9nIGFuZCBjYWNoZVxuICogICAgIC8vIHJlZmVyZW5jZSB0byBkaWFsb2cgaW5zdGFuY2VcbiAqXG4gKiAgICAgZnVuY3Rpb24gc2hvd0FsZXJ0KCkge1xuICogICAgICAgYWxlcnQgPSAkbWREaWFsb2cuYWxlcnQoKVxuICogICAgICAgICAudGl0bGUoJ0F0dGVudGlvbiwgJyArICRzY29wZS51c2VyTmFtZSlcbiAqICAgICAgICAgLmNvbnRlbnQoJ1RoaXMgaXMgYW4gZXhhbXBsZSBvZiBob3cgZWFzeSBkaWFsb2dzIGNhbiBiZSEnKVxuICogICAgICAgICAub2soJ0Nsb3NlJyk7XG4gKlxuICogICAgICAgJG1kRGlhbG9nXG4gKiAgICAgICAgICAgLnNob3coIGFsZXJ0IClcbiAqICAgICAgICAgICAuZmluYWxseShmdW5jdGlvbigpIHtcbiAqICAgICAgICAgICAgIGFsZXJ0ID0gdW5kZWZpbmVkO1xuICogICAgICAgICAgIH0pO1xuICogICAgIH1cbiAqXG4gKiAgICAgLy8gQ2xvc2UgdGhlIHNwZWNpZmllZCBkaWFsb2cgaW5zdGFuY2UgYW5kIHJlc29sdmUgd2l0aCAnZmluaXNoZWQnIGZsYWdcbiAqICAgICAvLyBOb3JtYWxseSB0aGlzIGlzIG5vdCBuZWVkZWQsIGp1c3QgdXNlICckbWREaWFsb2cuaGlkZSgpJyB0byBjbG9zZVxuICogICAgIC8vIHRoZSBtb3N0IHJlY2VudCBkaWFsb2cgcG9wdXAuXG4gKlxuICogICAgIGZ1bmN0aW9uIGNsb3NlQWxlcnQoKSB7XG4gKiAgICAgICAkbWREaWFsb2cuaGlkZSggYWxlcnQsIFwiZmluaXNoZWRcIiApO1xuICogICAgICAgYWxlcnQgPSB1bmRlZmluZWQ7XG4gKiAgICAgfVxuICpcbiAqICAgICAvLyBEaWFsb2cgIzIgLSBEZW1vbnN0cmF0ZSBtb3JlIGNvbXBsZXggZGlhbG9ncyBjb25zdHJ1Y3Rpb24gYW5kIHBvcHVwLlxuICpcbiAqICAgICBmdW5jdGlvbiBzaG93Q3VzdG9tR3JlZXRpbmcoJGV2ZW50KSB7XG4gKiAgICAgICAgICRtZERpYWxvZy5zaG93KHtcbiAqICAgICAgICAgICB0YXJnZXRFdmVudDogJGV2ZW50LFxuICogICAgICAgICAgIHRlbXBsYXRlOlxuICogICAgICAgICAgICAgJzxtZC1kaWFsb2c+JyArXG4gKlxuICogICAgICAgICAgICAgJyAgPG1kLWNvbnRlbnQ+SGVsbG8ge3sgZW1wbG95ZWUgfX0hPC9tZC1jb250ZW50PicgK1xuICpcbiAqICAgICAgICAgICAgICcgIDxkaXYgY2xhc3M9XCJtZC1hY3Rpb25zXCI+JyArXG4gKiAgICAgICAgICAgICAnICAgIDxtZC1idXR0b24gbmctY2xpY2s9XCJjbG9zZURpYWxvZygpXCI+JyArXG4gKiAgICAgICAgICAgICAnICAgICAgQ2xvc2UgR3JlZXRpbmcnICtcbiAqXG4gKiAgICAgICAgICAgICAnICAgIDwvbWQtYnV0dG9uPicgK1xuICogICAgICAgICAgICAgJyAgPC9kaXY+JyArXG4gKiAgICAgICAgICAgICAnPC9tZC1kaWFsb2c+JyxcbiAqICAgICAgICAgICBjb250cm9sbGVyOiAnR3JlZXRpbmdDb250cm9sbGVyJyxcbiAqICAgICAgICAgICBvbkNvbXBsZXRlOiBhZnRlclNob3dBbmltYXRpb24sXG4gKiAgICAgICAgICAgbG9jYWxzOiB7IGVtcGxveWVlOiAkc2NvcGUudXNlck5hbWUgfVxuICogICAgICAgICB9KTtcbiAqXG4gKiAgICAgICAgIC8vIFdoZW4gdGhlICdlbnRlcicgYW5pbWF0aW9uIGZpbmlzaGVzLi4uXG4gKlxuICogICAgICAgICBmdW5jdGlvbiBhZnRlclNob3dBbmltYXRpb24oc2NvcGUsIGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAqICAgICAgICAgICAgLy8gcG9zdC1zaG93IGNvZGUgaGVyZTogRE9NIGVsZW1lbnQgZm9jdXMsIGV0Yy5cbiAqICAgICAgICAgfVxuICogICAgIH1cbiAqICAgfVxuICpcbiAqICAgLy8gR3JlZXRpbmcgY29udHJvbGxlciB1c2VkIHdpdGggdGhlIG1vcmUgY29tcGxleCAnc2hvd0N1c3RvbUdyZWV0aW5nKCknIGN1c3RvbSBkaWFsb2dcbiAqXG4gKiAgIGZ1bmN0aW9uIEdyZWV0aW5nQ29udHJvbGxlcigkc2NvcGUsICRtZERpYWxvZywgZW1wbG95ZWUpIHtcbiAqICAgICAvLyBBc3NpZ25lZCBmcm9tIGNvbnN0cnVjdGlvbiA8Y29kZT5sb2NhbHM8L2NvZGU+IG9wdGlvbnMuLi5cbiAqICAgICAkc2NvcGUuZW1wbG95ZWUgPSBlbXBsb3llZTtcbiAqXG4gKiAgICAgJHNjb3BlLmNsb3NlRGlhbG9nID0gZnVuY3Rpb24oKSB7XG4gKiAgICAgICAvLyBFYXNpbHkgaGlkZXMgbW9zdCByZWNlbnQgZGlhbG9nIHNob3duLi4uXG4gKiAgICAgICAvLyBubyBzcGVjaWZpYyBpbnN0YW5jZSByZWZlcmVuY2UgaXMgbmVlZGVkLlxuICogICAgICAgJG1kRGlhbG9nLmhpZGUoKTtcbiAqICAgICB9O1xuICogICB9XG4gKlxuICogfSkoYW5ndWxhcik7XG4gKiA8L2hsanM+XG4gKi9cblxuIC8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJG1kRGlhbG9nI2FsZXJ0XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBCdWlsZHMgYSBwcmVjb25maWd1cmVkIGRpYWxvZyB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZS5cbiAqXG4gKiBAcmV0dXJucyB7b2JqfSBhbiBgJG1kRGlhbG9nUHJlc2V0YCB3aXRoIHRoZSBjaGFpbmFibGUgY29uZmlndXJhdGlvbiBtZXRob2RzOlxuICpcbiAqIC0gJG1kRGlhbG9nUHJlc2V0I3RpdGxlKHN0cmluZykgLSBzZXRzIHRpdGxlIHRvIHN0cmluZ1xuICogLSAkbWREaWFsb2dQcmVzZXQjY29udGVudChzdHJpbmcpIC0gc2V0cyBjb250ZW50IC8gbWVzc2FnZSB0byBzdHJpbmdcbiAqIC0gJG1kRGlhbG9nUHJlc2V0I29rKHN0cmluZykgLSBzZXRzIG9rYXkgYnV0dG9uIHRleHQgdG8gc3RyaW5nXG4gKlxuICovXG5cbiAvKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRtZERpYWxvZyNjb25maXJtXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBCdWlsZHMgYSBwcmVjb25maWd1cmVkIGRpYWxvZyB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZS4gWW91IGNhbiBjYWxsIHNob3cgYW5kIHRoZSBwcm9taXNlIHJldHVybmVkXG4gKiB3aWxsIGJlIHJlc29sdmVkIG9ubHkgaWYgdGhlIHVzZXIgY2xpY2tzIHRoZSBjb25maXJtIGFjdGlvbiBvbiB0aGUgZGlhbG9nLlxuICpcbiAqIEByZXR1cm5zIHtvYmp9IGFuIGAkbWREaWFsb2dQcmVzZXRgIHdpdGggdGhlIGNoYWluYWJsZSBjb25maWd1cmF0aW9uIG1ldGhvZHM6XG4gKlxuICogQWRkaXRpb25hbGx5LCBpdCBzdXBwb3J0cyB0aGUgZm9sbG93aW5nIG1ldGhvZHM6XG4gKlxuICogLSAkbWREaWFsb2dQcmVzZXQjdGl0bGUoc3RyaW5nKSAtIHNldHMgdGl0bGUgdG8gc3RyaW5nXG4gKiAtICRtZERpYWxvZ1ByZXNldCNjb250ZW50KHN0cmluZykgLSBzZXRzIGNvbnRlbnQgLyBtZXNzYWdlIHRvIHN0cmluZ1xuICogLSAkbWREaWFsb2dQcmVzZXQjb2soc3RyaW5nKSAtIHNldHMgb2theSBidXR0b24gdGV4dCB0byBzdHJpbmdcbiAqIC0gJG1kRGlhbG9nUHJlc2V0I2NhbmNlbChzdHJpbmcpIC0gc2V0cyBjYW5jZWwgYnV0dG9uIHRleHQgdG8gc3RyaW5nXG4gKlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJG1kRGlhbG9nI3Nob3dcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNob3cgYSBkaWFsb2cgd2l0aCB0aGUgc3BlY2lmaWVkIG9wdGlvbnMuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNPclByZXNldCBFaXRoZXIgcHJvdmlkZSBhbiBgJG1kRGlhbG9nUHJlc2V0YCByZXR1cm5lZCBmcm9tIGBhbGVydCgpYCwgYW5kXG4gKiBgY29uZmlybSgpYCwgb3IgYW4gb3B0aW9ucyBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKiAgIC0gYHRlbXBsYXRlVXJsYCAtIGB7c3RyaW5nPX1gOiBUaGUgdXJsIG9mIGEgdGVtcGxhdGUgdGhhdCB3aWxsIGJlIHVzZWQgYXMgdGhlIGNvbnRlbnRcbiAqICAgb2YgdGhlIGRpYWxvZy5cbiAqICAgLSBgdGVtcGxhdGVgIC0gYHtzdHJpbmc9fWA6IFNhbWUgYXMgdGVtcGxhdGVVcmwsIGV4Y2VwdCB0aGlzIGlzIGFuIGFjdHVhbCB0ZW1wbGF0ZSBzdHJpbmcuXG4gKiAgIC0gYHRhcmdldEV2ZW50YCAtIGB7RE9NQ2xpY2tFdmVudD19YDogQSBjbGljaydzIGV2ZW50IG9iamVjdC4gV2hlbiBwYXNzZWQgaW4gYXMgYW4gb3B0aW9uLFxuICogICAgIHRoZSBsb2NhdGlvbiBvZiB0aGUgY2xpY2sgd2lsbCBiZSB1c2VkIGFzIHRoZSBzdGFydGluZyBwb2ludCBmb3IgdGhlIG9wZW5pbmcgYW5pbWF0aW9uXG4gKiAgICAgb2YgdGhlIHRoZSBkaWFsb2cuXG4gKiAgIC0gYGRpc2FibGVQYXJlbnRTY3JvbGxgIC0gYHtib29sZWFuPX1gOiBXaGV0aGVyIHRvIGRpc2FibGUgc2Nyb2xsaW5nIHdoaWxlIHRoZSBkaWFsb2cgaXMgb3Blbi5cbiAqICAgICBEZWZhdWx0IHRydWUuXG4gKiAgIC0gYGhhc0JhY2tkcm9wYCAtIGB7Ym9vbGVhbj19YDogV2hldGhlciB0aGVyZSBzaG91bGQgYmUgYW4gb3BhcXVlIGJhY2tkcm9wIGJlaGluZCB0aGUgZGlhbG9nLlxuICogICAgIERlZmF1bHQgdHJ1ZS5cbiAqICAgLSBgY2xpY2tPdXRzaWRlVG9DbG9zZWAgLSBge2Jvb2xlYW49fWA6IFdoZXRoZXIgdGhlIHVzZXIgY2FuIGNsaWNrIG91dHNpZGUgdGhlIGRpYWxvZyB0b1xuICogICAgIGNsb3NlIGl0LiBEZWZhdWx0IHRydWUuXG4gKiAgIC0gYGVzY2FwZVRvQ2xvc2VgIC0gYHtib29sZWFuPX1gOiBXaGV0aGVyIHRoZSB1c2VyIGNhbiBwcmVzcyBlc2NhcGUgdG8gY2xvc2UgdGhlIGRpYWxvZy5cbiAqICAgICBEZWZhdWx0IHRydWUuXG4gKiAgIC0gYGNvbnRyb2xsZXJgIC0gYHtzdHJpbmc9fWA6IFRoZSBjb250cm9sbGVyIHRvIGFzc29jaWF0ZSB3aXRoIHRoZSBkaWFsb2cuIFRoZSBjb250cm9sbGVyXG4gKiAgICAgd2lsbCBiZSBpbmplY3RlZCB3aXRoIHRoZSBsb2NhbCBgJGhpZGVEaWFsb2dgLCB3aGljaCBpcyBhIGZ1bmN0aW9uIHVzZWQgdG8gaGlkZSB0aGUgZGlhbG9nLlxuICogICAtIGBsb2NhbHNgIC0gYHtvYmplY3Q9fWA6IEFuIG9iamVjdCBjb250YWluaW5nIGtleS92YWx1ZSBwYWlycy4gVGhlIGtleXMgd2lsbCBiZSB1c2VkIGFzIG5hbWVzXG4gKiAgICAgb2YgdmFsdWVzIHRvIGluamVjdCBpbnRvIHRoZSBjb250cm9sbGVyLiBGb3IgZXhhbXBsZSwgYGxvY2Fsczoge3RocmVlOiAzfWAgd291bGQgaW5qZWN0XG4gKiAgICAgYHRocmVlYCBpbnRvIHRoZSBjb250cm9sbGVyLCB3aXRoIHRoZSB2YWx1ZSAzLiBJZiBgYmluZFRvQ29udHJvbGxlcmAgaXMgdHJ1ZSwgdGhleSB3aWxsIGJlXG4gKiAgICAgY29waWVkIHRvIHRoZSBjb250cm9sbGVyIGluc3RlYWQuXG4gKiAgIC0gYGJpbmRUb0NvbnRyb2xsZXJgIC0gYGJvb2xgOiBiaW5kIHRoZSBsb2NhbHMgdG8gdGhlIGNvbnRyb2xsZXIsIGluc3RlYWQgb2YgcGFzc2luZyB0aGVtIGluXG4gKiAgIC0gYHJlc29sdmVgIC0gYHtvYmplY3Q9fWA6IFNpbWlsYXIgdG8gbG9jYWxzLCBleGNlcHQgaXQgdGFrZXMgcHJvbWlzZXMgYXMgdmFsdWVzLCBhbmQgdGhlXG4gKiAgICAgZGlhbG9nIHdpbGwgbm90IG9wZW4gdW50aWwgYWxsIG9mIHRoZSBwcm9taXNlcyByZXNvbHZlLlxuICogICAtIGBjb250cm9sbGVyQXNgIC0gYHtzdHJpbmc9fWA6IEFuIGFsaWFzIHRvIGFzc2lnbiB0aGUgY29udHJvbGxlciB0byBvbiB0aGUgc2NvcGUuXG4gKiAgIC0gYHBhcmVudGAgLSBge2VsZW1lbnQ9fWA6IFRoZSBlbGVtZW50IHRvIGFwcGVuZCB0aGUgZGlhbG9nIHRvLiBEZWZhdWx0cyB0byBhcHBlbmRpbmdcbiAqICAgICB0byB0aGUgcm9vdCBlbGVtZW50IG9mIHRoZSBhcHBsaWNhdGlvbi5cbiAqICAgLSBgb25Db21wbGV0ZWAgYHtmdW5jdGlvbj19YDogQ2FsbGJhY2sgZnVuY3Rpb24gdXNlZCB0byBhbm5vdW5jZSB3aGVuIHRoZSBzaG93KCkgYWN0aW9uIGlzXG4gKiAgICAgZmluaXNoZWQuXG4gKlxuICogQHJldHVybnMge3Byb21pc2V9IEEgcHJvbWlzZSB0aGF0IGNhbiBiZSByZXNvbHZlZCB3aXRoIGAkbWREaWFsb2cuaGlkZSgpYCBvclxuICogcmVqZWN0ZWQgd2l0aCBgbWREaWFsb2cuY2FuY2VsKClgLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJG1kRGlhbG9nI2hpZGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEhpZGUgYW4gZXhpc3RpbmcgZGlhbG9nIGFuZCByZXNvbHZlIHRoZSBwcm9taXNlIHJldHVybmVkIGZyb20gYCRtZERpYWxvZy5zaG93KClgLlxuICpcbiAqIEBwYXJhbSB7Kj19IHJlc3BvbnNlIEFuIGFyZ3VtZW50IGZvciB0aGUgcmVzb2x2ZWQgcHJvbWlzZS5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRtZERpYWxvZyNjYW5jZWxcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEhpZGUgYW4gZXhpc3RpbmcgZGlhbG9nIGFuZCByZWplY3QgdGhlIHByb21pc2UgcmV0dXJuZWQgZnJvbSBgJG1kRGlhbG9nLnNob3coKWAuXG4gKlxuICogQHBhcmFtIHsqPX0gcmVzcG9uc2UgQW4gYXJndW1lbnQgZm9yIHRoZSByZWplY3RlZCBwcm9taXNlLlxuICovXG5cbmZ1bmN0aW9uIE1kRGlhbG9nUHJvdmlkZXIoJCRpbnRlcmltRWxlbWVudFByb3ZpZGVyKSB7XG5cbiAgdmFyIGFsZXJ0RGlhbG9nTWV0aG9kcyA9IFsndGl0bGUnLCAnY29udGVudCcsICdhcmlhTGFiZWwnLCAnb2snXTtcblxuICBhZHZhbmNlZERpYWxvZ09wdGlvbnMuJGluamVjdCA9IFtcIiRtZERpYWxvZ1wiXTtcbiAgZGlhbG9nRGVmYXVsdE9wdGlvbnMuJGluamVjdCA9IFtcIiR0aW1lb3V0XCIsIFwiJHJvb3RFbGVtZW50XCIsIFwiJGNvbXBpbGVcIiwgXCIkYW5pbWF0ZVwiLCBcIiRtZEFyaWFcIiwgXCIkZG9jdW1lbnRcIiwgXCIkbWRVdGlsXCIsIFwiJG1kQ29uc3RhbnRcIiwgXCIkbWRUaGVtaW5nXCIsIFwiJCRyQUZcIiwgXCIkcVwiLCBcIiRtZERpYWxvZ1wiXTtcbiAgcmV0dXJuICQkaW50ZXJpbUVsZW1lbnRQcm92aWRlcignJG1kRGlhbG9nJylcbiAgICAuc2V0RGVmYXVsdHMoe1xuICAgICAgbWV0aG9kczogWydkaXNhYmxlUGFyZW50U2Nyb2xsJywgJ2hhc0JhY2tkcm9wJywgJ2NsaWNrT3V0c2lkZVRvQ2xvc2UnLCAnZXNjYXBlVG9DbG9zZScsICd0YXJnZXRFdmVudCddLFxuICAgICAgb3B0aW9uczogZGlhbG9nRGVmYXVsdE9wdGlvbnNcbiAgICB9KVxuICAgIC5hZGRQcmVzZXQoJ2FsZXJ0Jywge1xuICAgICAgbWV0aG9kczogWyd0aXRsZScsICdjb250ZW50JywgJ2FyaWFMYWJlbCcsICdvayddLFxuICAgICAgb3B0aW9uczogYWR2YW5jZWREaWFsb2dPcHRpb25zXG4gICAgfSlcbiAgICAuYWRkUHJlc2V0KCdjb25maXJtJywge1xuICAgICAgbWV0aG9kczogWyd0aXRsZScsICdjb250ZW50JywgJ2FyaWFMYWJlbCcsICdvaycsICdjYW5jZWwnXSxcbiAgICAgIG9wdGlvbnM6IGFkdmFuY2VkRGlhbG9nT3B0aW9uc1xuICAgIH0pO1xuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBhZHZhbmNlZERpYWxvZ09wdGlvbnMoJG1kRGlhbG9nKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRlbXBsYXRlOiBbXG4gICAgICAgICc8bWQtZGlhbG9nIGFyaWEtbGFiZWw9XCJ7eyBkaWFsb2cuYXJpYUxhYmVsIH19XCI+JyxcbiAgICAgICAgICAnPG1kLWNvbnRlbnQ+JyxcbiAgICAgICAgICAgICc8aDI+e3sgZGlhbG9nLnRpdGxlIH19PC9oMj4nLFxuICAgICAgICAgICAgJzxwPnt7IGRpYWxvZy5jb250ZW50IH19PC9wPicsXG4gICAgICAgICAgJzwvbWQtY29udGVudD4nLFxuICAgICAgICAgICc8ZGl2IGNsYXNzPVwibWQtYWN0aW9uc1wiPicsXG4gICAgICAgICAgICAnPG1kLWJ1dHRvbiBuZy1pZj1cImRpYWxvZy4kdHlwZSA9PSBcXCdjb25maXJtXFwnXCIgbmctY2xpY2s9XCJkaWFsb2cuYWJvcnQoKVwiPicsXG4gICAgICAgICAgICAgICd7eyBkaWFsb2cuY2FuY2VsIH19JyxcbiAgICAgICAgICAgICc8L21kLWJ1dHRvbj4nLFxuICAgICAgICAgICAgJzxtZC1idXR0b24gbmctY2xpY2s9XCJkaWFsb2cuaGlkZSgpXCIgY2xhc3M9XCJtZC1wcmltYXJ5XCI+JyxcbiAgICAgICAgICAgICAgJ3t7IGRpYWxvZy5vayB9fScsXG4gICAgICAgICAgICAnPC9tZC1idXR0b24+JyxcbiAgICAgICAgICAnPC9kaXY+JyxcbiAgICAgICAgJzwvbWQtZGlhbG9nPidcbiAgICAgIF0uam9pbignJyksXG4gICAgICBjb250cm9sbGVyOiBmdW5jdGlvbiBtZERpYWxvZ0N0cmwoKSB7XG4gICAgICAgIHRoaXMuaGlkZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRtZERpYWxvZy5oaWRlKHRydWUpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmFib3J0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJG1kRGlhbG9nLmNhbmNlbCgpO1xuICAgICAgICB9O1xuICAgICAgfSxcbiAgICAgIGNvbnRyb2xsZXJBczogJ2RpYWxvZycsXG4gICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlXG4gICAgfTtcbiAgfVxuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiBkaWFsb2dEZWZhdWx0T3B0aW9ucygkdGltZW91dCwgJHJvb3RFbGVtZW50LCAkY29tcGlsZSwgJGFuaW1hdGUsICRtZEFyaWEsICRkb2N1bWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJG1kVXRpbCwgJG1kQ29uc3RhbnQsICRtZFRoZW1pbmcsICQkckFGLCAkcSwgJG1kRGlhbG9nKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGhhc0JhY2tkcm9wOiB0cnVlLFxuICAgICAgaXNvbGF0ZVNjb3BlOiB0cnVlLFxuICAgICAgb25TaG93OiBvblNob3csXG4gICAgICBvblJlbW92ZTogb25SZW1vdmUsXG4gICAgICBjbGlja091dHNpZGVUb0Nsb3NlOiB0cnVlLFxuICAgICAgZXNjYXBlVG9DbG9zZTogdHJ1ZSxcbiAgICAgIHRhcmdldEV2ZW50OiBudWxsLFxuICAgICAgZGlzYWJsZVBhcmVudFNjcm9sbDogdHJ1ZSxcbiAgICAgIHRyYW5zZm9ybVRlbXBsYXRlOiBmdW5jdGlvbih0ZW1wbGF0ZSkge1xuICAgICAgICByZXR1cm4gJzxkaXYgY2xhc3M9XCJtZC1kaWFsb2ctY29udGFpbmVyXCI+JyArIHRlbXBsYXRlICsgJzwvZGl2Pic7XG4gICAgICB9XG4gICAgfTtcblxuXG4gICAgLy8gT24gc2hvdyBtZXRob2QgZm9yIGRpYWxvZ3NcbiAgICBmdW5jdGlvbiBvblNob3coc2NvcGUsIGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgIC8vIEluY2FzZSB0aGUgdXNlciBwcm92aWRlcyBhIHJhdyBkb20gZWxlbWVudCwgYWx3YXlzIHdyYXAgaXQgaW4ganFMaXRlXG4gICAgICBvcHRpb25zLnBhcmVudCA9IGFuZ3VsYXIuZWxlbWVudChvcHRpb25zLnBhcmVudCk7XG5cbiAgICAgIG9wdGlvbnMucG9wSW5UYXJnZXQgPSBhbmd1bGFyLmVsZW1lbnQoKG9wdGlvbnMudGFyZ2V0RXZlbnQgfHwge30pLnRhcmdldCk7XG4gICAgICB2YXIgY2xvc2VCdXR0b24gPSBmaW5kQ2xvc2VCdXR0b24oKTtcblxuICAgICAgY29uZmlndXJlQXJpYShlbGVtZW50LmZpbmQoJ21kLWRpYWxvZycpKTtcblxuICAgICAgaWYgKG9wdGlvbnMuaGFzQmFja2Ryb3ApIHtcbiAgICAgICAgdmFyIHBhcmVudE9mZnNldCA9IG9wdGlvbnMucGFyZW50LnByb3AoJ3Njcm9sbFRvcCcpO1xuICAgICAgICBvcHRpb25zLmJhY2tkcm9wID0gYW5ndWxhci5lbGVtZW50KCc8bWQtYmFja2Ryb3AgY2xhc3M9XCJtZC1kaWFsb2ctYmFja2Ryb3AgbWQtb3BhcXVlXCI+Jyk7XG4gICAgICAgICRtZFRoZW1pbmcuaW5oZXJpdChvcHRpb25zLmJhY2tkcm9wLCBvcHRpb25zLnBhcmVudCk7XG4gICAgICAgICRhbmltYXRlLmVudGVyKG9wdGlvbnMuYmFja2Ryb3AsIG9wdGlvbnMucGFyZW50KTtcbiAgICAgICAgZWxlbWVudC5jc3MoJ3RvcCcsIHBhcmVudE9mZnNldCArJ3B4Jyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLmRpc2FibGVQYXJlbnRTY3JvbGwpIHtcbiAgICAgICAgb3B0aW9ucy5sYXN0T3ZlcmZsb3cgPSBvcHRpb25zLnBhcmVudC5jc3MoJ292ZXJmbG93Jyk7XG4gICAgICAgIG9wdGlvbnMucGFyZW50LmNzcygnb3ZlcmZsb3cnLCAnaGlkZGVuJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkaWFsb2dQb3BJbihcbiAgICAgICAgZWxlbWVudCxcbiAgICAgICAgb3B0aW9ucy5wYXJlbnQsXG4gICAgICAgIG9wdGlvbnMucG9wSW5UYXJnZXQgJiYgb3B0aW9ucy5wb3BJblRhcmdldC5sZW5ndGggJiYgb3B0aW9ucy5wb3BJblRhcmdldFxuICAgICAgKVxuICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmVzY2FwZVRvQ2xvc2UpIHtcbiAgICAgICAgICBvcHRpb25zLnJvb3RFbGVtZW50S2V5dXBDYWxsYmFjayA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT09ICRtZENvbnN0YW50LktFWV9DT0RFLkVTQ0FQRSkge1xuICAgICAgICAgICAgICAkdGltZW91dCgkbWREaWFsb2cuY2FuY2VsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgICRyb290RWxlbWVudC5vbigna2V5dXAnLCBvcHRpb25zLnJvb3RFbGVtZW50S2V5dXBDYWxsYmFjayk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5jbGlja091dHNpZGVUb0Nsb3NlKSB7XG4gICAgICAgICAgb3B0aW9ucy5kaWFsb2dDbGlja091dHNpZGVDYWxsYmFjayA9IGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgICAvLyBPbmx5IGNsb3NlIGlmIHdlIGNsaWNrIHRoZSBmbGV4IGNvbnRhaW5lciBvdXRzaWRlIHRoZSBiYWNrZHJvcFxuICAgICAgICAgICAgaWYgKGV2LnRhcmdldCA9PT0gZWxlbWVudFswXSkge1xuICAgICAgICAgICAgICAkdGltZW91dCgkbWREaWFsb2cuY2FuY2VsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIGVsZW1lbnQub24oJ2NsaWNrJywgb3B0aW9ucy5kaWFsb2dDbGlja091dHNpZGVDYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgICAgY2xvc2VCdXR0b24uZm9jdXMoKTtcbiAgICAgIH0pO1xuXG5cbiAgICAgIGZ1bmN0aW9uIGZpbmRDbG9zZUJ1dHRvbigpIHtcbiAgICAgICAgLy9JZiBubyBlbGVtZW50IHdpdGggY2xhc3MgZGlhbG9nLWNsb3NlLCB0cnkgdG8gZmluZCB0aGUgbGFzdFxuICAgICAgICAvL2J1dHRvbiBjaGlsZCBpbiBtZC1hY3Rpb25zIGFuZCBhc3N1bWUgaXQgaXMgYSBjbG9zZSBidXR0b25cbiAgICAgICAgdmFyIGNsb3NlQnV0dG9uID0gZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKCcuZGlhbG9nLWNsb3NlJyk7XG4gICAgICAgIGlmICghY2xvc2VCdXR0b24pIHtcbiAgICAgICAgICB2YXIgYWN0aW9uQnV0dG9ucyA9IGVsZW1lbnRbMF0ucXVlcnlTZWxlY3RvckFsbCgnLm1kLWFjdGlvbnMgYnV0dG9uJyk7XG4gICAgICAgICAgY2xvc2VCdXR0b24gPSBhY3Rpb25CdXR0b25zWyBhY3Rpb25CdXR0b25zLmxlbmd0aCAtIDEgXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYW5ndWxhci5lbGVtZW50KGNsb3NlQnV0dG9uKTtcbiAgICAgIH1cblxuICAgIH1cblxuICAgIC8vIE9uIHJlbW92ZSBmdW5jdGlvbiBmb3IgYWxsIGRpYWxvZ3NcbiAgICBmdW5jdGlvbiBvblJlbW92ZShzY29wZSwgZWxlbWVudCwgb3B0aW9ucykge1xuXG4gICAgICBpZiAob3B0aW9ucy5iYWNrZHJvcCkge1xuICAgICAgICAkYW5pbWF0ZS5sZWF2ZShvcHRpb25zLmJhY2tkcm9wKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLmRpc2FibGVQYXJlbnRTY3JvbGwpIHtcbiAgICAgICAgb3B0aW9ucy5wYXJlbnQuY3NzKCdvdmVyZmxvdycsIG9wdGlvbnMubGFzdE92ZXJmbG93KTtcbiAgICAgICAgZGVsZXRlIG9wdGlvbnMubGFzdE92ZXJmbG93O1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMuZXNjYXBlVG9DbG9zZSkge1xuICAgICAgICAkcm9vdEVsZW1lbnQub2ZmKCdrZXl1cCcsIG9wdGlvbnMucm9vdEVsZW1lbnRLZXl1cENhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLmNsaWNrT3V0c2lkZVRvQ2xvc2UpIHtcbiAgICAgICAgZWxlbWVudC5vZmYoJ2NsaWNrJywgb3B0aW9ucy5kaWFsb2dDbGlja091dHNpZGVDYWxsYmFjayk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGlhbG9nUG9wT3V0KFxuICAgICAgICBlbGVtZW50LFxuICAgICAgICBvcHRpb25zLnBhcmVudCxcbiAgICAgICAgb3B0aW9ucy5wb3BJblRhcmdldCAmJiBvcHRpb25zLnBvcEluVGFyZ2V0Lmxlbmd0aCAmJiBvcHRpb25zLnBvcEluVGFyZ2V0XG4gICAgICApLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgIG9wdGlvbnMuc2NvcGUuJGRlc3Ryb3koKTtcbiAgICAgICAgZWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgb3B0aW9ucy5wb3BJblRhcmdldCAmJiBvcHRpb25zLnBvcEluVGFyZ2V0LmZvY3VzKCk7XG4gICAgICB9KTtcblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluamVjdCBBUklBLXNwZWNpZmljIGF0dHJpYnV0ZXMgYXBwcm9wcmlhdGUgZm9yIERpYWxvZ3NcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25maWd1cmVBcmlhKGVsZW1lbnQpIHtcbiAgICAgIGVsZW1lbnQuYXR0cih7XG4gICAgICAgICdyb2xlJzogJ2RpYWxvZydcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgZGlhbG9nQ29udGVudCA9IGVsZW1lbnQuZmluZCgnbWQtY29udGVudCcpO1xuICAgICAgaWYgKGRpYWxvZ0NvbnRlbnQubGVuZ3RoID09PSAwKXtcbiAgICAgICAgZGlhbG9nQ29udGVudCA9IGVsZW1lbnQ7XG4gICAgICB9XG4gICAgICAkbWRBcmlhLmV4cGVjdEFzeW5jKGVsZW1lbnQsICdhcmlhLWxhYmVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB3b3JkcyA9IGRpYWxvZ0NvbnRlbnQudGV4dCgpLnNwbGl0KC9cXHMrLyk7XG4gICAgICAgIGlmICh3b3Jkcy5sZW5ndGggPiAzKSB3b3JkcyA9IHdvcmRzLnNsaWNlKDAsMykuY29uY2F0KCcuLi4nKTtcbiAgICAgICAgcmV0dXJuIHdvcmRzLmpvaW4oJyAnKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRpYWxvZ1BvcEluKGNvbnRhaW5lciwgcGFyZW50RWxlbWVudCwgY2xpY2tFbGVtZW50KSB7XG4gICAgICB2YXIgZGlhbG9nRWwgPSBjb250YWluZXIuZmluZCgnbWQtZGlhbG9nJyk7XG5cbiAgICAgIHBhcmVudEVsZW1lbnQuYXBwZW5kKGNvbnRhaW5lcik7XG4gICAgICB0cmFuc2Zvcm1Ub0NsaWNrRWxlbWVudChkaWFsb2dFbCwgY2xpY2tFbGVtZW50KTtcblxuICAgICAgJCRyQUYoZnVuY3Rpb24oKSB7XG4gICAgICAgIGRpYWxvZ0VsLmFkZENsYXNzKCd0cmFuc2l0aW9uLWluJylcbiAgICAgICAgICAuY3NzKCRtZENvbnN0YW50LkNTUy5UUkFOU0ZPUk0sICcnKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gZGlhbG9nVHJhbnNpdGlvbkVuZChkaWFsb2dFbCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGlhbG9nUG9wT3V0KGNvbnRhaW5lciwgcGFyZW50RWxlbWVudCwgY2xpY2tFbGVtZW50KSB7XG4gICAgICB2YXIgZGlhbG9nRWwgPSBjb250YWluZXIuZmluZCgnbWQtZGlhbG9nJyk7XG5cbiAgICAgIGRpYWxvZ0VsLmFkZENsYXNzKCd0cmFuc2l0aW9uLW91dCcpLnJlbW92ZUNsYXNzKCd0cmFuc2l0aW9uLWluJyk7XG4gICAgICB0cmFuc2Zvcm1Ub0NsaWNrRWxlbWVudChkaWFsb2dFbCwgY2xpY2tFbGVtZW50KTtcblxuICAgICAgcmV0dXJuIGRpYWxvZ1RyYW5zaXRpb25FbmQoZGlhbG9nRWwpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRyYW5zZm9ybVRvQ2xpY2tFbGVtZW50KGRpYWxvZ0VsLCBjbGlja0VsZW1lbnQpIHtcbiAgICAgIGlmIChjbGlja0VsZW1lbnQpIHtcbiAgICAgICAgdmFyIGNsaWNrUmVjdCA9IGNsaWNrRWxlbWVudFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgdmFyIGRpYWxvZ1JlY3QgPSBkaWFsb2dFbFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICB2YXIgc2NhbGVYID0gTWF0aC5taW4oMC41LCBjbGlja1JlY3Qud2lkdGggLyBkaWFsb2dSZWN0LndpZHRoKTtcbiAgICAgICAgdmFyIHNjYWxlWSA9IE1hdGgubWluKDAuNSwgY2xpY2tSZWN0LmhlaWdodCAvIGRpYWxvZ1JlY3QuaGVpZ2h0KTtcblxuICAgICAgICBkaWFsb2dFbC5jc3MoJG1kQ29uc3RhbnQuQ1NTLlRSQU5TRk9STSwgJ3RyYW5zbGF0ZTNkKCcgK1xuICAgICAgICAgICgtZGlhbG9nUmVjdC5sZWZ0ICsgY2xpY2tSZWN0LmxlZnQgKyBjbGlja1JlY3Qud2lkdGgvMiAtIGRpYWxvZ1JlY3Qud2lkdGgvMikgKyAncHgsJyArXG4gICAgICAgICAgKC1kaWFsb2dSZWN0LnRvcCArIGNsaWNrUmVjdC50b3AgKyBjbGlja1JlY3QuaGVpZ2h0LzIgLSBkaWFsb2dSZWN0LmhlaWdodC8yKSArICdweCwnICtcbiAgICAgICAgICAnMCkgc2NhbGUoJyArIHNjYWxlWCArICcsJyArIHNjYWxlWSArICcpJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRpYWxvZ1RyYW5zaXRpb25FbmQoZGlhbG9nRWwpIHtcbiAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICBkaWFsb2dFbC5vbigkbWRDb25zdGFudC5DU1MuVFJBTlNJVElPTkVORCwgZmluaXNoZWQpO1xuICAgICAgZnVuY3Rpb24gZmluaXNoZWQoZXYpIHtcbiAgICAgICAgLy9NYWtlIHN1cmUgdGhpcyB0cmFuc2l0aW9uZW5kIGRpZG4ndCBidWJibGUgdXAgZnJvbSBhIGNoaWxkXG4gICAgICAgIGlmIChldi50YXJnZXQgPT09IGRpYWxvZ0VsWzBdKSB7XG4gICAgICAgICAgZGlhbG9nRWwub2ZmKCRtZENvbnN0YW50LkNTUy5UUkFOU0lUSU9ORU5ELCBmaW5pc2hlZCk7XG4gICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICB9XG5cbiAgfVxufVxuTWREaWFsb2dQcm92aWRlci4kaW5qZWN0ID0gW1wiJCRpbnRlcmltRWxlbWVudFByb3ZpZGVyXCJdO1xuXG59KSgpO1xuXG4vKiFcbiAqIEFuZ3VsYXIgTWF0ZXJpYWwgRGVzaWduXG4gKiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9tYXRlcmlhbFxuICogQGxpY2Vuc2UgTUlUXG4gKiB2MC43LjFcbiAqL1xuKGZ1bmN0aW9uKCkge1xuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBuZ2RvYyBtb2R1bGVcbiAqIEBuYW1lIG1hdGVyaWFsLmNvbXBvbmVudHMuZGl2aWRlclxuICogQGRlc2NyaXB0aW9uIERpdmlkZXIgbW9kdWxlIVxuICovXG5hbmd1bGFyLm1vZHVsZSgnbWF0ZXJpYWwuY29tcG9uZW50cy5kaXZpZGVyJywgW1xuICAnbWF0ZXJpYWwuY29yZSdcbl0pXG4gIC5kaXJlY3RpdmUoJ21kRGl2aWRlcicsIE1kRGl2aWRlckRpcmVjdGl2ZSk7XG5cbmZ1bmN0aW9uIE1kRGl2aWRlckNvbnRyb2xsZXIoKXt9XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbWREaXZpZGVyXG4gKiBAbW9kdWxlIG1hdGVyaWFsLmNvbXBvbmVudHMuZGl2aWRlclxuICogQHJlc3RyaWN0IEVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERpdmlkZXJzIGdyb3VwIGFuZCBzZXBhcmF0ZSBjb250ZW50IHdpdGhpbiBsaXN0cyBhbmQgcGFnZSBsYXlvdXRzIHVzaW5nIHN0cm9uZyB2aXN1YWwgYW5kIHNwYXRpYWwgZGlzdGluY3Rpb25zLiBUaGlzIGRpdmlkZXIgaXMgYSB0aGluIHJ1bGUsIGxpZ2h0d2VpZ2h0IGVub3VnaCB0byBub3QgZGlzdHJhY3QgdGhlIHVzZXIgZnJvbSBjb250ZW50LlxuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG1kLWluc2V0IEFkZCB0aGlzIGF0dHJpYnV0ZSB0byBhY3RpdmF0ZSB0aGUgaW5zZXQgZGl2aWRlciBzdHlsZS5cbiAqIEB1c2FnZVxuICogPGhsanMgbGFuZz1cImh0bWxcIj5cbiAqIDxtZC1kaXZpZGVyPjwvbWQtZGl2aWRlcj5cbiAqXG4gKiA8bWQtZGl2aWRlciBtZC1pbnNldD48L21kLWRpdmlkZXI+XG4gKiA8L2hsanM+XG4gKlxuICovXG5mdW5jdGlvbiBNZERpdmlkZXJEaXJlY3RpdmUoJG1kVGhlbWluZykge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRScsXG4gICAgbGluazogJG1kVGhlbWluZyxcbiAgICBjb250cm9sbGVyOiBbTWREaXZpZGVyQ29udHJvbGxlcl1cbiAgfTtcbn1cbk1kRGl2aWRlckRpcmVjdGl2ZS4kaW5qZWN0ID0gW1wiJG1kVGhlbWluZ1wiXTtcbn0pKCk7XG5cbi8qIVxuICogQW5ndWxhciBNYXRlcmlhbCBEZXNpZ25cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL21hdGVyaWFsXG4gKiBAbGljZW5zZSBNSVRcbiAqIHYwLjcuMVxuICovXG4oZnVuY3Rpb24oKSB7XG4ndXNlIHN0cmljdCc7XG5cbi8qXG4gKiBAbmdkb2MgbW9kdWxlXG4gKiBAbmFtZSBtYXRlcmlhbC5jb21wb25lbnRzLmljb25cbiAqIEBkZXNjcmlwdGlvblxuICogSWNvblxuICovXG5hbmd1bGFyLm1vZHVsZSgnbWF0ZXJpYWwuY29tcG9uZW50cy5pY29uJywgW1xuICAnbWF0ZXJpYWwuY29yZSdcbl0pXG4gIC5kaXJlY3RpdmUoJ21kSWNvbicsIG1kSWNvbkRpcmVjdGl2ZSk7XG5cbi8qXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBtZEljb25cbiAqIEBtb2R1bGUgbWF0ZXJpYWwuY29tcG9uZW50cy5pY29uXG4gKlxuICogQHJlc3RyaWN0IEVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgPG1kLWljb24+YCBkaXJlY3RpdmUgaXMgYW4gZWxlbWVudCB1c2VmdWwgZm9yIFNWRyBpY29uc1xuICpcbiAqIEB1c2FnZVxuICogPGhsanMgbGFuZz1cImh0bWxcIj5cbiAqICA8bWQtaWNvbiBpY29uPVwiL2ltZy9pY29ucy9pY19hY2Nlc3NfdGltZV8yNHB4LnN2Z1wiPlxuICogIDwvbWQtaWNvbj5cbiAqIDwvaGxqcz5cbiAqXG4gKi9cbmZ1bmN0aW9uIG1kSWNvbkRpcmVjdGl2ZSgpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHRlbXBsYXRlOiAnPG9iamVjdCBjbGFzcz1cIm1kLWljb25cIj48L29iamVjdD4nLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgIHZhciBvYmplY3QgPSBhbmd1bGFyLmVsZW1lbnQoZWxlbWVudFswXS5jaGlsZHJlblswXSk7XG4gICAgICBpZihhbmd1bGFyLmlzRGVmaW5lZChhdHRyLmljb24pKSB7XG4gICAgICAgIG9iamVjdC5hdHRyKCdkYXRhJywgYXR0ci5pY29uKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG59KSgpO1xuXG4vKiFcbiAqIEFuZ3VsYXIgTWF0ZXJpYWwgRGVzaWduXG4gKiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9tYXRlcmlhbFxuICogQGxpY2Vuc2UgTUlUXG4gKiB2MC43LjFcbiAqL1xuKGZ1bmN0aW9uKCkge1xuXG4vKipcbiAqIEBuZ2RvYyBtb2R1bGVcbiAqIEBuYW1lIG1hdGVyaWFsLmNvbXBvbmVudHMuaW5wdXRcbiAqL1xuXG5hbmd1bGFyLm1vZHVsZSgnbWF0ZXJpYWwuY29tcG9uZW50cy5pbnB1dCcsIFtcbiAgJ21hdGVyaWFsLmNvcmUnXG5dKVxuICAuZGlyZWN0aXZlKCdtZElucHV0Q29udGFpbmVyJywgbWRJbnB1dENvbnRhaW5lckRpcmVjdGl2ZSlcbiAgLmRpcmVjdGl2ZSgnbGFiZWwnLCBsYWJlbERpcmVjdGl2ZSlcbiAgLmRpcmVjdGl2ZSgnaW5wdXQnLCBpbnB1dFRleHRhcmVhRGlyZWN0aXZlKVxuICAuZGlyZWN0aXZlKCd0ZXh0YXJlYScsIGlucHV0VGV4dGFyZWFEaXJlY3RpdmUpXG4gIC5kaXJlY3RpdmUoJ21kTWF4bGVuZ3RoJywgbWRNYXhsZW5ndGhEaXJlY3RpdmUpXG4gIC5kaXJlY3RpdmUoJ3BsYWNlaG9sZGVyJywgcGxhY2Vob2xkZXJEaXJlY3RpdmUpO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG1kSW5wdXRDb250YWluZXJcbiAqIEBtb2R1bGUgbWF0ZXJpYWwuY29tcG9uZW50cy5pbnB1dFxuICpcbiAqIEByZXN0cmljdCBFXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBgPG1kLWlucHV0LWNvbnRhaW5lcj5gIGlzIHRoZSBwYXJlbnQgb2YgYW55IGlucHV0IG9yIHRleHRhcmVhIGVsZW1lbnQuXG4gKlxuICogSW5wdXQgYW5kIHRleHRhcmVhIGVsZW1lbnRzIHdpbGwgbm90IGJlaGF2ZSBwcm9wZXJseSB1bmxlc3MgdGhlIG1kLWlucHV0LWNvbnRhaW5lciBcbiAqIHBhcmVudCBpcyBwcm92aWRlZC5cbiAqXG4gKiBAcGFyYW0gbWQtaXMtZXJyb3Ige2V4cHJlc3Npb249fSBXaGVuIHRoZSBnaXZlbiBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLCB0aGUgaW5wdXQgY29udGFpbmVyIHdpbGwgZ28gaW50byBlcnJvciBzdGF0ZS4gRGVmYXVsdHMgdG8gZXJyb3JpbmcgaWYgdGhlIGlucHV0IGhhcyBiZWVuIHRvdWNoZWQgYW5kIGlzIGludmFsaWQuXG4gKlxuICogQHVzYWdlXG4gKiA8aGxqcyBsYW5nPVwiaHRtbFwiPlxuICpcbiAqIDxtZC1pbnB1dC1jb250YWluZXI+XG4gKiAgIDxsYWJlbD5Vc2VybmFtZTwvbGFiZWw+XG4gKiAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwidXNlci5uYW1lXCI+XG4gKiA8L21kLWlucHV0LWNvbnRhaW5lcj5cbiAqXG4gKiA8bWQtaW5wdXQtY29udGFpbmVyPlxuICogICA8bGFiZWw+RGVzY3JpcHRpb248L2xhYmVsPlxuICogICA8dGV4dGFyZWEgbmctbW9kZWw9XCJ1c2VyLmRlc2NyaXB0aW9uXCI+PC90ZXh0YXJlYT5cbiAqIDwvbWQtaW5wdXQtY29udGFpbmVyPlxuICpcbiAqIDwvaGxqcz5cbiAqL1xuZnVuY3Rpb24gbWRJbnB1dENvbnRhaW5lckRpcmVjdGl2ZSgkbWRUaGVtaW5nLCAkcGFyc2UpIHtcbiAgQ29udGFpbmVyQ3RybC4kaW5qZWN0ID0gW1wiJHNjb3BlXCIsIFwiJGVsZW1lbnRcIiwgXCIkYXR0cnNcIl07XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICBsaW5rOiBwb3N0TGluayxcbiAgICBjb250cm9sbGVyOiBDb250YWluZXJDdHJsXG4gIH07XG5cbiAgZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAkbWRUaGVtaW5nKGVsZW1lbnQpO1xuICB9XG4gIGZ1bmN0aW9uIENvbnRhaW5lckN0cmwoJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgc2VsZi5pc0Vycm9yR2V0dGVyID0gJGF0dHJzLm1kSXNFcnJvciAmJiAkcGFyc2UoJGF0dHJzLm1kSXNFcnJvcik7XG5cbiAgICBzZWxmLmVsZW1lbnQgPSAkZWxlbWVudDtcbiAgICBzZWxmLnNldEZvY3VzZWQgPSBmdW5jdGlvbihpc0ZvY3VzZWQpIHtcbiAgICAgICRlbGVtZW50LnRvZ2dsZUNsYXNzKCdtZC1pbnB1dC1mb2N1c2VkJywgISFpc0ZvY3VzZWQpO1xuICAgIH07XG4gICAgc2VsZi5zZXRIYXNWYWx1ZSA9IGZ1bmN0aW9uKGhhc1ZhbHVlKSB7XG4gICAgICAkZWxlbWVudC50b2dnbGVDbGFzcygnbWQtaW5wdXQtaGFzLXZhbHVlJywgISFoYXNWYWx1ZSk7XG4gICAgfTtcbiAgICBzZWxmLnNldEludmFsaWQgPSBmdW5jdGlvbihpc0ludmFsaWQpIHtcbiAgICAgICRlbGVtZW50LnRvZ2dsZUNsYXNzKCdtZC1pbnB1dC1pbnZhbGlkJywgISFpc0ludmFsaWQpO1xuICAgIH07XG4gICAgJHNjb3BlLiR3YXRjaChmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzZWxmLmxhYmVsICYmIHNlbGYuaW5wdXQ7XG4gICAgfSwgZnVuY3Rpb24oaGFzTGFiZWxBbmRJbnB1dCkge1xuICAgICAgaWYgKGhhc0xhYmVsQW5kSW5wdXQgJiYgIXNlbGYubGFiZWwuYXR0cignZm9yJykpIHtcbiAgICAgICAgc2VsZi5sYWJlbC5hdHRyKCdmb3InLCBzZWxmLmlucHV0LmF0dHIoJ2lkJykpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5tZElucHV0Q29udGFpbmVyRGlyZWN0aXZlLiRpbmplY3QgPSBbXCIkbWRUaGVtaW5nXCIsIFwiJHBhcnNlXCJdO1xuXG5mdW5jdGlvbiBsYWJlbERpcmVjdGl2ZSgpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHJlcXVpcmU6ICdeP21kSW5wdXRDb250YWluZXInLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjb250YWluZXJDdHJsKSB7XG4gICAgICBpZiAoIWNvbnRhaW5lckN0cmwpIHJldHVybjtcblxuICAgICAgY29udGFpbmVyQ3RybC5sYWJlbCA9IGVsZW1lbnQ7XG4gICAgICBzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnRhaW5lckN0cmwubGFiZWwgPSBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIGlucHV0XG4gKiBAcmVzdHJpY3QgRVxuICogQG1vZHVsZSBtYXRlcmlhbC5jb21wb25lbnRzLmlucHV0XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBNdXN0IGJlIHBsYWNlZCBhcyBhIGNoaWxkIG9mIGFuIGA8bWQtaW5wdXQtY29udGFpbmVyPmAuIFxuICpcbiAqIEJlaGF2ZXMgbGlrZSB0aGUgW0FuZ3VsYXJKUyBpbnB1dCBkaXJlY3RpdmVdKGh0dHBzOi8vZG9jcy5hbmd1bGFyanMub3JnL2FwaS9uZy9kaXJlY3RpdmUvaW5wdXQpLlxuICpcbiAqIEB1c2FnZVxuICogPGhsanMgbGFuZz1cImh0bWxcIj5cbiAqIDxtZC1pbnB1dC1jb250YWluZXI+XG4gKiAgIDxsYWJlbD5Db2xvcjwvbGFiZWw+XG4gKiAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwiY29sb3JcIiByZXF1aXJlZCBtZC1tYXhsZW5ndGg9XCIxMFwiPlxuICogPC9tZC1pbnB1dC1jb250YWluZXI+XG4gKiA8L2hsanM+XG4gKiA8aDM+V2l0aCBFcnJvcnMgKHVzZXMgW25nTWVzc2FnZXNdKGh0dHBzOi8vZG9jcy5hbmd1bGFyanMub3JnL2FwaS9uZ01lc3NhZ2VzKSk8L2gzPlxuICogPGhsanMgbGFuZz1cImh0bWxcIj5cbiAqIDxmb3JtIG5hbWU9XCJ1c2VyRm9ybVwiPlxuICogICA8bWQtaW5wdXQtY29udGFpbmVyPlxuICogICAgIDxsYWJlbD5MYXN0IE5hbWU8L2xhYmVsPlxuICogICAgIDxpbnB1dCBuYW1lPVwibGFzdE5hbWVcIiBuZy1tb2RlbD1cImxhc3ROYW1lXCIgcmVxdWlyZWQgbWQtbWF4bGVuZ3RoPVwiMTBcIiBtaW5sZW5ndGg9XCI0XCI+XG4gKiAgICAgPGRpdiBuZy1tZXNzYWdlcz1cInVzZXJGb3JtLmxhc3ROYW1lLiRlcnJvclwiIG5nLXNob3c9XCJ1c2VyRm9ybS5iaW8uJGRpcnR5XCI+XG4gKiAgICAgICA8ZGl2IG5nLW1lc3NhZ2U9XCJyZXF1aXJlZFwiPlRoaXMgaXMgcmVxdWlyZWQhPC9kaXY+XG4gKiAgICAgICA8ZGl2IG5nLW1lc3NhZ2U9XCJtZC1tYXhsZW5ndGhcIj5UaGF0J3MgdG9vIGxvbmchPC9kaXY+XG4gKiAgICAgICA8ZGl2IG5nLW1lc3NhZ2U9XCJtaW5sZW5ndGhcIj5UaGF0J3MgdG9vIHNob3J0ITwvZGl2PlxuICogICAgIDwvZGl2PlxuICogICA8L21kLWlucHV0LWNvbnRhaW5lcj5cbiAqIDwvZm9ybT5cbiAqIDwvaGxqcz5cbiAqXG4gKiBAcGFyYW0ge251bWJlcj19IG1kLW1heGxlbmd0aCBUaGUgbWF4aW11bSBudW1iZXIgb2YgY2hhcmFjdGVycyBhbGxvd2VkIGluIHRoaXMgaW5wdXQuIElmIHRoaXMgaXMgc3BlY2lmaWVkLCBhIGNoYXJhY3RlciBjb3VudGVyIHdpbGwgYmUgc2hvd24gdW5kZXJuZWF0aCB0aGUgaW5wdXQuXG4gKi9cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgdGV4dGFyZWFcbiAqIEByZXN0cmljdCBFXG4gKiBAbW9kdWxlIG1hdGVyaWFsLmNvbXBvbmVudHMuaW5wdXRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIE11c3QgYmUgcGxhY2VkIGFzIGEgY2hpbGQgb2YgYW4gYDxtZC1pbnB1dC1jb250YWluZXI+YC4gXG4gKlxuICogQmVoYXZlcyBsaWtlIHRoZSBbQW5ndWxhckpTIGlucHV0IGRpcmVjdGl2ZV0oaHR0cHM6Ly9kb2NzLmFuZ3VsYXJqcy5vcmcvYXBpL25nL2RpcmVjdGl2ZS90ZXh0YXJlYSkuXG4gKlxuICogQHVzYWdlXG4gKiA8aGxqcyBsYW5nPVwiaHRtbFwiPlxuICogPG1kLWlucHV0LWNvbnRhaW5lcj5cbiAqICAgPGxhYmVsPkRlc2NyaXB0aW9uPC9sYWJlbD5cbiAqICAgPHRleHRhcmVhIG5nLW1vZGVsPVwiZGVzY3JpcHRpb25cIiByZXF1aXJlZCBtaW5sZW5ndGg9XCIxNVwiIG1kLW1heGxlbmd0aD1cIjIwXCI+PC90ZXh0YXJlYT5cbiAqIDwvbWQtaW5wdXQtY29udGFpbmVyPlxuICogPC9obGpzPlxuICogPGgzPldpdGggRXJyb3JzICh1c2VzIFtuZ01lc3NhZ2VzXShodHRwczovL2RvY3MuYW5ndWxhcmpzLm9yZy9hcGkvbmdNZXNzYWdlcykpPC9oMz5cbiAqIDxobGpzIGxhbmc9XCJodG1sXCI+XG4gKiA8Zm9ybSBuYW1lPVwidXNlckZvcm1cIj5cbiAqICAgPG1kLWlucHV0LWNvbnRhaW5lcj5cbiAqICAgICA8bGFiZWw+QmlvZ3JhcGh5PC9sYWJlbD5cbiAqICAgICA8dGV4dGFyZWEgbmFtZT1cImJpb1wiIG5nLW1vZGVsPVwiYmlvZ3JhcGh5XCIgcmVxdWlyZWQgbWQtbWF4bGVuZ3RoPVwiMTUwXCI+PC90ZXh0YXJlYT5cbiAqICAgICA8ZGl2IG5nLW1lc3NhZ2VzPVwidXNlckZvcm0uYmlvLiRlcnJvclwiIG5nLXNob3c9XCJ1c2VyRm9ybS5iaW8uJGRpcnR5XCI+XG4gKiAgICAgICA8ZGl2IG5nLW1lc3NhZ2U9XCJyZXF1aXJlZFwiPlRoaXMgaXMgcmVxdWlyZWQhPC9kaXY+XG4gKiAgICAgICA8ZGl2IG5nLW1lc3NhZ2U9XCJtZC1tYXhsZW5ndGhcIj5UaGF0J3MgdG9vIGxvbmchPC9kaXY+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvbWQtaW5wdXQtY29udGFpbmVyPlxuICogPC9mb3JtPlxuICogPC9obGpzPlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyPX0gbWQtbWF4bGVuZ3RoIFRoZSBtYXhpbXVtIG51bWJlciBvZiBjaGFyYWN0ZXJzIGFsbG93ZWQgaW4gdGhpcyBpbnB1dC4gSWYgdGhpcyBpcyBzcGVjaWZpZWQsIGEgY2hhcmFjdGVyIGNvdW50ZXIgd2lsbCBiZSBzaG93biB1bmRlcm5lYXRoIHRoZSBpbnB1dC5cbiAqL1xuZnVuY3Rpb24gaW5wdXRUZXh0YXJlYURpcmVjdGl2ZSgkbWRVdGlsLCAkd2luZG93LCAkY29tcGlsZSwgJGFuaW1hdGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHJlcXVpcmU6IFsnXj9tZElucHV0Q29udGFpbmVyJywgJz9uZ01vZGVsJ10sXG4gICAgbGluazogcG9zdExpbmtcbiAgfTtcbiAgXG4gIGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJscykge1xuXG4gICAgdmFyIGNvbnRhaW5lckN0cmwgPSBjdHJsc1swXTtcbiAgICB2YXIgbmdNb2RlbEN0cmwgPSBjdHJsc1sxXSB8fCAkbWRVdGlsLmZha2VOZ01vZGVsKCk7XG4gICAgdmFyIGlzUmVhZG9ubHkgPSBhbmd1bGFyLmlzRGVmaW5lZChhdHRyLnJlYWRvbmx5KTtcblxuICAgIGlmICggIWNvbnRhaW5lckN0cmwgKSByZXR1cm47XG4gICAgaWYgKGNvbnRhaW5lckN0cmwuaW5wdXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIjxtZC1pbnB1dC1jb250YWluZXI+IGNhbiBvbmx5IGhhdmUgKm9uZSogPGlucHV0PiBvciA8dGV4dGFyZWE+IGNoaWxkIGVsZW1lbnQhXCIpO1xuICAgIH1cbiAgICBjb250YWluZXJDdHJsLmlucHV0ID0gZWxlbWVudDtcblxuICAgIGVsZW1lbnQuYWRkQ2xhc3MoJ21kLWlucHV0Jyk7XG4gICAgaWYgKCFlbGVtZW50LmF0dHIoJ2lkJykpIHtcbiAgICAgIGVsZW1lbnQuYXR0cignaWQnLCAnaW5wdXRfJyArICRtZFV0aWwubmV4dFVpZCgpKTtcbiAgICB9XG5cbiAgICBpZiAoZWxlbWVudFswXS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICd0ZXh0YXJlYScpIHtcbiAgICAgIHNldHVwVGV4dGFyZWEoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBuZ01vZGVsUGlwZWxpbmVDaGVja1ZhbHVlKGFyZykge1xuICAgICAgY29udGFpbmVyQ3RybC5zZXRIYXNWYWx1ZSghbmdNb2RlbEN0cmwuJGlzRW1wdHkoYXJnKSk7XG4gICAgICByZXR1cm4gYXJnO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpbnB1dENoZWNrVmFsdWUoKSB7XG4gICAgICAvLyBBbiBpbnB1dCdzIHZhbHVlIGNvdW50cyBpZiBpdHMgbGVuZ3RoID4gMCxcbiAgICAgIC8vIG9yIGlmIHRoZSBpbnB1dCdzIHZhbGlkaXR5IHN0YXRlIHNheXMgaXQgaGFzIGJhZCBpbnB1dCAoZWcgc3RyaW5nIGluIGEgbnVtYmVyIGlucHV0KVxuICAgICAgY29udGFpbmVyQ3RybC5zZXRIYXNWYWx1ZShlbGVtZW50LnZhbCgpLmxlbmd0aCA+IDAgfHwgKGVsZW1lbnRbMF0udmFsaWRpdHl8fHt9KS5iYWRJbnB1dCk7XG4gICAgfVxuXG5cbiAgICB2YXIgaXNFcnJvckdldHRlciA9IGNvbnRhaW5lckN0cmwuaXNFcnJvckdldHRlciB8fCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBuZ01vZGVsQ3RybC4kaW52YWxpZCAmJiBuZ01vZGVsQ3RybC4kdG91Y2hlZDtcbiAgICB9O1xuICAgIHNjb3BlLiR3YXRjaChpc0Vycm9yR2V0dGVyLCBjb250YWluZXJDdHJsLnNldEludmFsaWQpO1xuICAgICAgXG4gICAgbmdNb2RlbEN0cmwuJHBhcnNlcnMucHVzaChuZ01vZGVsUGlwZWxpbmVDaGVja1ZhbHVlKTtcbiAgICBuZ01vZGVsQ3RybC4kZm9ybWF0dGVycy5wdXNoKG5nTW9kZWxQaXBlbGluZUNoZWNrVmFsdWUpO1xuXG4gICAgZWxlbWVudC5vbignaW5wdXQnLCBpbnB1dENoZWNrVmFsdWUpO1xuXG4gICAgaWYgKCFpc1JlYWRvbmx5KSB7XG4gICAgICBlbGVtZW50XG4gICAgICAgIC5vbignZm9jdXMnLCBmdW5jdGlvbihldikge1xuICAgICAgICAgIGNvbnRhaW5lckN0cmwuc2V0Rm9jdXNlZCh0cnVlKTtcbiAgICAgICAgfSlcbiAgICAgICAgLm9uKCdibHVyJywgZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICBjb250YWluZXJDdHJsLnNldEZvY3VzZWQoZmFsc2UpO1xuICAgICAgICAgIGlucHV0Q2hlY2tWYWx1ZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICBjb250YWluZXJDdHJsLnNldEZvY3VzZWQoZmFsc2UpO1xuICAgICAgY29udGFpbmVyQ3RybC5zZXRIYXNWYWx1ZShmYWxzZSk7XG4gICAgICBjb250YWluZXJDdHJsLmlucHV0ID0gbnVsbDtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIHNldHVwVGV4dGFyZWEoKSB7XG4gICAgICB2YXIgbm9kZSA9IGVsZW1lbnRbMF07XG4gICAgICB2YXIgb25DaGFuZ2VUZXh0YXJlYSA9ICRtZFV0aWwuZGVib3VuY2UoZ3Jvd1RleHRhcmVhLCAxKTtcblxuICAgICAgZnVuY3Rpb24gcGlwZWxpbmVMaXN0ZW5lcih2YWx1ZSkge1xuICAgICAgICBvbkNoYW5nZVRleHRhcmVhKCk7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5nTW9kZWxDdHJsKSB7XG4gICAgICAgIG5nTW9kZWxDdHJsLiRmb3JtYXR0ZXJzLnB1c2gocGlwZWxpbmVMaXN0ZW5lcik7XG4gICAgICAgIG5nTW9kZWxDdHJsLiR2aWV3Q2hhbmdlTGlzdGVuZXJzLnB1c2gocGlwZWxpbmVMaXN0ZW5lcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvbkNoYW5nZVRleHRhcmVhKCk7XG4gICAgICB9XG4gICAgICBlbGVtZW50Lm9uKCdrZXlkb3duIGlucHV0Jywgb25DaGFuZ2VUZXh0YXJlYSk7XG4gICAgICBlbGVtZW50Lm9uKCdzY3JvbGwnLCBvblNjcm9sbCk7XG4gICAgICBhbmd1bGFyLmVsZW1lbnQoJHdpbmRvdykub24oJ3Jlc2l6ZScsIG9uQ2hhbmdlVGV4dGFyZWEpO1xuXG4gICAgICBzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudCgkd2luZG93KS5vZmYoJ3Jlc2l6ZScsIG9uQ2hhbmdlVGV4dGFyZWEpO1xuICAgICAgfSk7XG5cbiAgICAgIGZ1bmN0aW9uIGdyb3dUZXh0YXJlYSgpIHtcbiAgICAgICAgbm9kZS5zdHlsZS5oZWlnaHQgPSBcImF1dG9cIjtcbiAgICAgICAgdmFyIGxpbmUgPSBub2RlLnNjcm9sbEhlaWdodCAtIG5vZGUub2Zmc2V0SGVpZ2h0O1xuICAgICAgICBub2RlLnNjcm9sbFRvcCA9IDA7XG4gICAgICAgIHZhciBoZWlnaHQgPSBub2RlLm9mZnNldEhlaWdodCArIChsaW5lID4gMCA/IGxpbmUgOiAwKTtcbiAgICAgICAgbm9kZS5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyAncHgnO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBvblNjcm9sbChlKSB7XG4gICAgICAgIG5vZGUuc2Nyb2xsVG9wID0gMDtcbiAgICAgICAgLy8gZm9yIHNtb290aCBuZXcgbGluZSBhZGRpbmdcbiAgICAgICAgdmFyIGxpbmUgPSBub2RlLnNjcm9sbEhlaWdodCAtIG5vZGUub2Zmc2V0SGVpZ2h0O1xuICAgICAgICB2YXIgaGVpZ2h0ID0gbm9kZS5vZmZzZXRIZWlnaHQgKyBsaW5lO1xuICAgICAgICBub2RlLnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5pbnB1dFRleHRhcmVhRGlyZWN0aXZlLiRpbmplY3QgPSBbXCIkbWRVdGlsXCIsIFwiJHdpbmRvd1wiLCBcIiRjb21waWxlXCIsIFwiJGFuaW1hdGVcIl07XG5cbmZ1bmN0aW9uIG1kTWF4bGVuZ3RoRGlyZWN0aXZlKCRhbmltYXRlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiBbJ25nTW9kZWwnLCAnXm1kSW5wdXRDb250YWluZXInXSxcbiAgICBsaW5rOiBwb3N0TGlua1xuICB9O1xuXG4gIGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJscykge1xuICAgIHZhciBtYXhsZW5ndGg7XG4gICAgdmFyIG5nTW9kZWxDdHJsID0gY3RybHNbMF07XG4gICAgdmFyIGNvbnRhaW5lckN0cmwgPSBjdHJsc1sxXTtcbiAgICB2YXIgY2hhckNvdW50RWwgPSBhbmd1bGFyLmVsZW1lbnQoJzxkaXYgY2xhc3M9XCJtZC1jaGFyLWNvdW50ZXJcIj4nKTtcblxuICAgIC8vIFN0b3AgbW9kZWwgZnJvbSB0cmltbWluZy4gVGhpcyBtYWtlcyBpdCBzbyB3aGl0ZXNwYWNlIFxuICAgIC8vIG92ZXIgdGhlIG1heGxlbmd0aCBzdGlsbCBjb3VudHMgYXMgaW52YWxpZC5cbiAgICBhdHRyLiRzZXQoJ25nVHJpbScsICdmYWxzZScpO1xuICAgIGNvbnRhaW5lckN0cmwuZWxlbWVudC5hcHBlbmQoY2hhckNvdW50RWwpO1xuXG4gICAgbmdNb2RlbEN0cmwuJGZvcm1hdHRlcnMucHVzaChyZW5kZXJDaGFyQ291bnQpO1xuICAgIG5nTW9kZWxDdHJsLiR2aWV3Q2hhbmdlTGlzdGVuZXJzLnB1c2gocmVuZGVyQ2hhckNvdW50KTtcbiAgICBlbGVtZW50Lm9uKCdpbnB1dCBrZXlkb3duJywgZnVuY3Rpb24oKSB7IFxuICAgICAgcmVuZGVyQ2hhckNvdW50KCk7IC8vbWFrZSBzdXJlIGl0J3MgY2FsbGVkIHdpdGggbm8gYXJnc1xuICAgIH0pO1xuXG4gICAgc2NvcGUuJHdhdGNoKGF0dHIubWRNYXhsZW5ndGgsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBtYXhsZW5ndGggPSB2YWx1ZTtcbiAgICAgIGlmIChhbmd1bGFyLmlzTnVtYmVyKHZhbHVlKSAmJiB2YWx1ZSA+IDApIHtcbiAgICAgICAgaWYgKCFjaGFyQ291bnRFbC5wYXJlbnQoKS5sZW5ndGgpIHtcbiAgICAgICAgICAkYW5pbWF0ZS5lbnRlcihjaGFyQ291bnRFbCwgY29udGFpbmVyQ3RybC5lbGVtZW50LCBcbiAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoY29udGFpbmVyQ3RybC5lbGVtZW50WzBdLmxhc3RFbGVtZW50Q2hpbGQpKTtcbiAgICAgICAgfVxuICAgICAgICByZW5kZXJDaGFyQ291bnQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRhbmltYXRlLmxlYXZlKGNoYXJDb3VudEVsKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIG5nTW9kZWxDdHJsLiR2YWxpZGF0b3JzWydtZC1tYXhsZW5ndGgnXSA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICAgICAgaWYgKCFhbmd1bGFyLmlzTnVtYmVyKG1heGxlbmd0aCkgfHwgbWF4bGVuZ3RoIDwgMCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoIG1vZGVsVmFsdWUgfHwgZWxlbWVudC52YWwoKSB8fCB2aWV3VmFsdWUgfHwgJycgKS5sZW5ndGggPD0gbWF4bGVuZ3RoO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiByZW5kZXJDaGFyQ291bnQodmFsdWUpIHtcbiAgICAgIGNoYXJDb3VudEVsLnRleHQoICggZWxlbWVudC52YWwoKSB8fCB2YWx1ZSB8fCAnJyApLmxlbmd0aCArICcvJyArIG1heGxlbmd0aCApO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfVxufVxubWRNYXhsZW5ndGhEaXJlY3RpdmUuJGluamVjdCA9IFtcIiRhbmltYXRlXCJdO1xuXG5mdW5jdGlvbiBwbGFjZWhvbGRlckRpcmVjdGl2ZSgpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHJlcXVpcmU6ICdeXj9tZElucHV0Q29udGFpbmVyJyxcbiAgICBsaW5rOiBwb3N0TGlua1xuICB9O1xuXG4gIGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBpbnB1dENvbnRhaW5lcikge1xuICAgIGlmICghaW5wdXRDb250YWluZXIpIHJldHVybjtcblxuICAgIHZhciBwbGFjZWhvbGRlclRleHQgPSBhdHRyLnBsYWNlaG9sZGVyO1xuICAgIGVsZW1lbnQucmVtb3ZlQXR0cigncGxhY2Vob2xkZXInKTtcblxuICAgIGlucHV0Q29udGFpbmVyLmVsZW1lbnQuYXBwZW5kKCc8ZGl2IGNsYXNzPVwibWQtcGxhY2Vob2xkZXJcIj4nICsgcGxhY2Vob2xkZXJUZXh0ICsgJzwvZGl2PicpO1xuICB9XG59XG5cbn0pKCk7XG5cbi8qIVxuICogQW5ndWxhciBNYXRlcmlhbCBEZXNpZ25cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL21hdGVyaWFsXG4gKiBAbGljZW5zZSBNSVRcbiAqIHYwLjcuMVxuICovXG4oZnVuY3Rpb24oKSB7XG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQG5nZG9jIG1vZHVsZVxuICogQG5hbWUgbWF0ZXJpYWwuY29tcG9uZW50cy5saXN0XG4gKiBAZGVzY3JpcHRpb25cbiAqIExpc3QgbW9kdWxlXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdtYXRlcmlhbC5jb21wb25lbnRzLmxpc3QnLCBbXG4gICdtYXRlcmlhbC5jb3JlJ1xuXSlcbiAgLmRpcmVjdGl2ZSgnbWRMaXN0JywgbWRMaXN0RGlyZWN0aXZlKVxuICAuZGlyZWN0aXZlKCdtZEl0ZW0nLCBtZEl0ZW1EaXJlY3RpdmUpO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG1kTGlzdFxuICogQG1vZHVsZSBtYXRlcmlhbC5jb21wb25lbnRzLmxpc3RcbiAqXG4gKiBAcmVzdHJpY3QgRVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGA8bWQtbGlzdD5gIGRpcmVjdGl2ZSBpcyBhIGxpc3QgY29udGFpbmVyIGZvciAxLi5uIGA8bWQtaXRlbT5gIHRhZ3MuXG4gKlxuICogQHVzYWdlXG4gKiA8aGxqcyBsYW5nPVwiaHRtbFwiPlxuICogPG1kLWxpc3Q+XG4gKiAgIDxtZC1pdGVtIG5nLXJlcGVhdD1cIml0ZW0gaW4gdG9kb3NcIj5cbiAqICAgICA8bWQtaXRlbS1jb250ZW50PlxuICogICAgICAgPGRpdiBjbGFzcz1cIm1kLXRpbGUtbGVmdFwiPlxuICogICAgICAgICA8aW1nIG5nLXNyYz1cInt7aXRlbS5mYWNlfX1cIiBjbGFzcz1cImZhY2VcIiBhbHQ9XCJ7e2l0ZW0ud2hvfX1cIj5cbiAqICAgICAgIDwvZGl2PlxuICogICAgICAgPGRpdiBjbGFzcz1cIm1kLXRpbGUtY29udGVudFwiPlxuICogICAgICAgICA8aDM+e3tpdGVtLndoYXR9fTwvaDM+XG4gKiAgICAgICAgIDxoND57e2l0ZW0ud2hvfX08L2g0PlxuICogICAgICAgICA8cD5cbiAqICAgICAgICAgICB7e2l0ZW0ubm90ZXN9fVxuICogICAgICAgICA8L3A+XG4gKiAgICAgICA8L2Rpdj5cbiAqICAgICA8L21kLWl0ZW0tY29udGVudD5cbiAqICAgPC9tZC1pdGVtPlxuICogPC9tZC1saXN0PlxuICogPC9obGpzPlxuICpcbiAqL1xuZnVuY3Rpb24gbWRMaXN0RGlyZWN0aXZlKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRScsXG4gICAgbGluazogZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgJGF0dHIpIHtcbiAgICAgICRlbGVtZW50LmF0dHIoe1xuICAgICAgICAncm9sZScgOiAnbGlzdCdcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBtZEl0ZW1cbiAqIEBtb2R1bGUgbWF0ZXJpYWwuY29tcG9uZW50cy5saXN0XG4gKlxuICogQHJlc3RyaWN0IEVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgPG1kLWl0ZW0+YCBkaXJlY3RpdmUgaXMgYSBjb250YWluZXIgaW50ZW5kZWQgZm9yIHJvdyBpdGVtcyBpbiBhIGA8bWQtbGlzdD5gIGNvbnRhaW5lci5cbiAqXG4gKiBAdXNhZ2VcbiAqIDxobGpzIGxhbmc9XCJodG1sXCI+XG4gKiAgPG1kLWxpc3Q+XG4gKiAgICA8bWQtaXRlbT5cbiAqICAgICAgICAgICAgSXRlbSBjb250ZW50IGluIGxpc3RcbiAqICAgIDwvbWQtaXRlbT5cbiAqICA8L21kLWxpc3Q+XG4gKiA8L2hsanM+XG4gKlxuICovXG5mdW5jdGlvbiBtZEl0ZW1EaXJlY3RpdmUoKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICBsaW5rOiBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50LCAkYXR0cikge1xuICAgICAgJGVsZW1lbnQuYXR0cih7XG4gICAgICAgICdyb2xlJyA6ICdsaXN0aXRlbSdcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cbn0pKCk7XG5cbi8qIVxuICogQW5ndWxhciBNYXRlcmlhbCBEZXNpZ25cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL21hdGVyaWFsXG4gKiBAbGljZW5zZSBNSVRcbiAqIHYwLjcuMVxuICovXG4oZnVuY3Rpb24oKSB7XG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQG5nZG9jIG1vZHVsZVxuICogQG5hbWUgbWF0ZXJpYWwuY29tcG9uZW50cy5wcm9ncmVzc0NpcmN1bGFyXG4gKiBAZGVzY3JpcHRpb24gQ2lyY3VsYXIgUHJvZ3Jlc3MgbW9kdWxlIVxuICovXG5hbmd1bGFyLm1vZHVsZSgnbWF0ZXJpYWwuY29tcG9uZW50cy5wcm9ncmVzc0NpcmN1bGFyJywgW1xuICAnbWF0ZXJpYWwuY29yZSdcbl0pXG4gIC5kaXJlY3RpdmUoJ21kUHJvZ3Jlc3NDaXJjdWxhcicsIE1kUHJvZ3Jlc3NDaXJjdWxhckRpcmVjdGl2ZSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbWRQcm9ncmVzc0NpcmN1bGFyXG4gKiBAbW9kdWxlIG1hdGVyaWFsLmNvbXBvbmVudHMucHJvZ3Jlc3NDaXJjdWxhclxuICogQHJlc3RyaWN0IEVcbiAqXG4qIEBkZXNjcmlwdGlvblxuICogVGhlIGNpcmN1bGFyIHByb2dyZXNzIGRpcmVjdGl2ZSBpcyB1c2VkIHRvIG1ha2UgbG9hZGluZyBjb250ZW50IGluIHlvdXIgYXBwIGFzIGRlbGlnaHRmdWwgYW5kIHBhaW5sZXNzIGFzIHBvc3NpYmxlIGJ5IG1pbmltaXppbmcgdGhlIGFtb3VudCBvZiB2aXN1YWwgY2hhbmdlIGEgdXNlciBzZWVzIGJlZm9yZSB0aGV5IGNhbiB2aWV3IGFuZCBpbnRlcmFjdCB3aXRoIGNvbnRlbnQuXG4gKlxuICogRm9yIG9wZXJhdGlvbnMgd2hlcmUgdGhlIHBlcmNlbnRhZ2Ugb2YgdGhlIG9wZXJhdGlvbiBjb21wbGV0ZWQgY2FuIGJlIGRldGVybWluZWQsIHVzZSBhIGRldGVybWluYXRlIGluZGljYXRvci4gVGhleSBnaXZlIHVzZXJzIGEgcXVpY2sgc2Vuc2Ugb2YgaG93IGxvbmcgYW4gb3BlcmF0aW9uIHdpbGwgdGFrZS5cbiAqXG4gKiBGb3Igb3BlcmF0aW9ucyB3aGVyZSB0aGUgdXNlciBpcyBhc2tlZCB0byB3YWl0IGEgbW9tZW50IHdoaWxlIHNvbWV0aGluZyBmaW5pc2hlcyB1cCwgYW5kIGl04oCZcyBub3QgbmVjZXNzYXJ5IHRvIGV4cG9zZSB3aGF0J3MgaGFwcGVuaW5nIGJlaGluZCB0aGUgc2NlbmVzIGFuZCBob3cgbG9uZyBpdCB3aWxsIHRha2UsIHVzZSBhbiBpbmRldGVybWluYXRlIGluZGljYXRvci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWQtbW9kZSBTZWxlY3QgZnJvbSBvbmUgb2YgdHdvIG1vZGVzOiBkZXRlcm1pbmF0ZSBhbmQgaW5kZXRlcm1pbmF0ZS5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gdmFsdWUgSW4gZGV0ZXJtaW5hdGUgbW9kZSwgdGhpcyBudW1iZXIgcmVwcmVzZW50cyB0aGUgcGVyY2VudGFnZSBvZiB0aGUgY2lyY3VsYXIgcHJvZ3Jlc3MuIERlZmF1bHQ6IDBcbiAqIEBwYXJhbSB7bnVtYmVyPX0gbWQtZGlhbWV0ZXIgVGhpcyBzcGVjaWZpZXMgdGhlIGRpYW10ZXIgb2YgdGhlIGNpcmN1bGFyIHByb2dyZXNzLiBEZWZhdWx0OiA0OFxuICpcbiAqIEB1c2FnZVxuICogPGhsanMgbGFuZz1cImh0bWxcIj5cbiAqIDxtZC1wcm9ncmVzcy1jaXJjdWxhciBtZC1tb2RlPVwiZGV0ZXJtaW5hdGVcIiB2YWx1ZT1cIi4uLlwiPjwvbWQtcHJvZ3Jlc3MtY2lyY3VsYXI+XG4gKlxuICogPG1kLXByb2dyZXNzLWNpcmN1bGFyIG1kLW1vZGU9XCJkZXRlcm1pbmF0ZVwiIG5nLXZhbHVlPVwiLi4uXCI+PC9tZC1wcm9ncmVzcy1jaXJjdWxhcj5cbiAqXG4gKiA8bWQtcHJvZ3Jlc3MtY2lyY3VsYXIgbWQtbW9kZT1cImRldGVybWluYXRlXCIgdmFsdWU9XCIuLi5cIiBtZC1kaWFtZXRlcj1cIjEwMFwiPjwvbWQtcHJvZ3Jlc3MtY2lyY3VsYXI+XG4gKlxuICogPG1kLXByb2dyZXNzLWNpcmN1bGFyIG1kLW1vZGU9XCJpbmRldGVybWluYXRlXCI+PC9tZC1wcm9ncmVzcy1jaXJjdWxhcj5cbiAqIDwvaGxqcz5cbiAqL1xuZnVuY3Rpb24gTWRQcm9ncmVzc0NpcmN1bGFyRGlyZWN0aXZlKCQkckFGLCAkbWRDb25zdGFudCwgJG1kVGhlbWluZykge1xuICB2YXIgZmlsbFJvdGF0aW9ucyA9IG5ldyBBcnJheSgxMDEpLFxuICAgIGZpeFJvdGF0aW9ucyA9IG5ldyBBcnJheSgxMDEpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMTAxOyBpKyspIHtcbiAgICB2YXIgcGVyY2VudCA9IGkgLyAxMDA7XG4gICAgdmFyIHJvdGF0aW9uID0gTWF0aC5mbG9vcihwZXJjZW50ICogMTgwKTtcblxuICAgIGZpbGxSb3RhdGlvbnNbaV0gPSAncm90YXRlKCcgKyByb3RhdGlvbi50b1N0cmluZygpICsgJ2RlZyknO1xuICAgIGZpeFJvdGF0aW9uc1tpXSA9ICdyb3RhdGUoJyArIChyb3RhdGlvbiAqIDIpLnRvU3RyaW5nKCkgKyAnZGVnKSc7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRScsXG4gICAgdGVtcGxhdGU6XG4gICAgICAgICc8ZGl2IGNsYXNzPVwibWQtc3Bpbm5lci13cmFwcGVyXCI+JyArXG4gICAgICAgICAgJzxkaXYgY2xhc3M9XCJtZC1pbm5lclwiPicgK1xuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtZC1nYXBcIj48L2Rpdj4nICtcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibWQtbGVmdFwiPicgK1xuICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1kLWhhbGYtY2lyY2xlXCI+PC9kaXY+JyArXG4gICAgICAgICAgICAnPC9kaXY+JyArXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1kLXJpZ2h0XCI+JyArXG4gICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibWQtaGFsZi1jaXJjbGVcIj48L2Rpdj4nICtcbiAgICAgICAgICAgICc8L2Rpdj4nICtcbiAgICAgICAgICAnPC9kaXY+JyArXG4gICAgICAgICc8L2Rpdj4nLFxuICAgIGNvbXBpbGU6IGNvbXBpbGVcbiAgfTtcblxuICBmdW5jdGlvbiBjb21waWxlKHRFbGVtZW50LCB0QXR0cnMsIHRyYW5zY2x1ZGUpIHtcbiAgICB0RWxlbWVudC5hdHRyKCdhcmlhLXZhbHVlbWluJywgMCk7XG4gICAgdEVsZW1lbnQuYXR0cignYXJpYS12YWx1ZW1heCcsIDEwMCk7XG4gICAgdEVsZW1lbnQuYXR0cigncm9sZScsICdwcm9ncmVzc2JhcicpO1xuXG4gICAgcmV0dXJuIHBvc3RMaW5rO1xuICB9XG5cbiAgZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAkbWRUaGVtaW5nKGVsZW1lbnQpO1xuICAgIHZhciBjaXJjbGUgPSBlbGVtZW50WzBdLFxuICAgICAgZmlsbCA9IGNpcmNsZS5xdWVyeVNlbGVjdG9yQWxsKCcubWQtZmlsbCwgLm1kLW1hc2subWQtZnVsbCcpLFxuICAgICAgZml4ID0gY2lyY2xlLnF1ZXJ5U2VsZWN0b3JBbGwoJy5tZC1maWxsLm1kLWZpeCcpLFxuICAgICAgaSwgY2xhbXBlZCwgZmlsbFJvdGF0aW9uLCBmaXhSb3RhdGlvbjtcblxuICAgIHZhciBkaWFtZXRlciA9IGF0dHIubWREaWFtZXRlciB8fCA0ODtcbiAgICB2YXIgc2NhbGUgPSBkaWFtZXRlci80ODtcblxuICAgIGNpcmNsZS5zdHlsZVskbWRDb25zdGFudC5DU1MuVFJBTlNGT1JNXSA9ICdzY2FsZSgnICsgc2NhbGUudG9TdHJpbmcoKSArICcpJztcblxuICAgIGF0dHIuJG9ic2VydmUoJ3ZhbHVlJywgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGNsYW1wZWQgPSBjbGFtcCh2YWx1ZSk7XG4gICAgICBmaWxsUm90YXRpb24gPSBmaWxsUm90YXRpb25zW2NsYW1wZWRdO1xuICAgICAgZml4Um90YXRpb24gPSBmaXhSb3RhdGlvbnNbY2xhbXBlZF07XG5cbiAgICAgIGVsZW1lbnQuYXR0cignYXJpYS12YWx1ZW5vdycsIGNsYW1wZWQpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgZmlsbC5sZW5ndGg7IGkrKykge1xuICAgICAgICBmaWxsW2ldLnN0eWxlWyRtZENvbnN0YW50LkNTUy5UUkFOU0ZPUk1dID0gZmlsbFJvdGF0aW9uO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgZml4Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZpeFtpXS5zdHlsZVskbWRDb25zdGFudC5DU1MuVFJBTlNGT1JNXSA9IGZpeFJvdGF0aW9uO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xhbXAodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPiAxMDApIHtcbiAgICAgIHJldHVybiAxMDA7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlIDwgMCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIE1hdGguY2VpbCh2YWx1ZSB8fCAwKTtcbiAgfVxufVxuTWRQcm9ncmVzc0NpcmN1bGFyRGlyZWN0aXZlLiRpbmplY3QgPSBbXCIkJHJBRlwiLCBcIiRtZENvbnN0YW50XCIsIFwiJG1kVGhlbWluZ1wiXTtcbn0pKCk7XG5cbi8qIVxuICogQW5ndWxhciBNYXRlcmlhbCBEZXNpZ25cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL21hdGVyaWFsXG4gKiBAbGljZW5zZSBNSVRcbiAqIHYwLjcuMVxuICovXG4oZnVuY3Rpb24oKSB7XG4ndXNlIHN0cmljdCc7XG5cblxuLyoqXG4gKiBAbmdkb2MgbW9kdWxlXG4gKiBAbmFtZSBtYXRlcmlhbC5jb21wb25lbnRzLnByb2dyZXNzTGluZWFyXG4gKiBAZGVzY3JpcHRpb24gTGluZWFyIFByb2dyZXNzIG1vZHVsZSFcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ21hdGVyaWFsLmNvbXBvbmVudHMucHJvZ3Jlc3NMaW5lYXInLCBbXG4gICdtYXRlcmlhbC5jb3JlJ1xuXSlcbiAgLmRpcmVjdGl2ZSgnbWRQcm9ncmVzc0xpbmVhcicsIE1kUHJvZ3Jlc3NMaW5lYXJEaXJlY3RpdmUpO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG1kUHJvZ3Jlc3NMaW5lYXJcbiAqIEBtb2R1bGUgbWF0ZXJpYWwuY29tcG9uZW50cy5wcm9ncmVzc0xpbmVhclxuICogQHJlc3RyaWN0IEVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBsaW5lYXIgcHJvZ3Jlc3MgZGlyZWN0aXZlIGlzIHVzZWQgdG8gbWFrZSBsb2FkaW5nIGNvbnRlbnQgaW4geW91ciBhcHAgYXMgZGVsaWdodGZ1bCBhbmQgcGFpbmxlc3MgYXMgcG9zc2libGUgYnkgbWluaW1pemluZyB0aGUgYW1vdW50IG9mIHZpc3VhbCBjaGFuZ2UgYSB1c2VyIHNlZXMgYmVmb3JlIHRoZXkgY2FuIHZpZXcgYW5kIGludGVyYWN0IHdpdGggY29udGVudC4gRWFjaCBvcGVyYXRpb24gc2hvdWxkIG9ubHkgYmUgcmVwcmVzZW50ZWQgYnkgb25lIGFjdGl2aXR5IGluZGljYXRvcuKAlGZvciBleGFtcGxlLCBvbmUgcmVmcmVzaCBvcGVyYXRpb24gc2hvdWxkIG5vdCBkaXNwbGF5IGJvdGggYSByZWZyZXNoIGJhciBhbmQgYW4gYWN0aXZpdHkgY2lyY2xlLlxuICpcbiAqIEZvciBvcGVyYXRpb25zIHdoZXJlIHRoZSBwZXJjZW50YWdlIG9mIHRoZSBvcGVyYXRpb24gY29tcGxldGVkIGNhbiBiZSBkZXRlcm1pbmVkLCB1c2UgYSBkZXRlcm1pbmF0ZSBpbmRpY2F0b3IuIFRoZXkgZ2l2ZSB1c2VycyBhIHF1aWNrIHNlbnNlIG9mIGhvdyBsb25nIGFuIG9wZXJhdGlvbiB3aWxsIHRha2UuXG4gKlxuICogRm9yIG9wZXJhdGlvbnMgd2hlcmUgdGhlIHVzZXIgaXMgYXNrZWQgdG8gd2FpdCBhIG1vbWVudCB3aGlsZSBzb21ldGhpbmcgZmluaXNoZXMgdXAsIGFuZCBpdOKAmXMgbm90IG5lY2Vzc2FyeSB0byBleHBvc2Ugd2hhdCdzIGhhcHBlbmluZyBiZWhpbmQgdGhlIHNjZW5lcyBhbmQgaG93IGxvbmcgaXQgd2lsbCB0YWtlLCB1c2UgYW4gaW5kZXRlcm1pbmF0ZSBpbmRpY2F0b3IuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1kLW1vZGUgU2VsZWN0IGZyb20gb25lIG9mIGZvdXIgbW9kZXM6IGRldGVybWluYXRlLCBpbmRldGVybWluYXRlLCBidWZmZXIgb3IgcXVlcnkuXG4gKiBAcGFyYW0ge251bWJlcj19IHZhbHVlIEluIGRldGVybWluYXRlIGFuZCBidWZmZXIgbW9kZXMsIHRoaXMgbnVtYmVyIHJlcHJlc2VudHMgdGhlIHBlcmNlbnRhZ2Ugb2YgdGhlIHByaW1hcnkgcHJvZ3Jlc3MgYmFyLiBEZWZhdWx0OiAwXG4gKiBAcGFyYW0ge251bWJlcj19IG1kLWJ1ZmZlci12YWx1ZSBJbiB0aGUgYnVmZmVyIG1vZGUsIHRoaXMgbnVtYmVyIHJlcHJlc2VudHMgdGhlIHByZWNlbnRhZ2Ugb2YgdGhlIHNlY29uZGFyeSBwcm9ncmVzcyBiYXIuIERlZmF1bHQ6IDBcbiAqXG4gKiBAdXNhZ2VcbiAqIDxobGpzIGxhbmc9XCJodG1sXCI+XG4gKiA8bWQtcHJvZ3Jlc3MtbGluZWFyIG1kLW1vZGU9XCJkZXRlcm1pbmF0ZVwiIHZhbHVlPVwiLi4uXCI+PC9tZC1wcm9ncmVzcy1saW5lYXI+XG4gKlxuICogPG1kLXByb2dyZXNzLWxpbmVhciBtZC1tb2RlPVwiZGV0ZXJtaW5hdGVcIiBuZy12YWx1ZT1cIi4uLlwiPjwvbWQtcHJvZ3Jlc3MtbGluZWFyPlxuICpcbiAqIDxtZC1wcm9ncmVzcy1saW5lYXIgbWQtbW9kZT1cImluZGV0ZXJtaW5hdGVcIj48L21kLXByb2dyZXNzLWxpbmVhcj5cbiAqXG4gKiA8bWQtcHJvZ3Jlc3MtbGluZWFyIG1kLW1vZGU9XCJidWZmZXJcIiB2YWx1ZT1cIi4uLlwiIG1kLWJ1ZmZlci12YWx1ZT1cIi4uLlwiPjwvbWQtcHJvZ3Jlc3MtbGluZWFyPlxuICpcbiAqIDxtZC1wcm9ncmVzcy1saW5lYXIgbWQtbW9kZT1cInF1ZXJ5XCI+PC9tZC1wcm9ncmVzcy1saW5lYXI+XG4gKiA8L2hsanM+XG4gKi9cbmZ1bmN0aW9uIE1kUHJvZ3Jlc3NMaW5lYXJEaXJlY3RpdmUoJCRyQUYsICRtZENvbnN0YW50LCAkbWRUaGVtaW5nKSB7XG5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1kLWNvbnRhaW5lclwiPicgK1xuICAgICAgJzxkaXYgY2xhc3M9XCJtZC1kYXNoZWRcIj48L2Rpdj4nICtcbiAgICAgICc8ZGl2IGNsYXNzPVwibWQtYmFyIG1kLWJhcjFcIj48L2Rpdj4nICtcbiAgICAgICc8ZGl2IGNsYXNzPVwibWQtYmFyIG1kLWJhcjJcIj48L2Rpdj4nICtcbiAgICAgICc8L2Rpdj4nLFxuICAgIGNvbXBpbGU6IGNvbXBpbGVcbiAgfTtcbiAgXG4gIGZ1bmN0aW9uIGNvbXBpbGUodEVsZW1lbnQsIHRBdHRycywgdHJhbnNjbHVkZSkge1xuICAgIHRFbGVtZW50LmF0dHIoJ2FyaWEtdmFsdWVtaW4nLCAwKTtcbiAgICB0RWxlbWVudC5hdHRyKCdhcmlhLXZhbHVlbWF4JywgMTAwKTtcbiAgICB0RWxlbWVudC5hdHRyKCdyb2xlJywgJ3Byb2dyZXNzYmFyJyk7XG5cbiAgICByZXR1cm4gcG9zdExpbms7XG4gIH1cbiAgZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAkbWRUaGVtaW5nKGVsZW1lbnQpO1xuICAgIHZhciBiYXIxU3R5bGUgPSBlbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoJy5tZC1iYXIxJykuc3R5bGUsXG4gICAgICBiYXIyU3R5bGUgPSBlbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoJy5tZC1iYXIyJykuc3R5bGUsXG4gICAgICBjb250YWluZXIgPSBhbmd1bGFyLmVsZW1lbnQoZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKCcubWQtY29udGFpbmVyJykpO1xuXG4gICAgYXR0ci4kb2JzZXJ2ZSgndmFsdWUnLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKGF0dHIubWRNb2RlID09ICdxdWVyeScpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2xhbXBlZCA9IGNsYW1wKHZhbHVlKTtcbiAgICAgIGVsZW1lbnQuYXR0cignYXJpYS12YWx1ZW5vdycsIGNsYW1wZWQpO1xuICAgICAgYmFyMlN0eWxlWyRtZENvbnN0YW50LkNTUy5UUkFOU0ZPUk1dID0gdHJhbnNmb3Jtc1tjbGFtcGVkXTtcbiAgICB9KTtcblxuICAgIGF0dHIuJG9ic2VydmUoJ21kQnVmZmVyVmFsdWUnLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgYmFyMVN0eWxlWyRtZENvbnN0YW50LkNTUy5UUkFOU0ZPUk1dID0gdHJhbnNmb3Jtc1tjbGFtcCh2YWx1ZSldO1xuICAgIH0pO1xuXG4gICAgJCRyQUYoZnVuY3Rpb24oKSB7XG4gICAgICBjb250YWluZXIuYWRkQ2xhc3MoJ21kLXJlYWR5Jyk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBjbGFtcCh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA+IDEwMCkge1xuICAgICAgcmV0dXJuIDEwMDtcbiAgICB9XG5cbiAgICBpZiAodmFsdWUgPCAwKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gTWF0aC5jZWlsKHZhbHVlIHx8IDApO1xuICB9XG59XG5NZFByb2dyZXNzTGluZWFyRGlyZWN0aXZlLiRpbmplY3QgPSBbXCIkJHJBRlwiLCBcIiRtZENvbnN0YW50XCIsIFwiJG1kVGhlbWluZ1wiXTtcblxuXG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vLyBQcml2YXRlIE1ldGhvZHNcbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbnZhciB0cmFuc2Zvcm1zID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdmFsdWVzID0gbmV3IEFycmF5KDEwMSk7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCAxMDE7IGkrKyl7XG4gICAgdmFsdWVzW2ldID0gbWFrZVRyYW5zZm9ybShpKTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gbWFrZVRyYW5zZm9ybSh2YWx1ZSl7XG4gICAgdmFyIHNjYWxlID0gdmFsdWUvMTAwO1xuICAgIHZhciB0cmFuc2xhdGVYID0gKHZhbHVlLTEwMCkvMjtcbiAgICByZXR1cm4gJ3RyYW5zbGF0ZVgoJyArIHRyYW5zbGF0ZVgudG9TdHJpbmcoKSArICclKSBzY2FsZSgnICsgc2NhbGUudG9TdHJpbmcoKSArICcsIDEpJztcbiAgfVxufSkoKTtcblxufSkoKTtcblxuLyohXG4gKiBBbmd1bGFyIE1hdGVyaWFsIERlc2lnblxuICogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvbWF0ZXJpYWxcbiAqIEBsaWNlbnNlIE1JVFxuICogdjAuNy4xXG4gKi9cbihmdW5jdGlvbigpIHtcbid1c2Ugc3RyaWN0JztcblxuXG4vKipcbiAqIEBuZ2RvYyBtb2R1bGVcbiAqIEBuYW1lIG1hdGVyaWFsLmNvbXBvbmVudHMucmFkaW9CdXR0b25cbiAqIEBkZXNjcmlwdGlvbiByYWRpb0J1dHRvbiBtb2R1bGUhXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdtYXRlcmlhbC5jb21wb25lbnRzLnJhZGlvQnV0dG9uJywgW1xuICAnbWF0ZXJpYWwuY29yZSdcbl0pXG4gIC5kaXJlY3RpdmUoJ21kUmFkaW9Hcm91cCcsIG1kUmFkaW9Hcm91cERpcmVjdGl2ZSlcbiAgLmRpcmVjdGl2ZSgnbWRSYWRpb0J1dHRvbicsIG1kUmFkaW9CdXR0b25EaXJlY3RpdmUpO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBtb2R1bGUgbWF0ZXJpYWwuY29tcG9uZW50cy5yYWRpb0J1dHRvblxuICogQG5hbWUgbWRSYWRpb0dyb3VwXG4gKlxuICogQHJlc3RyaWN0IEVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgPG1kLXJhZGlvLWdyb3VwPmAgZGlyZWN0aXZlIGlkZW50aWZpZXMgYSBncm91cGluZ1xuICogY29udGFpbmVyIGZvciB0aGUgMS4ubiBncm91cGVkIHJhZGlvIGJ1dHRvbnM7IHNwZWNpZmllZCB1c2luZyBuZXN0ZWRcbiAqIGA8bWQtcmFkaW8tYnV0dG9uPmAgdGFncy5cbiAqXG4gKiBBcyBwZXIgdGhlIFttYXRlcmlhbCBkZXNpZ24gc3BlY10oaHR0cDovL3d3dy5nb29nbGUuY29tL2Rlc2lnbi9zcGVjL3N0eWxlL2NvbG9yLmh0bWwjY29sb3ItdWktY29sb3ItYXBwbGljYXRpb24pXG4gKiB0aGUgcmFkaW8gYnV0dG9uIGlzIGluIHRoZSBhY2NlbnQgY29sb3IgYnkgZGVmYXVsdC4gVGhlIHByaW1hcnkgY29sb3IgcGFsZXR0ZSBtYXkgYmUgdXNlZCB3aXRoXG4gKiB0aGUgYG1kLXByaW1hcnlgIGNsYXNzLlxuICpcbiAqIE5vdGU6IGA8bWQtcmFkaW8tZ3JvdXA+YCBhbmQgYDxtZC1yYWRpby1idXR0b24+YCBoYW5kbGUgdGFiaW5kZXggZGlmZmVyZW50bHlcbiAqIHRoYW4gdGhlIG5hdGl2ZSBgPGlucHV0IHR5cGU9J3JhZGlvJz5gIGNvbnRyb2xzLiBXaGVyZWFzIHRoZSBuYXRpdmUgY29udHJvbHNcbiAqIGZvcmNlIHRoZSB1c2VyIHRvIHRhYiB0aHJvdWdoIGFsbCB0aGUgcmFkaW8gYnV0dG9ucywgYDxtZC1yYWRpby1ncm91cD5gXG4gKiBpcyBmb2N1c2FibGUsIGFuZCBieSBkZWZhdWx0IHRoZSBgPG1kLXJhZGlvLWJ1dHRvbj5gcyBhcmUgbm90LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuZy1tb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBtZC1uby1pbmsgVXNlIG9mIGF0dHJpYnV0ZSBpbmRpY2F0ZXMgZmxhZyB0byBkaXNhYmxlIGluayByaXBwbGUgZWZmZWN0cy5cbiAqXG4gKiBAdXNhZ2VcbiAqIDxobGpzIGxhbmc9XCJodG1sXCI+XG4gKiA8bWQtcmFkaW8tZ3JvdXAgbmctbW9kZWw9XCJzZWxlY3RlZFwiPlxuICpcbiAqICAgPG1kLXJhZGlvLWJ1dHRvblxuICogICAgICAgIG5nLXJlcGVhdD1cImQgaW4gY29sb3JPcHRpb25zXCJcbiAqICAgICAgICBuZy12YWx1ZT1cImQudmFsdWVcIiBhcmlhLWxhYmVsPVwie3sgZC5sYWJlbCB9fVwiPlxuICpcbiAqICAgICAgICAgIHt7IGQubGFiZWwgfX1cbiAqXG4gKiAgIDwvbWQtcmFkaW8tYnV0dG9uPlxuICpcbiAqIDwvbWQtcmFkaW8tZ3JvdXA+XG4gKiA8L2hsanM+XG4gKlxuICovXG5mdW5jdGlvbiBtZFJhZGlvR3JvdXBEaXJlY3RpdmUoJG1kVXRpbCwgJG1kQ29uc3RhbnQsICRtZFRoZW1pbmcpIHtcbiAgUmFkaW9Hcm91cENvbnRyb2xsZXIucHJvdG90eXBlID0gY3JlYXRlUmFkaW9Hcm91cENvbnRyb2xsZXJQcm90bygpO1xuXG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICBjb250cm9sbGVyOiBbJyRlbGVtZW50JywgUmFkaW9Hcm91cENvbnRyb2xsZXJdLFxuICAgIHJlcXVpcmU6IFsnbWRSYWRpb0dyb3VwJywgJz9uZ01vZGVsJ10sXG4gICAgbGluazogeyBwcmU6IGxpbmtSYWRpb0dyb3VwIH1cbiAgfTtcblxuICBmdW5jdGlvbiBsaW5rUmFkaW9Hcm91cChzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybHMpIHtcbiAgICAkbWRUaGVtaW5nKGVsZW1lbnQpO1xuICAgIHZhciByZ0N0cmwgPSBjdHJsc1swXTtcbiAgICB2YXIgbmdNb2RlbEN0cmwgPSBjdHJsc1sxXSB8fCAkbWRVdGlsLmZha2VOZ01vZGVsKCk7XG5cbiAgICBmdW5jdGlvbiBrZXlkb3duTGlzdGVuZXIoZXYpIHtcbiAgICAgIHN3aXRjaChldi5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2UgJG1kQ29uc3RhbnQuS0VZX0NPREUuTEVGVF9BUlJPVzpcbiAgICAgICAgY2FzZSAkbWRDb25zdGFudC5LRVlfQ09ERS5VUF9BUlJPVzpcbiAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHJnQ3RybC5zZWxlY3RQcmV2aW91cygpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJG1kQ29uc3RhbnQuS0VZX0NPREUuUklHSFRfQVJST1c6XG4gICAgICAgIGNhc2UgJG1kQ29uc3RhbnQuS0VZX0NPREUuRE9XTl9BUlJPVzpcbiAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHJnQ3RybC5zZWxlY3ROZXh0KCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAkbWRDb25zdGFudC5LRVlfQ09ERS5FTlRFUjpcbiAgICAgICAgICB2YXIgZm9ybSA9IGFuZ3VsYXIuZWxlbWVudCgkbWRVdGlsLmdldENsb3Nlc3QoZWxlbWVudFswXSwgJ2Zvcm0nKSk7XG4gICAgICAgICAgaWYgKGZvcm0ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9ybS50cmlnZ2VySGFuZGxlcignc3VibWl0Jyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJnQ3RybC5pbml0KG5nTW9kZWxDdHJsKTtcblxuICAgIGVsZW1lbnQuYXR0cih7XG4gICAgICAgICAgICAgICdyb2xlJzogJ3JhZGlvZ3JvdXAnLFxuICAgICAgICAgICAgICAndGFiSW5kZXgnOiBlbGVtZW50LmF0dHIoJ3RhYmluZGV4JykgfHwgJzAnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKCdrZXlkb3duJywga2V5ZG93bkxpc3RlbmVyKTtcblxuICB9XG5cbiAgZnVuY3Rpb24gUmFkaW9Hcm91cENvbnRyb2xsZXIoJGVsZW1lbnQpIHtcbiAgICB0aGlzLl9yYWRpb0J1dHRvblJlbmRlckZucyA9IFtdO1xuICAgIHRoaXMuJGVsZW1lbnQgPSAkZWxlbWVudDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVJhZGlvR3JvdXBDb250cm9sbGVyUHJvdG8oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGluaXQ6IGZ1bmN0aW9uKG5nTW9kZWxDdHJsKSB7XG4gICAgICAgIHRoaXMuX25nTW9kZWxDdHJsID0gbmdNb2RlbEN0cmw7XG4gICAgICAgIHRoaXMuX25nTW9kZWxDdHJsLiRyZW5kZXIgPSBhbmd1bGFyLmJpbmQodGhpcywgdGhpcy5yZW5kZXIpO1xuICAgICAgfSxcbiAgICAgIGFkZDogZnVuY3Rpb24ocmJSZW5kZXIpIHtcbiAgICAgICAgdGhpcy5fcmFkaW9CdXR0b25SZW5kZXJGbnMucHVzaChyYlJlbmRlcik7XG4gICAgICB9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbihyYlJlbmRlcikge1xuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLl9yYWRpb0J1dHRvblJlbmRlckZucy5pbmRleE9mKHJiUmVuZGVyKTtcbiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgIHRoaXMuX3JhZGlvQnV0dG9uUmVuZGVyRm5zLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl9yYWRpb0J1dHRvblJlbmRlckZucy5mb3JFYWNoKGZ1bmN0aW9uKHJiUmVuZGVyKSB7XG4gICAgICAgICAgcmJSZW5kZXIoKTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgc2V0Vmlld1ZhbHVlOiBmdW5jdGlvbih2YWx1ZSwgZXZlbnRUeXBlKSB7XG4gICAgICAgIHRoaXMuX25nTW9kZWxDdHJsLiRzZXRWaWV3VmFsdWUodmFsdWUsIGV2ZW50VHlwZSk7XG4gICAgICAgIC8vIHVwZGF0ZSB0aGUgb3RoZXIgcmFkaW8gYnV0dG9ucyBhcyB3ZWxsXG4gICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICB9LFxuICAgICAgZ2V0Vmlld1ZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX25nTW9kZWxDdHJsLiR2aWV3VmFsdWU7XG4gICAgICB9LFxuICAgICAgc2VsZWN0TmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBjaGFuZ2VTZWxlY3RlZEJ1dHRvbih0aGlzLiRlbGVtZW50LCAxKTtcbiAgICAgIH0sXG4gICAgICBzZWxlY3RQcmV2aW91cyA6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gY2hhbmdlU2VsZWN0ZWRCdXR0b24odGhpcy4kZWxlbWVudCwgLTEpO1xuICAgICAgfSxcbiAgICAgIHNldEFjdGl2ZURlc2NlbmRhbnQ6IGZ1bmN0aW9uIChyYWRpb0lkKSB7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1hY3RpdmVkZXNjZW5kYW50JywgcmFkaW9JZCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogQ2hhbmdlIHRoZSByYWRpbyBncm91cCdzIHNlbGVjdGVkIGJ1dHRvbiBieSBhIGdpdmVuIGluY3JlbWVudC5cbiAgICogSWYgbm8gYnV0dG9uIGlzIHNlbGVjdGVkLCBzZWxlY3QgdGhlIGZpcnN0IGJ1dHRvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGNoYW5nZVNlbGVjdGVkQnV0dG9uKHBhcmVudCwgaW5jcmVtZW50KSB7XG4gICAgLy8gQ29lcmNlIGFsbCBjaGlsZCByYWRpbyBidXR0b25zIGludG8gYW4gYXJyYXksIHRoZW4gd3JhcCB0aGVuIGluIGFuIGl0ZXJhdG9yXG4gICAgdmFyIGJ1dHRvbnMgPSAkbWRVdGlsLml0ZXJhdG9yKFxuICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwocGFyZW50WzBdLnF1ZXJ5U2VsZWN0b3JBbGwoJ21kLXJhZGlvLWJ1dHRvbicpKSxcbiAgICAgIHRydWVcbiAgICApO1xuXG4gICAgaWYgKGJ1dHRvbnMuY291bnQoKSkge1xuICAgICAgdmFyIHZhbGlkYXRlID0gZnVuY3Rpb24gKGJ1dHRvbikge1xuICAgICAgICAvLyBJZiBkaXNhYmxlZCwgdGhlbiBOT1QgdmFsaWRcbiAgICAgICAgcmV0dXJuICFhbmd1bGFyLmVsZW1lbnQoYnV0dG9uKS5hdHRyKFwiZGlzYWJsZWRcIik7XG4gICAgICB9O1xuICAgICAgdmFyIHNlbGVjdGVkID0gcGFyZW50WzBdLnF1ZXJ5U2VsZWN0b3IoJ21kLXJhZGlvLWJ1dHRvbi5tZC1jaGVja2VkJyk7XG4gICAgICB2YXIgdGFyZ2V0ID0gYnV0dG9uc1tpbmNyZW1lbnQgPCAwID8gJ3ByZXZpb3VzJyA6ICduZXh0J10oc2VsZWN0ZWQsIHZhbGlkYXRlKSB8fCBidXR0b25zLmZpcnN0KCk7XG4gICAgICAvLyBBY3RpdmF0ZSByYWRpb0J1dHRvbidzIGNsaWNrIGxpc3RlbmVyICh0cmlnZ2VySGFuZGxlciB3b24ndCBjcmVhdGUgYSByZWFsIGNsaWNrIGV2ZW50KVxuICAgICAgYW5ndWxhci5lbGVtZW50KHRhcmdldCkudHJpZ2dlckhhbmRsZXIoJ2NsaWNrJyk7XG5cblxuICAgIH1cbiAgfVxuXG59XG5tZFJhZGlvR3JvdXBEaXJlY3RpdmUuJGluamVjdCA9IFtcIiRtZFV0aWxcIiwgXCIkbWRDb25zdGFudFwiLCBcIiRtZFRoZW1pbmdcIl07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG1vZHVsZSBtYXRlcmlhbC5jb21wb25lbnRzLnJhZGlvQnV0dG9uXG4gKiBAbmFtZSBtZFJhZGlvQnV0dG9uXG4gKlxuICogQHJlc3RyaWN0IEVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgPG1kLXJhZGlvLWJ1dHRvbj5gZGlyZWN0aXZlIGlzIHRoZSBjaGlsZCBkaXJlY3RpdmUgcmVxdWlyZWQgdG8gYmUgdXNlZCB3aXRoaW4gYDxtZC1yYWRpby1ncm91cD5gIGVsZW1lbnRzLlxuICpcbiAqIFdoaWxlIHNpbWlsYXIgdG8gdGhlIGA8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmctbW9kZWw9XCJcIiB2YWx1ZT1cIlwiPmAgZGlyZWN0aXZlLFxuICogdGhlIGA8bWQtcmFkaW8tYnV0dG9uPmAgZGlyZWN0aXZlIHByb3ZpZGVzIGluayBlZmZlY3RzLCBBUklBIHN1cHBvcnQsIGFuZFxuICogc3VwcG9ydHMgdXNlIHdpdGhpbiBuYW1lZCByYWRpbyBncm91cHMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IG5nVmFsdWUgQW5ndWxhciBleHByZXNzaW9uIHdoaWNoIHNldHMgdGhlIHZhbHVlIHRvIHdoaWNoIHRoZSBleHByZXNzaW9uIHNob3VsZFxuICogICAgYmUgc2V0IHdoZW4gc2VsZWN0ZWQuKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIFRoZSB2YWx1ZSB0byB3aGljaCB0aGUgZXhwcmVzc2lvbiBzaG91bGQgYmUgc2V0IHdoZW4gc2VsZWN0ZWQuXG4gKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gKiBAcGFyYW0ge3N0cmluZz19IGFyaWFMYWJlbCBBZGRzIGxhYmVsIHRvIHJhZGlvIGJ1dHRvbiBmb3IgYWNjZXNzaWJpbGl0eS5cbiAqIERlZmF1bHRzIHRvIHJhZGlvIGJ1dHRvbidzIHRleHQuIElmIG5vIGRlZmF1bHQgdGV4dCBpcyBmb3VuZCwgYSB3YXJuaW5nIHdpbGwgYmUgbG9nZ2VkLlxuICpcbiAqIEB1c2FnZVxuICogPGhsanMgbGFuZz1cImh0bWxcIj5cbiAqXG4gKiA8bWQtcmFkaW8tYnV0dG9uIHZhbHVlPVwiMVwiIGFyaWEtbGFiZWw9XCJMYWJlbCAxXCI+XG4gKiAgIExhYmVsIDFcbiAqIDwvbWQtcmFkaW8tYnV0dG9uPlxuICpcbiAqIDxtZC1yYWRpby1idXR0b24gbmctbW9kZWw9XCJjb2xvclwiIG5nLXZhbHVlPVwic3BlY2lhbFZhbHVlXCIgYXJpYS1sYWJlbD1cIkdyZWVuXCI+XG4gKiAgIEdyZWVuXG4gKiA8L21kLXJhZGlvLWJ1dHRvbj5cbiAqXG4gKiA8L2hsanM+XG4gKlxuICovXG5mdW5jdGlvbiBtZFJhZGlvQnV0dG9uRGlyZWN0aXZlKCRtZEFyaWEsICRtZFV0aWwsICRtZFRoZW1pbmcpIHtcblxuICB2YXIgQ0hFQ0tFRF9DU1MgPSAnbWQtY2hlY2tlZCc7XG5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHJlcXVpcmU6ICdebWRSYWRpb0dyb3VwJyxcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1kLWNvbnRhaW5lclwiIG1kLWluay1yaXBwbGUgbWQtaW5rLXJpcHBsZS1jaGVja2JveD4nICtcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1kLW9mZlwiPjwvZGl2PicgK1xuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibWQtb25cIj48L2Rpdj4nICtcbiAgICAgICAgICAgICAgJzwvZGl2PicgK1xuICAgICAgICAgICAgICAnPGRpdiBuZy10cmFuc2NsdWRlIGNsYXNzPVwibWQtbGFiZWxcIj48L2Rpdj4nLFxuICAgIGxpbms6IGxpbmtcbiAgfTtcblxuICBmdW5jdGlvbiBsaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyLCByZ0N0cmwpIHtcbiAgICB2YXIgbGFzdENoZWNrZWQ7XG5cbiAgICAkbWRUaGVtaW5nKGVsZW1lbnQpO1xuICAgIGNvbmZpZ3VyZUFyaWEoZWxlbWVudCwgc2NvcGUpO1xuXG4gICAgcmdDdHJsLmFkZChyZW5kZXIpO1xuICAgIGF0dHIuJG9ic2VydmUoJ3ZhbHVlJywgcmVuZGVyKTtcblxuICAgIGVsZW1lbnRcbiAgICAgIC5vbignY2xpY2snLCBsaXN0ZW5lcilcbiAgICAgIC5vbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmdDdHJsLnJlbW92ZShyZW5kZXIpO1xuICAgICAgfSk7XG5cbiAgICBmdW5jdGlvbiBsaXN0ZW5lcihldikge1xuICAgICAgaWYgKGVsZW1lbnRbMF0uaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpKSByZXR1cm47XG5cbiAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgcmdDdHJsLnNldFZpZXdWYWx1ZShhdHRyLnZhbHVlLCBldiAmJiBldi50eXBlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBjaGVja2VkID0gKHJnQ3RybC5nZXRWaWV3VmFsdWUoKSA9PSBhdHRyLnZhbHVlKTtcbiAgICAgIGlmIChjaGVja2VkID09PSBsYXN0Q2hlY2tlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsYXN0Q2hlY2tlZCA9IGNoZWNrZWQ7XG4gICAgICBlbGVtZW50LmF0dHIoJ2FyaWEtY2hlY2tlZCcsIGNoZWNrZWQpO1xuICAgICAgaWYgKGNoZWNrZWQpIHtcbiAgICAgICAgZWxlbWVudC5hZGRDbGFzcyhDSEVDS0VEX0NTUyk7XG4gICAgICAgIHJnQ3RybC5zZXRBY3RpdmVEZXNjZW5kYW50KGVsZW1lbnQuYXR0cignaWQnKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKENIRUNLRURfQ1NTKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5qZWN0IEFSSUEtc3BlY2lmaWMgYXR0cmlidXRlcyBhcHByb3ByaWF0ZSBmb3IgZWFjaCByYWRpbyBidXR0b25cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25maWd1cmVBcmlhKCBlbGVtZW50LCBzY29wZSApe1xuICAgICAgc2NvcGUuYXJpYUlkID0gYnVpbGRBcmlhSUQoKTtcblxuICAgICAgZWxlbWVudC5hdHRyKHtcbiAgICAgICAgJ2lkJyA6ICBzY29wZS5hcmlhSWQsXG4gICAgICAgICdyb2xlJyA6ICdyYWRpbycsXG4gICAgICAgICdhcmlhLWNoZWNrZWQnIDogJ2ZhbHNlJ1xuICAgICAgfSk7XG5cbiAgICAgICRtZEFyaWEuZXhwZWN0V2l0aFRleHQoZWxlbWVudCwgJ2FyaWEtbGFiZWwnKTtcblxuICAgICAgLyoqXG4gICAgICAgKiBCdWlsZCBhIHVuaXF1ZSBJRCBmb3IgZWFjaCByYWRpbyBidXR0b24gdGhhdCB3aWxsIGJlIHVzZWQgd2l0aCBhcmlhLWFjdGl2ZWRlc2NlbmRhbnQuXG4gICAgICAgKiBQcmVzZXJ2ZSBleGlzdGluZyBJRCBpZiBhbHJlYWR5IHNwZWNpZmllZC5cbiAgICAgICAqIEByZXR1cm5zIHsqfHN0cmluZ31cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gYnVpbGRBcmlhSUQoKSB7XG4gICAgICAgIHJldHVybiBhdHRyLmlkIHx8ICggJ3JhZGlvJyArIFwiX1wiICsgJG1kVXRpbC5uZXh0VWlkKCkgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbm1kUmFkaW9CdXR0b25EaXJlY3RpdmUuJGluamVjdCA9IFtcIiRtZEFyaWFcIiwgXCIkbWRVdGlsXCIsIFwiJG1kVGhlbWluZ1wiXTtcblxufSkoKTtcblxuLyohXG4gKiBBbmd1bGFyIE1hdGVyaWFsIERlc2lnblxuICogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvbWF0ZXJpYWxcbiAqIEBsaWNlbnNlIE1JVFxuICogdjAuNy4xXG4gKi9cbihmdW5jdGlvbigpIHtcbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAbmdkb2MgbW9kdWxlXG4gKiBAbmFtZSBtYXRlcmlhbC5jb21wb25lbnRzLnNpZGVuYXZcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgU2lkZW5hdiBRUCBjb21wb25lbnQuXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdtYXRlcmlhbC5jb21wb25lbnRzLnNpZGVuYXYnLCBbXG4gICAgJ21hdGVyaWFsLmNvcmUnLFxuICAgICdtYXRlcmlhbC5jb21wb25lbnRzLmJhY2tkcm9wJ1xuICBdKVxuICAuZmFjdG9yeSgnJG1kU2lkZW5hdicsIFNpZGVuYXZTZXJ2aWNlIClcbiAgLmRpcmVjdGl2ZSgnbWRTaWRlbmF2JywgU2lkZW5hdkRpcmVjdGl2ZSlcbiAgLmNvbnRyb2xsZXIoJyRtZFNpZGVuYXZDb250cm9sbGVyJywgU2lkZW5hdkNvbnRyb2xsZXIpO1xuXG5cbi8qKlxuICogQHByaXZhdGVcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkbWRTaWRlbmF2XG4gKiBAbW9kdWxlIG1hdGVyaWFsLmNvbXBvbmVudHMuc2lkZW5hdlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogYCRtZFNpZGVuYXZgIG1ha2VzIGl0IGVhc3kgdG8gaW50ZXJhY3Qgd2l0aCBtdWx0aXBsZSBzaWRlbmF2c1xuICogaW4gYW4gYXBwLlxuICpcbiAqIEB1c2FnZVxuICogPGhsanMgbGFuZz1cImpzXCI+XG4gKiAvLyBUb2dnbGUgdGhlIGdpdmVuIHNpZGVuYXZcbiAqICRtZFNpZGVuYXYoY29tcG9uZW50SWQpLnRvZ2dsZSgpO1xuICogPC9obGpzPlxuICogPGhsanMgbGFuZz1cImpzXCI+XG4gKiAvLyBPcGVuIHRoZSBnaXZlbiBzaWRlbmF2XG4gKiAkbWRTaWRlbmF2KGNvbXBvbmVudElkKS5vcGVuKCk7XG4gKiA8L2hsanM+XG4gKiA8aGxqcyBsYW5nPVwianNcIj5cbiAqIC8vIENsb3NlIHRoZSBnaXZlbiBzaWRlbmF2XG4gKiAkbWRTaWRlbmF2KGNvbXBvbmVudElkKS5jbG9zZSgpO1xuICogPC9obGpzPlxuICogPGhsanMgbGFuZz1cImpzXCI+XG4gKiAvLyBFeHBvc2VzIHdoZXRoZXIgZ2l2ZW4gc2lkZW5hdiBpcyBzZXQgdG8gYmUgb3BlblxuICogJG1kU2lkZW5hdihjb21wb25lbnRJZCkuaXNPcGVuKCk7XG4gKiA8L2hsanM+XG4gKiA8aGxqcyBsYW5nPVwianNcIj5cbiAqIC8vIEV4cG9zZXMgd2hldGhlciBnaXZlbiBzaWRlbmF2IGlzIGxvY2tlZCBvcGVuXG4gKiAvLyBJZiB0aGlzIGlzIHRydWUsIHRoZSBzaWRlbmF2IHdpbGwgYmUgb3BlbiByZWdhcmRsZXNzIG9mIGlzT3BlbigpXG4gKiAkbWRTaWRlbmF2KGNvbXBvbmVudElkKS5pc0xvY2tlZE9wZW4oKTtcbiAqIDwvaGxqcz5cbiAqL1xuZnVuY3Rpb24gU2lkZW5hdlNlcnZpY2UoJG1kQ29tcG9uZW50UmVnaXN0cnksICRxKSB7XG4gIHJldHVybiBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICB2YXIgZXJyb3JNc2cgPSBcIlNpZGVOYXYgJ1wiICsgaGFuZGxlICsgXCInIGlzIG5vdCBhdmFpbGFibGUhXCI7XG5cbiAgICAvLyBMb29rdXAgdGhlIGNvbnRyb2xsZXIgaW5zdGFuY2UgZm9yIHRoZSBzcGVjaWZpZWQgc2lkTmF2IGluc3RhbmNlXG4gICAgdmFyIGluc3RhbmNlID0gJG1kQ29tcG9uZW50UmVnaXN0cnkuZ2V0KGhhbmRsZSk7XG4gICAgaWYoIWluc3RhbmNlKSB7XG4gICAgICAkbWRDb21wb25lbnRSZWdpc3RyeS5ub3RGb3VuZEVycm9yKGhhbmRsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGlzT3BlbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBpbnN0YW5jZSAmJiBpbnN0YW5jZS5pc09wZW4oKTtcbiAgICAgIH0sXG4gICAgICBpc0xvY2tlZE9wZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gaW5zdGFuY2UgJiYgaW5zdGFuY2UuaXNMb2NrZWRPcGVuKCk7XG4gICAgICB9LFxuICAgICAgdG9nZ2xlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlID8gaW5zdGFuY2UudG9nZ2xlKCkgOiAkcS5yZWplY3QoZXJyb3JNc2cpO1xuICAgICAgfSxcbiAgICAgIG9wZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gaW5zdGFuY2UgPyBpbnN0YW5jZS5vcGVuKCkgOiAkcS5yZWplY3QoZXJyb3JNc2cpO1xuICAgICAgfSxcbiAgICAgIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlID8gaW5zdGFuY2UuY2xvc2UoKSA6ICRxLnJlamVjdChlcnJvck1zZyk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbn1cblNpZGVuYXZTZXJ2aWNlLiRpbmplY3QgPSBbXCIkbWRDb21wb25lbnRSZWdpc3RyeVwiLCBcIiRxXCJdO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG1kU2lkZW5hdlxuICogQG1vZHVsZSBtYXRlcmlhbC5jb21wb25lbnRzLnNpZGVuYXZcbiAqIEByZXN0cmljdCBFXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogQSBTaWRlbmF2IGNvbXBvbmVudCB0aGF0IGNhbiBiZSBvcGVuZWQgYW5kIGNsb3NlZCBwcm9ncmFtYXRpY2FsbHkuXG4gKlxuICogQnkgZGVmYXVsdCwgdXBvbiBvcGVuaW5nIGl0IHdpbGwgc2xpZGUgb3V0IG9uIHRvcCBvZiB0aGUgbWFpbiBjb250ZW50IGFyZWEuXG4gKlxuICogQHVzYWdlXG4gKiA8aGxqcyBsYW5nPVwiaHRtbFwiPlxuICogPGRpdiBsYXlvdXQ9XCJyb3dcIiBuZy1jb250cm9sbGVyPVwiTXlDb250cm9sbGVyXCI+XG4gKiAgIDxtZC1zaWRlbmF2IG1kLWNvbXBvbmVudC1pZD1cImxlZnRcIiBjbGFzcz1cIm1kLXNpZGVuYXYtbGVmdFwiPlxuICogICAgIExlZnQgTmF2IVxuICogICA8L21kLXNpZGVuYXY+XG4gKlxuICogICA8bWQtY29udGVudD5cbiAqICAgICBDZW50ZXIgQ29udGVudFxuICogICAgIDxtZC1idXR0b24gbmctY2xpY2s9XCJvcGVuTGVmdE1lbnUoKVwiPlxuICogICAgICAgT3BlbiBMZWZ0IE1lbnVcbiAqICAgICA8L21kLWJ1dHRvbj5cbiAqICAgPC9tZC1jb250ZW50PlxuICpcbiAqICAgPG1kLXNpZGVuYXYgbWQtY29tcG9uZW50LWlkPVwicmlnaHRcIlxuICogICAgIG1kLWlzLWxvY2tlZC1vcGVuPVwiJG1lZGlhKCdtaW4td2lkdGg6IDMzM3B4JylcIlxuICogICAgIGNsYXNzPVwibWQtc2lkZW5hdi1yaWdodFwiPlxuICogICAgIFJpZ2h0IE5hdiFcbiAqICAgPC9tZC1zaWRlbmF2PlxuICogPC9kaXY+XG4gKiA8L2hsanM+XG4gKlxuICogPGhsanMgbGFuZz1cImpzXCI+XG4gKiB2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ215QXBwJywgWyduZ01hdGVyaWFsJ10pO1xuICogYXBwLmNvbnRyb2xsZXIoJ015Q29udHJvbGxlcicsIGZ1bmN0aW9uKCRzY29wZSwgJG1kU2lkZW5hdikge1xuICogICAkc2NvcGUub3BlbkxlZnRNZW51ID0gZnVuY3Rpb24oKSB7XG4gKiAgICAgJG1kU2lkZW5hdignbGVmdCcpLnRvZ2dsZSgpO1xuICogICB9O1xuICogfSk7XG4gKiA8L2hsanM+XG4gKlxuICogQHBhcmFtIHtleHByZXNzaW9uPX0gbWQtaXMtb3BlbiBBIG1vZGVsIGJvdW5kIHRvIHdoZXRoZXIgdGhlIHNpZGVuYXYgaXMgb3BlbmVkLlxuICogQHBhcmFtIHtzdHJpbmc9fSBtZC1jb21wb25lbnQtaWQgY29tcG9uZW50SWQgdG8gdXNlIHdpdGggJG1kU2lkZW5hdiBzZXJ2aWNlLlxuICogQHBhcmFtIHtleHByZXNzaW9uPX0gbWQtaXMtbG9ja2VkLW9wZW4gV2hlbiB0aGlzIGV4cHJlc3Npb24gZXZhbHV0ZXMgdG8gdHJ1ZSxcbiAqIHRoZSBzaWRlbmF2ICdsb2NrcyBvcGVuJzogaXQgZmFsbHMgaW50byB0aGUgY29udGVudCdzIGZsb3cgaW5zdGVhZFxuICogb2YgYXBwZWFyaW5nIG92ZXIgaXQuIFRoaXMgb3ZlcnJpZGVzIHRoZSBgaXMtb3BlbmAgYXR0cmlidXRlLlxuICpcbiAqIEEgJG1lZGlhKCkgZnVuY3Rpb24gaXMgZXhwb3NlZCB0byB0aGUgaXMtbG9ja2VkLW9wZW4gYXR0cmlidXRlLCB3aGljaFxuICogY2FuIGJlIGdpdmVuIGEgbWVkaWEgcXVlcnkgb3Igb25lIG9mIHRoZSBgc21gLCBgZ3Qtc21gLCBgbWRgLCBgZ3QtbWRgLCBgbGdgIG9yIGBndC1sZ2AgcHJlc2V0cy5cbiAqIEV4YW1wbGVzOlxuICpcbiAqICAgLSBgPG1kLXNpZGVuYXYgbWQtaXMtbG9ja2VkLW9wZW49XCJzaG91bGRMb2NrT3BlblwiPjwvbWQtc2lkZW5hdj5gXG4gKiAgIC0gYDxtZC1zaWRlbmF2IG1kLWlzLWxvY2tlZC1vcGVuPVwiJG1lZGlhKCdtaW4td2lkdGg6IDEwMDBweCcpXCI+PC9tZC1zaWRlbmF2PmBcbiAqICAgLSBgPG1kLXNpZGVuYXYgbWQtaXMtbG9ja2VkLW9wZW49XCIkbWVkaWEoJ3NtJylcIj48L21kLXNpZGVuYXY+YCAobG9ja3Mgb3BlbiBvbiBzbWFsbCBzY3JlZW5zKVxuICovXG5mdW5jdGlvbiBTaWRlbmF2RGlyZWN0aXZlKCR0aW1lb3V0LCAkYW5pbWF0ZSwgJHBhcnNlLCAkbWRNZWRpYSwgJG1kQ29uc3RhbnQsICRjb21waWxlLCAkbWRUaGVtaW5nLCAkcSwgJGRvY3VtZW50KSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICBzY29wZToge1xuICAgICAgaXNPcGVuOiAnPT9tZElzT3BlbidcbiAgICB9LFxuICAgIGNvbnRyb2xsZXI6ICckbWRTaWRlbmF2Q29udHJvbGxlcicsXG4gICAgY29tcGlsZTogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgZWxlbWVudC5hZGRDbGFzcygnbWQtY2xvc2VkJyk7XG4gICAgICBlbGVtZW50LmF0dHIoJ3RhYkluZGV4JywgJy0xJyk7XG4gICAgICByZXR1cm4gcG9zdExpbms7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBEaXJlY3RpdmUgUG9zdCBMaW5rIGZ1bmN0aW9uLi4uXG4gICAqL1xuICBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgZWxlbWVudCwgYXR0ciwgc2lkZW5hdkN0cmwpIHtcbiAgICB2YXIgdHJpZ2dlcmluZ0VsZW1lbnQgPSBudWxsO1xuICAgIHZhciBwcm9taXNlID0gJHEud2hlbih0cnVlKTtcblxuICAgIHZhciBpc0xvY2tlZE9wZW5QYXJzZWQgPSAkcGFyc2UoYXR0ci5tZElzTG9ja2VkT3Blbik7XG4gICAgdmFyIGlzTG9ja2VkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gaXNMb2NrZWRPcGVuUGFyc2VkKHNjb3BlLiRwYXJlbnQsIHtcbiAgICAgICAgJG1lZGlhOiAkbWRNZWRpYVxuICAgICAgfSk7XG4gICAgfTtcbiAgICB2YXIgYmFja2Ryb3AgPSAkY29tcGlsZShcbiAgICAgICc8bWQtYmFja2Ryb3AgY2xhc3M9XCJtZC1zaWRlbmF2LWJhY2tkcm9wIG1kLW9wYXF1ZSBuZy1lbnRlclwiPidcbiAgICApKHNjb3BlKTtcblxuICAgIGVsZW1lbnQub24oJyRkZXN0cm95Jywgc2lkZW5hdkN0cmwuZGVzdHJveSk7XG4gICAgJG1kVGhlbWluZy5pbmhlcml0KGJhY2tkcm9wLCBlbGVtZW50KTtcblxuICAgIHNjb3BlLiR3YXRjaChpc0xvY2tlZCwgdXBkYXRlSXNMb2NrZWQpO1xuICAgIHNjb3BlLiR3YXRjaCgnaXNPcGVuJywgdXBkYXRlSXNPcGVuKTtcblxuXG4gICAgLy8gUHVibGlzaCBzcGVjaWFsIGFjY2Vzc29yIGZvciB0aGUgQ29udHJvbGxlciBpbnN0YW5jZVxuICAgIHNpZGVuYXZDdHJsLiR0b2dnbGVPcGVuID0gdG9nZ2xlT3BlbjtcblxuICAgIC8qKlxuICAgICAqIFRvZ2dsZSB0aGUgRE9NIGNsYXNzZXMgdG8gaW5kaWNhdGUgYGxvY2tlZGBcbiAgICAgKiBAcGFyYW0gaXNMb2NrZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGVJc0xvY2tlZChpc0xvY2tlZCwgb2xkVmFsdWUpIHtcbiAgICAgIHNjb3BlLmlzTG9ja2VkT3BlbiA9IGlzTG9ja2VkO1xuICAgICAgaWYgKGlzTG9ja2VkID09PSBvbGRWYWx1ZSkge1xuICAgICAgICBlbGVtZW50LnRvZ2dsZUNsYXNzKCdtZC1sb2NrZWQtb3BlbicsICEhaXNMb2NrZWQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJGFuaW1hdGVbaXNMb2NrZWQgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10oZWxlbWVudCwgJ21kLWxvY2tlZC1vcGVuJyk7XG4gICAgICB9XG4gICAgICBiYWNrZHJvcC50b2dnbGVDbGFzcygnbWQtbG9ja2VkLW9wZW4nLCAhIWlzTG9ja2VkKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUb2dnbGUgdGhlIFNpZGVOYXYgdmlldyBhbmQgYXR0YWNoL2RldGFjaCBsaXN0ZW5lcnNcbiAgICAgKiBAcGFyYW0gaXNPcGVuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlSXNPcGVuKGlzT3Blbikge1xuICAgICAgdmFyIHBhcmVudCA9IGVsZW1lbnQucGFyZW50KCk7XG5cbiAgICAgIHBhcmVudFtpc09wZW4gPyAnb24nIDogJ29mZiddKCdrZXlkb3duJywgb25LZXlEb3duKTtcbiAgICAgIGJhY2tkcm9wW2lzT3BlbiA/ICdvbicgOiAnb2ZmJ10oJ2NsaWNrJywgY2xvc2UpO1xuXG4gICAgICBpZiAoIGlzT3BlbiApIHtcbiAgICAgICAgLy8gQ2FwdHVyZSB1cG9uIG9wZW5pbmcuLlxuICAgICAgICB0cmlnZ2VyaW5nRWxlbWVudCA9ICRkb2N1bWVudFswXS5hY3RpdmVFbGVtZW50O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvbWlzZSA9ICRxLmFsbChbXG4gICAgICAgICRhbmltYXRlW2lzT3BlbiA/ICdlbnRlcicgOiAnbGVhdmUnXShiYWNrZHJvcCwgcGFyZW50KSxcbiAgICAgICAgJGFuaW1hdGVbaXNPcGVuID8gJ3JlbW92ZUNsYXNzJyA6ICdhZGRDbGFzcyddKGVsZW1lbnQsICdtZC1jbG9zZWQnKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIC8vIElmIHdlIG9wZW5lZCwgYW5kIGhhdmVuJ3QgY2xvc2VkIGFnYWluIGJlZm9yZSB0aGUgYW5pbWF0aW9uIGZpbmlzaGVkXG4gICAgICAgICAgaWYgKHNjb3BlLmlzT3Blbikge1xuICAgICAgICAgICAgZWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIF0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRvZ2dsZSB0aGUgc2lkZU5hdiB2aWV3IGFuZCBwdWJsaXNoIGEgcHJvbWlzZSB0byBiZSByZXNvbHZlZCB3aGVuXG4gICAgICogdGhlIHZpZXcgYW5pbWF0aW9uIGZpbmlzaGVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGlzT3BlblxuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvZ2dsZU9wZW4oIGlzT3BlbiApIHtcbiAgICAgIGlmIChzY29wZS5pc09wZW4gPT0gaXNPcGVuICkge1xuXG4gICAgICAgIHJldHVybiAkcS53aGVuKHRydWUpO1xuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgIC8vIFRvZ2dsZSB2YWx1ZSB0byBmb3JjZSBhbiBhc3luYyBgdXBkYXRlSXNPcGVuKClgIHRvIHJ1blxuICAgICAgICBzY29wZS5pc09wZW4gPSBpc09wZW47XG5cbiAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAvLyBXaGVuIHRoZSBjdXJyZW50IGB1cGRhdGVJc09wZW4oKWAgYW5pbWF0aW9uIGZpbmlzaGVzXG4gICAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHJlc3VsdCl7XG5cbiAgICAgICAgICAgIGlmICggIXNjb3BlLmlzT3BlbiApIHtcbiAgICAgICAgICAgICAgLy8gcmVzZXQgZm9jdXMgdG8gb3JpZ2luYXRpbmcgZWxlbWVudCAoaWYgYXZhaWxhYmxlKSB1cG9uIGNsb3NlXG4gICAgICAgICAgICAgIHRyaWdnZXJpbmdFbGVtZW50ICYmIHRyaWdnZXJpbmdFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgICAgICAgIHRyaWdnZXJpbmdFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0sMCxmYWxzZSk7XG5cbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXV0by1jbG9zZSBzaWRlTmF2IHdoZW4gdGhlIGBlc2NhcGVgIGtleSBpcyBwcmVzc2VkLlxuICAgICAqIEBwYXJhbSBldnRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbktleURvd24oZXYpIHtcbiAgICAgIHZhciBpc0VzY2FwZSA9IChldi5rZXlDb2RlID09PSAkbWRDb25zdGFudC5LRVlfQ09ERS5FU0NBUEUpO1xuICAgICAgcmV0dXJuIGlzRXNjYXBlID8gY2xvc2UoZXYpIDogJHEud2hlbih0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXaXRoIGJhY2tkcm9wIGBjbGlja3NgIG9yIGBlc2NhcGVgIGtleS1wcmVzcywgaW1tZWRpYXRlbHlcbiAgICAgKiBhcHBseSB0aGUgQ1NTIGNsb3NlIHRyYW5zaXRpb24uLi4gVGhlbiBub3RpZnkgdGhlIGNvbnRyb2xsZXJcbiAgICAgKiB0byBjbG9zZSgpIGFuZCBwZXJmb3JtIGl0cyBvd24gYWN0aW9ucy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9zZShldikge1xuICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICByZXR1cm4gc2lkZW5hdkN0cmwuY2xvc2UoKTtcbiAgICB9XG5cbiAgfVxufVxuU2lkZW5hdkRpcmVjdGl2ZS4kaW5qZWN0ID0gW1wiJHRpbWVvdXRcIiwgXCIkYW5pbWF0ZVwiLCBcIiRwYXJzZVwiLCBcIiRtZE1lZGlhXCIsIFwiJG1kQ29uc3RhbnRcIiwgXCIkY29tcGlsZVwiLCBcIiRtZFRoZW1pbmdcIiwgXCIkcVwiLCBcIiRkb2N1bWVudFwiXTtcblxuLypcbiAqIEBwcml2YXRlXG4gKiBAbmdkb2MgY29udHJvbGxlclxuICogQG5hbWUgU2lkZW5hdkNvbnRyb2xsZXJcbiAqIEBtb2R1bGUgbWF0ZXJpYWwuY29tcG9uZW50cy5zaWRlbmF2XG4gKlxuICovXG5mdW5jdGlvbiBTaWRlbmF2Q29udHJvbGxlcigkc2NvcGUsICRlbGVtZW50LCAkYXR0cnMsICRtZENvbXBvbmVudFJlZ2lzdHJ5LCAkcSkge1xuXG4gIHZhciBzZWxmID0gdGhpcztcblxuICAvLyBVc2UgRGVmYXVsdCBpbnRlcm5hbCBtZXRob2QgdW50aWwgb3ZlcnJpZGRlbiBieSBkaXJlY3RpdmUgcG9zdExpbmtcblxuICBzZWxmLiR0b2dnbGVPcGVuID0gZnVuY3Rpb24oKSB7IHJldHVybiAkcS53aGVuKCRzY29wZS5pc09wZW4pOyB9O1xuICBzZWxmLmlzT3BlbiA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gISEkc2NvcGUuaXNPcGVuOyB9O1xuICBzZWxmLmlzTG9ja2VkT3BlbiA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gISEkc2NvcGUuaXNMb2NrZWRPcGVuOyB9O1xuICBzZWxmLm9wZW4gICA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc2VsZi4kdG9nZ2xlT3BlbiggdHJ1ZSApOyAgfTtcbiAgc2VsZi5jbG9zZSAgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNlbGYuJHRvZ2dsZU9wZW4oIGZhbHNlICk7IH07XG4gIHNlbGYudG9nZ2xlID0gZnVuY3Rpb24oKSB7IHJldHVybiBzZWxmLiR0b2dnbGVPcGVuKCAhJHNjb3BlLmlzT3BlbiApOyAgfTtcblxuICBzZWxmLmRlc3Ryb3kgPSAkbWRDb21wb25lbnRSZWdpc3RyeS5yZWdpc3RlcihzZWxmLCAkYXR0cnMubWRDb21wb25lbnRJZCk7XG59XG5TaWRlbmF2Q29udHJvbGxlci4kaW5qZWN0ID0gW1wiJHNjb3BlXCIsIFwiJGVsZW1lbnRcIiwgXCIkYXR0cnNcIiwgXCIkbWRDb21wb25lbnRSZWdpc3RyeVwiLCBcIiRxXCJdO1xuXG5cblxufSkoKTtcblxuLyohXG4gKiBBbmd1bGFyIE1hdGVyaWFsIERlc2lnblxuICogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvbWF0ZXJpYWxcbiAqIEBsaWNlbnNlIE1JVFxuICogdjAuNy4xXG4gKi9cbihmdW5jdGlvbigpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbW9kdWxlXG4gICAqIEBuYW1lIG1hdGVyaWFsLmNvbXBvbmVudHMuc2xpZGVyXG4gICAqL1xuICBhbmd1bGFyLm1vZHVsZSgnbWF0ZXJpYWwuY29tcG9uZW50cy5zbGlkZXInLCBbXG4gICAgJ21hdGVyaWFsLmNvcmUnXG4gIF0pXG4gIC5kaXJlY3RpdmUoJ21kU2xpZGVyJywgU2xpZGVyRGlyZWN0aXZlKTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBtZFNsaWRlclxuICogQG1vZHVsZSBtYXRlcmlhbC5jb21wb25lbnRzLnNsaWRlclxuICogQHJlc3RyaWN0IEVcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGA8bWQtc2xpZGVyPmAgY29tcG9uZW50IGFsbG93cyB0aGUgdXNlciB0byBjaG9vc2UgZnJvbSBhIHJhbmdlIG9mXG4gKiB2YWx1ZXMuXG4gKlxuICogQXMgcGVyIHRoZSBbbWF0ZXJpYWwgZGVzaWduIHNwZWNdKGh0dHA6Ly93d3cuZ29vZ2xlLmNvbS9kZXNpZ24vc3BlYy9zdHlsZS9jb2xvci5odG1sI2NvbG9yLXVpLWNvbG9yLWFwcGxpY2F0aW9uKVxuICogdGhlIHNsaWRlciBpcyBpbiB0aGUgYWNjZW50IGNvbG9yIGJ5IGRlZmF1bHQuIFRoZSBwcmltYXJ5IGNvbG9yIHBhbGV0dGUgbWF5IGJlIHVzZWQgd2l0aFxuICogdGhlIGBtZC1wcmltYXJ5YCBjbGFzcy5cbiAqXG4gKiBJdCBoYXMgdHdvIG1vZGVzOiAnbm9ybWFsJyBtb2RlLCB3aGVyZSB0aGUgdXNlciBzbGlkZXMgYmV0d2VlbiBhIHdpZGUgcmFuZ2VcbiAqIG9mIHZhbHVlcywgYW5kICdkaXNjcmV0ZScgbW9kZSwgd2hlcmUgdGhlIHVzZXIgc2xpZGVzIGJldHdlZW4gb25seSBhIGZld1xuICogc2VsZWN0IHZhbHVlcy5cbiAqXG4gKiBUbyBlbmFibGUgZGlzY3JldGUgbW9kZSwgYWRkIHRoZSBgbWQtZGlzY3JldGVgIGF0dHJpYnV0ZSB0byBhIHNsaWRlcixcbiAqIGFuZCB1c2UgdGhlIGBzdGVwYCBhdHRyaWJ1dGUgdG8gY2hhbmdlIHRoZSBkaXN0YW5jZSBiZXR3ZWVuXG4gKiB2YWx1ZXMgdGhlIHVzZXIgaXMgYWxsb3dlZCB0byBwaWNrLlxuICpcbiAqIEB1c2FnZVxuICogPGg0Pk5vcm1hbCBNb2RlPC9oND5cbiAqIDxobGpzIGxhbmc9XCJodG1sXCI+XG4gKiA8bWQtc2xpZGVyIG5nLW1vZGVsPVwibXlWYWx1ZVwiIG1pbj1cIjVcIiBtYXg9XCI1MDBcIj5cbiAqIDwvbWQtc2xpZGVyPlxuICogPC9obGpzPlxuICogPGg0PkRpc2NyZXRlIE1vZGU8L2g0PlxuICogPGhsanMgbGFuZz1cImh0bWxcIj5cbiAqIDxtZC1zbGlkZXIgbWQtZGlzY3JldGUgbmctbW9kZWw9XCJteURpc2NyZXRlVmFsdWVcIiBzdGVwPVwiMTBcIiBtaW49XCIxMFwiIG1heD1cIjEzMFwiPlxuICogPC9tZC1zbGlkZXI+XG4gKiA8L2hsanM+XG4gKlxuICogQHBhcmFtIHtib29sZWFuPX0gbWQtZGlzY3JldGUgV2hldGhlciB0byBlbmFibGUgZGlzY3JldGUgbW9kZS5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gc3RlcCBUaGUgZGlzdGFuY2UgYmV0d2VlbiB2YWx1ZXMgdGhlIHVzZXIgaXMgYWxsb3dlZCB0byBwaWNrLiBEZWZhdWx0IDEuXG4gKiBAcGFyYW0ge251bWJlcj19IG1pbiBUaGUgbWluaW11bSB2YWx1ZSB0aGUgdXNlciBpcyBhbGxvd2VkIHRvIHBpY2suIERlZmF1bHQgMC5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gbWF4IFRoZSBtYXhpbXVtIHZhbHVlIHRoZSB1c2VyIGlzIGFsbG93ZWQgdG8gcGljay4gRGVmYXVsdCAxMDAuXG4gKi9cbmZ1bmN0aW9uIFNsaWRlckRpcmVjdGl2ZSgkJHJBRiwgJHdpbmRvdywgJG1kQXJpYSwgJG1kVXRpbCwgJG1kQ29uc3RhbnQsICRtZFRoZW1pbmcsICRtZEdlc3R1cmUsICRwYXJzZSkge1xuICByZXR1cm4ge1xuICAgIHNjb3BlOiB7fSxcbiAgICByZXF1aXJlOiAnP25nTW9kZWwnLFxuICAgIHRlbXBsYXRlOlxuICAgICAgJzxkaXYgY2xhc3M9XCJtZC10cmFjay1jb250YWluZXJcIj4nICtcbiAgICAgICc8ZGl2IGNsYXNzPVwibWQtdHJhY2tcIj48L2Rpdj4nICtcbiAgICAgICc8ZGl2IGNsYXNzPVwibWQtdHJhY2sgbWQtdHJhY2stZmlsbFwiPjwvZGl2PicgK1xuICAgICAgJzxkaXYgY2xhc3M9XCJtZC10cmFjay10aWNrc1wiPjwvZGl2PicgK1xuICAgICAgJzwvZGl2PicgK1xuICAgICAgJzxkaXYgY2xhc3M9XCJtZC10aHVtYi1jb250YWluZXJcIj4nICtcbiAgICAgICc8ZGl2IGNsYXNzPVwibWQtdGh1bWJcIj48L2Rpdj4nICtcbiAgICAgICc8ZGl2IGNsYXNzPVwibWQtZm9jdXMtdGh1bWJcIj48L2Rpdj4nICtcbiAgICAgICc8ZGl2IGNsYXNzPVwibWQtZm9jdXMtcmluZ1wiPjwvZGl2PicgK1xuICAgICAgJzxkaXYgY2xhc3M9XCJtZC1zaWduXCI+JyArXG4gICAgICAnPHNwYW4gY2xhc3M9XCJtZC10aHVtYi10ZXh0XCI+PC9zcGFuPicgK1xuICAgICAgJzwvZGl2PicgK1xuICAgICAgJzxkaXYgY2xhc3M9XCJtZC1kaXNhYmxlZC10aHVtYlwiPjwvZGl2PicgK1xuICAgICAgJzwvZGl2PicsXG4gICAgbGluazogcG9zdExpbmtcbiAgfTtcblxuICBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgZWxlbWVudCwgYXR0ciwgbmdNb2RlbEN0cmwpIHtcbiAgICAkbWRUaGVtaW5nKGVsZW1lbnQpO1xuICAgIG5nTW9kZWxDdHJsID0gbmdNb2RlbEN0cmwgfHwge1xuICAgICAgLy8gTW9jayBuZ01vZGVsQ29udHJvbGxlciBpZiBpdCBkb2Vzbid0IGV4aXN0IHRvIGdpdmUgdXNcbiAgICAgIC8vIHRoZSBtaW5pbXVtIGZ1bmN0aW9uYWxpdHkgbmVlZGVkXG4gICAgICAkc2V0Vmlld1ZhbHVlOiBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgdGhpcy4kdmlld1ZhbHVlID0gdmFsO1xuICAgICAgICB0aGlzLiR2aWV3Q2hhbmdlTGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24oY2IpIHsgY2IoKTsgfSk7XG4gICAgICB9LFxuICAgICAgJHBhcnNlcnM6IFtdLFxuICAgICAgJGZvcm1hdHRlcnM6IFtdLFxuICAgICAgJHZpZXdDaGFuZ2VMaXN0ZW5lcnM6IFtdXG4gICAgfTtcblxuICAgIHZhciBpc0Rpc2FibGVkUGFyc2VkID0gYXR0ci5uZ0Rpc2FibGVkICYmICRwYXJzZShhdHRyLm5nRGlzYWJsZWQpO1xuICAgIHZhciBpc0Rpc2FibGVkR2V0dGVyID0gaXNEaXNhYmxlZFBhcnNlZCA/IFxuICAgICAgZnVuY3Rpb24oKSB7IHJldHVybiBpc0Rpc2FibGVkUGFyc2VkKHNjb3BlLiRwYXJlbnQpOyB9IDpcbiAgICAgIGFuZ3VsYXIubm9vcDtcbiAgICB2YXIgdGh1bWIgPSBhbmd1bGFyLmVsZW1lbnQoZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKCcubWQtdGh1bWInKSk7XG4gICAgdmFyIHRodW1iVGV4dCA9IGFuZ3VsYXIuZWxlbWVudChlbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoJy5tZC10aHVtYi10ZXh0JykpO1xuICAgIHZhciB0aHVtYkNvbnRhaW5lciA9IHRodW1iLnBhcmVudCgpO1xuICAgIHZhciB0cmFja0NvbnRhaW5lciA9IGFuZ3VsYXIuZWxlbWVudChlbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoJy5tZC10cmFjay1jb250YWluZXInKSk7XG4gICAgdmFyIGFjdGl2ZVRyYWNrID0gYW5ndWxhci5lbGVtZW50KGVsZW1lbnRbMF0ucXVlcnlTZWxlY3RvcignLm1kLXRyYWNrLWZpbGwnKSk7XG4gICAgdmFyIHRpY2tDb250YWluZXIgPSBhbmd1bGFyLmVsZW1lbnQoZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKCcubWQtdHJhY2stdGlja3MnKSk7XG4gICAgdmFyIHRocm90dGxlZFJlZnJlc2hEaW1lbnNpb25zID0gJG1kVXRpbC50aHJvdHRsZShyZWZyZXNoU2xpZGVyRGltZW5zaW9ucywgNTAwMCk7XG5cbiAgICAvLyBEZWZhdWx0IHZhbHVlcywgb3ZlcnJpZGFibGUgYnkgYXR0cnNcbiAgICBhdHRyLm1pbiA/IGF0dHIuJG9ic2VydmUoJ21pbicsIHVwZGF0ZU1pbikgOiB1cGRhdGVNaW4oMCk7XG4gICAgYXR0ci5tYXggPyBhdHRyLiRvYnNlcnZlKCdtYXgnLCB1cGRhdGVNYXgpIDogdXBkYXRlTWF4KDEwMCk7XG4gICAgYXR0ci5zdGVwID8gYXR0ci4kb2JzZXJ2ZSgnc3RlcCcsIHVwZGF0ZVN0ZXApIDogdXBkYXRlU3RlcCgxKTtcblxuICAgIC8vIFdlIGhhdmUgdG8gbWFudWFsbHkgc3RvcCB0aGUgJHdhdGNoIG9uIG5nRGlzYWJsZWQgYmVjYXVzZSBpdCBleGlzdHNcbiAgICAvLyBvbiB0aGUgcGFyZW50IHNjb3BlLCBhbmQgd29uJ3QgYmUgYXV0b21hdGljYWxseSBkZXN0cm95ZWQgd2hlblxuICAgIC8vIHRoZSBjb21wb25lbnQgaXMgZGVzdHJveWVkLlxuICAgIHZhciBzdG9wRGlzYWJsZWRXYXRjaCA9IGFuZ3VsYXIubm9vcDtcbiAgICBpZiAoYXR0ci5uZ0Rpc2FibGVkKSB7XG4gICAgICBzdG9wRGlzYWJsZWRXYXRjaCA9IHNjb3BlLiRwYXJlbnQuJHdhdGNoKGF0dHIubmdEaXNhYmxlZCwgdXBkYXRlQXJpYURpc2FibGVkKTtcbiAgICB9XG5cbiAgICAkbWRBcmlhLmV4cGVjdChlbGVtZW50LCAnYXJpYS1sYWJlbCcpO1xuXG4gICAgJG1kR2VzdHVyZS5yZWdpc3RlcihlbGVtZW50LCAnZHJhZycpO1xuICAgIGVsZW1lbnRcbiAgICAgIC5hdHRyKHtcbiAgICAgICAgdGFiSW5kZXg6IDAsXG4gICAgICAgIHJvbGU6ICdzbGlkZXInXG4gICAgICB9KVxuICAgICAgLm9uKCdrZXlkb3duJywga2V5ZG93bkxpc3RlbmVyKVxuICAgICAgLm9uKCckbWQucHJlc3Nkb3duJywgb25QcmVzc0Rvd24pXG4gICAgICAub24oJyRtZC5wcmVzc3VwJywgb25QcmVzc1VwKVxuICAgICAgLm9uKCckbWQuZHJhZ3N0YXJ0Jywgb25EcmFnU3RhcnQpXG4gICAgICAub24oJyRtZC5kcmFnJywgb25EcmFnKVxuICAgICAgLm9uKCckbWQuZHJhZ2VuZCcsIG9uRHJhZ0VuZCk7XG5cbiAgICAvLyBPbiByZXNpemUsIHJlY2FsY3VsYXRlIHRoZSBzbGlkZXIncyBkaW1lbnNpb25zIGFuZCByZS1yZW5kZXJcbiAgICBmdW5jdGlvbiB1cGRhdGVBbGwoKSB7XG4gICAgICByZWZyZXNoU2xpZGVyRGltZW5zaW9ucygpO1xuICAgICAgbmdNb2RlbFJlbmRlcigpO1xuICAgICAgcmVkcmF3VGlja3MoKTtcbiAgICB9XG4gICAgc2V0VGltZW91dCh1cGRhdGVBbGwpO1xuXG4gICAgdmFyIGRlYm91bmNlZFVwZGF0ZUFsbCA9ICQkckFGLnRocm90dGxlKHVwZGF0ZUFsbCk7XG4gICAgYW5ndWxhci5lbGVtZW50KCR3aW5kb3cpLm9uKCdyZXNpemUnLCBkZWJvdW5jZWRVcGRhdGVBbGwpO1xuXG4gICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgYW5ndWxhci5lbGVtZW50KCR3aW5kb3cpLm9mZigncmVzaXplJywgZGVib3VuY2VkVXBkYXRlQWxsKTtcbiAgICAgIHN0b3BEaXNhYmxlZFdhdGNoKCk7XG4gICAgfSk7XG5cbiAgICBuZ01vZGVsQ3RybC4kcmVuZGVyID0gbmdNb2RlbFJlbmRlcjtcbiAgICBuZ01vZGVsQ3RybC4kdmlld0NoYW5nZUxpc3RlbmVycy5wdXNoKG5nTW9kZWxSZW5kZXIpO1xuICAgIG5nTW9kZWxDdHJsLiRmb3JtYXR0ZXJzLnB1c2gobWluTWF4VmFsaWRhdG9yKTtcbiAgICBuZ01vZGVsQ3RybC4kZm9ybWF0dGVycy5wdXNoKHN0ZXBWYWxpZGF0b3IpO1xuXG4gICAgLyoqXG4gICAgICogQXR0cmlidXRlc1xuICAgICAqL1xuICAgIHZhciBtaW47XG4gICAgdmFyIG1heDtcbiAgICB2YXIgc3RlcDtcbiAgICBmdW5jdGlvbiB1cGRhdGVNaW4odmFsdWUpIHtcbiAgICAgIG1pbiA9IHBhcnNlRmxvYXQodmFsdWUpO1xuICAgICAgZWxlbWVudC5hdHRyKCdhcmlhLXZhbHVlbWluJywgdmFsdWUpO1xuICAgICAgdXBkYXRlQWxsKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHVwZGF0ZU1heCh2YWx1ZSkge1xuICAgICAgbWF4ID0gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gICAgICBlbGVtZW50LmF0dHIoJ2FyaWEtdmFsdWVtYXgnLCB2YWx1ZSk7XG4gICAgICB1cGRhdGVBbGwoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdXBkYXRlU3RlcCh2YWx1ZSkge1xuICAgICAgc3RlcCA9IHBhcnNlRmxvYXQodmFsdWUpO1xuICAgICAgcmVkcmF3VGlja3MoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdXBkYXRlQXJpYURpc2FibGVkKGlzRGlzYWJsZWQpIHtcbiAgICAgIGVsZW1lbnQuYXR0cignYXJpYS1kaXNhYmxlZCcsICEhaXNEaXNhYmxlZCk7XG4gICAgfVxuXG4gICAgLy8gRHJhdyB0aGUgdGlja3Mgd2l0aCBjYW52YXMuXG4gICAgLy8gVGhlIGFsdGVybmF0aXZlIHRvIGRyYXdpbmcgdGlja3Mgd2l0aCBjYW52YXMgaXMgdG8gZHJhdyBvbmUgZWxlbWVudCBmb3IgZWFjaCB0aWNrLFxuICAgIC8vIHdoaWNoIGNvdWxkIHF1aWNrbHkgYmVjb21lIGEgcGVyZm9ybWFuY2UgYm90dGxlbmVjay5cbiAgICB2YXIgdGlja0NhbnZhcywgdGlja0N0eDtcbiAgICBmdW5jdGlvbiByZWRyYXdUaWNrcygpIHtcbiAgICAgIGlmICghYW5ndWxhci5pc0RlZmluZWQoYXR0ci5tZERpc2NyZXRlKSkgcmV0dXJuO1xuXG4gICAgICB2YXIgbnVtU3RlcHMgPSBNYXRoLmZsb29yKCAobWF4IC0gbWluKSAvIHN0ZXAgKTtcbiAgICAgIGlmICghdGlja0NhbnZhcykge1xuICAgICAgICB2YXIgdHJhY2tUaWNrc1N0eWxlID0gJHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRpY2tDb250YWluZXJbMF0pO1xuICAgICAgICB0aWNrQ2FudmFzID0gYW5ndWxhci5lbGVtZW50KCc8Y2FudmFzIHN0eWxlPVwicG9zaXRpb246YWJzb2x1dGU7XCI+Jyk7XG4gICAgICAgIHRpY2tDdHggPSB0aWNrQ2FudmFzWzBdLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgIHRpY2tDdHguZmlsbFN0eWxlID0gdHJhY2tUaWNrc1N0eWxlLmJhY2tncm91bmRDb2xvciB8fCAnYmxhY2snO1xuICAgICAgICB0aWNrQ29udGFpbmVyLmFwcGVuZCh0aWNrQ2FudmFzKTtcbiAgICAgIH1cbiAgICAgIHZhciBkaW1lbnNpb25zID0gZ2V0U2xpZGVyRGltZW5zaW9ucygpO1xuICAgICAgdGlja0NhbnZhc1swXS53aWR0aCA9IGRpbWVuc2lvbnMud2lkdGg7XG4gICAgICB0aWNrQ2FudmFzWzBdLmhlaWdodCA9IGRpbWVuc2lvbnMuaGVpZ2h0O1xuXG4gICAgICB2YXIgZGlzdGFuY2U7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8PSBudW1TdGVwczsgaSsrKSB7XG4gICAgICAgIGRpc3RhbmNlID0gTWF0aC5mbG9vcihkaW1lbnNpb25zLndpZHRoICogKGkgLyBudW1TdGVwcykpO1xuICAgICAgICB0aWNrQ3R4LmZpbGxSZWN0KGRpc3RhbmNlIC0gMSwgMCwgMiwgZGltZW5zaW9ucy5oZWlnaHQpO1xuICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogUmVmcmVzaGluZyBEaW1lbnNpb25zXG4gICAgICovXG4gICAgdmFyIHNsaWRlckRpbWVuc2lvbnMgPSB7fTtcbiAgICByZWZyZXNoU2xpZGVyRGltZW5zaW9ucygpO1xuICAgIGZ1bmN0aW9uIHJlZnJlc2hTbGlkZXJEaW1lbnNpb25zKCkge1xuICAgICAgc2xpZGVyRGltZW5zaW9ucyA9IHRyYWNrQ29udGFpbmVyWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRTbGlkZXJEaW1lbnNpb25zKCkge1xuICAgICAgdGhyb3R0bGVkUmVmcmVzaERpbWVuc2lvbnMoKTtcbiAgICAgIHJldHVybiBzbGlkZXJEaW1lbnNpb25zO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGxlZnQvcmlnaHQgYXJyb3cgbGlzdGVuZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBrZXlkb3duTGlzdGVuZXIoZXYpIHtcbiAgICAgIGlmKGVsZW1lbnRbMF0uaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNoYW5nZUFtb3VudDtcbiAgICAgIGlmIChldi5rZXlDb2RlID09PSAkbWRDb25zdGFudC5LRVlfQ09ERS5MRUZUX0FSUk9XKSB7XG4gICAgICAgIGNoYW5nZUFtb3VudCA9IC1zdGVwO1xuICAgICAgfSBlbHNlIGlmIChldi5rZXlDb2RlID09PSAkbWRDb25zdGFudC5LRVlfQ09ERS5SSUdIVF9BUlJPVykge1xuICAgICAgICBjaGFuZ2VBbW91bnQgPSBzdGVwO1xuICAgICAgfVxuICAgICAgaWYgKGNoYW5nZUFtb3VudCkge1xuICAgICAgICBpZiAoZXYubWV0YUtleSB8fCBldi5jdHJsS2V5IHx8IGV2LmFsdEtleSkge1xuICAgICAgICAgIGNoYW5nZUFtb3VudCAqPSA0O1xuICAgICAgICB9XG4gICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBzY29wZS4kZXZhbEFzeW5jKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNldE1vZGVsVmFsdWUobmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSArIGNoYW5nZUFtb3VudCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIG5nTW9kZWwgc2V0dGVycyBhbmQgdmFsaWRhdG9yc1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldE1vZGVsVmFsdWUodmFsdWUpIHtcbiAgICAgIG5nTW9kZWxDdHJsLiRzZXRWaWV3VmFsdWUoIG1pbk1heFZhbGlkYXRvcihzdGVwVmFsaWRhdG9yKHZhbHVlKSkgKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbmdNb2RlbFJlbmRlcigpIHtcbiAgICAgIGlmIChpc05hTihuZ01vZGVsQ3RybC4kdmlld1ZhbHVlKSkge1xuICAgICAgICBuZ01vZGVsQ3RybC4kdmlld1ZhbHVlID0gbmdNb2RlbEN0cmwuJG1vZGVsVmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBwZXJjZW50ID0gKG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUgLSBtaW4pIC8gKG1heCAtIG1pbik7XG4gICAgICBzY29wZS5tb2RlbFZhbHVlID0gbmdNb2RlbEN0cmwuJHZpZXdWYWx1ZTtcbiAgICAgIGVsZW1lbnQuYXR0cignYXJpYS12YWx1ZW5vdycsIG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUpO1xuICAgICAgc2V0U2xpZGVyUGVyY2VudChwZXJjZW50KTtcbiAgICAgIHRodW1iVGV4dC50ZXh0KCBuZ01vZGVsQ3RybC4kdmlld1ZhbHVlICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWluTWF4VmFsaWRhdG9yKHZhbHVlKSB7XG4gICAgICBpZiAoYW5ndWxhci5pc051bWJlcih2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KG1pbiwgTWF0aC5taW4obWF4LCB2YWx1ZSkpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBzdGVwVmFsaWRhdG9yKHZhbHVlKSB7XG4gICAgICBpZiAoYW5ndWxhci5pc051bWJlcih2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHBlcmNlbnQgMC0xXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0U2xpZGVyUGVyY2VudChwZXJjZW50KSB7XG4gICAgICBhY3RpdmVUcmFjay5jc3MoJ3dpZHRoJywgKHBlcmNlbnQgKiAxMDApICsgJyUnKTtcbiAgICAgIHRodW1iQ29udGFpbmVyLmNzcyhcbiAgICAgICAgJG1kQ29uc3RhbnQuQ1NTLlRSQU5TRk9STSxcbiAgICAgICAgJ3RyYW5zbGF0ZTNkKCcgKyAocGVyY2VudCAqIDEwMCkgKyAnJSwwLDApJ1xuICAgICAgKTtcbiAgICAgIGVsZW1lbnQudG9nZ2xlQ2xhc3MoJ21kLW1pbicsIHBlcmNlbnQgPT09IDApO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogU2xpZGUgbGlzdGVuZXJzXG4gICAgICovXG4gICAgdmFyIGlzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICB2YXIgaXNEaXNjcmV0ZSA9IGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHIubWREaXNjcmV0ZSk7XG5cbiAgICBmdW5jdGlvbiBvblByZXNzRG93bihldikge1xuICAgICAgaWYgKGlzRGlzYWJsZWRHZXR0ZXIoKSkgcmV0dXJuO1xuXG4gICAgICBlbGVtZW50LmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICAgIGVsZW1lbnRbMF0uZm9jdXMoKTtcbiAgICAgIHJlZnJlc2hTbGlkZXJEaW1lbnNpb25zKCk7XG5cbiAgICAgIHZhciBleGFjdFZhbCA9IHBlcmNlbnRUb1ZhbHVlKCBwb3NpdGlvblRvUGVyY2VudCggZXYucG9pbnRlci54ICkpO1xuICAgICAgdmFyIGNsb3Nlc3RWYWwgPSBtaW5NYXhWYWxpZGF0b3IoIHN0ZXBWYWxpZGF0b3IoZXhhY3RWYWwpICk7XG4gICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldE1vZGVsVmFsdWUoIGNsb3Nlc3RWYWwgKTtcbiAgICAgICAgc2V0U2xpZGVyUGVyY2VudCggdmFsdWVUb1BlcmNlbnQoY2xvc2VzdFZhbCkpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uUHJlc3NVcChldikge1xuICAgICAgaWYgKGlzRGlzYWJsZWRHZXR0ZXIoKSkgcmV0dXJuO1xuXG4gICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKCdkcmFnZ2luZyBhY3RpdmUnKTtcblxuICAgICAgdmFyIGV4YWN0VmFsID0gcGVyY2VudFRvVmFsdWUoIHBvc2l0aW9uVG9QZXJjZW50KCBldi5wb2ludGVyLnggKSk7XG4gICAgICB2YXIgY2xvc2VzdFZhbCA9IG1pbk1heFZhbGlkYXRvciggc3RlcFZhbGlkYXRvcihleGFjdFZhbCkgKTtcbiAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgc2V0TW9kZWxWYWx1ZShjbG9zZXN0VmFsKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbkRyYWdTdGFydChldikge1xuICAgICAgaWYgKGlzRGlzYWJsZWRHZXR0ZXIoKSkgcmV0dXJuO1xuICAgICAgaXNEcmFnZ2luZyA9IHRydWU7XG4gICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgZWxlbWVudC5hZGRDbGFzcygnZHJhZ2dpbmcnKTtcbiAgICAgIHNldFNsaWRlckZyb21FdmVudChldik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uRHJhZyhldikge1xuICAgICAgaWYgKCFpc0RyYWdnaW5nKSByZXR1cm47XG4gICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHNldFNsaWRlckZyb21FdmVudChldik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uRHJhZ0VuZChldikge1xuICAgICAgaWYgKCFpc0RyYWdnaW5nKSByZXR1cm47XG4gICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGlzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRTbGlkZXJGcm9tRXZlbnQoZXYpIHtcbiAgICAgIC8vIFdoaWxlIHBhbm5pbmcgZGlzY3JldGUsIHVwZGF0ZSBvbmx5IHRoZVxuICAgICAgLy8gdmlzdWFsIHBvc2l0aW9uaW5nIGJ1dCBub3QgdGhlIG1vZGVsIHZhbHVlLlxuICAgICAgaWYgKCBpc0Rpc2NyZXRlICkgYWRqdXN0VGh1bWJQb3NpdGlvbiggZXYucG9pbnRlci54ICk7XG4gICAgICBlbHNlICAgICAgICAgICAgICBkb1NsaWRlKCBldi5wb2ludGVyLnggKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTbGlkZSB0aGUgVUkgYnkgY2hhbmdpbmcgdGhlIG1vZGVsIHZhbHVlXG4gICAgICogQHBhcmFtIHhcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkb1NsaWRlKCB4ICkge1xuICAgICAgc2NvcGUuJGV2YWxBc3luYyggZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldE1vZGVsVmFsdWUoIHBlcmNlbnRUb1ZhbHVlKCBwb3NpdGlvblRvUGVyY2VudCh4KSApKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNsaWRlIHRoZSBVSSB3aXRob3V0IGNoYW5naW5nIHRoZSBtb2RlbCAod2hpbGUgZHJhZ2dpbmcvcGFubmluZylcbiAgICAgKiBAcGFyYW0geFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkanVzdFRodW1iUG9zaXRpb24oIHggKSB7XG4gICAgICB2YXIgZXhhY3RWYWwgPSBwZXJjZW50VG9WYWx1ZSggcG9zaXRpb25Ub1BlcmNlbnQoIHggKSk7XG4gICAgICB2YXIgY2xvc2VzdFZhbCA9IG1pbk1heFZhbGlkYXRvciggc3RlcFZhbGlkYXRvcihleGFjdFZhbCkgKTtcbiAgICAgIHNldFNsaWRlclBlcmNlbnQoIHBvc2l0aW9uVG9QZXJjZW50KHgpICk7XG4gICAgICB0aHVtYlRleHQudGV4dCggY2xvc2VzdFZhbCApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnQgaG9yaXpvbnRhbCBwb3NpdGlvbiBvbiBzbGlkZXIgdG8gcGVyY2VudGFnZSB2YWx1ZSBvZiBvZmZzZXQgZnJvbSBiZWdpbm5pbmcuLi5cbiAgICAgKiBAcGFyYW0geFxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgICovXG4gICAgZnVuY3Rpb24gcG9zaXRpb25Ub1BlcmNlbnQoIHggKSB7XG4gICAgICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgKHggLSBzbGlkZXJEaW1lbnNpb25zLmxlZnQpIC8gKHNsaWRlckRpbWVuc2lvbnMud2lkdGgpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydCBwZXJjZW50YWdlIG9mZnNldCBvbiBzbGlkZSB0byBlcXVpdmFsZW50IG1vZGVsIHZhbHVlXG4gICAgICogQHBhcmFtIHBlcmNlbnRcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwZXJjZW50VG9WYWx1ZSggcGVyY2VudCApIHtcbiAgICAgIHJldHVybiAobWluICsgcGVyY2VudCAqIChtYXggLSBtaW4pKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB2YWx1ZVRvUGVyY2VudCggdmFsICkge1xuICAgICAgcmV0dXJuICh2YWwgLSBtaW4pLyhtYXggLSBtaW4pO1xuICAgIH1cbiAgfVxufVxuU2xpZGVyRGlyZWN0aXZlLiRpbmplY3QgPSBbXCIkJHJBRlwiLCBcIiR3aW5kb3dcIiwgXCIkbWRBcmlhXCIsIFwiJG1kVXRpbFwiLCBcIiRtZENvbnN0YW50XCIsIFwiJG1kVGhlbWluZ1wiLCBcIiRtZEdlc3R1cmVcIiwgXCIkcGFyc2VcIl07XG5cbn0pKCk7XG5cbi8qIVxuICogQW5ndWxhciBNYXRlcmlhbCBEZXNpZ25cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL21hdGVyaWFsXG4gKiBAbGljZW5zZSBNSVRcbiAqIHYwLjcuMVxuICovXG4oZnVuY3Rpb24oKSB7XG4ndXNlIHN0cmljdCc7XG5cbi8qXG4gKiBAbmdkb2MgbW9kdWxlXG4gKiBAbmFtZSBtYXRlcmlhbC5jb21wb25lbnRzLnN0aWNreVxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogU3RpY2t5IGVmZmVjdHMgZm9yIG1kXG4gKi9cblxuYW5ndWxhci5tb2R1bGUoJ21hdGVyaWFsLmNvbXBvbmVudHMuc3RpY2t5JywgW1xuICAnbWF0ZXJpYWwuY29yZScsXG4gICdtYXRlcmlhbC5jb21wb25lbnRzLmNvbnRlbnQnXG5dKVxuICAuZmFjdG9yeSgnJG1kU3RpY2t5JywgTWRTdGlja3kpO1xuXG4vKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRtZFN0aWNreVxuICogQG1vZHVsZSBtYXRlcmlhbC5jb21wb25lbnRzLnN0aWNreVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGAkbWRTdGlja3lgc2VydmljZSBwcm92aWRlcyBhIG1peGluIHRvIG1ha2UgZWxlbWVudHMgc3RpY2t5LlxuICpcbiAqIEByZXR1cm5zIEEgYCRtZFN0aWNreWAgZnVuY3Rpb24gdGhhdCB0YWtlcyB0aHJlZSBhcmd1bWVudHM6XG4gKiAgIC0gYHNjb3BlYFxuICogICAtIGBlbGVtZW50YDogVGhlIGVsZW1lbnQgdGhhdCB3aWxsIGJlICdzdGlja3knXG4gKiAgIC0gYGVsZW1lbnRDbG9uZWA6IEEgY2xvbmUgb2YgdGhlIGVsZW1lbnQsIHRoYXQgd2lsbCBiZSBzaG93blxuICogICAgIHdoZW4gdGhlIHVzZXIgc3RhcnRzIHNjcm9sbGluZyBwYXN0IHRoZSBvcmlnaW5hbCBlbGVtZW50LlxuICogICAgIElmIG5vdCBwcm92aWRlZCwgaXQgd2lsbCB1c2UgdGhlIHJlc3VsdCBvZiBgZWxlbWVudC5jbG9uZSgpYC5cbiAqL1xuXG5mdW5jdGlvbiBNZFN0aWNreSgkZG9jdW1lbnQsICRtZENvbnN0YW50LCAkY29tcGlsZSwgJCRyQUYsICRtZFV0aWwpIHtcblxuICB2YXIgYnJvd3NlclN0aWNreVN1cHBvcnQgPSBjaGVja1N0aWNreVN1cHBvcnQoKTtcblxuICAvKipcbiAgICogUmVnaXN0ZXJzIGFuIGVsZW1lbnQgYXMgc3RpY2t5LCB1c2VkIGludGVybmFsbHkgYnkgZGlyZWN0aXZlcyB0byByZWdpc3RlciB0aGVtc2VsdmVzXG4gICAqL1xuICByZXR1cm4gZnVuY3Rpb24gcmVnaXN0ZXJTdGlja3lFbGVtZW50KHNjb3BlLCBlbGVtZW50LCBzdGlja3lDbG9uZSkge1xuICAgIHZhciBjb250ZW50Q3RybCA9IGVsZW1lbnQuY29udHJvbGxlcignbWRDb250ZW50Jyk7XG4gICAgaWYgKCFjb250ZW50Q3RybCkgcmV0dXJuO1xuXG4gICAgaWYgKGJyb3dzZXJTdGlja3lTdXBwb3J0KSB7XG4gICAgICBlbGVtZW50LmNzcyh7XG4gICAgICAgIHBvc2l0aW9uOiBicm93c2VyU3RpY2t5U3VwcG9ydCxcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICAnei1pbmRleCc6IDJcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgJCRzdGlja3kgPSBjb250ZW50Q3RybC4kZWxlbWVudC5kYXRhKCckJHN0aWNreScpO1xuICAgICAgaWYgKCEkJHN0aWNreSkge1xuICAgICAgICAkJHN0aWNreSA9IHNldHVwU3RpY2t5KGNvbnRlbnRDdHJsKTtcbiAgICAgICAgY29udGVudEN0cmwuJGVsZW1lbnQuZGF0YSgnJCRzdGlja3knLCAkJHN0aWNreSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBkZXJlZ2lzdGVyID0gJCRzdGlja3kuYWRkKGVsZW1lbnQsIHN0aWNreUNsb25lIHx8IGVsZW1lbnQuY2xvbmUoKSk7XG4gICAgICBzY29wZS4kb24oJyRkZXN0cm95JywgZGVyZWdpc3Rlcik7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHNldHVwU3RpY2t5KGNvbnRlbnRDdHJsKSB7XG4gICAgdmFyIGNvbnRlbnRFbCA9IGNvbnRlbnRDdHJsLiRlbGVtZW50O1xuXG4gICAgLy8gUmVmcmVzaCBlbGVtZW50cyBpcyB2ZXJ5IGV4cGVuc2l2ZSwgc28gd2UgdXNlIHRoZSBkZWJvdW5jZWRcbiAgICAvLyB2ZXJzaW9uIHdoZW4gcG9zc2libGUuXG4gICAgdmFyIGRlYm91bmNlZFJlZnJlc2hFbGVtZW50cyA9ICQkckFGLnRocm90dGxlKHJlZnJlc2hFbGVtZW50cyk7XG5cbiAgICAvLyBzZXR1cEF1Z21lbnRlZFNjcm9sbEV2ZW50cyBnaXZlcyB1cyBgJHNjcm9sbHN0YXJ0YCBhbmQgYCRzY3JvbGxgLFxuICAgIC8vIG1vcmUgcmVsaWFibGUgdGhhbiBgc2Nyb2xsYCBvbiBhbmRyb2lkLlxuICAgIHNldHVwQXVnbWVudGVkU2Nyb2xsRXZlbnRzKGNvbnRlbnRFbCk7XG4gICAgY29udGVudEVsLm9uKCckc2Nyb2xsc3RhcnQnLCBkZWJvdW5jZWRSZWZyZXNoRWxlbWVudHMpO1xuICAgIGNvbnRlbnRFbC5vbignJHNjcm9sbCcsIG9uU2Nyb2xsKTtcblxuICAgIHZhciBzZWxmO1xuICAgIHZhciBzdGlja3lCYXNlb2Zmc2V0ID0gY29udGVudEVsLnByb3AoJ29mZnNldFRvcCcpO1xuICAgIHJldHVybiBzZWxmID0ge1xuICAgICAgcHJldjogbnVsbCxcbiAgICAgIGN1cnJlbnQ6IG51bGwsIC8vdGhlIGN1cnJlbnRseSBzdGlja2llZCBpdGVtXG4gICAgICBuZXh0OiBudWxsLFxuICAgICAgaXRlbXM6IFtdLFxuICAgICAgYWRkOiBhZGQsXG4gICAgICByZWZyZXNoRWxlbWVudHM6IHJlZnJlc2hFbGVtZW50c1xuICAgIH07XG5cbiAgICAvKioqKioqKioqKioqKioqXG4gICAgICogUHVibGljXG4gICAgICoqKioqKioqKioqKioqKi9cbiAgICAvLyBBZGQgYW4gZWxlbWVudCBhbmQgaXRzIHN0aWNreSBjbG9uZSB0byB0aGlzIGNvbnRlbnQncyBzdGlja3kgY29sbGVjdGlvblxuICAgIGZ1bmN0aW9uIGFkZChlbGVtZW50LCBzdGlja3lDbG9uZSkge1xuICAgICAgc3RpY2t5Q2xvbmUuYWRkQ2xhc3MoJ21kLXN0aWNreS1jbG9uZScpO1xuICAgICAgc3RpY2t5Q2xvbmUuY3NzKCd0b3AnLCBzdGlja3lCYXNlb2Zmc2V0ICsgJ3B4Jyk7XG5cbiAgICAgIHZhciBpdGVtID0ge1xuICAgICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgICBjbG9uZTogc3RpY2t5Q2xvbmVcbiAgICAgIH07XG4gICAgICBzZWxmLml0ZW1zLnB1c2goaXRlbSk7XG5cbiAgICAgIGNvbnRlbnRFbC5wYXJlbnQoKS5wcmVwZW5kKGl0ZW0uY2xvbmUpO1xuXG4gICAgICBkZWJvdW5jZWRSZWZyZXNoRWxlbWVudHMoKTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgICAgc2VsZi5pdGVtcy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgICAgaWYgKGl0ZW0uZWxlbWVudFswXSA9PT0gZWxlbWVudFswXSkge1xuICAgICAgICAgICAgc2VsZi5pdGVtcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgaXRlbS5jbG9uZS5yZW1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBkZWJvdW5jZWRSZWZyZXNoRWxlbWVudHMoKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVmcmVzaEVsZW1lbnRzKCkge1xuICAgICAgLy8gU29ydCBvdXIgY29sbGVjdGlvbiBvZiBlbGVtZW50cyBieSB0aGVpciBjdXJyZW50IHBvc2l0aW9uIGluIHRoZSBET00uXG4gICAgICAvLyBXZSBuZWVkIHRvIGRvIHRoaXMgYmVjYXVzZSBvdXIgZWxlbWVudHMnIG9yZGVyIG9mIGJlaW5nIGFkZGVkIG1heSBub3RcbiAgICAgIC8vIGJlIHRoZSBzYW1lIGFzIHRoZWlyIG9yZGVyIG9mIGRpc3BsYXkuXG4gICAgICBzZWxmLml0ZW1zLmZvckVhY2gocmVmcmVzaFBvc2l0aW9uKTtcbiAgICAgIHNlbGYuaXRlbXMgPSBzZWxmLml0ZW1zLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICByZXR1cm4gYS50b3AgPCBiLnRvcCA/IC0xIDogMTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBGaW5kIHdoaWNoIGl0ZW0gaW4gdGhlIGxpc3Qgc2hvdWxkIGJlIGFjdGl2ZSwgXG4gICAgICAvLyBiYXNlZCB1cG9uIHRoZSBjb250ZW50J3MgY3VycmVudCBzY3JvbGwgcG9zaXRpb25cbiAgICAgIHZhciBpdGVtO1xuICAgICAgdmFyIGN1cnJlbnRTY3JvbGxUb3AgPSBjb250ZW50RWwucHJvcCgnc2Nyb2xsVG9wJyk7XG4gICAgICBmb3IgKHZhciBpID0gc2VsZi5pdGVtcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBpZiAoY3VycmVudFNjcm9sbFRvcCA+IHNlbGYuaXRlbXNbaV0udG9wKSB7XG4gICAgICAgICAgaXRlbSA9IHNlbGYuaXRlbXNbaV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNldEN1cnJlbnRJdGVtKGl0ZW0pO1xuICAgIH1cblxuXG4gICAgLyoqKioqKioqKioqKioqKlxuICAgICAqIFByaXZhdGVcbiAgICAgKioqKioqKioqKioqKioqL1xuXG4gICAgLy8gRmluZCB0aGUgYHRvcGAgb2YgYW4gaXRlbSByZWxhdGl2ZSB0byB0aGUgY29udGVudCBlbGVtZW50LFxuICAgIC8vIGFuZCBhbHNvIHRoZSBoZWlnaHQuXG4gICAgZnVuY3Rpb24gcmVmcmVzaFBvc2l0aW9uKGl0ZW0pIHtcbiAgICAgIC8vIEZpbmQgdGhlIHRvcCBvZiBhbiBpdGVtIGJ5IGFkZGluZyB0byB0aGUgb2Zmc2V0SGVpZ2h0IHVudGlsIHdlIHJlYWNoIHRoZSBcbiAgICAgIC8vIGNvbnRlbnQgZWxlbWVudC5cbiAgICAgIHZhciBjdXJyZW50ID0gaXRlbS5lbGVtZW50WzBdO1xuICAgICAgaXRlbS50b3AgPSAwO1xuICAgICAgaXRlbS5sZWZ0ID0gMDtcbiAgICAgIHdoaWxlIChjdXJyZW50ICYmIGN1cnJlbnQgIT09IGNvbnRlbnRFbFswXSkge1xuICAgICAgICBpdGVtLnRvcCArPSBjdXJyZW50Lm9mZnNldFRvcDtcbiAgICAgICAgaXRlbS5sZWZ0ICs9IGN1cnJlbnQub2Zmc2V0TGVmdDtcbiAgICAgICAgY3VycmVudCA9IGN1cnJlbnQub2Zmc2V0UGFyZW50O1xuICAgICAgfVxuICAgICAgaXRlbS5oZWlnaHQgPSBpdGVtLmVsZW1lbnQucHJvcCgnb2Zmc2V0SGVpZ2h0Jyk7XG4gICAgICBpdGVtLmNsb25lLmNzcygnbWFyZ2luLWxlZnQnLCBpdGVtLmxlZnQgKyAncHgnKTtcbiAgICB9XG5cblxuICAgIC8vIEFzIHdlIHNjcm9sbCwgcHVzaCBpbiBhbmQgc2VsZWN0IHRoZSBjb3JyZWN0IHN0aWNreSBlbGVtZW50LlxuICAgIGZ1bmN0aW9uIG9uU2Nyb2xsKCkge1xuICAgICAgdmFyIHNjcm9sbFRvcCA9IGNvbnRlbnRFbC5wcm9wKCdzY3JvbGxUb3AnKTtcbiAgICAgIHZhciBpc1Njcm9sbGluZ0Rvd24gPSBzY3JvbGxUb3AgPiAob25TY3JvbGwucHJldlNjcm9sbFRvcCB8fCAwKTtcbiAgICAgIG9uU2Nyb2xsLnByZXZTY3JvbGxUb3AgPSBzY3JvbGxUb3A7XG5cbiAgICAgIC8vIEF0IHRoZSB0b3A/XG4gICAgICBpZiAoc2Nyb2xsVG9wID09PSAwKSB7XG4gICAgICAgIHNldEN1cnJlbnRJdGVtKG51bGwpO1xuXG4gICAgICAvLyBHb2luZyB0byBuZXh0IGl0ZW0/XG4gICAgICB9IGVsc2UgaWYgKGlzU2Nyb2xsaW5nRG93biAmJiBzZWxmLm5leHQpIHtcbiAgICAgICAgaWYgKHNlbGYubmV4dC50b3AgLSBzY3JvbGxUb3AgPD0gMCkge1xuICAgICAgICAgIC8vIFN0aWNreSB0aGUgbmV4dCBpdGVtIGlmIHdlJ3ZlIHNjcm9sbGVkIHBhc3QgaXRzIHBvc2l0aW9uLlxuICAgICAgICAgIHNldEN1cnJlbnRJdGVtKHNlbGYubmV4dCk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2VsZi5jdXJyZW50KSB7XG4gICAgICAgICAgLy8gUHVzaCB0aGUgY3VycmVudCBpdGVtIHVwIHdoZW4gd2UncmUgYWxtb3N0IGF0IHRoZSBuZXh0IGl0ZW0uXG4gICAgICAgICAgaWYgKHNlbGYubmV4dC50b3AgLSBzY3JvbGxUb3AgPD0gc2VsZi5uZXh0LmhlaWdodCkge1xuICAgICAgICAgICAgdHJhbnNsYXRlKHNlbGYuY3VycmVudCwgc2VsZi5uZXh0LnRvcCAtIHNlbGYubmV4dC5oZWlnaHQgLSBzY3JvbGxUb3ApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cmFuc2xhdGUoc2VsZi5jdXJyZW50LCBudWxsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAvLyBTY3JvbGxpbmcgdXAgd2l0aCBhIGN1cnJlbnQgc3RpY2t5IGl0ZW0/XG4gICAgICB9IGVsc2UgaWYgKCFpc1Njcm9sbGluZ0Rvd24gJiYgc2VsZi5jdXJyZW50KSB7XG4gICAgICAgIGlmIChzY3JvbGxUb3AgPCBzZWxmLmN1cnJlbnQudG9wKSB7XG4gICAgICAgICAgLy8gU3RpY2t5IHRoZSBwcmV2aW91cyBpdGVtIGlmIHdlJ3ZlIHNjcm9sbGVkIHVwIHBhc3RcbiAgICAgICAgICAvLyB0aGUgb3JpZ2luYWwgcG9zaXRpb24gb2YgdGhlIGN1cnJlbnRseSBzdGlja2llZCBpdGVtLlxuICAgICAgICAgIHNldEN1cnJlbnRJdGVtKHNlbGYucHJldik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2Nyb2xsaW5nIHVwLCBhbmQganVzdCBidW1waW5nIGludG8gdGhlIGl0ZW0gYWJvdmUgKGp1c3Qgc2V0IHRvIGN1cnJlbnQpP1xuICAgICAgICAvLyBJZiB3ZSBoYXZlIGEgbmV4dCBpdGVtIGJ1bXBpbmcgaW50byB0aGUgY3VycmVudCBpdGVtLCB0cmFuc2xhdGVcbiAgICAgICAgLy8gdGhlIGN1cnJlbnQgaXRlbSB1cCBmcm9tIHRoZSB0b3AgYXMgaXQgc2Nyb2xscyBpbnRvIHZpZXcuXG4gICAgICAgIGlmIChzZWxmLmN1cnJlbnQgJiYgc2VsZi5uZXh0KSB7XG4gICAgICAgICAgaWYgKHNjcm9sbFRvcCA+PSBzZWxmLm5leHQudG9wIC0gc2VsZi5jdXJyZW50LmhlaWdodCkge1xuICAgICAgICAgICAgdHJhbnNsYXRlKHNlbGYuY3VycmVudCwgc2VsZi5uZXh0LnRvcCAtIHNjcm9sbFRvcCAtIHNlbGYuY3VycmVudC5oZWlnaHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cmFuc2xhdGUoc2VsZi5jdXJyZW50LCBudWxsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgIFxuICAgZnVuY3Rpb24gc2V0Q3VycmVudEl0ZW0oaXRlbSkge1xuICAgICBpZiAoc2VsZi5jdXJyZW50ID09PSBpdGVtKSByZXR1cm47XG4gICAgIC8vIERlYWN0aXZhdGUgY3VycmVudGx5IGFjdGl2ZSBpdGVtXG4gICAgIGlmIChzZWxmLmN1cnJlbnQpIHtcbiAgICAgICB0cmFuc2xhdGUoc2VsZi5jdXJyZW50LCBudWxsKTtcbiAgICAgICBzZXRTdGlja3lTdGF0ZShzZWxmLmN1cnJlbnQsIG51bGwpO1xuICAgICB9XG5cbiAgICAgLy8gQWN0aXZhdGUgbmV3IGl0ZW0gaWYgZ2l2ZW5cbiAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICBzZXRTdGlja3lTdGF0ZShpdGVtLCAnYWN0aXZlJyk7XG4gICAgIH1cblxuICAgICBzZWxmLmN1cnJlbnQgPSBpdGVtO1xuICAgICB2YXIgaW5kZXggPSBzZWxmLml0ZW1zLmluZGV4T2YoaXRlbSk7XG4gICAgIC8vIElmIGluZGV4ID09PSAtMSwgaW5kZXggKyAxID0gMC4gSXQgd29ya3Mgb3V0LlxuICAgICBzZWxmLm5leHQgPSBzZWxmLml0ZW1zW2luZGV4ICsgMV07XG4gICAgIHNlbGYucHJldiA9IHNlbGYuaXRlbXNbaW5kZXggLSAxXTtcbiAgICAgc2V0U3RpY2t5U3RhdGUoc2VsZi5uZXh0LCAnbmV4dCcpO1xuICAgICBzZXRTdGlja3lTdGF0ZShzZWxmLnByZXYsICdwcmV2Jyk7XG4gICB9XG5cbiAgIGZ1bmN0aW9uIHNldFN0aWNreVN0YXRlKGl0ZW0sIHN0YXRlKSB7XG4gICAgIGlmICghaXRlbSB8fCBpdGVtLnN0YXRlID09PSBzdGF0ZSkgcmV0dXJuO1xuICAgICBpZiAoaXRlbS5zdGF0ZSkge1xuICAgICAgIGl0ZW0uY2xvbmUuYXR0cignc3RpY2t5LXByZXYtc3RhdGUnLCBpdGVtLnN0YXRlKTtcbiAgICAgICBpdGVtLmVsZW1lbnQuYXR0cignc3RpY2t5LXByZXYtc3RhdGUnLCBpdGVtLnN0YXRlKTtcbiAgICAgfVxuICAgICBpdGVtLmNsb25lLmF0dHIoJ3N0aWNreS1zdGF0ZScsIHN0YXRlKTtcbiAgICAgaXRlbS5lbGVtZW50LmF0dHIoJ3N0aWNreS1zdGF0ZScsIHN0YXRlKTtcbiAgICAgaXRlbS5zdGF0ZSA9IHN0YXRlO1xuICAgfVxuXG4gICBmdW5jdGlvbiB0cmFuc2xhdGUoaXRlbSwgYW1vdW50KSB7XG4gICAgIGlmICghaXRlbSkgcmV0dXJuO1xuICAgICBpZiAoYW1vdW50ID09PSBudWxsIHx8IGFtb3VudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgaWYgKGl0ZW0udHJhbnNsYXRlWSkge1xuICAgICAgICAgaXRlbS50cmFuc2xhdGVZID0gbnVsbDtcbiAgICAgICAgIGl0ZW0uY2xvbmUuY3NzKCRtZENvbnN0YW50LkNTUy5UUkFOU0ZPUk0sICcnKTtcbiAgICAgICB9XG4gICAgIH0gZWxzZSB7XG4gICAgICAgaXRlbS50cmFuc2xhdGVZID0gYW1vdW50O1xuICAgICAgIGl0ZW0uY2xvbmUuY3NzKFxuICAgICAgICAgJG1kQ29uc3RhbnQuQ1NTLlRSQU5TRk9STSwgXG4gICAgICAgICAndHJhbnNsYXRlM2QoJyArIGl0ZW0ubGVmdCArICdweCwnICsgYW1vdW50ICsgJ3B4LDApJ1xuICAgICAgICk7XG4gICAgIH1cbiAgIH1cbiAgfVxuXG4gIC8vIEZ1bmN0aW9uIHRvIGNoZWNrIGZvciBicm93c2VyIHN0aWNreSBzdXBwb3J0XG4gIGZ1bmN0aW9uIGNoZWNrU3RpY2t5U3VwcG9ydCgkZWwpIHtcbiAgICB2YXIgc3RpY2t5UHJvcDtcbiAgICB2YXIgdGVzdEVsID0gYW5ndWxhci5lbGVtZW50KCc8ZGl2PicpO1xuICAgICRkb2N1bWVudFswXS5ib2R5LmFwcGVuZENoaWxkKHRlc3RFbFswXSk7XG5cbiAgICB2YXIgc3RpY2t5UHJvcHMgPSBbJ3N0aWNreScsICctd2Via2l0LXN0aWNreSddO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RpY2t5UHJvcHMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHRlc3RFbC5jc3Moe3Bvc2l0aW9uOiBzdGlja3lQcm9wc1tpXSwgdG9wOiAwLCAnei1pbmRleCc6IDJ9KTtcbiAgICAgIGlmICh0ZXN0RWwuY3NzKCdwb3NpdGlvbicpID09IHN0aWNreVByb3BzW2ldKSB7XG4gICAgICAgIHN0aWNreVByb3AgPSBzdGlja3lQcm9wc1tpXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHRlc3RFbC5yZW1vdmUoKTtcbiAgICByZXR1cm4gc3RpY2t5UHJvcDtcbiAgfVxuXG4gIC8vIEFuZHJvaWQgNC40IGRvbid0IGFjY3VyYXRlbHkgZ2l2ZSBzY3JvbGwgZXZlbnRzLlxuICAvLyBUbyBmaXggdGhpcyBwcm9ibGVtLCB3ZSBzZXR1cCBhIGZha2Ugc2Nyb2xsIGV2ZW50LiBXZSBzYXk6XG4gIC8vID4gSWYgYSBzY3JvbGwgb3IgdG91Y2htb3ZlIGV2ZW50IGhhcyBoYXBwZW5lZCBpbiB0aGUgbGFzdCBERUxBWSBtaWxsaXNlY29uZHMsIFxuICAvLyAgIHRoZW4gc2VuZCBhIGAkc2Nyb2xsYCBldmVudCBldmVyeSBhbmltYXRpb25GcmFtZS5cbiAgLy8gQWRkaXRpb25hbGx5LCB3ZSBhZGQgJHNjcm9sbHN0YXJ0IGFuZCAkc2Nyb2xsZW5kIGV2ZW50cy5cbiAgZnVuY3Rpb24gc2V0dXBBdWdtZW50ZWRTY3JvbGxFdmVudHMoZWxlbWVudCkge1xuICAgIHZhciBTQ1JPTExfRU5EX0RFTEFZID0gMjAwO1xuICAgIHZhciBpc1Njcm9sbGluZztcbiAgICB2YXIgbGFzdFNjcm9sbFRpbWU7XG4gICAgZWxlbWVudC5vbignc2Nyb2xsIHRvdWNobW92ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCFpc1Njcm9sbGluZykge1xuICAgICAgICBpc1Njcm9sbGluZyA9IHRydWU7XG4gICAgICAgICQkckFGKGxvb3BTY3JvbGxFdmVudCk7XG4gICAgICAgIGVsZW1lbnQudHJpZ2dlckhhbmRsZXIoJyRzY3JvbGxzdGFydCcpO1xuICAgICAgfVxuICAgICAgZWxlbWVudC50cmlnZ2VySGFuZGxlcignJHNjcm9sbCcpO1xuICAgICAgbGFzdFNjcm9sbFRpbWUgPSArJG1kVXRpbC5ub3coKTtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGxvb3BTY3JvbGxFdmVudCgpIHtcbiAgICAgIGlmICgrJG1kVXRpbC5ub3coKSAtIGxhc3RTY3JvbGxUaW1lID4gU0NST0xMX0VORF9ERUxBWSkge1xuICAgICAgICBpc1Njcm9sbGluZyA9IGZhbHNlO1xuICAgICAgICBlbGVtZW50LnRyaWdnZXJIYW5kbGVyKCckc2Nyb2xsZW5kJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50LnRyaWdnZXJIYW5kbGVyKCckc2Nyb2xsJyk7XG4gICAgICAgICQkckFGKGxvb3BTY3JvbGxFdmVudCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbn1cbk1kU3RpY2t5LiRpbmplY3QgPSBbXCIkZG9jdW1lbnRcIiwgXCIkbWRDb25zdGFudFwiLCBcIiRjb21waWxlXCIsIFwiJCRyQUZcIiwgXCIkbWRVdGlsXCJdO1xufSkoKTtcblxuLyohXG4gKiBBbmd1bGFyIE1hdGVyaWFsIERlc2lnblxuICogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvbWF0ZXJpYWxcbiAqIEBsaWNlbnNlIE1JVFxuICogdjAuNy4xXG4gKi9cbihmdW5jdGlvbigpIHtcbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAbmdkb2MgbW9kdWxlXG4gKiBAbmFtZSBtYXRlcmlhbC5jb21wb25lbnRzLnN1YmhlYWRlclxuICogQGRlc2NyaXB0aW9uXG4gKiBTdWJIZWFkZXIgbW9kdWxlXG4gKlxuICogIFN1YmhlYWRlcnMgYXJlIHNwZWNpYWwgbGlzdCB0aWxlcyB0aGF0IGRlbGluZWF0ZSBkaXN0aW5jdCBzZWN0aW9ucyBvZiBhXG4gKiAgbGlzdCBvciBncmlkIGxpc3QgYW5kIGFyZSB0eXBpY2FsbHkgcmVsYXRlZCB0byB0aGUgY3VycmVudCBmaWx0ZXJpbmcgb3JcbiAqICBzb3J0aW5nIGNyaXRlcmlhLiBTdWJoZWFkZXIgdGlsZXMgYXJlIGVpdGhlciBkaXNwbGF5ZWQgaW5saW5lIHdpdGggdGlsZXMgb3JcbiAqICBjYW4gYmUgYXNzb2NpYXRlZCB3aXRoIGNvbnRlbnQsIGZvciBleGFtcGxlLCBpbiBhbiBhZGphY2VudCBjb2x1bW4uXG4gKlxuICogIFVwb24gc2Nyb2xsaW5nLCBzdWJoZWFkZXJzIHJlbWFpbiBwaW5uZWQgdG8gdGhlIHRvcCBvZiB0aGUgc2NyZWVuIGFuZCByZW1haW5cbiAqICBwaW5uZWQgdW50aWwgcHVzaGVkIG9uIG9yIG9mZiBzY3JlZW4gYnkgdGhlIG5leHQgc3ViaGVhZGVyLiBAc2VlIFtNYXRlcmlhbFxuICogIERlc2lnbiBTcGVjaWZpY2F0aW9uc10oaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9kZXNpZ24vc3BlYy9jb21wb25lbnRzL3N1YmhlYWRlcnMuaHRtbClcbiAqXG4gKiAgPiBUbyBpbXByb3ZlIHRoZSB2aXN1YWwgZ3JvdXBpbmcgb2YgY29udGVudCwgdXNlIHRoZSBzeXN0ZW0gY29sb3IgZm9yIHlvdXIgc3ViaGVhZGVycy5cbiAqXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdtYXRlcmlhbC5jb21wb25lbnRzLnN1YmhlYWRlcicsIFtcbiAgJ21hdGVyaWFsLmNvcmUnLFxuICAnbWF0ZXJpYWwuY29tcG9uZW50cy5zdGlja3knXG5dKVxuICAuZGlyZWN0aXZlKCdtZFN1YmhlYWRlcicsIE1kU3ViaGVhZGVyRGlyZWN0aXZlKTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBtZFN1YmhlYWRlclxuICogQG1vZHVsZSBtYXRlcmlhbC5jb21wb25lbnRzLnN1YmhlYWRlclxuICpcbiAqIEByZXN0cmljdCBFXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYDxtZC1zdWJoZWFkZXI+YCBkaXJlY3RpdmUgaXMgYSBzdWJoZWFkZXIgZm9yIGEgc2VjdGlvblxuICpcbiAqIEB1c2FnZVxuICogPGhsanMgbGFuZz1cImh0bWxcIj5cbiAqIDxtZC1zdWJoZWFkZXI+T25saW5lIEZyaWVuZHM8L21kLXN1YmhlYWRlcj5cbiAqIDwvaGxqcz5cbiAqL1xuXG5mdW5jdGlvbiBNZFN1YmhlYWRlckRpcmVjdGl2ZSgkbWRTdGlja3ksICRjb21waWxlLCAkbWRUaGVtaW5nKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICByZXBsYWNlOiB0cnVlLFxuICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgdGVtcGxhdGU6IFxuICAgICAgJzxoMiBjbGFzcz1cIm1kLXN1YmhlYWRlclwiPicgK1xuICAgICAgICAnPHNwYW4gY2xhc3M9XCJtZC1zdWJoZWFkZXItY29udGVudFwiPjwvc3Bhbj4nICtcbiAgICAgICc8L2gyPicsXG4gICAgY29tcGlsZTogZnVuY3Rpb24oZWxlbWVudCwgYXR0ciwgdHJhbnNjbHVkZSkge1xuICAgICAgdmFyIG91dGVySFRNTCA9IGVsZW1lbnRbMF0ub3V0ZXJIVE1MO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgICRtZFRoZW1pbmcoZWxlbWVudCk7XG4gICAgICAgIGZ1bmN0aW9uIGdldENvbnRlbnQoZWwpIHtcbiAgICAgICAgICByZXR1cm4gYW5ndWxhci5lbGVtZW50KGVsWzBdLnF1ZXJ5U2VsZWN0b3IoJy5tZC1zdWJoZWFkZXItY29udGVudCcpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRyYW5zY2x1ZGUgdGhlIHVzZXItZ2l2ZW4gY29udGVudHMgb2YgdGhlIHN1YmhlYWRlclxuICAgICAgICAvLyB0aGUgY29udmVudGlvbmFsIHdheS5cbiAgICAgICAgdHJhbnNjbHVkZShzY29wZSwgZnVuY3Rpb24oY2xvbmUpIHtcbiAgICAgICAgICBnZXRDb250ZW50KGVsZW1lbnQpLmFwcGVuZChjbG9uZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIENyZWF0ZSBhbm90aGVyIGNsb25lLCB0aGF0IHVzZXMgdGhlIG91dGVyIGFuZCBpbm5lciBjb250ZW50c1xuICAgICAgICAvLyBvZiB0aGUgZWxlbWVudCwgdGhhdCB3aWxsIGJlICdzdGlja2llZCcgYXMgdGhlIHVzZXIgc2Nyb2xscy5cbiAgICAgICAgdHJhbnNjbHVkZShzY29wZSwgZnVuY3Rpb24oY2xvbmUpIHtcbiAgICAgICAgICB2YXIgc3RpY2t5Q2xvbmUgPSAkY29tcGlsZShhbmd1bGFyLmVsZW1lbnQob3V0ZXJIVE1MKSkoc2NvcGUpO1xuICAgICAgICAgICRtZFRoZW1pbmcoc3RpY2t5Q2xvbmUpO1xuICAgICAgICAgIGdldENvbnRlbnQoc3RpY2t5Q2xvbmUpLmFwcGVuZChjbG9uZSk7XG4gICAgICAgICAgJG1kU3RpY2t5KHNjb3BlLCBlbGVtZW50LCBzdGlja3lDbG9uZSk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XG5NZFN1YmhlYWRlckRpcmVjdGl2ZS4kaW5qZWN0ID0gW1wiJG1kU3RpY2t5XCIsIFwiJGNvbXBpbGVcIiwgXCIkbWRUaGVtaW5nXCJdO1xufSkoKTtcblxuLyohXG4gKiBBbmd1bGFyIE1hdGVyaWFsIERlc2lnblxuICogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvbWF0ZXJpYWxcbiAqIEBsaWNlbnNlIE1JVFxuICogdjAuNy4xXG4gKi9cbihmdW5jdGlvbigpIHtcbid1c2Ugc3RyaWN0JztcblxuXG4vKipcbiAqIEBuZ2RvYyBtb2R1bGVcbiAqIEBuYW1lIG1hdGVyaWFsLmNvbXBvbmVudHMuc3dpcGVcbiAqIEBkZXNjcmlwdGlvbiBTd2lwZSBtb2R1bGUhXG4gKi9cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG1vZHVsZSBtYXRlcmlhbC5jb21wb25lbnRzLnN3aXBlXG4gKiBAbmFtZSBtZFN3aXBlTGVmdFxuICpcbiAqIEByZXN0cmljdCBBXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgbWQtc3dpcGUtbGVmdCBkaXJlY3RpdmVzIGFsbG93cyB5b3UgdG8gc3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igd2hlbiBhbiBlbGVtZW50IGlzIHN3aXBlZFxuICogbGVmdC5cbiAqXG4gKiBAdXNhZ2VcbiAqIDxobGpzIGxhbmc9XCJodG1sXCI+XG4gKiA8ZGl2IG1kLXN3aXBlLWxlZnQ9XCJvblN3aXBlTGVmdCgpXCI+U3dpcGUgbWUgbGVmdCE8L2Rpdj5cbiAqIDwvaGxqcz5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBtb2R1bGUgbWF0ZXJpYWwuY29tcG9uZW50cy5zd2lwZVxuICogQG5hbWUgbWRTd2lwZVJpZ2h0XG4gKlxuICogQHJlc3RyaWN0IEFcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBtZC1zd2lwZS1yaWdodCBkaXJlY3RpdmVzIGFsbG93cyB5b3UgdG8gc3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igd2hlbiBhbiBlbGVtZW50IGlzIHN3aXBlZFxuICogcmlnaHQuXG4gKlxuICogQHVzYWdlXG4gKiA8aGxqcyBsYW5nPVwiaHRtbFwiPlxuICogPGRpdiBtZC1zd2lwZS1yaWdodD1cIm9uU3dpcGVSaWdodCgpXCI+U3dpcGUgbWUgcmlnaHQhPC9kaXY+XG4gKiA8L2hsanM+XG4gKi9cblxudmFyIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdtYXRlcmlhbC5jb21wb25lbnRzLnN3aXBlJyxbXSk7XG5cblsnU3dpcGVMZWZ0JywgJ1N3aXBlUmlnaHQnXS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGRpcmVjdGl2ZU5hbWUgPSAnbWQnICsgbmFtZTtcbiAgdmFyIGV2ZW50TmFtZSA9ICckbWQuJyArIG5hbWUudG9Mb3dlckNhc2UoKTtcblxuICBtb2R1bGUuZGlyZWN0aXZlKGRpcmVjdGl2ZU5hbWUsIC8qQG5nSW5qZWN0Ki8gW1wiJHBhcnNlXCIsIGZ1bmN0aW9uKCRwYXJzZSkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgbGluazogcG9zdExpbmtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgIHZhciBmbiA9ICRwYXJzZShhdHRyW2RpcmVjdGl2ZU5hbWVdKTtcblxuICAgICAgZWxlbWVudC5vbihldmVudE5hbWUsIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICBmbihzY29wZSwge1xuICAgICAgICAgICAgJGV2ZW50OiBldlxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgfVxuICB9XSk7XG59KTtcblxufSkoKTtcblxuLyohXG4gKiBBbmd1bGFyIE1hdGVyaWFsIERlc2lnblxuICogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvbWF0ZXJpYWxcbiAqIEBsaWNlbnNlIE1JVFxuICogdjAuNy4xXG4gKi9cbihmdW5jdGlvbigpIHtcbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQG5nZG9jIG1vZHVsZVxuICogQG5hbWUgbWF0ZXJpYWwuY29tcG9uZW50cy5zd2l0Y2hcbiAqL1xuXG5hbmd1bGFyLm1vZHVsZSgnbWF0ZXJpYWwuY29tcG9uZW50cy5zd2l0Y2gnLCBbXG4gICdtYXRlcmlhbC5jb3JlJyxcbiAgJ21hdGVyaWFsLmNvbXBvbmVudHMuY2hlY2tib3gnXG5dKVxuICAuZGlyZWN0aXZlKCdtZFN3aXRjaCcsIE1kU3dpdGNoKTtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG1vZHVsZSBtYXRlcmlhbC5jb21wb25lbnRzLnN3aXRjaFxuICogQG5hbWUgbWRTd2l0Y2hcbiAqIEByZXN0cmljdCBFXG4gKlxuICogVGhlIHN3aXRjaCBkaXJlY3RpdmUgaXMgdXNlZCB2ZXJ5IG11Y2ggbGlrZSB0aGUgbm9ybWFsIFthbmd1bGFyIGNoZWNrYm94XShodHRwczovL2RvY3MuYW5ndWxhcmpzLm9yZy9hcGkvbmcvaW5wdXQvaW5wdXQlNUJjaGVja2JveCU1RCkuXG4gKlxuICogQXMgcGVyIHRoZSBbbWF0ZXJpYWwgZGVzaWduIHNwZWNdKGh0dHA6Ly93d3cuZ29vZ2xlLmNvbS9kZXNpZ24vc3BlYy9zdHlsZS9jb2xvci5odG1sI2NvbG9yLXVpLWNvbG9yLWFwcGxpY2F0aW9uKVxuICogdGhlIHN3aXRjaCBpcyBpbiB0aGUgYWNjZW50IGNvbG9yIGJ5IGRlZmF1bHQuIFRoZSBwcmltYXJ5IGNvbG9yIHBhbGV0dGUgbWF5IGJlIHVzZWQgd2l0aFxuICogdGhlIGBtZC1wcmltYXJ5YCBjbGFzcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmctbW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICogQHBhcmFtIHtleHByZXNzaW9uPX0gbmctdHJ1ZS12YWx1ZSBUaGUgdmFsdWUgdG8gd2hpY2ggdGhlIGV4cHJlc3Npb24gc2hvdWxkIGJlIHNldCB3aGVuIHNlbGVjdGVkLlxuICogQHBhcmFtIHtleHByZXNzaW9uPX0gbmctZmFsc2UtdmFsdWUgVGhlIHZhbHVlIHRvIHdoaWNoIHRoZSBleHByZXNzaW9uIHNob3VsZCBiZSBzZXQgd2hlbiBub3Qgc2VsZWN0ZWQuXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nLWNoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBtZC1uby1pbmsgVXNlIG9mIGF0dHJpYnV0ZSBpbmRpY2F0ZXMgdXNlIG9mIHJpcHBsZSBpbmsgZWZmZWN0cy5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gYXJpYS1sYWJlbCBQdWJsaXNoIHRoZSBidXR0b24gbGFiZWwgdXNlZCBieSBzY3JlZW4tcmVhZGVycyBmb3IgYWNjZXNzaWJpbGl0eS4gRGVmYXVsdHMgdG8gdGhlIHN3aXRjaCdzIHRleHQuXG4gKlxuICogQHVzYWdlXG4gKiA8aGxqcyBsYW5nPVwiaHRtbFwiPlxuICogPG1kLXN3aXRjaCBuZy1tb2RlbD1cImlzQWN0aXZlXCIgYXJpYS1sYWJlbD1cIkZpbmlzaGVkP1wiPlxuICogICBGaW5pc2hlZCA/XG4gKiA8L21kLXN3aXRjaD5cbiAqXG4gKiA8bWQtc3dpdGNoIG1kLW5vLWluayBuZy1tb2RlbD1cImhhc0lua1wiIGFyaWEtbGFiZWw9XCJObyBJbmsgRWZmZWN0c1wiPlxuICogICBObyBJbmsgRWZmZWN0c1xuICogPC9tZC1zd2l0Y2g+XG4gKlxuICogPG1kLXN3aXRjaCBuZy1kaXNhYmxlZD1cInRydWVcIiBuZy1tb2RlbD1cImlzRGlzYWJsZWRcIiBhcmlhLWxhYmVsPVwiRGlzYWJsZWRcIj5cbiAqICAgRGlzYWJsZWRcbiAqIDwvbWQtc3dpdGNoPlxuICpcbiAqIDwvaGxqcz5cbiAqL1xuZnVuY3Rpb24gTWRTd2l0Y2gobWRDaGVja2JveERpcmVjdGl2ZSwgJG1kVGhlbWluZywgJG1kVXRpbCwgJGRvY3VtZW50LCAkbWRDb25zdGFudCwgJHBhcnNlLCAkJHJBRiwgJG1kR2VzdHVyZSkge1xuICB2YXIgY2hlY2tib3hEaXJlY3RpdmUgPSBtZENoZWNrYm94RGlyZWN0aXZlWzBdO1xuXG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgIHRlbXBsYXRlOlxuICAgICAgJzxkaXYgY2xhc3M9XCJtZC1jb250YWluZXJcIj4nICtcbiAgICAgICAgJzxkaXYgY2xhc3M9XCJtZC1iYXJcIj48L2Rpdj4nICtcbiAgICAgICAgJzxkaXYgY2xhc3M9XCJtZC10aHVtYi1jb250YWluZXJcIj4nICtcbiAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1kLXRodW1iXCIgbWQtaW5rLXJpcHBsZSBtZC1pbmstcmlwcGxlLWNoZWNrYm94PjwvZGl2PicgK1xuICAgICAgICAnPC9kaXY+JytcbiAgICAgICc8L2Rpdj4nICtcbiAgICAgICc8ZGl2IG5nLXRyYW5zY2x1ZGUgY2xhc3M9XCJtZC1sYWJlbFwiPicgK1xuICAgICAgJzwvZGl2PicsXG4gICAgcmVxdWlyZTogJz9uZ01vZGVsJyxcbiAgICBjb21waWxlOiBjb21waWxlXG4gIH07XG5cbiAgZnVuY3Rpb24gY29tcGlsZShlbGVtZW50LCBhdHRyKSB7XG4gICAgdmFyIGNoZWNrYm94TGluayA9IGNoZWNrYm94RGlyZWN0aXZlLmNvbXBpbGUoZWxlbWVudCwgYXR0cik7XG4gICAgLy8gbm8gdHJhbnNpdGlvbiBvbiBpbml0aWFsIGxvYWRcbiAgICBlbGVtZW50LmFkZENsYXNzKCdtZC1kcmFnZ2luZycpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0ciwgbmdNb2RlbCkge1xuICAgICAgbmdNb2RlbCA9IG5nTW9kZWwgfHwgJG1kVXRpbC5mYWtlTmdNb2RlbCgpO1xuICAgICAgdmFyIGRpc2FibGVkR2V0dGVyID0gJHBhcnNlKGF0dHIubmdEaXNhYmxlZCk7XG4gICAgICB2YXIgdGh1bWJDb250YWluZXIgPSBhbmd1bGFyLmVsZW1lbnQoZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKCcubWQtdGh1bWItY29udGFpbmVyJykpO1xuICAgICAgdmFyIHN3aXRjaENvbnRhaW5lciA9IGFuZ3VsYXIuZWxlbWVudChlbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoJy5tZC1jb250YWluZXInKSk7XG5cbiAgICAgIC8vIG5vIHRyYW5zaXRpb24gb24gaW5pdGlhbCBsb2FkXG4gICAgICAkJHJBRihmdW5jdGlvbigpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcygnbWQtZHJhZ2dpbmcnKTtcbiAgICAgIH0pO1xuXG4gICAgICBjaGVja2JveExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIG5nTW9kZWwpO1xuXG4gICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQoYXR0ci5uZ0Rpc2FibGVkKSkge1xuICAgICAgICBzY29wZS4kd2F0Y2goZGlzYWJsZWRHZXR0ZXIsIGZ1bmN0aW9uKGlzRGlzYWJsZWQpIHtcbiAgICAgICAgICBlbGVtZW50LmF0dHIoJ3RhYmluZGV4JywgaXNEaXNhYmxlZCA/IC0xIDogMCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGVzZSBldmVudHMgYXJlIHRyaWdnZXJlZCBieSBzZXR1cCBkcmFnXG4gICAgICAkbWRHZXN0dXJlLnJlZ2lzdGVyKHN3aXRjaENvbnRhaW5lciwgJ2RyYWcnKTtcbiAgICAgIHN3aXRjaENvbnRhaW5lclxuICAgICAgICAub24oJyRtZC5kcmFnc3RhcnQnLCBvbkRyYWdTdGFydClcbiAgICAgICAgLm9uKCckbWQuZHJhZycsIG9uRHJhZylcbiAgICAgICAgLm9uKCckbWQuZHJhZ2VuZCcsIG9uRHJhZ0VuZCk7XG5cbiAgICAgIHZhciBkcmFnO1xuICAgICAgZnVuY3Rpb24gb25EcmFnU3RhcnQoZXYpIHtcbiAgICAgICAgLy8gRG9uJ3QgZ28gaWYgbmctZGlzYWJsZWQ9PT10cnVlXG4gICAgICAgIGlmIChkaXNhYmxlZEdldHRlcihzY29wZSkpIHJldHVybjtcbiAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgZWxlbWVudC5hZGRDbGFzcygnbWQtZHJhZ2dpbmcnKTtcbiAgICAgICAgZHJhZyA9IHtcbiAgICAgICAgICB3aWR0aDogdGh1bWJDb250YWluZXIucHJvcCgnb2Zmc2V0V2lkdGgnKVxuICAgICAgICB9O1xuICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKCd0cmFuc2l0aW9uJyk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG9uRHJhZyhldikge1xuICAgICAgICBpZiAoIWRyYWcpIHJldHVybjtcbiAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGV2LnNyY0V2ZW50ICYmIGV2LnNyY0V2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgdmFyIHBlcmNlbnQgPSBldi5wb2ludGVyLmRpc3RhbmNlWCAvIGRyYWcud2lkdGg7XG5cbiAgICAgICAgLy9pZiBjaGVja2VkLCBzdGFydCBmcm9tIHJpZ2h0LiBlbHNlLCBzdGFydCBmcm9tIGxlZnRcbiAgICAgICAgdmFyIHRyYW5zbGF0ZSA9IG5nTW9kZWwuJHZpZXdWYWx1ZSA/ICAxICsgcGVyY2VudCA6IHBlcmNlbnQ7XG4gICAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgc3dpdGNoIHN0YXlzIGluc2lkZSBpdHMgYm91bmRzLCAwLTElXG4gICAgICAgIHRyYW5zbGF0ZSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIHRyYW5zbGF0ZSkpO1xuXG4gICAgICAgIHRodW1iQ29udGFpbmVyLmNzcygkbWRDb25zdGFudC5DU1MuVFJBTlNGT1JNLCAndHJhbnNsYXRlM2QoJyArICgxMDAqdHJhbnNsYXRlKSArICclLDAsMCknKTtcbiAgICAgICAgZHJhZy50cmFuc2xhdGUgPSB0cmFuc2xhdGU7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG9uRHJhZ0VuZChldikge1xuICAgICAgICBpZiAoIWRyYWcpIHJldHVybjtcbiAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcygnbWQtZHJhZ2dpbmcnKTtcbiAgICAgICAgdGh1bWJDb250YWluZXIuY3NzKCRtZENvbnN0YW50LkNTUy5UUkFOU0ZPUk0sICcnKTtcblxuICAgICAgICAvLyBXZSBjaGFuZ2VkIGlmIHRoZXJlIGlzIG5vIGRpc3RhbmNlICh0aGlzIGlzIGEgY2xpY2sgYSBjbGljayksXG4gICAgICAgIC8vIG9yIGlmIHRoZSBkcmFnIGRpc3RhbmNlIGlzID41MCUgb2YgdGhlIHRvdGFsLlxuICAgICAgICB2YXIgaXNDaGFuZ2VkID0gbmdNb2RlbC4kdmlld1ZhbHVlID8gZHJhZy50cmFuc2xhdGUgPCAwLjUgOiBkcmFnLnRyYW5zbGF0ZSA+IDAuNTtcbiAgICAgICAgaWYgKGlzQ2hhbmdlZCkge1xuICAgICAgICAgIGFwcGx5TW9kZWxWYWx1ZSghbmdNb2RlbC4kdmlld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBkcmFnID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYXBwbHlNb2RlbFZhbHVlKG5ld1ZhbHVlKSB7XG4gICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICBuZ01vZGVsLiRzZXRWaWV3VmFsdWUobmV3VmFsdWUpO1xuICAgICAgICAgIG5nTW9kZWwuJHJlbmRlcigpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgIH07XG4gIH1cblxuXG59XG5NZFN3aXRjaC4kaW5qZWN0ID0gW1wibWRDaGVja2JveERpcmVjdGl2ZVwiLCBcIiRtZFRoZW1pbmdcIiwgXCIkbWRVdGlsXCIsIFwiJGRvY3VtZW50XCIsIFwiJG1kQ29uc3RhbnRcIiwgXCIkcGFyc2VcIiwgXCIkJHJBRlwiLCBcIiRtZEdlc3R1cmVcIl07XG5cbn0pKCk7XG5cbi8qIVxuICogQW5ndWxhciBNYXRlcmlhbCBEZXNpZ25cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL21hdGVyaWFsXG4gKiBAbGljZW5zZSBNSVRcbiAqIHYwLjcuMVxuICovXG4oZnVuY3Rpb24oKSB7XG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQG5nZG9jIG1vZHVsZVxuICogQG5hbWUgbWF0ZXJpYWwuY29tcG9uZW50cy50YWJzXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiAgVGFicywgY3JlYXRlZCB3aXRoIHRoZSBgPG1kLXRhYnM+YCBkaXJlY3RpdmUgcHJvdmlkZSAqdGFiYmVkKiBuYXZpZ2F0aW9uIHdpdGggZGlmZmVyZW50IHN0eWxlcy5cbiAqICBUaGUgVGFicyBjb21wb25lbnQgY29uc2lzdHMgb2YgY2xpY2thYmxlIHRhYnMgdGhhdCBhcmUgYWxpZ25lZCBob3Jpem9udGFsbHkgc2lkZS1ieS1zaWRlLlxuICpcbiAqICBGZWF0dXJlcyBpbmNsdWRlIHN1cHBvcnQgZm9yOlxuICpcbiAqICAtIHN0YXRpYyBvciBkeW5hbWljIHRhYnMsXG4gKiAgLSByZXNwb25zaXZlIGRlc2lnbnMsXG4gKiAgLSBhY2Nlc3NpYmlsaXR5IHN1cHBvcnQgKEFSSUEpLFxuICogIC0gdGFiIHBhZ2luYXRpb24sXG4gKiAgLSBleHRlcm5hbCBvciBpbnRlcm5hbCB0YWIgY29udGVudCxcbiAqICAtIGZvY3VzIGluZGljYXRvcnMgYW5kIGFycm93LWtleSBuYXZpZ2F0aW9ucyxcbiAqICAtIHByb2dyYW1tYXRpYyBsb29rdXAgYW5kIGFjY2VzcyB0byB0YWIgY29udHJvbGxlcnMsIGFuZFxuICogIC0gZHluYW1pYyB0cmFuc2l0aW9ucyB0aHJvdWdoIGRpZmZlcmVudCB0YWIgY29udGVudHMuXG4gKlxuICovXG4vKlxuICogQHNlZSBqcyBmb2xkZXIgZm9yIHRhYnMgaW1wbGVtZW50YXRpb25cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ21hdGVyaWFsLmNvbXBvbmVudHMudGFicycsIFtcbiAgJ21hdGVyaWFsLmNvcmUnXG5dKTtcbn0pKCk7XG5cbi8qIVxuICogQW5ndWxhciBNYXRlcmlhbCBEZXNpZ25cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL21hdGVyaWFsXG4gKiBAbGljZW5zZSBNSVRcbiAqIHYwLjcuMVxuICovXG4oZnVuY3Rpb24oKSB7XG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQG5nZG9jIG1vZHVsZVxuICogQG5hbWUgbWF0ZXJpYWwuY29tcG9uZW50cy50ZXh0RmllbGRcbiAqIEBkZXNjcmlwdGlvblxuICogRm9ybVxuICovXG5hbmd1bGFyLm1vZHVsZSgnbWF0ZXJpYWwuY29tcG9uZW50cy50ZXh0RmllbGQnLCBbXG4gICdtYXRlcmlhbC5jb3JlJ1xuXSlcbiAgLmRpcmVjdGl2ZSgnbWRJbnB1dEdyb3VwJywgbWRJbnB1dEdyb3VwRGlyZWN0aXZlKVxuICAuZGlyZWN0aXZlKCdtZElucHV0JywgbWRJbnB1dERpcmVjdGl2ZSlcbiAgLmRpcmVjdGl2ZSgnbWRUZXh0RmxvYXQnLCBtZFRleHRGbG9hdERpcmVjdGl2ZSk7XG5cblxuZnVuY3Rpb24gbWRUZXh0RmxvYXREaXJlY3RpdmUoJG1kVGhlbWluZywgJG1kVXRpbCwgJHBhcnNlLCAkbG9nKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICByZXBsYWNlOiB0cnVlLFxuICAgIHNjb3BlIDoge1xuICAgICAgZmlkIDogJ0A/bWRGaWQnLFxuICAgICAgbGFiZWwgOiAnQD8nLFxuICAgICAgdmFsdWUgOiAnPW5nTW9kZWwnXG4gICAgfSxcbiAgICBjb21waWxlIDogZnVuY3Rpb24oZWxlbWVudCwgYXR0cikge1xuXG4gICAgICAkbG9nLndhcm4oJzxtZC10ZXh0LWZsb2F0PiBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIGA8bWQtaW5wdXQtY29udGFpbmVyPmAgYW5kIGA8aW5wdXQ+YC4nICsgXG4gICAgICAgICAgICAgICAgJ01vcmUgaW5mb3JtYXRpb24gYXQgaHR0cDovL21hdGVyaWFsLmFuZ3VsYXJqcy5vcmcvIy9hcGkvbWF0ZXJpYWwuY29tcG9uZW50cy5pbnB1dC9kaXJlY3RpdmUvbWRJbnB1dENvbnRhaW5lcicpO1xuXG4gICAgICBpZiAoIGFuZ3VsYXIuaXNVbmRlZmluZWQoYXR0ci5tZEZpZCkgKSB7XG4gICAgICAgIGF0dHIubWRGaWQgPSAkbWRVdGlsLm5leHRVaWQoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcHJlIDogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgICAgdmFyIGRpc2FibGVkUGFyc2VkID0gJHBhcnNlKGF0dHJzLm5nRGlzYWJsZWQpO1xuICAgICAgICAgIHNjb3BlLmlzRGlzYWJsZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBkaXNhYmxlZFBhcnNlZChzY29wZS4kcGFyZW50KTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgc2NvcGUuaW5wdXRUeXBlID0gYXR0cnMudHlwZSB8fCBcInRleHRcIjtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdDogJG1kVGhlbWluZ1xuICAgICAgfTtcbiAgICB9LFxuICAgIHRlbXBsYXRlOlxuICAgICc8bWQtaW5wdXQtZ3JvdXAgdGFiaW5kZXg9XCItMVwiPicgK1xuICAgICcgPGxhYmVsIGZvcj1cInt7ZmlkfX1cIiA+e3tsYWJlbH19PC9sYWJlbD4nICtcbiAgICAnIDxtZC1pbnB1dCBpZD1cInt7ZmlkfX1cIiBuZy1kaXNhYmxlZD1cImlzRGlzYWJsZWQoKVwiIG5nLW1vZGVsPVwidmFsdWVcIiB0eXBlPVwie3tpbnB1dFR5cGV9fVwiPjwvbWQtaW5wdXQ+JyArXG4gICAgJzwvbWQtaW5wdXQtZ3JvdXA+J1xuICB9O1xufVxubWRUZXh0RmxvYXREaXJlY3RpdmUuJGluamVjdCA9IFtcIiRtZFRoZW1pbmdcIiwgXCIkbWRVdGlsXCIsIFwiJHBhcnNlXCIsIFwiJGxvZ1wiXTtcblxuZnVuY3Rpb24gbWRJbnB1dEdyb3VwRGlyZWN0aXZlKCRsb2cpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0NFJyxcbiAgICBjb250cm9sbGVyOiBbJyRlbGVtZW50JywgZnVuY3Rpb24oJGVsZW1lbnQpIHtcblxuICAgICAgJGxvZy53YXJuKCc8bWQtaW5wdXQtZ3JvdXA+IGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgYDxtZC1pbnB1dC1jb250YWluZXI+YCBhbmQgYDxpbnB1dD5gLicgKyBcbiAgICAgICAgICAgICAgICAnTW9yZSBpbmZvcm1hdGlvbiBhdCBodHRwOi8vbWF0ZXJpYWwuYW5ndWxhcmpzLm9yZy8jL2FwaS9tYXRlcmlhbC5jb21wb25lbnRzLmlucHV0L2RpcmVjdGl2ZS9tZElucHV0Q29udGFpbmVyJyk7XG4gICAgICB0aGlzLnNldEZvY3VzZWQgPSBmdW5jdGlvbihpc0ZvY3VzZWQpIHtcbiAgICAgICAgJGVsZW1lbnQudG9nZ2xlQ2xhc3MoJ21kLWlucHV0LWZvY3VzZWQnLCAhIWlzRm9jdXNlZCk7XG4gICAgICB9O1xuICAgICAgdGhpcy5zZXRIYXNWYWx1ZSA9IGZ1bmN0aW9uKGhhc1ZhbHVlKSB7XG4gICAgICAgICRlbGVtZW50LnRvZ2dsZUNsYXNzKCdtZC1pbnB1dC1oYXMtdmFsdWUnLCBoYXNWYWx1ZSApO1xuICAgICAgfTtcbiAgICB9XVxuICB9O1xuXG59XG5tZElucHV0R3JvdXBEaXJlY3RpdmUuJGluamVjdCA9IFtcIiRsb2dcIl07XG5cbmZ1bmN0aW9uIG1kSW5wdXREaXJlY3RpdmUoJG1kVXRpbCwgJGxvZykge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRScsXG4gICAgcmVwbGFjZTogdHJ1ZSxcbiAgICB0ZW1wbGF0ZTogJzxpbnB1dCA+JyxcbiAgICByZXF1aXJlOiBbJ14/bWRJbnB1dEdyb3VwJywgJz9uZ01vZGVsJ10sXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmxzKSB7XG4gICAgICBpZiAoICFjdHJsc1swXSApIHJldHVybjtcblxuICAgICAgJGxvZy53YXJuKCc8bWQtaW5wdXQ+IGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgYDxtZC1pbnB1dC1jb250YWluZXI+YCBhbmQgYDxpbnB1dD5gLicgKyBcbiAgICAgICAgICAgICAgICAnTW9yZSBpbmZvcm1hdGlvbiBhdCBodHRwOi8vbWF0ZXJpYWwuYW5ndWxhcmpzLm9yZy8jL2FwaS9tYXRlcmlhbC5jb21wb25lbnRzLmlucHV0L2RpcmVjdGl2ZS9tZElucHV0Q29udGFpbmVyJyk7XG5cbiAgICAgIHZhciBpbnB1dEdyb3VwQ3RybCA9IGN0cmxzWzBdO1xuICAgICAgdmFyIG5nTW9kZWxDdHJsID0gY3RybHNbMV07XG5cbiAgICAgIHNjb3BlLiR3YXRjaChzY29wZS5pc0Rpc2FibGVkLCBmdW5jdGlvbihpc0Rpc2FibGVkKSB7XG4gICAgICAgIGVsZW1lbnQuYXR0cignYXJpYS1kaXNhYmxlZCcsICEhaXNEaXNhYmxlZCk7XG4gICAgICAgIGVsZW1lbnQuYXR0cigndGFiaW5kZXgnLCAhIWlzRGlzYWJsZWQpO1xuICAgICAgfSk7XG4gICAgICBlbGVtZW50LmF0dHIoJ3R5cGUnLCBhdHRyLnR5cGUgfHwgZWxlbWVudC5wYXJlbnQoKS5hdHRyKCd0eXBlJykgfHwgXCJ0ZXh0XCIpO1xuXG4gICAgICAvLyBXaGVuIHRoZSBpbnB1dCB2YWx1ZSBjaGFuZ2VzLCBjaGVjayBpZiBpdCBcImhhc1wiIGEgdmFsdWUsIGFuZFxuICAgICAgLy8gc2V0IHRoZSBhcHByb3ByaWF0ZSBjbGFzcyBvbiB0aGUgaW5wdXQgZ3JvdXBcbiAgICAgIGlmIChuZ01vZGVsQ3RybCkge1xuICAgICAgICAvL0FkZCBhICRmb3JtYXR0ZXIgc28gd2UgZG9uJ3QgdXNlIHVwIHRoZSByZW5kZXIgZnVuY3Rpb25cbiAgICAgICAgbmdNb2RlbEN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIGlucHV0R3JvdXBDdHJsLnNldEhhc1ZhbHVlKCBpc05vdEVtcHR5KHZhbHVlKSApO1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGVsZW1lbnRcbiAgICAgICAgLm9uKCdpbnB1dCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlucHV0R3JvdXBDdHJsLnNldEhhc1ZhbHVlKCBpc05vdEVtcHR5KCkgKTtcbiAgICAgICAgfSlcbiAgICAgICAgLm9uKCdmb2N1cycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAvLyBXaGVuIHRoZSBpbnB1dCBmb2N1c2VzLCBhZGQgdGhlIGZvY3VzZWQgY2xhc3MgdG8gdGhlIGdyb3VwXG4gICAgICAgICAgaW5wdXRHcm91cEN0cmwuc2V0Rm9jdXNlZCh0cnVlKTtcbiAgICAgICAgfSlcbiAgICAgICAgLm9uKCdibHVyJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgIC8vIFdoZW4gdGhlIGlucHV0IGJsdXJzLCByZW1vdmUgdGhlIGZvY3VzZWQgY2xhc3MgZnJvbSB0aGUgZ3JvdXBcbiAgICAgICAgICBpbnB1dEdyb3VwQ3RybC5zZXRGb2N1c2VkKGZhbHNlKTtcbiAgICAgICAgICBpbnB1dEdyb3VwQ3RybC5zZXRIYXNWYWx1ZSggaXNOb3RFbXB0eSgpICk7XG4gICAgICAgIH0pO1xuXG4gICAgICBzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGlucHV0R3JvdXBDdHJsLnNldEZvY3VzZWQoZmFsc2UpO1xuICAgICAgICBpbnB1dEdyb3VwQ3RybC5zZXRIYXNWYWx1ZShmYWxzZSk7XG4gICAgICB9KTtcblxuXG4gICAgICBmdW5jdGlvbiBpc05vdEVtcHR5KHZhbHVlKSB7XG4gICAgICAgIHZhbHVlID0gYW5ndWxhci5pc1VuZGVmaW5lZCh2YWx1ZSkgPyBlbGVtZW50LnZhbCgpIDogdmFsdWU7XG4gICAgICAgIHJldHVybiAoYW5ndWxhci5pc0RlZmluZWQodmFsdWUpICYmICh2YWx1ZSE9PW51bGwpICYmXG4gICAgICAgICAgICAgICAodmFsdWUudG9TdHJpbmcoKS50cmltKCkgIT09IFwiXCIpKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5tZElucHV0RGlyZWN0aXZlLiRpbmplY3QgPSBbXCIkbWRVdGlsXCIsIFwiJGxvZ1wiXTtcblxufSkoKTtcblxuLyohXG4gKiBBbmd1bGFyIE1hdGVyaWFsIERlc2lnblxuICogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvbWF0ZXJpYWxcbiAqIEBsaWNlbnNlIE1JVFxuICogdjAuNy4xXG4gKi9cbihmdW5jdGlvbigpIHtcbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAbmdkb2MgbW9kdWxlXG4gKiBAbmFtZSBtYXRlcmlhbC5jb21wb25lbnRzLnRvYXN0XG4gKiBAZGVzY3JpcHRpb25cbiAqIFRvYXN0XG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdtYXRlcmlhbC5jb21wb25lbnRzLnRvYXN0JywgW1xuICAnbWF0ZXJpYWwuY29yZScsXG4gICdtYXRlcmlhbC5jb21wb25lbnRzLmJ1dHRvbidcbl0pXG4gIC5kaXJlY3RpdmUoJ21kVG9hc3QnLCBNZFRvYXN0RGlyZWN0aXZlKVxuICAucHJvdmlkZXIoJyRtZFRvYXN0JywgTWRUb2FzdFByb3ZpZGVyKTtcblxuZnVuY3Rpb24gTWRUb2FzdERpcmVjdGl2ZSgpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnXG4gIH07XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRtZFRvYXN0XG4gKiBAbW9kdWxlIG1hdGVyaWFsLmNvbXBvbmVudHMudG9hc3RcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIGAkbWRUb2FzdGAgaXMgYSBzZXJ2aWNlIHRvIGJ1aWxkIGEgdG9hc3Qgbm9maWNhdGlvbiBvbiBhbnkgcG9zaXRpb25cbiAqIG9uIHRoZSBzY3JlZW4gd2l0aCBhbiBvcHRpb25hbCBkdXJhdGlvbiwgYW5kIHByb3ZpZGVzIGEgc2ltcGxlIHByb21pc2UgQVBJLlxuICpcbiAqXG4gKiAjIyMgUmVzdHJpY3Rpb25zIG9uIGN1c3RvbSB0b2FzdHNcbiAqIC0gVGhlIHRvYXN0J3MgdGVtcGxhdGUgbXVzdCBoYXZlIGFuIG91dGVyIGA8bWQtdG9hc3Q+YCBlbGVtZW50LlxuICogLSBGb3IgYSB0b2FzdCBhY3Rpb24sIHVzZSBlbGVtZW50IHdpdGggY2xhc3MgYG1kLWFjdGlvbmAuXG4gKiAtIEFkZCB0aGUgY2xhc3MgYG1kLWNhcHN1bGVgIGZvciBjdXJ2ZWQgY29ybmVycy5cbiAqXG4gKiBAdXNhZ2VcbiAqIDxobGpzIGxhbmc9XCJodG1sXCI+XG4gKiA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJNeUNvbnRyb2xsZXJcIj5cbiAqICAgPG1kLWJ1dHRvbiBuZy1jbGljaz1cIm9wZW5Ub2FzdCgpXCI+XG4gKiAgICAgT3BlbiBhIFRvYXN0IVxuICogICA8L21kLWJ1dHRvbj5cbiAqIDwvZGl2PlxuICogPC9obGpzPlxuICpcbiAqIDxobGpzIGxhbmc9XCJqc1wiPlxuICogdmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbJ25nTWF0ZXJpYWwnXSk7XG4gKiBhcHAuY29udHJvbGxlcignTXlDb250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlLCAkbWRUb2FzdCkge1xuICogICAkc2NvcGUub3BlblRvYXN0ID0gZnVuY3Rpb24oJGV2ZW50KSB7XG4gKiAgICAgJG1kVG9hc3Quc2hvdygkbWRUb2FzdC5zaW1wbGUoKS5jb250ZW50KCdIZWxsbyEnKSk7XG4gKiAgICAgLy8gQ291bGQgYWxzbyBkbyAkbWRUb2FzdC5zaG93U2ltcGxlKCdIZWxsbycpO1xuICogICB9O1xuICogfSk7XG4gKiA8L2hsanM+XG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkbWRUb2FzdCNzaG93U2ltcGxlXG4gKiBcbiAqIEBkZXNjcmlwdGlvblxuICogQ29udmVuaWVuY2UgbWV0aG9kIHdoaWNoIGJ1aWxkcyBhbmQgc2hvd3MgYSBzaW1wbGUgdG9hc3QuXG4gKlxuICogQHJldHVybnMge3Byb21pc2V9IEEgcHJvbWlzZSB0aGF0IGNhbiBiZSByZXNvbHZlZCB3aXRoIGAkbWRUb2FzdC5oaWRlKClgIG9yXG4gKiByZWplY3RlZCB3aXRoIGAkbWRUb2FzdC5jYW5jZWwoKWAuXG4gKlxuICovXG5cbiAvKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRtZFRvYXN0I3NpbXBsZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQnVpbGRzIGEgcHJlY29uZmlndXJlZCB0b2FzdC5cbiAqXG4gKiBAcmV0dXJucyB7b2JqfSBhIGAkbWRUb2FzdFByZXNldGAgd2l0aCB0aGUgY2hhaW5hYmxlIGNvbmZpZ3VyYXRpb24gbWV0aG9kczpcbiAqXG4gKiAtICRtZFRvYXN0UHJlc2V0I2NvbnRlbnQoc3RyaW5nKSAtIHNldHMgdG9hc3QgY29udGVudCB0byBzdHJpbmdcbiAqIC0gJG1kVG9hc3RQcmVzZXQjYWN0aW9uKHN0cmluZykgLSBhZGRzIGFuIGFjdGlvbiBidXR0b24sIHdoaWNoIHJlc29sdmVzIHRoZSBwcm9taXNlIHJldHVybmVkIGZyb20gYHNob3coKWAgaWYgY2xpY2tlZC5cbiAqIC0gJG1kVG9hc3RQcmVzZXQjaGlnaGxpZ2h0QWN0aW9uKGJvb2xlYW4pIC0gc2V0cyBhY3Rpb24gYnV0dG9uIHRvIGJlIGhpZ2hsaWdodGVkXG4gKiAtICRtZFRvYXN0UHJlc2V0I2NhcHN1bGUoYm9vbGVhbikgLSBhZGRzICdtZC1jYXBzdWxlJyBjbGFzcyB0byB0aGUgdG9hc3QgKGN1cnZlZCBjb3JuZXJzKVxuICovXG5cbiAvKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRtZFRvYXN0I2J1aWxkXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDcmVhdGVzIGEgY3VzdG9tIGAkbWRUb2FzdFByZXNldGAgdGhhdCB5b3UgY2FuIGNvbmZpZ3VyZS5cbiAqXG4gKiBAcmV0dXJucyB7b2JqfSBhIGAkbWRUb2FzdFByZXNldGAgd2l0aCB0aGUgY2hhaW5hYmxlIGNvbmZpZ3VyYXRpb24gbWV0aG9kcyBmb3Igc2hvd3MnIG9wdGlvbnMgKHNlZSBiZWxvdykuXG4gKi9cblxuIC8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJG1kVG9hc3Qjc2hvd1xuICpcbiAqIEBkZXNjcmlwdGlvbiBTaG93cyB0aGUgdG9hc3QuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNPclByZXNldCBFaXRoZXIgcHJvdmlkZSBhbiBgJG1kVG9hc3RQcmVzZXRgIHJldHVybmVkIGZyb20gYHNpbXBsZSgpYFxuICogYW5kIGBidWlsZCgpYCwgb3IgYW4gb3B0aW9ucyBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIGB0ZW1wbGF0ZVVybGAgLSBge3N0cmluZz19YDogVGhlIHVybCBvZiBhbiBodG1sIHRlbXBsYXRlIGZpbGUgdGhhdCB3aWxsXG4gKiAgICAgYmUgdXNlZCBhcyB0aGUgY29udGVudCBvZiB0aGUgdG9hc3QuIFJlc3RyaWN0aW9uczogdGhlIHRlbXBsYXRlIG11c3RcbiAqICAgICBoYXZlIGFuIG91dGVyIGBtZC10b2FzdGAgZWxlbWVudC5cbiAqICAgLSBgdGVtcGxhdGVgIC0gYHtzdHJpbmc9fWA6IFNhbWUgYXMgdGVtcGxhdGVVcmwsIGV4Y2VwdCB0aGlzIGlzIGFuIGFjdHVhbFxuICogICAgIHRlbXBsYXRlIHN0cmluZy5cbiAqICAgLSBgaGlkZURlbGF5YCAtIGB7bnVtYmVyPX1gOiBIb3cgbWFueSBtaWxsaXNlY29uZHMgdGhlIHRvYXN0IHNob3VsZCBzdGF5XG4gKiAgICAgYWN0aXZlIGJlZm9yZSBhdXRvbWF0aWNhbGx5IGNsb3NpbmcuICBTZXQgdG8gMCBvciBmYWxzZSB0byBoYXZlIHRoZSB0b2FzdCBzdGF5IG9wZW4gdW50aWxcbiAqICAgICBjbG9zZWQgbWFudWFsbHkuIERlZmF1bHQ6IDMwMDAuXG4gKiAgIC0gYHBvc2l0aW9uYCAtIGB7c3RyaW5nPX1gOiBXaGVyZSB0byBwbGFjZSB0aGUgdG9hc3QuIEF2YWlsYWJsZTogYW55IGNvbWJpbmF0aW9uXG4gKiAgICAgb2YgJ2JvdHRvbScsICdsZWZ0JywgJ3RvcCcsICdyaWdodCcsICdmaXQnLiBEZWZhdWx0OiAnYm90dG9tIGxlZnQnLlxuICogICAtIGBjb250cm9sbGVyYCAtIGB7c3RyaW5nPX1gOiBUaGUgY29udHJvbGxlciB0byBhc3NvY2lhdGUgd2l0aCB0aGlzIHRvYXN0LlxuICogICAgIFRoZSBjb250cm9sbGVyIHdpbGwgYmUgaW5qZWN0ZWQgdGhlIGxvY2FsIGAkaGlkZVRvYXN0YCwgd2hpY2ggaXMgYSBmdW5jdGlvblxuICogICAgIHVzZWQgdG8gaGlkZSB0aGUgdG9hc3QuXG4gKiAgIC0gYGxvY2Fsc2AgLSBge3N0cmluZz19YDogQW4gb2JqZWN0IGNvbnRhaW5pbmcga2V5L3ZhbHVlIHBhaXJzLiBUaGUga2V5cyB3aWxsXG4gKiAgICAgYmUgdXNlZCBhcyBuYW1lcyBvZiB2YWx1ZXMgdG8gaW5qZWN0IGludG8gdGhlIGNvbnRyb2xsZXIuIEZvciBleGFtcGxlLFxuICogICAgIGBsb2NhbHM6IHt0aHJlZTogM31gIHdvdWxkIGluamVjdCBgdGhyZWVgIGludG8gdGhlIGNvbnRyb2xsZXIgd2l0aCB0aGUgdmFsdWVcbiAqICAgICBvZiAzLlxuICogICAtIGByZXNvbHZlYCAtIGB7b2JqZWN0PX1gOiBTaW1pbGFyIHRvIGxvY2FscywgZXhjZXB0IGl0IHRha2VzIHByb21pc2VzIGFzIHZhbHVlc1xuICogICAgIGFuZCB0aGUgdG9hc3Qgd2lsbCBub3Qgb3BlbiB1bnRpbCB0aGUgcHJvbWlzZXMgcmVzb2x2ZS5cbiAqICAgLSBgY29udHJvbGxlckFzYCAtIGB7c3RyaW5nPX1gOiBBbiBhbGlhcyB0byBhc3NpZ24gdGhlIGNvbnRyb2xsZXIgdG8gb24gdGhlIHNjb3BlLlxuICogICAtIGBwYXJlbnRgIC0gYHtlbGVtZW50PX1gOiBUaGUgZWxlbWVudCB0byBhcHBlbmQgdGhlIHRvYXN0IHRvLiBEZWZhdWx0cyB0byBhcHBlbmRpbmdcbiAqICAgICB0byB0aGUgcm9vdCBlbGVtZW50IG9mIHRoZSBhcHBsaWNhdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7cHJvbWlzZX0gQSBwcm9taXNlIHRoYXQgY2FuIGJlIHJlc29sdmVkIHdpdGggYCRtZFRvYXN0LmhpZGUoKWAgb3JcbiAqIHJlamVjdGVkIHdpdGggYCRtZFRvYXN0LmNhbmNlbCgpYC5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRtZFRvYXN0I2hpZGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEhpZGUgYW4gZXhpc3RpbmcgdG9hc3QgYW5kIHJlc29sdmUgdGhlIHByb21pc2UgcmV0dXJuZWQgZnJvbSBgJG1kVG9hc3Quc2hvdygpYC5cbiAqXG4gKiBAcGFyYW0geyo9fSByZXNwb25zZSBBbiBhcmd1bWVudCBmb3IgdGhlIHJlc29sdmVkIHByb21pc2UuXG4gKlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJG1kVG9hc3QjY2FuY2VsXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBIaWRlIHRoZSBleGlzdGluZyB0b2FzdCBhbmQgcmVqZWN0IHRoZSBwcm9taXNlIHJldHVybmVkIGZyb21cbiAqIGAkbWRUb2FzdC5zaG93KClgLlxuICpcbiAqIEBwYXJhbSB7Kj19IHJlc3BvbnNlIEFuIGFyZ3VtZW50IGZvciB0aGUgcmVqZWN0ZWQgcHJvbWlzZS5cbiAqXG4gKi9cblxuZnVuY3Rpb24gTWRUb2FzdFByb3ZpZGVyKCQkaW50ZXJpbUVsZW1lbnRQcm92aWRlcikge1xuXG4gIHRvYXN0RGVmYXVsdE9wdGlvbnMuJGluamVjdCA9IFtcIiR0aW1lb3V0XCIsIFwiJGFuaW1hdGVcIiwgXCIkbWRUaGVtaW5nXCIsIFwiJG1kVG9hc3RcIl07XG4gIHJldHVybiAkJGludGVyaW1FbGVtZW50UHJvdmlkZXIoJyRtZFRvYXN0JylcbiAgICAuc2V0RGVmYXVsdHMoe1xuICAgICAgbWV0aG9kczogWydwb3NpdGlvbicsICdoaWRlRGVsYXknLCAnY2Fwc3VsZSddLFxuICAgICAgb3B0aW9uczogdG9hc3REZWZhdWx0T3B0aW9uc1xuICAgIH0pXG4gICAgLmFkZFByZXNldCgnc2ltcGxlJywge1xuICAgICAgYXJnT3B0aW9uOiAnY29udGVudCcsXG4gICAgICBtZXRob2RzOiBbJ2NvbnRlbnQnLCAnYWN0aW9uJywgJ2hpZ2hsaWdodEFjdGlvbiddLFxuICAgICAgb3B0aW9uczogLyogQG5nSW5qZWN0ICovIFtcIiRtZFRvYXN0XCIsIGZ1bmN0aW9uKCRtZFRvYXN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdGVtcGxhdGU6IFtcbiAgICAgICAgICAgICc8bWQtdG9hc3QgbmctY2xhc3M9XCJ7XFwnbWQtY2Fwc3VsZVxcJzogdG9hc3QuY2Fwc3VsZX1cIj4nLFxuICAgICAgICAgICAgICAnPHNwYW4gZmxleD57eyB0b2FzdC5jb250ZW50IH19PC9zcGFuPicsXG4gICAgICAgICAgICAgICc8bWQtYnV0dG9uIGNsYXNzPVwibWQtYWN0aW9uXCIgbmctaWY9XCJ0b2FzdC5hY3Rpb25cIiBuZy1jbGljaz1cInRvYXN0LnJlc29sdmUoKVwiIG5nLWNsYXNzPVwie1xcJ21kLWhpZ2hsaWdodFxcJzogdG9hc3QuaGlnaGxpZ2h0QWN0aW9ufVwiPicsXG4gICAgICAgICAgICAgICAgJ3t7IHRvYXN0LmFjdGlvbiB9fScsXG4gICAgICAgICAgICAgICc8L21kLWJ1dHRvbj4nLFxuICAgICAgICAgICAgJzwvbWQtdG9hc3Q+J1xuICAgICAgICAgIF0uam9pbignJyksXG4gICAgICAgICAgY29udHJvbGxlcjogZnVuY3Rpb24gbWRUb2FzdEN0cmwoKSB7XG4gICAgICAgICAgICB0aGlzLnJlc29sdmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgJG1kVG9hc3QuaGlkZSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3RvYXN0JyxcbiAgICAgICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlXG4gICAgICAgIH07XG4gICAgICB9XVxuICAgIH0pO1xuXG4gIC8qIEBuZ0luamVjdCAqL1xuICBmdW5jdGlvbiB0b2FzdERlZmF1bHRPcHRpb25zKCR0aW1lb3V0LCAkYW5pbWF0ZSwgJG1kVGhlbWluZywgJG1kVG9hc3QpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb25TaG93OiBvblNob3csXG4gICAgICBvblJlbW92ZTogb25SZW1vdmUsXG4gICAgICBwb3NpdGlvbjogJ2JvdHRvbSBsZWZ0JyxcbiAgICAgIHRoZW1hYmxlOiB0cnVlLFxuICAgICAgaGlkZURlbGF5OiAzMDAwXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIG9uU2hvdyhzY29wZSwgZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgLy8gJ3RvcCBsZWZ0JyAtPiAnbWQtdG9wIG1kLWxlZnQnXG4gICAgICBlbGVtZW50LmFkZENsYXNzKG9wdGlvbnMucG9zaXRpb24uc3BsaXQoJyAnKS5tYXAoZnVuY3Rpb24ocG9zKSB7XG4gICAgICAgIHJldHVybiAnbWQtJyArIHBvcztcbiAgICAgIH0pLmpvaW4oJyAnKSk7XG4gICAgICBvcHRpb25zLnBhcmVudC5hZGRDbGFzcyh0b2FzdE9wZW5DbGFzcyhvcHRpb25zLnBvc2l0aW9uKSk7XG5cbiAgICAgIG9wdGlvbnMub25Td2lwZSA9IGZ1bmN0aW9uKGV2LCBnZXN0dXJlKSB7XG4gICAgICAgIC8vQWRkIHN3aXBlbGVmdC9zd2lwZXJpZ2h0IGNsYXNzIHRvIGVsZW1lbnQgc28gaXQgY2FuIGFuaW1hdGUgY29ycmVjdGx5XG4gICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoJ21kLScgKyBldi50eXBlLnJlcGxhY2UoJyRtZC4nLCcnKSk7XG4gICAgICAgICR0aW1lb3V0KCRtZFRvYXN0LmNhbmNlbCk7XG4gICAgICB9O1xuICAgICAgZWxlbWVudC5vbignJG1kLnN3aXBlbGVmdCAkbWQuc3dpcGVyaWdodCcsIG9wdGlvbnMub25Td2lwZSk7XG4gICAgICByZXR1cm4gJGFuaW1hdGUuZW50ZXIoZWxlbWVudCwgb3B0aW9ucy5wYXJlbnQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uUmVtb3ZlKHNjb3BlLCBlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICBlbGVtZW50Lm9mZignJG1kLnN3aXBlbGVmdCAkbWQuc3dpcGVyaWdodCcsIG9wdGlvbnMub25Td2lwZSk7XG4gICAgICBvcHRpb25zLnBhcmVudC5yZW1vdmVDbGFzcyh0b2FzdE9wZW5DbGFzcyhvcHRpb25zLnBvc2l0aW9uKSk7XG4gICAgICByZXR1cm4gJGFuaW1hdGUubGVhdmUoZWxlbWVudCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9hc3RPcGVuQ2xhc3MocG9zaXRpb24pIHtcbiAgICAgIHJldHVybiAnbWQtdG9hc3Qtb3Blbi0nICtcbiAgICAgICAgKHBvc2l0aW9uLmluZGV4T2YoJ3RvcCcpID4gLTEgPyAndG9wJyA6ICdib3R0b20nKTtcbiAgICB9XG4gIH1cblxufVxuTWRUb2FzdFByb3ZpZGVyLiRpbmplY3QgPSBbXCIkJGludGVyaW1FbGVtZW50UHJvdmlkZXJcIl07XG5cbn0pKCk7XG5cbi8qIVxuICogQW5ndWxhciBNYXRlcmlhbCBEZXNpZ25cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL21hdGVyaWFsXG4gKiBAbGljZW5zZSBNSVRcbiAqIHYwLjcuMVxuICovXG4oZnVuY3Rpb24oKSB7XG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQG5nZG9jIG1vZHVsZVxuICogQG5hbWUgbWF0ZXJpYWwuY29tcG9uZW50cy50b29sYmFyXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdtYXRlcmlhbC5jb21wb25lbnRzLnRvb2xiYXInLCBbXG4gICdtYXRlcmlhbC5jb3JlJyxcbiAgJ21hdGVyaWFsLmNvbXBvbmVudHMuY29udGVudCdcbl0pXG4gIC5kaXJlY3RpdmUoJ21kVG9vbGJhcicsIG1kVG9vbGJhckRpcmVjdGl2ZSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbWRUb29sYmFyXG4gKiBAbW9kdWxlIG1hdGVyaWFsLmNvbXBvbmVudHMudG9vbGJhclxuICogQHJlc3RyaWN0IEVcbiAqIEBkZXNjcmlwdGlvblxuICogYG1kLXRvb2xiYXJgIGlzIHVzZWQgdG8gcGxhY2UgYSB0b29sYmFyIGluIHlvdXIgYXBwLlxuICpcbiAqIFRvb2xiYXJzIGFyZSB1c3VhbGx5IHVzZWQgYWJvdmUgYSBjb250ZW50IGFyZWEgdG8gZGlzcGxheSB0aGUgdGl0bGUgb2YgdGhlXG4gKiBjdXJyZW50IHBhZ2UsIGFuZCBzaG93IHJlbGV2YW50IGFjdGlvbiBidXR0b25zIGZvciB0aGF0IHBhZ2UuXG4gKlxuICogWW91IGNhbiBjaGFuZ2UgdGhlIGhlaWdodCBvZiB0aGUgdG9vbGJhciBieSBhZGRpbmcgZWl0aGVyIHRoZVxuICogYG1kLW1lZGl1bS10YWxsYCBvciBgbWQtdGFsbGAgY2xhc3MgdG8gdGhlIHRvb2xiYXIuXG4gKlxuICogQHVzYWdlXG4gKiA8aGxqcyBsYW5nPVwiaHRtbFwiPlxuICogPGRpdiBsYXlvdXQ9XCJjb2x1bW5cIiBsYXlvdXQtZmlsbD5cbiAqICAgPG1kLXRvb2xiYXI+XG4gKlxuICogICAgIDxkaXYgY2xhc3M9XCJtZC10b29sYmFyLXRvb2xzXCI+XG4gKiAgICAgICA8c3Bhbj5NeSBBcHAncyBUaXRsZTwvc3Bhbj5cbiAqXG4gKiAgICAgICA8IS0tIGZpbGwgdXAgdGhlIHNwYWNlIGJldHdlZW4gbGVmdCBhbmQgcmlnaHQgYXJlYSAtLT5cbiAqICAgICAgIDxzcGFuIGZsZXg+PC9zcGFuPlxuICpcbiAqICAgICAgIDxtZC1idXR0b24+XG4gKiAgICAgICAgIFJpZ2h0IEJhciBCdXR0b25cbiAqICAgICAgIDwvbWQtYnV0dG9uPlxuICogICAgIDwvZGl2PlxuICpcbiAqICAgPC9tZC10b29sYmFyPlxuICogICA8bWQtY29udGVudD5cbiAqICAgICBIZWxsbyFcbiAqICAgPC9tZC1jb250ZW50PlxuICogPC9kaXY+XG4gKiA8L2hsanM+XG4gKlxuICogQHBhcmFtIHtib29sZWFuPX0gbWQtc2Nyb2xsLXNocmluayBXaGV0aGVyIHRoZSBoZWFkZXIgc2hvdWxkIHNocmluayBhd2F5IGFzXG4gKiB0aGUgdXNlciBzY3JvbGxzIGRvd24sIGFuZCByZXZlYWwgaXRzZWxmIGFzIHRoZSB1c2VyIHNjcm9sbHMgdXAuXG4gKiBOb3RlOiBmb3Igc2Nyb2xsU2hyaW5rIHRvIHdvcmssIHRoZSB0b29sYmFyIG11c3QgYmUgYSBzaWJsaW5nIG9mIGFcbiAqIGBtZC1jb250ZW50YCBlbGVtZW50LCBwbGFjZWQgYmVmb3JlIGl0LiBTZWUgdGhlIHNjcm9sbCBzaHJpbmsgZGVtby5cbiAqXG4gKlxuICogQHBhcmFtIHtudW1iZXI9fSBtZC1zaHJpbmstc3BlZWQtZmFjdG9yIEhvdyBtdWNoIHRvIGNoYW5nZSB0aGUgc3BlZWQgb2YgdGhlIHRvb2xiYXInc1xuICogc2hyaW5raW5nIGJ5LiBGb3IgZXhhbXBsZSwgaWYgMC4yNSBpcyBnaXZlbiB0aGVuIHRoZSB0b29sYmFyIHdpbGwgc2hyaW5rXG4gKiBhdCBvbmUgZm91cnRoIHRoZSByYXRlIGF0IHdoaWNoIHRoZSB1c2VyIHNjcm9sbHMgZG93bi4gRGVmYXVsdCAwLjUuXG4gKi9cbmZ1bmN0aW9uIG1kVG9vbGJhckRpcmVjdGl2ZSgkJHJBRiwgJG1kQ29uc3RhbnQsICRtZFV0aWwsICRtZFRoZW1pbmcpIHtcblxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRScsXG4gICAgY29udHJvbGxlcjogYW5ndWxhci5ub29wLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAkbWRUaGVtaW5nKGVsZW1lbnQpO1xuXG4gICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQoYXR0ci5tZFNjcm9sbFNocmluaykpIHtcbiAgICAgICAgc2V0dXBTY3JvbGxTaHJpbmsoKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2V0dXBTY3JvbGxTaHJpbmsoKSB7XG4gICAgICAgIC8vIEN1cnJlbnQgXCJ5XCIgcG9zaXRpb24gb2Ygc2Nyb2xsXG4gICAgICAgIHZhciB5ID0gMDtcbiAgICAgICAgLy8gU3RvcmUgdGhlIGxhc3Qgc2Nyb2xsIHRvcCBwb3NpdGlvblxuICAgICAgICB2YXIgcHJldlNjcm9sbFRvcCA9IDA7XG5cbiAgICAgICAgdmFyIHNocmlua1NwZWVkRmFjdG9yID0gYXR0ci5tZFNocmlua1NwZWVkRmFjdG9yIHx8IDAuNTtcblxuICAgICAgICB2YXIgdG9vbGJhckhlaWdodDtcbiAgICAgICAgdmFyIGNvbnRlbnRFbGVtZW50O1xuXG4gICAgICAgIHZhciBkZWJvdW5jZWRDb250ZW50U2Nyb2xsID0gJCRyQUYudGhyb3R0bGUob25Db250ZW50U2Nyb2xsKTtcbiAgICAgICAgdmFyIGRlYm91bmNlZFVwZGF0ZUhlaWdodCA9ICRtZFV0aWwuZGVib3VuY2UodXBkYXRlVG9vbGJhckhlaWdodCwgNSAqIDEwMDApO1xuXG4gICAgICAgIC8vIFdhaXQgZm9yICRtZENvbnRlbnRMb2FkZWQgZXZlbnQgZnJvbSBtZENvbnRlbnQgZGlyZWN0aXZlLlxuICAgICAgICAvLyBJZiB0aGUgbWRDb250ZW50IGVsZW1lbnQgaXMgYSBzaWJsaW5nIG9mIG91ciB0b29sYmFyLCBob29rIGl0IHVwXG4gICAgICAgIC8vIHRvIHNjcm9sbCBldmVudHMuXG4gICAgICAgIHNjb3BlLiRvbignJG1kQ29udGVudExvYWRlZCcsIG9uTWRDb250ZW50TG9hZCk7XG5cbiAgICAgICAgZnVuY3Rpb24gb25NZENvbnRlbnRMb2FkKCRldmVudCwgbmV3Q29udGVudEVsKSB7XG4gICAgICAgICAgLy8gVG9vbGJhciBhbmQgY29udGVudCBtdXN0IGJlIHNpYmxpbmdzXG4gICAgICAgICAgaWYgKGVsZW1lbnQucGFyZW50KClbMF0gPT09IG5ld0NvbnRlbnRFbC5wYXJlbnQoKVswXSkge1xuICAgICAgICAgICAgLy8gdW5ob29rIG9sZCBjb250ZW50IGV2ZW50IGxpc3RlbmVyIGlmIGV4aXN0c1xuICAgICAgICAgICAgaWYgKGNvbnRlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICAgIGNvbnRlbnRFbGVtZW50Lm9mZignc2Nyb2xsJywgZGVib3VuY2VkQ29udGVudFNjcm9sbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG5ld0NvbnRlbnRFbC5vbignc2Nyb2xsJywgZGVib3VuY2VkQ29udGVudFNjcm9sbCk7XG4gICAgICAgICAgICBuZXdDb250ZW50RWwuYXR0cignc2Nyb2xsLXNocmluaycsICd0cnVlJyk7XG5cbiAgICAgICAgICAgIGNvbnRlbnRFbGVtZW50ID0gbmV3Q29udGVudEVsO1xuICAgICAgICAgICAgJCRyQUYodXBkYXRlVG9vbGJhckhlaWdodCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlVG9vbGJhckhlaWdodCgpIHtcbiAgICAgICAgICB0b29sYmFySGVpZ2h0ID0gZWxlbWVudC5wcm9wKCdvZmZzZXRIZWlnaHQnKTtcbiAgICAgICAgICAvLyBBZGQgYSBuZWdhdGl2ZSBtYXJnaW4tdG9wIHRoZSBzaXplIG9mIHRoZSB0b29sYmFyIHRvIHRoZSBjb250ZW50IGVsLlxuICAgICAgICAgIC8vIFRoZSBjb250ZW50IHdpbGwgc3RhcnQgdHJhbnNmb3JtZWQgZG93biB0aGUgdG9vbGJhckhlaWdodCBhbW91bnQsXG4gICAgICAgICAgLy8gc28gZXZlcnl0aGluZyBsb29rcyBub3JtYWwuXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyBBcyB0aGUgdXNlciBzY3JvbGxzIGRvd24sIHRoZSBjb250ZW50IHdpbGwgYmUgdHJhbnNmb3JtZWQgdXAgc2xvd2x5XG4gICAgICAgICAgLy8gdG8gcHV0IHRoZSBjb250ZW50IHVuZGVybmVhdGggd2hlcmUgdGhlIHRvb2xiYXIgd2FzLlxuICAgICAgICAgIGNvbnRlbnRFbGVtZW50LmNzcyhcbiAgICAgICAgICAgICdtYXJnaW4tdG9wJyxcbiAgICAgICAgICAgICgtdG9vbGJhckhlaWdodCAqIHNocmlua1NwZWVkRmFjdG9yKSArICdweCdcbiAgICAgICAgICApO1xuICAgICAgICAgIG9uQ29udGVudFNjcm9sbCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb25Db250ZW50U2Nyb2xsKGUpIHtcbiAgICAgICAgICB2YXIgc2Nyb2xsVG9wID0gZSA/IGUudGFyZ2V0LnNjcm9sbFRvcCA6IHByZXZTY3JvbGxUb3A7XG5cbiAgICAgICAgICBkZWJvdW5jZWRVcGRhdGVIZWlnaHQoKTtcblxuICAgICAgICAgIHkgPSBNYXRoLm1pbihcbiAgICAgICAgICAgIHRvb2xiYXJIZWlnaHQgLyBzaHJpbmtTcGVlZEZhY3RvcixcbiAgICAgICAgICAgIE1hdGgubWF4KDAsIHkgKyBzY3JvbGxUb3AgLSBwcmV2U2Nyb2xsVG9wKVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBlbGVtZW50LmNzcyhcbiAgICAgICAgICAgICRtZENvbnN0YW50LkNTUy5UUkFOU0ZPUk0sXG4gICAgICAgICAgICAndHJhbnNsYXRlM2QoMCwnICsgKC15ICogc2hyaW5rU3BlZWRGYWN0b3IpICsgJ3B4LDApJ1xuICAgICAgICAgICk7XG4gICAgICAgICAgY29udGVudEVsZW1lbnQuY3NzKFxuICAgICAgICAgICAgJG1kQ29uc3RhbnQuQ1NTLlRSQU5TRk9STSxcbiAgICAgICAgICAgICd0cmFuc2xhdGUzZCgwLCcgKyAoKHRvb2xiYXJIZWlnaHQgLSB5KSAqIHNocmlua1NwZWVkRmFjdG9yKSArICdweCwwKSdcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgcHJldlNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcbiAgICAgICAgfVxuXG4gICAgICB9XG5cbiAgICB9XG4gIH07XG5cbn1cbm1kVG9vbGJhckRpcmVjdGl2ZS4kaW5qZWN0ID0gW1wiJCRyQUZcIiwgXCIkbWRDb25zdGFudFwiLCBcIiRtZFV0aWxcIiwgXCIkbWRUaGVtaW5nXCJdO1xufSkoKTtcblxuLyohXG4gKiBBbmd1bGFyIE1hdGVyaWFsIERlc2lnblxuICogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvbWF0ZXJpYWxcbiAqIEBsaWNlbnNlIE1JVFxuICogdjAuNy4xXG4gKi9cbihmdW5jdGlvbigpIHtcbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAbmdkb2MgbW9kdWxlXG4gKiBAbmFtZSBtYXRlcmlhbC5jb21wb25lbnRzLnRvb2x0aXBcbiAqL1xuYW5ndWxhci5tb2R1bGUoJ21hdGVyaWFsLmNvbXBvbmVudHMudG9vbHRpcCcsIFtcbiAgJ21hdGVyaWFsLmNvcmUnXG5dKVxuICAuZGlyZWN0aXZlKCdtZFRvb2x0aXAnLCBNZFRvb2x0aXBEaXJlY3RpdmUpO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG1kVG9vbHRpcFxuICogQG1vZHVsZSBtYXRlcmlhbC5jb21wb25lbnRzLnRvb2x0aXBcbiAqIEBkZXNjcmlwdGlvblxuICogVG9vbHRpcHMgYXJlIHVzZWQgdG8gZGVzY3JpYmUgZWxlbWVudHMgdGhhdCBhcmUgaW50ZXJhY3RpdmUgYW5kIHByaW1hcmlseSBncmFwaGljYWwgKG5vdCB0ZXh0dWFsKS5cbiAqXG4gKiBQbGFjZSBhIGA8bWQtdG9vbHRpcD5gIGFzIGEgY2hpbGQgb2YgdGhlIGVsZW1lbnQgaXQgZGVzY3JpYmVzLlxuICpcbiAqIEEgdG9vbHRpcCB3aWxsIGFjdGl2YXRlIHdoZW4gdGhlIHVzZXIgZm9jdXNlcywgaG92ZXJzIG92ZXIsIG9yIHRvdWNoZXMgdGhlIHBhcmVudC5cbiAqXG4gKiBAdXNhZ2VcbiAqIDxobGpzIGxhbmc9XCJodG1sXCI+XG4gKiA8bWQtaWNvbiBpY29uPVwiL2ltZy9pY29ucy9pY19wbGF5X2Fycm93XzI0cHguc3ZnXCI+XG4gKiAgIDxtZC10b29sdGlwPlxuICogICAgIFBsYXkgTXVzaWNcbiAqICAgPC9tZC10b29sdGlwPlxuICogPC9tZC1pY29uPlxuICogPC9obGpzPlxuICpcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbj19IG1kLXZpc2libGUgQm9vbGVhbiBib3VuZCB0byB3aGV0aGVyIHRoZSB0b29sdGlwIGlzXG4gKiBjdXJyZW50bHkgdmlzaWJsZS5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gbWQtZGVsYXkgSG93IG1hbnkgbWlsbGlzZWNvbmRzIHRvIHdhaXQgdG8gc2hvdyB0aGUgdG9vbHRpcCBhZnRlciB0aGUgdXNlciBmb2N1c2VzLCBob3ZlcnMsIG9yIHRvdWNoZXMgdGhlIHBhcmVudC4gRGVmYXVsdHMgdG8gNDAwbXMuXG4gKi9cbmZ1bmN0aW9uIE1kVG9vbHRpcERpcmVjdGl2ZSgkdGltZW91dCwgJHdpbmRvdywgJCRyQUYsICRkb2N1bWVudCwgJG1kVXRpbCwgJG1kVGhlbWluZywgJHJvb3RFbGVtZW50KSB7XG5cbiAgdmFyIFRPT0xUSVBfU0hPV19ERUxBWSA9IDQwMDtcbiAgdmFyIFRPT0xUSVBfV0lORE9XX0VER0VfU1BBQ0UgPSA4O1xuXG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgIHRlbXBsYXRlOlxuICAgICAgJzxkaXYgY2xhc3M9XCJtZC1iYWNrZ3JvdW5kXCI+PC9kaXY+JyArXG4gICAgICAnPGRpdiBjbGFzcz1cIm1kLWNvbnRlbnRcIiBuZy10cmFuc2NsdWRlPjwvZGl2PicsXG4gICAgc2NvcGU6IHtcbiAgICAgIHZpc2libGU6ICc9P21kVmlzaWJsZScsXG4gICAgICBkZWxheTogJz0/bWREZWxheSdcbiAgICB9LFxuICAgIGxpbms6IHBvc3RMaW5rXG4gIH07XG5cbiAgZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGNvbnRlbnRDdHJsKSB7XG4gICAgJG1kVGhlbWluZyhlbGVtZW50KTtcbiAgICB2YXIgcGFyZW50ID0gZWxlbWVudC5wYXJlbnQoKTtcblxuICAgIC8vIExvb2sgZm9yIHRoZSBuZWFyZXN0IHBhcmVudCBtZC1jb250ZW50LCBzdG9wcGluZyBhdCB0aGUgcm9vdEVsZW1lbnQuXG4gICAgdmFyIGN1cnJlbnQgPSBlbGVtZW50LnBhcmVudCgpWzBdO1xuICAgIHdoaWxlIChjdXJyZW50ICYmIGN1cnJlbnQgIT09ICRyb290RWxlbWVudFswXSAmJiBjdXJyZW50ICE9PSBkb2N1bWVudC5ib2R5KSB7XG4gICAgICBpZiAoY3VycmVudC50YWdOYW1lICYmIGN1cnJlbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09ICdtZC1jb250ZW50JykgYnJlYWs7XG4gICAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnROb2RlO1xuICAgIH1cbiAgICB2YXIgdG9vbHRpcFBhcmVudCA9IGFuZ3VsYXIuZWxlbWVudChjdXJyZW50IHx8IGRvY3VtZW50LmJvZHkpO1xuXG4gICAgaWYgKCFhbmd1bGFyLmlzRGVmaW5lZChhdHRyLm1kRGVsYXkpKSB7XG4gICAgICBzY29wZS5kZWxheSA9IFRPT0xUSVBfU0hPV19ERUxBWTtcbiAgICB9XG5cbiAgICAvLyBXZSB3aWxsIHJlLWF0dGFjaCB0b29sdGlwIHdoZW4gdmlzaWJsZVxuICAgIGVsZW1lbnQuZGV0YWNoKCk7XG4gICAgZWxlbWVudC5hdHRyKCdyb2xlJywgJ3Rvb2x0aXAnKTtcbiAgICBlbGVtZW50LmF0dHIoJ2lkJywgYXR0ci5pZCB8fCAoJ3Rvb2x0aXBfJyArICRtZFV0aWwubmV4dFVpZCgpKSk7XG5cbiAgICBwYXJlbnQub24oJ2ZvY3VzIG1vdXNlZW50ZXIgdG91Y2hzdGFydCcsIGZ1bmN0aW9uKCkge1xuICAgICAgc2V0VmlzaWJsZSh0cnVlKTtcbiAgICB9KTtcbiAgICBwYXJlbnQub24oJ2JsdXIgbW91c2VsZWF2ZSB0b3VjaGVuZCB0b3VjaGNhbmNlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgLy8gRG9uJ3QgaGlkZSB0aGUgdG9vbHRpcCBpZiB0aGUgcGFyZW50IGlzIHN0aWxsIGZvY3VzZWQuXG4gICAgICBpZiAoJGRvY3VtZW50WzBdLmFjdGl2ZUVsZW1lbnQgPT09IHBhcmVudFswXSkgcmV0dXJuO1xuICAgICAgc2V0VmlzaWJsZShmYWxzZSk7XG4gICAgfSk7XG5cbiAgICBzY29wZS4kd2F0Y2goJ3Zpc2libGUnLCBmdW5jdGlvbihpc1Zpc2libGUpIHtcbiAgICAgIGlmIChpc1Zpc2libGUpIHNob3dUb29sdGlwKCk7XG4gICAgICBlbHNlIGhpZGVUb29sdGlwKCk7XG4gICAgfSk7XG5cbiAgICB2YXIgZGVib3VuY2VkT25SZXNpemUgPSAkJHJBRi50aHJvdHRsZShmdW5jdGlvbiB3aW5kb3dSZXNpemUoKSB7XG4gICAgICAvLyBSZXBvc2l0aW9uIG9uIHJlc2l6ZVxuICAgICAgaWYgKHNjb3BlLnZpc2libGUpIHBvc2l0aW9uVG9vbHRpcCgpO1xuICAgIH0pO1xuICAgIGFuZ3VsYXIuZWxlbWVudCgkd2luZG93KS5vbigncmVzaXplJywgZGVib3VuY2VkT25SZXNpemUpO1xuXG4gICAgLy8gQmUgc3VyZSB0byBjb21wbGV0ZWx5IGNsZWFudXAgdGhlIGVsZW1lbnQgb24gZGVzdHJveVxuICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgIHNjb3BlLnZpc2libGUgPSBmYWxzZTtcbiAgICAgIGVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICBhbmd1bGFyLmVsZW1lbnQoJHdpbmRvdykub2ZmKCdyZXNpemUnLCBkZWJvdW5jZWRPblJlc2l6ZSk7XG4gICAgfSk7XG5cbiAgICAvLyAqKioqKioqXG4gICAgLy8gTWV0aG9kc1xuICAgIC8vICoqKioqKipcblxuICAgIC8vIElmIHNldHRpbmcgdmlzaWJsZSB0byB0cnVlLCBkZWJvdW5jZSB0byBzY29wZS5kZWxheSBtc1xuICAgIC8vIElmIHNldHRpbmcgdmlzaWJsZSB0byBmYWxzZSBhbmQgbm8gdGltZW91dCBpcyBhY3RpdmUsIGluc3RhbnRseSBoaWRlIHRoZSB0b29sdGlwLlxuICAgIGZ1bmN0aW9uIHNldFZpc2libGUodmFsdWUpIHtcbiAgICAgIHNldFZpc2libGUudmFsdWUgPSAhIXZhbHVlO1xuXG4gICAgICBpZiAoIXNldFZpc2libGUucXVldWVkKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIHNldFZpc2libGUucXVldWVkID0gdHJ1ZTtcbiAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHNjb3BlLnZpc2libGUgPSBzZXRWaXNpYmxlLnZhbHVlO1xuICAgICAgICAgICAgc2V0VmlzaWJsZS5xdWV1ZWQgPSBmYWxzZTtcbiAgICAgICAgICB9LCBzY29wZS5kZWxheSk7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHsgc2NvcGUudmlzaWJsZSA9IGZhbHNlOyB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNob3dUb29sdGlwKCkge1xuICAgICAgLy8gSW5zZXJ0IHRoZSBlbGVtZW50IGJlZm9yZSBwb3NpdGlvbmluZyBpdCwgc28gd2UgY2FuIGdldCBwb3NpdGlvblxuICAgICAgLy8gKHRvb2x0aXAgaXMgaGlkZGVuIGJ5IGRlZmF1bHQpXG4gICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKCdtZC1oaWRlJyk7XG4gICAgICBwYXJlbnQuYXR0cignYXJpYS1kZXNjcmliZWRieScsIGVsZW1lbnQuYXR0cignaWQnKSk7XG4gICAgICB0b29sdGlwUGFyZW50LmFwcGVuZChlbGVtZW50KTtcblxuICAgICAgLy8gV2FpdCB1bnRpbCB0aGUgZWxlbWVudCBoYXMgYmVlbiBpbiB0aGUgZG9tIGZvciB0d28gZnJhbWVzIGJlZm9yZVxuICAgICAgLy8gZmFkaW5nIGl0IGluLlxuICAgICAgLy8gQWRkaXRpb25hbGx5LCB3ZSBwb3NpdGlvbiB0aGUgdG9vbHRpcCB0d2ljZSB0byBhdm9pZCBwb3NpdGlvbmluZyBidWdzXG4gICAgICBwb3NpdGlvblRvb2x0aXAoKTtcbiAgICAgICQkckFGKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICQkckFGKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHBvc2l0aW9uVG9vbHRpcCgpO1xuICAgICAgICAgIGlmICghc2NvcGUudmlzaWJsZSkgcmV0dXJuO1xuICAgICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoJ21kLXNob3cnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhpZGVUb29sdGlwKCkge1xuICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcygnbWQtc2hvdycpLmFkZENsYXNzKCdtZC1oaWRlJyk7XG4gICAgICBwYXJlbnQucmVtb3ZlQXR0cignYXJpYS1kZXNjcmliZWRieScpO1xuICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChzY29wZS52aXNpYmxlKSByZXR1cm47XG4gICAgICAgIGVsZW1lbnQuZGV0YWNoKCk7XG4gICAgICB9LCAyMDAsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb3NpdGlvblRvb2x0aXAoKSB7XG4gICAgICB2YXIgdGlwUmVjdCA9ICRtZFV0aWwuZWxlbWVudFJlY3QoZWxlbWVudCwgdG9vbHRpcFBhcmVudCk7XG4gICAgICB2YXIgcGFyZW50UmVjdCA9ICRtZFV0aWwuZWxlbWVudFJlY3QocGFyZW50LCB0b29sdGlwUGFyZW50KTtcblxuICAgICAgLy8gRGVmYXVsdCB0byBib3R0b20gcG9zaXRpb24gaWYgcG9zc2libGVcbiAgICAgIHZhciB0aXBEaXJlY3Rpb24gPSAnYm90dG9tJztcbiAgICAgIHZhciBuZXdQb3NpdGlvbiA9IHtcbiAgICAgICAgbGVmdDogcGFyZW50UmVjdC5sZWZ0ICsgcGFyZW50UmVjdC53aWR0aCAvIDIgLSB0aXBSZWN0LndpZHRoIC8gMixcbiAgICAgICAgdG9wOiBwYXJlbnRSZWN0LnRvcCArIHBhcmVudFJlY3QuaGVpZ2h0XG4gICAgICB9O1xuXG4gICAgICAvLyBJZiBlbGVtZW50IGJsZWVkcyBvdmVyIGxlZnQvcmlnaHQgb2YgdGhlIHdpbmRvdywgcGxhY2UgaXQgb24gdGhlIGVkZ2Ugb2YgdGhlIHdpbmRvdy5cbiAgICAgIG5ld1Bvc2l0aW9uLmxlZnQgPSBNYXRoLm1pbihcbiAgICAgICAgbmV3UG9zaXRpb24ubGVmdCxcbiAgICAgICAgdG9vbHRpcFBhcmVudC5wcm9wKCdzY3JvbGxXaWR0aCcpIC0gdGlwUmVjdC53aWR0aCAtIFRPT0xUSVBfV0lORE9XX0VER0VfU1BBQ0VcbiAgICAgICk7XG4gICAgICBuZXdQb3NpdGlvbi5sZWZ0ID0gTWF0aC5tYXgobmV3UG9zaXRpb24ubGVmdCwgVE9PTFRJUF9XSU5ET1dfRURHRV9TUEFDRSk7XG5cbiAgICAgIC8vIElmIGVsZW1lbnQgYmxlZWRzIG92ZXIgdGhlIGJvdHRvbSBvZiB0aGUgd2luZG93LCBwbGFjZSBpdCBhYm92ZSB0aGUgcGFyZW50LlxuICAgICAgaWYgKG5ld1Bvc2l0aW9uLnRvcCArIHRpcFJlY3QuaGVpZ2h0ID4gdG9vbHRpcFBhcmVudC5wcm9wKCdzY3JvbGxIZWlnaHQnKSkge1xuICAgICAgICBuZXdQb3NpdGlvbi50b3AgPSBwYXJlbnRSZWN0LnRvcCAtIHRpcFJlY3QuaGVpZ2h0O1xuICAgICAgICB0aXBEaXJlY3Rpb24gPSAndG9wJztcbiAgICAgIH1cblxuICAgICAgZWxlbWVudC5jc3Moe3RvcDogbmV3UG9zaXRpb24udG9wICsgJ3B4JywgbGVmdDogbmV3UG9zaXRpb24ubGVmdCArICdweCd9KTtcbiAgICAgIC8vIFRlbGwgdGhlIENTUyB0aGUgc2l6ZSBvZiB0aGlzIHRvb2x0aXAsIGFzIGEgbXVsdGlwbGUgb2YgMzIuXG4gICAgICBlbGVtZW50LmF0dHIoJ3dpZHRoLTMyJywgTWF0aC5jZWlsKHRpcFJlY3Qud2lkdGggLyAzMikpO1xuICAgICAgZWxlbWVudC5hdHRyKCdtZC1kaXJlY3Rpb24nLCB0aXBEaXJlY3Rpb24pO1xuICAgIH1cblxuICB9XG5cbn1cbk1kVG9vbHRpcERpcmVjdGl2ZS4kaW5qZWN0ID0gW1wiJHRpbWVvdXRcIiwgXCIkd2luZG93XCIsIFwiJCRyQUZcIiwgXCIkZG9jdW1lbnRcIiwgXCIkbWRVdGlsXCIsIFwiJG1kVGhlbWluZ1wiLCBcIiRyb290RWxlbWVudFwiXTtcbn0pKCk7XG5cbi8qIVxuICogQW5ndWxhciBNYXRlcmlhbCBEZXNpZ25cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL21hdGVyaWFsXG4gKiBAbGljZW5zZSBNSVRcbiAqIHYwLjcuMVxuICovXG4oZnVuY3Rpb24oKSB7XG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQG5nZG9jIG1vZHVsZVxuICogQG5hbWUgbWF0ZXJpYWwuY29tcG9uZW50cy53aGl0ZWZyYW1lXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdtYXRlcmlhbC5jb21wb25lbnRzLndoaXRlZnJhbWUnLCBbXSk7XG59KSgpO1xuXG4vKiFcbiAqIEFuZ3VsYXIgTWF0ZXJpYWwgRGVzaWduXG4gKiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9tYXRlcmlhbFxuICogQGxpY2Vuc2UgTUlUXG4gKiB2MC43LjFcbiAqL1xuKGZ1bmN0aW9uKCkge1xuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvbmRpdGlvbmFsbHkgY29uZmlndXJlIGluayBiYXIgYW5pbWF0aW9ucyB3aGVuIHRoZVxuICogdGFiIHNlbGVjdGlvbiBjaGFuZ2VzLiBJZiBgbWROb0JhcmAgdGhlbiBkbyBub3Qgc2hvdyB0aGVcbiAqIGJhciBub3IgYW5pbWF0ZS5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ21hdGVyaWFsLmNvbXBvbmVudHMudGFicycpXG4gIC5kaXJlY3RpdmUoJ21kVGFic0lua0JhcicsIE1kVGFiSW5rRGlyZWN0aXZlKTtcblxuZnVuY3Rpb24gTWRUYWJJbmtEaXJlY3RpdmUoJCRyQUYpIHtcblxuICB2YXIgbGFzdEluZGV4ID0gMDtcblxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRScsXG4gICAgcmVxdWlyZTogWydeP21kTm9CYXInLCAnXm1kVGFicyddLFxuICAgIGxpbms6IHBvc3RMaW5rXG4gIH07XG5cbiAgZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmxzKSB7XG4gICAgdmFyIG1kTm9CYXIgPSAhIWN0cmxzWzBdO1xuXG4gICAgdmFyIHRhYnNDdHJsID0gY3RybHNbMV0sXG4gICAgICAgIGRlYm91bmNlZFVwZGF0ZUJhciA9ICQkckFGLnRocm90dGxlKHVwZGF0ZUJhcik7XG5cbiAgICB0YWJzQ3RybC5pbmtCYXJFbGVtZW50ID0gZWxlbWVudDtcblxuICAgIHNjb3BlLiRvbignJG1kVGFic1BhZ2luYXRpb25DaGFuZ2VkJywgZGVib3VuY2VkVXBkYXRlQmFyKTtcblxuICAgIGZ1bmN0aW9uIHVwZGF0ZUJhcigpIHtcbiAgICAgIHZhciBzZWxlY3RlZCA9IHRhYnNDdHJsLmdldFNlbGVjdGVkSXRlbSgpO1xuICAgICAgdmFyIGhpZGVJbmtCYXIgPSAhc2VsZWN0ZWQgfHwgdGFic0N0cmwuY291bnQoKSA8IDIgfHwgbWROb0JhcjtcblxuICAgICAgZWxlbWVudC5jc3MoJ2Rpc3BsYXknLCBoaWRlSW5rQmFyID8gJ25vbmUnIDogJ2Jsb2NrJyk7XG5cbiAgICAgIGlmIChoaWRlSW5rQmFyKSByZXR1cm47XG5cbiAgICAgIGlmIChzY29wZS5wYWdpbmF0aW9uICYmIHNjb3BlLnBhZ2luYXRpb24udGFiRGF0YSkge1xuICAgICAgICB2YXIgaW5kZXggPSB0YWJzQ3RybC5nZXRTZWxlY3RlZEluZGV4KCk7XG4gICAgICAgIHZhciBkYXRhID0gc2NvcGUucGFnaW5hdGlvbi50YWJEYXRhLnRhYnNbaW5kZXhdIHx8IHsgbGVmdDogMCwgcmlnaHQ6IDAsIHdpZHRoOiAwIH07XG4gICAgICAgIHZhciByaWdodCA9IGVsZW1lbnQucGFyZW50KCkucHJvcCgnb2Zmc2V0V2lkdGgnKSAtIGRhdGEucmlnaHQ7XG4gICAgICAgIHZhciBjbGFzc05hbWVzID0gWydtZC10cmFuc2l0aW9uLWxlZnQnLCAnbWQtdHJhbnNpdGlvbi1yaWdodCcsICdtZC1uby10cmFuc2l0aW9uJ107XG4gICAgICAgIHZhciBjbGFzc0luZGV4ID0gbGFzdEluZGV4ID4gaW5kZXggPyAwIDogbGFzdEluZGV4IDwgaW5kZXggPyAxIDogMjtcblxuICAgICAgICBlbGVtZW50XG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3MoY2xhc3NOYW1lcy5qb2luKCcgJykpXG4gICAgICAgICAgICAuYWRkQ2xhc3MoY2xhc3NOYW1lc1tjbGFzc0luZGV4XSlcbiAgICAgICAgICAgIC5jc3MoeyBsZWZ0OiBkYXRhLmxlZnQgKyAncHgnLCByaWdodDogcmlnaHQgKyAncHgnIH0pO1xuXG4gICAgICAgIGxhc3RJbmRleCA9IGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuTWRUYWJJbmtEaXJlY3RpdmUuJGluamVjdCA9IFtcIiQkckFGXCJdO1xufSkoKTtcblxuLyohXG4gKiBBbmd1bGFyIE1hdGVyaWFsIERlc2lnblxuICogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvbWF0ZXJpYWxcbiAqIEBsaWNlbnNlIE1JVFxuICogdjAuNy4xXG4gKi9cbihmdW5jdGlvbigpIHtcbid1c2Ugc3RyaWN0JztcblxuYW5ndWxhci5tb2R1bGUoJ21hdGVyaWFsLmNvbXBvbmVudHMudGFicycpXG4gICAgLmRpcmVjdGl2ZSgnbWRUYWJzUGFnaW5hdGlvbicsIFRhYlBhZ2luYXRpb25EaXJlY3RpdmUpO1xuXG5mdW5jdGlvbiBUYWJQYWdpbmF0aW9uRGlyZWN0aXZlKCRtZENvbnN0YW50LCAkd2luZG93LCAkJHJBRiwgJCRxLCAkdGltZW91dCwgJG1kTWVkaWEpIHtcblxuICAvLyBNdXN0IG1hdGNoICgyICogd2lkdGggb2YgcGFnaW5hdG9ycykgaW4gc2Nzc1xuICB2YXIgUEFHSU5BVE9SU19XSURUSCA9ICg4ICogNCkgKiAyO1xuXG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiAnXm1kVGFicycsXG4gICAgbGluazogcG9zdExpbmtcbiAgfTtcblxuICBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgZWxlbWVudCwgYXR0ciwgdGFic0N0cmwpIHtcblxuICAgIHZhciB0YWJzID0gZWxlbWVudFswXS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnbWQtdGFiJyk7XG4gICAgdmFyIGRlYm91bmNlZFVwZGF0ZVBhZ2luYXRpb24gPSAkJHJBRi50aHJvdHRsZSh1cGRhdGVQYWdpbmF0aW9uKTtcbiAgICB2YXIgdGFic1BhcmVudCA9IGVsZW1lbnQuY2hpbGRyZW4oKTtcbiAgICB2YXIgbG9ja2VkID0gZmFsc2U7XG4gICAgdmFyIHN0YXRlID0gc2NvcGUucGFnaW5hdGlvbiA9IHtcbiAgICAgIHBhZ2U6IC0xLFxuICAgICAgYWN0aXZlOiBmYWxzZSxcbiAgICAgIGNsaWNrTmV4dDogZnVuY3Rpb24oKSB7IGxvY2tlZCB8fCB1c2VyQ2hhbmdlUGFnZSgrMSk7IH0sXG4gICAgICBjbGlja1ByZXZpb3VzOiBmdW5jdGlvbigpIHsgbG9ja2VkIHx8IHVzZXJDaGFuZ2VQYWdlKC0xKTsgfVxuICAgIH07XG5cbiAgICBzY29wZS4kb24oJyRtZFRhYnNDaGFuZ2VkJywgZGVib3VuY2VkVXBkYXRlUGFnaW5hdGlvbik7XG4gICAgYW5ndWxhci5lbGVtZW50KCR3aW5kb3cpLm9uKCdyZXNpemUnLCBkZWJvdW5jZWRVcGRhdGVQYWdpbmF0aW9uKTtcblxuICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgIGFuZ3VsYXIuZWxlbWVudCgkd2luZG93KS5vZmYoJ3Jlc2l6ZScsIGRlYm91bmNlZFVwZGF0ZVBhZ2luYXRpb24pO1xuICAgIH0pO1xuXG4gICAgc2NvcGUuJHdhdGNoKGZ1bmN0aW9uKCkgeyByZXR1cm4gdGFic0N0cmwudGFiVG9Gb2N1czsgfSwgb25UYWJGb2N1cyk7XG5cbiAgICAvLyBNYWtlIHN1cmUgd2UgZG9uJ3QgZm9jdXMgYW4gZWxlbWVudCBvbiB0aGUgbmV4dCBwYWdlXG4gICAgLy8gYmVmb3JlIGl0J3MgaW4gdmlld1xuICAgIGZ1bmN0aW9uIG9uVGFiRm9jdXModGFiLCBvbGRUYWIpIHtcbiAgICAgIGlmICghdGFiKSByZXR1cm47XG5cbiAgICAgIHZhciBwYWdlSW5kZXggPSBnZXRQYWdlRm9yVGFiKHRhYik7XG4gICAgICBpZiAoIXN0YXRlLmFjdGl2ZSB8fCBwYWdlSW5kZXggPT09IHN0YXRlLnBhZ2UpIHtcbiAgICAgICAgdGFiLmVsZW1lbnQuZm9jdXMoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEdvIHRvIHRoZSBuZXcgcGFnZSwgd2FpdCBmb3IgdGhlIHBhZ2UgdHJhbnNpdGlvbiB0byBlbmQsIHRoZW4gZm9jdXMuXG4gICAgICAgIG9sZFRhYiAmJiBvbGRUYWIuZWxlbWVudC5ibHVyKCk7XG4gICAgICAgIHNldFBhZ2UocGFnZUluZGV4KS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGxvY2tlZCA9IGZhbHNlO1xuICAgICAgICAgIHRhYi5lbGVtZW50LmZvY3VzKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENhbGxlZCB3aGVuIHBhZ2UgaXMgY2hhbmdlZCBieSBhIHVzZXIgYWN0aW9uIChjbGljaylcbiAgICBmdW5jdGlvbiB1c2VyQ2hhbmdlUGFnZShpbmNyZW1lbnQpIHtcbiAgICAgIHZhciBzaXplRGF0YSA9IHN0YXRlLnRhYkRhdGE7XG4gICAgICB2YXIgbmV3UGFnZSA9IE1hdGgubWF4KDAsIE1hdGgubWluKHNpemVEYXRhLnBhZ2VzLmxlbmd0aCAtIDEsIHN0YXRlLnBhZ2UgKyBpbmNyZW1lbnQpKTtcbiAgICAgIHZhciBuZXdUYWJJbmRleCA9IHNpemVEYXRhLnBhZ2VzW25ld1BhZ2VdWyBpbmNyZW1lbnQgPiAwID8gJ2ZpcnN0VGFiSW5kZXgnIDogJ2xhc3RUYWJJbmRleCcgXTtcbiAgICAgIHZhciBuZXdUYWIgPSB0YWJzQ3RybC5pdGVtQXQobmV3VGFiSW5kZXgpO1xuICAgICAgbG9ja2VkID0gdHJ1ZTtcbiAgICAgIG9uVGFiRm9jdXMobmV3VGFiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVQYWdpbmF0aW9uKCkge1xuICAgICAgaWYgKCFlbGVtZW50LnByb3AoJ29mZnNldFBhcmVudCcpKSB7XG4gICAgICAgIHZhciB3YXRjaGVyID0gd2FpdEZvclZpc2libGUoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgdGFicyA9IGVsZW1lbnQuZmluZCgnbWQtdGFiJyk7XG5cbiAgICAgIGRpc2FibGVQYWdpbmF0aW9uKCk7XG5cbiAgICAgIHZhciBzaXplRGF0YSA9IHN0YXRlLnRhYkRhdGEgPSBjYWxjdWxhdGVUYWJEYXRhKCk7XG4gICAgICB2YXIgbmVlZFBhZ2luYXRpb24gPSBzdGF0ZS5hY3RpdmUgPSBzaXplRGF0YS5wYWdlcy5sZW5ndGggPiAxO1xuXG4gICAgICBpZiAobmVlZFBhZ2luYXRpb24pIHsgZW5hYmxlUGFnaW5hdGlvbigpOyB9XG5cbiAgICAgIHNjb3BlLiRldmFsQXN5bmMoZnVuY3Rpb24gKCkgeyBzY29wZS4kYnJvYWRjYXN0KCckbWRUYWJzUGFnaW5hdGlvbkNoYW5nZWQnKTsgfSk7XG5cbiAgICAgIGZ1bmN0aW9uIGVuYWJsZVBhZ2luYXRpb24oKSB7XG4gICAgICAgIHRhYnNQYXJlbnQuY3NzKCd3aWR0aCcsICc5OTk5cHgnKTtcblxuICAgICAgICAvLy0tIGFwcGx5IGZpbGxlciBtYXJnaW5zXG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaChzaXplRGF0YS50YWJzLCBmdW5jdGlvbiAodGFiKSB7XG4gICAgICAgICAgYW5ndWxhci5lbGVtZW50KHRhYi5lbGVtZW50KS5jc3MoJ21hcmdpbi1sZWZ0JywgdGFiLmZpbGxlciArICdweCcpO1xuICAgICAgICB9KTtcblxuICAgICAgICBzZXRQYWdlKGdldFBhZ2VGb3JUYWIodGFic0N0cmwuZ2V0U2VsZWN0ZWRJdGVtKCkpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZGlzYWJsZVBhZ2luYXRpb24oKSB7XG4gICAgICAgIHNsaWRlVGFiQnV0dG9ucygwKTtcbiAgICAgICAgdGFic1BhcmVudC5jc3MoJ3dpZHRoJywgJycpO1xuICAgICAgICB0YWJzLmNzcygnd2lkdGgnLCAnJyk7XG4gICAgICAgIHRhYnMuY3NzKCdtYXJnaW4tbGVmdCcsICcnKTtcbiAgICAgICAgc3RhdGUucGFnZSA9IG51bGw7XG4gICAgICAgIHN0YXRlLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB3YWl0Rm9yVmlzaWJsZSgpIHtcbiAgICAgICAgcmV0dXJuIHdhdGNoZXIgfHwgc2NvcGUuJHdhdGNoKFxuICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRbMF0ub2Zmc2V0UGFyZW50KSB7XG4gICAgICAgICAgICAgICAgICBpZiAoYW5ndWxhci5pc0Z1bmN0aW9uKHdhdGNoZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhdGNoZXIoKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGRlYm91bmNlZFVwZGF0ZVBhZ2luYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgIHdhdGNoZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNsaWRlVGFiQnV0dG9ucyh4KSB7XG4gICAgICBpZiAodGFic0N0cmwucGFnaW5nT2Zmc2V0ID09PSB4KSB7XG4gICAgICAgIC8vIFJlc29sdmUgaW5zdGFudGx5IGlmIG5vIGNoYW5nZVxuICAgICAgICByZXR1cm4gJCRxLndoZW4oKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGRlZmVycmVkID0gJCRxLmRlZmVyKCk7XG5cbiAgICAgIHRhYnNDdHJsLiQkcGFnaW5nT2Zmc2V0ID0geDtcbiAgICAgIHRhYnNQYXJlbnQuY3NzKCRtZENvbnN0YW50LkNTUy5UUkFOU0ZPUk0sICd0cmFuc2xhdGUzZCgnICsgeCArICdweCwwLDApJyk7XG4gICAgICB0YWJzUGFyZW50Lm9uKCRtZENvbnN0YW50LkNTUy5UUkFOU0lUSU9ORU5ELCBvblRhYnNQYXJlbnRUcmFuc2l0aW9uRW5kKTtcblxuICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG5cbiAgICAgIGZ1bmN0aW9uIG9uVGFic1BhcmVudFRyYW5zaXRpb25FbmQoZXYpIHtcbiAgICAgICAgLy8gTWFrZSBzdXJlIHRoaXMgZXZlbnQgZGlkbid0IGJ1YmJsZSB1cCBmcm9tIGFuIGFuaW1hdGlvbiBpbiBhIGNoaWxkIGVsZW1lbnQuXG4gICAgICAgIGlmIChldi50YXJnZXQgPT09IHRhYnNQYXJlbnRbMF0pIHtcbiAgICAgICAgICB0YWJzUGFyZW50Lm9mZigkbWRDb25zdGFudC5DU1MuVFJBTlNJVElPTkVORCwgb25UYWJzUGFyZW50VHJhbnNpdGlvbkVuZCk7XG4gICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2hvdWxkU3RyZXRjaFRhYnMoKSB7XG4gICAgICBzd2l0Y2ggKHNjb3BlLnN0cmV0Y2hUYWJzKSB7XG4gICAgICAgIGNhc2UgJ25ldmVyJzogIHJldHVybiBmYWxzZTtcbiAgICAgICAgY2FzZSAnYWx3YXlzJzogcmV0dXJuIHRydWU7XG4gICAgICAgIGRlZmF1bHQ6ICAgICAgIHJldHVybiAkbWRNZWRpYSgnc20nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYWxjdWxhdGVUYWJEYXRhKG5vQWRqdXN0KSB7XG4gICAgICB2YXIgY2xpZW50V2lkdGggPSBlbGVtZW50LnBhcmVudCgpLnByb3AoJ29mZnNldFdpZHRoJyk7XG4gICAgICB2YXIgdGFic1dpZHRoID0gY2xpZW50V2lkdGggLSBQQUdJTkFUT1JTX1dJRFRIIC0gMTtcbiAgICAgIHZhciAkdGFicyA9IGFuZ3VsYXIuZWxlbWVudCh0YWJzKTtcbiAgICAgIHZhciB0b3RhbFdpZHRoID0gMDtcbiAgICAgIHZhciBtYXggPSAwO1xuICAgICAgdmFyIHRhYkRhdGEgPSBbXTtcbiAgICAgIHZhciBwYWdlcyA9IFtdO1xuICAgICAgdmFyIGN1cnJlbnRQYWdlO1xuXG4gICAgICAkdGFicy5jc3MoJ21heC13aWR0aCcsICcnKTtcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaCh0YWJzLCBmdW5jdGlvbiAodGFiLCBpbmRleCkge1xuICAgICAgICB2YXIgdGFiV2lkdGggPSBNYXRoLm1pbih0YWJzV2lkdGgsIHRhYi5vZmZzZXRXaWR0aCk7XG4gICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgIGVsZW1lbnQ6IHRhYixcbiAgICAgICAgICBsZWZ0OiB0b3RhbFdpZHRoLFxuICAgICAgICAgIHdpZHRoOiB0YWJXaWR0aCxcbiAgICAgICAgICByaWdodDogdG90YWxXaWR0aCArIHRhYldpZHRoLFxuICAgICAgICAgIGZpbGxlcjogMFxuICAgICAgICB9O1xuXG4gICAgICAgIC8vLS0gVGhpcyBjYWxjdWxhdGVzIHRoZSBwYWdlIGZvciBlYWNoIHRhYi4gIFRoZSBmaXJzdCBwYWdlIHdpbGwgdXNlIHRoZSBjbGllbnRXaWR0aCwgd2hpY2hcbiAgICAgICAgLy8gICBkb2VzIG5vdCBmYWN0b3IgaW4gdGhlIHBhZ2luYXRpb24gaXRlbXMuICBBZnRlciB0aGUgZmlyc3QgcGFnZSwgdGFic1dpZHRoIGlzIHVzZWRcbiAgICAgICAgLy8gICBiZWNhdXNlIGF0IHRoaXMgcG9pbnQsIHdlIGtub3cgdGhhdCB0aGUgcGFnaW5hdGlvbiBidXR0b25zIHdpbGwgYmUgc2hvd24uXG4gICAgICAgIGRhdGEucGFnZSA9IE1hdGguY2VpbChkYXRhLnJpZ2h0IC8gKCBwYWdlcy5sZW5ndGggPT09IDEgJiYgaW5kZXggPT09IHRhYnMubGVuZ3RoIC0gMSA/IGNsaWVudFdpZHRoIDogdGFic1dpZHRoICkpIC0gMTtcblxuICAgICAgICBpZiAoZGF0YS5wYWdlID49IHBhZ2VzLmxlbmd0aCkge1xuICAgICAgICAgIGRhdGEuZmlsbGVyID0gKHRhYnNXaWR0aCAqIGRhdGEucGFnZSkgLSBkYXRhLmxlZnQ7XG4gICAgICAgICAgZGF0YS5yaWdodCArPSBkYXRhLmZpbGxlcjtcbiAgICAgICAgICBkYXRhLmxlZnQgKz0gZGF0YS5maWxsZXI7XG4gICAgICAgICAgY3VycmVudFBhZ2UgPSB7XG4gICAgICAgICAgICBsZWZ0OiBkYXRhLmxlZnQsXG4gICAgICAgICAgICBmaXJzdFRhYkluZGV4OiBpbmRleCxcbiAgICAgICAgICAgIGxhc3RUYWJJbmRleDogaW5kZXgsXG4gICAgICAgICAgICB0YWJzOiBbIGRhdGEgXVxuICAgICAgICAgIH07XG4gICAgICAgICAgcGFnZXMucHVzaChjdXJyZW50UGFnZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3VycmVudFBhZ2UubGFzdFRhYkluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgY3VycmVudFBhZ2UudGFicy5wdXNoKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHRvdGFsV2lkdGggPSBkYXRhLnJpZ2h0O1xuICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIHRhYldpZHRoKTtcbiAgICAgICAgdGFiRGF0YS5wdXNoKGRhdGEpO1xuICAgICAgfSk7XG4gICAgICAkdGFicy5jc3MoJ21heC13aWR0aCcsIHRhYnNXaWR0aCArICdweCcpO1xuXG4gICAgICBpZiAoIW5vQWRqdXN0ICYmIHNob3VsZFN0cmV0Y2hUYWJzKCkpIHtcbiAgICAgICAgcmV0dXJuIGFkanVzdEZvclN0cmV0Y2hlZFRhYnMoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgd2lkdGg6IHRvdGFsV2lkdGgsXG4gICAgICAgICAgbWF4OiBtYXgsXG4gICAgICAgICAgdGFiczogdGFiRGF0YSxcbiAgICAgICAgICBwYWdlczogcGFnZXMsXG4gICAgICAgICAgdGFiRWxlbWVudHM6IHRhYnNcbiAgICAgICAgfTtcbiAgICAgIH1cblxuXG4gICAgICBmdW5jdGlvbiBhZGp1c3RGb3JTdHJldGNoZWRUYWJzKCkge1xuICAgICAgICB2YXIgY2FudmFzV2lkdGggPSBwYWdlcy5sZW5ndGggPT09IDEgPyBjbGllbnRXaWR0aCA6IHRhYnNXaWR0aDtcbiAgICAgICAgdmFyIHRhYnNQZXJQYWdlID0gTWF0aC5taW4oTWF0aC5mbG9vcihjYW52YXNXaWR0aCAvIG1heCksIHRhYnMubGVuZ3RoKTtcbiAgICAgICAgdmFyIHRhYldpZHRoICAgID0gTWF0aC5mbG9vcihjYW52YXNXaWR0aCAvIHRhYnNQZXJQYWdlKTtcbiAgICAgICAgJHRhYnMuY3NzKCd3aWR0aCcsIHRhYldpZHRoICsgJ3B4Jyk7XG4gICAgICAgIHJldHVybiBjYWxjdWxhdGVUYWJEYXRhKHRydWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFBhZ2VGb3JUYWIodGFiKSB7XG4gICAgICB2YXIgdGFiSW5kZXggPSB0YWJzQ3RybC5pbmRleE9mKHRhYik7XG4gICAgICBpZiAodGFiSW5kZXggPT09IC0xKSByZXR1cm4gMDtcblxuICAgICAgdmFyIHNpemVEYXRhID0gc3RhdGUudGFiRGF0YTtcblxuICAgICAgcmV0dXJuIHNpemVEYXRhID8gc2l6ZURhdGEudGFic1t0YWJJbmRleF0ucGFnZSA6IDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0UGFnZShwYWdlKSB7XG4gICAgICBpZiAocGFnZSA9PT0gc3RhdGUucGFnZSkgcmV0dXJuO1xuXG4gICAgICB2YXIgbGFzdFBhZ2UgPSBzdGF0ZS50YWJEYXRhLnBhZ2VzLmxlbmd0aCAtIDE7XG5cbiAgICAgIGlmIChwYWdlIDwgMCkgcGFnZSA9IDA7XG4gICAgICBpZiAocGFnZSA+IGxhc3RQYWdlKSBwYWdlID0gbGFzdFBhZ2U7XG5cbiAgICAgIHN0YXRlLmhhc1ByZXYgPSBwYWdlID4gMDtcbiAgICAgIHN0YXRlLmhhc05leHQgPSBwYWdlIDwgbGFzdFBhZ2U7XG5cbiAgICAgIHN0YXRlLnBhZ2UgPSBwYWdlO1xuXG4gICAgICBzY29wZS4kYnJvYWRjYXN0KCckbWRUYWJzUGFnaW5hdGlvbkNoYW5nZWQnKTtcblxuICAgICAgcmV0dXJuIHNsaWRlVGFiQnV0dG9ucygtc3RhdGUudGFiRGF0YS5wYWdlc1twYWdlXS5sZWZ0KTtcbiAgICB9XG4gIH1cblxufVxuVGFiUGFnaW5hdGlvbkRpcmVjdGl2ZS4kaW5qZWN0ID0gW1wiJG1kQ29uc3RhbnRcIiwgXCIkd2luZG93XCIsIFwiJCRyQUZcIiwgXCIkJHFcIiwgXCIkdGltZW91dFwiLCBcIiRtZE1lZGlhXCJdO1xufSkoKTtcblxuLyohXG4gKiBBbmd1bGFyIE1hdGVyaWFsIERlc2lnblxuICogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvbWF0ZXJpYWxcbiAqIEBsaWNlbnNlIE1JVFxuICogdjAuNy4xXG4gKi9cbihmdW5jdGlvbigpIHtcbid1c2Ugc3RyaWN0JztcblxuXG5hbmd1bGFyLm1vZHVsZSgnbWF0ZXJpYWwuY29tcG9uZW50cy50YWJzJylcbiAgLmNvbnRyb2xsZXIoJyRtZFRhYicsIFRhYkl0ZW1Db250cm9sbGVyKTtcblxuZnVuY3Rpb24gVGFiSXRlbUNvbnRyb2xsZXIoJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCAkY29tcGlsZSwgJGFuaW1hdGUsICRtZFV0aWwsICRwYXJzZSwgJHRpbWVvdXQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgdGFic0N0cmwgPSAkZWxlbWVudC5jb250cm9sbGVyKCdtZFRhYnMnKTtcblxuICAvLyBQcm9wZXJ0aWVzXG4gIHNlbGYuY29udGVudENvbnRhaW5lciA9IGFuZ3VsYXIuZWxlbWVudCgnPGRpdiBjbGFzcz1cIm1kLXRhYi1jb250ZW50IG5nLWhpZGVcIj4nKTtcbiAgc2VsZi5lbGVtZW50ID0gJGVsZW1lbnQ7XG5cbiAgLy8gTWV0aG9kc1xuICBzZWxmLmlzRGlzYWJsZWQgPSBpc0Rpc2FibGVkO1xuICBzZWxmLm9uQWRkID0gb25BZGQ7XG4gIHNlbGYub25SZW1vdmUgPSBvblJlbW92ZTtcbiAgc2VsZi5vblNlbGVjdCA9IG9uU2VsZWN0O1xuICBzZWxmLm9uRGVzZWxlY3QgPSBvbkRlc2VsZWN0O1xuXG4gIHZhciBkaXNhYmxlZFBhcnNlZCA9ICRwYXJzZSgkYXR0cnMubmdEaXNhYmxlZCk7XG4gIGZ1bmN0aW9uIGlzRGlzYWJsZWQoKSB7XG4gICAgcmV0dXJuIGRpc2FibGVkUGFyc2VkKCRzY29wZS4kcGFyZW50KTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIEFkZCB0aGUgdGFiJ3MgY29udGVudCB0byB0aGUgRE9NIGNvbnRhaW5lciBhcmVhIGluIHRoZSB0YWJzLFxuICAgKiBAcGFyYW0gY29udGVudEFyZWEgdGhlIGNvbnRlbnRBcmVhIHRvIGFkZCB0aGUgY29udGVudCBvZiB0aGUgdGFiIHRvXG4gICAqL1xuICBmdW5jdGlvbiBvbkFkZChjb250ZW50QXJlYSwgc2hvdWxkRGlzY29ubmVjdFNjb3BlKSB7XG4gICAgaWYgKHNlbGYuY29udGVudC5sZW5ndGgpIHtcbiAgICAgIHNlbGYuY29udGVudENvbnRhaW5lci5hcHBlbmQoc2VsZi5jb250ZW50KTtcbiAgICAgIHNlbGYuY29udGVudFNjb3BlID0gJHNjb3BlLiRwYXJlbnQuJG5ldygpO1xuICAgICAgY29udGVudEFyZWEuYXBwZW5kKHNlbGYuY29udGVudENvbnRhaW5lcik7XG5cbiAgICAgICRjb21waWxlKHNlbGYuY29udGVudENvbnRhaW5lcikoc2VsZi5jb250ZW50U2NvcGUpO1xuICAgICAgaWYgKHNob3VsZERpc2Nvbm5lY3RTY29wZSA9PT0gdHJ1ZSkge1xuICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgJG1kVXRpbC5kaXNjb25uZWN0U2NvcGUoc2VsZi5jb250ZW50U2NvcGUpO1xuICAgICAgICB9LCAwLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25SZW1vdmUoKSB7XG4gICAgJGFuaW1hdGUubGVhdmUoc2VsZi5jb250ZW50Q29udGFpbmVyKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgc2VsZi5jb250ZW50U2NvcGUgJiYgc2VsZi5jb250ZW50U2NvcGUuJGRlc3Ryb3koKTtcbiAgICAgIHNlbGYuY29udGVudFNjb3BlID0gbnVsbDtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvZ2dsZUFuaW1hdGlvbkNsYXNzKHJpZ2h0VG9MZWZ0KSB7XG4gICAgc2VsZi5jb250ZW50Q29udGFpbmVyW3JpZ2h0VG9MZWZ0ID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKCdtZC10cmFuc2l0aW9uLXJ0bCcpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25TZWxlY3QocmlnaHRUb0xlZnQpIHtcbiAgICAvLyBSZXN1bWUgd2F0Y2hlcnMgYW5kIGV2ZW50cyBmaXJpbmcgd2hlbiB0YWIgaXMgc2VsZWN0ZWRcbiAgICAkbWRVdGlsLnJlY29ubmVjdFNjb3BlKHNlbGYuY29udGVudFNjb3BlKTtcblxuICAgICRlbGVtZW50XG4gICAgICAuYWRkQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICAuYXR0cih7XG4gICAgICAgICdhcmlhLXNlbGVjdGVkJzogdHJ1ZSxcbiAgICAgICAgJ3RhYkluZGV4JzogMFxuICAgICAgfSlcbiAgICAgIC5vbignJG1kLnN3aXBlbGVmdCAkbWQuc3dpcGVyaWdodCcsIG9uU3dpcGUpO1xuXG4gICAgdG9nZ2xlQW5pbWF0aW9uQ2xhc3MocmlnaHRUb0xlZnQpO1xuICAgICRhbmltYXRlLnJlbW92ZUNsYXNzKHNlbGYuY29udGVudENvbnRhaW5lciwgJ25nLWhpZGUnKTtcblxuICAgICRzY29wZS5vblNlbGVjdCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25EZXNlbGVjdChyaWdodFRvTGVmdCkge1xuICAgIC8vIFN0b3Agd2F0Y2hlcnMgJiBldmVudHMgZnJvbSBmaXJpbmcgd2hpbGUgdGFiIGlzIGRlc2VsZWN0ZWRcbiAgICAkbWRVdGlsLmRpc2Nvbm5lY3RTY29wZShzZWxmLmNvbnRlbnRTY29wZSk7XG5cbiAgICAkZWxlbWVudFxuICAgICAgLnJlbW92ZUNsYXNzKCdhY3RpdmUnKVxuICAgICAgLmF0dHIoe1xuICAgICAgICAnYXJpYS1zZWxlY3RlZCc6IGZhbHNlLFxuICAgICAgICAndGFiSW5kZXgnOiAtMVxuICAgICAgfSlcbiAgICAgIC5vZmYoJyRtZC5zd2lwZWxlZnQgJG1kLnN3aXBlcmlnaHQnLCBvblN3aXBlKTtcblxuICAgIHRvZ2dsZUFuaW1hdGlvbkNsYXNzKHJpZ2h0VG9MZWZ0KTtcbiAgICAkYW5pbWF0ZS5hZGRDbGFzcyhzZWxmLmNvbnRlbnRDb250YWluZXIsICduZy1oaWRlJyk7XG5cbiAgICAkc2NvcGUub25EZXNlbGVjdCgpO1xuICB9XG5cbiAgLy8vLy8gUHJpdmF0ZSBmdW5jdGlvbnNcblxuICBmdW5jdGlvbiBvblN3aXBlKGV2KSB7XG4gICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgIGlmICgvbGVmdC8udGVzdChldi50eXBlKSkge1xuICAgICAgICB0YWJzQ3RybC5zZWxlY3QodGFic0N0cmwubmV4dCgpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhYnNDdHJsLnNlbGVjdCh0YWJzQ3RybC5wcmV2aW91cygpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuIFxuXG59XG5UYWJJdGVtQ29udHJvbGxlci4kaW5qZWN0ID0gW1wiJHNjb3BlXCIsIFwiJGVsZW1lbnRcIiwgXCIkYXR0cnNcIiwgXCIkY29tcGlsZVwiLCBcIiRhbmltYXRlXCIsIFwiJG1kVXRpbFwiLCBcIiRwYXJzZVwiLCBcIiR0aW1lb3V0XCJdO1xuXG59KSgpO1xuXG4vKiFcbiAqIEFuZ3VsYXIgTWF0ZXJpYWwgRGVzaWduXG4gKiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9tYXRlcmlhbFxuICogQGxpY2Vuc2UgTUlUXG4gKiB2MC43LjFcbiAqL1xuKGZ1bmN0aW9uKCkge1xuJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgnbWF0ZXJpYWwuY29tcG9uZW50cy50YWJzJylcbiAgLmRpcmVjdGl2ZSgnbWRUYWInLCBNZFRhYkRpcmVjdGl2ZSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbWRUYWJcbiAqIEBtb2R1bGUgbWF0ZXJpYWwuY29tcG9uZW50cy50YWJzXG4gKlxuICogQHJlc3RyaWN0IEVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIGA8bWQtdGFiPmAgaXMgdGhlIG5lc3RlZCBkaXJlY3RpdmUgdXNlZCBbd2l0aGluIGA8bWQtdGFicz5gXSB0byBzcGVjaWZ5IGVhY2ggdGFiIHdpdGggYSAqKmxhYmVsKiogYW5kIG9wdGlvbmFsICp2aWV3IGNvbnRlbnQqLlxuICpcbiAqIElmIHRoZSBgbGFiZWxgIGF0dHJpYnV0ZSBpcyBub3Qgc3BlY2lmaWVkLCB0aGVuIGFuIG9wdGlvbmFsIGA8bWQtdGFiLWxhYmVsPmAgdGFnIGNhbiBiZSB1c2VkIHRvIHNwZWNpZnkgbW9yZVxuICogY29tcGxleCB0YWIgaGVhZGVyIG1hcmt1cC4gSWYgbmVpdGhlciB0aGUgKipsYWJlbCoqIG5vciB0aGUgKiptZC10YWItbGFiZWwqKiBhcmUgc3BlY2lmaWVkLCB0aGVuIHRoZSBuZXN0ZWRcbiAqIG1hcmt1cCBvZiB0aGUgYDxtZC10YWI+YCBpcyB1c2VkIGFzIHRoZSB0YWIgaGVhZGVyIG1hcmt1cC5cbiAqXG4gKiBJZiBhIHRhYiAqKmxhYmVsKiogaGFzIGJlZW4gaWRlbnRpZmllZCwgdGhlbiBhbnkgKipub24tKipgPG1kLXRhYi1sYWJlbD5gIG1hcmt1cFxuICogd2lsbCBiZSBjb25zaWRlcmVkIHRhYiBjb250ZW50IGFuZCB3aWxsIGJlIHRyYW5zY2x1ZGVkIHRvIHRoZSBpbnRlcm5hbCBgPGRpdiBjbGFzcz1cIm1kLXRhYnMtY29udGVudFwiPmAgY29udGFpbmVyLlxuICpcbiAqIFRoaXMgY29udGFpbmVyIGlzIHVzZWQgYnkgdGhlIFRhYnNDb250cm9sbGVyIHRvIHNob3cvaGlkZSB0aGUgYWN0aXZlIHRhYidzIGNvbnRlbnQgdmlldy4gVGhpcyBzeW5jaHJvbml6YXRpb24gaXNcbiAqIGF1dG9tYXRpY2FsbHkgbWFuYWdlZCBieSB0aGUgaW50ZXJuYWwgVGFic0NvbnRyb2xsZXIgd2hlbmV2ZXIgdGhlIHRhYiBzZWxlY3Rpb24gY2hhbmdlcy4gU2VsZWN0aW9uIGNoYW5nZXMgY2FuXG4gKiBiZSBpbml0aWF0ZWQgdmlhIGRhdGEgYmluZGluZyBjaGFuZ2VzLCBwcm9ncmFtbWF0aWMgaW52b2NhdGlvbiwgb3IgdXNlciBnZXN0dXJlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IGxhYmVsIE9wdGlvbmFsIGF0dHJpYnV0ZSB0byBzcGVjaWZ5IGEgc2ltcGxlIHN0cmluZyBhcyB0aGUgdGFiIGxhYmVsXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBtZC1hY3RpdmUgV2hlbiBldmFsdXRlaW5nIHRvIHRydWUsIHNlbGVjdHMgdGhlIHRhYi5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IGRpc2FibGVkIElmIHByZXNlbnQsIGRpc2FibGVkIHRhYiBzZWxlY3Rpb24uXG4gKiBAcGFyYW0ge2V4cHJlc3Npb249fSBtZC1vbi1kZXNlbGVjdCBFeHByZXNzaW9uIHRvIGJlIGV2YWx1YXRlZCBhZnRlciB0aGUgdGFiIGhhcyBiZWVuIGRlLXNlbGVjdGVkLlxuICogQHBhcmFtIHtleHByZXNzaW9uPX0gbWQtb24tc2VsZWN0IEV4cHJlc3Npb24gdG8gYmUgZXZhbHVhdGVkIGFmdGVyIHRoZSB0YWIgaGFzIGJlZW4gc2VsZWN0ZWQuXG4gKlxuICpcbiAqIEB1c2FnZVxuICpcbiAqIDxobGpzIGxhbmc9XCJodG1sXCI+XG4gKiA8bWQtdGFiIGxhYmVsPVwiXCIgZGlzYWJsZWQ9XCJcIiBtZC1vbi1zZWxlY3Q9XCJcIiBtZC1vbi1kZXNlbGVjdD1cIlwiID5cbiAqICAgPGgzPk15IFRhYiBjb250ZW50PC9oMz5cbiAqIDwvbWQtdGFiPlxuICpcbiAqIDxtZC10YWIgPlxuICogICA8bWQtdGFiLWxhYmVsPlxuICogICAgIDxoMz5NeSBUYWIgY29udGVudDwvaDM+XG4gKiAgIDwvbWQtdGFiLWxhYmVsPlxuICogICA8cD5cbiAqICAgICBTZWQgdXQgcGVyc3BpY2lhdGlzIHVuZGUgb21uaXMgaXN0ZSBuYXR1cyBlcnJvciBzaXQgdm9sdXB0YXRlbSBhY2N1c2FudGl1bSBkb2xvcmVtcXVlIGxhdWRhbnRpdW0sXG4gKiAgICAgdG90YW0gcmVtIGFwZXJpYW0sIGVhcXVlIGlwc2EgcXVhZSBhYiBpbGxvIGludmVudG9yZSB2ZXJpdGF0aXMgZXQgcXVhc2kgYXJjaGl0ZWN0byBiZWF0YWUgdml0YWVcbiAqICAgICBkaWN0YSBzdW50IGV4cGxpY2Fiby4gTmVtbyBlbmltIGlwc2FtIHZvbHVwdGF0ZW0gcXVpYSB2b2x1cHRhcyBzaXQgYXNwZXJuYXR1ciBhdXQgb2RpdCBhdXQgZnVnaXQsXG4gKiAgICAgc2VkIHF1aWEgY29uc2VxdXVudHVyIG1hZ25pIGRvbG9yZXMgZW9zIHF1aSByYXRpb25lIHZvbHVwdGF0ZW0gc2VxdWkgbmVzY2l1bnQuXG4gKiAgIDwvcD5cbiAqIDwvbWQtdGFiPlxuICogPC9obGpzPlxuICpcbiAqL1xuZnVuY3Rpb24gTWRUYWJEaXJlY3RpdmUoJG1kSW5rUmlwcGxlLCAkY29tcGlsZSwgJG1kVXRpbCwgJG1kQ29uc3RhbnQsICR0aW1lb3V0KSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICByZXF1aXJlOiBbJ21kVGFiJywgJ15tZFRhYnMnXSxcbiAgICBjb250cm9sbGVyOiAnJG1kVGFiJyxcbiAgICBzY29wZToge1xuICAgICAgb25TZWxlY3Q6ICcmbWRPblNlbGVjdCcsXG4gICAgICBvbkRlc2VsZWN0OiAnJm1kT25EZXNlbGVjdCcsXG4gICAgICBsYWJlbDogJ0AnXG4gICAgfSxcbiAgICBjb21waWxlOiBjb21waWxlXG4gIH07XG5cbiAgZnVuY3Rpb24gY29tcGlsZShlbGVtZW50LCBhdHRyKSB7XG4gICAgdmFyIHRhYkxhYmVsID0gZWxlbWVudC5maW5kKCdtZC10YWItbGFiZWwnKTtcblxuICAgIGlmICh0YWJMYWJlbC5sZW5ndGgpIHtcbiAgICAgIC8vIElmIGEgdGFiIGxhYmVsIGVsZW1lbnQgaXMgZm91bmQsIHJlbW92ZSBpdCBmb3IgbGF0ZXIgcmUtdXNlLlxuICAgICAgdGFiTGFiZWwucmVtb3ZlKCk7XG5cbiAgICB9IGVsc2UgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHIubGFiZWwpKSB7XG4gICAgICAvLyBPdGhlcndpc2UsIHRyeSB0byB1c2UgYXR0ci5sYWJlbCBhcyB0aGUgbGFiZWxcbiAgICAgIHRhYkxhYmVsID0gYW5ndWxhci5lbGVtZW50KCc8bWQtdGFiLWxhYmVsPicpLmh0bWwoYXR0ci5sYWJlbCk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgbm90aGluZyBpcyBmb3VuZCwgdXNlIHRoZSB0YWIncyBjb250ZW50IGFzIHRoZSBsYWJlbFxuICAgICAgdGFiTGFiZWwgPSBhbmd1bGFyLmVsZW1lbnQoJzxtZC10YWItbGFiZWw+JylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoZWxlbWVudC5jb250ZW50cygpLnJlbW92ZSgpKTtcbiAgICB9XG5cbiAgICAvLyBFdmVyeXRoaW5nIHRoYXQncyBsZWZ0IGFzIGEgY2hpbGQgaXMgdGhlIHRhYidzIGNvbnRlbnQuXG4gICAgdmFyIHRhYkNvbnRlbnQgPSBlbGVtZW50LmNvbnRlbnRzKCkucmVtb3ZlKCk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmxzKSB7XG5cbiAgICAgIHZhciB0YWJJdGVtQ3RybCA9IGN0cmxzWzBdOyAvLyBDb250cm9sbGVyIGZvciBUSElTIHRhYkl0ZW1DdHJsXG4gICAgICB2YXIgdGFic0N0cmwgPSBjdHJsc1sxXTsgLy8gQ29udHJvbGxlciBmb3IgQUxMIHRhYnNcblxuICAgICAgJHRpbWVvdXQoZWxlbWVudC5hZGRDbGFzcy5iaW5kKGVsZW1lbnQsICdtZC10YWItdGhlbWVkJyksIDAsIGZhbHNlKTtcblxuICAgICAgc2NvcGUuJHdhdGNoKFxuICAgICAgICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGF0dHIubGFiZWw7IH0sXG4gICAgICAgICAgZnVuY3Rpb24gKCkgeyAkdGltZW91dChmdW5jdGlvbiAoKSB7IHRhYnNDdHJsLnNjb3BlLiRicm9hZGNhc3QoJyRtZFRhYnNDaGFuZ2VkJyk7IH0sIDAsIGZhbHNlKTsgfVxuICAgICAgKTtcblxuICAgICAgdHJhbnNjbHVkZVRhYkNvbnRlbnQoKTtcbiAgICAgIGNvbmZpZ3VyZUFyaWEoKTtcblxuICAgICAgdmFyIGRldGFjaFJpcHBsZUZuID0gJG1kSW5rUmlwcGxlLmF0dGFjaFRhYkJlaGF2aW9yKHNjb3BlLCBlbGVtZW50LCB7XG4gICAgICAgIGNvbG9yRWxlbWVudDogdGFic0N0cmwuaW5rQmFyRWxlbWVudFxuICAgICAgfSk7XG4gICAgICB0YWJzQ3RybC5hZGQodGFiSXRlbUN0cmwpO1xuICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICBkZXRhY2hSaXBwbGVGbigpO1xuICAgICAgICB0YWJzQ3RybC5yZW1vdmUodGFiSXRlbUN0cmwpO1xuICAgICAgfSk7XG4gICAgICBlbGVtZW50Lm9uKCckZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8tLSB3YWl0IGZvciBpdGVtIHRvIGJlIHJlbW92ZWQgZnJvbSB0aGUgZG9tXG4gICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0YWJzQ3RybC5zY29wZS4kYnJvYWRjYXN0KCckbWRUYWJzQ2hhbmdlZCcpO1xuICAgICAgICB9LCAwLCBmYWxzZSk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKCFhbmd1bGFyLmlzRGVmaW5lZChhdHRyLm5nQ2xpY2spKSB7XG4gICAgICAgIGVsZW1lbnQub24oJ2NsaWNrJywgZGVmYXVsdENsaWNrTGlzdGVuZXIpO1xuICAgICAgfVxuICAgICAgZWxlbWVudC5vbigna2V5ZG93bicsIGtleWRvd25MaXN0ZW5lcik7XG5cbiAgICAgIGlmIChhbmd1bGFyLmlzTnVtYmVyKHNjb3BlLiRwYXJlbnQuJGluZGV4KSkge1xuICAgICAgICB3YXRjaE5nUmVwZWF0SW5kZXgoKTtcbiAgICAgIH1cbiAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChhdHRyLm1kQWN0aXZlKSkge1xuICAgICAgICB3YXRjaEFjdGl2ZUF0dHJpYnV0ZSgpO1xuICAgICAgfVxuICAgICAgd2F0Y2hEaXNhYmxlZCgpO1xuXG4gICAgICBmdW5jdGlvbiB0cmFuc2NsdWRlVGFiQ29udGVudCgpIHtcbiAgICAgICAgLy8gQ2xvbmUgdGhlIGxhYmVsIHdlIGZvdW5kIGVhcmxpZXIsIGFuZCAkY29tcGlsZSBhbmQgYXBwZW5kIGl0XG4gICAgICAgIHZhciBsYWJlbCA9IHRhYkxhYmVsLmNsb25lKCk7XG4gICAgICAgIGVsZW1lbnQuYXBwZW5kKGxhYmVsKTtcbiAgICAgICAgJGNvbXBpbGUobGFiZWwpKHNjb3BlLiRwYXJlbnQpO1xuXG4gICAgICAgIC8vIENsb25lIHRoZSBjb250ZW50IHdlIGZvdW5kIGVhcmxpZXIsIGFuZCBtYXJrIGl0IGZvciBsYXRlciBwbGFjZW1lbnQgaW50b1xuICAgICAgICAvLyB0aGUgcHJvcGVyIGNvbnRlbnQgYXJlYS5cbiAgICAgICAgdGFiSXRlbUN0cmwuY29udGVudCA9IHRhYkNvbnRlbnQuY2xvbmUoKTtcbiAgICAgIH1cblxuICAgICAgLy9kZWZhdWx0Q2xpY2tMaXN0ZW5lciBpc24ndCBhcHBsaWVkIGlmIHRoZSB1c2VyIHByb3ZpZGVzIGFuIG5nQ2xpY2sgZXhwcmVzc2lvbi5cbiAgICAgIGZ1bmN0aW9uIGRlZmF1bHRDbGlja0xpc3RlbmVyKCkge1xuICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdGFic0N0cmwuc2VsZWN0KHRhYkl0ZW1DdHJsKTtcbiAgICAgICAgICB0YWJzQ3RybC5mb2N1cyh0YWJJdGVtQ3RybCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24ga2V5ZG93bkxpc3RlbmVyKGV2KSB7XG4gICAgICAgIGlmIChldi5rZXlDb2RlID09ICRtZENvbnN0YW50LktFWV9DT0RFLlNQQUNFIHx8IGV2LmtleUNvZGUgPT0gJG1kQ29uc3RhbnQuS0VZX0NPREUuRU5URVIgKSB7XG4gICAgICAgICAgLy8gRmlyZSB0aGUgY2xpY2sgaGFuZGxlciB0byBkbyBub3JtYWwgc2VsZWN0aW9uIGlmIHNwYWNlIGlzIHByZXNzZWRcbiAgICAgICAgICBlbGVtZW50LnRyaWdnZXJIYW5kbGVyKCdjbGljaycpO1xuICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZXYua2V5Q29kZSA9PT0gJG1kQ29uc3RhbnQuS0VZX0NPREUuTEVGVF9BUlJPVykge1xuICAgICAgICAgIHNjb3BlLiRldmFsQXN5bmMoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0YWJzQ3RybC5mb2N1cyh0YWJzQ3RybC5wcmV2aW91cyh0YWJJdGVtQ3RybCkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKGV2LmtleUNvZGUgPT09ICRtZENvbnN0YW50LktFWV9DT0RFLlJJR0hUX0FSUk9XKSB7XG4gICAgICAgICAgc2NvcGUuJGV2YWxBc3luYyhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRhYnNDdHJsLmZvY3VzKHRhYnNDdHJsLm5leHQodGFiSXRlbUN0cmwpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBJZiB0YWJJdGVtQ3RybCBpcyBwYXJ0IG9mIGFuIG5nUmVwZWF0LCBtb3ZlIHRoZSB0YWJJdGVtQ3RybCBpbiBvdXIgaW50ZXJuYWwgYXJyYXlcbiAgICAgIC8vIHdoZW4gaXRzICRpbmRleCBjaGFuZ2VzXG4gICAgICBmdW5jdGlvbiB3YXRjaE5nUmVwZWF0SW5kZXgoKSB7XG4gICAgICAgIC8vIFRoZSB0YWJJdGVtQ3RybCBoYXMgYW4gaXNvbGF0ZSBzY29wZSwgc28gd2Ugd2F0Y2ggdGhlICRpbmRleCBvbiB0aGUgcGFyZW50LlxuICAgICAgICBzY29wZS4kd2F0Y2goJyRwYXJlbnQuJGluZGV4JywgZnVuY3Rpb24gJGluZGV4V2F0Y2hBY3Rpb24obmV3SW5kZXgpIHtcbiAgICAgICAgICB0YWJzQ3RybC5tb3ZlKHRhYkl0ZW1DdHJsLCBuZXdJbmRleCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB3YXRjaEFjdGl2ZUF0dHJpYnV0ZSgpIHtcbiAgICAgICAgdmFyIHVud2F0Y2ggPSBzY29wZS4kcGFyZW50LiR3YXRjaCgnISEoJyArIGF0dHIubWRBY3RpdmUgKyAnKScsIGFjdGl2ZVdhdGNoQWN0aW9uKTtcbiAgICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIHVud2F0Y2gpO1xuXG4gICAgICAgIGZ1bmN0aW9uIGFjdGl2ZVdhdGNoQWN0aW9uKGlzQWN0aXZlKSB7XG4gICAgICAgICAgdmFyIGlzU2VsZWN0ZWQgPSB0YWJzQ3RybC5nZXRTZWxlY3RlZEl0ZW0oKSA9PT0gdGFiSXRlbUN0cmw7XG5cbiAgICAgICAgICBpZiAoaXNBY3RpdmUgJiYgIWlzU2VsZWN0ZWQpIHtcbiAgICAgICAgICAgIHRhYnNDdHJsLnNlbGVjdCh0YWJJdGVtQ3RybCk7XG4gICAgICAgICAgfSBlbHNlIGlmICghaXNBY3RpdmUgJiYgaXNTZWxlY3RlZCkge1xuICAgICAgICAgICAgdGFic0N0cmwuZGVzZWxlY3QodGFiSXRlbUN0cmwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB3YXRjaERpc2FibGVkKCkge1xuICAgICAgICBzY29wZS4kd2F0Y2godGFiSXRlbUN0cmwuaXNEaXNhYmxlZCwgZGlzYWJsZWRXYXRjaEFjdGlvbik7XG5cbiAgICAgICAgZnVuY3Rpb24gZGlzYWJsZWRXYXRjaEFjdGlvbihpc0Rpc2FibGVkKSB7XG4gICAgICAgICAgZWxlbWVudC5hdHRyKCdhcmlhLWRpc2FibGVkJywgaXNEaXNhYmxlZCk7XG5cbiAgICAgICAgICAvLyBBdXRvIHNlbGVjdCBgbmV4dGAgdGFiIHdoZW4gZGlzYWJsZWRcbiAgICAgICAgICB2YXIgaXNTZWxlY3RlZCA9ICh0YWJzQ3RybC5nZXRTZWxlY3RlZEl0ZW0oKSA9PT0gdGFiSXRlbUN0cmwpO1xuICAgICAgICAgIGlmIChpc1NlbGVjdGVkICYmIGlzRGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHRhYnNDdHJsLnNlbGVjdCh0YWJzQ3RybC5uZXh0KCkgfHwgdGFic0N0cmwucHJldmlvdXMoKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY29uZmlndXJlQXJpYSgpIHtcbiAgICAgICAgLy8gTGluayB0b2dldGhlciB0aGUgY29udGVudCBhcmVhIGFuZCB0YWJJdGVtQ3RybCB3aXRoIGFuIGlkXG4gICAgICAgIHZhciB0YWJJZCA9IGF0dHIuaWQgfHwgKCd0YWJfJyArICRtZFV0aWwubmV4dFVpZCgpKTtcblxuICAgICAgICBlbGVtZW50LmF0dHIoe1xuICAgICAgICAgIGlkOiB0YWJJZCxcbiAgICAgICAgICByb2xlOiAndGFiJyxcbiAgICAgICAgICB0YWJJbmRleDogLTEgLy90aGlzIGlzIGFsc28gc2V0IG9uIHNlbGVjdC9kZXNlbGVjdCBpbiB0YWJJdGVtQ3RybFxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBPbmx5IHNldHVwIHRoZSBjb250ZW50Q29udGFpbmVyJ3MgYXJpYSBhdHRyaWJ1dGVzIGlmIHRhYiBjb250ZW50IGlzIHByb3ZpZGVkXG4gICAgICAgIGlmICh0YWJDb250ZW50Lmxlbmd0aCkge1xuICAgICAgICAgIHZhciB0YWJDb250ZW50SWQgPSAnY29udGVudF8nICsgdGFiSWQ7XG4gICAgICAgICAgaWYgKCFlbGVtZW50LmF0dHIoJ2FyaWEtY29udHJvbHMnKSkge1xuICAgICAgICAgICAgZWxlbWVudC5hdHRyKCdhcmlhLWNvbnRyb2xzJywgdGFiQ29udGVudElkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGFiSXRlbUN0cmwuY29udGVudENvbnRhaW5lci5hdHRyKHtcbiAgICAgICAgICAgIGlkOiB0YWJDb250ZW50SWQsXG4gICAgICAgICAgICByb2xlOiAndGFicGFuZWwnLFxuICAgICAgICAgICAgJ2FyaWEtbGFiZWxsZWRieSc6IHRhYklkXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgIH07XG5cbiAgfVxuXG59XG5NZFRhYkRpcmVjdGl2ZS4kaW5qZWN0ID0gW1wiJG1kSW5rUmlwcGxlXCIsIFwiJGNvbXBpbGVcIiwgXCIkbWRVdGlsXCIsIFwiJG1kQ29uc3RhbnRcIiwgXCIkdGltZW91dFwiXTtcblxufSkoKTtcblxuLyohXG4gKiBBbmd1bGFyIE1hdGVyaWFsIERlc2lnblxuICogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvbWF0ZXJpYWxcbiAqIEBsaWNlbnNlIE1JVFxuICogdjAuNy4xXG4gKi9cbihmdW5jdGlvbigpIHtcbid1c2Ugc3RyaWN0JztcblxuYW5ndWxhci5tb2R1bGUoJ21hdGVyaWFsLmNvbXBvbmVudHMudGFicycpXG4gIC5jb250cm9sbGVyKCckbWRUYWJzJywgTWRUYWJzQ29udHJvbGxlcik7XG5cbmZ1bmN0aW9uIE1kVGFic0NvbnRyb2xsZXIoJHNjb3BlLCAkZWxlbWVudCwgJG1kVXRpbCwgJHRpbWVvdXQpIHtcblxuICB2YXIgdGFic0xpc3QgPSAkbWRVdGlsLml0ZXJhdG9yKFtdLCBmYWxzZSk7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICAvLyBQcm9wZXJ0aWVzXG4gIHNlbGYuJGVsZW1lbnQgPSAkZWxlbWVudDtcbiAgc2VsZi5zY29wZSA9ICRzY29wZTtcbiAgLy8gVGhlIHNlY3Rpb24gY29udGFpbmluZyB0aGUgdGFiIGNvbnRlbnQgJGVsZW1lbnRzXG4gIHZhciBjb250ZW50QXJlYSA9IHNlbGYuY29udGVudEFyZWEgPSBhbmd1bGFyLmVsZW1lbnQoJGVsZW1lbnRbMF0ucXVlcnlTZWxlY3RvcignLm1kLXRhYnMtY29udGVudCcpKTtcblxuICAvLyBNZXRob2RzIGZyb20gaXRlcmF0b3JcbiAgdmFyIGluUmFuZ2UgPSBzZWxmLmluUmFuZ2UgPSB0YWJzTGlzdC5pblJhbmdlO1xuICB2YXIgaW5kZXhPZiA9IHNlbGYuaW5kZXhPZiA9IHRhYnNMaXN0LmluZGV4T2Y7XG4gIHZhciBpdGVtQXQgPSBzZWxmLml0ZW1BdCA9IHRhYnNMaXN0Lml0ZW1BdDtcbiAgc2VsZi5jb3VudCA9IHRhYnNMaXN0LmNvdW50O1xuXG4gIHNlbGYuZ2V0U2VsZWN0ZWRJdGVtID0gZ2V0U2VsZWN0ZWRJdGVtO1xuICBzZWxmLmdldFNlbGVjdGVkSW5kZXggPSBnZXRTZWxlY3RlZEluZGV4O1xuICBzZWxmLmFkZCA9IGFkZDtcbiAgc2VsZi5yZW1vdmUgPSByZW1vdmU7XG4gIHNlbGYubW92ZSA9IG1vdmU7XG4gIHNlbGYuc2VsZWN0ID0gc2VsZWN0O1xuICBzZWxmLmZvY3VzID0gZm9jdXM7XG4gIHNlbGYuZGVzZWxlY3QgPSBkZXNlbGVjdDtcblxuICBzZWxmLm5leHQgPSBuZXh0O1xuICBzZWxmLnByZXZpb3VzID0gcHJldmlvdXM7XG5cbiAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICBkZXNlbGVjdChnZXRTZWxlY3RlZEl0ZW0oKSk7XG4gICAgZm9yICh2YXIgaSA9IHRhYnNMaXN0LmNvdW50KCkgLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgcmVtb3ZlKHRhYnNMaXN0W2ldLCB0cnVlKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIEdldCB0aGUgc2VsZWN0ZWQgdGFiXG4gIGZ1bmN0aW9uIGdldFNlbGVjdGVkSXRlbSgpIHtcbiAgICByZXR1cm4gaXRlbUF0KCRzY29wZS5zZWxlY3RlZEluZGV4KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFNlbGVjdGVkSW5kZXgoKSB7XG4gICAgcmV0dXJuICRzY29wZS5zZWxlY3RlZEluZGV4O1xuICB9XG5cbiAgLy8gQWRkIGEgbmV3IHRhYi5cbiAgLy8gUmV0dXJucyBhIG1ldGhvZCB0byByZW1vdmUgdGhlIHRhYiBmcm9tIHRoZSBsaXN0LlxuICBmdW5jdGlvbiBhZGQodGFiLCBpbmRleCkge1xuICAgIHRhYnNMaXN0LmFkZCh0YWIsIGluZGV4KTtcblxuICAgIC8vIFNlbGVjdCB0aGUgbmV3IHRhYiBpZiB3ZSBkb24ndCBoYXZlIGEgc2VsZWN0ZWRJbmRleCwgb3IgaWYgdGhlXG4gICAgLy8gc2VsZWN0ZWRJbmRleCB3ZSd2ZSBiZWVuIHdhaXRpbmcgZm9yIGlzIHRoaXMgdGFiXG4gICAgaWYgKCFhbmd1bGFyLmlzRGVmaW5lZCh0YWIuZWxlbWVudC5hdHRyKCdtZC1hY3RpdmUnKSkgJiYgKCRzY29wZS5zZWxlY3RlZEluZGV4ID09PSAtMSB8fCAhYW5ndWxhci5pc051bWJlcigkc2NvcGUuc2VsZWN0ZWRJbmRleCkgfHxcbiAgICAgICAgJHNjb3BlLnNlbGVjdGVkSW5kZXggPT09IHNlbGYuaW5kZXhPZih0YWIpKSkge1xuICAgICAgdGFiLm9uQWRkKHNlbGYuY29udGVudEFyZWEsIGZhbHNlKTtcbiAgICAgIHNlbGYuc2VsZWN0KHRhYik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhYi5vbkFkZChzZWxmLmNvbnRlbnRBcmVhLCB0cnVlKTtcbiAgICB9XG5cbiAgICAkc2NvcGUuJGJyb2FkY2FzdCgnJG1kVGFic0NoYW5nZWQnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZSh0YWIsIG5vUmVzZWxlY3QpIHtcbiAgICBpZiAoIXRhYnNMaXN0LmNvbnRhaW5zKHRhYikpIHJldHVybjtcbiAgICBpZiAobm9SZXNlbGVjdCkgcmV0dXJuO1xuICAgIHZhciBpc1NlbGVjdGVkSXRlbSA9IGdldFNlbGVjdGVkSXRlbSgpID09PSB0YWIsXG4gICAgICAgIG5ld1RhYiA9IHByZXZpb3VzKCkgfHwgbmV4dCgpO1xuXG4gICAgZGVzZWxlY3QodGFiKTtcbiAgICB0YWJzTGlzdC5yZW1vdmUodGFiKTtcbiAgICB0YWIub25SZW1vdmUoKTtcblxuICAgICRzY29wZS4kYnJvYWRjYXN0KCckbWRUYWJzQ2hhbmdlZCcpO1xuXG4gICAgaWYgKGlzU2VsZWN0ZWRJdGVtKSB7IHNlbGVjdChuZXdUYWIpOyB9XG4gIH1cblxuICAvLyBNb3ZlIGEgdGFiICh1c2VkIHdoZW4gbmctcmVwZWF0IG9yZGVyIGNoYW5nZXMpXG4gIGZ1bmN0aW9uIG1vdmUodGFiLCB0b0luZGV4KSB7XG4gICAgdmFyIGlzU2VsZWN0ZWQgPSBnZXRTZWxlY3RlZEl0ZW0oKSA9PT0gdGFiO1xuXG4gICAgdGFic0xpc3QucmVtb3ZlKHRhYik7XG4gICAgdGFic0xpc3QuYWRkKHRhYiwgdG9JbmRleCk7XG4gICAgaWYgKGlzU2VsZWN0ZWQpIHNlbGVjdCh0YWIpO1xuXG4gICAgJHNjb3BlLiRicm9hZGNhc3QoJyRtZFRhYnNDaGFuZ2VkJyk7XG4gIH1cblxuICBmdW5jdGlvbiBzZWxlY3QodGFiLCByaWdodFRvTGVmdCkge1xuICAgIGlmICghdGFiIHx8IHRhYi5pc1NlbGVjdGVkIHx8IHRhYi5pc0Rpc2FibGVkKCkpIHJldHVybjtcbiAgICBpZiAoIXRhYnNMaXN0LmNvbnRhaW5zKHRhYikpIHJldHVybjtcblxuICAgIGlmICghYW5ndWxhci5pc0RlZmluZWQocmlnaHRUb0xlZnQpKSB7XG4gICAgICByaWdodFRvTGVmdCA9IGluZGV4T2YodGFiKSA8ICRzY29wZS5zZWxlY3RlZEluZGV4O1xuICAgIH1cbiAgICBkZXNlbGVjdChnZXRTZWxlY3RlZEl0ZW0oKSwgcmlnaHRUb0xlZnQpO1xuXG4gICAgJHNjb3BlLnNlbGVjdGVkSW5kZXggPSBpbmRleE9mKHRhYik7XG4gICAgdGFiLmlzU2VsZWN0ZWQgPSB0cnVlO1xuICAgIHRhYi5vblNlbGVjdChyaWdodFRvTGVmdCk7XG5cbiAgICAkc2NvcGUuJGJyb2FkY2FzdCgnJG1kVGFic0NoYW5nZWQnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvY3VzKHRhYikge1xuICAgIC8vIHRoaXMgdmFyaWFibGUgaXMgd2F0Y2hlZCBieSBwYWdpbmF0aW9uXG4gICAgc2VsZi50YWJUb0ZvY3VzID0gdGFiO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVzZWxlY3QodGFiLCByaWdodFRvTGVmdCkge1xuICAgIGlmICghdGFiIHx8ICF0YWIuaXNTZWxlY3RlZCkgcmV0dXJuO1xuICAgIGlmICghdGFic0xpc3QuY29udGFpbnModGFiKSkgcmV0dXJuO1xuXG4gICAgJHNjb3BlLnNlbGVjdGVkSW5kZXggPSAtMTtcbiAgICB0YWIuaXNTZWxlY3RlZCA9IGZhbHNlO1xuICAgIHRhYi5vbkRlc2VsZWN0KHJpZ2h0VG9MZWZ0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5leHQodGFiLCBmaWx0ZXJGbikge1xuICAgIHJldHVybiB0YWJzTGlzdC5uZXh0KHRhYiB8fCBnZXRTZWxlY3RlZEl0ZW0oKSwgZmlsdGVyRm4gfHwgaXNUYWJFbmFibGVkKTtcbiAgfVxuICBmdW5jdGlvbiBwcmV2aW91cyh0YWIsIGZpbHRlckZuKSB7XG4gICAgcmV0dXJuIHRhYnNMaXN0LnByZXZpb3VzKHRhYiB8fCBnZXRTZWxlY3RlZEl0ZW0oKSwgZmlsdGVyRm4gfHwgaXNUYWJFbmFibGVkKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzVGFiRW5hYmxlZCh0YWIpIHtcbiAgICByZXR1cm4gdGFiICYmICF0YWIuaXNEaXNhYmxlZCgpO1xuICB9XG5cbn1cbk1kVGFic0NvbnRyb2xsZXIuJGluamVjdCA9IFtcIiRzY29wZVwiLCBcIiRlbGVtZW50XCIsIFwiJG1kVXRpbFwiLCBcIiR0aW1lb3V0XCJdO1xufSkoKTtcblxuLyohXG4gKiBBbmd1bGFyIE1hdGVyaWFsIERlc2lnblxuICogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvbWF0ZXJpYWxcbiAqIEBsaWNlbnNlIE1JVFxuICogdjAuNy4xXG4gKi9cbihmdW5jdGlvbigpIHtcbid1c2Ugc3RyaWN0JztcblxuYW5ndWxhci5tb2R1bGUoJ21hdGVyaWFsLmNvbXBvbmVudHMudGFicycpXG4gIC5kaXJlY3RpdmUoJ21kVGFicycsIFRhYnNEaXJlY3RpdmUpO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG1kVGFic1xuICogQG1vZHVsZSBtYXRlcmlhbC5jb21wb25lbnRzLnRhYnNcbiAqXG4gKiBAcmVzdHJpY3QgRVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGA8bWQtdGFicz5gIGRpcmVjdGl2ZSBzZXJ2ZXMgYXMgdGhlIGNvbnRhaW5lciBmb3IgMS4ubiBgPG1kLXRhYj5gIGNoaWxkIGRpcmVjdGl2ZXMgdG8gcHJvZHVjZXMgYSBUYWJzIGNvbXBvbmVudHMuXG4gKiBJbiB0dXJuLCB0aGUgbmVzdGVkIGA8bWQtdGFiPmAgZGlyZWN0aXZlIGlzIHVzZWQgdG8gc3BlY2lmeSBhIHRhYiBsYWJlbCBmb3IgdGhlICoqaGVhZGVyIGJ1dHRvbioqIGFuZCBhIFtvcHRpb25hbF0gdGFiIHZpZXdcbiAqIGNvbnRlbnQgdGhhdCB3aWxsIGJlIGFzc29jaWF0ZWQgd2l0aCBlYWNoIHRhYiBidXR0b24uXG4gKlxuICogQmVsb3cgaXMgdGhlIG1hcmt1cCBmb3IgaXRzIHNpbXBsZXN0IHVzYWdlOlxuICpcbiAqICA8aGxqcyBsYW5nPVwiaHRtbFwiPlxuICogIDxtZC10YWJzPlxuICogICAgPG1kLXRhYiBsYWJlbD1cIlRhYiAjMVwiPjwvbWQtdGFiPlxuICogICAgPG1kLXRhYiBsYWJlbD1cIlRhYiAjMlwiPjwvbWQtdGFiPlxuICogICAgPG1kLXRhYiBsYWJlbD1cIlRhYiAjM1wiPjwvbWQtdGFiPlxuICogIDxtZC10YWJzPlxuICogIDwvaGxqcz5cbiAqXG4gKiBUYWJzIHN1cHBvcnRzIHRocmVlICgzKSB1c2FnZSBzY2VuYXJpb3M6XG4gKlxuICogIDEuIFRhYnMgKGJ1dHRvbnMgb25seSlcbiAqICAyLiBUYWJzIHdpdGggaW50ZXJuYWwgdmlldyBjb250ZW50XG4gKiAgMy4gVGFicyB3aXRoIGV4dGVybmFsIHZpZXcgY29udGVudFxuICpcbiAqICoqVGFiLW9ubHkqKiBzdXBwb3J0IGlzIHVzZWZ1bCB3aGVuIHRhYiBidXR0b25zIGFyZSB1c2VkIGZvciBjdXN0b20gbmF2aWdhdGlvbiByZWdhcmRsZXNzIG9mIGFueSBvdGhlciBjb21wb25lbnRzLCBjb250ZW50LCBvciB2aWV3cy5cbiAqICoqVGFicyB3aXRoIGludGVybmFsIHZpZXdzKiogYXJlIHRoZSB0cmFkaXRpb25hbCB1c2FnZXMgd2hlcmUgZWFjaCB0YWIgaGFzIGFzc29jaWF0ZWQgdmlldyBjb250ZW50IGFuZCB0aGUgdmlldyBzd2l0Y2hpbmcgaXMgbWFuYWdlZCBpbnRlcm5hbGx5IGJ5IHRoZSBUYWJzIGNvbXBvbmVudC5cbiAqICoqVGFicyB3aXRoIGV4dGVybmFsIHZpZXcgY29udGVudCoqIGlzIG9mdGVuIHVzZWZ1bCB3aGVuIGNvbnRlbnQgYXNzb2NpYXRlZCB3aXRoIGVhY2ggdGFiIGlzIGluZGVwZW5kZW50bHkgbWFuYWdlZCBhbmQgZGF0YS1iaW5kaW5nIG5vdGlmaWNhdGlvbnMgYW5ub3VuY2UgdGFiIHNlbGVjdGlvbiBjaGFuZ2VzLlxuICpcbiAqID4gQXMgYSBwZXJmb3JtYW5jZSBib251cywgaWYgdGhlIHRhYiBjb250ZW50IGlzIG1hbmFnZWQgaW50ZXJuYWxseSB0aGVuIHRoZSBub24tYWN0aXZlIChub24tdmlzaWJsZSkgdGFiIGNvbnRlbnRzIGFyZSB0ZW1wb3JhcmlseSBkaXNjb25uZWN0ZWQgZnJvbSB0aGUgYCRzY29wZS4kZGlnZXN0KClgIHByb2Nlc3Nlczsgd2hpY2ggcmVzdHJpY3RzIGFuZCBvcHRpbWl6ZXMgRE9NIHVwZGF0ZXMgdG8gb25seSB0aGUgY3VycmVudGx5IGFjdGl2ZSB0YWIuXG4gKlxuICogQWRkaXRpb25hbCBmZWF0dXJlcyBhbHNvIGluY2x1ZGU6XG4gKlxuICogKiAgQ29udGVudCBjYW4gaW5jbHVkZSBhbnkgbWFya3VwLlxuICogKiAgSWYgYSB0YWIgaXMgZGlzYWJsZWQgd2hpbGUgYWN0aXZlL3NlbGVjdGVkLCB0aGVuIHRoZSBuZXh0IHRhYiB3aWxsIGJlIGF1dG8tc2VsZWN0ZWQuXG4gKiAqICBJZiB0aGUgY3VycmVudGx5IGFjdGl2ZSB0YWIgaXMgdGhlIGxhc3QgdGFiLCB0aGVuIG5leHQoKSBhY3Rpb24gd2lsbCBzZWxlY3QgdGhlIGZpcnN0IHRhYi5cbiAqICogIEFueSBtYXJrdXAgKG90aGVyIHRoYW4gKipgPG1kLXRhYj5gKiogdGFncykgd2lsbCBiZSB0cmFuc2NsdWRlZCBpbnRvIHRoZSB0YWIgaGVhZGVyIGFyZWEgQkVGT1JFIHRoZSB0YWIgYnV0dG9ucy5cbiAqXG4gKiAjIyMgRXhwbGFuYXRpb24gb2YgdGFiIHN0cmV0Y2hpbmdcbiAqXG4gKiBJbml0aWFsbHksIHRhYnMgd2lsbCBoYXZlIGFuIGluaGVyZW50IHNpemUuICBUaGlzIHNpemUgd2lsbCBlaXRoZXIgYmUgZGVmaW5lZCBieSBob3cgbXVjaCBzcGFjZSBpcyBuZWVkZWQgdG8gYWNjb21tb2RhdGUgdGhlaXIgdGV4dCBvciBzZXQgYnkgdGhlIHVzZXIgdGhyb3VnaCBDU1MuICBDYWxjdWxhdGlvbnMgd2lsbCBiZSBiYXNlZCBvbiB0aGlzIHNpemUuXG4gKlxuICogT24gbW9iaWxlIGRldmljZXMsIHRhYnMgd2lsbCBiZSBleHBhbmRlZCB0byBmaWxsIHRoZSBhdmFpbGFibGUgaG9yaXpvbnRhbCBzcGFjZS4gIFdoZW4gdGhpcyBoYXBwZW5zLCBhbGwgdGFicyB3aWxsIGJlY29tZSB0aGUgc2FtZSBzaXplLlxuICpcbiAqIE9uIGRlc2t0b3BzLCBieSBkZWZhdWx0LCBzdHJldGNoaW5nIHdpbGwgbmV2ZXIgb2NjdXIuXG4gKlxuICogVGhpcyBkZWZhdWx0IGJlaGF2aW9yIGNhbiBiZSBvdmVycmlkZGVuIHRocm91Z2ggdGhlIGBtZC1zdHJldGNoLXRhYnNgIGF0dHJpYnV0ZS4gIEhlcmUgaXMgYSB0YWJsZSBzaG93aW5nIHdoZW4gc3RyZXRjaGluZyB3aWxsIG9jY3VyOlxuICpcbiAqIGBtZC1zdHJldGNoLXRhYnNgIHwgbW9iaWxlICAgIHwgZGVza3RvcFxuICogLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tfC0tLS0tLS0tXG4gKiBgYXV0b2AgICAgICAgICAgICB8IHN0cmV0Y2hlZCB8IC0tLVxuICogYGFsd2F5c2AgICAgICAgICAgfCBzdHJldGNoZWQgfCBzdHJldGNoZWRcbiAqIGBuZXZlcmAgICAgICAgICAgIHwgLS0tICAgICAgIHwgLS0tXG4gKlxuICogQHBhcmFtIHtpbnRlZ2VyPX0gbWQtc2VsZWN0ZWQgSW5kZXggb2YgdGhlIGFjdGl2ZS9zZWxlY3RlZCB0YWJcbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG1kLW5vLWluayBJZiBwcmVzZW50LCBkaXNhYmxlcyBpbmsgcmlwcGxlIGVmZmVjdHMuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBtZC1uby1iYXIgSWYgcHJlc2VudCwgZGlzYWJsZXMgdGhlIHNlbGVjdGlvbiBpbmsgYmFyLlxuICogQHBhcmFtIHtzdHJpbmc9fSAgbWQtYWxpZ24tdGFicyBBdHRyaWJ1dGUgdG8gaW5kaWNhdGUgcG9zaXRpb24gb2YgdGFiIGJ1dHRvbnM6IGBib3R0b21gIG9yIGB0b3BgOyBkZWZhdWx0IGlzIGB0b3BgXG4gKiBAcGFyYW0ge3N0cmluZz19IG1kLXN0cmV0Y2gtdGFicyBBdHRyaWJ1dGUgdG8gaW5kaWNhdGUgd2hldGhlciBvciBub3QgdG8gc3RyZXRjaCB0YWJzOiBgYXV0b2AsIGBhbHdheXNgLCBvciBgbmV2ZXJgOyBkZWZhdWx0IGlzIGBhdXRvYFxuICpcbiAqIEB1c2FnZVxuICogPGhsanMgbGFuZz1cImh0bWxcIj5cbiAqIDxtZC10YWJzIG1kLXNlbGVjdGVkPVwic2VsZWN0ZWRJbmRleFwiID5cbiAqICAgPGltZyBuZy1zcmM9XCJpbWcvYW5ndWxhci5wbmdcIiBjbGFzcz1cImNlbnRlcmVkXCI+XG4gKlxuICogICA8bWQtdGFiXG4gKiAgICAgIG5nLXJlcGVhdD1cInRhYiBpbiB0YWJzIHwgb3JkZXJCeTpwcmVkaWNhdGU6cmV2ZXJzZWRcIlxuICogICAgICBtZC1vbi1zZWxlY3Q9XCJvblRhYlNlbGVjdGVkKHRhYilcIlxuICogICAgICBtZC1vbi1kZXNlbGVjdD1cImFubm91bmNlRGVzZWxlY3RlZCh0YWIpXCJcbiAqICAgICAgZGlzYWJsZWQ9XCJ0YWIuZGlzYWJsZWRcIiA+XG4gKlxuICogICAgICAgPG1kLXRhYi1sYWJlbD5cbiAqICAgICAgICAgICB7e3RhYi50aXRsZX19XG4gKiAgICAgICAgICAgPGltZyBzcmM9XCJpbWcvcmVtb3ZlVGFiLnBuZ1wiXG4gKiAgICAgICAgICAgICAgICBuZy1jbGljaz1cInJlbW92ZVRhYih0YWIpXCJcbiAqICAgICAgICAgICAgICAgIGNsYXNzPVwiZGVsZXRlXCIgPlxuICogICAgICAgPC9tZC10YWItbGFiZWw+XG4gKlxuICogICAgICAge3t0YWIuY29udGVudH19XG4gKlxuICogICA8L21kLXRhYj5cbiAqXG4gKiA8L21kLXRhYnM+XG4gKiA8L2hsanM+XG4gKlxuICovXG5mdW5jdGlvbiBUYWJzRGlyZWN0aXZlKCRtZFRoZW1pbmcpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIGNvbnRyb2xsZXI6ICckbWRUYWJzJyxcbiAgICByZXF1aXJlOiAnbWRUYWJzJyxcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgIHNjb3BlOiB7XG4gICAgICBzZWxlY3RlZEluZGV4OiAnPT9tZFNlbGVjdGVkJ1xuICAgIH0sXG4gICAgdGVtcGxhdGU6XG4gICAgICAnPHNlY3Rpb24gY2xhc3M9XCJtZC1oZWFkZXJcIiAnICtcbiAgICAgICAgJ25nLWNsYXNzPVwie1xcJ21kLXBhZ2luYXRpbmdcXCc6IHBhZ2luYXRpb24uYWN0aXZlfVwiPicgK1xuXG4gICAgICAgICc8YnV0dG9uIGNsYXNzPVwibWQtcGFnaW5hdG9yIG1kLXByZXZcIiAnICtcbiAgICAgICAgICAnbmctaWY9XCJwYWdpbmF0aW9uLmFjdGl2ZSAmJiBwYWdpbmF0aW9uLmhhc1ByZXZcIiAnICtcbiAgICAgICAgICAnbmctY2xpY2s9XCJwYWdpbmF0aW9uLmNsaWNrUHJldmlvdXMoKVwiICcgK1xuICAgICAgICAgICdhcmlhLWhpZGRlbj1cInRydWVcIj4nICtcbiAgICAgICAgJzwvYnV0dG9uPicgK1xuXG4gICAgICAgIC8vIG92ZXJmbG93OiBoaWRkZW4gY29udGFpbmVyIHdoZW4gcGFnaW5hdGluZ1xuICAgICAgICAnPGRpdiBjbGFzcz1cIm1kLWhlYWRlci1pdGVtcy1jb250YWluZXJcIiBtZC10YWJzLXBhZ2luYXRpb24+JyArXG4gICAgICAgICAgLy8gZmxleCBjb250YWluZXIgZm9yIDxtZC10YWI+IGVsZW1lbnRzXG4gICAgICAgICAgJzxkaXYgY2xhc3M9XCJtZC1oZWFkZXItaXRlbXNcIj4nICtcbiAgICAgICAgICAgICc8bWQtdGFicy1pbmstYmFyPjwvbWQtdGFicy1pbmstYmFyPicgK1xuICAgICAgICAgICc8L2Rpdj4nICtcbiAgICAgICAgJzwvZGl2PicgK1xuXG4gICAgICAgICc8YnV0dG9uIGNsYXNzPVwibWQtcGFnaW5hdG9yIG1kLW5leHRcIiAnICtcbiAgICAgICAgICAnbmctaWY9XCJwYWdpbmF0aW9uLmFjdGl2ZSAmJiBwYWdpbmF0aW9uLmhhc05leHRcIiAnICtcbiAgICAgICAgICAnbmctY2xpY2s9XCJwYWdpbmF0aW9uLmNsaWNrTmV4dCgpXCIgJyArXG4gICAgICAgICAgJ2FyaWEtaGlkZGVuPVwidHJ1ZVwiPicgK1xuICAgICAgICAnPC9idXR0b24+JyArXG5cbiAgICAgICc8L3NlY3Rpb24+JyArXG4gICAgICAnPHNlY3Rpb24gY2xhc3M9XCJtZC10YWJzLWNvbnRlbnRcIj48L3NlY3Rpb24+JyxcbiAgICBsaW5rOiBwb3N0TGlua1xuICB9O1xuXG4gIGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyLCB0YWJzQ3RybCwgdHJhbnNjbHVkZSkge1xuXG4gICAgc2NvcGUuc3RyZXRjaFRhYnMgPSBhdHRyLmhhc093blByb3BlcnR5KCdtZFN0cmV0Y2hUYWJzJykgPyBhdHRyLm1kU3RyZXRjaFRhYnMgfHwgJ2Fsd2F5cycgOiAnYXV0byc7XG5cbiAgICAkbWRUaGVtaW5nKGVsZW1lbnQpO1xuICAgIGNvbmZpZ3VyZUFyaWEoKTtcbiAgICB3YXRjaFNlbGVjdGVkKCk7XG5cbiAgICB0cmFuc2NsdWRlKHNjb3BlLiRwYXJlbnQsIGZ1bmN0aW9uKGNsb25lKSB7XG4gICAgICBhbmd1bGFyLmVsZW1lbnQoZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKCcubWQtaGVhZGVyLWl0ZW1zJykpLmFwcGVuZChjbG9uZSk7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBjb25maWd1cmVBcmlhKCkge1xuICAgICAgZWxlbWVudC5hdHRyKCdyb2xlJywgJ3RhYmxpc3QnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3YXRjaFNlbGVjdGVkKCkge1xuICAgICAgc2NvcGUuJHdhdGNoKCdzZWxlY3RlZEluZGV4JywgZnVuY3Rpb24gd2F0Y2hTZWxlY3RlZEluZGV4KG5ld0luZGV4LCBvbGRJbmRleCkge1xuICAgICAgICBpZiAob2xkSW5kZXggPT0gbmV3SW5kZXgpIHJldHVybjtcbiAgICAgICAgdmFyIHJpZ2h0VG9MZWZ0ID0gb2xkSW5kZXggPiBuZXdJbmRleDtcbiAgICAgICAgdGFic0N0cmwuZGVzZWxlY3QodGFic0N0cmwuaXRlbUF0KG9sZEluZGV4KSwgcmlnaHRUb0xlZnQpO1xuXG4gICAgICAgIGlmICh0YWJzQ3RybC5pblJhbmdlKG5ld0luZGV4KSkge1xuICAgICAgICAgIHZhciBuZXdUYWIgPSB0YWJzQ3RybC5pdGVtQXQobmV3SW5kZXgpO1xuICAgICAgICAgIHdoaWxlIChuZXdUYWIgJiYgbmV3VGFiLmlzRGlzYWJsZWQoKSkge1xuICAgICAgICAgICAgbmV3VGFiID0gbmV3SW5kZXggPiBvbGRJbmRleCBcbiAgICAgICAgICAgICAgICA/IHRhYnNDdHJsLm5leHQobmV3VGFiKVxuICAgICAgICAgICAgICAgIDogdGFic0N0cmwucHJldmlvdXMobmV3VGFiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGFic0N0cmwuc2VsZWN0KG5ld1RhYiwgcmlnaHRUb0xlZnQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cblRhYnNEaXJlY3RpdmUuJGluamVjdCA9IFtcIiRtZFRoZW1pbmdcIl07XG59KSgpO1xuXG5hbmd1bGFyLm1vZHVsZShcIm1hdGVyaWFsLmNvcmVcIikuY29uc3RhbnQoXCIkTURfVEhFTUVfQ1NTXCIsIFwibWQtYmFja2Ryb3AubWQtb3BhcXVlLm1kLVRIRU1FX05BTUUtdGhlbWUgeyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7Zm9yZWdyb3VuZC00LTAuNX19JzsgfW1kLWJvdHRvbS1zaGVldC5tZC1USEVNRV9OQU1FLXRoZW1lIHsgIGJhY2tncm91bmQtY29sb3I6ICd7e2JhY2tncm91bmQtNTB9fSc7ICBib3JkZXItdG9wLWNvbG9yOiAne3tiYWNrZ3JvdW5kLTMwMH19JzsgfSAgbWQtYm90dG9tLXNoZWV0Lm1kLVRIRU1FX05BTUUtdGhlbWUubWQtbGlzdCBtZC1pdGVtIHsgICAgY29sb3I6ICd7e2ZvcmVncm91bmQtMX19JzsgfSAgbWQtYm90dG9tLXNoZWV0Lm1kLVRIRU1FX05BTUUtdGhlbWUgLm1kLXN1YmhlYWRlciB7ICAgIGJhY2tncm91bmQtY29sb3I6ICd7e2JhY2tncm91bmQtNTB9fSc7IH0gIG1kLWJvdHRvbS1zaGVldC5tZC1USEVNRV9OQU1FLXRoZW1lIC5tZC1zdWJoZWFkZXIgeyAgICBjb2xvcjogJ3t7Zm9yZWdyb3VuZC0xfX0nOyB9bWQtdG9vbGJhciAubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtZmFiIHsgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlOyB9Lm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lIHsgIGJvcmRlci1yYWRpdXM6IDNweDsgfSAgLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lOm5vdChbZGlzYWJsZWRdKTpob3ZlciwgLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lOm5vdChbZGlzYWJsZWRdKTpmb2N1cyB7ICAgIGJhY2tncm91bmQtY29sb3I6ICd7e2JhY2tncm91bmQtNTAwLTAuMn19JzsgfSAgLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLXByaW1hcnkgeyAgICBjb2xvcjogJ3t7cHJpbWFyeS1jb2xvcn19JzsgfSAgICAubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtcHJpbWFyeS5tZC1yYWlzZWQsIC5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1wcmltYXJ5Lm1kLWZhYiB7ICAgICAgY29sb3I6ICd7e3ByaW1hcnktY29udHJhc3R9fSc7ICAgICAgYmFja2dyb3VuZC1jb2xvcjogJ3t7cHJpbWFyeS1jb2xvcn19JzsgfSAgICAgIC5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1wcmltYXJ5Lm1kLXJhaXNlZDpub3QoW2Rpc2FibGVkXSk6aG92ZXIsIC5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1wcmltYXJ5Lm1kLXJhaXNlZDpub3QoW2Rpc2FibGVkXSk6Zm9jdXMsIC5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1wcmltYXJ5Lm1kLWZhYjpub3QoW2Rpc2FibGVkXSk6aG92ZXIsIC5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1wcmltYXJ5Lm1kLWZhYjpub3QoW2Rpc2FibGVkXSk6Zm9jdXMgeyAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJ3t7cHJpbWFyeS02MDB9fSc7IH0gIC5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1mYWIgeyAgICBib3JkZXItcmFkaXVzOiA1MCU7ICAgIGJhY2tncm91bmQtY29sb3I6ICd7e2FjY2VudC1jb2xvcn19JzsgICAgY29sb3I6ICd7e2FjY2VudC1jb250cmFzdH19JzsgfSAgICAubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtZmFiOm5vdChbZGlzYWJsZWRdKTpob3ZlciwgLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWZhYjpub3QoW2Rpc2FibGVkXSk6Zm9jdXMgeyAgICAgIGJhY2tncm91bmQtY29sb3I6ICd7e2FjY2VudC1BNzAwfX0nOyB9ICAubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtcmFpc2VkIHsgICAgY29sb3I6ICd7e2JhY2tncm91bmQtY29udHJhc3R9fSc7ICAgIGJhY2tncm91bmQtY29sb3I6ICd7e2JhY2tncm91bmQtNTB9fSc7IH0gICAgLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLXJhaXNlZDpub3QoW2Rpc2FibGVkXSk6aG92ZXIsIC5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1yYWlzZWQ6bm90KFtkaXNhYmxlZF0pOmZvY3VzIHsgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAne3tiYWNrZ3JvdW5kLTIwMH19JzsgfSAgLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLXdhcm4geyAgICBjb2xvcjogJ3t7d2Fybi1jb2xvcn19JzsgfSAgICAubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtd2Fybi5tZC1yYWlzZWQsIC5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC13YXJuLm1kLWZhYiB7ICAgICAgY29sb3I6ICd7e3dhcm4tY29udHJhc3R9fSc7ICAgICAgYmFja2dyb3VuZC1jb2xvcjogJ3t7d2Fybi1jb2xvcn19JzsgfSAgICAgIC5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC13YXJuLm1kLXJhaXNlZDpub3QoW2Rpc2FibGVkXSk6aG92ZXIsIC5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC13YXJuLm1kLXJhaXNlZDpub3QoW2Rpc2FibGVkXSk6Zm9jdXMsIC5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC13YXJuLm1kLWZhYjpub3QoW2Rpc2FibGVkXSk6aG92ZXIsIC5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC13YXJuLm1kLWZhYjpub3QoW2Rpc2FibGVkXSk6Zm9jdXMgeyAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJ3t7d2Fybi03MDB9fSc7IH0gIC5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1hY2NlbnQgeyAgICBjb2xvcjogJ3t7YWNjZW50LWNvbG9yfX0nOyB9ICAgIC5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1hY2NlbnQubWQtcmFpc2VkLCAubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtYWNjZW50Lm1kLWZhYiB7ICAgICAgY29sb3I6ICd7e2FjY2VudC1jb250cmFzdH19JzsgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAne3thY2NlbnQtY29sb3J9fSc7IH0gICAgICAubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtYWNjZW50Lm1kLXJhaXNlZDpub3QoW2Rpc2FibGVkXSk6aG92ZXIsIC5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1hY2NlbnQubWQtcmFpc2VkOm5vdChbZGlzYWJsZWRdKTpmb2N1cywgLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWFjY2VudC5tZC1mYWI6bm90KFtkaXNhYmxlZF0pOmhvdmVyLCAubWQtYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtYWNjZW50Lm1kLWZhYjpub3QoW2Rpc2FibGVkXSk6Zm9jdXMgeyAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJ3t7YWNjZW50LTcwMH19JzsgfSAgLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lW2Rpc2FibGVkXSwgLm1kLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLXJhaXNlZFtkaXNhYmxlZF0sIC5tZC1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1mYWJbZGlzYWJsZWRdIHsgICAgY29sb3I6ICd7e2ZvcmVncm91bmQtM319JzsgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7ICAgIGN1cnNvcjogbm90LWFsbG93ZWQ7IH1tZC1jYXJkLm1kLVRIRU1FX05BTUUtdGhlbWUgeyAgYm9yZGVyLXJhZGl1czogMnB4OyB9ICBtZC1jYXJkLm1kLVRIRU1FX05BTUUtdGhlbWUgLm1kLWNhcmQtaW1hZ2UgeyAgICBib3JkZXItcmFkaXVzOiAycHggMnB4IDAgMDsgfW1kLWNoZWNrYm94Lm1kLVRIRU1FX05BTUUtdGhlbWUgLm1kLXJpcHBsZSB7ICBjb2xvcjogJ3t7YWNjZW50LTYwMH19JzsgfW1kLWNoZWNrYm94Lm1kLVRIRU1FX05BTUUtdGhlbWUubWQtY2hlY2tlZCAubWQtcmlwcGxlIHsgIGNvbG9yOiAne3tiYWNrZ3JvdW5kLTYwMH19JzsgfW1kLWNoZWNrYm94Lm1kLVRIRU1FX05BTUUtdGhlbWUgLm1kLWljb24geyAgYm9yZGVyLWNvbG9yOiAne3tmb3JlZ3JvdW5kLTJ9fSc7IH1tZC1jaGVja2JveC5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWNoZWNrZWQgLm1kLWljb24geyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7YWNjZW50LWNvbG9yLTAuODd9fSc7IH1tZC1jaGVja2JveC5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWNoZWNrZWQgLm1kLWljb246YWZ0ZXIgeyAgYm9yZGVyLWNvbG9yOiAne3tiYWNrZ3JvdW5kLTIwMH19JzsgfW1kLWNoZWNrYm94Lm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pLm1kLXByaW1hcnkgLm1kLXJpcHBsZSB7ICBjb2xvcjogJ3t7cHJpbWFyeS02MDB9fSc7IH1tZC1jaGVja2JveC5tZC1USEVNRV9OQU1FLXRoZW1lOm5vdChbZGlzYWJsZWRdKS5tZC1wcmltYXJ5Lm1kLWNoZWNrZWQgLm1kLXJpcHBsZSB7ICBjb2xvcjogJ3t7YmFja2dyb3VuZC02MDB9fSc7IH1tZC1jaGVja2JveC5tZC1USEVNRV9OQU1FLXRoZW1lOm5vdChbZGlzYWJsZWRdKS5tZC1wcmltYXJ5IC5tZC1pY29uIHsgIGJvcmRlci1jb2xvcjogJ3t7Zm9yZWdyb3VuZC0yfX0nOyB9bWQtY2hlY2tib3gubWQtVEhFTUVfTkFNRS10aGVtZTpub3QoW2Rpc2FibGVkXSkubWQtcHJpbWFyeS5tZC1jaGVja2VkIC5tZC1pY29uIHsgIGJhY2tncm91bmQtY29sb3I6ICd7e3ByaW1hcnktY29sb3ItMC44N319JzsgfW1kLWNoZWNrYm94Lm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pLm1kLXByaW1hcnkubWQtY2hlY2tlZCAubWQtaWNvbjphZnRlciB7ICBib3JkZXItY29sb3I6ICd7e2JhY2tncm91bmQtMjAwfX0nOyB9bWQtY2hlY2tib3gubWQtVEhFTUVfTkFNRS10aGVtZTpub3QoW2Rpc2FibGVkXSkubWQtd2FybiAubWQtcmlwcGxlIHsgIGNvbG9yOiAne3t3YXJuLTYwMH19JzsgfW1kLWNoZWNrYm94Lm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pLm1kLXdhcm4gLm1kLWljb24geyAgYm9yZGVyLWNvbG9yOiAne3tmb3JlZ3JvdW5kLTJ9fSc7IH1tZC1jaGVja2JveC5tZC1USEVNRV9OQU1FLXRoZW1lOm5vdChbZGlzYWJsZWRdKS5tZC13YXJuLm1kLWNoZWNrZWQgLm1kLWljb24geyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7d2Fybi1jb2xvci0wLjg3fX0nOyB9bWQtY2hlY2tib3gubWQtVEhFTUVfTkFNRS10aGVtZTpub3QoW2Rpc2FibGVkXSkubWQtd2Fybi5tZC1jaGVja2VkIC5tZC1pY29uOmFmdGVyIHsgIGJvcmRlci1jb2xvcjogJ3t7YmFja2dyb3VuZC0yMDB9fSc7IH1tZC1jaGVja2JveC5tZC1USEVNRV9OQU1FLXRoZW1lW2Rpc2FibGVkXSAubWQtaWNvbiB7ICBib3JkZXItY29sb3I6ICd7e2ZvcmVncm91bmQtM319JzsgfW1kLWNoZWNrYm94Lm1kLVRIRU1FX05BTUUtdGhlbWVbZGlzYWJsZWRdLm1kLWNoZWNrZWQgLm1kLWljb24geyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7Zm9yZWdyb3VuZC0zfX0nOyB9bWQtY29udGVudC5tZC1USEVNRV9OQU1FLXRoZW1lIHsgIGJhY2tncm91bmQtY29sb3I6ICd7e2JhY2tncm91bmQtaHVlLTN9fSc7IH1tZC1kaWFsb2cubWQtVEhFTUVfTkFNRS10aGVtZSB7ICBib3JkZXItcmFkaXVzOiA0cHg7ICBiYWNrZ3JvdW5kLWNvbG9yOiAne3tiYWNrZ3JvdW5kLWh1ZS0zfX0nOyB9ICBtZC1kaWFsb2cubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1jb250ZW50LW92ZXJmbG93IC5tZC1hY3Rpb25zIHsgICAgYm9yZGVyLXRvcC1jb2xvcjogJ3t7Zm9yZWdyb3VuZC00fX0nOyB9bWQtZGl2aWRlci5tZC1USEVNRV9OQU1FLXRoZW1lIHsgIGJvcmRlci10b3AtY29sb3I6ICd7e2ZvcmVncm91bmQtNH19JzsgfW1kLWlucHV0LWNvbnRhaW5lci5tZC1USEVNRV9OQU1FLXRoZW1lIC5tZC1pbnB1dCB7ICBjb2xvcjogJ3t7Zm9yZWdyb3VuZC0xfX0nOyAgYm9yZGVyLWNvbG9yOiAne3tmb3JlZ3JvdW5kLTR9fSc7ICB0ZXh0LXNoYWRvdzogJ3t7Zm9yZWdyb3VuZC1zaGFkb3d9fSc7IH0gIG1kLWlucHV0LWNvbnRhaW5lci5tZC1USEVNRV9OQU1FLXRoZW1lIC5tZC1pbnB1dDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciwgbWQtaW5wdXQtY29udGFpbmVyLm1kLVRIRU1FX05BTUUtdGhlbWUgLm1kLWlucHV0OjotbW96LXBsYWNlaG9sZGVyLCBtZC1pbnB1dC1jb250YWluZXIubWQtVEhFTUVfTkFNRS10aGVtZSAubWQtaW5wdXQ6LW1vei1wbGFjZWhvbGRlciwgbWQtaW5wdXQtY29udGFpbmVyLm1kLVRIRU1FX05BTUUtdGhlbWUgLm1kLWlucHV0Oi1tcy1pbnB1dC1wbGFjZWhvbGRlciB7ICAgIGNvbG9yOiAne3tmb3JlZ3JvdW5kLTN9fSc7IH1tZC1pbnB1dC1jb250YWluZXIubWQtVEhFTUVfTkFNRS10aGVtZSBsYWJlbCwgbWQtaW5wdXQtY29udGFpbmVyLm1kLVRIRU1FX05BTUUtdGhlbWUgLm1kLXBsYWNlaG9sZGVyIHsgIHRleHQtc2hhZG93OiAne3tmb3JlZ3JvdW5kLXNoYWRvd319JzsgIGNvbG9yOiAne3tmb3JlZ3JvdW5kLTN9fSc7IH1tZC1pbnB1dC1jb250YWluZXIubWQtVEhFTUVfTkFNRS10aGVtZTpub3QoLm1kLWlucHV0LWludmFsaWQpLm1kLWlucHV0LWhhcy12YWx1ZSBsYWJlbCB7ICBjb2xvcjogJ3t7Zm9yZWdyb3VuZC0yfX0nOyB9bWQtaW5wdXQtY29udGFpbmVyLm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KC5tZC1pbnB1dC1pbnZhbGlkKS5tZC1pbnB1dC1mb2N1c2VkIC5tZC1pbnB1dCB7ICBib3JkZXItY29sb3I6ICd7e3ByaW1hcnktNTAwfX0nOyB9bWQtaW5wdXQtY29udGFpbmVyLm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KC5tZC1pbnB1dC1pbnZhbGlkKS5tZC1pbnB1dC1mb2N1c2VkIGxhYmVsIHsgIGNvbG9yOiAne3twcmltYXJ5LTUwMH19JzsgfW1kLWlucHV0LWNvbnRhaW5lci5tZC1USEVNRV9OQU1FLXRoZW1lOm5vdCgubWQtaW5wdXQtaW52YWxpZCkubWQtaW5wdXQtZm9jdXNlZC5tZC1hY2NlbnQgLm1kLWlucHV0IHsgIGJvcmRlci1jb2xvcjogJ3t7YWNjZW50LTUwMH19JzsgfW1kLWlucHV0LWNvbnRhaW5lci5tZC1USEVNRV9OQU1FLXRoZW1lOm5vdCgubWQtaW5wdXQtaW52YWxpZCkubWQtaW5wdXQtZm9jdXNlZC5tZC1hY2NlbnQgbGFiZWwgeyAgY29sb3I6ICd7e2FjY2VudC01MDB9fSc7IH1tZC1pbnB1dC1jb250YWluZXIubWQtVEhFTUVfTkFNRS10aGVtZTpub3QoLm1kLWlucHV0LWludmFsaWQpLm1kLWlucHV0LWZvY3VzZWQubWQtd2FybiAubWQtaW5wdXQgeyAgYm9yZGVyLWNvbG9yOiAne3t3YXJuLTUwMH19JzsgfW1kLWlucHV0LWNvbnRhaW5lci5tZC1USEVNRV9OQU1FLXRoZW1lOm5vdCgubWQtaW5wdXQtaW52YWxpZCkubWQtaW5wdXQtZm9jdXNlZC5tZC13YXJuIGxhYmVsIHsgIGNvbG9yOiAne3t3YXJuLTUwMH19JzsgfW1kLWlucHV0LWNvbnRhaW5lci5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWlucHV0LWludmFsaWQgLm1kLWlucHV0IHsgIGJvcmRlci1jb2xvcjogJ3t7d2Fybi01MDB9fSc7IH1tZC1pbnB1dC1jb250YWluZXIubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1pbnB1dC1pbnZhbGlkIGxhYmVsIHsgIGNvbG9yOiAne3t3YXJuLTUwMH19JzsgfW1kLWlucHV0LWNvbnRhaW5lci5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWlucHV0LWludmFsaWQgbmctbWVzc2FnZSwgbWQtaW5wdXQtY29udGFpbmVyLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtaW5wdXQtaW52YWxpZCBkYXRhLW5nLW1lc3NhZ2UsIG1kLWlucHV0LWNvbnRhaW5lci5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWlucHV0LWludmFsaWQgeC1uZy1tZXNzYWdlLCBtZC1pbnB1dC1jb250YWluZXIubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1pbnB1dC1pbnZhbGlkIFtuZy1tZXNzYWdlXSwgbWQtaW5wdXQtY29udGFpbmVyLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtaW5wdXQtaW52YWxpZCBbZGF0YS1uZy1tZXNzYWdlXSwgbWQtaW5wdXQtY29udGFpbmVyLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtaW5wdXQtaW52YWxpZCBbeC1uZy1tZXNzYWdlXSwgbWQtaW5wdXQtY29udGFpbmVyLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtaW5wdXQtaW52YWxpZCAubWQtY2hhci1jb3VudGVyIHsgIGNvbG9yOiAne3t3YXJuLTUwMH19JzsgfW1kLWlucHV0LWNvbnRhaW5lci5tZC1USEVNRV9OQU1FLXRoZW1lIC5tZC1pbnB1dFtkaXNhYmxlZF0geyAgYm9yZGVyLWJvdHRvbS1jb2xvcjogdHJhbnNwYXJlbnQ7ICBjb2xvcjogJ3t7Zm9yZWdyb3VuZC0zfX0nOyAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCAne3tmb3JlZ3JvdW5kLTR9fScgMCUsICd7e2ZvcmVncm91bmQtNH19JyAzMyUsIHRyYW5zcGFyZW50IDAlKTsgfW1kLXByb2dyZXNzLWNpcmN1bGFyLm1kLVRIRU1FX05BTUUtdGhlbWUgeyAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IH0gIG1kLXByb2dyZXNzLWNpcmN1bGFyLm1kLVRIRU1FX05BTUUtdGhlbWUgLm1kLWlubmVyIC5tZC1nYXAgeyAgICBib3JkZXItdG9wLWNvbG9yOiAne3twcmltYXJ5LWNvbG9yfX0nOyAgICBib3JkZXItYm90dG9tLWNvbG9yOiAne3twcmltYXJ5LWNvbG9yfX0nOyB9ICBtZC1wcm9ncmVzcy1jaXJjdWxhci5tZC1USEVNRV9OQU1FLXRoZW1lIC5tZC1pbm5lciAubWQtbGVmdCAubWQtaGFsZi1jaXJjbGUsIG1kLXByb2dyZXNzLWNpcmN1bGFyLm1kLVRIRU1FX05BTUUtdGhlbWUgLm1kLWlubmVyIC5tZC1yaWdodCAubWQtaGFsZi1jaXJjbGUgeyAgICBib3JkZXItdG9wLWNvbG9yOiAne3twcmltYXJ5LWNvbG9yfX0nOyB9ICBtZC1wcm9ncmVzcy1jaXJjdWxhci5tZC1USEVNRV9OQU1FLXRoZW1lIC5tZC1pbm5lciAubWQtcmlnaHQgLm1kLWhhbGYtY2lyY2xlIHsgICAgYm9yZGVyLXJpZ2h0LWNvbG9yOiAne3twcmltYXJ5LWNvbG9yfX0nOyB9ICBtZC1wcm9ncmVzcy1jaXJjdWxhci5tZC1USEVNRV9OQU1FLXRoZW1lIC5tZC1pbm5lciAubWQtbGVmdCAubWQtaGFsZi1jaXJjbGUgeyAgICBib3JkZXItbGVmdC1jb2xvcjogJ3t7cHJpbWFyeS1jb2xvcn19JzsgfSAgbWQtcHJvZ3Jlc3MtY2lyY3VsYXIubWQtVEhFTUVfTkFNRS10aGVtZS5tZC13YXJuIC5tZC1pbm5lciAubWQtZ2FwIHsgICAgYm9yZGVyLXRvcC1jb2xvcjogJ3t7d2Fybi1jb2xvcn19JzsgICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogJ3t7d2Fybi1jb2xvcn19JzsgfSAgbWQtcHJvZ3Jlc3MtY2lyY3VsYXIubWQtVEhFTUVfTkFNRS10aGVtZS5tZC13YXJuIC5tZC1pbm5lciAubWQtbGVmdCAubWQtaGFsZi1jaXJjbGUsIG1kLXByb2dyZXNzLWNpcmN1bGFyLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtd2FybiAubWQtaW5uZXIgLm1kLXJpZ2h0IC5tZC1oYWxmLWNpcmNsZSB7ICAgIGJvcmRlci10b3AtY29sb3I6ICd7e3dhcm4tY29sb3J9fSc7IH0gIG1kLXByb2dyZXNzLWNpcmN1bGFyLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtd2FybiAubWQtaW5uZXIgLm1kLXJpZ2h0IC5tZC1oYWxmLWNpcmNsZSB7ICAgIGJvcmRlci1yaWdodC1jb2xvcjogJ3t7d2Fybi1jb2xvcn19JzsgfSAgbWQtcHJvZ3Jlc3MtY2lyY3VsYXIubWQtVEhFTUVfTkFNRS10aGVtZS5tZC13YXJuIC5tZC1pbm5lciAubWQtbGVmdCAubWQtaGFsZi1jaXJjbGUgeyAgICBib3JkZXItbGVmdC1jb2xvcjogJ3t7d2Fybi1jb2xvcn19JzsgfSAgbWQtcHJvZ3Jlc3MtY2lyY3VsYXIubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1hY2NlbnQgLm1kLWlubmVyIC5tZC1nYXAgeyAgICBib3JkZXItdG9wLWNvbG9yOiAne3thY2NlbnQtY29sb3J9fSc7ICAgIGJvcmRlci1ib3R0b20tY29sb3I6ICd7e2FjY2VudC1jb2xvcn19JzsgfSAgbWQtcHJvZ3Jlc3MtY2lyY3VsYXIubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1hY2NlbnQgLm1kLWlubmVyIC5tZC1sZWZ0IC5tZC1oYWxmLWNpcmNsZSwgbWQtcHJvZ3Jlc3MtY2lyY3VsYXIubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1hY2NlbnQgLm1kLWlubmVyIC5tZC1yaWdodCAubWQtaGFsZi1jaXJjbGUgeyAgICBib3JkZXItdG9wLWNvbG9yOiAne3thY2NlbnQtY29sb3J9fSc7IH0gIG1kLXByb2dyZXNzLWNpcmN1bGFyLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtYWNjZW50IC5tZC1pbm5lciAubWQtcmlnaHQgLm1kLWhhbGYtY2lyY2xlIHsgICAgYm9yZGVyLXJpZ2h0LWNvbG9yOiAne3thY2NlbnQtY29sb3J9fSc7IH0gIG1kLXByb2dyZXNzLWNpcmN1bGFyLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtYWNjZW50IC5tZC1pbm5lciAubWQtbGVmdCAubWQtaGFsZi1jaXJjbGUgeyAgICBib3JkZXItbGVmdC1jb2xvcjogJ3t7YWNjZW50LWNvbG9yfX0nOyB9bWQtcHJvZ3Jlc3MtbGluZWFyLm1kLVRIRU1FX05BTUUtdGhlbWUgLm1kLWNvbnRhaW5lciB7ICBiYWNrZ3JvdW5kLWNvbG9yOiAne3twcmltYXJ5LTEwMH19JzsgfW1kLXByb2dyZXNzLWxpbmVhci5tZC1USEVNRV9OQU1FLXRoZW1lIC5tZC1iYXIgeyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7cHJpbWFyeS1jb2xvcn19JzsgfW1kLXByb2dyZXNzLWxpbmVhci5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLXdhcm4gLm1kLWNvbnRhaW5lciB7ICBiYWNrZ3JvdW5kLWNvbG9yOiAne3t3YXJuLTEwMH19JzsgfW1kLXByb2dyZXNzLWxpbmVhci5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLXdhcm4gLm1kLWJhciB7ICBiYWNrZ3JvdW5kLWNvbG9yOiAne3t3YXJuLWNvbG9yfX0nOyB9bWQtcHJvZ3Jlc3MtbGluZWFyLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtYWNjZW50IC5tZC1jb250YWluZXIgeyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7YWNjZW50LTEwMH19JzsgfW1kLXByb2dyZXNzLWxpbmVhci5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWFjY2VudCAubWQtYmFyIHsgIGJhY2tncm91bmQtY29sb3I6ICd7e2FjY2VudC1jb2xvcn19JzsgfW1kLXByb2dyZXNzLWxpbmVhci5tZC1USEVNRV9OQU1FLXRoZW1lW21kLW1vZGU9YnVmZmVyXS5tZC13YXJuIC5tZC1iYXIxIHsgIGJhY2tncm91bmQtY29sb3I6ICd7e3dhcm4tMTAwfX0nOyB9bWQtcHJvZ3Jlc3MtbGluZWFyLm1kLVRIRU1FX05BTUUtdGhlbWVbbWQtbW9kZT1idWZmZXJdLm1kLXdhcm4gLm1kLWRhc2hlZDpiZWZvcmUgeyAgYmFja2dyb3VuZDogcmFkaWFsLWdyYWRpZW50KCd7e3dhcm4tMTAwfX0nIDAlLCAne3t3YXJuLTEwMH19JyAxNiUsIHRyYW5zcGFyZW50IDQyJSk7IH1tZC1wcm9ncmVzcy1saW5lYXIubWQtVEhFTUVfTkFNRS10aGVtZVttZC1tb2RlPWJ1ZmZlcl0ubWQtYWNjZW50IC5tZC1iYXIxIHsgIGJhY2tncm91bmQtY29sb3I6ICd7e2FjY2VudC0xMDB9fSc7IH1tZC1wcm9ncmVzcy1saW5lYXIubWQtVEhFTUVfTkFNRS10aGVtZVttZC1tb2RlPWJ1ZmZlcl0ubWQtYWNjZW50IC5tZC1kYXNoZWQ6YmVmb3JlIHsgIGJhY2tncm91bmQ6IHJhZGlhbC1ncmFkaWVudCgne3thY2NlbnQtMTAwfX0nIDAlLCAne3thY2NlbnQtMTAwfX0nIDE2JSwgdHJhbnNwYXJlbnQgNDIlKTsgfW1kLXJhZGlvLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lIC5tZC1vZmYgeyAgYm9yZGVyLWNvbG9yOiAne3tmb3JlZ3JvdW5kLTJ9fSc7IH1tZC1yYWRpby1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZSAubWQtb24geyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7YWNjZW50LWNvbG9yLTAuODd9fSc7IH1tZC1yYWRpby1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1jaGVja2VkIC5tZC1vZmYgeyAgYm9yZGVyLWNvbG9yOiAne3thY2NlbnQtY29sb3ItMC44N319JzsgfW1kLXJhZGlvLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWNoZWNrZWQgLm1kLWluay1yaXBwbGUgeyAgY29sb3I6ICd7e2FjY2VudC1jb2xvci0wLjg3fX0nOyB9bWQtcmFkaW8tYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWUgLm1kLWNvbnRhaW5lciAubWQtcmlwcGxlIHsgIGNvbG9yOiAne3thY2NlbnQtNjAwfX0nOyB9bWQtcmFkaW8tYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pLm1kLXByaW1hcnkgLm1kLW9uIHsgIGJhY2tncm91bmQtY29sb3I6ICd7e3ByaW1hcnktY29sb3ItMC44N319JzsgfW1kLXJhZGlvLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lOm5vdChbZGlzYWJsZWRdKS5tZC1wcmltYXJ5Lm1kLWNoZWNrZWQgLm1kLW9mZiB7ICBib3JkZXItY29sb3I6ICd7e3ByaW1hcnktY29sb3ItMC44N319JzsgfW1kLXJhZGlvLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lOm5vdChbZGlzYWJsZWRdKS5tZC1wcmltYXJ5Lm1kLWNoZWNrZWQgLm1kLWluay1yaXBwbGUgeyAgY29sb3I6ICd7e3ByaW1hcnktY29sb3ItMC44N319JzsgfW1kLXJhZGlvLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lOm5vdChbZGlzYWJsZWRdKS5tZC1wcmltYXJ5IC5tZC1jb250YWluZXIgLm1kLXJpcHBsZSB7ICBjb2xvcjogJ3t7cHJpbWFyeS02MDB9fSc7IH1tZC1yYWRpby1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZTpub3QoW2Rpc2FibGVkXSkubWQtd2FybiAubWQtb24geyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7d2Fybi1jb2xvci0wLjg3fX0nOyB9bWQtcmFkaW8tYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pLm1kLXdhcm4ubWQtY2hlY2tlZCAubWQtb2ZmIHsgIGJvcmRlci1jb2xvcjogJ3t7d2Fybi1jb2xvci0wLjg3fX0nOyB9bWQtcmFkaW8tYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pLm1kLXdhcm4ubWQtY2hlY2tlZCAubWQtaW5rLXJpcHBsZSB7ICBjb2xvcjogJ3t7d2Fybi1jb2xvci0wLjg3fX0nOyB9bWQtcmFkaW8tYnV0dG9uLm1kLVRIRU1FX05BTUUtdGhlbWU6bm90KFtkaXNhYmxlZF0pLm1kLXdhcm4gLm1kLWNvbnRhaW5lciAubWQtcmlwcGxlIHsgIGNvbG9yOiAne3t3YXJuLTYwMH19JzsgfW1kLXJhZGlvLWJ1dHRvbi5tZC1USEVNRV9OQU1FLXRoZW1lW2Rpc2FibGVkXSAubWQtY29udGFpbmVyIC5tZC1vZmYgeyAgYm9yZGVyLWNvbG9yOiAne3tmb3JlZ3JvdW5kLTN9fSc7IH1tZC1yYWRpby1idXR0b24ubWQtVEhFTUVfTkFNRS10aGVtZVtkaXNhYmxlZF0gLm1kLWNvbnRhaW5lciAubWQtb24geyAgYm9yZGVyLWNvbG9yOiAne3tmb3JlZ3JvdW5kLTN9fSc7IH1tZC1yYWRpby1ncm91cC5tZC1USEVNRV9OQU1FLXRoZW1lOmZvY3VzOm5vdCg6ZW1wdHkpIHsgIGJvcmRlci1jb2xvcjogJ3t7Zm9yZWdyb3VuZC0xfX0nOyB9bWQtc2lkZW5hdi5tZC1USEVNRV9OQU1FLXRoZW1lIHsgIGJhY2tncm91bmQtY29sb3I6ICd7e2JhY2tncm91bmQtaHVlLTN9fSc7IH1tZC1zbGlkZXIubWQtVEhFTUVfTkFNRS10aGVtZSAubWQtdHJhY2sgeyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7Zm9yZWdyb3VuZC0zfX0nOyB9bWQtc2xpZGVyLm1kLVRIRU1FX05BTUUtdGhlbWUgLm1kLXRyYWNrLXRpY2tzIHsgIGJhY2tncm91bmQtY29sb3I6ICd7e2ZvcmVncm91bmQtNH19JzsgfW1kLXNsaWRlci5tZC1USEVNRV9OQU1FLXRoZW1lIC5tZC1mb2N1cy10aHVtYiB7ICBiYWNrZ3JvdW5kLWNvbG9yOiAne3tmb3JlZ3JvdW5kLTJ9fSc7IH1tZC1zbGlkZXIubWQtVEhFTUVfTkFNRS10aGVtZSAubWQtZm9jdXMtcmluZyB7ICBib3JkZXItY29sb3I6ICd7e2ZvcmVncm91bmQtNH19JzsgfW1kLXNsaWRlci5tZC1USEVNRV9OQU1FLXRoZW1lIC5tZC1kaXNhYmxlZC10aHVtYiB7ICBib3JkZXItY29sb3I6ICd7e2JhY2tncm91bmQtaHVlLTN9fSc7IH1tZC1zbGlkZXIubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1taW4gLm1kLXRodW1iOmFmdGVyIHsgIGJhY2tncm91bmQtY29sb3I6ICd7e2JhY2tncm91bmQtaHVlLTN9fSc7IH1tZC1zbGlkZXIubWQtVEhFTUVfTkFNRS10aGVtZSAubWQtdHJhY2subWQtdHJhY2stZmlsbCB7ICBiYWNrZ3JvdW5kLWNvbG9yOiAne3twcmltYXJ5LWNvbG9yfX0nOyB9bWQtc2xpZGVyLm1kLVRIRU1FX05BTUUtdGhlbWUgLm1kLXRodW1iOmFmdGVyIHsgIGJvcmRlci1jb2xvcjogJ3t7cHJpbWFyeS1jb2xvcn19JzsgIGJhY2tncm91bmQtY29sb3I6ICd7e3ByaW1hcnktY29sb3J9fSc7IH1tZC1zbGlkZXIubWQtVEhFTUVfTkFNRS10aGVtZSAubWQtc2lnbiB7ICBiYWNrZ3JvdW5kLWNvbG9yOiAne3twcmltYXJ5LWNvbG9yfX0nOyB9ICBtZC1zbGlkZXIubWQtVEhFTUVfTkFNRS10aGVtZSAubWQtc2lnbjphZnRlciB7ICAgIGJvcmRlci10b3AtY29sb3I6ICd7e3ByaW1hcnktY29sb3J9fSc7IH1tZC1zbGlkZXIubWQtVEhFTUVfTkFNRS10aGVtZSAubWQtdGh1bWItdGV4dCB7ICBjb2xvcjogJ3t7cHJpbWFyeS1jb250cmFzdH19JzsgfW1kLXNsaWRlci5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLXdhcm4gLm1kLXRyYWNrLWZpbGwgeyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7d2Fybi1jb2xvcn19JzsgfW1kLXNsaWRlci5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLXdhcm4gLm1kLXRodW1iOmFmdGVyIHsgIGJvcmRlci1jb2xvcjogJ3t7d2Fybi1jb2xvcn19JzsgIGJhY2tncm91bmQtY29sb3I6ICd7e3dhcm4tY29sb3J9fSc7IH1tZC1zbGlkZXIubWQtVEhFTUVfTkFNRS10aGVtZS5tZC13YXJuIC5tZC1zaWduIHsgIGJhY2tncm91bmQtY29sb3I6ICd7e3dhcm4tY29sb3J9fSc7IH0gIG1kLXNsaWRlci5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLXdhcm4gLm1kLXNpZ246YWZ0ZXIgeyAgICBib3JkZXItdG9wLWNvbG9yOiAne3t3YXJuLWNvbG9yfX0nOyB9bWQtc2xpZGVyLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtd2FybiAubWQtdGh1bWItdGV4dCB7ICBjb2xvcjogJ3t7d2Fybi1jb250cmFzdH19JzsgfW1kLXNsaWRlci5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLXByaW1hcnkgLm1kLXRyYWNrLWZpbGwgeyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7cHJpbWFyeS1jb2xvcn19JzsgfW1kLXNsaWRlci5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLXByaW1hcnkgLm1kLXRodW1iOmFmdGVyIHsgIGJvcmRlci1jb2xvcjogJ3t7cHJpbWFyeS1jb2xvcn19JzsgIGJhY2tncm91bmQtY29sb3I6ICd7e3ByaW1hcnktY29sb3J9fSc7IH1tZC1zbGlkZXIubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1wcmltYXJ5IC5tZC1zaWduIHsgIGJhY2tncm91bmQtY29sb3I6ICd7e3ByaW1hcnktY29sb3J9fSc7IH0gIG1kLXNsaWRlci5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLXByaW1hcnkgLm1kLXNpZ246YWZ0ZXIgeyAgICBib3JkZXItdG9wLWNvbG9yOiAne3twcmltYXJ5LWNvbG9yfX0nOyB9bWQtc2xpZGVyLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtcHJpbWFyeSAubWQtdGh1bWItdGV4dCB7ICBjb2xvcjogJ3t7cHJpbWFyeS1jb250cmFzdH19JzsgfW1kLXNsaWRlci5tZC1USEVNRV9OQU1FLXRoZW1lW2Rpc2FibGVkXSAubWQtdGh1bWI6YWZ0ZXIgeyAgYm9yZGVyLWNvbG9yOiAne3tmb3JlZ3JvdW5kLTN9fSc7IH1tZC1zbGlkZXIubWQtVEhFTUVfTkFNRS10aGVtZVtkaXNhYmxlZF06bm90KC5tZC1taW4pIC5tZC10aHVtYjphZnRlciB7ICBiYWNrZ3JvdW5kLWNvbG9yOiAne3tmb3JlZ3JvdW5kLTN9fSc7IH0ubWQtc3ViaGVhZGVyLm1kLVRIRU1FX05BTUUtdGhlbWUgeyAgY29sb3I6ICd7eyBmb3JlZ3JvdW5kLTItMC4yMyB9fSc7ICBiYWNrZ3JvdW5kLWNvbG9yOiAne3tiYWNrZ3JvdW5kLWh1ZS0zfX0nOyB9ICAubWQtc3ViaGVhZGVyLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtcHJpbWFyeSB7ICAgIGNvbG9yOiAne3twcmltYXJ5LWNvbG9yfX0nOyB9ICAubWQtc3ViaGVhZGVyLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtYWNjZW50IHsgICAgY29sb3I6ICd7e2FjY2VudC1jb2xvcn19JzsgfSAgLm1kLXN1YmhlYWRlci5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLXdhcm4geyAgICBjb2xvcjogJ3t7d2Fybi1jb2xvcn19JzsgfW1kLXN3aXRjaC5tZC1USEVNRV9OQU1FLXRoZW1lIC5tZC10aHVtYiB7ICBiYWNrZ3JvdW5kLWNvbG9yOiAne3tiYWNrZ3JvdW5kLTUwfX0nOyB9bWQtc3dpdGNoLm1kLVRIRU1FX05BTUUtdGhlbWUgLm1kLWJhciB7ICBiYWNrZ3JvdW5kLWNvbG9yOiAne3tiYWNrZ3JvdW5kLTUwMH19JzsgfW1kLXN3aXRjaC5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWNoZWNrZWQgLm1kLXRodW1iIHsgIGJhY2tncm91bmQtY29sb3I6ICd7e2FjY2VudC1jb2xvcn19JzsgfW1kLXN3aXRjaC5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWNoZWNrZWQgLm1kLWJhciB7ICBiYWNrZ3JvdW5kLWNvbG9yOiAne3thY2NlbnQtY29sb3ItMC41fX0nOyB9bWQtc3dpdGNoLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtY2hlY2tlZC5tZC1wcmltYXJ5IC5tZC10aHVtYiB7ICBiYWNrZ3JvdW5kLWNvbG9yOiAne3twcmltYXJ5LWNvbG9yfX0nOyB9bWQtc3dpdGNoLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtY2hlY2tlZC5tZC1wcmltYXJ5IC5tZC1iYXIgeyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7cHJpbWFyeS1jb2xvci0wLjV9fSc7IH1tZC1zd2l0Y2gubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1jaGVja2VkLm1kLXdhcm4gLm1kLXRodW1iIHsgIGJhY2tncm91bmQtY29sb3I6ICd7e3dhcm4tY29sb3J9fSc7IH1tZC1zd2l0Y2gubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1jaGVja2VkLm1kLXdhcm4gLm1kLWJhciB7ICBiYWNrZ3JvdW5kLWNvbG9yOiAne3t3YXJuLWNvbG9yLTAuNX19JzsgfW1kLXN3aXRjaC5tZC1USEVNRV9OQU1FLXRoZW1lW2Rpc2FibGVkXSAubWQtdGh1bWIgeyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7YmFja2dyb3VuZC00MDB9fSc7IH1tZC1zd2l0Y2gubWQtVEhFTUVfTkFNRS10aGVtZVtkaXNhYmxlZF0gLm1kLWJhciB7ICBiYWNrZ3JvdW5kLWNvbG9yOiAne3tmb3JlZ3JvdW5kLTR9fSc7IH1tZC1zd2l0Y2gubWQtVEhFTUVfTkFNRS10aGVtZTpmb2N1cyAubWQtbGFiZWw6bm90KDplbXB0eSkgeyAgYm9yZGVyLWNvbG9yOiAne3tmb3JlZ3JvdW5kLTF9fSc7ICBib3JkZXItc3R5bGU6IGRvdHRlZDsgfW1kLXRhYnMubWQtVEhFTUVfTkFNRS10aGVtZSAubWQtaGVhZGVyIHsgIGJhY2tncm91bmQtY29sb3I6ICd7e3ByaW1hcnktY29sb3J9fSc7IH1tZC10YWJzLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtYWNjZW50IC5tZC1oZWFkZXIgeyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7YWNjZW50LWNvbG9yfX0nOyB9bWQtdGFicy5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWFjY2VudCBtZC10YWI6bm90KFtkaXNhYmxlZF0pIHsgIGNvbG9yOiAne3thY2NlbnQtMTAwfX0nOyB9ICBtZC10YWJzLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtYWNjZW50IG1kLXRhYjpub3QoW2Rpc2FibGVkXSkuYWN0aXZlIHsgICAgY29sb3I6ICd7e2FjY2VudC1jb250cmFzdH19JzsgfW1kLXRhYnMubWQtVEhFTUVfTkFNRS10aGVtZS5tZC13YXJuIC5tZC1oZWFkZXIgeyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7d2Fybi1jb2xvcn19JzsgfW1kLXRhYnMubWQtVEhFTUVfTkFNRS10aGVtZS5tZC13YXJuIG1kLXRhYjpub3QoW2Rpc2FibGVkXSkgeyAgY29sb3I6ICd7e3dhcm4tMTAwfX0nOyB9ICBtZC10YWJzLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtd2FybiBtZC10YWI6bm90KFtkaXNhYmxlZF0pLmFjdGl2ZSB7ICAgIGNvbG9yOiAne3t3YXJuLWNvbnRyYXN0fX0nOyB9bWQtdGFicy5tZC1USEVNRV9OQU1FLXRoZW1lIG1kLXRhYnMtaW5rLWJhciB7ICBjb2xvcjogJ3t7cHJpbWFyeS1jb250cmFzdH19JzsgIGJhY2tncm91bmQ6ICd7e3ByaW1hcnktY29udHJhc3R9fSc7IH1tZC10YWJzLm1kLVRIRU1FX05BTUUtdGhlbWUgbWQtdGFiIHsgIGNvbG9yOiAne3twcmltYXJ5LTEwMH19JzsgfSAgbWQtdGFicy5tZC1USEVNRV9OQU1FLXRoZW1lIG1kLXRhYi5hY3RpdmUgeyAgICBjb2xvcjogJ3t7cHJpbWFyeS1jb250cmFzdH19JzsgfSAgbWQtdGFicy5tZC1USEVNRV9OQU1FLXRoZW1lIG1kLXRhYltkaXNhYmxlZF0geyAgICBjb2xvcjogJ3t7Zm9yZWdyb3VuZC00fX0nOyB9ICBtZC10YWJzLm1kLVRIRU1FX05BTUUtdGhlbWUgbWQtdGFiOmZvY3VzIHsgICAgY29sb3I6ICd7e3ByaW1hcnktY29udHJhc3R9fSc7ICAgIGJhY2tncm91bmQtY29sb3I6ICd7e3ByaW1hcnktY29udHJhc3QtMC4xfX0nOyB9ICBtZC10YWJzLm1kLVRIRU1FX05BTUUtdGhlbWUgbWQtdGFiIC5tZC1yaXBwbGUtY29udGFpbmVyIHsgICAgY29sb3I6ICd7e3ByaW1hcnktY29udHJhc3R9fSc7IH1tZC1pbnB1dC1ncm91cC5tZC1USEVNRV9OQU1FLXRoZW1lIGlucHV0LCBtZC1pbnB1dC1ncm91cC5tZC1USEVNRV9OQU1FLXRoZW1lIHRleHRhcmVhIHsgIHRleHQtc2hhZG93OiAne3tmb3JlZ3JvdW5kLXNoYWRvd319JzsgfSAgbWQtaW5wdXQtZ3JvdXAubWQtVEhFTUVfTkFNRS10aGVtZSBpbnB1dDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciwgbWQtaW5wdXQtZ3JvdXAubWQtVEhFTUVfTkFNRS10aGVtZSBpbnB1dDo6LW1vei1wbGFjZWhvbGRlciwgbWQtaW5wdXQtZ3JvdXAubWQtVEhFTUVfTkFNRS10aGVtZSBpbnB1dDotbW96LXBsYWNlaG9sZGVyLCBtZC1pbnB1dC1ncm91cC5tZC1USEVNRV9OQU1FLXRoZW1lIGlucHV0Oi1tcy1pbnB1dC1wbGFjZWhvbGRlciwgbWQtaW5wdXQtZ3JvdXAubWQtVEhFTUVfTkFNRS10aGVtZSB0ZXh0YXJlYTo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciwgbWQtaW5wdXQtZ3JvdXAubWQtVEhFTUVfTkFNRS10aGVtZSB0ZXh0YXJlYTo6LW1vei1wbGFjZWhvbGRlciwgbWQtaW5wdXQtZ3JvdXAubWQtVEhFTUVfTkFNRS10aGVtZSB0ZXh0YXJlYTotbW96LXBsYWNlaG9sZGVyLCBtZC1pbnB1dC1ncm91cC5tZC1USEVNRV9OQU1FLXRoZW1lIHRleHRhcmVhOi1tcy1pbnB1dC1wbGFjZWhvbGRlciB7ICAgIGNvbG9yOiAne3tmb3JlZ3JvdW5kLTN9fSc7IH1tZC1pbnB1dC1ncm91cC5tZC1USEVNRV9OQU1FLXRoZW1lIGxhYmVsIHsgIHRleHQtc2hhZG93OiAne3tmb3JlZ3JvdW5kLXNoYWRvd319JzsgIGNvbG9yOiAne3tmb3JlZ3JvdW5kLTN9fSc7IH1tZC1pbnB1dC1ncm91cC5tZC1USEVNRV9OQU1FLXRoZW1lIGlucHV0LCBtZC1pbnB1dC1ncm91cC5tZC1USEVNRV9OQU1FLXRoZW1lIHRleHRhcmVhIHsgIGNvbG9yOiAne3tmb3JlZ3JvdW5kLTF9fSc7ICBib3JkZXItY29sb3I6ICd7e2ZvcmVncm91bmQtNH19JzsgfW1kLWlucHV0LWdyb3VwLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtaW5wdXQtZm9jdXNlZCBpbnB1dCwgbWQtaW5wdXQtZ3JvdXAubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1pbnB1dC1mb2N1c2VkIHRleHRhcmVhIHsgIGJvcmRlci1jb2xvcjogJ3t7cHJpbWFyeS01MDB9fSc7IH1tZC1pbnB1dC1ncm91cC5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWlucHV0LWZvY3VzZWQgbGFiZWwgeyAgY29sb3I6ICd7e3ByaW1hcnktNTAwfX0nOyB9bWQtaW5wdXQtZ3JvdXAubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1pbnB1dC1mb2N1c2VkLm1kLWFjY2VudCBpbnB1dCwgbWQtaW5wdXQtZ3JvdXAubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1pbnB1dC1mb2N1c2VkLm1kLWFjY2VudCB0ZXh0YXJlYSB7ICBib3JkZXItY29sb3I6ICd7e2FjY2VudC01MDB9fSc7IH1tZC1pbnB1dC1ncm91cC5tZC1USEVNRV9OQU1FLXRoZW1lLm1kLWlucHV0LWZvY3VzZWQubWQtYWNjZW50IGxhYmVsIHsgIGNvbG9yOiAne3thY2NlbnQtNTAwfX0nOyB9bWQtaW5wdXQtZ3JvdXAubWQtVEhFTUVfTkFNRS10aGVtZS5tZC1pbnB1dC1oYXMtdmFsdWU6bm90KC5tZC1pbnB1dC1mb2N1c2VkKSBsYWJlbCB7ICBjb2xvcjogJ3t7Zm9yZWdyb3VuZC0yfX0nOyB9bWQtaW5wdXQtZ3JvdXAubWQtVEhFTUVfTkFNRS10aGVtZSAubWQtaW5wdXRbZGlzYWJsZWRdIHsgIGJvcmRlci1ib3R0b20tY29sb3I6ICd7e2ZvcmVncm91bmQtNH19JzsgIGNvbG9yOiAne3tmb3JlZ3JvdW5kLTN9fSc7IH1tZC10b2FzdC5tZC1USEVNRV9OQU1FLXRoZW1lIHsgIGJhY2tncm91bmQtY29sb3I6ICd7e2ZvcmVncm91bmQtMX19JzsgIGNvbG9yOiAne3tiYWNrZ3JvdW5kLTUwfX0nOyB9ICBtZC10b2FzdC5tZC1USEVNRV9OQU1FLXRoZW1lIC5tZC1idXR0b24geyAgICBjb2xvcjogJ3t7YmFja2dyb3VuZC01MH19JzsgfSAgICBtZC10b2FzdC5tZC1USEVNRV9OQU1FLXRoZW1lIC5tZC1idXR0b24ubWQtaGlnaGxpZ2h0IHsgICAgICBjb2xvcjogJ3t7cHJpbWFyeS1BMjAwfX0nOyB9ICAgICAgbWQtdG9hc3QubWQtVEhFTUVfTkFNRS10aGVtZSAubWQtYnV0dG9uLm1kLWhpZ2hsaWdodC5tZC1hY2NlbnQgeyAgICAgICAgY29sb3I6ICd7e2FjY2VudC1BMjAwfX0nOyB9ICAgICAgbWQtdG9hc3QubWQtVEhFTUVfTkFNRS10aGVtZSAubWQtYnV0dG9uLm1kLWhpZ2hsaWdodC5tZC13YXJuIHsgICAgICAgIGNvbG9yOiAne3t3YXJuLUEyMDB9fSc7IH1tZC10b29sYmFyLm1kLVRIRU1FX05BTUUtdGhlbWUgeyAgYmFja2dyb3VuZC1jb2xvcjogJ3t7cHJpbWFyeS1jb2xvcn19JzsgIGNvbG9yOiAne3twcmltYXJ5LWNvbnRyYXN0fX0nOyB9ICBtZC10b29sYmFyLm1kLVRIRU1FX05BTUUtdGhlbWUgLm1kLWJ1dHRvbiB7ICAgIGNvbG9yOiAne3twcmltYXJ5LWNvbnRyYXN0fX0nOyB9ICBtZC10b29sYmFyLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtYWNjZW50IHsgICAgYmFja2dyb3VuZC1jb2xvcjogJ3t7YWNjZW50LWNvbG9yfX0nOyAgICBjb2xvcjogJ3t7YWNjZW50LWNvbnRyYXN0fX0nOyB9ICBtZC10b29sYmFyLm1kLVRIRU1FX05BTUUtdGhlbWUubWQtd2FybiB7ICAgIGJhY2tncm91bmQtY29sb3I6ICd7e3dhcm4tY29sb3J9fSc7ICAgIGNvbG9yOiAne3t3YXJuLWNvbnRyYXN0fX0nOyB9bWQtdG9vbHRpcC5tZC1USEVNRV9OQU1FLXRoZW1lIHsgIGNvbG9yOiAne3tiYWNrZ3JvdW5kLUExMDB9fSc7IH0gIG1kLXRvb2x0aXAubWQtVEhFTUVfTkFNRS10aGVtZSAubWQtYmFja2dyb3VuZCB7ICAgIGJhY2tncm91bmQtY29sb3I6ICd7e2ZvcmVncm91bmQtMn19JzsgfVwiKTtcbi8qKlxuICogQW4gQW5ndWxhciBtb2R1bGUgdGhhdCBnaXZlcyB5b3UgYWNjZXNzIHRvIHRoZSBicm93c2VycyBsb2NhbCBzdG9yYWdlXG4gKiBAdmVyc2lvbiB2MC4xLjUgLSAyMDE0LTExLTA0XG4gKiBAbGluayBodHRwczovL2dpdGh1Yi5jb20vZ3Jldm9yeS9hbmd1bGFyLWxvY2FsLXN0b3JhZ2VcbiAqIEBhdXRob3IgZ3Jldm9yeSA8Z3JlZ0BncmVncGlrZS5jYT5cbiAqIEBsaWNlbnNlIE1JVCBMaWNlbnNlLCBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVFxuICovXG4oZnVuY3Rpb24gKCB3aW5kb3csIGFuZ3VsYXIsIHVuZGVmaW5lZCApIHtcbi8qanNoaW50IGdsb2JhbHN0cmljdDp0cnVlKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIGlzRGVmaW5lZCA9IGFuZ3VsYXIuaXNEZWZpbmVkLFxuICBpc1VuZGVmaW5lZCA9IGFuZ3VsYXIuaXNVbmRlZmluZWQsXG4gIGlzTnVtYmVyID0gYW5ndWxhci5pc051bWJlcixcbiAgaXNPYmplY3QgPSBhbmd1bGFyLmlzT2JqZWN0LFxuICBpc0FycmF5ID0gYW5ndWxhci5pc0FycmF5LFxuICBleHRlbmQgPSBhbmd1bGFyLmV4dGVuZCxcbiAgdG9Kc29uID0gYW5ndWxhci50b0pzb24sXG4gIGZyb21Kc29uID0gYW5ndWxhci5mcm9tSnNvbjtcblxuXG4vLyBUZXN0IGlmIHN0cmluZyBpcyBvbmx5IGNvbnRhaW5zIG51bWJlcnNcbi8vIGUuZyAnMScgPT4gdHJ1ZSwgXCInMSdcIiA9PiB0cnVlXG5mdW5jdGlvbiBpc1N0cmluZ051bWJlcihudW0pIHtcbiAgcmV0dXJuICAvXi0/XFxkK1xcLj9cXGQqJC8udGVzdChudW0ucmVwbGFjZSgvW1wiJ10vZywgJycpKTtcbn1cblxudmFyIGFuZ3VsYXJMb2NhbFN0b3JhZ2UgPSBhbmd1bGFyLm1vZHVsZSgnTG9jYWxTdG9yYWdlTW9kdWxlJywgW10pO1xuXG5hbmd1bGFyTG9jYWxTdG9yYWdlLnByb3ZpZGVyKCdsb2NhbFN0b3JhZ2VTZXJ2aWNlJywgZnVuY3Rpb24oKSB7XG5cbiAgLy8gWW91IHNob3VsZCBzZXQgYSBwcmVmaXggdG8gYXZvaWQgb3ZlcndyaXRpbmcgYW55IGxvY2FsIHN0b3JhZ2UgdmFyaWFibGVzIGZyb20gdGhlIHJlc3Qgb2YgeW91ciBhcHBcbiAgLy8gZS5nLiBsb2NhbFN0b3JhZ2VTZXJ2aWNlUHJvdmlkZXIuc2V0UHJlZml4KCd5b3VBcHBOYW1lJyk7XG4gIC8vIFdpdGggcHJvdmlkZXIgeW91IGNhbiB1c2UgY29uZmlnIGFzIHRoaXM6XG4gIC8vIG15QXBwLmNvbmZpZyhmdW5jdGlvbiAobG9jYWxTdG9yYWdlU2VydmljZVByb3ZpZGVyKSB7XG4gIC8vICAgIGxvY2FsU3RvcmFnZVNlcnZpY2VQcm92aWRlci5wcmVmaXggPSAneW91ckFwcE5hbWUnO1xuICAvLyB9KTtcbiAgdGhpcy5wcmVmaXggPSAnbHMnO1xuXG4gIC8vIFlvdSBjb3VsZCBjaGFuZ2Ugd2ViIHN0b3JhZ2UgdHlwZSBsb2NhbHN0b3JhZ2Ugb3Igc2Vzc2lvblN0b3JhZ2VcbiAgdGhpcy5zdG9yYWdlVHlwZSA9ICdsb2NhbFN0b3JhZ2UnO1xuXG4gIC8vIENvb2tpZSBvcHRpb25zICh1c3VhbGx5IGluIGNhc2Ugb2YgZmFsbGJhY2spXG4gIC8vIGV4cGlyeSA9IE51bWJlciBvZiBkYXlzIGJlZm9yZSBjb29raWVzIGV4cGlyZSAvLyAwID0gRG9lcyBub3QgZXhwaXJlXG4gIC8vIHBhdGggPSBUaGUgd2ViIHBhdGggdGhlIGNvb2tpZSByZXByZXNlbnRzXG4gIHRoaXMuY29va2llID0ge1xuICAgIGV4cGlyeTogMzAsXG4gICAgcGF0aDogJy8nXG4gIH07XG5cbiAgLy8gU2VuZCBzaWduYWxzIGZvciBlYWNoIG9mIHRoZSBmb2xsb3dpbmcgYWN0aW9ucz9cbiAgdGhpcy5ub3RpZnkgPSB7XG4gICAgc2V0SXRlbTogdHJ1ZSxcbiAgICByZW1vdmVJdGVtOiBmYWxzZVxuICB9O1xuXG4gIC8vIFNldHRlciBmb3IgdGhlIHByZWZpeFxuICB0aGlzLnNldFByZWZpeCA9IGZ1bmN0aW9uKHByZWZpeCkge1xuICAgIHRoaXMucHJlZml4ID0gcHJlZml4O1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gICAvLyBTZXR0ZXIgZm9yIHRoZSBzdG9yYWdlVHlwZVxuICAgdGhpcy5zZXRTdG9yYWdlVHlwZSA9IGZ1bmN0aW9uKHN0b3JhZ2VUeXBlKSB7XG4gICAgIHRoaXMuc3RvcmFnZVR5cGUgPSBzdG9yYWdlVHlwZTtcbiAgICAgcmV0dXJuIHRoaXM7XG4gICB9O1xuXG4gIC8vIFNldHRlciBmb3IgY29va2llIGNvbmZpZ1xuICB0aGlzLnNldFN0b3JhZ2VDb29raWUgPSBmdW5jdGlvbihleHAsIHBhdGgpIHtcbiAgICB0aGlzLmNvb2tpZSA9IHtcbiAgICAgIGV4cGlyeTogZXhwLFxuICAgICAgcGF0aDogcGF0aFxuICAgIH07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gU2V0dGVyIGZvciBjb29raWUgZG9tYWluXG4gIHRoaXMuc2V0U3RvcmFnZUNvb2tpZURvbWFpbiA9IGZ1bmN0aW9uKGRvbWFpbikge1xuICAgIHRoaXMuY29va2llLmRvbWFpbiA9IGRvbWFpbjtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBTZXR0ZXIgZm9yIG5vdGlmaWNhdGlvbiBjb25maWdcbiAgLy8gaXRlbVNldCAmIGl0ZW1SZW1vdmUgc2hvdWxkIGJlIGJvb2xlYW5zXG4gIHRoaXMuc2V0Tm90aWZ5ID0gZnVuY3Rpb24oaXRlbVNldCwgaXRlbVJlbW92ZSkge1xuICAgIHRoaXMubm90aWZ5ID0ge1xuICAgICAgc2V0SXRlbTogaXRlbVNldCxcbiAgICAgIHJlbW92ZUl0ZW06IGl0ZW1SZW1vdmVcbiAgICB9O1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHRoaXMuJGdldCA9IFsnJHJvb3RTY29wZScsICckd2luZG93JywgJyRkb2N1bWVudCcsICckcGFyc2UnLCBmdW5jdGlvbigkcm9vdFNjb3BlLCAkd2luZG93LCAkZG9jdW1lbnQsICRwYXJzZSkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgcHJlZml4ID0gc2VsZi5wcmVmaXg7XG4gICAgdmFyIGNvb2tpZSA9IHNlbGYuY29va2llO1xuICAgIHZhciBub3RpZnkgPSBzZWxmLm5vdGlmeTtcbiAgICB2YXIgc3RvcmFnZVR5cGUgPSBzZWxmLnN0b3JhZ2VUeXBlO1xuICAgIHZhciB3ZWJTdG9yYWdlO1xuXG4gICAgLy8gV2hlbiBBbmd1bGFyJ3MgJGRvY3VtZW50IGlzIG5vdCBhdmFpbGFibGVcbiAgICBpZiAoISRkb2N1bWVudCkge1xuICAgICAgJGRvY3VtZW50ID0gZG9jdW1lbnQ7XG4gICAgfSBlbHNlIGlmICgkZG9jdW1lbnRbMF0pIHtcbiAgICAgICRkb2N1bWVudCA9ICRkb2N1bWVudFswXTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGVyZSBpcyBhIHByZWZpeCBzZXQgaW4gdGhlIGNvbmZpZyBsZXRzIHVzZSB0aGF0IHdpdGggYW4gYXBwZW5kZWQgcGVyaW9kIGZvciByZWFkYWJpbGl0eVxuICAgIGlmIChwcmVmaXguc3Vic3RyKC0xKSAhPT0gJy4nKSB7XG4gICAgICBwcmVmaXggPSAhIXByZWZpeCA/IHByZWZpeCArICcuJyA6ICcnO1xuICAgIH1cbiAgICB2YXIgZGVyaXZlUXVhbGlmaWVkS2V5ID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gcHJlZml4ICsga2V5O1xuICAgIH07XG4gICAgLy8gQ2hlY2tzIHRoZSBicm93c2VyIHRvIHNlZSBpZiBsb2NhbCBzdG9yYWdlIGlzIHN1cHBvcnRlZFxuICAgIHZhciBicm93c2VyU3VwcG9ydHNMb2NhbFN0b3JhZ2UgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIHN1cHBvcnRlZCA9IChzdG9yYWdlVHlwZSBpbiAkd2luZG93ICYmICR3aW5kb3dbc3RvcmFnZVR5cGVdICE9PSBudWxsKTtcblxuICAgICAgICAvLyBXaGVuIFNhZmFyaSAoT1MgWCBvciBpT1MpIGlzIGluIHByaXZhdGUgYnJvd3NpbmcgbW9kZSwgaXQgYXBwZWFycyBhcyB0aG91Z2ggbG9jYWxTdG9yYWdlXG4gICAgICAgIC8vIGlzIGF2YWlsYWJsZSwgYnV0IHRyeWluZyB0byBjYWxsIC5zZXRJdGVtIHRocm93cyBhbiBleGNlcHRpb24uXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFwiUVVPVEFfRVhDRUVERURfRVJSOiBET00gRXhjZXB0aW9uIDIyOiBBbiBhdHRlbXB0IHdhcyBtYWRlIHRvIGFkZCBzb21ldGhpbmcgdG8gc3RvcmFnZVxuICAgICAgICAvLyB0aGF0IGV4Y2VlZGVkIHRoZSBxdW90YS5cIlxuICAgICAgICB2YXIga2V5ID0gZGVyaXZlUXVhbGlmaWVkS2V5KCdfXycgKyBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAxZTcpKTtcbiAgICAgICAgaWYgKHN1cHBvcnRlZCkge1xuICAgICAgICAgIHdlYlN0b3JhZ2UgPSAkd2luZG93W3N0b3JhZ2VUeXBlXTtcbiAgICAgICAgICB3ZWJTdG9yYWdlLnNldEl0ZW0oa2V5LCAnJyk7XG4gICAgICAgICAgd2ViU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3VwcG9ydGVkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBzdG9yYWdlVHlwZSA9ICdjb29raWUnO1xuICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ0xvY2FsU3RvcmFnZU1vZHVsZS5ub3RpZmljYXRpb24uZXJyb3InLCBlLm1lc3NhZ2UpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSgpKTtcblxuXG5cbiAgICAvLyBEaXJlY3RseSBhZGRzIGEgdmFsdWUgdG8gbG9jYWwgc3RvcmFnZVxuICAgIC8vIElmIGxvY2FsIHN0b3JhZ2UgaXMgbm90IGF2YWlsYWJsZSBpbiB0aGUgYnJvd3NlciB1c2UgY29va2llc1xuICAgIC8vIEV4YW1wbGUgdXNlOiBsb2NhbFN0b3JhZ2VTZXJ2aWNlLmFkZCgnbGlicmFyeScsJ2FuZ3VsYXInKTtcbiAgICB2YXIgYWRkVG9Mb2NhbFN0b3JhZ2UgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgLy8gTGV0J3MgY29udmVydCB1bmRlZmluZWQgdmFsdWVzIHRvIG51bGwgdG8gZ2V0IHRoZSB2YWx1ZSBjb25zaXN0ZW50XG4gICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gbnVsbDtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsdWUpIHx8IGlzQXJyYXkodmFsdWUpIHx8IGlzTnVtYmVyKCt2YWx1ZSB8fCB2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSB0b0pzb24odmFsdWUpO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiB0aGlzIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBsb2NhbCBzdG9yYWdlIHVzZSBjb29raWVzXG4gICAgICBpZiAoIWJyb3dzZXJTdXBwb3J0c0xvY2FsU3RvcmFnZSB8fCBzZWxmLnN0b3JhZ2VUeXBlID09PSAnY29va2llJykge1xuICAgICAgICBpZiAoIWJyb3dzZXJTdXBwb3J0c0xvY2FsU3RvcmFnZSkge1xuICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdMb2NhbFN0b3JhZ2VNb2R1bGUubm90aWZpY2F0aW9uLndhcm5pbmcnLCAnTE9DQUxfU1RPUkFHRV9OT1RfU1VQUE9SVEVEJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobm90aWZ5LnNldEl0ZW0pIHtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ0xvY2FsU3RvcmFnZU1vZHVsZS5ub3RpZmljYXRpb24uc2V0aXRlbScsIHtrZXk6IGtleSwgbmV3dmFsdWU6IHZhbHVlLCBzdG9yYWdlVHlwZTogJ2Nvb2tpZSd9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWRkVG9Db29raWVzKGtleSwgdmFsdWUpO1xuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICBpZiAoaXNPYmplY3QodmFsdWUpIHx8IGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgdmFsdWUgPSB0b0pzb24odmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh3ZWJTdG9yYWdlKSB7d2ViU3RvcmFnZS5zZXRJdGVtKGRlcml2ZVF1YWxpZmllZEtleShrZXkpLCB2YWx1ZSl9O1xuICAgICAgICBpZiAobm90aWZ5LnNldEl0ZW0pIHtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ0xvY2FsU3RvcmFnZU1vZHVsZS5ub3RpZmljYXRpb24uc2V0aXRlbScsIHtrZXk6IGtleSwgbmV3dmFsdWU6IHZhbHVlLCBzdG9yYWdlVHlwZTogc2VsZi5zdG9yYWdlVHlwZX0pO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnTG9jYWxTdG9yYWdlTW9kdWxlLm5vdGlmaWNhdGlvbi5lcnJvcicsIGUubWVzc2FnZSk7XG4gICAgICAgIHJldHVybiBhZGRUb0Nvb2tpZXMoa2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgLy8gRGlyZWN0bHkgZ2V0IGEgdmFsdWUgZnJvbSBsb2NhbCBzdG9yYWdlXG4gICAgLy8gRXhhbXBsZSB1c2U6IGxvY2FsU3RvcmFnZVNlcnZpY2UuZ2V0KCdsaWJyYXJ5Jyk7IC8vIHJldHVybnMgJ2FuZ3VsYXInXG4gICAgdmFyIGdldEZyb21Mb2NhbFN0b3JhZ2UgPSBmdW5jdGlvbiAoa2V5KSB7XG5cbiAgICAgIGlmICghYnJvd3NlclN1cHBvcnRzTG9jYWxTdG9yYWdlIHx8IHNlbGYuc3RvcmFnZVR5cGUgPT09ICdjb29raWUnKSB7XG4gICAgICAgIGlmICghYnJvd3NlclN1cHBvcnRzTG9jYWxTdG9yYWdlKSB7XG4gICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdMb2NhbFN0b3JhZ2VNb2R1bGUubm90aWZpY2F0aW9uLndhcm5pbmcnLCdMT0NBTF9TVE9SQUdFX05PVF9TVVBQT1JURUQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBnZXRGcm9tQ29va2llcyhrZXkpO1xuICAgICAgfVxuXG4gICAgICB2YXIgaXRlbSA9IHdlYlN0b3JhZ2UgPyB3ZWJTdG9yYWdlLmdldEl0ZW0oZGVyaXZlUXVhbGlmaWVkS2V5KGtleSkpIDogbnVsbDtcbiAgICAgIC8vIGFuZ3VsYXIudG9Kc29uIHdpbGwgY29udmVydCBudWxsIHRvICdudWxsJywgc28gYSBwcm9wZXIgY29udmVyc2lvbiBpcyBuZWVkZWRcbiAgICAgIC8vIEZJWE1FIG5vdCBhIHBlcmZlY3Qgc29sdXRpb24sIHNpbmNlIGEgdmFsaWQgJ251bGwnIHN0cmluZyBjYW4ndCBiZSBzdG9yZWRcbiAgICAgIGlmICghaXRlbSB8fCBpdGVtID09PSAnbnVsbCcpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtLmNoYXJBdCgwKSA9PT0gXCJ7XCIgfHwgaXRlbS5jaGFyQXQoMCkgPT09IFwiW1wiIHx8IGlzU3RyaW5nTnVtYmVyKGl0ZW0pKSB7XG4gICAgICAgIHJldHVybiBmcm9tSnNvbihpdGVtKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfTtcblxuICAgIC8vIFJlbW92ZSBhbiBpdGVtIGZyb20gbG9jYWwgc3RvcmFnZVxuICAgIC8vIEV4YW1wbGUgdXNlOiBsb2NhbFN0b3JhZ2VTZXJ2aWNlLnJlbW92ZSgnbGlicmFyeScpOyAvLyByZW1vdmVzIHRoZSBrZXkvdmFsdWUgcGFpciBvZiBsaWJyYXJ5PSdhbmd1bGFyJ1xuICAgIHZhciByZW1vdmVGcm9tTG9jYWxTdG9yYWdlID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKCFicm93c2VyU3VwcG9ydHNMb2NhbFN0b3JhZ2UgfHwgc2VsZi5zdG9yYWdlVHlwZSA9PT0gJ2Nvb2tpZScpIHtcbiAgICAgICAgaWYgKCFicm93c2VyU3VwcG9ydHNMb2NhbFN0b3JhZ2UpIHtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ0xvY2FsU3RvcmFnZU1vZHVsZS5ub3RpZmljYXRpb24ud2FybmluZycsICdMT0NBTF9TVE9SQUdFX05PVF9TVVBQT1JURUQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChub3RpZnkucmVtb3ZlSXRlbSkge1xuICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnTG9jYWxTdG9yYWdlTW9kdWxlLm5vdGlmaWNhdGlvbi5yZW1vdmVpdGVtJywge2tleToga2V5LCBzdG9yYWdlVHlwZTogJ2Nvb2tpZSd9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVtb3ZlRnJvbUNvb2tpZXMoa2V5KTtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgd2ViU3RvcmFnZS5yZW1vdmVJdGVtKGRlcml2ZVF1YWxpZmllZEtleShrZXkpKTtcbiAgICAgICAgaWYgKG5vdGlmeS5yZW1vdmVJdGVtKSB7XG4gICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdMb2NhbFN0b3JhZ2VNb2R1bGUubm90aWZpY2F0aW9uLnJlbW92ZWl0ZW0nLCB7a2V5OiBrZXksIHN0b3JhZ2VUeXBlOiBzZWxmLnN0b3JhZ2VUeXBlfSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdMb2NhbFN0b3JhZ2VNb2R1bGUubm90aWZpY2F0aW9uLmVycm9yJywgZS5tZXNzYWdlKTtcbiAgICAgICAgcmV0dXJuIHJlbW92ZUZyb21Db29raWVzKGtleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgLy8gUmV0dXJuIGFycmF5IG9mIGtleXMgZm9yIGxvY2FsIHN0b3JhZ2VcbiAgICAvLyBFeGFtcGxlIHVzZTogdmFyIGtleXMgPSBsb2NhbFN0b3JhZ2VTZXJ2aWNlLmtleXMoKVxuICAgIHZhciBnZXRLZXlzRm9yTG9jYWxTdG9yYWdlID0gZnVuY3Rpb24gKCkge1xuXG4gICAgICBpZiAoIWJyb3dzZXJTdXBwb3J0c0xvY2FsU3RvcmFnZSkge1xuICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ0xvY2FsU3RvcmFnZU1vZHVsZS5ub3RpZmljYXRpb24ud2FybmluZycsICdMT0NBTF9TVE9SQUdFX05PVF9TVVBQT1JURUQnKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJlZml4TGVuZ3RoID0gcHJlZml4Lmxlbmd0aDtcbiAgICAgIHZhciBrZXlzID0gW107XG4gICAgICBmb3IgKHZhciBrZXkgaW4gd2ViU3RvcmFnZSkge1xuICAgICAgICAvLyBPbmx5IHJldHVybiBrZXlzIHRoYXQgYXJlIGZvciB0aGlzIGFwcFxuICAgICAgICBpZiAoa2V5LnN1YnN0cigwLHByZWZpeExlbmd0aCkgPT09IHByZWZpeCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBrZXlzLnB1c2goa2V5LnN1YnN0cihwcmVmaXhMZW5ndGgpKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ0xvY2FsU3RvcmFnZU1vZHVsZS5ub3RpZmljYXRpb24uZXJyb3InLCBlLkRlc2NyaXB0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBrZXlzO1xuICAgIH07XG5cbiAgICAvLyBSZW1vdmUgYWxsIGRhdGEgZm9yIHRoaXMgYXBwIGZyb20gbG9jYWwgc3RvcmFnZVxuICAgIC8vIEFsc28gb3B0aW9uYWxseSB0YWtlcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcgYW5kIHJlbW92ZXMgdGhlIG1hdGNoaW5nIGtleS12YWx1ZSBwYWlyc1xuICAgIC8vIEV4YW1wbGUgdXNlOiBsb2NhbFN0b3JhZ2VTZXJ2aWNlLmNsZWFyQWxsKCk7XG4gICAgLy8gU2hvdWxkIGJlIHVzZWQgbW9zdGx5IGZvciBkZXZlbG9wbWVudCBwdXJwb3Nlc1xuICAgIHZhciBjbGVhckFsbEZyb21Mb2NhbFN0b3JhZ2UgPSBmdW5jdGlvbiAocmVndWxhckV4cHJlc3Npb24pIHtcblxuICAgICAgcmVndWxhckV4cHJlc3Npb24gPSByZWd1bGFyRXhwcmVzc2lvbiB8fCBcIlwiO1xuICAgICAgLy9hY2NvdW50aW5nIGZvciB0aGUgJy4nIGluIHRoZSBwcmVmaXggd2hlbiBjcmVhdGluZyBhIHJlZ2V4XG4gICAgICB2YXIgdGVtcFByZWZpeCA9IHByZWZpeC5zbGljZSgwLCAtMSk7XG4gICAgICB2YXIgdGVzdFJlZ2V4ID0gbmV3IFJlZ0V4cCh0ZW1wUHJlZml4ICsgJy4nICsgcmVndWxhckV4cHJlc3Npb24pO1xuXG4gICAgICBpZiAoIWJyb3dzZXJTdXBwb3J0c0xvY2FsU3RvcmFnZSB8fCBzZWxmLnN0b3JhZ2VUeXBlID09PSAnY29va2llJykge1xuICAgICAgICBpZiAoIWJyb3dzZXJTdXBwb3J0c0xvY2FsU3RvcmFnZSkge1xuICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnTG9jYWxTdG9yYWdlTW9kdWxlLm5vdGlmaWNhdGlvbi53YXJuaW5nJywgJ0xPQ0FMX1NUT1JBR0VfTk9UX1NVUFBPUlRFRCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNsZWFyQWxsRnJvbUNvb2tpZXMoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZWZpeExlbmd0aCA9IHByZWZpeC5sZW5ndGg7XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiB3ZWJTdG9yYWdlKSB7XG4gICAgICAgIC8vIE9ubHkgcmVtb3ZlIGl0ZW1zIHRoYXQgYXJlIGZvciB0aGlzIGFwcCBhbmQgbWF0Y2ggdGhlIHJlZ3VsYXIgZXhwcmVzc2lvblxuICAgICAgICBpZiAodGVzdFJlZ2V4LnRlc3Qoa2V5KSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZW1vdmVGcm9tTG9jYWxTdG9yYWdlKGtleS5zdWJzdHIocHJlZml4TGVuZ3RoKSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdMb2NhbFN0b3JhZ2VNb2R1bGUubm90aWZpY2F0aW9uLmVycm9yJyxlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgcmV0dXJuIGNsZWFyQWxsRnJvbUNvb2tpZXMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICAvLyBDaGVja3MgdGhlIGJyb3dzZXIgdG8gc2VlIGlmIGNvb2tpZXMgYXJlIHN1cHBvcnRlZFxuICAgIHZhciBicm93c2VyU3VwcG9ydHNDb29raWVzID0gKGZ1bmN0aW9uKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuICR3aW5kb3cubmF2aWdhdG9yLmNvb2tpZUVuYWJsZWQgfHxcbiAgICAgICAgICAoXCJjb29raWVcIiBpbiAkZG9jdW1lbnQgJiYgKCRkb2N1bWVudC5jb29raWUubGVuZ3RoID4gMCB8fFxuICAgICAgICAgICgkZG9jdW1lbnQuY29va2llID0gXCJ0ZXN0XCIpLmluZGV4T2YuY2FsbCgkZG9jdW1lbnQuY29va2llLCBcInRlc3RcIikgPiAtMSkpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnTG9jYWxTdG9yYWdlTW9kdWxlLm5vdGlmaWNhdGlvbi5lcnJvcicsIGUubWVzc2FnZSk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0oKSk7XG5cbiAgICAvLyBEaXJlY3RseSBhZGRzIGEgdmFsdWUgdG8gY29va2llc1xuICAgIC8vIFR5cGljYWxseSB1c2VkIGFzIGEgZmFsbGJhY2sgaXMgbG9jYWwgc3RvcmFnZSBpcyBub3QgYXZhaWxhYmxlIGluIHRoZSBicm93c2VyXG4gICAgLy8gRXhhbXBsZSB1c2U6IGxvY2FsU3RvcmFnZVNlcnZpY2UuY29va2llLmFkZCgnbGlicmFyeScsJ2FuZ3VsYXInKTtcbiAgICB2YXIgYWRkVG9Db29raWVzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcblxuICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYoaXNBcnJheSh2YWx1ZSkgfHwgaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gdG9Kc29uKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFicm93c2VyU3VwcG9ydHNDb29raWVzKSB7XG4gICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnTG9jYWxTdG9yYWdlTW9kdWxlLm5vdGlmaWNhdGlvbi5lcnJvcicsICdDT09LSUVTX05PVF9TVVBQT1JURUQnKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICB2YXIgZXhwaXJ5ID0gJycsXG4gICAgICAgICAgICBleHBpcnlEYXRlID0gbmV3IERhdGUoKSxcbiAgICAgICAgICAgIGNvb2tpZURvbWFpbiA9ICcnO1xuXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgIC8vIE1hcmsgdGhhdCB0aGUgY29va2llIGhhcyBleHBpcmVkIG9uZSBkYXkgYWdvXG4gICAgICAgICAgZXhwaXJ5RGF0ZS5zZXRUaW1lKGV4cGlyeURhdGUuZ2V0VGltZSgpICsgKC0xICogMjQgKiA2MCAqIDYwICogMTAwMCkpO1xuICAgICAgICAgIGV4cGlyeSA9IFwiOyBleHBpcmVzPVwiICsgZXhwaXJ5RGF0ZS50b0dNVFN0cmluZygpO1xuICAgICAgICAgIHZhbHVlID0gJyc7XG4gICAgICAgIH0gZWxzZSBpZiAoY29va2llLmV4cGlyeSAhPT0gMCkge1xuICAgICAgICAgIGV4cGlyeURhdGUuc2V0VGltZShleHBpcnlEYXRlLmdldFRpbWUoKSArIChjb29raWUuZXhwaXJ5ICogMjQgKiA2MCAqIDYwICogMTAwMCkpO1xuICAgICAgICAgIGV4cGlyeSA9IFwiOyBleHBpcmVzPVwiICsgZXhwaXJ5RGF0ZS50b0dNVFN0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghIWtleSkge1xuICAgICAgICAgIHZhciBjb29raWVQYXRoID0gXCI7IHBhdGg9XCIgKyBjb29raWUucGF0aDtcbiAgICAgICAgICBpZihjb29raWUuZG9tYWluKXtcbiAgICAgICAgICAgIGNvb2tpZURvbWFpbiA9IFwiOyBkb21haW49XCIgKyBjb29raWUuZG9tYWluO1xuICAgICAgICAgIH1cbiAgICAgICAgICAkZG9jdW1lbnQuY29va2llID0gZGVyaXZlUXVhbGlmaWVkS2V5KGtleSkgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkgKyBleHBpcnkgKyBjb29raWVQYXRoICsgY29va2llRG9tYWluO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnTG9jYWxTdG9yYWdlTW9kdWxlLm5vdGlmaWNhdGlvbi5lcnJvcicsZS5tZXNzYWdlKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIC8vIERpcmVjdGx5IGdldCBhIHZhbHVlIGZyb20gYSBjb29raWVcbiAgICAvLyBFeGFtcGxlIHVzZTogbG9jYWxTdG9yYWdlU2VydmljZS5jb29raWUuZ2V0KCdsaWJyYXJ5Jyk7IC8vIHJldHVybnMgJ2FuZ3VsYXInXG4gICAgdmFyIGdldEZyb21Db29raWVzID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKCFicm93c2VyU3VwcG9ydHNDb29raWVzKSB7XG4gICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnTG9jYWxTdG9yYWdlTW9kdWxlLm5vdGlmaWNhdGlvbi5lcnJvcicsICdDT09LSUVTX05PVF9TVVBQT1JURUQnKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29va2llcyA9ICRkb2N1bWVudC5jb29raWUgJiYgJGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOycpIHx8IFtdO1xuICAgICAgZm9yKHZhciBpPTA7IGkgPCBjb29raWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB0aGlzQ29va2llID0gY29va2llc1tpXTtcbiAgICAgICAgd2hpbGUgKHRoaXNDb29raWUuY2hhckF0KDApID09PSAnICcpIHtcbiAgICAgICAgICB0aGlzQ29va2llID0gdGhpc0Nvb2tpZS5zdWJzdHJpbmcoMSx0aGlzQ29va2llLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXNDb29raWUuaW5kZXhPZihkZXJpdmVRdWFsaWZpZWRLZXkoa2V5KSArICc9JykgPT09IDApIHtcbiAgICAgICAgICB2YXIgc3RvcmVkVmFsdWVzID0gZGVjb2RlVVJJQ29tcG9uZW50KHRoaXNDb29raWUuc3Vic3RyaW5nKHByZWZpeC5sZW5ndGggKyBrZXkubGVuZ3RoICsgMSwgdGhpc0Nvb2tpZS5sZW5ndGgpKVxuICAgICAgICAgIHRyeXtcbiAgICAgICAgICAgIHZhciBvYmogPSBKU09OLnBhcnNlKHN0b3JlZFZhbHVlcyk7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUpzb24ob2JqKVxuICAgICAgICAgIH1jYXRjaChlKXtcbiAgICAgICAgICAgIHJldHVybiBzdG9yZWRWYWx1ZXNcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG5cbiAgICB2YXIgcmVtb3ZlRnJvbUNvb2tpZXMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBhZGRUb0Nvb2tpZXMoa2V5LG51bGwpO1xuICAgIH07XG5cbiAgICB2YXIgY2xlYXJBbGxGcm9tQ29va2llcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0aGlzQ29va2llID0gbnVsbCwgdGhpc0tleSA9IG51bGw7XG4gICAgICB2YXIgcHJlZml4TGVuZ3RoID0gcHJlZml4Lmxlbmd0aDtcbiAgICAgIHZhciBjb29raWVzID0gJGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOycpO1xuICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGNvb2tpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpc0Nvb2tpZSA9IGNvb2tpZXNbaV07XG5cbiAgICAgICAgd2hpbGUgKHRoaXNDb29raWUuY2hhckF0KDApID09PSAnICcpIHtcbiAgICAgICAgICB0aGlzQ29va2llID0gdGhpc0Nvb2tpZS5zdWJzdHJpbmcoMSwgdGhpc0Nvb2tpZS5sZW5ndGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGtleSA9IHRoaXNDb29raWUuc3Vic3RyaW5nKHByZWZpeExlbmd0aCwgdGhpc0Nvb2tpZS5pbmRleE9mKCc9JykpO1xuICAgICAgICByZW1vdmVGcm9tQ29va2llcyhrZXkpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgZ2V0U3RvcmFnZVR5cGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzdG9yYWdlVHlwZTtcbiAgICB9O1xuXG4gICAgLy8gQWRkIGEgbGlzdGVuZXIgb24gc2NvcGUgdmFyaWFibGUgdG8gc2F2ZSBpdHMgY2hhbmdlcyB0byBsb2NhbCBzdG9yYWdlXG4gICAgLy8gUmV0dXJuIGEgZnVuY3Rpb24gd2hpY2ggd2hlbiBjYWxsZWQgY2FuY2VscyBiaW5kaW5nXG4gICAgdmFyIGJpbmRUb1Njb3BlID0gZnVuY3Rpb24oc2NvcGUsIGtleSwgZGVmLCBsc0tleSkge1xuICAgICAgbHNLZXkgPSBsc0tleSB8fCBrZXk7XG4gICAgICB2YXIgdmFsdWUgPSBnZXRGcm9tTG9jYWxTdG9yYWdlKGxzS2V5KTtcblxuICAgICAgaWYgKHZhbHVlID09PSBudWxsICYmIGlzRGVmaW5lZChkZWYpKSB7XG4gICAgICAgIHZhbHVlID0gZGVmO1xuICAgICAgfSBlbHNlIGlmIChpc09iamVjdCh2YWx1ZSkgJiYgaXNPYmplY3QoZGVmKSkge1xuICAgICAgICB2YWx1ZSA9IGV4dGVuZChkZWYsIHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgJHBhcnNlKGtleSkuYXNzaWduKHNjb3BlLCB2YWx1ZSk7XG5cbiAgICAgIHJldHVybiBzY29wZS4kd2F0Y2goa2V5LCBmdW5jdGlvbihuZXdWYWwpIHtcbiAgICAgICAgYWRkVG9Mb2NhbFN0b3JhZ2UobHNLZXksIG5ld1ZhbCk7XG4gICAgICB9LCBpc09iamVjdChzY29wZVtrZXldKSk7XG4gICAgfTtcblxuICAgIC8vIFJldHVybiBsb2NhbFN0b3JhZ2VTZXJ2aWNlLmxlbmd0aFxuICAgIC8vIGlnbm9yZSBrZXlzIHRoYXQgbm90IG93bmVkXG4gICAgdmFyIGxlbmd0aE9mTG9jYWxTdG9yYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY291bnQgPSAwO1xuICAgICAgdmFyIHN0b3JhZ2UgPSAkd2luZG93W3N0b3JhZ2VUeXBlXTtcbiAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBzdG9yYWdlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmKHN0b3JhZ2Uua2V5KGkpLmluZGV4T2YocHJlZml4KSA9PT0gMCApIHtcbiAgICAgICAgICBjb3VudCsrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gY291bnQ7XG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICBpc1N1cHBvcnRlZDogYnJvd3NlclN1cHBvcnRzTG9jYWxTdG9yYWdlLFxuICAgICAgZ2V0U3RvcmFnZVR5cGU6IGdldFN0b3JhZ2VUeXBlLFxuICAgICAgc2V0OiBhZGRUb0xvY2FsU3RvcmFnZSxcbiAgICAgIGFkZDogYWRkVG9Mb2NhbFN0b3JhZ2UsIC8vREVQUkVDQVRFRFxuICAgICAgZ2V0OiBnZXRGcm9tTG9jYWxTdG9yYWdlLFxuICAgICAga2V5czogZ2V0S2V5c0ZvckxvY2FsU3RvcmFnZSxcbiAgICAgIHJlbW92ZTogcmVtb3ZlRnJvbUxvY2FsU3RvcmFnZSxcbiAgICAgIGNsZWFyQWxsOiBjbGVhckFsbEZyb21Mb2NhbFN0b3JhZ2UsXG4gICAgICBiaW5kOiBiaW5kVG9TY29wZSxcbiAgICAgIGRlcml2ZUtleTogZGVyaXZlUXVhbGlmaWVkS2V5LFxuICAgICAgbGVuZ3RoOiBsZW5ndGhPZkxvY2FsU3RvcmFnZSxcbiAgICAgIGNvb2tpZToge1xuICAgICAgICBpc1N1cHBvcnRlZDogYnJvd3NlclN1cHBvcnRzQ29va2llcyxcbiAgICAgICAgc2V0OiBhZGRUb0Nvb2tpZXMsXG4gICAgICAgIGFkZDogYWRkVG9Db29raWVzLCAvL0RFUFJFQ0FURURcbiAgICAgICAgZ2V0OiBnZXRGcm9tQ29va2llcyxcbiAgICAgICAgcmVtb3ZlOiByZW1vdmVGcm9tQ29va2llcyxcbiAgICAgICAgY2xlYXJBbGw6IGNsZWFyQWxsRnJvbUNvb2tpZXNcbiAgICAgIH1cbiAgICB9O1xuICB9XTtcbn0pO1xufSkoIHdpbmRvdywgd2luZG93LmFuZ3VsYXIgKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=